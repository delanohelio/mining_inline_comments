{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMTgzNDk5", "number": 14996, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowMzowOFrOEh4z7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzoxMDo0OVrOEh46SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTY5MjYwOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ComponentsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowMzowOFrOHPdKKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowMzowOFrOHPdKKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2ODQyNw==", "bodyText": "new ClientLogger(ComponentsTests.class)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14996#discussion_r485968427", "createdAt": "2020-09-09T23:03:08Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ComponentsTests.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.http.HttpClient;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.digitaltwins.core.serialization.BasicDigitalTwin;\n+import com.azure.digitaltwins.core.util.DigitalTwinsResponse;\n+import com.azure.digitaltwins.core.util.UpdateComponentRequestOptions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import java.net.HttpURLConnection;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class ComponentsTests extends ComponentsTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ModelsTestBase.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72396401d763a10e3351e62c2238d83002c48a01"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTY5NzkwOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ComponentsTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowNTo0MlrOHPdNYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzoxMTo0NlrOHPdU3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2OTI1MA==", "bodyText": "nit: \"update\" not \"upDate\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14996#discussion_r485969250", "createdAt": "2020-09-09T23:05:42Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ComponentsTests.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.http.HttpClient;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.digitaltwins.core.serialization.BasicDigitalTwin;\n+import com.azure.digitaltwins.core.util.DigitalTwinsResponse;\n+import com.azure.digitaltwins.core.util.UpdateComponentRequestOptions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import java.net.HttpURLConnection;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class ComponentsTests extends ComponentsTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ModelsTestBase.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void componentLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsClient client = getClient(httpClient, serviceVersion);\n+\n+        String wifiComponentName = \"wifiAccessPoint\";\n+\n+        String roomWithWifiTwinId = UniqueIdHelper.getUniqueDigitalTwinId(TestAssetDefaults.ROOM_WITH_WIFI_TWIN_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String roomWithWifiModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.ROOM_WITH_WIFI_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String wifiModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.WIFI_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+\n+        String modelWifi = TestAssetsHelper.getWifiModelPayload(wifiModelId);\n+        String modelRoomWithWifi = TestAssetsHelper.getRoomWithWifiModelPayload(roomWithWifiModelId, wifiModelId, wifiComponentName);\n+        String roomWithWifiTwin = TestAssetsHelper.getRoomWithWifiTwinPayload(roomWithWifiModelId, wifiComponentName);\n+\n+        List<String> modelsList = new ArrayList<>(Arrays.asList(modelWifi, modelRoomWithWifi));\n+\n+        try {\n+            // Create models and components to test the lifecycle.\n+            List<ModelData> createdList = client.createModels(modelsList);\n+            logger.info(\"Created {} models successfully\", createdList.size());\n+\n+            BasicDigitalTwin createdTwin = client.createDigitalTwin(roomWithWifiTwinId, roomWithWifiTwin,BasicDigitalTwin.class);\n+\n+            logger.info(\"Created {} twin successfully\", createdTwin.getId());\n+            assertEquals(createdTwin.getId(), roomWithWifiTwinId);\n+\n+            // Get the component\n+            Response<String> getComponentResponse = client.getComponentWithResponse(roomWithWifiTwinId, wifiComponentName, Context.NONE);\n+            assertEquals(getComponentResponse.getStatusCode(), HttpURLConnection.HTTP_OK);\n+\n+            // Update component\n+            DigitalTwinsResponse<Void> upDateComponentResponse = client.updateComponentWithResponse(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72396401d763a10e3351e62c2238d83002c48a01"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3MTE2NA==", "bodyText": ":)) good catch !", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14996#discussion_r485971164", "createdAt": "2020-09-09T23:11:46Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ComponentsTests.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.http.HttpClient;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.digitaltwins.core.serialization.BasicDigitalTwin;\n+import com.azure.digitaltwins.core.util.DigitalTwinsResponse;\n+import com.azure.digitaltwins.core.util.UpdateComponentRequestOptions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import java.net.HttpURLConnection;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class ComponentsTests extends ComponentsTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ModelsTestBase.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void componentLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsClient client = getClient(httpClient, serviceVersion);\n+\n+        String wifiComponentName = \"wifiAccessPoint\";\n+\n+        String roomWithWifiTwinId = UniqueIdHelper.getUniqueDigitalTwinId(TestAssetDefaults.ROOM_WITH_WIFI_TWIN_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String roomWithWifiModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.ROOM_WITH_WIFI_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String wifiModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.WIFI_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+\n+        String modelWifi = TestAssetsHelper.getWifiModelPayload(wifiModelId);\n+        String modelRoomWithWifi = TestAssetsHelper.getRoomWithWifiModelPayload(roomWithWifiModelId, wifiModelId, wifiComponentName);\n+        String roomWithWifiTwin = TestAssetsHelper.getRoomWithWifiTwinPayload(roomWithWifiModelId, wifiComponentName);\n+\n+        List<String> modelsList = new ArrayList<>(Arrays.asList(modelWifi, modelRoomWithWifi));\n+\n+        try {\n+            // Create models and components to test the lifecycle.\n+            List<ModelData> createdList = client.createModels(modelsList);\n+            logger.info(\"Created {} models successfully\", createdList.size());\n+\n+            BasicDigitalTwin createdTwin = client.createDigitalTwin(roomWithWifiTwinId, roomWithWifiTwin,BasicDigitalTwin.class);\n+\n+            logger.info(\"Created {} twin successfully\", createdTwin.getId());\n+            assertEquals(createdTwin.getId(), roomWithWifiTwinId);\n+\n+            // Get the component\n+            Response<String> getComponentResponse = client.getComponentWithResponse(roomWithWifiTwinId, wifiComponentName, Context.NONE);\n+            assertEquals(getComponentResponse.getStatusCode(), HttpURLConnection.HTTP_OK);\n+\n+            // Update component\n+            DigitalTwinsResponse<Void> upDateComponentResponse = client.updateComponentWithResponse(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2OTI1MA=="}, "originalCommit": {"oid": "72396401d763a10e3351e62c2238d83002c48a01"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTcwMTgxOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ComponentsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowNzoyNVrOHPdPkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowNzoyNVrOHPdPkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2OTgxMQ==", "bodyText": "To preserve the full stacktrace, how about:\nthrow new AssertionFailedError(\"Test clean up failed\", ex)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14996#discussion_r485969811", "createdAt": "2020-09-09T23:07:25Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ComponentsTests.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.http.HttpClient;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.digitaltwins.core.serialization.BasicDigitalTwin;\n+import com.azure.digitaltwins.core.util.DigitalTwinsResponse;\n+import com.azure.digitaltwins.core.util.UpdateComponentRequestOptions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import java.net.HttpURLConnection;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class ComponentsTests extends ComponentsTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ModelsTestBase.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void componentLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsClient client = getClient(httpClient, serviceVersion);\n+\n+        String wifiComponentName = \"wifiAccessPoint\";\n+\n+        String roomWithWifiTwinId = UniqueIdHelper.getUniqueDigitalTwinId(TestAssetDefaults.ROOM_WITH_WIFI_TWIN_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String roomWithWifiModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.ROOM_WITH_WIFI_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String wifiModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.WIFI_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+\n+        String modelWifi = TestAssetsHelper.getWifiModelPayload(wifiModelId);\n+        String modelRoomWithWifi = TestAssetsHelper.getRoomWithWifiModelPayload(roomWithWifiModelId, wifiModelId, wifiComponentName);\n+        String roomWithWifiTwin = TestAssetsHelper.getRoomWithWifiTwinPayload(roomWithWifiModelId, wifiComponentName);\n+\n+        List<String> modelsList = new ArrayList<>(Arrays.asList(modelWifi, modelRoomWithWifi));\n+\n+        try {\n+            // Create models and components to test the lifecycle.\n+            List<ModelData> createdList = client.createModels(modelsList);\n+            logger.info(\"Created {} models successfully\", createdList.size());\n+\n+            BasicDigitalTwin createdTwin = client.createDigitalTwin(roomWithWifiTwinId, roomWithWifiTwin,BasicDigitalTwin.class);\n+\n+            logger.info(\"Created {} twin successfully\", createdTwin.getId());\n+            assertEquals(createdTwin.getId(), roomWithWifiTwinId);\n+\n+            // Get the component\n+            Response<String> getComponentResponse = client.getComponentWithResponse(roomWithWifiTwinId, wifiComponentName, Context.NONE);\n+            assertEquals(getComponentResponse.getStatusCode(), HttpURLConnection.HTTP_OK);\n+\n+            // Update component\n+            DigitalTwinsResponse<Void> upDateComponentResponse = client.updateComponentWithResponse(\n+                roomWithWifiTwinId,\n+                wifiComponentName,\n+                TestAssetsHelper.getWifiComponentUpdatePayload(),\n+                new UpdateComponentRequestOptions(),\n+                Context.NONE);\n+\n+            assertEquals(upDateComponentResponse.getStatusCode(), HttpURLConnection.HTTP_NO_CONTENT);\n+        }\n+        // clean up\n+        finally {\n+            try\n+            {\n+                if (roomWithWifiTwinId != null)\n+                {\n+                    client.deleteDigitalTwin(roomWithWifiTwinId);\n+                }\n+                if (roomWithWifiModelId != null)\n+                {\n+                    client.deleteModel(roomWithWifiModelId);\n+                }\n+                if (wifiModelId != null)\n+                {\n+                    client.deleteModel(wifiModelId);\n+                }\n+            }\n+            catch (Exception ex)\n+            {\n+                fail(\"Test clean up failed: \" + ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72396401d763a10e3351e62c2238d83002c48a01"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTcwMzU3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowODoyMFrOHPdQnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowODoyMFrOHPdQnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3MDA3Ng==", "bodyText": "good idea moving this up to a higher level", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14996#discussion_r485970076", "createdAt": "2020-09-09T23:08:20Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsTestBase.java", "diffHunk": "@@ -72,6 +72,16 @@ protected DigitalTwinsClientBuilder getDigitalTwinsClientBuilder(HttpClient http\n         return builder;\n     }\n \n+    protected DigitalTwinsClient getClient(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        return getDigitalTwinsClientBuilder(httpClient, serviceVersion)\n+            .buildClient();\n+    }\n+\n+    protected DigitalTwinsAsyncClient getAsyncClient(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72396401d763a10e3351e62c2238d83002c48a01"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTcwODg5OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ComponentsAsyncTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzoxMDo0OVrOHPdTuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzoxMDo0OVrOHPdTuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3MDg3Mw==", "bodyText": "Try to preserve the stacktrace here, too", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14996#discussion_r485970873", "createdAt": "2020-09-09T23:10:49Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ComponentsAsyncTests.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.serialization.BasicDigitalTwin;\n+import com.azure.digitaltwins.core.util.UpdateComponentRequestOptions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import reactor.test.StepVerifier;\n+\n+import java.net.HttpURLConnection;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+\n+public class ComponentsAsyncTests extends ComponentsTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ModelsAsyncTest.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void componentLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+\n+        String wifiComponentName = \"wifiAccessPoint\";\n+\n+        String roomWithWifiTwinId = UniqueIdHelper.getUniqueDigitalTwinId(TestAssetDefaults.ROOM_WITH_WIFI_TWIN_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String roomWithWifiModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.ROOM_WITH_WIFI_MODEL_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String wifiModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.WIFI_MODEL_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+\n+        String modelWifi = TestAssetsHelper.getWifiModelPayload(wifiModelId);\n+        String modelRoomWithWifi = TestAssetsHelper.getRoomWithWifiModelPayload(roomWithWifiModelId, wifiModelId, wifiComponentName);\n+        String roomWithWifiTwin = TestAssetsHelper.getRoomWithWifiTwinPayload(roomWithWifiModelId, wifiComponentName);\n+        List<String> modelsList = new ArrayList<>(Arrays.asList(modelWifi, modelRoomWithWifi));\n+\n+        try {\n+            // Create models and components to test the lifecycle.\n+            StepVerifier\n+                .create(asyncClient.createModels(modelsList))\n+                .assertNext(createResponseList -> logger.info(\"Created {} models successfully\", createResponseList.size()))\n+                .verifyComplete();\n+\n+            StepVerifier.create(asyncClient.createDigitalTwin(roomWithWifiTwinId, roomWithWifiTwin, BasicDigitalTwin.class))\n+                .assertNext(createdTwin -> {\n+                    assertEquals(createdTwin.getId(), roomWithWifiTwinId);\n+                    logger.info(\"Created {} twin successfully\", createdTwin.getId());\n+                })\n+                .verifyComplete();\n+\n+            StepVerifier.create(asyncClient.getComponentWithResponse(roomWithWifiTwinId, wifiComponentName))\n+                .assertNext(createResponse -> {\n+                    assertEquals(createResponse.getStatusCode(), HttpURLConnection.HTTP_OK);\n+                    logger.info(\"Got component successfully\");\n+\n+                })\n+                .verifyComplete();\n+\n+            StepVerifier.create(asyncClient.updateComponentWithResponse(roomWithWifiTwinId, wifiComponentName, TestAssetsHelper.getWifiComponentUpdatePayload(), new UpdateComponentRequestOptions()))\n+                .assertNext(updateResponse -> {\n+                    assertEquals(updateResponse.getStatusCode(), HttpURLConnection.HTTP_NO_CONTENT);\n+                    logger.info(\"Updated component successfully\");\n+                })\n+                .verifyComplete();\n+        }\n+        finally {\n+            try\n+            {\n+                if (roomWithWifiTwinId != null)\n+                {\n+                    asyncClient.deleteDigitalTwin(roomWithWifiTwinId).block();\n+                }\n+                if (roomWithWifiModelId != null)\n+                {\n+                    asyncClient.deleteModel(roomWithWifiModelId).block();\n+                }\n+                if (wifiModelId != null)\n+                {\n+                    asyncClient.deleteModel(wifiModelId).block();\n+                }\n+            }\n+            catch (Exception ex)\n+            {\n+                fail(\"Test clean up failed: \" + ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72396401d763a10e3351e62c2238d83002c48a01"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1157, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}