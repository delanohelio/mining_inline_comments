{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNzQxMzMx", "number": 14341, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo1NzowN1rOEbChCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo0MTozMVrOEbDWLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzg4MjMzOnYy", "diffSide": "LEFT", "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo1NzowN1rOHE0f9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo1NzowN1rOHE0f9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxNjUwMg==", "bodyText": "The groupId is inherited from the parent, so we don't need to declare it here as well", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#discussion_r474816502", "createdAt": "2020-08-21T16:57:07Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "diffHunk": "@@ -11,7 +11,6 @@\n     <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n   </parent>\n \n-    <groupId>com.azure</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzg5OTgwOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowMjo0NVrOHE0qiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToxODoyNlrOHE4pZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxOTIxMQ==", "bodyText": "Each?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#discussion_r474819211", "createdAt": "2020-08-21T17:02:45Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -177,98 +177,95 @@ TODO:\n ## Relationships\n <details><summary><b>Terminology</b></summary>\n \n-Relationship: A named set of outgoing edges part of a Digital Twin persisted state.\n+Relationships: A named set of outgoing edges/relationships part of a Digital Twin persisted state.\n \n-Edge: (aka a \"Relationship Edge\") an individual edge in the Digital Twin relationship graph, ie. a tuple containing:\n+Each Relationship: (aka a \"Relationship Edge\") an individual edge in the Digital Twin relationship graph, ie. a tuple containing:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4NDQ1Mw==", "bodyText": "removed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#discussion_r474884453", "createdAt": "2020-08-21T19:18:26Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -177,98 +177,95 @@ TODO:\n ## Relationships\n <details><summary><b>Terminology</b></summary>\n \n-Relationship: A named set of outgoing edges part of a Digital Twin persisted state.\n+Relationships: A named set of outgoing edges/relationships part of a Digital Twin persisted state.\n \n-Edge: (aka a \"Relationship Edge\") an individual edge in the Digital Twin relationship graph, ie. a tuple containing:\n+Each Relationship: (aka a \"Relationship Edge\") an individual edge in the Digital Twin relationship graph, ie. a tuple containing:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxOTIxMQ=="}, "originalCommit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzkwMTk0OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowMzozM1rOHE0r7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowMzozM1rOHE0r7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxOTU2NQ==", "bodyText": "Probably should just mention that in Graph these are called edges, and then don't use the word Edge again. Let's just call it what it is called in the API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#discussion_r474819565", "createdAt": "2020-08-21T17:03:33Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -177,98 +177,95 @@ TODO:\n ## Relationships\n <details><summary><b>Terminology</b></summary>\n \n-Relationship: A named set of outgoing edges part of a Digital Twin persisted state.\n+Relationships: A named set of outgoing edges/relationships part of a Digital Twin persisted state.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzkyMDIzOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowOTo0MVrOHE02-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowOTo0MVrOHE02-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjM5NA==", "bodyText": "small S in relationship", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#discussion_r474822394", "createdAt": "2020-08-21T17:09:41Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -177,98 +177,95 @@ TODO:\n ## Relationships\n <details><summary><b>Terminology</b></summary>\n \n-Relationship: A named set of outgoing edges part of a Digital Twin persisted state.\n+Relationships: A named set of outgoing edges/relationships part of a Digital Twin persisted state.\n \n-Edge: (aka a \"Relationship Edge\") an individual edge in the Digital Twin relationship graph, ie. a tuple containing:\n+Each Relationship: (aka a \"Relationship Edge\") an individual edge in the Digital Twin relationship graph, ie. a tuple containing:\n     \n-\tEdgeId (Unique identifier of this edge within the context of the source Digital Twin)\n+\tRelationshipId (Unique identifier of this edge within the context of the source Digital Twin)\n \tSourceId (Id of the source Digital Twin) \n \tTargetId (Id of the target Digital Twin)\n-\trelationship name (User defined string such as \"contains\", \"hasDoorTo\", \"isNextTo\")\n+\tRelationshipName (User defined string such as \"contains\", \"hasDoorTo\", \"isNextTo\")\n \t0 to many user defined properties (ie: \"OccupancyLimit\", \"temperature\")\n \n-Each Edge is identified by its EdgeId. An EdgeId must be unique within the scope of the source Digital Twin.\n+Each relationship in a digital twin is identified by its RelationshipId. An RelationshipId must be unique within the scope of the source Digital Twin. The combination of SourceId and RelationshipId must be unique within the scope of the service.\n </details>\n \n <details><summary><b>Examples</b></summary>\n-An edge that signifies that room1 has a door to room2, and that it is open, would look like\n+A relationship that signifies that room1 has a door to room2, and that it is open, would look like\n \t\n-```csharp\n+```json\n {\n-    \"$edgeId\": \"Door1\",\n+    \"$relationshipId\": \"Door1\",\n     \"$sourceId\": \"Room1\",\n     \"$targetId\": \"Room2\",\n-    \"$relationship\": \"hasDoorTo\",\n+    \"$relationshipName\": \"hasDoorTo\",\n     \"doorStatus\": \"open\"\n }\n ```\n \t\n-An edge that signifies that Room 1 contains a thermostat would look like\n+A relationship that signifies that Room 1 contains a thermostat would look like\n \n-```csharp\n+```json\n {\n-\t\"$edgeId\" : \"ThermostatEdge1\",\n+\t\"$relationshipId\" : \"ThermostatEdge1\",\n \t\"$sourceId\" : \"Room1\",\n \t\"$targetId\" : \"Thermostat1\",\n-\t\"$relationship\" : \"contains\",\n+\t\"$relationshipName\" : \"contains\",\n \t\"installDate\" : \"2019-4-1\",\n \t\"replaceBatteryDate\" : \"2020-4-1\"\n }\n ```\n \n-When getting a list of edges (operations like \"get all edges for a Digital Twin\" or \"get all edges for a Digital Twin with a given relationshipName\"), the SDK will return a string in the below format:\n+When getting a list of relationships (operations like \"get all relationships for a Digital Twin\" or \"get all relationships for a Digital Twin with a given relationshipName\"), the client library will return a string in the below format:\n \n-```csharp\n+```json\n {\n   \"value\": [\n     {\n-      \"$edgeId\": \"Door1\",\n+      \"$relationshipId\": \"Door1\",\n       \"$sourceId\": \"Room1\",\n       \"$targetId\": \"Room2\",\n-      \"$relationship\": \"hasDoorTo\",\n+      \"$relationshipName\": \"hasDoorTo\",\n       \"doorStatus\": \"open\"\n     },\n     {\n-      \"$edgeId\": \"Door2\",\n+      \"$relationshipId\": \"Door2\",\n       \"$sourceId\": \"Room1\",\n       \"$targetId\": \"Room3\",\n-      \"$relationship\": \"hasDoorTo\",\n+      \"$relationshipName\": \"hasDoorTo\",\n       \"doorStatus\": \"closed\"\n     }\n   ],\n   \"nextLink\": \"url-to-next-page\"\n }\n ```\n \n-When creating a relationship edge, the edge string does not follow the above format. The rest endpoint to create a relationship edge contains the sourceId, relationshipName, and the edgeId, so the payload only needs to specify the targetId and any application properties, as seen below:\n-```csharp\n+When creating a relationship, the edge string does not follow the above format. The rest endpoint to create a relationship edge contains the sourceId, relationshipName, and the relationShipId, so the payload only needs to specify the targetId and any application properties, as seen below:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzkyMjA0OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxMDoxM1rOHE04BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToyMDozM1rOHE4wHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjY2MA==", "bodyText": "I thought the paths had to have a / prefix.\nAlso, ADT doesn't support nested properties yet, right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#discussion_r474822660", "createdAt": "2020-08-21T17:10:13Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -177,98 +177,95 @@ TODO:\n ## Relationships\n <details><summary><b>Terminology</b></summary>\n \n-Relationship: A named set of outgoing edges part of a Digital Twin persisted state.\n+Relationships: A named set of outgoing edges/relationships part of a Digital Twin persisted state.\n \n-Edge: (aka a \"Relationship Edge\") an individual edge in the Digital Twin relationship graph, ie. a tuple containing:\n+Each Relationship: (aka a \"Relationship Edge\") an individual edge in the Digital Twin relationship graph, ie. a tuple containing:\n     \n-\tEdgeId (Unique identifier of this edge within the context of the source Digital Twin)\n+\tRelationshipId (Unique identifier of this edge within the context of the source Digital Twin)\n \tSourceId (Id of the source Digital Twin) \n \tTargetId (Id of the target Digital Twin)\n-\trelationship name (User defined string such as \"contains\", \"hasDoorTo\", \"isNextTo\")\n+\tRelationshipName (User defined string such as \"contains\", \"hasDoorTo\", \"isNextTo\")\n \t0 to many user defined properties (ie: \"OccupancyLimit\", \"temperature\")\n \n-Each Edge is identified by its EdgeId. An EdgeId must be unique within the scope of the source Digital Twin.\n+Each relationship in a digital twin is identified by its RelationshipId. An RelationshipId must be unique within the scope of the source Digital Twin. The combination of SourceId and RelationshipId must be unique within the scope of the service.\n </details>\n \n <details><summary><b>Examples</b></summary>\n-An edge that signifies that room1 has a door to room2, and that it is open, would look like\n+A relationship that signifies that room1 has a door to room2, and that it is open, would look like\n \t\n-```csharp\n+```json\n {\n-    \"$edgeId\": \"Door1\",\n+    \"$relationshipId\": \"Door1\",\n     \"$sourceId\": \"Room1\",\n     \"$targetId\": \"Room2\",\n-    \"$relationship\": \"hasDoorTo\",\n+    \"$relationshipName\": \"hasDoorTo\",\n     \"doorStatus\": \"open\"\n }\n ```\n \t\n-An edge that signifies that Room 1 contains a thermostat would look like\n+A relationship that signifies that Room 1 contains a thermostat would look like\n \n-```csharp\n+```json\n {\n-\t\"$edgeId\" : \"ThermostatEdge1\",\n+\t\"$relationshipId\" : \"ThermostatEdge1\",\n \t\"$sourceId\" : \"Room1\",\n \t\"$targetId\" : \"Thermostat1\",\n-\t\"$relationship\" : \"contains\",\n+\t\"$relationshipName\" : \"contains\",\n \t\"installDate\" : \"2019-4-1\",\n \t\"replaceBatteryDate\" : \"2020-4-1\"\n }\n ```\n \n-When getting a list of edges (operations like \"get all edges for a Digital Twin\" or \"get all edges for a Digital Twin with a given relationshipName\"), the SDK will return a string in the below format:\n+When getting a list of relationships (operations like \"get all relationships for a Digital Twin\" or \"get all relationships for a Digital Twin with a given relationshipName\"), the client library will return a string in the below format:\n \n-```csharp\n+```json\n {\n   \"value\": [\n     {\n-      \"$edgeId\": \"Door1\",\n+      \"$relationshipId\": \"Door1\",\n       \"$sourceId\": \"Room1\",\n       \"$targetId\": \"Room2\",\n-      \"$relationship\": \"hasDoorTo\",\n+      \"$relationshipName\": \"hasDoorTo\",\n       \"doorStatus\": \"open\"\n     },\n     {\n-      \"$edgeId\": \"Door2\",\n+      \"$relationshipId\": \"Door2\",\n       \"$sourceId\": \"Room1\",\n       \"$targetId\": \"Room3\",\n-      \"$relationship\": \"hasDoorTo\",\n+      \"$relationshipName\": \"hasDoorTo\",\n       \"doorStatus\": \"closed\"\n     }\n   ],\n   \"nextLink\": \"url-to-next-page\"\n }\n ```\n \n-When creating a relationship edge, the edge string does not follow the above format. The rest endpoint to create a relationship edge contains the sourceId, relationshipName, and the edgeId, so the payload only needs to specify the targetId and any application properties, as seen below:\n-```csharp\n+When creating a relationship, the edge string does not follow the above format. The rest endpoint to create a relationship edge contains the sourceId, relationshipName, and the relationShipId, so the payload only needs to specify the targetId and any application properties, as seen below:\n+```json\n {\n-    \"edge\": \n-    {\n         \"$targetId\": \"myTargetTwin\",\n         \"myApplicationProperty1\": 1,\n         \"myApplicationProperty2\": \"some value\"\n-    }\n }\n ```\n \n When updating a relationship edge, the patch string follows the below format\n-```csharp\n+```json\n {\n-\t\"patchDocument\": \n-\t[\n-\t    {\n-\t        \"op\": \"replace\",\n-\t        \"path\": \"property1\",\n-\t        \"value\": 1\n-\t    },\n-\t\t{\n-\t        \"op\": \"add\",\n-\t        \"path\": \"property2/subProperty1\",\n-\t        \"value\": 1\n-\t    },\n-\t    {\n-\t        \"op\": \"remove\",\n+    \"patchDocument\": \n+    [\n+        {\n+            \"op\": \"replace\",\n+            \"path\": \"property1\",\n+            \"value\": 1\n+        },\n+        {\n+            \"op\": \"add\",\n+            \"path\": \"property2/subProperty1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4NjE3Mw==", "bodyText": "Correct, there is no support for nested properties right now. I copied this over from the .net repo, I'll update this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#discussion_r474886173", "createdAt": "2020-08-21T19:20:33Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -177,98 +177,95 @@ TODO:\n ## Relationships\n <details><summary><b>Terminology</b></summary>\n \n-Relationship: A named set of outgoing edges part of a Digital Twin persisted state.\n+Relationships: A named set of outgoing edges/relationships part of a Digital Twin persisted state.\n \n-Edge: (aka a \"Relationship Edge\") an individual edge in the Digital Twin relationship graph, ie. a tuple containing:\n+Each Relationship: (aka a \"Relationship Edge\") an individual edge in the Digital Twin relationship graph, ie. a tuple containing:\n     \n-\tEdgeId (Unique identifier of this edge within the context of the source Digital Twin)\n+\tRelationshipId (Unique identifier of this edge within the context of the source Digital Twin)\n \tSourceId (Id of the source Digital Twin) \n \tTargetId (Id of the target Digital Twin)\n-\trelationship name (User defined string such as \"contains\", \"hasDoorTo\", \"isNextTo\")\n+\tRelationshipName (User defined string such as \"contains\", \"hasDoorTo\", \"isNextTo\")\n \t0 to many user defined properties (ie: \"OccupancyLimit\", \"temperature\")\n \n-Each Edge is identified by its EdgeId. An EdgeId must be unique within the scope of the source Digital Twin.\n+Each relationship in a digital twin is identified by its RelationshipId. An RelationshipId must be unique within the scope of the source Digital Twin. The combination of SourceId and RelationshipId must be unique within the scope of the service.\n </details>\n \n <details><summary><b>Examples</b></summary>\n-An edge that signifies that room1 has a door to room2, and that it is open, would look like\n+A relationship that signifies that room1 has a door to room2, and that it is open, would look like\n \t\n-```csharp\n+```json\n {\n-    \"$edgeId\": \"Door1\",\n+    \"$relationshipId\": \"Door1\",\n     \"$sourceId\": \"Room1\",\n     \"$targetId\": \"Room2\",\n-    \"$relationship\": \"hasDoorTo\",\n+    \"$relationshipName\": \"hasDoorTo\",\n     \"doorStatus\": \"open\"\n }\n ```\n \t\n-An edge that signifies that Room 1 contains a thermostat would look like\n+A relationship that signifies that Room 1 contains a thermostat would look like\n \n-```csharp\n+```json\n {\n-\t\"$edgeId\" : \"ThermostatEdge1\",\n+\t\"$relationshipId\" : \"ThermostatEdge1\",\n \t\"$sourceId\" : \"Room1\",\n \t\"$targetId\" : \"Thermostat1\",\n-\t\"$relationship\" : \"contains\",\n+\t\"$relationshipName\" : \"contains\",\n \t\"installDate\" : \"2019-4-1\",\n \t\"replaceBatteryDate\" : \"2020-4-1\"\n }\n ```\n \n-When getting a list of edges (operations like \"get all edges for a Digital Twin\" or \"get all edges for a Digital Twin with a given relationshipName\"), the SDK will return a string in the below format:\n+When getting a list of relationships (operations like \"get all relationships for a Digital Twin\" or \"get all relationships for a Digital Twin with a given relationshipName\"), the client library will return a string in the below format:\n \n-```csharp\n+```json\n {\n   \"value\": [\n     {\n-      \"$edgeId\": \"Door1\",\n+      \"$relationshipId\": \"Door1\",\n       \"$sourceId\": \"Room1\",\n       \"$targetId\": \"Room2\",\n-      \"$relationship\": \"hasDoorTo\",\n+      \"$relationshipName\": \"hasDoorTo\",\n       \"doorStatus\": \"open\"\n     },\n     {\n-      \"$edgeId\": \"Door2\",\n+      \"$relationshipId\": \"Door2\",\n       \"$sourceId\": \"Room1\",\n       \"$targetId\": \"Room3\",\n-      \"$relationship\": \"hasDoorTo\",\n+      \"$relationshipName\": \"hasDoorTo\",\n       \"doorStatus\": \"closed\"\n     }\n   ],\n   \"nextLink\": \"url-to-next-page\"\n }\n ```\n \n-When creating a relationship edge, the edge string does not follow the above format. The rest endpoint to create a relationship edge contains the sourceId, relationshipName, and the edgeId, so the payload only needs to specify the targetId and any application properties, as seen below:\n-```csharp\n+When creating a relationship, the edge string does not follow the above format. The rest endpoint to create a relationship edge contains the sourceId, relationshipName, and the relationShipId, so the payload only needs to specify the targetId and any application properties, as seen below:\n+```json\n {\n-    \"edge\": \n-    {\n         \"$targetId\": \"myTargetTwin\",\n         \"myApplicationProperty1\": 1,\n         \"myApplicationProperty2\": \"some value\"\n-    }\n }\n ```\n \n When updating a relationship edge, the patch string follows the below format\n-```csharp\n+```json\n {\n-\t\"patchDocument\": \n-\t[\n-\t    {\n-\t        \"op\": \"replace\",\n-\t        \"path\": \"property1\",\n-\t        \"value\": 1\n-\t    },\n-\t\t{\n-\t        \"op\": \"add\",\n-\t        \"path\": \"property2/subProperty1\",\n-\t        \"value\": 1\n-\t    },\n-\t    {\n-\t        \"op\": \"remove\",\n+    \"patchDocument\": \n+    [\n+        {\n+            \"op\": \"replace\",\n+            \"path\": \"property1\",\n+            \"value\": 1\n+        },\n+        {\n+            \"op\": \"add\",\n+            \"path\": \"property2/subProperty1\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjY2MA=="}, "originalCommit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODAxODM3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/AsyncSample.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo0MTozMVrOHE1zRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToyNDowOVrOHE47Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzNzgyOA==", "bodyText": "What is the semaphore for?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#discussion_r474837828", "createdAt": "2020-08-21T17:41:31Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/AsyncSample.java", "diffHunk": "@@ -27,16 +38,107 @@ public static void main(String[] args) throws InterruptedException\n         DigitalTwinsAsyncClient client = new DigitalTwinsClientBuilder()\n             .tokenCredential(tokenCredential)\n             .endpoint(endpoint)\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n             .buildAsyncClient();\n \n-        Mono<DigitalTwinsGetByIdResponse> asyncResponse = client.getDigitalTwin(digitalTwinId);\n+        // Create the source and target twins\n+        final Semaphore createTwinsSemaphore = new Semaphore(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzOTMyNA==", "bodyText": "I gather that is how continuation is known when an \"async\" method is complete. That must be standard, eh?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#discussion_r474839324", "createdAt": "2020-08-21T17:44:49Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/AsyncSample.java", "diffHunk": "@@ -27,16 +38,107 @@ public static void main(String[] args) throws InterruptedException\n         DigitalTwinsAsyncClient client = new DigitalTwinsClientBuilder()\n             .tokenCredential(tokenCredential)\n             .endpoint(endpoint)\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n             .buildAsyncClient();\n \n-        Mono<DigitalTwinsGetByIdResponse> asyncResponse = client.getDigitalTwin(digitalTwinId);\n+        // Create the source and target twins\n+        final Semaphore createTwinsSemaphore = new Semaphore(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzNzgyOA=="}, "originalCommit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4OTAzNA==", "bodyText": "yeah, since you subscribe to these async APIs, the calling thread will resume irrespective of the state of the async API call.\nSince our subsequent operations are dependent on the previous operations, we have to \"block\" the thread until the async call completes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#discussion_r474889034", "createdAt": "2020-08-21T19:24:09Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/AsyncSample.java", "diffHunk": "@@ -27,16 +38,107 @@ public static void main(String[] args) throws InterruptedException\n         DigitalTwinsAsyncClient client = new DigitalTwinsClientBuilder()\n             .tokenCredential(tokenCredential)\n             .endpoint(endpoint)\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n             .buildAsyncClient();\n \n-        Mono<DigitalTwinsGetByIdResponse> asyncResponse = client.getDigitalTwin(digitalTwinId);\n+        // Create the source and target twins\n+        final Semaphore createTwinsSemaphore = new Semaphore(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzNzgyOA=="}, "originalCommit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1586, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}