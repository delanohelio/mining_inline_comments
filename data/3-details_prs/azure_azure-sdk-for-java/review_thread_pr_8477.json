{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NzcyNzk3", "number": 8477, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODowN1rODi4Avg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxODo0ODoyOFrODj6lbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1ODcwOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODowN1rOFuXk5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODowN1rOFuXk5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTA5Mg==", "bodyText": "Shouldn't need to try catch here given the overload being called already does this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8477#discussion_r384165092", "createdAt": "2020-02-25T22:28:07Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "diffHunk": "@@ -152,6 +153,57 @@ public ShareFileAsyncClient getFileClient(String filePath) {\n             serviceVersion);\n     }\n \n+    /**\n+     * Gets if the share this client represents exists in the cloud.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareAsyncClient.exists}\n+     *\n+     * @return true if the share exists, false if it doesn't\n+     */\n+    public Mono<Boolean> exists() {\n+        try {\n+            return existsWithResponse().flatMap(FluxUtil::toMono);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12afae04565c00a4d463f3ca4d2be5b7f4267a2c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk2MTMxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODo1NlrOFuXmYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODo1NlrOFuXmYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTQ3NQ==", "bodyText": "For readability mind putting the entire second conditional on the next line?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8477#discussion_r384165475", "createdAt": "2020-02-25T22:28:56Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "diffHunk": "@@ -152,6 +153,57 @@ public ShareFileAsyncClient getFileClient(String filePath) {\n             serviceVersion);\n     }\n \n+    /**\n+     * Gets if the share this client represents exists in the cloud.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareAsyncClient.exists}\n+     *\n+     * @return true if the share exists, false if it doesn't\n+     */\n+    public Mono<Boolean> exists() {\n+        try {\n+            return existsWithResponse().flatMap(FluxUtil::toMono);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Gets if the share this client represents exists in the cloud.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareAsyncClient.existsWithResponse}\n+     *\n+     * @return true if the share exists, false if it doesn't\n+     */\n+    public Mono<Response<Boolean>> existsWithResponse() {\n+        try {\n+            return withContext(this::existsWithResponse);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Gets if the share this client represents exists in the cloud.\n+     *\n+     * @return true if the share exists, false if it doesn't\n+     */\n+    Mono<Response<Boolean>> existsWithResponse(Context context) {\n+        return this.getPropertiesWithResponse(context)\n+            .map(cp -> (Response<Boolean>) new SimpleResponse<>(cp, true))\n+            .onErrorResume(t -> t instanceof ShareStorageException && ((ShareStorageException) t).getStatusCode()\n+                    == 404,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12afae04565c00a4d463f3ca4d2be5b7f4267a2c"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk2MzUwOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareDirectoryAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyOTo0NFrOFuXnwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyOTo0NFrOFuXnwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTgyNQ==", "bodyText": "Same comment about non-needed try/catch", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8477#discussion_r384165825", "createdAt": "2020-02-25T22:29:44Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareDirectoryAsyncClient.java", "diffHunk": "@@ -158,6 +159,58 @@ public ShareDirectoryAsyncClient getSubdirectoryClient(String subdirectoryName)\n             serviceVersion);\n     }\n \n+    /**\n+     * Gets if the directory this client represents exists in the cloud.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareDirectoryAsyncClient.exists}\n+     *\n+     * @return true if the directory exists, false if it doesn't\n+     */\n+    public Mono<Boolean> exists() {\n+        try {\n+            return existsWithResponse().flatMap(FluxUtil::toMono);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12afae04565c00a4d463f3ca4d2be5b7f4267a2c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk2NTEwOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareDirectoryAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjozMDoxNVrOFuXosw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjozMDoxNVrOFuXosw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NjA2Nw==", "bodyText": "Same comment about second conditional readability.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8477#discussion_r384166067", "createdAt": "2020-02-25T22:30:15Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareDirectoryAsyncClient.java", "diffHunk": "@@ -158,6 +159,58 @@ public ShareDirectoryAsyncClient getSubdirectoryClient(String subdirectoryName)\n             serviceVersion);\n     }\n \n+    /**\n+     * Gets if the directory this client represents exists in the cloud.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareDirectoryAsyncClient.exists}\n+     *\n+     * @return true if the directory exists, false if it doesn't\n+     */\n+    public Mono<Boolean> exists() {\n+        try {\n+            return existsWithResponse().flatMap(FluxUtil::toMono);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Gets if the directory this client represents exists in the cloud.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareDirectoryAsyncClient.existsWithResponse}\n+     *\n+     * @return true if the directory exists, false if it doesn't\n+     */\n+    public Mono<Response<Boolean>> existsWithResponse() {\n+        try {\n+            return withContext(this::existsWithResponse);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Gets if the directory this client represents exists in the cloud.\n+     *\n+     * @return true if the directory exists, false if it doesn't\n+     */\n+    Mono<Response<Boolean>> existsWithResponse(Context context) {\n+        return this.getPropertiesWithResponse(context)\n+            .map(cp -> (Response<Boolean>) new SimpleResponse<>(cp, true))\n+            .onErrorResume(t ->\n+                    t instanceof ShareStorageException && ((ShareStorageException) t).getStatusCode()\n+                    == 404,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12afae04565c00a4d463f3ca4d2be5b7f4267a2c"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk2NzU4OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjozMToxMFrOFuXqQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjozMToxMFrOFuXqQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NjQ2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return true if the share exists, false if it doesn't\n          \n          \n            \n                 * @return Flag indicating existence of the share.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8477#discussion_r384166464", "createdAt": "2020-02-25T22:31:10Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "diffHunk": "@@ -152,6 +153,57 @@ public ShareFileAsyncClient getFileClient(String filePath) {\n             serviceVersion);\n     }\n \n+    /**\n+     * Gets if the share this client represents exists in the cloud.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareAsyncClient.exists}\n+     *\n+     * @return true if the share exists, false if it doesn't", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12afae04565c00a4d463f3ca4d2be5b7f4267a2c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk2ODk5OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjozMTo0M1rOFuXrLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjozMTo0M1rOFuXrLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NjcwMg==", "bodyText": "This would differ from the other Javadocs but I feel it reads better.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Gets if the share this client represents exists in the cloud.\n          \n          \n            \n                 * Determines if the share this client represents exists in the cloud.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8477#discussion_r384166702", "createdAt": "2020-02-25T22:31:43Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "diffHunk": "@@ -152,6 +153,57 @@ public ShareFileAsyncClient getFileClient(String filePath) {\n             serviceVersion);\n     }\n \n+    /**\n+     * Gets if the share this client represents exists in the cloud.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12afae04565c00a4d463f3ca4d2be5b7f4267a2c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk3MjMwOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareFileAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjozMjo0OVrOFuXtKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzozMzoyNlrOFuZM3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NzIwOQ==", "bodyText": "Does this method return HttpResponseException in some cases? Just noticed this check differs from the others.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8477#discussion_r384167209", "createdAt": "2020-02-25T22:32:49Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareFileAsyncClient.java", "diffHunk": "@@ -159,6 +161,61 @@ public ShareServiceVersion getServiceVersion() {\n         return serviceVersion;\n     }\n \n+    /**\n+     * Gets if the file this client represents exists in the cloud.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareFileAsyncClient.exists}\n+     *\n+     * @return true if the file exists, false if it doesn't\n+     */\n+    public Mono<Boolean> exists() {\n+        try {\n+            return existsWithResponse().flatMap(FluxUtil::toMono);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Gets if the file this client represents exists in the cloud.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse}\n+     *\n+     * @return true if the file exists, false if it doesn't\n+     */\n+    public Mono<Response<Boolean>> existsWithResponse() {\n+        try {\n+            return withContext(this::existsWithResponse);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Gets if the file this client represents exists in the cloud.\n+     *\n+     * @return true if the file exists, false if it doesn't\n+     */\n+    Mono<Response<Boolean>> existsWithResponse(Context context) {\n+        return this.getPropertiesWithResponse(null, context)\n+            .map(cp -> (Response<Boolean>) new SimpleResponse<>(cp, true))\n+            .onErrorResume(t ->\n+                    (t instanceof ShareStorageException && ((ShareStorageException) t).getStatusCode() == 404)\n+                || (t instanceof HttpResponseException && ((HttpResponseException) t).getResponse().getStatusCode()\n+                        == 404),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12afae04565c00a4d463f3ca4d2be5b7f4267a2c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE4NzQyNQ==", "bodyText": "I think our serialization of exceptions happens depending on the XML returned by the service. The file getProperties request is a HEAD request so it doesnt actually return a body and we fail to serialize it - that's why the HttpResponseException is returned.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8477#discussion_r384187425", "createdAt": "2020-02-25T23:22:43Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareFileAsyncClient.java", "diffHunk": "@@ -159,6 +161,61 @@ public ShareServiceVersion getServiceVersion() {\n         return serviceVersion;\n     }\n \n+    /**\n+     * Gets if the file this client represents exists in the cloud.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareFileAsyncClient.exists}\n+     *\n+     * @return true if the file exists, false if it doesn't\n+     */\n+    public Mono<Boolean> exists() {\n+        try {\n+            return existsWithResponse().flatMap(FluxUtil::toMono);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Gets if the file this client represents exists in the cloud.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse}\n+     *\n+     * @return true if the file exists, false if it doesn't\n+     */\n+    public Mono<Response<Boolean>> existsWithResponse() {\n+        try {\n+            return withContext(this::existsWithResponse);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Gets if the file this client represents exists in the cloud.\n+     *\n+     * @return true if the file exists, false if it doesn't\n+     */\n+    Mono<Response<Boolean>> existsWithResponse(Context context) {\n+        return this.getPropertiesWithResponse(null, context)\n+            .map(cp -> (Response<Boolean>) new SimpleResponse<>(cp, true))\n+            .onErrorResume(t ->\n+                    (t instanceof ShareStorageException && ((ShareStorageException) t).getStatusCode() == 404)\n+                || (t instanceof HttpResponseException && ((HttpResponseException) t).getResponse().getStatusCode()\n+                        == 404),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NzIwOQ=="}, "originalCommit": {"oid": "12afae04565c00a4d463f3ca4d2be5b7f4267a2c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5MTcwOA==", "bodyText": "Gotcha, that is an interesting thing to know, wonder if this is a gap of functionality in the de-serialization logic that we should close the gap on. If you have a quick repo on hand mind filing an issue on this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8477#discussion_r384191708", "createdAt": "2020-02-25T23:33:26Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareFileAsyncClient.java", "diffHunk": "@@ -159,6 +161,61 @@ public ShareServiceVersion getServiceVersion() {\n         return serviceVersion;\n     }\n \n+    /**\n+     * Gets if the file this client represents exists in the cloud.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareFileAsyncClient.exists}\n+     *\n+     * @return true if the file exists, false if it doesn't\n+     */\n+    public Mono<Boolean> exists() {\n+        try {\n+            return existsWithResponse().flatMap(FluxUtil::toMono);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Gets if the file this client represents exists in the cloud.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse}\n+     *\n+     * @return true if the file exists, false if it doesn't\n+     */\n+    public Mono<Response<Boolean>> existsWithResponse() {\n+        try {\n+            return withContext(this::existsWithResponse);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Gets if the file this client represents exists in the cloud.\n+     *\n+     * @return true if the file exists, false if it doesn't\n+     */\n+    Mono<Response<Boolean>> existsWithResponse(Context context) {\n+        return this.getPropertiesWithResponse(null, context)\n+            .map(cp -> (Response<Boolean>) new SimpleResponse<>(cp, true))\n+            .onErrorResume(t ->\n+                    (t instanceof ShareStorageException && ((ShareStorageException) t).getStatusCode() == 404)\n+                || (t instanceof HttpResponseException && ((HttpResponseException) t).getResponse().getStatusCode()\n+                        == 404),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NzIwOQ=="}, "originalCommit": {"oid": "12afae04565c00a4d463f3ca4d2be5b7f4267a2c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTg2NjA1OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxODo0ODoyOFrOFv_JqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxODo0ODoyOFrOFv_JqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2MjA1Ng==", "bodyText": "Should we check error code?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8477#discussion_r385862056", "createdAt": "2020-02-28T18:48:28Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "diffHunk": "@@ -152,6 +153,48 @@ public ShareFileAsyncClient getFileClient(String filePath) {\n             serviceVersion);\n     }\n \n+    /**\n+     * Determines if the share this client represents exists in the cloud.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareAsyncClient.exists}\n+     *\n+     * @return Flag indicating existence of the share.\n+     */\n+    public Mono<Boolean> exists() {\n+        return existsWithResponse().flatMap(FluxUtil::toMono);\n+    }\n+\n+    /**\n+     * Determines if the share this client represents exists in the cloud.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.ShareAsyncClient.existsWithResponse}\n+     *\n+     * @return Flag indicating existence of the share.\n+     */\n+    public Mono<Response<Boolean>> existsWithResponse() {\n+        try {\n+            return withContext(this::existsWithResponse);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    Mono<Response<Boolean>> existsWithResponse(Context context) {\n+        return this.getPropertiesWithResponse(context)\n+            .map(cp -> (Response<Boolean>) new SimpleResponse<>(cp, true))\n+            .onErrorResume(t ->\n+                    t instanceof ShareStorageException && ((ShareStorageException) t).getStatusCode() == 404,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "205af64f8ddfe0888f124dfb6e05d7070cf9c247"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 343, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}