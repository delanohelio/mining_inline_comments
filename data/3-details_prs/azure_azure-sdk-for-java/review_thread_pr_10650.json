{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExOTQwODYw", "number": 10650, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1MzoyOVrOD4S2eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo0Mjo0MlrOD6yksQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzU1NzA1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1MzoyOVrOGPCxgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzoxMjoyMVrOGPX-hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzI2NQ==", "bodyText": "Fixed rebranded as Manual", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418427265", "createdAt": "2020-05-01T05:53:29Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NDY2MA==", "bodyText": "changed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418774660", "createdAt": "2020-05-01T23:12:21Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzI2NQ=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzU1ODE4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1NDoxOFrOGPCyKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1NjozN1rOGQwLjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw==", "bodyText": "How about excluding Provisioned from the name?\n@j82w can you please check for consistency with .NET contracts as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418427433", "createdAt": "2020-05-01T05:54:18Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODE3NA==", "bodyText": "Its V4 we have a choice to improvise as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428174", "createdAt": "2020-05-01T05:58:21Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MDg5Mw==", "bodyText": "Makes sense. It is createAutoScaledThroughput now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419190893", "createdAt": "2020-05-04T02:10:06Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM2OTM1NA==", "bodyText": "@deborahc do you agree with this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419369354", "createdAt": "2020-05-04T11:27:40Z", "author": {"login": "j82w"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUwMjc4NA==", "bodyText": "How about: createAutoscaleThroughput for consistency. (the official autoscale name doesn't have the S in scale capitalized).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419502784", "createdAt": "2020-05-04T15:00:51Z", "author": {"login": "deborahc"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5MDY2Nw==", "bodyText": "Oh yeah! I should lowercase the S. createAutoscaleThroughput should be the method name right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419590667", "createdAt": "2020-05-04T17:09:07Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxOTc5MA==", "bodyText": "changed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420219790", "createdAt": "2020-05-05T15:56:37Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzU1ODkzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1NDo0OFrOGPCymA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzoxMzoxMlrOGPX_LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzU0NA==", "bodyText": "autoScaleMaxThroughput", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418427544", "createdAt": "2020-05-01T05:54:48Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NDgyOQ==", "bodyText": "changed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418774829", "createdAt": "2020-05-01T23:13:12Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzU0NA=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzU2MTc0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1Njo1NVrOGPC0Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzoxMzoyNlrOGPX_Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzk0Mw==", "bodyText": "Need more baking time for autoUpgradethroughputIncrementPercentage. Can it be exlucded from //build scope?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418427943", "createdAt": "2020-05-01T05:56:55Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NDg2Nw==", "bodyText": "Made this method package private.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418774867", "createdAt": "2020-05-01T23:13:26Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzk0Mw=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzU2Mjc1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1ODowMFrOGPC00g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzoxMzo0NFrOGPX_mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODExNA==", "bodyText": "getManualThrughput", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428114", "createdAt": "2020-05-01T05:58:00Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   autoUpgradethroughputIncrementPercentage));\n+    }\n+\n+    /**\n+     * Create auto scaled provisioned throughput throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   0));\n+    }\n+\n+    /**\n+     * Gets offer throughput.\n+     *\n+     * @return the offer throughput\n+     */\n+    public Integer getOfferThroughput() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NDkzOQ==", "bodyText": "Changed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418774939", "createdAt": "2020-05-01T23:13:44Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   autoUpgradethroughputIncrementPercentage));\n+    }\n+\n+    /**\n+     * Create auto scaled provisioned throughput throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   0));\n+    }\n+\n+    /**\n+     * Gets offer throughput.\n+     *\n+     * @return the offer throughput\n+     */\n+    public Integer getOfferThroughput() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODExNA=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzU2NTE5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTo1OTo0M1rOGPC2LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzoxNDowNVrOGPYAAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODQ2MA==", "bodyText": "How about inling the auto-scale related entries?\nWhat;s the value of nesting type?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428460", "createdAt": "2020-05-01T05:59:43Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   autoUpgradethroughputIncrementPercentage));\n+    }\n+\n+    /**\n+     * Create auto scaled provisioned throughput throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   0));\n+    }\n+\n+    /**\n+     * Gets offer throughput.\n+     *\n+     * @return the offer throughput\n+     */\n+    public Integer getOfferThroughput() {\n+        return offer.getThroughput();\n+    }\n+\n+    /**\n+     * Gets offer autoscale properties.\n+     *\n+     * @return the offer autoscale properties\n+     */\n+    public OfferAutoscaleSettings getOfferAutoscaleProperties() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODU2Mg==", "bodyText": "It can be non-public for //build as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428562", "createdAt": "2020-05-01T06:00:21Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   autoUpgradethroughputIncrementPercentage));\n+    }\n+\n+    /**\n+     * Create auto scaled provisioned throughput throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   0));\n+    }\n+\n+    /**\n+     * Gets offer throughput.\n+     *\n+     * @return the offer throughput\n+     */\n+    public Integer getOfferThroughput() {\n+        return offer.getThroughput();\n+    }\n+\n+    /**\n+     * Gets offer autoscale properties.\n+     *\n+     * @return the offer autoscale properties\n+     */\n+    public OfferAutoscaleSettings getOfferAutoscaleProperties() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODQ2MA=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NTA0Mg==", "bodyText": "Makes sense. Made package private", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418775042", "createdAt": "2020-05-01T23:14:05Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   autoUpgradethroughputIncrementPercentage));\n+    }\n+\n+    /**\n+     * Create auto scaled provisioned throughput throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   0));\n+    }\n+\n+    /**\n+     * Gets offer throughput.\n+     *\n+     * @return the offer throughput\n+     */\n+    public Integer getOfferThroughput() {\n+        return offer.getThroughput();\n+    }\n+\n+    /**\n+     * Gets offer autoscale properties.\n+     *\n+     * @return the offer autoscale properties\n+     */\n+    public OfferAutoscaleSettings getOfferAutoscaleProperties() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODQ2MA=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzU2Njg5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjowMToxNlrOGPC3Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjoxMTo1MVrOGPxZPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODcxOA==", "bodyText": "How do CX UT?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428718", "createdAt": "2020-05-01T06:01:16Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MTEwMw==", "bodyText": "Will try to redesign to make offer mockable in subsequent PRs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419191103", "createdAt": "2020-05-04T02:11:51Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODcxOA=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzU2ODc1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosDatabaseRequestOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjowMjozOFrOGPC4MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzoxNDo0NlrOGPYAkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODk3Ng==", "bodyText": "Between choice of ReqeustOptions vs overload: Isn't overload better from experience wise?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428976", "createdAt": "2020-05-01T06:02:38Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosDatabaseRequestOptions.java", "diffHunk": "@@ -51,10 +53,16 @@ CosmosDatabaseRequestOptions setOfferThroughput(Integer offerThroughput) {\n         return this;\n     }\n \n+    CosmosDatabaseRequestOptions setThroughputProperties(ThroughputProperties throughputProperties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NTE4Nw==", "bodyText": "Yeah, we use an overload. This is not a public method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418775187", "createdAt": "2020-05-01T23:14:46Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosDatabaseRequestOptions.java", "diffHunk": "@@ -51,10 +53,16 @@ CosmosDatabaseRequestOptions setOfferThroughput(Integer offerThroughput) {\n         return this;\n     }\n \n+    CosmosDatabaseRequestOptions setThroughputProperties(ThroughputProperties throughputProperties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODk3Ng=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzU2OTEwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjowMzowNVrOGPC4bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzoxNToxMFrOGPYA9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyOTAzNg==", "bodyText": "multi lines", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418429036", "createdAt": "2020-05-01T06:03:05Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -908,6 +907,31 @@ private static void validateResource(Resource resource) {\n             headers.put(HttpConstants.HttpHeaders.OFFER_TYPE, options.getOfferType());\n         }\n \n+        if (options.getOfferThroughput() == null) {\n+            if (options.getThroughputProperties() != null) {\n+                Offer offer = ModelBridgeInternal.getOfferFromThroughputProperties(options.getThroughputProperties());\n+                final OfferAutoscaleAutoUpgradeProperties autoscaleAutoUpgradeProperties\n+                    = offer.getOfferAutoScaleSettings().getAutoscaleAutoUpgradeProperties();\n+                if (offer.hasOfferThroughput() &&\n+                        (offer.getOfferAutoScaleSettings().getMaxThroughput() >= 0 ||\n+                             autoscaleAutoUpgradeProperties != null &&\n+                                 autoscaleAutoUpgradeProperties\n+                                     .getAutoscaleThroughputProperties()\n+                                     .getIncrementPercent() >= 0)) {\n+                    throw new IllegalArgumentException(\"Autoscale provisioned throughput can not be configured with \"\n+                                                           + \"fixed offer\");\n+                }\n+\n+                if (offer.hasOfferThroughput()) {\n+                    headers.put(HttpConstants.HttpHeaders.OFFER_THROUGHPUT, options.getOfferThroughput().toString());\n+                } else if (offer.getOfferAutoScaleSettings() != null) {\n+                    headers.put(HttpConstants.HttpHeaders.OFFER_AUTOPILOT_SETTINGS,\n+                                ModelBridgeInternal.toJsonFromJsonSerializable(offer.getOfferAutoScaleSettings()));\n+                }\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NTI4NA==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418775284", "createdAt": "2020-05-01T23:15:10Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -908,6 +907,31 @@ private static void validateResource(Resource resource) {\n             headers.put(HttpConstants.HttpHeaders.OFFER_TYPE, options.getOfferType());\n         }\n \n+        if (options.getOfferThroughput() == null) {\n+            if (options.getThroughputProperties() != null) {\n+                Offer offer = ModelBridgeInternal.getOfferFromThroughputProperties(options.getThroughputProperties());\n+                final OfferAutoscaleAutoUpgradeProperties autoscaleAutoUpgradeProperties\n+                    = offer.getOfferAutoScaleSettings().getAutoscaleAutoUpgradeProperties();\n+                if (offer.hasOfferThroughput() &&\n+                        (offer.getOfferAutoScaleSettings().getMaxThroughput() >= 0 ||\n+                             autoscaleAutoUpgradeProperties != null &&\n+                                 autoscaleAutoUpgradeProperties\n+                                     .getAutoscaleThroughputProperties()\n+                                     .getIncrementPercent() >= 0)) {\n+                    throw new IllegalArgumentException(\"Autoscale provisioned throughput can not be configured with \"\n+                                                           + \"fixed offer\");\n+                }\n+\n+                if (offer.hasOfferThroughput()) {\n+                    headers.put(HttpConstants.HttpHeaders.OFFER_THROUGHPUT, options.getOfferThroughput().toString());\n+                } else if (offer.getOfferAutoScaleSettings() != null) {\n+                    headers.put(HttpConstants.HttpHeaders.OFFER_AUTOPILOT_SETTINGS,\n+                                ModelBridgeInternal.toJsonFromJsonSerializable(offer.getOfferAutoScaleSettings()));\n+                }\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyOTAzNg=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzU5OTQ4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjoyNDo0M1rOGPDJAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzoxNTozOFrOGPYBWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMzI4MQ==", "bodyText": "I would use parametrized SqlQuerySpec instead of concating strings", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418433281", "createdAt": "2020-05-01T06:24:43Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,69 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(\"select * from c where c.offerResourceId = '\"\n+                                                             + response.getProperties()\n+                                                                   .getResourceId()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NTM4NQ==", "bodyText": "Changed to use querySpec", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418775385", "createdAt": "2020-05-01T23:15:38Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,69 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(\"select * from c where c.offerResourceId = '\"\n+                                                             + response.getProperties()\n+                                                                   .getResourceId()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMzI4MQ=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzYwNTM2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Offer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjoyODo0OVrOGPDMYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzoxNjowNVrOGPYBwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNDE0Ng==", "bodyText": "autopilot is a v2 offer?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418434146", "createdAt": "2020-05-01T06:28:49Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Offer.java", "diffHunk": "@@ -26,6 +27,18 @@ public Offer(int offerThroughput) {\n         this.setContent(content);\n     }\n \n+    Offer(OfferAutoscaleSettings offerAutoscaleSettings) {\n+        super();\n+        this.setOfferVersion(Constants.Properties.OFFER_VERSION_V2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NTQ5MA==", "bodyText": "Yes it is according to the offer payload I saw in Autopilot doc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418775490", "createdAt": "2020-05-01T23:16:05Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Offer.java", "diffHunk": "@@ -26,6 +27,18 @@ public Offer(int offerThroughput) {\n         this.setContent(content);\n     }\n \n+    Offer(OfferAutoscaleSettings offerAutoscaleSettings) {\n+        super();\n+        this.setOfferVersion(Constants.Properties.OFFER_VERSION_V2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNDE0Ng=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzYyMTUyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/CollectionCrudTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjo0MDo1NFrOGPDVhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxOToxNDowOFrOGPlgjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNjQ4NQ==", "bodyText": "tests should not use static database name to avoid any potential issue with runnings tests in parallel.\nPlease use CosmosDatabaseForTest.generateId()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418436485", "createdAt": "2020-05-01T06:40:54Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/CollectionCrudTest.java", "diffHunk": "@@ -367,6 +370,33 @@ public void sessionTokenConsistencyCollectionDeleteCreateSameName() {\n         }\n     }\n \n+    @Test(groups = { \"emulator\" }, timeOut = TIMEOUT)\n+    public void readReplaceAutoscaleThroughput() throws Exception {\n+        safeDeleteDatabase(client.getDatabase(\"newTestDatabase\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5NjM2Ng==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418996366", "createdAt": "2020-05-02T19:14:08Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/CollectionCrudTest.java", "diffHunk": "@@ -367,6 +370,33 @@ public void sessionTokenConsistencyCollectionDeleteCreateSameName() {\n         }\n     }\n \n+    @Test(groups = { \"emulator\" }, timeOut = TIMEOUT)\n+    public void readReplaceAutoscaleThroughput() throws Exception {\n+        safeDeleteDatabase(client.getDatabase(\"newTestDatabase\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNjQ4NQ=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzYyMTY3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/DatabaseCrudTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjo0MTowMFrOGPDVmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzoxNjoxN1rOGPYB6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNjUwNQ==", "bodyText": "tests should not use static database name to avoid any potential issue with runnings tests in parallel.\nPlease use CosmosDatabaseForTest.generateId()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418436505", "createdAt": "2020-05-01T06:41:00Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/DatabaseCrudTest.java", "diffHunk": "@@ -108,6 +114,25 @@ public void deleteDatabase_DoesntExist() throws Exception {\n         validateFailure(deleteObservable, validator);\n     }\n \n+    @Test(groups = { \"emulator\" }, timeOut = TIMEOUT)\n+    public void readReplaceAutoscaleThroughput() throws Exception {\n+        safeDeleteDatabase(client.getDatabase(\"newTestDatabase\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NTUzMA==", "bodyText": "Makes sense. Changed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418775530", "createdAt": "2020-05-01T23:16:17Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/DatabaseCrudTest.java", "diffHunk": "@@ -108,6 +114,25 @@ public void deleteDatabase_DoesntExist() throws Exception {\n         validateFailure(deleteObservable, validator);\n     }\n \n+    @Test(groups = { \"emulator\" }, timeOut = TIMEOUT)\n+    public void readReplaceAutoscaleThroughput() throws Exception {\n+        safeDeleteDatabase(client.getDatabase(\"newTestDatabase\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNjUwNQ=="}, "originalCommit": {"oid": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzY5Mjk1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxOTo0NDowMVrOGPlsug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1Njo1N1rOGQwMcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTQ4Mg==", "bodyText": "it might worth to include the name of database and container in the sdk generated error message.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418999482", "createdAt": "2020-05-02T19:44:01Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDAxOA==", "bodyText": "Added resource name", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420220018", "createdAt": "2020-05-05T15:56:57Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTQ4Mg=="}, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzY5MzQyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxOTo0NDoyOFrOGPls7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxOTo0NDoyOFrOGPls7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTUzNA==", "bodyText": "it is worth including the name of the database and container in the sdk generated error message.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418999534", "createdAt": "2020-05-02T19:44:28Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));\n+                                                }\n+\n+                                                Offer existingOffer = offerFeedResponse.getResults().get(0);\n+                                                ModelBridgeInternal.updateOfferFromProperties(existingOffer,\n+                                                                                              throughputProperties);\n+                                                return this.database.getDocClientWrapper()\n+                                                           .replaceOffer(existingOffer)\n+                                                           .single();\n+                                            }).map(ModelBridgeInternal::createThroughputRespose));\n+    }\n+\n+    /**\n+     * Read the throughput throughput .\n+     *\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> readThroughput() {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the resource\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzY5NDM1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxOTo0NTozOVrOGPltXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1NzowN1rOGQwM7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTY0NQ==", "bodyText": "it is worth including the name of the database in the sdk generated error message.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418999645", "createdAt": "2020-05-02T19:45:39Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -663,6 +686,78 @@ public CosmosAsyncUser getUser(String id) {\n                                                                                               .getThroughput()));\n     }\n \n+    /**\n+     * Sets throughput provisioned for a container in measurement of\n+     * Requests-per-Unit in the Azure Cosmos service.\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.getDocClientWrapper()\n+                                            .queryOffers(getOfferQuerySpecFromResourceId(response.getProperties()\n+                                                                                             .getResourceId()),\n+                                                         new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTA2OQ==", "bodyText": "@j82w lets please track it part of diagnostics improvement.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419781069", "createdAt": "2020-05-04T23:10:11Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -663,6 +686,78 @@ public CosmosAsyncUser getUser(String id) {\n                                                                                               .getThroughput()));\n     }\n \n+    /**\n+     * Sets throughput provisioned for a container in measurement of\n+     * Requests-per-Unit in the Azure Cosmos service.\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.getDocClientWrapper()\n+                                            .queryOffers(getOfferQuerySpecFromResourceId(response.getProperties()\n+                                                                                             .getResourceId()),\n+                                                         new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTY0NQ=="}, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDE0Mg==", "bodyText": "Added resource name", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420220142", "createdAt": "2020-05-05T15:57:07Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -663,6 +686,78 @@ public CosmosAsyncUser getUser(String id) {\n                                                                                               .getThroughput()));\n     }\n \n+    /**\n+     * Sets throughput provisioned for a container in measurement of\n+     * Requests-per-Unit in the Azure Cosmos service.\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.getDocClientWrapper()\n+                                            .queryOffers(getOfferQuerySpecFromResourceId(response.getProperties()\n+                                                                                             .getResourceId()),\n+                                                         new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTY0NQ=="}, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzY5NDUwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxOTo0NTo1NFrOGPltbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1NzoxNVrOGQwNYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTY2Mw==", "bodyText": "ditto", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418999663", "createdAt": "2020-05-02T19:45:54Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -663,6 +686,78 @@ public CosmosAsyncUser getUser(String id) {\n                                                                                               .getThroughput()));\n     }\n \n+    /**\n+     * Sets throughput provisioned for a container in measurement of\n+     * Requests-per-Unit in the Azure Cosmos service.\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.getDocClientWrapper()\n+                                            .queryOffers(getOfferQuerySpecFromResourceId(response.getProperties()\n+                                                                                             .getResourceId()),\n+                                                         new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));\n+                                                }\n+\n+                                                Offer existingOffer = offerFeedResponse.getResults().get(0);\n+                                                ModelBridgeInternal.updateOfferFromProperties(existingOffer,\n+                                                                                              throughputProperties);\n+\n+                                                return this.getDocClientWrapper()\n+                                                           .replaceOffer(existingOffer)\n+                                                           .single();\n+                                            })\n+                                            .map(ModelBridgeInternal::createThroughputRespose));\n+    }\n+\n+    /**\n+     * Gets the throughput of the database\n+     *\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> readThroughput() {\n+        return this.read()\n+                   .flatMap(response -> getDocClientWrapper()\n+                                            .queryOffers(getOfferQuerySpecFromResourceId(response.getProperties()\n+                                                                                            .getResourceId()),\n+                                                         new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDI1OA==", "bodyText": "Added resource name", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420220258", "createdAt": "2020-05-05T15:57:15Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -663,6 +686,78 @@ public CosmosAsyncUser getUser(String id) {\n                                                                                               .getThroughput()));\n     }\n \n+    /**\n+     * Sets throughput provisioned for a container in measurement of\n+     * Requests-per-Unit in the Azure Cosmos service.\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.getDocClientWrapper()\n+                                            .queryOffers(getOfferQuerySpecFromResourceId(response.getProperties()\n+                                                                                             .getResourceId()),\n+                                                         new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));\n+                                                }\n+\n+                                                Offer existingOffer = offerFeedResponse.getResults().get(0);\n+                                                ModelBridgeInternal.updateOfferFromProperties(existingOffer,\n+                                                                                              throughputProperties);\n+\n+                                                return this.getDocClientWrapper()\n+                                                           .replaceOffer(existingOffer)\n+                                                           .single();\n+                                            })\n+                                            .map(ModelBridgeInternal::createThroughputRespose));\n+    }\n+\n+    /**\n+     * Gets the throughput of the database\n+     *\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> readThroughput() {\n+        return this.read()\n+                   .flatMap(response -> getDocClientWrapper()\n+                                            .queryOffers(getOfferQuerySpecFromResourceId(response.getProperties()\n+                                                                                            .getResourceId()),\n+                                                         new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTY2Mw=="}, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzY5ODI2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxOTo0OTo0OFrOGPlvKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1NzozMFrOGQwOJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMDEwNw==", "bodyText": "please add code sample snippet.\nsimilar to AnalyticalStorageCodeSnippet or IndexPolicyCodeSnippet as example.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419000107", "createdAt": "2020-05-02T19:49:48Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDQ1Mw==", "bodyText": "Added snippet", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420220453", "createdAt": "2020-05-05T15:57:30Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMDEwNw=="}, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzc1ODgyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Offer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMTowMDoyOVrOGPmLzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1NzozOVrOGQwOlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNzQzNg==", "bodyText": "remove second offer", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419007436", "createdAt": "2020-05-02T21:00:29Z", "author": {"login": "j82w"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Offer.java", "diffHunk": "@@ -34,7 +47,80 @@ public Offer(int offerThroughput) {\n     public Offer(String jsonString) {\n         super(jsonString);\n     }\n-    \n+\n+    /**\n+     * Instantiates a new Offer from object node.\n+     *\n+     * @param objectNode the object node\n+     */\n+    public Offer(ObjectNode objectNode) {\n+        super(objectNode);\n+    }\n+\n+    /**\n+     * Create fixed offer offer.\n+     *\n+     * @param throughput the throughput\n+     * @return the offer\n+     */\n+    public static Offer createManualOffer(int throughput) {\n+        return new Offer(throughput);\n+    }\n+\n+    /**\n+     * Create autoscale offer offer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDU2Nw==", "bodyText": "Removed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420220567", "createdAt": "2020-05-05T15:57:39Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Offer.java", "diffHunk": "@@ -34,7 +47,80 @@ public Offer(int offerThroughput) {\n     public Offer(String jsonString) {\n         super(jsonString);\n     }\n-    \n+\n+    /**\n+     * Instantiates a new Offer from object node.\n+     *\n+     * @param objectNode the object node\n+     */\n+    public Offer(ObjectNode objectNode) {\n+        super(objectNode);\n+    }\n+\n+    /**\n+     * Create fixed offer offer.\n+     *\n+     * @param throughput the throughput\n+     * @return the offer\n+     */\n+    public static Offer createManualOffer(int throughput) {\n+        return new Offer(throughput);\n+    }\n+\n+    /**\n+     * Create autoscale offer offer.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNzQzNg=="}, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzAyOTg0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzoxMToyN1rOGQVbfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMjo0MjoyNFrOGRCS-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTUwMA==", "bodyText": "Is the indentation right?\nIt looks very nested and deep. @moderakh ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419781500", "createdAt": "2020-05-04T23:11:27Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NzQyNQ==", "bodyText": "It looks a bit weird, but this is correct. Also this is the best intellij could do :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420477425", "createdAt": "2020-05-06T00:02:14Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTUwMA=="}, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxNjYwMw==", "bodyText": "The indentation is correct. The nesting is the result of reactive-stream chaining and lambdas", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420516603", "createdAt": "2020-05-06T02:42:24Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTUwMA=="}, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzAzMTg4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzoxMjoxOVrOGQVcog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1Nzo1NVrOGQwPSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTc5NA==", "bodyText": "In practice its only possible if name is invalid right?\nHow about reflecting the same in the exception message.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419781794", "createdAt": "2020-05-04T23:12:19Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDc0Nw==", "bodyText": "Added resource id in the error message which should help.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420220747", "createdAt": "2020-05-05T15:57:55Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTc5NA=="}, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzAzODAzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzoxNDo1OFrOGQVgJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTozNzozNVrOGS0fpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MjY5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static ThroughputProperties createAutoScaledThroughput(int autoScaleMaxThroughput) {\n          \n          \n            \n                public static ThroughputProperties createAutoscaledThroughput(int autoscaleMaxThroughput) {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419782692", "createdAt": "2020-05-04T23:14:58Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createManualThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createManualOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    static ThroughputProperties createAutoScaledThroughput(\n+        int autoScaleMaxThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n+                                                                   autoUpgradethroughputIncrementPercentage));\n+    }\n+\n+    /**\n+     * Create auto scaled provisioned throughput throughput properties.\n+     *\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledThroughput(int autoScaleMaxThroughput) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4NzYyMw==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r422387623", "createdAt": "2020-05-08T21:37:35Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createManualThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createManualOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    static ThroughputProperties createAutoScaledThroughput(\n+        int autoScaleMaxThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n+                                                                   autoUpgradethroughputIncrementPercentage));\n+    }\n+\n+    /**\n+     * Create auto scaled provisioned throughput throughput properties.\n+     *\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledThroughput(int autoScaleMaxThroughput) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MjY5Mg=="}, "originalCommit": {"oid": "47ea29d1c3a468506efe925c73bc78a55045ab97"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTcyNTkzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/samples/java/com/azure/cosmos/ThroughputPropertiesCodeSnippet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo0Mjo0MlrOGS0nTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo0Nzo0N1rOGS0unw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4OTU4Mw==", "bodyText": "Will it ship out?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r422389583", "createdAt": "2020-05-08T21:42:42Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/samples/java/com/azure/cosmos/ThroughputPropertiesCodeSnippet.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.models.ThroughputProperties;\n+\n+public class ThroughputPropertiesCodeSnippet {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191d86f5c2fa3094c5024c985a63ef132913aa62"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5MTQ1NQ==", "bodyText": "Yeah, this is public CodeSnippet", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r422391455", "createdAt": "2020-05-08T21:47:47Z", "author": {"login": "mbhaskar"}, "path": "sdk/cosmos/azure-cosmos/src/samples/java/com/azure/cosmos/ThroughputPropertiesCodeSnippet.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.models.ThroughputProperties;\n+\n+public class ThroughputPropertiesCodeSnippet {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4OTU4Mw=="}, "originalCommit": {"oid": "191d86f5c2fa3094c5024c985a63ef132913aa62"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4416, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}