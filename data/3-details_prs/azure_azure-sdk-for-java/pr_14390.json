{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyODU0MzAx", "number": 14390, "title": "Improvements to the Storage Performance Tests", "bodyText": "This PR contains general improvements for the Storage performance tests ranging from improving performance of reading downloaded data to reducing overall memory usage by leveraging more repeated streams and fluxes. Additionally, this fixes a performance testing bug where the same stream was passed into multiple upload requests resulting in the test crashing with a mismatch of data and the expected length.", "createdAt": "2020-08-25T00:29:05Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390", "merged": true, "mergeCommit": {"oid": "7a96ea9419eb0ccbcf9d712124ec6b06f39facd1"}, "closed": true, "closedAt": "2020-09-14T21:11:02Z", "author": {"login": "alzimmermsft"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCMDaGAH2gAyNDcyODU0MzAxOmQ0NGIxOWY1M2MyNmQzYzkxZmFhNWY5MWFiYzk5NGI5NWU4N2MwOGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdI5zMSAFqTQ4ODE0Mjg1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d44b19f53c26d3c91faa5f91abc994b95e87c08f", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d44b19f53c26d3c91faa5f91abc994b95e87c08f", "committedDate": "2020-08-25T00:27:40Z", "message": "Improvements to the Storage performance tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9786a3c36fd748548b0a7c3f2572d5b86e553c5b", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9786a3c36fd748548b0a7c3f2572d5b86e553c5b", "committedDate": "2020-08-25T17:42:46Z", "message": "Replaced flatMap with map and added RepeatingInputStream which allows for marking (required for uploadblockblob tests)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/51efc2efd215685cb85bf0a781768b800328a8f0", "committedDate": "2020-08-31T17:58:22Z", "message": "Merge branch 'master' into AzStorage_PerfTestImprovements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTc2OTQz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#pullrequestreview-486176943", "createdAt": "2020-09-10T17:55:44Z", "commit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1NTo0NFrOHP_ZNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODozMjo1M1rOHQA5Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyOTMzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Random random = new Random();\n          \n          \n            \n                    Random random = new Random(0);\n          \n      \n    \n    \n  \n\nI slightly prefer using a fixed random seed for repeatability.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#discussion_r486529334", "createdAt": "2020-09-10T17:55:44Z", "author": {"login": "mikeharder"}, "path": "common/perf-test-core/src/main/java/com/azure/perf/test/core/TestDataCreationHelper.java", "diffHunk": "@@ -3,30 +3,31 @@\n \n package com.azure.perf.test.core;\n \n-import java.io.ByteArrayInputStream;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.IOException;\n import java.io.InputStream;\n-import java.io.SequenceInputStream;\n+import java.io.OutputStream;\n import java.nio.ByteBuffer;\n-import java.util.Collections;\n-import java.util.List;\n import java.util.Random;\n-import reactor.core.publisher.Flux;\n \n /**\n  * Utility class to help with data creation for perf testing.\n  */\n public class TestDataCreationHelper {\n+    private static final int RANDOM_BYTES_LENGTH = 1024 * 1024; // 1MB\n     private static final byte[] RANDOM_BYTES;\n     private static final ByteBuffer RANDOM_BYTE_BUFFER;\n     private static final int SIZE = (1024 * 1024 * 1024) + 1;\n-    private static final byte[] RANDOM_STREAM_BYTES;\n \n     static {\n-        RANDOM_BYTES = new byte[1024 * 1024];\n-        (new Random(0)).nextBytes(TestDataCreationHelper.RANDOM_BYTES);\n+        Random random = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyOTY5Mw==", "bodyText": "Remove this commented code?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#discussion_r486529693", "createdAt": "2020-09-10T17:56:16Z", "author": {"login": "mikeharder"}, "path": "common/perf-test-core/src/main/java/com/azure/perf/test/core/TestDataCreationHelper.java", "diffHunk": "@@ -3,30 +3,31 @@\n \n package com.azure.perf.test.core;\n \n-import java.io.ByteArrayInputStream;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.IOException;\n import java.io.InputStream;\n-import java.io.SequenceInputStream;\n+import java.io.OutputStream;\n import java.nio.ByteBuffer;\n-import java.util.Collections;\n-import java.util.List;\n import java.util.Random;\n-import reactor.core.publisher.Flux;\n \n /**\n  * Utility class to help with data creation for perf testing.\n  */\n public class TestDataCreationHelper {\n+    private static final int RANDOM_BYTES_LENGTH = 1024 * 1024; // 1MB\n     private static final byte[] RANDOM_BYTES;\n     private static final ByteBuffer RANDOM_BYTE_BUFFER;\n     private static final int SIZE = (1024 * 1024 * 1024) + 1;\n-    private static final byte[] RANDOM_STREAM_BYTES;\n \n     static {\n-        RANDOM_BYTES = new byte[1024 * 1024];\n-        (new Random(0)).nextBytes(TestDataCreationHelper.RANDOM_BYTES);\n+        Random random = new Random();\n+        RANDOM_BYTES = new byte[RANDOM_BYTES_LENGTH];\n+        random.nextBytes(RANDOM_BYTES);\n         RANDOM_BYTE_BUFFER = ByteBuffer.wrap(TestDataCreationHelper.RANDOM_BYTES).asReadOnlyBuffer();\n-        RANDOM_STREAM_BYTES = new byte[SIZE];\n-        (new Random(0)).nextBytes(RANDOM_STREAM_BYTES);\n+\n+//        SIZE_BYTES = new byte[SIZE];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyOTc3OQ==", "bodyText": "Remove extra newline?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#discussion_r486529779", "createdAt": "2020-09-10T17:56:28Z", "author": {"login": "mikeharder"}, "path": "common/perf-test-core/src/main/java/com/azure/perf/test/core/TestDataCreationHelper.java", "diffHunk": "@@ -43,6 +44,7 @@\n         int quotient = (int) size / remaining;\n         int remainder = (int) size % remaining;\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0MDA3MA==", "bodyText": "I think it would be better to make NullOutputStream a singleton, so all consumers can use the same instance instead of creating a new one.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#discussion_r486540070", "createdAt": "2020-09-10T18:14:15Z", "author": {"login": "mikeharder"}, "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/blob/perf/DownloadBlobTest.java", "diffHunk": "@@ -39,18 +42,31 @@ public void run() {\n \n     static class NullOutputStream extends OutputStream {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0MDg1Mg==", "bodyText": "Looking at the docs  for this API, would it be better to use this which is simpler, more closely matches the doc sample, and also more closely matches the sync code?\nNullOutputStream.getInstance().write(b.array())", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#discussion_r486540852", "createdAt": "2020-09-10T18:15:12Z", "author": {"login": "mikeharder"}, "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/blob/perf/DownloadBlobTest.java", "diffHunk": "@@ -39,18 +42,31 @@ public void run() {\n \n     static class NullOutputStream extends OutputStream {\n         @Override\n-        public void write(int b) throws IOException {\n+        public void write(int b) {\n \n         }\n+\n+        @Override\n+        public void write(byte[] b) {\n+        }\n+\n+        @Override\n+        public void write(byte[] b, int off, int len) {\n+        }\n     }\n \n     @Override\n     public Mono<Void> runAsync() {\n         return blobAsyncClient.download()\n             .map(b -> {\n-                for (int i = 0; i < b.remaining(); i++) {\n-                    b.get();\n+                int readCount = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0MjQ4OQ==", "bodyText": "Why add ignoreElements()?  Is this more or less similar to the sync implementation?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#discussion_r486542489", "createdAt": "2020-09-10T18:17:31Z", "author": {"login": "mikeharder"}, "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/blob/perf/ListBlobsTest.java", "diffHunk": "@@ -25,11 +25,14 @@ public ListBlobsTest(PerfStressOptions options) {\n \n     @Override\n     public void run() {\n-        blobContainerClient.listBlobs().forEach(b -> { });\n+        blobContainerClient.listBlobs().forEach(b -> {\n+        });\n     }\n \n     @Override\n     public Mono<Void> runAsync() {\n-        return blobContainerAsyncClient.listBlobs().then();\n+        return blobContainerAsyncClient.listBlobs()\n+            .ignoreElements()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU1MzkyMg==", "bodyText": "Would this be equivalent in both perf and functionality?\ncopyStream(createRandomInputStream(size), blobOutputStream);\nIf so, this would allow us to delete writeBytesToOutputStream() which seems simpler.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#discussion_r486553922", "createdAt": "2020-09-10T18:32:53Z", "author": {"login": "mikeharder"}, "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/blob/perf/UploadOutputStreamTest.java", "diffHunk": "@@ -3,29 +3,25 @@\n \n package com.azure.storage.blob.perf;\n \n-import static com.azure.perf.test.core.TestDataCreationHelper.createRandomInputStream;\n-\n import com.azure.perf.test.core.PerfStressOptions;\n import com.azure.storage.blob.perf.core.BlobTestBase;\n import com.azure.storage.blob.specialized.BlobOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n import reactor.core.publisher.Mono;\n \n-public class UploadOutputStreamTest extends BlobTestBase<PerfStressOptions> {\n+import java.io.IOException;\n \n-    private final InputStream inputStream;\n+import static com.azure.perf.test.core.TestDataCreationHelper.writeBytesToOutputStream;\n \n+public class UploadOutputStreamTest extends BlobTestBase<PerfStressOptions> {\n     public UploadOutputStreamTest(PerfStressOptions options) {\n         super(options);\n-        this.inputStream = createRandomInputStream(options.getSize());\n     }\n \n     @Override\n     public void run() {\n         try {\n             BlobOutputStream blobOutputStream = blockBlobClient.getBlobOutputStream();\n-            copyStream(inputStream, blobOutputStream);\n+            writeBytesToOutputStream(blobOutputStream, options.getSize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51efc2efd215685cb85bf0a781768b800328a8f0"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ea84e65bf1a22e729bcbe7f45c6668f11881011", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ea84e65bf1a22e729bcbe7f45c6668f11881011", "committedDate": "2020-09-14T16:52:03Z", "message": "Merge branch 'master' into AzStorage_PerfTestImprovements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b843426cb1cf4dd1d430ac337015fff8385217bf", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b843426cb1cf4dd1d430ac337015fff8385217bf", "committedDate": "2020-09-14T17:13:09Z", "message": "Changes based on feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MTQyODU1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14390#pullrequestreview-488142855", "createdAt": "2020-09-14T21:09:08Z", "commit": {"oid": "b843426cb1cf4dd1d430ac337015fff8385217bf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 226, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}