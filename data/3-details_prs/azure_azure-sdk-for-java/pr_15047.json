{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MjMyNjI0", "number": 15047, "title": "Feat(client): Add Telemetry APIs", "bodyText": "", "createdAt": "2020-09-10T19:12:06Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047", "merged": true, "mergeCommit": {"oid": "249142870a533e20a14dbf1b5d8ae195b5d518f4"}, "closed": true, "closedAt": "2020-09-11T00:06:55Z", "author": {"login": "azabbasi"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHlnmngH2gAyNDg0MjMyNjI0OmQwNjE0MTI4ZjFjNWFlYjcxYjllY2JkODdlMmM0MTcwZjU2YTAwYmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHocHWgFqTQ4NjM1MTMwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d0614128f1c5aeb71b9ecbd87e2c4170f56a00bd", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d0614128f1c5aeb71b9ecbd87e2c4170f56a00bd", "committedDate": "2020-09-10T19:04:27Z", "message": "Add Telemetry APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d827eef4632b80caf11411bf6e8925ff48cc1786", "committedDate": "2020-09-10T19:11:02Z", "message": "Update API comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MjQzMzEw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#pullrequestreview-486243310", "createdAt": "2020-09-10T19:23:40Z", "commit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyMzo0MFrOHQCllg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyMzo0MFrOHQCllg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MTY1NA==", "bodyText": "To match our current pattern, this class should be called \"PublishTelemetryRequestOptions\" much like how we have \"UpdateComponentRequestOptions\" and other similar ones", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486581654", "createdAt": "2020-09-10T19:23:40Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/TelemetryOptions.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.UUID;\n+\n+/**\n+ * The additional information to be used when processing a telemetry request.\n+ */\n+@Fluent\n+public final class TelemetryOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MjQzNzM3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#pullrequestreview-486243737", "createdAt": "2020-09-10T19:24:16Z", "commit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyNDoxNlrOHQCmuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyNDoxNlrOHQCmuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4MTk0Nw==", "bodyText": "@abhipsaMisra mentioned earlier that request options objects like these should not be fluent and should not be marked as fluent.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486581947", "createdAt": "2020-09-10T19:24:16Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/TelemetryOptions.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.UUID;\n+\n+/**\n+ * The additional information to be used when processing a telemetry request.\n+ */\n+@Fluent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MjQ0OTEw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#pullrequestreview-486244910", "createdAt": "2020-09-10T19:26:00Z", "commit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyNjowMFrOHQCqWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyNjowMFrOHQCqWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4Mjg3NQ==", "bodyText": "Timestamp is one word, so no need to camelcase the Stamp here and everywhere", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486582875", "createdAt": "2020-09-10T19:26:00Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/util/TelemetryOptions.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.digitaltwins.core.util;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.UUID;\n+\n+/**\n+ * The additional information to be used when processing a telemetry request.\n+ */\n+@Fluent\n+public final class TelemetryOptions {\n+\n+    /**\n+     * A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages.\n+     * Defaults to a random guid.\n+     */\n+    private String messageId = UUID.randomUUID().toString();\n+\n+    /**\n+     * An RFC 3339 timestamp that identifies the time the telemetry was measured.\n+     * It defaults to the current date/time UTC.\n+     */\n+    private OffsetDateTime timeStamp = OffsetDateTime.now(ZoneOffset.UTC);\n+\n+    /**\n+     * Gets the message Id.\n+     * @return A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages.\n+     */\n+    public String getMessageId() {\n+        return this.messageId;\n+    }\n+\n+    /**\n+     * Gets the timestamp.\n+     * @return The timestamp that identifies the time the telemetry was measured.\n+     */\n+    public OffsetDateTime getTimeStamp() {\n+        return this.timeStamp;\n+    }\n+\n+    /**\n+     * Set the message Id\n+     * @param messageId A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages.\n+     * @return The TelemetryOption object itself.\n+     */\n+    public TelemetryOptions setMessageId(String messageId) {\n+        this.messageId = messageId;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the timestamp\n+     * @param timeStamp The timestamp that identifies the time the telemetry was measured.\n+     * @return The TelemetryOption object itself.\n+     */\n+    public TelemetryOptions setTimeStamp(OffsetDateTime timeStamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "affaa952135c2ad3ad136f5d6152826d14080b1f", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/affaa952135c2ad3ad136f5d6152826d14080b1f", "committedDate": "2020-09-10T19:29:01Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MjQ3NDAw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#pullrequestreview-486247400", "createdAt": "2020-09-10T19:29:46Z", "commit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyOTo0NlrOHQCxxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOToyOTo0NlrOHQCxxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4NDc3NQ==", "bodyText": "Careful here. The PL expects an Object, so this payload string will be serialized before being set as the http request payload, which isn't what we want.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486584775", "createdAt": "2020-09-10T19:29:46Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1338,4 +1338,112 @@ public HttpPipeline getHttpPipeline() {\n     }\n \n     //endregion Event Route APIs\n+\n+    //region Telemetry APIs\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload) {\n+        TelemetryOptions telemetryOptions = new TelemetryOptions();\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    public Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, telemetryOptions, context));\n+    }\n+\n+    Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, TelemetryOptions telemetryOptions, Context context) {\n+        return protocolLayer.getDigitalTwins().sendTelemetryWithResponseAsync(\n+            digitalTwinId,\n+            telemetryOptions.getMessageId(),\n+            payload,\n+            telemetryOptions.getTimeStamp().toString(),\n+            context);\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin's component\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The name of the DTDL component.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishComponentTelemetry(String digitalTwinId, String componentName, String payload) {\n+        TelemetryOptions telemetryOptions = new TelemetryOptions();\n+        return withContext(context -> publishComponentTelemetryWithResponse(digitalTwinId, componentName, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin's component\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The name of the DTDL component.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishComponentTelemetry(String digitalTwinId, String componentName, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishComponentTelemetryWithResponse(digitalTwinId, componentName, payload, telemetryOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin's component\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The name of the DTDL component.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param telemetryOptions The additional information to be used when processing a telemetry request.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    public Mono<Response<Void>> publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String payload, TelemetryOptions telemetryOptions) {\n+        return withContext(context -> publishComponentTelemetryWithResponse(digitalTwinId, componentName, payload, telemetryOptions, context));\n+    }\n+\n+    Mono<Response<Void>> publishComponentTelemetryWithResponse(String digitalTwinId, String componentName, String payload, TelemetryOptions telemetryOptions, Context context) {\n+        return protocolLayer.getDigitalTwins().sendComponentTelemetryWithResponseAsync(\n+            digitalTwinId,\n+            componentName,\n+            telemetryOptions.getMessageId(),\n+            payload,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d827eef4632b80caf11411bf6e8925ff48cc1786"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82029a035cdf0932af8fad1ada0fb1d8558c11d3", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/82029a035cdf0932af8fad1ada0fb1d8558c11d3", "committedDate": "2020-09-10T19:39:47Z", "message": "Update DigitalTwinsAsyncClient.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MjcyOTgz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#pullrequestreview-486272983", "createdAt": "2020-09-10T20:08:53Z", "commit": {"oid": "82029a035cdf0932af8fad1ada0fb1d8558c11d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDowODo1M1rOHQD92g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDowODo1M1rOHQD92g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwNDI1MA==", "bodyText": "Do we need this public API? Isn't the one on line 1381 enough? (max overload + with response)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486604250", "createdAt": "2020-09-10T20:08:53Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1338,4 +1338,122 @@ public HttpPipeline getHttpPipeline() {\n     }\n \n     //endregion Event Route APIs\n+\n+    //region Telemetry APIs\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload) {\n+        PublishTelemetryRequestOptions publishTelemetryRequestOptions = new PublishTelemetryRequestOptions();\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param publishTelemetryRequestOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82029a035cdf0932af8fad1ada0fb1d8558c11d3"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzA3MTYw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#pullrequestreview-486307160", "createdAt": "2020-09-10T21:01:05Z", "commit": {"oid": "82029a035cdf0932af8fad1ada0fb1d8558c11d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMTowNlrOHQFl3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowMTowNlrOHQFl3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDg3OQ==", "bodyText": "Don't you need to pre-emptively serialize this string so that the PL deserializes it back into the string that the user provided?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#discussion_r486630879", "createdAt": "2020-09-10T21:01:06Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1338,4 +1338,122 @@ public HttpPipeline getHttpPipeline() {\n     }\n \n     //endregion Event Route APIs\n+\n+    //region Telemetry APIs\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload) {\n+        PublishTelemetryRequestOptions publishTelemetryRequestOptions = new PublishTelemetryRequestOptions();\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param publishTelemetryRequestOptions The additional information to be used when processing a telemetry request.\n+     * @return An empty mono.\n+     */\n+    public Mono<Void> publishTelemetry(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context))\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Publishes telemetry from a digital twin\n+     * The result is then consumed by one or many destination endpoints (subscribers) defined under {@link EventRoute}\n+     * These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param payload The application/json telemetry payload to be sent.\n+     * @param publishTelemetryRequestOptions The additional information to be used when processing a telemetry request.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    public Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions) {\n+        return withContext(context -> publishTelemetryWithResponse(digitalTwinId, payload, publishTelemetryRequestOptions, context));\n+    }\n+\n+    Mono<Response<Void>> publishTelemetryWithResponse(String digitalTwinId, String payload, PublishTelemetryRequestOptions publishTelemetryRequestOptions, Context context) {\n+        return protocolLayer.getDigitalTwins().sendTelemetryWithResponseAsync(\n+            digitalTwinId,\n+            publishTelemetryRequestOptions.getMessageId(),\n+            payload,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82029a035cdf0932af8fad1ada0fb1d8558c11d3"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff38b3b8d49ef3ef979e0c9036a1f1eaedf22606", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ff38b3b8d49ef3ef979e0c9036a1f1eaedf22606", "committedDate": "2020-09-10T21:04:45Z", "message": "Update DigitalTwinsAsyncClient.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzA5NTk2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#pullrequestreview-486309596", "createdAt": "2020-09-10T21:05:00Z", "commit": {"oid": "82029a035cdf0932af8fad1ada0fb1d8558c11d3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c44895d31b3cd17233493045e0b82436fff5e37", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7c44895d31b3cd17233493045e0b82436fff5e37", "committedDate": "2020-09-10T21:45:22Z", "message": "Update ComponentsAsyncTests.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec9fc765d9f62d04ada4fa677e50471b532c0fab", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ec9fc765d9f62d04ada4fa677e50471b532c0fab", "committedDate": "2020-09-10T21:56:09Z", "message": "Remove unnecessary APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c09ff123be1713d46ddd9980e9e256351d4a9259", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c09ff123be1713d46ddd9980e9e256351d4a9259", "committedDate": "2020-09-10T22:04:45Z", "message": "Update DigitalTwinsClient.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43b34e80107b90ce5e2dfcf3cb9c5b1d2e23ddd2", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/43b34e80107b90ce5e2dfcf3cb9c5b1d2e23ddd2", "committedDate": "2020-09-10T22:05:42Z", "message": "Update DigitalTwinsClient.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d028ba2523803af23c97001e85bad3f904eaec2f", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d028ba2523803af23c97001e85bad3f904eaec2f", "committedDate": "2020-09-10T22:10:21Z", "message": "Add ServiceMethod annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cef198757cac41d8ef7bb73f2ed2a7c8172e8d9", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6cef198757cac41d8ef7bb73f2ed2a7c8172e8d9", "committedDate": "2020-09-10T22:12:03Z", "message": "More missing serviceMethod annotations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzUxMzAx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15047#pullrequestreview-486351301", "createdAt": "2020-09-10T22:21:37Z", "commit": {"oid": "6cef198757cac41d8ef7bb73f2ed2a7c8172e8d9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3594, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}