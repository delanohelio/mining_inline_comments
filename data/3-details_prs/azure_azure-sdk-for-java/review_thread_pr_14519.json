{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0ODQ0OTQw", "number": 14519, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODozODoyOVrOEdV4WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODozODoyOVrOEdV4WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjAyNjQ4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/AvroSerializerProviders.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODozODoyOVrOHIcoVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODo0MDo0NVrOHIctng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxOTczMw==", "bodyText": "Why do we need these static methods here - getSchema and getSchemaName? I think callers should just call createInstance().getSchema().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14519#discussion_r478619733", "createdAt": "2020-08-27T18:38:29Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/AvroSerializerProviders.java", "diffHunk": "@@ -47,13 +45,43 @@ private static synchronized void load() {\n      * Creates an Avro serializer instance based using the first {@link AvroSerializerProvider} found on the classpath.\n      *\n      * @param schema Schema tied to the Avro serializer for its lifetime.\n-     * @return A new Avro serializer instance tied to the passed schema.\n+     * @return A new {@link AvroSerializer} instance tied to the passed schema.\n      */\n-    public static ObjectSerializer createInstance(String schema) {\n+    public static AvroSerializer createInstance(String schema) {\n         if (defaultProvider == null) {\n             load();\n         }\n \n         return defaultProvider.createInstance(schema);\n     }\n+\n+    /**\n+     * Returns the Avro schema for specified object.\n+     *\n+     * @param object The object having its Avro schema retrieved.\n+     * @return The Avro schema for the object.\n+     * @throws IllegalArgumentException If the object is an unsupported type.\n+     */\n+    public static String getSchema(Object object) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d59d2d759e0b03b7cb751ba30a7edd1b4c71197"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYyMTA4Ng==", "bodyText": "Schema handling is a concept that is a layer above the serializer. That is why I added it to the providers instance of the instance level serializer class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14519#discussion_r478621086", "createdAt": "2020-08-27T18:40:45Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/AvroSerializerProviders.java", "diffHunk": "@@ -47,13 +45,43 @@ private static synchronized void load() {\n      * Creates an Avro serializer instance based using the first {@link AvroSerializerProvider} found on the classpath.\n      *\n      * @param schema Schema tied to the Avro serializer for its lifetime.\n-     * @return A new Avro serializer instance tied to the passed schema.\n+     * @return A new {@link AvroSerializer} instance tied to the passed schema.\n      */\n-    public static ObjectSerializer createInstance(String schema) {\n+    public static AvroSerializer createInstance(String schema) {\n         if (defaultProvider == null) {\n             load();\n         }\n \n         return defaultProvider.createInstance(schema);\n     }\n+\n+    /**\n+     * Returns the Avro schema for specified object.\n+     *\n+     * @param object The object having its Avro schema retrieved.\n+     * @return The Avro schema for the object.\n+     * @throws IllegalArgumentException If the object is an unsupported type.\n+     */\n+    public static String getSchema(Object object) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxOTczMw=="}, "originalCommit": {"oid": "7d59d2d759e0b03b7cb751ba30a7edd1b4c71197"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1420, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}