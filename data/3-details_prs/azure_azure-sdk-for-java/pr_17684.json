{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzODY2OTU5", "number": 17684, "title": "Add tracing support for Service Bus processor", "bodyText": "This PR instruments Service Bus Processor code for distributed tracing.", "createdAt": "2020-11-19T11:12:06Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17684", "merged": true, "mergeCommit": {"oid": "5885efda8c025c51754b6f77979cc3ce0773bb50"}, "closed": true, "closedAt": "2020-11-20T00:44:41Z", "author": {"login": "srnagar"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdeAwqdgH2gAyNTIzODY2OTU5OjVjNWRjM2EwY2Q3MzdjMGE4ODJjYmUyYzliNzZkZjU0OWM2YzVhZTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeMTFQAFqTUzNDk4OTM1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5c5dc3a0cd737c0a882cbe2c9b76df549c6c5ae7", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5c5dc3a0cd737c0a882cbe2c9b76df549c6c5ae7", "committedDate": "2020-11-19T11:08:07Z", "message": "Add tracing support for SB processor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd6762c664e8a36c61beb094e8f57bf56404757e", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cd6762c664e8a36c61beb094e8f57bf56404757e", "committedDate": "2020-11-19T11:10:59Z", "message": "Make addContext packag-private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e813f07c3d8664d577ef063c630f0fb752679b2e", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e813f07c3d8664d577ef063c630f0fb752679b2e", "committedDate": "2020-11-19T19:17:08Z", "message": "Merge branch 'master' into sb-processor-tracing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0ODAxMjcy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17684#pullrequestreview-534801272", "createdAt": "2020-11-19T19:57:27Z", "commit": {"oid": "e813f07c3d8664d577ef063c630f0fb752679b2e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0Nzk3NzY3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17684#pullrequestreview-534797767", "createdAt": "2020-11-19T19:52:54Z", "commit": {"oid": "e813f07c3d8664d577ef063c630f0fb752679b2e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTo1Mjo1NFrOH2vJ5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTo1Nzo0NlrOH2vUvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1NzczNA==", "bodyText": "We already have similar function in MessagingUtil.startProcessTracingSpan , should we use that here ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17684#discussion_r527157734", "createdAt": "2020-11-19T19:52:54Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusProcessorClient.java", "diffHunk": "@@ -201,6 +232,54 @@ public void onComplete() {\n             });\n     }\n \n+    private void endProcessTracingSpan(Context processSpanContext, Signal<Void> signal) {\n+        if (processSpanContext == null) {\n+            return;\n+        }\n+\n+        Optional<Object> spanScope = processSpanContext.getData(SCOPE_KEY);\n+        // Disposes of the scope when the trace span closes.\n+        if (!spanScope.isPresent() || !tracerProvider.isEnabled()) {\n+            return;\n+        }\n+        if (spanScope.get() instanceof Closeable) {\n+            Closeable close = (Closeable) processSpanContext.getData(SCOPE_KEY).get();\n+            try {\n+                close.close();\n+                tracerProvider.endSpan(processSpanContext, signal);\n+            } catch (IOException ioException) {\n+                logger.error(\"endTracingSpan().close() failed with an error %s\", ioException);\n+            }\n+\n+        } else {\n+            logger.warning(String.format(Locale.US,\n+                \"Process span scope type is not of type Closeable, but type: %s. Not closing the scope and span\",\n+                spanScope.get() != null ? spanScope.getClass() : \"null\"));\n+        }\n+    }\n+\n+    private Context startProcessTracingSpan(ServiceBusReceivedMessage receivedMessage, String entityPath,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e813f07c3d8664d577ef063c630f0fb752679b2e"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2MDUwOA==", "bodyText": "Is this how we are linking the received message with original sent message ?\nFor example , how it is done in python https://github.com/Azure/azure-sdk-for-python/pull/14777/files#diff-98cad0f4853c6ad2e604c286a38004b3e11ad75fa697cb86638b1c4944b509eeR285\nIf the received message has the application properties key = Diagnostic-Id populated, we should a new activity and add a link to the Process activity", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17684#discussion_r527160508", "createdAt": "2020-11-19T19:57:46Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusProcessorClient.java", "diffHunk": "@@ -201,6 +232,54 @@ public void onComplete() {\n             });\n     }\n \n+    private void endProcessTracingSpan(Context processSpanContext, Signal<Void> signal) {\n+        if (processSpanContext == null) {\n+            return;\n+        }\n+\n+        Optional<Object> spanScope = processSpanContext.getData(SCOPE_KEY);\n+        // Disposes of the scope when the trace span closes.\n+        if (!spanScope.isPresent() || !tracerProvider.isEnabled()) {\n+            return;\n+        }\n+        if (spanScope.get() instanceof Closeable) {\n+            Closeable close = (Closeable) processSpanContext.getData(SCOPE_KEY).get();\n+            try {\n+                close.close();\n+                tracerProvider.endSpan(processSpanContext, signal);\n+            } catch (IOException ioException) {\n+                logger.error(\"endTracingSpan().close() failed with an error %s\", ioException);\n+            }\n+\n+        } else {\n+            logger.warning(String.format(Locale.US,\n+                \"Process span scope type is not of type Closeable, but type: %s. Not closing the scope and span\",\n+                spanScope.get() != null ? spanScope.getClass() : \"null\"));\n+        }\n+    }\n+\n+    private Context startProcessTracingSpan(ServiceBusReceivedMessage receivedMessage, String entityPath,\n+                                            String fullyQualifiedNamespace) {\n+\n+        Object diagnosticId = receivedMessage.getApplicationProperties().get(DIAGNOSTIC_ID_KEY);\n+        if (diagnosticId == null || !tracerProvider.isEnabled()) {\n+            return Context.NONE;\n+        }\n+\n+        Context spanContext = tracerProvider.extractContext(diagnosticId.toString(), Context.NONE);\n+\n+        spanContext = spanContext\n+            .addData(ENTITY_PATH_KEY, entityPath)\n+            .addData(HOST_NAME_KEY, fullyQualifiedNamespace)\n+            .addData(AZ_TRACING_NAMESPACE_KEY, AZ_TRACING_NAMESPACE_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e813f07c3d8664d577ef063c630f0fb752679b2e"}, "originalPosition": 129}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84992d68c740f826958cf07bc612b0303aa39985", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/84992d68c740f826958cf07bc612b0303aa39985", "committedDate": "2020-11-20T00:01:09Z", "message": "Resolve merge conflict"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0OTg5MzUw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17684#pullrequestreview-534989350", "createdAt": "2020-11-20T00:34:40Z", "commit": {"oid": "84992d68c740f826958cf07bc612b0303aa39985"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1600, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}