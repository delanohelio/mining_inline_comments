{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNjc2NzQ1", "number": 10218, "title": "Update Form Recognizer Readme and samples", "bodyText": "Update Readme.md\nUpdate Samples readme\nAdd samples.", "createdAt": "2020-04-15T10:32:15Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218", "merged": true, "mergeCommit": {"oid": "ca5261d8df4ab45a86b36cc2f4046a09a76044b5"}, "closed": true, "closedAt": "2020-04-21T05:30:01Z", "author": {"login": "samvaity"}, "timelineItems": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYQ0pZgH2gAyNDAzNjc2NzQ1OjIzNmQyMzhiODgwZTQ2YjYyMGRiNGFkMzJiMjZjNDM4ZGRhNzQ1YWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZqSWtgH2gAyNDAzNjc2NzQ1OjM2ZGY3MWY0ZWIxNDcwMzkwZGI4MjQyNjM3Mzc3NWI5MzNhOTA3NWI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "236d238b880e46b620db4ad32b26c438dda745af", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/236d238b880e46b620db4ad32b26c438dda745af", "committedDate": "2020-04-16T18:16:15Z", "message": "update to new design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c96acf2bca371f72f5f1a7740ac9fe3a089d175", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4c96acf2bca371f72f5f1a7740ac9fe3a089d175", "committedDate": "2020-04-16T18:18:21Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ccb9efbcee027565c0db52eb12c563d91b0b101", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ccb9efbcee027565c0db52eb12c563d91b0b101", "committedDate": "2020-04-16T18:20:58Z", "message": "Form Training async client test part 1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e75e673b142f906dd85358187ef42c61f567365a", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e75e673b142f906dd85358187ef42c61f567365a", "committedDate": "2020-04-16T18:23:36Z", "message": "update form recognizer endpoint models"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18d91a82b533f1d4380fd2a358658dc29c10e653", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/18d91a82b533f1d4380fd2a358658dc29c10e653", "committedDate": "2020-04-16T18:24:12Z", "message": "update model transforms for fieldMap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "513cae9fc730a3513698dab0b57eddb73bd816e7", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/513cae9fc730a3513698dab0b57eddb73bd816e7", "committedDate": "2020-04-16T18:24:36Z", "message": "Remove generic fieldvalue instead use generic FormField"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b099537e9dbbeb5665e4c8c694a040105fcc70a1", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b099537e9dbbeb5665e4c8c694a040105fcc70a1", "committedDate": "2020-04-16T18:25:17Z", "message": "Add form recognizer async tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10c3685a8cd6f48fe1bc7cfeaacc5860185a6e46", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/10c3685a8cd6f48fe1bc7cfeaacc5860185a6e46", "committedDate": "2020-04-16T18:26:14Z", "message": "update sync tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2f076cb5d72613efb4af4745c0b0346d8f008f1", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b2f076cb5d72613efb4af4745c0b0346d8f008f1", "committedDate": "2020-04-16T18:26:46Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37b11cd4a8de9bab89dc5a559b3e255089777b0a", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/37b11cd4a8de9bab89dc5a559b3e255089777b0a", "committedDate": "2020-04-16T18:28:18Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22e2bc2c5917ec3c3e16f33b18825bbf01d33b62", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/22e2bc2c5917ec3c3e16f33b18825bbf01d33b62", "committedDate": "2020-04-16T18:28:46Z", "message": "additional tests for custom forms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b494da5fb2abeb36194ec9d564947c7e8341f665", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b494da5fb2abeb36194ec9d564947c7e8341f665", "committedDate": "2020-04-16T18:29:39Z", "message": "rebase changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29ad1b90ae35259b86252795d75310ed00de22aa", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/29ad1b90ae35259b86252795d75310ed00de22aa", "committedDate": "2020-04-16T18:30:45Z", "message": "ModelTrainingStatus rename, deleteModel tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c289611406b295acfb02733d25d104b1125804c5", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c289611406b295acfb02733d25d104b1125804c5", "committedDate": "2020-04-16T18:31:50Z", "message": "model updates, null checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd6dc856f92c7f738d8581a8bf00de9465c80cea", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cd6dc856f92c7f738d8581a8bf00de9465c80cea", "committedDate": "2020-04-16T18:31:55Z", "message": "initial"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cc5119820d94e04811c50d610b7fb7f3837fb1a", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5cc5119820d94e04811c50d610b7fb7f3837fb1a", "committedDate": "2020-04-16T18:31:55Z", "message": "remaining advanced and readme samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7878904bbd8cac1b6c46ce78984c0cbdb7610637", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7878904bbd8cac1b6c46ce78984c0cbdb7610637", "committedDate": "2020-04-16T18:31:56Z", "message": "fix ups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec302d667d4989d4d855748e9eba0e30d7156c9c", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ec302d667d4989d4d855748e9eba0e30d7156c9c", "committedDate": "2020-04-16T18:32:44Z", "message": "update"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c3a20d491edb9aac5fe3976b968d80202fbd34ee", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c3a20d491edb9aac5fe3976b968d80202fbd34ee", "committedDate": "2020-04-16T18:05:57Z", "message": "update"}, "afterCommit": {"oid": "ec302d667d4989d4d855748e9eba0e30d7156c9c", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ec302d667d4989d4d855748e9eba0e30d7156c9c", "committedDate": "2020-04-16T18:32:44Z", "message": "update"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24b6e3b98ce7daa9e54640d200b72db4862744ca", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/24b6e3b98ce7daa9e54640d200b72db4862744ca", "committedDate": "2020-04-16T18:41:00Z", "message": "rebase changes"}, "afterCommit": {"oid": "06bd8d1cab7b82dd7c5c013d77e54aeb6a3d1bab", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/06bd8d1cab7b82dd7c5c013d77e54aeb6a3d1bab", "committedDate": "2020-04-16T18:42:00Z", "message": "rebase changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06bd8d1cab7b82dd7c5c013d77e54aeb6a3d1bab", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/06bd8d1cab7b82dd7c5c013d77e54aeb6a3d1bab", "committedDate": "2020-04-16T18:42:00Z", "message": "rebase changes"}, "afterCommit": {"oid": "8d5bc06c164cf1189106621638df9e2fc105602e", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8d5bc06c164cf1189106621638df9e2fc105602e", "committedDate": "2020-04-16T18:43:12Z", "message": "rebase changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ed52cdc575a479ad71430a730fcd3beacdf1461", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9ed52cdc575a479ad71430a730fcd3beacdf1461", "committedDate": "2020-04-16T18:44:57Z", "message": "rebase changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d5bc06c164cf1189106621638df9e2fc105602e", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8d5bc06c164cf1189106621638df9e2fc105602e", "committedDate": "2020-04-16T18:43:12Z", "message": "rebase changes"}, "afterCommit": {"oid": "9ed52cdc575a479ad71430a730fcd3beacdf1461", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9ed52cdc575a479ad71430a730fcd3beacdf1461", "committedDate": "2020-04-16T18:44:57Z", "message": "rebase changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/12159894917fd767ea2353777ef71cd415892dd2", "committedDate": "2020-04-17T01:21:12Z", "message": "update for async changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTc2ODk3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#pullrequestreview-395176897", "createdAt": "2020-04-17T05:50:44Z", "commit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNTo1MDo0NFrOGHAwdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNTo1MDo0NFrOGHAwdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAwNTYyMw==", "bodyText": "Probably need to update this.\nI saw in here you already have the readme sample.\nhttps://github.com/Azure/azure-sdk-for-java/pull/10218/files#diff-49d7f9d8b6def8c99411771de4caf755L106", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410005623", "createdAt": "2020-04-17T05:50:44Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -91,32 +95,88 @@ credential.update(\"{new_api_key}\");\n \n ## Key concepts\n ### Client\n-The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client] and \n-[FormRecognizerAsyncClient][form_recognizer_async_client]. It provides both synchronous and\n-asynchronous operations to access a specific use of Form Recognizer, such as training custom models,\n-extracting layout and receipt information from documents.\n+The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client], \n+[FormRecognizerAsyncClient][form_recognizer_async_client] and [FormTrainingClient][form_training_sync_client],\n+[FormTrainingAsyncClient][form_training_async_client]. It also supports model management operations to\n+get custom model info, delete model, list models and get account details.\n+\n+### FormRecognizerClient\n+A `FormRecognizerClient` and `FormRecognizerAsynClient` provides both synchronous and asynchronous operations to access\n+ a specific use of Form Recognizer, such as recognizing layout, receipt and custom form data from documents.\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L39-L42 -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTc3MzQx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#pullrequestreview-395177341", "createdAt": "2020-04-17T05:52:13Z", "commit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNTo1MjoxM1rOGHAxwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNTo1MjoxM1rOGHAxwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAwNTk1Mg==", "bodyText": "if possible we can remove this unchecked?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410005952", "createdAt": "2020-04-17T05:52:13Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/ReceiptExtensions.java", "diffHunk": "@@ -108,10 +108,9 @@ public static USReceipt asUSReceipt(RecognizedReceipt receipt) {\n     @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTc5NTA5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#pullrequestreview-395179509", "createdAt": "2020-04-17T05:58:37Z", "commit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNTo1ODozN1rOGHA4qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNTo1ODozN1rOGHA4qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAwNzcyMg==", "bodyText": "is possible to just use .subscribe() instead of .last()?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410007722", "createdAt": "2020-04-17T05:58:37Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/TrainUnlabeledCustomModelAsync.java", "diffHunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * This sample demonstrates how to train a model with unlabeled data. See RecognizeCustomFormsAsync\n+ * to recognize forms with your created custom model.\n+ */\n+public class TrainUnlabeledCustomModelAsync {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+\n+        FormTrainingAsyncClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildAsyncClient().getFormTrainingAsyncClient();\n+\n+        // Train custom model\n+        String trainingSetSource = \"{training_set_SAS}\";\n+        PollerFlux<OperationResult, CustomFormModel> trainingPoller = client.beginTraining(trainingSetSource, false);\n+\n+        Mono<CustomFormModel> customFormModelResult = trainingPoller\n+            .last()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NTM4NTM2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#pullrequestreview-395538536", "createdAt": "2020-04-17T15:09:18Z", "commit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "state": "COMMENTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNTowOToxOFrOGHR6MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNTo0OTo0OVrOGHTb4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4NjY0MA==", "bodyText": "For now, I think we're using Content API for this, then saying in the explanation that it corresponds to the service's Layout endpoint", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410286640", "createdAt": "2020-04-17T15:09:18Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -1,8 +1,12 @@\n # Azure Form Recognizer client library for Java\n-Form Recognizer is a cloud-based cognitive service that uses machine learning technology to identify and extract text, \n-key-value pairs and table data from form documents.\n+Azure Cognitive Services Form Recognizer is a cloud service that uses machine learning to recognize text and table data\n+from form documents. Form Recognizer is made up of the following services:\n \n-[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n+* Custom models - Extract name/value pairs and table data from forms. These models are trained with your own data, so they're tailored to your forms.\n+* Prebuilt receipt model - Extract data from USA sales receipts using a prebuilt model.\n+* Layout API - Extract text and table structures, along with their bounding box coordinates, from documents.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4NzUwMg==", "bodyText": "Apologies in advance because I've made changes to my readme since you looked at it, so I'll comment as much as I can the changes I've made.\nTalking to @annelo-msft, she doesn't think they'll like saying that they're made up of services, should say something mroe like \"...has the following functionalities\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410287502", "createdAt": "2020-04-17T15:10:34Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -1,8 +1,12 @@\n # Azure Form Recognizer client library for Java\n-Form Recognizer is a cloud-based cognitive service that uses machine learning technology to identify and extract text, \n-key-value pairs and table data from form documents.\n+Azure Cognitive Services Form Recognizer is a cloud service that uses machine learning to recognize text and table data\n+from form documents. Form Recognizer is made up of the following services:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4ODcwNQ==", "bodyText": "Is it necessary to include the async versions for each of the clients?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410288705", "createdAt": "2020-04-17T15:12:31Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -91,32 +95,88 @@ credential.update(\"{new_api_key}\");\n \n ## Key concepts\n ### Client\n-The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client] and \n-[FormRecognizerAsyncClient][form_recognizer_async_client]. It provides both synchronous and\n-asynchronous operations to access a specific use of Form Recognizer, such as training custom models,\n-extracting layout and receipt information from documents.\n+The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client], \n+[FormRecognizerAsyncClient][form_recognizer_async_client] and [FormTrainingClient][form_training_sync_client],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4OTY3Mg==", "bodyText": "Confused why you're highlighting only model management scenarios here, I think you don't need to include it", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410289672", "createdAt": "2020-04-17T15:14:02Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -91,32 +95,88 @@ credential.update(\"{new_api_key}\");\n \n ## Key concepts\n ### Client\n-The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client] and \n-[FormRecognizerAsyncClient][form_recognizer_async_client]. It provides both synchronous and\n-asynchronous operations to access a specific use of Form Recognizer, such as training custom models,\n-extracting layout and receipt information from documents.\n+The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client], \n+[FormRecognizerAsyncClient][form_recognizer_async_client] and [FormTrainingClient][form_training_sync_client],\n+[FormTrainingAsyncClient][form_training_async_client]. It also supports model management operations to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5MjU5OQ==", "bodyText": "Just as a heads up, talking to @annelo-msft, the ordering from most used to least is something like:\nrecognize custom forms, recognize content, recognize receipt, train unlabeled, train labeled, manage custom models.\nWould be good to have them in this order throughout the readme", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410292599", "createdAt": "2020-04-17T15:18:42Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -91,32 +95,88 @@ credential.update(\"{new_api_key}\");\n \n ## Key concepts\n ### Client\n-The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client] and \n-[FormRecognizerAsyncClient][form_recognizer_async_client]. It provides both synchronous and\n-asynchronous operations to access a specific use of Form Recognizer, such as training custom models,\n-extracting layout and receipt information from documents.\n+The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client], \n+[FormRecognizerAsyncClient][form_recognizer_async_client] and [FormTrainingClient][form_training_sync_client],\n+[FormTrainingAsyncClient][form_training_async_client]. It also supports model management operations to\n+get custom model info, delete model, list models and get account details.\n+\n+### FormRecognizerClient\n+A `FormRecognizerClient` and `FormRecognizerAsynClient` provides both synchronous and asynchronous operations to access", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5NDQ2MQ==", "bodyText": "I don't know if it's necessary to break it up with labeled and unlabeled, because we consider that more of an \"advanced\" sample", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410294461", "createdAt": "2020-04-17T15:21:50Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -91,32 +95,88 @@ credential.update(\"{new_api_key}\");\n \n ## Key concepts\n ### Client\n-The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client] and \n-[FormRecognizerAsyncClient][form_recognizer_async_client]. It provides both synchronous and\n-asynchronous operations to access a specific use of Form Recognizer, such as training custom models,\n-extracting layout and receipt information from documents.\n+The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client], \n+[FormRecognizerAsyncClient][form_recognizer_async_client] and [FormTrainingClient][form_training_sync_client],\n+[FormTrainingAsyncClient][form_training_async_client]. It also supports model management operations to\n+get custom model info, delete model, list models and get account details.\n+\n+### FormRecognizerClient\n+A `FormRecognizerClient` and `FormRecognizerAsynClient` provides both synchronous and asynchronous operations to access\n+ a specific use of Form Recognizer, such as recognizing layout, receipt and custom form data from documents.\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L39-L42 -->\n+```java\n+```\n+\n+### FormTrainingClient\n+A `FormTrainingClient` is the Form Recognizer interface to use for creating, using, and managing custom machine-learned models.\n+It provides both synchronous and asynchronous operations for training custom models, retrieving and deleting models, \n+as well as understanding how close you are to reaching subscription limits for the number of models you can train.\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L39-L42 -->\n+```java\n+```\n+\n+### Long-Running Operations\n+Long-running operations are operations which consist of an initial request sent to the service to start an operation,\n+followed by polling the service at intervals to determine whether the operation has completed or failed, and if it has\n+succeeded, to get the result.\n+\n+Methods that train models or recognize values from forms are modeled as long-running operations. The client exposes\n+a `begin_<method-name>` method that returns a `SyncPoller` or `PollerFlux` instance. \n+Callers should wait for the operation to completed by calling `getFinalResult()` on the returned operation from the\n+`begin_<method-name>` method. Sample code snippets are provided to illustrate using long-running operations\n+[below](#Examples).\n+\n+### Training models\n+Using the `FormTrainingClient`, you can train a machine-learned model on your own form type. The resulting model will\n+be able to recognize values from the types of forms it was trained on.\n+\n+#### Training without labels\n+A model trained without labels uses unsupervised learning to understand the layout and relationships between field\n+names and values in your forms. The learning algorithm clusters the training forms by type and learns what fields and\n+tables are present in each form type.\n+\n+This approach doesn't require manual data labeling or intensive coding and maintenance, and we recommend you try this\n+method first when training custom models.\n+\n+#### Training with labels\n+A model trained with labels uses supervised learning to recognize values you specify by adding labels to your training forms.\n+The learning algorithm uses a label file you provide to learn what fields are found at various locations in the form,\n+and learns to recognize just those values.\n+\n+This approach can result in better-performing models, and those models can work with more complex form structures.\n+\n+### Recognizing values from forms", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5NTM3OA==", "bodyText": "I think you should change all mentions of 'extract' to 'recognize', and get rid of all mentions of 'layout', except for at the beginninig where we tie it to the service's layout endpoint", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410295378", "createdAt": "2020-04-17T15:23:12Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -91,32 +95,88 @@ credential.update(\"{new_api_key}\");\n \n ## Key concepts\n ### Client\n-The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client] and \n-[FormRecognizerAsyncClient][form_recognizer_async_client]. It provides both synchronous and\n-asynchronous operations to access a specific use of Form Recognizer, such as training custom models,\n-extracting layout and receipt information from documents.\n+The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client], \n+[FormRecognizerAsyncClient][form_recognizer_async_client] and [FormTrainingClient][form_training_sync_client],\n+[FormTrainingAsyncClient][form_training_async_client]. It also supports model management operations to\n+get custom model info, delete model, list models and get account details.\n+\n+### FormRecognizerClient\n+A `FormRecognizerClient` and `FormRecognizerAsynClient` provides both synchronous and asynchronous operations to access\n+ a specific use of Form Recognizer, such as recognizing layout, receipt and custom form data from documents.\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L39-L42 -->\n+```java\n+```\n+\n+### FormTrainingClient\n+A `FormTrainingClient` is the Form Recognizer interface to use for creating, using, and managing custom machine-learned models.\n+It provides both synchronous and asynchronous operations for training custom models, retrieving and deleting models, \n+as well as understanding how close you are to reaching subscription limits for the number of models you can train.\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L39-L42 -->\n+```java\n+```\n+\n+### Long-Running Operations\n+Long-running operations are operations which consist of an initial request sent to the service to start an operation,\n+followed by polling the service at intervals to determine whether the operation has completed or failed, and if it has\n+succeeded, to get the result.\n+\n+Methods that train models or recognize values from forms are modeled as long-running operations. The client exposes\n+a `begin_<method-name>` method that returns a `SyncPoller` or `PollerFlux` instance. \n+Callers should wait for the operation to completed by calling `getFinalResult()` on the returned operation from the\n+`begin_<method-name>` method. Sample code snippets are provided to illustrate using long-running operations\n+[below](#Examples).\n+\n+### Training models\n+Using the `FormTrainingClient`, you can train a machine-learned model on your own form type. The resulting model will\n+be able to recognize values from the types of forms it was trained on.\n+\n+#### Training without labels\n+A model trained without labels uses unsupervised learning to understand the layout and relationships between field\n+names and values in your forms. The learning algorithm clusters the training forms by type and learns what fields and\n+tables are present in each form type.\n+\n+This approach doesn't require manual data labeling or intensive coding and maintenance, and we recommend you try this\n+method first when training custom models.\n+\n+#### Training with labels\n+A model trained with labels uses supervised learning to recognize values you specify by adding labels to your training forms.\n+The learning algorithm uses a label file you provide to learn what fields are found at various locations in the form,\n+and learns to recognize just those values.\n+\n+This approach can result in better-performing models, and those models can work with more complex form structures.\n+\n+### Recognizing values from forms\n+Using the `FormRecognizerClient`, you can use your own trained models to recognize field values and locations, as well as\n+table data, from forms of the type you trained your models on. The output of models trained with and without labels\n+differs as described below.\n+\n+#### Using models trained without labels\n+Models trained without labels consider each form page to be a different form type. For example, if you train your\n+model on 3-page forms, it will learn that these are three different types of forms. When you send a form to it for\n+analysis, it will return a collection of three pages, where each page contains the field names, values, and locations,\n+as well as table data, found on that page.\n+\n+#### Using models trained with labels\n+Models trained with labels consider a form as a single unit. For example, if you train your model on 3-page forms\n+with labels, it will learn to recognize field values from the locations you've labeled across all pages in the form.\n+If you sent a document containing two forms to it for analysis, it would return a collection of two forms,\n+where each form contains the field names, values, and locations, as well as table data, found in that form.\n+Fields and tables have page numbers to identify the pages where they were found.\n+\n+### Managing Custom Models\n+Using the `FormTrainingClient`, you can get, list, and delete the custom models you've trained.\n+You can also view the count of models you've trained and the maximum number of models your subscription will\n+allow you to store.\n \n ## Examples\n-The following sections provide several code snippets covering some of the most common Form Recognizer tasks, including:\n \n-### Form Recognizer Client\n-Form Recognizer support both synchronous and asynchronous client creation by using\n-`FormRecognizerClientBuilder`,\n+The following section provides several code snippets covering some of the most common Form Recognizer tasks, including:\n \n-<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L39-L42 -->\n-``` java\n-FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n-    .apiKey(new AzureKeyCredential(\"{api_key}\"))\n-    .endpoint(\"{endpoint}\")\n-    .buildClient();\n-```\n-<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L49-L52 -->\n-``` java\n-FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n-    .apiKey(new AzureKeyCredential(\"{api_key}\"))\n-    .endpoint(\"{endpoint}\")\n-    .buildAsyncClient();\n-```\n+* [Recognize Receipts](#recognize-receipts \"Recognize receipts\")\n+* [Recognize Content](#recognize-content \"Recognize Content\")\n+* [Recognize Forms Using a Custom Model](#recognize-forms-using-a-custom-model \"Recognize Forms Using a Custom Model\")\n+* [Train a Model](#train-a-model \"Train a model\")\n+* [Manage Your Models](#manage-your-models \"Manage Your Models\")\n \n ### Extract receipt information", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5NzI4Mg==", "bodyText": "I think it'd be best to have the forms also in the samples folder, doesn't look great going into the test folder", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410297282", "createdAt": "2020-04-17T15:26:11Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+/**\n+ * This sample demonstrates the differences in output that arise when recognize_custom_forms\n+ * is called with custom models trained with labeled and unlabeled data.\n+ */\n+public class AdvancedDiffLabeledUnlabeledData {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused arguments to the program.\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public static void main(String[] args) throws IOException {\n+        // Instantiate a client that will be used to call the service.\n+\n+        FormRecognizerClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_Key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildClient();\n+\n+        File analyzeFile = new File(\"../../test/resources/sample-files/Invoice_1.pdf\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5ODA2Nw==", "bodyText": "I think the name of this file is different than what you referenced it as in the samples readme", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410298067", "createdAt": "2020-04-17T15:27:25Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwMDAzOQ==", "bodyText": "Differences between labeled and unlabeled might be more clear without decomposition. For example, I didn't print label data information for the labeled custom model, while I did for unlabeled", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410300039", "createdAt": "2020-04-17T15:30:44Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+/**\n+ * This sample demonstrates the differences in output that arise when recognize_custom_forms\n+ * is called with custom models trained with labeled and unlabeled data.\n+ */\n+public class AdvancedDiffLabeledUnlabeledData {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused arguments to the program.\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public static void main(String[] args) throws IOException {\n+        // Instantiate a client that will be used to call the service.\n+\n+        FormRecognizerClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_Key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildClient();\n+\n+        File analyzeFile = new File(\"../../test/resources/sample-files/Invoice_1.pdf\");\n+        byte[] fileContent = Files.readAllBytes(analyzeFile.toPath());\n+\n+        IterableStream<RecognizedForm> formsWithLabeledModel =\n+            client.beginRecognizeCustomForms(new ByteArrayInputStream(fileContent), \"{labeled_model_Id}\", analyzeFile.length(), FormContentType.APPLICATION_PDF, true, null).getFinalResult();\n+        IterableStream<RecognizedForm> formsWithUnlabeledModel =\n+            client.beginRecognizeCustomForms(new ByteArrayInputStream(fileContent), \"{unlabeled_model_Id}\", analyzeFile.length(), FormContentType.APPLICATION_PDF).getFinalResult();\n+\n+        //  The main difference is found in the labels of its fields\n+        // The form recognized with a labeled model will have the labels it was trained with,\n+        // the unlabeled one will be denoted with indices\n+        System.out.println(\"--------Recognizing forms with labeled custom model--------\");\n+        printFieldData(formsWithLabeledModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwMTMwOQ==", "bodyText": "Also not the same name as the samples readme", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410301309", "createdAt": "2020-04-17T15:32:44Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java", "diffHunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwMTgwNw==", "bodyText": "I think we determined we were going to use recognize custom forms from file for the manual validation sample", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410301807", "createdAt": "2020-04-17T15:33:33Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java", "diffHunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormWord;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.ai.formrecognizer.models.TextContentType;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+/*\n+ * This sample demonstrates how to output the information that will help with manually\n+ * validating your output from recognize custom forms.\n+ */\n+public class AdvancedManualValidationInfo {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        FormRecognizerAsyncClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildAsyncClient();\n+\n+        String modelId = \"{model_Id}\";\n+        String filePath = \"{analyze_file_path}\";\n+        PollerFlux<OperationResult, IterableStream<RecognizedForm>> trainingPoller =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwMjU3OQ==", "bodyText": "I think it'd be good to include the index of the form you're recognizing in this print statement, in case there are multiple returned forms", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410302579", "createdAt": "2020-04-17T15:34:50Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java", "diffHunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormWord;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.ai.formrecognizer.models.TextContentType;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+/*\n+ * This sample demonstrates how to output the information that will help with manually\n+ * validating your output from recognize custom forms.\n+ */\n+public class AdvancedManualValidationInfo {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        FormRecognizerAsyncClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildAsyncClient();\n+\n+        String modelId = \"{model_Id}\";\n+        String filePath = \"{analyze_file_path}\";\n+        PollerFlux<OperationResult, IterableStream<RecognizedForm>> trainingPoller =\n+            client.beginRecognizeCustomFormsFromUrl(filePath, modelId, true, null);\n+\n+        IterableStream<RecognizedForm> recognizedForms = trainingPoller\n+            .last()\n+            .flatMap(trainingOperationResponse -> {\n+                if (trainingOperationResponse.getStatus().isComplete()) {\n+                    // training completed successfully, retrieving final result.\n+                    return trainingOperationResponse.getFinalResult();\n+                } else {\n+                    return Mono.error(new RuntimeException(\"Polling completed unsuccessfully with status:\"\n+                        + trainingOperationResponse.getStatus()));\n+                }\n+            }).block();\n+\n+        System.out.println(\"--------RECOGNIZING FORM --------\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwNDY0Mg==", "bodyText": "I think it'd be better to just print the model ids of the models you're listing, and then call getCustomModel with a single model id and print out more of that information. That way there's less information being printed and you can highlight lisModels and getCustomModel separately", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410304642", "createdAt": "2020-04-17T15:38:24Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ManageCustomModels.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.AccountProperties;\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+import com.azure.ai.formrecognizer.models.CustomFormModelInfo;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.Context;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Sample for demonstrating common custom model management operations.\n+ */\n+public class ManageCustomModels {\n+\n+    /**\n+     * Main program to invoke the demo for performing operations of a custom model.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     */\n+    public static void main(final String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        FormTrainingClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildClient().getFormTrainingClient();\n+\n+        AtomicReference<String> modelId = null;\n+\n+        // First, we see how many custom models we have, and what our limit is\n+        AccountProperties accountProperties = client.getAccountProperties();\n+        System.out.printf(\"The account has %s custom models, and we can have at most %s custom models\",\n+            accountProperties.getCount(), accountProperties.getLimit());\n+\n+        // Next, we get a paged list of all of our custom models\n+        PagedIterable<CustomFormModelInfo> customModels = client.listModels();\n+        System.out.println(\"We have following models in the account:\");\n+        customModels.forEach(customFormModelInfo -> {\n+            System.out.printf(\"Model Id: %s%n\", customFormModelInfo.getModelId());\n+            // get custom model info\n+            modelId.set(customFormModelInfo.getModelId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwNTEyMQ==", "bodyText": "It might be nice to include a get of that model after deletion. this way you can show what error is thrown when accessing a custom model that doesn't exist, and how to check that the model is deleted.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410305121", "createdAt": "2020-04-17T15:39:14Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ManageCustomModels.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.AccountProperties;\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+import com.azure.ai.formrecognizer.models.CustomFormModelInfo;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.Context;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Sample for demonstrating common custom model management operations.\n+ */\n+public class ManageCustomModels {\n+\n+    /**\n+     * Main program to invoke the demo for performing operations of a custom model.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     */\n+    public static void main(final String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        FormTrainingClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildClient().getFormTrainingClient();\n+\n+        AtomicReference<String> modelId = null;\n+\n+        // First, we see how many custom models we have, and what our limit is\n+        AccountProperties accountProperties = client.getAccountProperties();\n+        System.out.printf(\"The account has %s custom models, and we can have at most %s custom models\",\n+            accountProperties.getCount(), accountProperties.getLimit());\n+\n+        // Next, we get a paged list of all of our custom models\n+        PagedIterable<CustomFormModelInfo> customModels = client.listModels();\n+        System.out.println(\"We have following models in the account:\");\n+        customModels.forEach(customFormModelInfo -> {\n+            System.out.printf(\"Model Id: %s%n\", customFormModelInfo.getModelId());\n+            // get custom model info\n+            modelId.set(customFormModelInfo.getModelId());\n+            CustomFormModel customModel = client.getCustomModel(customFormModelInfo.getModelId());\n+            System.out.printf(\"Model Id: %s%n\", customModel.getModelId());\n+            System.out.printf(\"Model Status: %s%n\", customModel.getModelStatus());\n+            System.out.printf(\"Created on: %s%n\", customModel.getCreatedOn());\n+            System.out.printf(\"Updated on: %s%n\", customModel.getLastUpdatedOn());\n+            customModel.getSubModels().forEach(customFormSubModel -> {\n+                System.out.printf(\"Custom Model Form type: %s%n\", customFormSubModel.getFormType());\n+                System.out.printf(\"Custom Model Accuracy: %s%n\", customFormSubModel.getAccuracy());\n+                if (customFormSubModel.getFieldMap() != null) {\n+                    customFormSubModel.getFieldMap().forEach((fieldText, customFormModelField) -> {\n+                        System.out.printf(\"Field Text: %s%n\", fieldText);\n+                        System.out.printf(\"Field Accuracy: %s%n\", customFormModelField.getAccuracy());\n+                    });\n+                }\n+\n+            });\n+        });\n+\n+        // Delete Custom Model\n+        System.out.printf(\"Deleted model with model Id: %s operation completed with status: %s%n\", modelId.get(),\n+            client.deleteModelWithResponse(modelId.get(), Context.NONE).getStatusCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwNTc4MA==", "bodyText": "I thought java had automatic content type detection. If so, can you not pass the content type since that's what most users will be doing", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410305780", "createdAt": "2020-04-17T15:40:22Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeContent.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.FormPage;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+\n+/**\n+ * Sample for extracting layout information using input stream.\n+ */\n+public class RecognizeContent {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public static void main(final String[] args) throws IOException {\n+        // Instantiate a client that will be used to call the service.\n+\n+        FormRecognizerClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildClient();\n+\n+        File sourceFile = new File(\"../../test/resources/sample-files/layout1.jpg\");\n+        byte[] fileContent = Files.readAllBytes(sourceFile.toPath());\n+        InputStream targetStream = new ByteArrayInputStream(fileContent);\n+\n+        SyncPoller<OperationResult, IterableStream<FormPage>> recognizeLayoutPoller =\n+            client.beginRecognizeContent(targetStream, sourceFile.length(), FormContentType.IMAGE_JPEG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwNzc3OQ==", "bodyText": "Confused why this file is empty", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410307779", "createdAt": "2020-04-17T15:43:38Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeReceipts.java", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedReceipt;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+\n+/**\n+ * Sample for recognizing US receipt information using file source URL.\n+ */\n+public class RecognizeReceipts {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     * @throws IOException from reading file.\n+     */\n+    public static void main(final String[] args) throws IOException {\n+        // Instantiate a client that will be used to call the service.\n+        FormRecognizerClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildClient();\n+\n+        File sourceFile = new File(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMxMDE0NA==", "bodyText": "I know we said Java might diverge on this (doing file for sync, url for async), but I think that because you've added a recognizeReceipts and a recognizeReceipts FromURL, you can have the other sync and async functions call the files functions", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410310144", "createdAt": "2020-04-17T15:47:31Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeContentAsync.java", "diffHunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormPage;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Sample for extracting layout information using input stream.\n+ */\n+public class RecognizeContentAsync {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     */\n+    public static void main(final String[] args)  {\n+        // Instantiate a client that will be used to call the service.\n+\n+        FormRecognizerAsyncClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildAsyncClient();\n+\n+        PollerFlux<OperationResult, IterableStream<FormPage>> recognizeLayoutPoller =\n+            client.beginRecognizeContentFromUrl(\"file_source_url\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMxMTM4NA==", "bodyText": "I think you should link to the recognizeCustomForms sample.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410311384", "createdAt": "2020-04-17T15:49:23Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/TrainLabeledCustomModelAsync.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * This sample demonstrates how to train a model with labeled data. See RecognizeCustomFormsAsync\n+ * to recognize forms with your custom model.\n+ */\n+public class TrainLabeledCustomModelAsync {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMxMTY1MA==", "bodyText": "I think you want to link to the labeled and unlabeled custom model training samples", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410311650", "createdAt": "2020-04-17T15:49:49Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeCustomForms.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+\n+/*\n+ *  This sample demonstrates how to analyze a form from a document with a custom", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjE5MjM0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#pullrequestreview-395619234", "createdAt": "2020-04-17T16:55:14Z", "commit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo1NToxNFrOGHVv3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo1NToxNFrOGHVv3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0OTUzNA==", "bodyText": "In python this is called listModelInfos, are we ok with the languages diverging here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410349534", "createdAt": "2020-04-17T16:55:14Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ManageCustomModels.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.AccountProperties;\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+import com.azure.ai.formrecognizer.models.CustomFormModelInfo;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.Context;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Sample for demonstrating common custom model management operations.\n+ */\n+public class ManageCustomModels {\n+\n+    /**\n+     * Main program to invoke the demo for performing operations of a custom model.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     */\n+    public static void main(final String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        FormTrainingClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildClient().getFormTrainingClient();\n+\n+        AtomicReference<String> modelId = null;\n+\n+        // First, we see how many custom models we have, and what our limit is\n+        AccountProperties accountProperties = client.getAccountProperties();\n+        System.out.printf(\"The account has %s custom models, and we can have at most %s custom models\",\n+            accountProperties.getCount(), accountProperties.getLimit());\n+\n+        // Next, we get a paged list of all of our custom models\n+        PagedIterable<CustomFormModelInfo> customModels = client.listModels();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12159894917fd767ea2353777ef71cd415892dd2"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "committedDate": "2020-04-17T20:43:51Z", "message": "update doc review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5282757ce9e58e5d8e9a1cb0e1d3f356ddee31fb", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5282757ce9e58e5d8e9a1cb0e1d3f356ddee31fb", "committedDate": "2020-04-17T20:53:15Z", "message": "rename form training client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzY5NTg0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#pullrequestreview-395769584", "createdAt": "2020-04-17T21:00:28Z", "commit": {"oid": "5282757ce9e58e5d8e9a1cb0e1d3f356ddee31fb"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMTowMDoyOVrOGHc8Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMTowNTo1NlrOGHdFfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2NzQxNA==", "bodyText": "double 'both'", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410467414", "createdAt": "2020-04-17T21:00:29Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -94,74 +94,38 @@ credential.update(\"{new_api_key}\");\n ```\n \n ## Key concepts\n-### Client\n-The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client], \n-[FormRecognizerAsyncClient][form_recognizer_async_client] and [FormTrainingClient][form_training_sync_client],\n-[FormTrainingAsyncClient][form_training_async_client]. It also supports model management operations to\n-get custom model info, delete model, list models and get account details.\n-\n ### FormRecognizerClient\n-A `FormRecognizerClient` and `FormRecognizerAsynClient` provides both synchronous and asynchronous operations to access\n- a specific use of Form Recognizer, such as recognizing layout, receipt and custom form data from documents.\n-<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L39-L42 -->\n-```java\n-```\n+The [FormRecognizerClient][form_recognizer_sync_client] and [FormRecognizerAsyncClient][form_recognizer_async_client]\n+provide both synchronous and asynchronous operations to recognize data from forms using custom trained models, \n+recognizing content from forms, and analyzing receipts.\n \n ### FormTrainingClient\n-A `FormTrainingClient` is the Form Recognizer interface to use for creating, using, and managing custom machine-learned models.\n-It provides both synchronous and asynchronous operations for training custom models, retrieving and deleting models, \n-as well as understanding how close you are to reaching subscription limits for the number of models you can train.\n-<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L39-L42 -->\n-```java\n-```\n+The [FormTrainingClient][form_training_sync_client] and \n+[FormTrainingAsyncClient][form_training_async_client] provide both both synchronous and asynchronous operations for ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5282757ce9e58e5d8e9a1cb0e1d3f356ddee31fb"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2OTc1OQ==", "bodyText": "Just to make sure: is it ok that we call the sample DiffCustomFormsLabeledUnlabeledData, but the actual sample file's name has an 'Advanced' prefix", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410469759", "createdAt": "2020-04-17T21:05:56Z", "author": {"login": "iscai-msft"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/README.md", "diffHunk": "@@ -42,16 +42,15 @@ Troubleshooting steps can be found [here][SDK_README_TROUBLESHOOTING].\n See [Next steps][SDK_README_NEXT_STEPS].\n Following section provides code samples for some of the advanced scenarios in Form Recognizer Client library:\n - Get info to help with manually validating the output of the `FormRecognizer` client\n-  - [get_manual_validation_info][get_manual_validation_info] and [get_manual_validation_info_async][get_manual_validation_info_async]\n+  - [ManualValidationInfo][get_manual_validation_info] and [ManualValidationInfoAsync][get_manual_validation_info_async]\n - See the differences in output when using a custom model trained with labeled data and one trained with unlabeled data\n- - [differentiate_custom_forms_with_labeled_and_unlabeled_models][differentiate_custom_forms_with_labeled_and_unlabeled_models] and [differentiate_custom_forms_with_labeled_and_unlabeled_models_async][differentiate_custom_forms_with_labeled_and_unlabeled_models_async]\n+ - [DiffCustomFormsLabeledUnlabeledData][differentiate_custom_forms_with_labeled_and_unlabeled_models] and [DiffCustomFormsLabeledUnlabeledDataAsync][differentiate_custom_forms_with_labeled_and_unlabeled_models_async]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5282757ce9e58e5d8e9a1cb0e1d3f356ddee31fb"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3903317286f443746f11b864fde259d8013be22b", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3903317286f443746f11b864fde259d8013be22b", "committedDate": "2020-04-17T22:04:51Z", "message": "rename and readme error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODAwMTg1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#pullrequestreview-395800185", "createdAt": "2020-04-17T22:06:42Z", "commit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODc5OTY4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#pullrequestreview-395879968", "createdAt": "2020-04-18T04:20:40Z", "commit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNDoyMDo0MFrOGHlo_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNDoyMDo0MFrOGHlo_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYwOTkxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    System.out.printf(\"Field %s has value %s with confidence score of %s %n\", label,\n          \n          \n            \n                    System.out.printf(\"Field %s has value %s with confidence score of %d.%n\", label,", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410609918", "createdAt": "2020-04-18T04:20:40Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -90,38 +94,118 @@ credential.update(\"{new_api_key}\");\n ```\n \n ## Key concepts\n-### Client\n-The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client] and \n-[FormRecognizerAsyncClient][form_recognizer_async_client]. It provides both synchronous and\n-asynchronous operations to access a specific use of Form Recognizer, such as training custom models,\n-extracting layout and receipt information from documents.\n+### FormRecognizerClient\n+The [FormRecognizerClient][form_recognizer_sync_client] and [FormRecognizerAsyncClient][form_recognizer_async_client]\n+provide both synchronous and asynchronous operations to recognize data from forms using custom trained models, \n+recognizing content from forms, and analyzing receipts.\n+\n+### FormTrainingClient\n+The [FormTrainingClient][form_training_sync_client] and \n+[FormTrainingAsyncClient][form_training_async_client] provide both synchronous and asynchronous operations for \n+for training custom models, retrieving and deleting models, as well as understanding how close you are to \n+reaching subscription limits for the number of models you can train.\n+\n+### Long-Running Operations\n+Long-running operations are operations which consist of an initial request sent to the service to start an operation,\n+followed by polling the service at intervals to determine whether the operation has completed or failed, and if it has\n+succeeded, to get the result.\n+\n+Methods that train models or recognize values from forms are modeled as long-running operations. The client exposes\n+a `begin<method-name>` method that returns a `SyncPoller` or `PollerFlux` instance. \n+Callers should wait for the operation to completed by calling `getFinalResult()` on the returned operation from the\n+`begin<method-name>` method. Sample code snippets are provided to illustrate using long-running operations\n+[below](#Examples).\n+\n+### Training models\n+Using the `FormTrainingClient`, you can train a machine-learned model on your own form type. The resulting model will\n+be able to recognize values from the types of forms it was trained on.\n+You have the following options when you train custom models: [training with labeled data][service_doc_train_labeled]\n+and [train without labeled data][service_doc_train_labeled].\n+\n+### Recognizing values from forms\n+Using the `FormRecognizerClient`, you can use your own trained models to recognize field values and locations, as well as\n+table data, from forms of the type you trained your models on. The output of models trained with and without labels\n+differs as shown in this [sample][differentiate_custom_forms_with_labeled_and_unlabeled_models].\n+\n+### Managing Custom Models\n+Using the `FormTrainingClient`, you can get, list, and delete the custom models you've trained.\n+You can also view the count of models you've trained and the maximum number of models your subscription will\n+allow you to store.\n \n ## Examples\n-The following sections provide several code snippets covering some of the most common Form Recognizer tasks, including:\n \n-### Form Recognizer Client\n-Form Recognizer support both synchronous and asynchronous client creation by using\n-`FormRecognizerClientBuilder`,\n+The following section provides several code snippets covering some of the most common Form Recognizer tasks, including:\n \n-<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L39-L42 -->\n-``` java\n-FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n-    .apiKey(new AzureKeyCredential(\"{api_key}\"))\n-    .endpoint(\"{endpoint}\")\n-    .buildClient();\n+* [Recognize Forms Using a Custom Model](#recognize-forms-using-a-custom-model \"Recognize Forms Using a Custom Model\")\n+* [Recognize Content](#recognize-content \"Recognize Content\")\n+* [Recognize Receipts](#recognize-receipts \"Recognize receipts\")\n+* [Train a Model](#train-a-model \"Train a model\")\n+* [Manage Your Models](#manage-your-models \"Manage Your Models\")\n+\n+\n+### Recognize Forms Using a Custom Model\n+Recognize name/value pairs and table data from forms. These models are trained with your own data,\n+so they're tailored to your forms. You should only recognize forms of the same form type that the custom model was trained on.\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L57-L73 -->\n+```java\n+String analyzeFilePath = \"{file_source_url}\";\n+String modelId = \"{custom_trained_model_id}\";\n+SyncPoller<OperationResult, IterableStream<RecognizedForm>> recognizeFormPoller =\n+    formRecognizerClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId);\n+\n+IterableStream<RecognizedForm> recognizedForms = recognizeFormPoller.getFinalResult();\n+\n+recognizedForms.forEach(form -> {\n+    System.out.println(\"----------- Recognized Form -----------\");\n+    System.out.printf(\"Form type: %s%n\", form.getFormType());\n+    form.getFields().forEach((label, formField) -> {\n+        System.out.printf(\"Field %s has value %s with confidence score of %s %n\", label,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODgwMTgw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#pullrequestreview-395880180", "createdAt": "2020-04-18T04:24:48Z", "commit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNDoyNDo0OFrOGHlvqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNDoyNDo0OFrOGHlvqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYxMTYyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                System.out.printf(\"Has width: %s and height: %s, measured with unit: %s%n\", formPage.getWidth(),\n          \n          \n            \n                System.out.printf(\"Has width: %d and height: %d, measured with unit: %s.%n\", formPage.getWidth(),", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410611625", "createdAt": "2020-04-18T04:24:48Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -90,38 +94,118 @@ credential.update(\"{new_api_key}\");\n ```\n \n ## Key concepts\n-### Client\n-The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client] and \n-[FormRecognizerAsyncClient][form_recognizer_async_client]. It provides both synchronous and\n-asynchronous operations to access a specific use of Form Recognizer, such as training custom models,\n-extracting layout and receipt information from documents.\n+### FormRecognizerClient\n+The [FormRecognizerClient][form_recognizer_sync_client] and [FormRecognizerAsyncClient][form_recognizer_async_client]\n+provide both synchronous and asynchronous operations to recognize data from forms using custom trained models, \n+recognizing content from forms, and analyzing receipts.\n+\n+### FormTrainingClient\n+The [FormTrainingClient][form_training_sync_client] and \n+[FormTrainingAsyncClient][form_training_async_client] provide both synchronous and asynchronous operations for \n+for training custom models, retrieving and deleting models, as well as understanding how close you are to \n+reaching subscription limits for the number of models you can train.\n+\n+### Long-Running Operations\n+Long-running operations are operations which consist of an initial request sent to the service to start an operation,\n+followed by polling the service at intervals to determine whether the operation has completed or failed, and if it has\n+succeeded, to get the result.\n+\n+Methods that train models or recognize values from forms are modeled as long-running operations. The client exposes\n+a `begin<method-name>` method that returns a `SyncPoller` or `PollerFlux` instance. \n+Callers should wait for the operation to completed by calling `getFinalResult()` on the returned operation from the\n+`begin<method-name>` method. Sample code snippets are provided to illustrate using long-running operations\n+[below](#Examples).\n+\n+### Training models\n+Using the `FormTrainingClient`, you can train a machine-learned model on your own form type. The resulting model will\n+be able to recognize values from the types of forms it was trained on.\n+You have the following options when you train custom models: [training with labeled data][service_doc_train_labeled]\n+and [train without labeled data][service_doc_train_labeled].\n+\n+### Recognizing values from forms\n+Using the `FormRecognizerClient`, you can use your own trained models to recognize field values and locations, as well as\n+table data, from forms of the type you trained your models on. The output of models trained with and without labels\n+differs as shown in this [sample][differentiate_custom_forms_with_labeled_and_unlabeled_models].\n+\n+### Managing Custom Models\n+Using the `FormTrainingClient`, you can get, list, and delete the custom models you've trained.\n+You can also view the count of models you've trained and the maximum number of models your subscription will\n+allow you to store.\n \n ## Examples\n-The following sections provide several code snippets covering some of the most common Form Recognizer tasks, including:\n \n-### Form Recognizer Client\n-Form Recognizer support both synchronous and asynchronous client creation by using\n-`FormRecognizerClientBuilder`,\n+The following section provides several code snippets covering some of the most common Form Recognizer tasks, including:\n \n-<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L39-L42 -->\n-``` java\n-FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n-    .apiKey(new AzureKeyCredential(\"{api_key}\"))\n-    .endpoint(\"{endpoint}\")\n-    .buildClient();\n+* [Recognize Forms Using a Custom Model](#recognize-forms-using-a-custom-model \"Recognize Forms Using a Custom Model\")\n+* [Recognize Content](#recognize-content \"Recognize Content\")\n+* [Recognize Receipts](#recognize-receipts \"Recognize receipts\")\n+* [Train a Model](#train-a-model \"Train a model\")\n+* [Manage Your Models](#manage-your-models \"Manage Your Models\")\n+\n+\n+### Recognize Forms Using a Custom Model\n+Recognize name/value pairs and table data from forms. These models are trained with your own data,\n+so they're tailored to your forms. You should only recognize forms of the same form type that the custom model was trained on.\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L57-L73 -->\n+```java\n+String analyzeFilePath = \"{file_source_url}\";\n+String modelId = \"{custom_trained_model_id}\";\n+SyncPoller<OperationResult, IterableStream<RecognizedForm>> recognizeFormPoller =\n+    formRecognizerClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId);\n+\n+IterableStream<RecognizedForm> recognizedForms = recognizeFormPoller.getFinalResult();\n+\n+recognizedForms.forEach(form -> {\n+    System.out.println(\"----------- Recognized Form -----------\");\n+    System.out.printf(\"Form type: %s%n\", form.getFormType());\n+    form.getFields().forEach((label, formField) -> {\n+        System.out.printf(\"Field %s has value %s with confidence score of %s %n\", label,\n+            formField.getFieldValue(),\n+            formField.getConfidence());\n+    });\n+    System.out.print(\"-----------------------------------\");\n+});\n ```\n-<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L49-L52 -->\n-``` java\n-FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n-    .apiKey(new AzureKeyCredential(\"{api_key}\"))\n-    .endpoint(\"{endpoint}\")\n-    .buildAsyncClient();\n+\n+### Recognize Content\n+Recognize text and table structures, along with their bounding box coordinates, from documents.\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L77-L103 -->\n+```java\n+String analyzeFilePath = \"{file_source_url}\";\n+SyncPoller<OperationResult, IterableStream<FormPage>> recognizeLayoutPoller =\n+    formRecognizerClient.beginRecognizeContentFromUrl(analyzeFilePath);\n+\n+IterableStream<FormPage> layoutPageResults = recognizeLayoutPoller.getFinalResult();\n+\n+layoutPageResults.forEach(formPage -> {\n+    // Table information\n+    System.out.println(\"----Recognizing content ----\");\n+    System.out.printf(\"Has width: %s and height: %s, measured with unit: %s%n\", formPage.getWidth(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "originalPosition": 158}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODgwMjE5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#pullrequestreview-395880219", "createdAt": "2020-04-18T04:25:30Z", "commit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNDoyNTozMFrOGHlw2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNDoyNTozMFrOGHlw2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYxMTkzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    System.out.printf(\"Table has %s rows and %s columns.%n\", formTable.getRowCount(),\n          \n          \n            \n                    System.out.printf(\"Table has %d rows and %d columns.%n\", formTable.getRowCount(),", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410611931", "createdAt": "2020-04-18T04:25:30Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -90,38 +94,118 @@ credential.update(\"{new_api_key}\");\n ```\n \n ## Key concepts\n-### Client\n-The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client] and \n-[FormRecognizerAsyncClient][form_recognizer_async_client]. It provides both synchronous and\n-asynchronous operations to access a specific use of Form Recognizer, such as training custom models,\n-extracting layout and receipt information from documents.\n+### FormRecognizerClient\n+The [FormRecognizerClient][form_recognizer_sync_client] and [FormRecognizerAsyncClient][form_recognizer_async_client]\n+provide both synchronous and asynchronous operations to recognize data from forms using custom trained models, \n+recognizing content from forms, and analyzing receipts.\n+\n+### FormTrainingClient\n+The [FormTrainingClient][form_training_sync_client] and \n+[FormTrainingAsyncClient][form_training_async_client] provide both synchronous and asynchronous operations for \n+for training custom models, retrieving and deleting models, as well as understanding how close you are to \n+reaching subscription limits for the number of models you can train.\n+\n+### Long-Running Operations\n+Long-running operations are operations which consist of an initial request sent to the service to start an operation,\n+followed by polling the service at intervals to determine whether the operation has completed or failed, and if it has\n+succeeded, to get the result.\n+\n+Methods that train models or recognize values from forms are modeled as long-running operations. The client exposes\n+a `begin<method-name>` method that returns a `SyncPoller` or `PollerFlux` instance. \n+Callers should wait for the operation to completed by calling `getFinalResult()` on the returned operation from the\n+`begin<method-name>` method. Sample code snippets are provided to illustrate using long-running operations\n+[below](#Examples).\n+\n+### Training models\n+Using the `FormTrainingClient`, you can train a machine-learned model on your own form type. The resulting model will\n+be able to recognize values from the types of forms it was trained on.\n+You have the following options when you train custom models: [training with labeled data][service_doc_train_labeled]\n+and [train without labeled data][service_doc_train_labeled].\n+\n+### Recognizing values from forms\n+Using the `FormRecognizerClient`, you can use your own trained models to recognize field values and locations, as well as\n+table data, from forms of the type you trained your models on. The output of models trained with and without labels\n+differs as shown in this [sample][differentiate_custom_forms_with_labeled_and_unlabeled_models].\n+\n+### Managing Custom Models\n+Using the `FormTrainingClient`, you can get, list, and delete the custom models you've trained.\n+You can also view the count of models you've trained and the maximum number of models your subscription will\n+allow you to store.\n \n ## Examples\n-The following sections provide several code snippets covering some of the most common Form Recognizer tasks, including:\n \n-### Form Recognizer Client\n-Form Recognizer support both synchronous and asynchronous client creation by using\n-`FormRecognizerClientBuilder`,\n+The following section provides several code snippets covering some of the most common Form Recognizer tasks, including:\n \n-<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L39-L42 -->\n-``` java\n-FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n-    .apiKey(new AzureKeyCredential(\"{api_key}\"))\n-    .endpoint(\"{endpoint}\")\n-    .buildClient();\n+* [Recognize Forms Using a Custom Model](#recognize-forms-using-a-custom-model \"Recognize Forms Using a Custom Model\")\n+* [Recognize Content](#recognize-content \"Recognize Content\")\n+* [Recognize Receipts](#recognize-receipts \"Recognize receipts\")\n+* [Train a Model](#train-a-model \"Train a model\")\n+* [Manage Your Models](#manage-your-models \"Manage Your Models\")\n+\n+\n+### Recognize Forms Using a Custom Model\n+Recognize name/value pairs and table data from forms. These models are trained with your own data,\n+so they're tailored to your forms. You should only recognize forms of the same form type that the custom model was trained on.\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L57-L73 -->\n+```java\n+String analyzeFilePath = \"{file_source_url}\";\n+String modelId = \"{custom_trained_model_id}\";\n+SyncPoller<OperationResult, IterableStream<RecognizedForm>> recognizeFormPoller =\n+    formRecognizerClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId);\n+\n+IterableStream<RecognizedForm> recognizedForms = recognizeFormPoller.getFinalResult();\n+\n+recognizedForms.forEach(form -> {\n+    System.out.println(\"----------- Recognized Form -----------\");\n+    System.out.printf(\"Form type: %s%n\", form.getFormType());\n+    form.getFields().forEach((label, formField) -> {\n+        System.out.printf(\"Field %s has value %s with confidence score of %s %n\", label,\n+            formField.getFieldValue(),\n+            formField.getConfidence());\n+    });\n+    System.out.print(\"-----------------------------------\");\n+});\n ```\n-<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L49-L52 -->\n-``` java\n-FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n-    .apiKey(new AzureKeyCredential(\"{api_key}\"))\n-    .endpoint(\"{endpoint}\")\n-    .buildAsyncClient();\n+\n+### Recognize Content\n+Recognize text and table structures, along with their bounding box coordinates, from documents.\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L77-L103 -->\n+```java\n+String analyzeFilePath = \"{file_source_url}\";\n+SyncPoller<OperationResult, IterableStream<FormPage>> recognizeLayoutPoller =\n+    formRecognizerClient.beginRecognizeContentFromUrl(analyzeFilePath);\n+\n+IterableStream<FormPage> layoutPageResults = recognizeLayoutPoller.getFinalResult();\n+\n+layoutPageResults.forEach(formPage -> {\n+    // Table information\n+    System.out.println(\"----Recognizing content ----\");\n+    System.out.printf(\"Has width: %s and height: %s, measured with unit: %s%n\", formPage.getWidth(),\n+        formPage.getHeight(),\n+        formPage.getUnit());\n+    formPage.getTables().forEach(formTable -> {\n+        System.out.printf(\"Table has %s rows and %s columns.%n\", formTable.getRowCount(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "originalPosition": 162}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODgwMzUx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#pullrequestreview-395880351", "createdAt": "2020-04-18T04:27:44Z", "commit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNDoyNzo0NFrOGHl0dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNDoyNzo0NFrOGHl0dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYxMjg1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                boundingBoxStr.append(String.format(\"[%s, %s]\", point.getX(), point.getY())));\n          \n          \n            \n                                boundingBoxStr.append(String.format(\"[%d, %d]\", point.getX(), point.getY())));", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410612853", "createdAt": "2020-04-18T04:27:44Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -90,38 +94,118 @@ credential.update(\"{new_api_key}\");\n ```\n \n ## Key concepts\n-### Client\n-The Form Recognizer client library provides a [FormRecognizerClient][form_recognizer_sync_client] and \n-[FormRecognizerAsyncClient][form_recognizer_async_client]. It provides both synchronous and\n-asynchronous operations to access a specific use of Form Recognizer, such as training custom models,\n-extracting layout and receipt information from documents.\n+### FormRecognizerClient\n+The [FormRecognizerClient][form_recognizer_sync_client] and [FormRecognizerAsyncClient][form_recognizer_async_client]\n+provide both synchronous and asynchronous operations to recognize data from forms using custom trained models, \n+recognizing content from forms, and analyzing receipts.\n+\n+### FormTrainingClient\n+The [FormTrainingClient][form_training_sync_client] and \n+[FormTrainingAsyncClient][form_training_async_client] provide both synchronous and asynchronous operations for \n+for training custom models, retrieving and deleting models, as well as understanding how close you are to \n+reaching subscription limits for the number of models you can train.\n+\n+### Long-Running Operations\n+Long-running operations are operations which consist of an initial request sent to the service to start an operation,\n+followed by polling the service at intervals to determine whether the operation has completed or failed, and if it has\n+succeeded, to get the result.\n+\n+Methods that train models or recognize values from forms are modeled as long-running operations. The client exposes\n+a `begin<method-name>` method that returns a `SyncPoller` or `PollerFlux` instance. \n+Callers should wait for the operation to completed by calling `getFinalResult()` on the returned operation from the\n+`begin<method-name>` method. Sample code snippets are provided to illustrate using long-running operations\n+[below](#Examples).\n+\n+### Training models\n+Using the `FormTrainingClient`, you can train a machine-learned model on your own form type. The resulting model will\n+be able to recognize values from the types of forms it was trained on.\n+You have the following options when you train custom models: [training with labeled data][service_doc_train_labeled]\n+and [train without labeled data][service_doc_train_labeled].\n+\n+### Recognizing values from forms\n+Using the `FormRecognizerClient`, you can use your own trained models to recognize field values and locations, as well as\n+table data, from forms of the type you trained your models on. The output of models trained with and without labels\n+differs as shown in this [sample][differentiate_custom_forms_with_labeled_and_unlabeled_models].\n+\n+### Managing Custom Models\n+Using the `FormTrainingClient`, you can get, list, and delete the custom models you've trained.\n+You can also view the count of models you've trained and the maximum number of models your subscription will\n+allow you to store.\n \n ## Examples\n-The following sections provide several code snippets covering some of the most common Form Recognizer tasks, including:\n \n-### Form Recognizer Client\n-Form Recognizer support both synchronous and asynchronous client creation by using\n-`FormRecognizerClientBuilder`,\n+The following section provides several code snippets covering some of the most common Form Recognizer tasks, including:\n \n-<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L39-L42 -->\n-``` java\n-FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n-    .apiKey(new AzureKeyCredential(\"{api_key}\"))\n-    .endpoint(\"{endpoint}\")\n-    .buildClient();\n+* [Recognize Forms Using a Custom Model](#recognize-forms-using-a-custom-model \"Recognize Forms Using a Custom Model\")\n+* [Recognize Content](#recognize-content \"Recognize Content\")\n+* [Recognize Receipts](#recognize-receipts \"Recognize receipts\")\n+* [Train a Model](#train-a-model \"Train a model\")\n+* [Manage Your Models](#manage-your-models \"Manage Your Models\")\n+\n+\n+### Recognize Forms Using a Custom Model\n+Recognize name/value pairs and table data from forms. These models are trained with your own data,\n+so they're tailored to your forms. You should only recognize forms of the same form type that the custom model was trained on.\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L57-L73 -->\n+```java\n+String analyzeFilePath = \"{file_source_url}\";\n+String modelId = \"{custom_trained_model_id}\";\n+SyncPoller<OperationResult, IterableStream<RecognizedForm>> recognizeFormPoller =\n+    formRecognizerClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId);\n+\n+IterableStream<RecognizedForm> recognizedForms = recognizeFormPoller.getFinalResult();\n+\n+recognizedForms.forEach(form -> {\n+    System.out.println(\"----------- Recognized Form -----------\");\n+    System.out.printf(\"Form type: %s%n\", form.getFormType());\n+    form.getFields().forEach((label, formField) -> {\n+        System.out.printf(\"Field %s has value %s with confidence score of %s %n\", label,\n+            formField.getFieldValue(),\n+            formField.getConfidence());\n+    });\n+    System.out.print(\"-----------------------------------\");\n+});\n ```\n-<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L49-L52 -->\n-``` java\n-FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n-    .apiKey(new AzureKeyCredential(\"{api_key}\"))\n-    .endpoint(\"{endpoint}\")\n-    .buildAsyncClient();\n+\n+### Recognize Content\n+Recognize text and table structures, along with their bounding box coordinates, from documents.\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L77-L103 -->\n+```java\n+String analyzeFilePath = \"{file_source_url}\";\n+SyncPoller<OperationResult, IterableStream<FormPage>> recognizeLayoutPoller =\n+    formRecognizerClient.beginRecognizeContentFromUrl(analyzeFilePath);\n+\n+IterableStream<FormPage> layoutPageResults = recognizeLayoutPoller.getFinalResult();\n+\n+layoutPageResults.forEach(formPage -> {\n+    // Table information\n+    System.out.println(\"----Recognizing content ----\");\n+    System.out.printf(\"Has width: %s and height: %s, measured with unit: %s%n\", formPage.getWidth(),\n+        formPage.getHeight(),\n+        formPage.getUnit());\n+    formPage.getTables().forEach(formTable -> {\n+        System.out.printf(\"Table has %s rows and %s columns.%n\", formTable.getRowCount(),\n+            formTable.getColumnCount());\n+        formTable.getCells().forEach(formTableCell -> {\n+            final StringBuilder boundingBoxStr = new StringBuilder();\n+            if (formTableCell.getBoundingBox() != null) {\n+                formTableCell.getBoundingBox().getPoints().forEach(point ->\n+                    boundingBoxStr.append(String.format(\"[%s, %s]\", point.getX(), point.getY())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "originalPosition": 168}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODgwNTM4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#pullrequestreview-395880538", "createdAt": "2020-04-18T04:31:11Z", "commit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNDozMToxMVrOGHl6Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNDozMToxMVrOGHl6Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYxNDM3NQ==", "bodyText": "nit: do we want to add it as a link or highlight docs.microsoft.com?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410614375", "createdAt": "2020-04-18T04:31:11Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -154,10 +314,27 @@ locate the root issue. View the [logging][logging] wiki for guidance about enabl\n ### Default HTTP Client\n All client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure \n the client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n-[HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n+[HTTP clients wiki][http_clients_wiki].\n \n ## Next steps\n-- Samples are explained in detail [here][samples_readme].\n+The following section provides several code snippets illustrating common patterns used in the Form Recognizer API.\n+\n+### More sample code\n+\n+These code samples show common scenario operations with the Azure Form Recognizer client library.\n+The async versions of the samples show asynchronous operations with Form Recognizer.\n+\n+* Recognize receipts: [RecognizeReceipts][recognize_receipts], ([async][recognize_receipts_async])\n+* Recognize receipts from a URL: [RecognizeReceiptsFromUrl][recognize_receipts_from_url], ([async][recognize_receipts_from_url_async])\n+* Recognize content: [RecognizeContent][recognize_content], ([async][recognize_content_async])\n+* Recognize custom forms: [RecognizeCustomForms][recognize_custom_forms], ([async][recognize_custom_forms_async])\n+* Train a model without labels: [TrainUnlabeledModel][train_unlabeled_model], ([async][train_unlabeled_model_async])\n+* Train a model with labels: [TrainLabeledModel][train_labeled_model], ([async][train_labeled_model_async])\n+* Manage custom models: [ManageCustomModels][manage_custom_models], ([async_version][manage_custom_models_async])\n+\n+### Additional documentation\n+\n+For more extensive documentation on Azure Cognitive Services Form Recognizer, see the [Form Recognizer documentation][api_reference_doc] on docs.microsoft.com.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "originalPosition": 309}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODgwNjk1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#pullrequestreview-395880695", "createdAt": "2020-04-18T04:34:31Z", "commit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNDozNDozMVrOGHl_fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNDozNDozMVrOGHl_fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYxNTY3OQ==", "bodyText": "alignment is odd here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410615679", "createdAt": "2020-04-18T04:34:31Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/README.md", "diffHunk": "@@ -19,30 +19,62 @@ Key concepts are explained in detail [here][SDK_README_KEY_CONCEPTS].\n Getting started explained in detail [here][SDK_README_GETTING_STARTED].\n \n ## Examples\n-The following sections provide several code snippets covering some of the most common configuration service tasks, including:\n-\n-- [Extract receipt information - InputStream][extract_receipt_sync]\n-- [Extract receipt information - SourceUrl][extract_receipt_async]\n+The following sections provide code samples covering common scenario operations with the Azure Form Recognizer client library.\n+- Recognize data from a file of a US sales receipt using a prebuilt model\n+  - [RecognizeReceipts][recognize_receipts] and [RecognizeReceiptsAsync][recognize_receipts_async]\n+- Recognize data from a URL of a US sales receipt using a prebuilt model\n+  - [RecognizeReceiptsFromUrl][recognize_receipts_from_url] and [RecognizeReceiptsFromUrlAsync][recognize_receipts_from_url_async]\n+- Recognize text and table structures of a document\n+  - [RecognizeContent][recognize_content] and [RecognizeContentAsync][recognize_content_async]\n+- Recognize forms with your custom model\n+  - [RecognizeCustomForms][recognize_custom_forms] and [RecognizeCustomFormsAsync][recognize_custom_forms_async]\n+- Train a custom model with labeled data\n+  - [TrainLabeledModel][train_labeled_model] and [TrainLabeledModelAsync][train_labeled_model_async]\n+- Train a custom model with unlabeled data\n+  - [TrainUnlabeledModel][train_unlabeled_model] and [TrainUnlabeledModelAsync][train_unlabeled_model_async]\n+- Manage the custom models in your account\n+  - [ManageCustomModels][manage_custom_models] and [ManageCustomModelsAsync][manage_custom_models_async]\n \n ## Troubleshooting\n Troubleshooting steps can be found [here][SDK_README_TROUBLESHOOTING].\n \n ## Next steps\n-See [Next steps][SDK_README_NEXT_STEPS]. \n+See [Next steps][SDK_README_NEXT_STEPS].\n+Following section provides code samples for some of the advanced scenarios in Form Recognizer Client library:\n+- Get info to help with manually validating the output of the `FormRecognizer` client\n+  - [AdvancedManualValidationInfo][get_manual_validation_info] and [AdvancedManualValidationInfoAsync][get_manual_validation_info_async]\n+- See the differences in output when using a custom model trained with labeled data and one trained with unlabeled data\n+ - [AdvancedDiffCustomFormsLabeledUnlabeledData][differentiate_custom_forms_with_labeled_and_unlabeled_models] and [AdvancedDiffCustomFormsLabeledUnlabeledDataAsync][differentiate_custom_forms_with_labeled_and_unlabeled_models_async]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODgwODE0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#pullrequestreview-395880814", "createdAt": "2020-04-18T04:36:48Z", "commit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNDozNjo0OVrOGHmDDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNDozNjo0OVrOGHmDDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYxNjU5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        System.out.printf(\"Field %s has value %s based on %s within bounding box %s with a confidence score \"\n          \n          \n            \n                                + \"of %s.%n\",\n          \n          \n            \n                        System.out.printf(\n          \n          \n            \n                            \"Field %s has value %s based on %s within bounding box %s with a confidence score of %d.%n\",", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410616590", "createdAt": "2020-04-18T04:36:49Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+/**\n+ * Sample to show the differences in output that arise when RecognizeCustomForms\n+ * is called with custom models trained with labeled and unlabeled data.\n+ */\n+public class AdvancedDiffLabeledUnlabeledData {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused arguments to the program.\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public static void main(String[] args) throws IOException {\n+        // Instantiate a client that will be used to call the service.\n+\n+        FormRecognizerClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_Key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildClient();\n+\n+        File analyzeFile = new File(\"../../test/resources/sample-files/Invoice_1.pdf\");\n+        byte[] fileContent = Files.readAllBytes(analyzeFile.toPath());\n+\n+        IterableStream<RecognizedForm> formsWithLabeledModel =\n+            client.beginRecognizeCustomForms(new ByteArrayInputStream(fileContent), \"{labeled_model_Id}\", analyzeFile.length(), FormContentType.APPLICATION_PDF, true, null).getFinalResult();\n+        IterableStream<RecognizedForm> formsWithUnlabeledModel =\n+            client.beginRecognizeCustomForms(new ByteArrayInputStream(fileContent), \"{unlabeled_model_Id}\", analyzeFile.length(), FormContentType.APPLICATION_PDF).getFinalResult();\n+\n+        //  The main difference is found in the labels of its fields\n+        // The form recognized with a labeled model will have the labels it was trained with,\n+        // the unlabeled one will be denoted with indices\n+        System.out.println(\"--------Recognizing forms with labeled custom model--------\");\n+        printFieldData(formsWithLabeledModel);\n+\n+        System.out.println(\"-----------------------------------------------------------\");\n+\n+        System.out.println(\"-------Recognizing forms with unlabeled custom model-------\");\n+        printFieldData(formsWithUnlabeledModel);\n+    }\n+\n+    private static void printFieldData(IterableStream<RecognizedForm> recognizedForms) {\n+        recognizedForms.forEach(labeledForm -> labeledForm.getFields().forEach((label, formField) -> {\n+            // With your labeled custom model, you will not get back label data but will get back value data\n+            // This is because your custom model didn't have to use any machine learning to deduce the label,\n+            // the label was directly provided to it.\n+            final StringBuilder boundingBoxStr = new StringBuilder();\n+            if (formField.getValueText().getBoundingBox() != null) {\n+                formField.getValueText().getBoundingBox().getPoints().forEach(point ->\n+                    boundingBoxStr.append(String.format(\"[%s, %s]\", point.getX(), point.getY())));\n+            }\n+            // The unlabeled custom model will also include data about your labels\n+            System.out.printf(\"Field %s has value %s based on %s within bounding box %s with a confidence score \"\n+                    + \"of %s.%n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODgxMDM2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#pullrequestreview-395881036", "createdAt": "2020-04-18T04:40:54Z", "commit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNDo0MDo1NFrOGHmJsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNDo0MDo1NFrOGHmJsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYxODI5MQ==", "bodyText": "do we want to show user .block()? might be considering mimic the another way of  doing it. Such as .subscribe() and wait a few seconds at the end of file that make sure result has returned.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410618291", "createdAt": "2020-04-18T04:40:54Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java", "diffHunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormWord;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.ai.formrecognizer.models.TextContentType;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+/*\n+ * Sample to output the information that will help with manually validating your output from recognize custom forms.\n+ */\n+public class AdvancedManualValidationInfo {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        FormRecognizerAsyncClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildAsyncClient();\n+\n+        String modelId = \"{model_Id}\";\n+        String filePath = \"{analyze_file_path}\";\n+        PollerFlux<OperationResult, IterableStream<RecognizedForm>> trainingPoller =\n+            client.beginRecognizeCustomFormsFromUrl(filePath, modelId, true, null);\n+\n+        IterableStream<RecognizedForm> recognizedForms = trainingPoller\n+            .last()\n+            .flatMap(trainingOperationResponse -> {\n+                if (trainingOperationResponse.getStatus().isComplete()) {\n+                    // training completed successfully, retrieving final result.\n+                    return trainingOperationResponse.getFinalResult();\n+                } else {\n+                    return Mono.error(new RuntimeException(\"Polling completed unsuccessfully with status:\"\n+                        + trainingOperationResponse.getStatus()));\n+                }\n+            }).block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODgxMTQ5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#pullrequestreview-395881149", "createdAt": "2020-04-18T04:42:50Z", "commit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNDo0Mjo1MFrOGHmM1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNDo0Mjo1MFrOGHmM1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYxOTA5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    str.append(String.format(\"[%s, %s]\", point.getX(), point.getY()));\n          \n          \n            \n                                                    str.append(String.format(\"[%d, %d]\", point.getX(), point.getY()));\n          \n      \n    \n    \n  \n\nthere is other places that have using %s for numerical values.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410619092", "createdAt": "2020-04-18T04:42:50Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfoAsync.java", "diffHunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormWord;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.ai.formrecognizer.models.TextContentType;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/*\n+ * Async sample to output the information that will help with manually validating your output from recognize custom forms.\n+ */\n+public class AdvancedManualValidationInfoAsync {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused arguments to the program.\n+     *\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        FormRecognizerAsyncClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildAsyncClient();\n+\n+        String modelId = \"{model_Id}\";\n+        String filePath = \"{file_source_url}\";\n+        PollerFlux<OperationResult, IterableStream<RecognizedForm>> recognizeFormPoller =\n+            client.beginRecognizeCustomFormsFromUrl(filePath, modelId, true, null);\n+\n+        Mono<IterableStream<RecognizedForm>> recognizeFormResult = recognizeFormPoller\n+            .last()\n+            .flatMap(trainingOperationResponse -> {\n+                if (trainingOperationResponse.getStatus().isComplete()) {\n+                    // training completed successfully, retrieving final result.\n+                    return trainingOperationResponse.getFinalResult();\n+                } else {\n+                    return Mono.error(new RuntimeException(\"Polling completed unsuccessfully with status:\"\n+                        + trainingOperationResponse.getStatus()));\n+                }\n+            });\n+\n+        System.out.println(\"--------RECOGNIZING FORM --------\");\n+        recognizeFormResult.subscribe(recognizedForms -> recognizedForms.forEach(recognizedForm -> {\n+            System.out.printf(\"Form has type: %s%n\", recognizedForm.getFormType());\n+            // each field is of type FormField\n+            //     The value of the field can also be a FormField, or a list of FormFields\n+            //     In our sample, it is not.\n+            recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                System.out.printf(\"Field %s has value %s based on %s within bounding box, with a confidence score \"\n+                        + \"of %s.%n\",\n+                    fieldText, fieldValue.getFieldValue(), fieldValue.getValueText().getText(),\n+                    fieldValue.getConfidence());\n+            });\n+\n+            // Page Information\n+            recognizedForm.getPages().forEach(formPage -> {\n+                System.out.printf(\"-------Recognizing Page %s of Form -------%n\", 1);\n+                System.out.printf(\"Has width %s , angle %s, height %s %n\", formPage.getWidth(),\n+                    formPage.getTextAngle(), formPage.getHeight());\n+                // Table information\n+                System.out.println(\"Recognized Tables: \");\n+                formPage.getTables().forEach(formTable -> {\n+                    formTable.getCells().forEach(formTableCell -> {\n+                        System.out.printf(\"Cell text %s has following words: %n\", formTableCell.getText());\n+                        // text_content only exists if you set include_text_content to True in your\n+                        // function call to recognize_custom_forms\n+                        // It is also a list of FormWords and FormLines, but in this example, we only deal with\n+                        // FormWords\n+                        formTableCell.getElements().forEach(formContent -> {\n+                            if (formContent.getTextContentType().equals(TextContentType.WORD)) {\n+                                FormWord formWordElement = (FormWord) (formContent);\n+                                StringBuilder str = new StringBuilder();\n+                                if (formWordElement.getBoundingBox() != null) {\n+                                    formWordElement.getBoundingBox().getPoints().forEach(point -> {\n+                                        str.append(String.format(\"[%s, %s]\", point.getX(), point.getY()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODgxNjAz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#pullrequestreview-395881603", "createdAt": "2020-04-18T04:52:22Z", "commit": {"oid": "3903317286f443746f11b864fde259d8013be22b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bdf325abb09cec97a6907f9231958a721de5d8c", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8bdf325abb09cec97a6907f9231958a721de5d8c", "committedDate": "2020-04-20T02:27:23Z", "message": "float value print update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MTQyNTQ2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#pullrequestreview-396142546", "createdAt": "2020-04-20T05:09:50Z", "commit": {"oid": "8bdf325abb09cec97a6907f9231958a721de5d8c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNTowOTo1MFrOGIDWSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNTowOTo1MFrOGIDWSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA5NjY0OA==", "bodyText": "@samvaity  don't forget to update it without real credential", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r411096648", "createdAt": "2020-04-20T05:09:50Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "diffHunk": "@@ -30,24 +29,25 @@ public static void main(String[] args) throws IOException {\n         // Instantiate a client that will be used to call the service.\n \n         FormRecognizerClient client = new FormRecognizerClientBuilder()\n-            .apiKey(new AzureKeyCredential(\"{api_Key}\"))\n-            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .apiKey(new AzureKeyCredential(\"48c9ec5b1c444c899770946defc486c4\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bdf325abb09cec97a6907f9231958a721de5d8c"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e2d2d4554d9a86b90780a4e0edf7ff6b25c8fc7", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9e2d2d4554d9a86b90780a4e0edf7ff6b25c8fc7", "committedDate": "2020-04-20T05:12:37Z", "message": "remove creds"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36df71f4eb1470390db82426373775b933a9075b", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/36df71f4eb1470390db82426373775b933a9075b", "committedDate": "2020-04-21T02:30:15Z", "message": "anne review updates"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 961, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}