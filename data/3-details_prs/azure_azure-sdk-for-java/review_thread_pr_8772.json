{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NTYwMjU5", "number": 8772, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDo1NzozN1rODlpJNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjo0OToxN1rODl9w7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzk4MDA3OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SearchResult.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDo1NzozN1rOFyplYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo0NjoxM1rOFy_oKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY1NDQzMw==", "bodyText": "Interesting that this generated with incorrect indentation", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r388654433", "createdAt": "2020-03-06T00:57:37Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SearchResult.java", "diffHunk": "@@ -46,7 +46,7 @@\n      * @return the additionalProperties value.\n      */\n     @JsonIgnore\n-    public Document getDocument() {\n+public Document getDocument() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75ec2c177db5a054df36782310c5c6072ae35af0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY2MzExNg==", "bodyText": "Probably the result of a regex transform.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r388663116", "createdAt": "2020-03-06T01:10:49Z", "author": {"login": "brjohnstmsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SearchResult.java", "diffHunk": "@@ -46,7 +46,7 @@\n      * @return the additionalProperties value.\n      */\n     @JsonIgnore\n-    public Document getDocument() {\n+public Document getDocument() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY1NDQzMw=="}, "originalCommit": {"oid": "75ec2c177db5a054df36782310c5c6072ae35af0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxNTU5Mg==", "bodyText": "Yes, Haven't got a chance to work on that. Will work on a fix after release.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389015592", "createdAt": "2020-03-06T16:46:13Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SearchResult.java", "diffHunk": "@@ -46,7 +46,7 @@\n      * @return the additionalProperties value.\n      */\n     @JsonIgnore\n-    public Document getDocument() {\n+public Document getDocument() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY1NDQzMw=="}, "originalCommit": {"oid": "75ec2c177db5a054df36782310c5c6072ae35af0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzk4NDM0OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SearchErrorException.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDo1ODoyMlrOFypndA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo0NjoyOVrOFy_orA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY1NDk2NA==", "bodyText": "Mind adding an issue for preview 2 to update tests to expect SearchErrorException instead of HttpResponseException.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r388654964", "createdAt": "2020-03-06T00:58:22Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SearchErrorException.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+// Changes may cause incorrect behavior and will be lost if the code is\n+// regenerated.\n+\n+package com.azure.search.models;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpResponse;\n+\n+/**\n+ * Exception thrown for an invalid response with SearchError information.\n+ */\n+public final class SearchErrorException extends HttpResponseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75ec2c177db5a054df36782310c5c6072ae35af0"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxNTcyNA==", "bodyText": "It is updated. Thanks!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389015724", "createdAt": "2020-03-06T16:46:29Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SearchErrorException.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+// Changes may cause incorrect behavior and will be lost if the code is\n+// regenerated.\n+\n+package com.azure.search.models;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpResponse;\n+\n+/**\n+ * Exception thrown for an invalid response with SearchError information.\n+ */\n+public final class SearchErrorException extends HttpResponseException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY1NDk2NA=="}, "originalCommit": {"oid": "75ec2c177db5a054df36782310c5c6072ae35af0"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzk4OTY2OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SearchDocumentsResult.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDo1OTozM1rOFypqjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo0ODoxMlrOFy_szw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY1NTc1Ng==", "bodyText": "Any reason this became package private? This seems necessary to continue a paged response set.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r388655756", "createdAt": "2020-03-06T00:59:33Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SearchDocumentsResult.java", "diffHunk": "@@ -111,7 +111,7 @@ public Double getCoverage() {\n      *\n      * @return the nextPageParameters value.\n      */\n-    public SearchRequest getNextPageParameters() {\n+    SearchRequest getNextPageParameters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75ec2c177db5a054df36782310c5c6072ae35af0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY2MzI0MA==", "bodyText": "Do customers need access to this? I thought the paging mechanism was supposed to encapsulate this detail.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r388663240", "createdAt": "2020-03-06T01:11:16Z", "author": {"login": "brjohnstmsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SearchDocumentsResult.java", "diffHunk": "@@ -111,7 +111,7 @@ public Double getCoverage() {\n      *\n      * @return the nextPageParameters value.\n      */\n-    public SearchRequest getNextPageParameters() {\n+    SearchRequest getNextPageParameters() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY1NTc1Ng=="}, "originalCommit": {"oid": "75ec2c177db5a054df36782310c5c6072ae35af0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxNjc4Mw==", "bodyText": "This is internal used method. However, the SearchPageResponse is not in the same folder as SearchDocumentsResult.java. I reverted the change as it cannot be called if put it package-scope. Need to find a way to solve this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389016783", "createdAt": "2020-03-06T16:48:12Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SearchDocumentsResult.java", "diffHunk": "@@ -111,7 +111,7 @@ public Double getCoverage() {\n      *\n      * @return the nextPageParameters value.\n      */\n-    public SearchRequest getNextPageParameters() {\n+    SearchRequest getNextPageParameters() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY1NTc1Ng=="}, "originalCommit": {"oid": "75ec2c177db5a054df36782310c5c6072ae35af0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODAxMDQ2OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/main/java/com/azure/search/implementation/SynonymMapsImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMTowMzoyM1rOFyp1UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODowNDoyNlrOFzCOAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY1ODUxMw==", "bodyText": "Any reason that just delete changed from SimpleResponse<Void> to Response<Void>?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r388658513", "createdAt": "2020-03-06T01:03:23Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/implementation/SynonymMapsImpl.java", "diffHunk": "@@ -60,28 +63,33 @@ public SynonymMapsImpl(SearchServiceRestClientImpl client) {\n      * SearchServiceRestClientSynonymMaps to be used by the proxy service to\n      * perform REST calls.\n      */\n-    @Host(\"https://{searchServiceName}.{searchDnsSuffix}\")\n+    @Host(\"{endpoint}\")\n     @ServiceInterface(name = \"SearchServiceRestClientSynonymMaps\")\n     private interface SynonymMapsService {\n         @Put(\"synonymmaps('{synonymMapName}')\")\n         @ExpectedResponses({200, 201})\n-        Mono<SimpleResponse<SynonymMap>> createOrUpdate(@PathParam(\"synonymMapName\") String synonymMapName, @HostParam(\"searchServiceName\") String searchServiceName, @HostParam(\"searchDnsSuffix\") String searchDnsSuffix, @BodyParam(\"application/json; charset=utf-8\") SynonymMap synonymMap, @HeaderParam(\"Prefer\") String prefer, @QueryParam(\"api-version\") String apiVersion, @HeaderParam(\"client-request-id\") UUID clientRequestId, @HeaderParam(\"If-Match\") String ifMatch, @HeaderParam(\"If-None-Match\") String ifNoneMatch, Context context);\n+        @UnexpectedResponseExceptionType(SearchErrorException.class)\n+        Mono<SimpleResponse<SynonymMap>> createOrUpdate(@PathParam(\"synonymMapName\") String synonymMapName, @HostParam(\"endpoint\") String endpoint, @BodyParam(\"application/json; charset=utf-8\") SynonymMap synonymMap, @HeaderParam(\"Prefer\") String prefer, @QueryParam(\"api-version\") String apiVersion, @HeaderParam(\"x-ms-client-request-id\") UUID xMsClientRequestId, @HeaderParam(\"If-Match\") String ifMatch, @HeaderParam(\"If-None-Match\") String ifNoneMatch, Context context);\n \n         @Delete(\"synonymmaps('{synonymMapName}')\")\n         @ExpectedResponses({204, 404})\n-        Mono<SimpleResponse<Void>> delete(@PathParam(\"synonymMapName\") String synonymMapName, @HostParam(\"searchServiceName\") String searchServiceName, @HostParam(\"searchDnsSuffix\") String searchDnsSuffix, @QueryParam(\"api-version\") String apiVersion, @HeaderParam(\"client-request-id\") UUID clientRequestId, @HeaderParam(\"If-Match\") String ifMatch, @HeaderParam(\"If-None-Match\") String ifNoneMatch, Context context);\n+        @UnexpectedResponseExceptionType(SearchErrorException.class)\n+        Mono<Response<Void>> delete(@PathParam(\"synonymMapName\") String synonymMapName, @HostParam(\"endpoint\") String endpoint, @QueryParam(\"api-version\") String apiVersion, @HeaderParam(\"x-ms-client-request-id\") UUID xMsClientRequestId, @HeaderParam(\"If-Match\") String ifMatch, @HeaderParam(\"If-None-Match\") String ifNoneMatch, Context context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75ec2c177db5a054df36782310c5c6072ae35af0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1ODA0OQ==", "bodyText": "It is newly introduced feature in azure core. My understanding here we do not need to check Value in simpleResponse. So Response is enough and simple for use.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389058049", "createdAt": "2020-03-06T18:04:26Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/implementation/SynonymMapsImpl.java", "diffHunk": "@@ -60,28 +63,33 @@ public SynonymMapsImpl(SearchServiceRestClientImpl client) {\n      * SearchServiceRestClientSynonymMaps to be used by the proxy service to\n      * perform REST calls.\n      */\n-    @Host(\"https://{searchServiceName}.{searchDnsSuffix}\")\n+    @Host(\"{endpoint}\")\n     @ServiceInterface(name = \"SearchServiceRestClientSynonymMaps\")\n     private interface SynonymMapsService {\n         @Put(\"synonymmaps('{synonymMapName}')\")\n         @ExpectedResponses({200, 201})\n-        Mono<SimpleResponse<SynonymMap>> createOrUpdate(@PathParam(\"synonymMapName\") String synonymMapName, @HostParam(\"searchServiceName\") String searchServiceName, @HostParam(\"searchDnsSuffix\") String searchDnsSuffix, @BodyParam(\"application/json; charset=utf-8\") SynonymMap synonymMap, @HeaderParam(\"Prefer\") String prefer, @QueryParam(\"api-version\") String apiVersion, @HeaderParam(\"client-request-id\") UUID clientRequestId, @HeaderParam(\"If-Match\") String ifMatch, @HeaderParam(\"If-None-Match\") String ifNoneMatch, Context context);\n+        @UnexpectedResponseExceptionType(SearchErrorException.class)\n+        Mono<SimpleResponse<SynonymMap>> createOrUpdate(@PathParam(\"synonymMapName\") String synonymMapName, @HostParam(\"endpoint\") String endpoint, @BodyParam(\"application/json; charset=utf-8\") SynonymMap synonymMap, @HeaderParam(\"Prefer\") String prefer, @QueryParam(\"api-version\") String apiVersion, @HeaderParam(\"x-ms-client-request-id\") UUID xMsClientRequestId, @HeaderParam(\"If-Match\") String ifMatch, @HeaderParam(\"If-None-Match\") String ifNoneMatch, Context context);\n \n         @Delete(\"synonymmaps('{synonymMapName}')\")\n         @ExpectedResponses({204, 404})\n-        Mono<SimpleResponse<Void>> delete(@PathParam(\"synonymMapName\") String synonymMapName, @HostParam(\"searchServiceName\") String searchServiceName, @HostParam(\"searchDnsSuffix\") String searchDnsSuffix, @QueryParam(\"api-version\") String apiVersion, @HeaderParam(\"client-request-id\") UUID clientRequestId, @HeaderParam(\"If-Match\") String ifMatch, @HeaderParam(\"If-None-Match\") String ifNoneMatch, Context context);\n+        @UnexpectedResponseExceptionType(SearchErrorException.class)\n+        Mono<Response<Void>> delete(@PathParam(\"synonymMapName\") String synonymMapName, @HostParam(\"endpoint\") String endpoint, @QueryParam(\"api-version\") String apiVersion, @HeaderParam(\"x-ms-client-request-id\") UUID xMsClientRequestId, @HeaderParam(\"If-Match\") String ifMatch, @HeaderParam(\"If-None-Match\") String ifNoneMatch, Context context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY1ODUxMw=="}, "originalCommit": {"oid": "75ec2c177db5a054df36782310c5c6072ae35af0"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTEzMTUwOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/main/java/com/azure/search/SearchIndexAsyncClient.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMToxMTowNFrOFzHk9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTozOToyOVrOFz2r4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0NTg0NQ==", "bodyText": "Isn't this going to copy the entire map?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389145845", "createdAt": "2020-03-06T21:11:04Z", "author": {"login": "brjohnstmsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/SearchIndexAsyncClient.java", "diffHunk": "@@ -468,7 +465,7 @@ SearchPagedFlux search(String searchText, SearchOptions searchOptions, RequestOp\n             return restClient.documents()\n                 .getWithRestResponseAsync(key, selectedFields, requestOptions, context)\n                 .map(res -> {\n-                    Document doc = res.getValue();\n+                    Document doc = new Document(res.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97efe7b9fc89d55bcc59b790c661a691311ebd18"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2MTAyNw==", "bodyText": "Yes, it will copy the map.\nHere is the constructor JavaDoc\n    /**\n     * Constructs a new {@code HashMap} with the same mappings as the\n     * specified {@code Map}.  The {@code HashMap} is created with\n     * default load factor (0.75) and an initial capacity sufficient to\n     * hold the mappings in the specified {@code Map}.\n     *\n     * @param   m the map whose mappings are to be placed in this map\n     * @throws  NullPointerException if the specified map is null\n     */\n    public HashMap(Map<? extends K, ? extends V> m) {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389161027", "createdAt": "2020-03-06T21:49:20Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/SearchIndexAsyncClient.java", "diffHunk": "@@ -468,7 +465,7 @@ SearchPagedFlux search(String searchText, SearchOptions searchOptions, RequestOp\n             return restClient.documents()\n                 .getWithRestResponseAsync(key, selectedFields, requestOptions, context)\n                 .map(res -> {\n-                    Document doc = res.getValue();\n+                    Document doc = new Document(res.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0NTg0NQ=="}, "originalCommit": {"oid": "97efe7b9fc89d55bcc59b790c661a691311ebd18"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2MjE1Nw==", "bodyText": "That doesn't seem great for performance.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389162157", "createdAt": "2020-03-06T21:52:27Z", "author": {"login": "brjohnstmsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/SearchIndexAsyncClient.java", "diffHunk": "@@ -468,7 +465,7 @@ SearchPagedFlux search(String searchText, SearchOptions searchOptions, RequestOp\n             return restClient.documents()\n                 .getWithRestResponseAsync(key, selectedFields, requestOptions, context)\n                 .map(res -> {\n-                    Document doc = res.getValue();\n+                    Document doc = new Document(res.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0NTg0NQ=="}, "originalCommit": {"oid": "97efe7b9fc89d55bcc59b790c661a691311ebd18"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNTI0MQ==", "bodyText": "Do we need Document to extend from HashMap, or is it sufficient that it have a map-like API?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389415241", "createdAt": "2020-03-08T23:00:57Z", "author": {"login": "JonathanGiles"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/SearchIndexAsyncClient.java", "diffHunk": "@@ -468,7 +465,7 @@ SearchPagedFlux search(String searchText, SearchOptions searchOptions, RequestOp\n             return restClient.documents()\n                 .getWithRestResponseAsync(key, selectedFields, requestOptions, context)\n                 .map(res -> {\n-                    Document doc = res.getValue();\n+                    Document doc = new Document(res.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0NTg0NQ=="}, "originalCommit": {"oid": "97efe7b9fc89d55bcc59b790c661a691311ebd18"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNzY2NA==", "bodyText": "@JonathanGiles Strictly speaking no. I think that was done for implementation convenience. It also means that SearchDocument (formerly Document) implements Map. The only scenario I can imagine where that's necessary is interop with other JVM languages.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389917664", "createdAt": "2020-03-09T19:39:29Z", "author": {"login": "brjohnstmsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/SearchIndexAsyncClient.java", "diffHunk": "@@ -468,7 +465,7 @@ SearchPagedFlux search(String searchText, SearchOptions searchOptions, RequestOp\n             return restClient.documents()\n                 .getWithRestResponseAsync(key, selectedFields, requestOptions, context)\n                 .map(res -> {\n-                    Document doc = res.getValue();\n+                    Document doc = new Document(res.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0NTg0NQ=="}, "originalCommit": {"oid": "97efe7b9fc89d55bcc59b790c661a691311ebd18"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTE1MzAwOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SearchErrorException.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMToxOTowN1rOFzHyBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMTo1ODozNFrOFzItaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0OTE4OA==", "bodyText": "I had to add SearchError to the Swagger for the sake of JS/TS, but it's my understanding that this is a subset of a well-defined error contract for Microsoft REST APIs. Do we actually need to expose this, or is there some Azure Core type for error payloads that overlaps SearchError?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389149188", "createdAt": "2020-03-06T21:19:07Z", "author": {"login": "brjohnstmsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SearchErrorException.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+// Changes may cause incorrect behavior and will be lost if the code is\n+// regenerated.\n+\n+package com.azure.search.models;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpResponse;\n+\n+/**\n+ * Exception thrown for an invalid response with SearchError information.\n+ */\n+public final class SearchErrorException extends HttpResponseException {\n+    /**\n+     * Initializes a new instance of the SearchErrorException class.\n+     *\n+     * @param message the exception message or the response content if a message is not available.\n+     * @param response the HTTP response.\n+     */\n+    public SearchErrorException(String message, HttpResponse response) {\n+        super(message, response);\n+    }\n+\n+    /**\n+     * Initializes a new instance of the SearchErrorException class.\n+     *\n+     * @param message the exception message or the response content if a message is not available.\n+     * @param response the HTTP response.\n+     * @param value the deserialized response value.\n+     */\n+    public SearchErrorException(String message, HttpResponse response, SearchError value) {\n+        super(message, response, value);\n+    }\n+\n+    @Override\n+    public SearchError getValue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97efe7b9fc89d55bcc59b790c661a691311ebd18"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NDM5Mg==", "bodyText": "It's actually useful to have getCode, getMessage etc APIs in SearchError. Otherwise we have to parse the error message.\nAutorest will generate exception depending on the name default error (SearchError -> SearchErrorException) from Swagger.\n\"default\": {\n            \"description\": \"Error response.\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/SearchError\"\n            }\n          }\n\nIn storage, we use the same structure.\nThat is expected. What error type do you expect Java use, HttpResponseException?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389164392", "createdAt": "2020-03-06T21:58:34Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SearchErrorException.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+// Changes may cause incorrect behavior and will be lost if the code is\n+// regenerated.\n+\n+package com.azure.search.models;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpResponse;\n+\n+/**\n+ * Exception thrown for an invalid response with SearchError information.\n+ */\n+public final class SearchErrorException extends HttpResponseException {\n+    /**\n+     * Initializes a new instance of the SearchErrorException class.\n+     *\n+     * @param message the exception message or the response content if a message is not available.\n+     * @param response the HTTP response.\n+     */\n+    public SearchErrorException(String message, HttpResponse response) {\n+        super(message, response);\n+    }\n+\n+    /**\n+     * Initializes a new instance of the SearchErrorException class.\n+     *\n+     * @param message the exception message or the response content if a message is not available.\n+     * @param response the HTTP response.\n+     * @param value the deserialized response value.\n+     */\n+    public SearchErrorException(String message, HttpResponse response, SearchError value) {\n+        super(message, response, value);\n+    }\n+\n+    @Override\n+    public SearchError getValue() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0OTE4OA=="}, "originalCommit": {"oid": "97efe7b9fc89d55bcc59b790c661a691311ebd18"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTE1NjAzOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SearchResult.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMToyMDoxOFrOFzHz7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjoyODoyMFrOFzJVlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0OTY3OA==", "bodyText": "This is a public contract -- Shouldn't the return type be SearchDocument (renamed from Document)?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389149678", "createdAt": "2020-03-06T21:20:18Z", "author": {"login": "brjohnstmsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SearchResult.java", "diffHunk": "@@ -45,8 +44,7 @@\n      *\n      * @return the additionalProperties value.\n      */\n-    @JsonIgnore\n-    public Document getDocument() {\n+    public Map<String, Object> getDocument() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97efe7b9fc89d55bcc59b790c661a691311ebd18"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NDY2MA==", "bodyText": "Yes. This is manually craft code. So Alan's PR will address this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389164660", "createdAt": "2020-03-06T21:59:19Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SearchResult.java", "diffHunk": "@@ -45,8 +44,7 @@\n      *\n      * @return the additionalProperties value.\n      */\n-    @JsonIgnore\n-    public Document getDocument() {\n+    public Map<String, Object> getDocument() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0OTY3OA=="}, "originalCommit": {"oid": "97efe7b9fc89d55bcc59b790c661a691311ebd18"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NDY3OA==", "bodyText": "Made the changes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389174678", "createdAt": "2020-03-06T22:28:20Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SearchResult.java", "diffHunk": "@@ -45,8 +44,7 @@\n      *\n      * @return the additionalProperties value.\n      */\n-    @JsonIgnore\n-    public Document getDocument() {\n+    public Map<String, Object> getDocument() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0OTY3OA=="}, "originalCommit": {"oid": "97efe7b9fc89d55bcc59b790c661a691311ebd18"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTE1NzQ3OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SuggestResult.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMToyMDo1MFrOFzH0yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjoyODozMlrOFzJV2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0OTg5Nw==", "bodyText": "Same question -- Shouldn't this be SearchDocument instead of just Map?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389149897", "createdAt": "2020-03-06T21:20:50Z", "author": {"login": "brjohnstmsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SuggestResult.java", "diffHunk": "@@ -33,7 +34,7 @@\n      *\n      * @return the additionalProperties value.\n      */\n-    public Document getDocument() {\n+    public Map<String, Object> getDocument() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97efe7b9fc89d55bcc59b790c661a691311ebd18"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NTc5MQ==", "bodyText": "Search result is auto-gen code. As @alzimmermsft brought up yesterday. Our auto-gen code is better not to depend on any manually craft APIs. That's why I have changed the return type here. Do we still want the Document here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389165791", "createdAt": "2020-03-06T22:02:32Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SuggestResult.java", "diffHunk": "@@ -33,7 +34,7 @@\n      *\n      * @return the additionalProperties value.\n      */\n-    public Document getDocument() {\n+    public Map<String, Object> getDocument() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0OTg5Nw=="}, "originalCommit": {"oid": "97efe7b9fc89d55bcc59b790c661a691311ebd18"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NDc0NA==", "bodyText": "Revert it back", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389174744", "createdAt": "2020-03-06T22:28:32Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/SuggestResult.java", "diffHunk": "@@ -33,7 +34,7 @@\n      *\n      * @return the additionalProperties value.\n      */\n-    public Document getDocument() {\n+    public Map<String, Object> getDocument() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0OTg5Nw=="}, "originalCommit": {"oid": "97efe7b9fc89d55bcc59b790c661a691311ebd18"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTE2NTEyOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/VisualFeature.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMToyNDowM1rOFzH5uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjowMjo0NVrOFzIzHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1MTE2Mw==", "bodyText": "I think this is one Swagger version behind, because we recently removed two of these properties.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389151163", "createdAt": "2020-03-06T21:24:03Z", "author": {"login": "brjohnstmsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/VisualFeature.java", "diffHunk": "@@ -13,15 +13,25 @@\n  * Defines values for VisualFeature.\n  */\n public enum VisualFeature {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97efe7b9fc89d55bcc59b790c661a691311ebd18"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NTg1NQ==", "bodyText": "Will generate again. Thanks!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389165855", "createdAt": "2020-03-06T22:02:45Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/models/VisualFeature.java", "diffHunk": "@@ -13,15 +13,25 @@\n  * Defines values for VisualFeature.\n  */\n public enum VisualFeature {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1MTE2Mw=="}, "originalCommit": {"oid": "97efe7b9fc89d55bcc59b790c661a691311ebd18"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTE2NjE4OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/samples/java/com/azure/search/SearchAsyncWithFullyTypedDocumentsExample.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMToyNDozNVrOFzH6gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjo1MTowOFrOFzJyeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1MTM2MQ==", "bodyText": "Customers shouldn't have to create Document instances explicitly.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389151361", "createdAt": "2020-03-06T21:24:35Z", "author": {"login": "brjohnstmsft"}, "path": "sdk/search/azure-search/src/samples/java/com/azure/search/SearchAsyncWithFullyTypedDocumentsExample.java", "diffHunk": "@@ -49,7 +49,7 @@ public static void main(String[] args) {\n         SearchPagedFlux results = searchClient.search(\"searchText\");\n         results\n             .subscribe(item -> {\n-                Document document = item.getDocument();\n+                Document document = new Document(item.getDocument());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97efe7b9fc89d55bcc59b790c661a691311ebd18"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NjEyOQ==", "bodyText": "Depend on whether we want to have auto-gen code depends on manual codes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389166129", "createdAt": "2020-03-06T22:03:31Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/samples/java/com/azure/search/SearchAsyncWithFullyTypedDocumentsExample.java", "diffHunk": "@@ -49,7 +49,7 @@ public static void main(String[] args) {\n         SearchPagedFlux results = searchClient.search(\"searchText\");\n         results\n             .subscribe(item -> {\n-                Document document = item.getDocument();\n+                Document document = new Document(item.getDocument());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1MTM2MQ=="}, "originalCommit": {"oid": "97efe7b9fc89d55bcc59b790c661a691311ebd18"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4MjA3Mg==", "bodyText": "It should depend on what's best for the user experience.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389182072", "createdAt": "2020-03-06T22:51:08Z", "author": {"login": "brjohnstmsft"}, "path": "sdk/search/azure-search/src/samples/java/com/azure/search/SearchAsyncWithFullyTypedDocumentsExample.java", "diffHunk": "@@ -49,7 +49,7 @@ public static void main(String[] args) {\n         SearchPagedFlux results = searchClient.search(\"searchText\");\n         results\n             .subscribe(item -> {\n-                Document document = item.getDocument();\n+                Document document = new Document(item.getDocument());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1MTM2MQ=="}, "originalCommit": {"oid": "97efe7b9fc89d55bcc59b790c661a691311ebd18"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTM1ODUyOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/samples/java/com/azure/search/AutoCompleteExample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjo0OToxN1rOFzJwVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzowMDoyMlrOFzJ8xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4MTUyNw==", "bodyText": "Typo", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389181527", "createdAt": "2020-03-06T22:49:17Z", "author": {"login": "brjohnstmsft"}, "path": "sdk/search/azure-search/src/samples/java/com/azure/search/AutoCompleteExample.java", "diffHunk": "@@ -22,7 +22,7 @@\n \n     /**\n      * From the Azure portal, get your Azure Cognitive Search service URL and API key,\n-     * and set the values of these environment variables:\n+     * and set aathe values of these environment variables:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea38f020799ad5e3b8dc3c7c2891b54932c3c1b8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4NDcxMQ==", "bodyText": "Done.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8772#discussion_r389184711", "createdAt": "2020-03-06T23:00:22Z", "author": {"login": "sima-zhu"}, "path": "sdk/search/azure-search/src/samples/java/com/azure/search/AutoCompleteExample.java", "diffHunk": "@@ -22,7 +22,7 @@\n \n     /**\n      * From the Azure portal, get your Azure Cognitive Search service URL and API key,\n-     * and set the values of these environment variables:\n+     * and set aathe values of these environment variables:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4MTUyNw=="}, "originalCommit": {"oid": "ea38f020799ad5e3b8dc3c7c2891b54932c3c1b8"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 257, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}