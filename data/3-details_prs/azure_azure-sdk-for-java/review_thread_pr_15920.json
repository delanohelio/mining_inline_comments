{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MjE0NDQx", "number": 15920, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDoyOTo1NlrOEqeJEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMToxMjowOVrOEqe9xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTY5NDg5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDoyOTo1NlrOHcsrMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDoyOTo1NlrOHcsrMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NDEzMA==", "bodyText": "Should we clone this? In other APIs we usually make a copy of the byte[].", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499854130", "createdAt": "2020-10-05T20:29:56Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.util;\n+\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.ObjectSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n+ * array. The data is collected from provided sources and stored into a byte array.\n+ * <p>\n+ * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n+ * {@link ObjectSerializer}. Code samples are explained below.\n+ *\n+ * <p><strong>Create an instance from Bytes</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n+ *\n+ * <p><strong>Create an instance from String</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n+ *\n+ * <p><strong>Create an instance from InputStream</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+ *\n+ * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n+ *\n+ * @see ObjectSerializer\n+ */\n+public final class BinaryData {\n+    private final byte[] data;\n+\n+    BinaryData() {\n+        // This exists, so no one is able to create instance, user need to use static function to create instances.\n+        this.data = null;\n+    }\n+\n+    /**\n+     * Create instance of {@link BinaryData} given the data.\n+     * @param data to represent as bytes.\n+     */\n+    BinaryData(byte[] data) {\n+        this.data = data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bebb6a4d734b084f708d4c1b4d201e18daa5953c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTcwMzAyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDozMjoyMlrOHcswCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTowMDo0NFrOHctpBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NTM3MA==", "bodyText": "Once this moves into azure-core we have a specialized ByteArrayOutputStream type that allows access to its internal buffer without copying when toByteArray is called.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499855370", "createdAt": "2020-10-05T20:32:22Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.util;\n+\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.ObjectSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n+ * array. The data is collected from provided sources and stored into a byte array.\n+ * <p>\n+ * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n+ * {@link ObjectSerializer}. Code samples are explained below.\n+ *\n+ * <p><strong>Create an instance from Bytes</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n+ *\n+ * <p><strong>Create an instance from String</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n+ *\n+ * <p><strong>Create an instance from InputStream</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+ *\n+ * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n+ *\n+ * @see ObjectSerializer\n+ */\n+public final class BinaryData {\n+    private final byte[] data;\n+\n+    BinaryData() {\n+        // This exists, so no one is able to create instance, user need to use static function to create instances.\n+        this.data = null;\n+    }\n+\n+    /**\n+     * Create instance of {@link BinaryData} given the data.\n+     * @param data to represent as bytes.\n+     */\n+    BinaryData(byte[] data) {\n+        this.data = data;\n+    }\n+\n+    /**\n+     * Provides {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * <p><strong>Get InputStream from BinaryData</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#Stream}\n+     *\n+     * @return {@link InputStream} representing the binary data.\n+     */\n+    public InputStream toStream() {\n+        return new ByteArrayInputStream(this.data);\n+    }\n+\n+    /**\n+     * Provides {@link Mono} of {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * @return {@link InputStream} representation of the {@link BinaryData}.\n+     */\n+    public Mono<InputStream> toStreamAsync() {\n+        return Mono.fromCallable(() -> toStream());\n+    }\n+\n+    /**\n+     * Create {@link BinaryData} instance with given {@link InputStream} as source of data. The {@link InputStream} is\n+     * not closed by this function.\n+     *\n+     * <p><strong>Create an instance from InputStream</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+     *\n+     * @param inputStream to read bytes from.\n+     * @throws UncheckedIOException If any error in reading from {@link InputStream}.\n+     * @throws NullPointerException if {@code inputStream} is null.\n+     * @return {@link BinaryData} representing the binary data.\n+     */\n+    public static BinaryData fromStream(InputStream inputStream) {\n+        Objects.requireNonNull(inputStream, \"'inputStream' cannot be null.\");\n+\n+        final int bufferSize = 1024;\n+        try {\n+            ByteArrayOutputStream dataOutputBuffer = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bebb6a4d734b084f708d4c1b4d201e18daa5953c"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2OTk1OA==", "bodyText": "yes we can do this when we move it azure-core", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499869958", "createdAt": "2020-10-05T21:00:44Z", "author": {"login": "hemanttanwar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.util;\n+\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.ObjectSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n+ * array. The data is collected from provided sources and stored into a byte array.\n+ * <p>\n+ * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n+ * {@link ObjectSerializer}. Code samples are explained below.\n+ *\n+ * <p><strong>Create an instance from Bytes</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n+ *\n+ * <p><strong>Create an instance from String</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n+ *\n+ * <p><strong>Create an instance from InputStream</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+ *\n+ * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n+ *\n+ * @see ObjectSerializer\n+ */\n+public final class BinaryData {\n+    private final byte[] data;\n+\n+    BinaryData() {\n+        // This exists, so no one is able to create instance, user need to use static function to create instances.\n+        this.data = null;\n+    }\n+\n+    /**\n+     * Create instance of {@link BinaryData} given the data.\n+     * @param data to represent as bytes.\n+     */\n+    BinaryData(byte[] data) {\n+        this.data = data;\n+    }\n+\n+    /**\n+     * Provides {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * <p><strong>Get InputStream from BinaryData</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#Stream}\n+     *\n+     * @return {@link InputStream} representing the binary data.\n+     */\n+    public InputStream toStream() {\n+        return new ByteArrayInputStream(this.data);\n+    }\n+\n+    /**\n+     * Provides {@link Mono} of {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * @return {@link InputStream} representation of the {@link BinaryData}.\n+     */\n+    public Mono<InputStream> toStreamAsync() {\n+        return Mono.fromCallable(() -> toStream());\n+    }\n+\n+    /**\n+     * Create {@link BinaryData} instance with given {@link InputStream} as source of data. The {@link InputStream} is\n+     * not closed by this function.\n+     *\n+     * <p><strong>Create an instance from InputStream</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+     *\n+     * @param inputStream to read bytes from.\n+     * @throws UncheckedIOException If any error in reading from {@link InputStream}.\n+     * @throws NullPointerException if {@code inputStream} is null.\n+     * @return {@link BinaryData} representing the binary data.\n+     */\n+    public static BinaryData fromStream(InputStream inputStream) {\n+        Objects.requireNonNull(inputStream, \"'inputStream' cannot be null.\");\n+\n+        final int bufferSize = 1024;\n+        try {\n+            ByteArrayOutputStream dataOutputBuffer = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NTM3MA=="}, "originalCommit": {"oid": "bebb6a4d734b084f708d4c1b4d201e18daa5953c"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTcwNjg4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDozMzo0MlrOHcsybw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDozMzo0MlrOHcsybw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NTk4Mw==", "bodyText": "Given this class only has static utility methods it should be fine to use a static logger and suppress the Checkstyle rule.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499855983", "createdAt": "2020-10-05T20:33:42Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.util;\n+\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.ObjectSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n+ * array. The data is collected from provided sources and stored into a byte array.\n+ * <p>\n+ * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n+ * {@link ObjectSerializer}. Code samples are explained below.\n+ *\n+ * <p><strong>Create an instance from Bytes</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n+ *\n+ * <p><strong>Create an instance from String</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n+ *\n+ * <p><strong>Create an instance from InputStream</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+ *\n+ * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n+ *\n+ * @see ObjectSerializer\n+ */\n+public final class BinaryData {\n+    private final byte[] data;\n+\n+    BinaryData() {\n+        // This exists, so no one is able to create instance, user need to use static function to create instances.\n+        this.data = null;\n+    }\n+\n+    /**\n+     * Create instance of {@link BinaryData} given the data.\n+     * @param data to represent as bytes.\n+     */\n+    BinaryData(byte[] data) {\n+        this.data = data;\n+    }\n+\n+    /**\n+     * Provides {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * <p><strong>Get InputStream from BinaryData</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#Stream}\n+     *\n+     * @return {@link InputStream} representing the binary data.\n+     */\n+    public InputStream toStream() {\n+        return new ByteArrayInputStream(this.data);\n+    }\n+\n+    /**\n+     * Provides {@link Mono} of {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * @return {@link InputStream} representation of the {@link BinaryData}.\n+     */\n+    public Mono<InputStream> toStreamAsync() {\n+        return Mono.fromCallable(() -> toStream());\n+    }\n+\n+    /**\n+     * Create {@link BinaryData} instance with given {@link InputStream} as source of data. The {@link InputStream} is\n+     * not closed by this function.\n+     *\n+     * <p><strong>Create an instance from InputStream</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+     *\n+     * @param inputStream to read bytes from.\n+     * @throws UncheckedIOException If any error in reading from {@link InputStream}.\n+     * @throws NullPointerException if {@code inputStream} is null.\n+     * @return {@link BinaryData} representing the binary data.\n+     */\n+    public static BinaryData fromStream(InputStream inputStream) {\n+        Objects.requireNonNull(inputStream, \"'inputStream' cannot be null.\");\n+\n+        final int bufferSize = 1024;\n+        try {\n+            ByteArrayOutputStream dataOutputBuffer = new ByteArrayOutputStream();\n+            int nRead;\n+            byte[] data = new byte[bufferSize];\n+            while ((nRead = inputStream.read(data, 0, data.length)) != -1) {\n+                dataOutputBuffer.write(data, 0, nRead);\n+            }\n+\n+            return fromBytes(dataOutputBuffer.toByteArray());\n+        } catch (IOException ex) {\n+            ClientLogger logger = new ClientLogger(BinaryData.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bebb6a4d734b084f708d4c1b4d201e18daa5953c"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTc5NzIxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-experimental/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTowMToxNVrOHctp_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTowMToxNVrOHctp_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3MDIwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Added : BinaryData, abstraction over many different ways that binary data can be represented. \n          \n          \n            \n            - Added `BinaryData` abstraction to represent binary data and supports serialization through `ObjectSerializer`.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499870206", "createdAt": "2020-10-05T21:01:15Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/CHANGELOG.md", "diffHunk": "@@ -2,6 +2,8 @@\n \n ## 1.0.0-beta.6 (Unreleased)\n \n+- Added : BinaryData, abstraction over many different ways that binary data can be represented. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bebb6a4d734b084f708d4c1b4d201e18daa5953c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTgxNTI5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTowNzoxNVrOHct1Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTowNzoxNVrOHct1Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3MzAzNA==", "bodyText": "This ctor is not required. If a ctor with args is defined then automatically no-args ctor will be disabled unless explicitly added.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499873034", "createdAt": "2020-10-05T21:07:15Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.util;\n+\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.ObjectSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n+ * array. The data is collected from provided sources and stored into a byte array.\n+ * <p>\n+ * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n+ * {@link ObjectSerializer}. Code samples are explained below.\n+ *\n+ * <p><strong>Create an instance from Bytes</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n+ *\n+ * <p><strong>Create an instance from String</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n+ *\n+ * <p><strong>Create an instance from InputStream</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+ *\n+ * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n+ *\n+ * @see ObjectSerializer\n+ */\n+public final class BinaryData {\n+    private final byte[] data;\n+\n+    BinaryData() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bebb6a4d734b084f708d4c1b4d201e18daa5953c"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTgyOTgxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMToxMjowOVrOHct-CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMToxMjowOVrOHct-CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3NTMzNg==", "bodyText": "For methods that return Mono/Flux, use the error channel instead of throwing exception.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499875336", "createdAt": "2020-10-05T21:12:09Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -0,0 +1,286 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.util;\n+\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.ObjectSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n+ * array. The data is collected from provided sources and stored into a byte array.\n+ * <p>\n+ * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n+ * {@link ObjectSerializer}. Code samples are explained below.\n+ *\n+ * <p><strong>Create an instance from Bytes</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n+ *\n+ * <p><strong>Create an instance from String</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n+ *\n+ * <p><strong>Create an instance from InputStream</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+ *\n+ * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n+ *\n+ * @see ObjectSerializer\n+ */\n+public final class BinaryData {\n+    private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n+    private final byte[] data;\n+\n+    BinaryData() {\n+        // This exists, so no one is able to create instance, user need to use static function to create instances.\n+        this.data = null;\n+    }\n+\n+    /**\n+     * Create instance of {@link BinaryData} given the data.\n+     * @param data to represent as bytes.\n+     * @throws NullPointerException If {@code data} is null.\n+     */\n+    BinaryData(byte[] data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        this.data = Arrays.copyOf(data, data.length);\n+    }\n+\n+    /**\n+     * Provides {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * <p><strong>Get InputStream from BinaryData</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#Stream}\n+     *\n+     * @return {@link InputStream} representing the binary data.\n+     */\n+    public InputStream toStream() {\n+        return new ByteArrayInputStream(this.data);\n+    }\n+\n+    /**\n+     * Provides {@link Mono} of {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * @return {@link InputStream} representation of the {@link BinaryData}.\n+     */\n+    public Mono<InputStream> toStreamAsync() {\n+        return Mono.fromCallable(() -> toStream());\n+    }\n+\n+    /**\n+     * Create {@link BinaryData} instance with given {@link InputStream} as source of data. The {@link InputStream} is\n+     * not closed by this function.\n+     *\n+     * <p><strong>Create an instance from InputStream</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+     *\n+     * @param inputStream to read bytes from.\n+     * @throws UncheckedIOException If any error in reading from {@link InputStream}.\n+     * @throws NullPointerException if {@code inputStream} is null.\n+     * @return {@link BinaryData} representing the binary data.\n+     */\n+    public static BinaryData fromStream(InputStream inputStream) {\n+        Objects.requireNonNull(inputStream, \"'inputStream' cannot be null.\");\n+\n+        final int bufferSize = 1024;\n+        try {\n+            ByteArrayOutputStream dataOutputBuffer = new ByteArrayOutputStream();\n+            int nRead;\n+            byte[] data = new byte[bufferSize];\n+            while ((nRead = inputStream.read(data, 0, data.length)) != -1) {\n+                dataOutputBuffer.write(data, 0, nRead);\n+            }\n+\n+            return fromBytes(dataOutputBuffer.toByteArray());\n+        } catch (IOException ex) {\n+            throw LOGGER.logExceptionAsError(new UncheckedIOException(ex));\n+        }\n+    }\n+\n+    /**\n+     * Asynchronously create {@link BinaryData} instance with given {@link InputStream} as source of data. The\n+     * {@link InputStream} is not closed by this function.\n+     *\n+     * @param inputStream to read bytes from.\n+     * @throws NullPointerException if {@code inputStream} is null.\n+     * @return {@link Mono} of {@link BinaryData} representing the binary data.\n+     */\n+    public static Mono<BinaryData> fromStreamAsync(InputStream inputStream) {\n+        Objects.requireNonNull(inputStream, \"'inputStream' cannot be null.\");\n+\n+        return Mono.fromCallable(() -> fromStream(inputStream));\n+    }\n+\n+    /**\n+     * Create {@link BinaryData} instance with given {@link Flux} of {@link ByteBuffer} as source of data. It will\n+     * collect all the bytes from {@link ByteBuffer} into {@link BinaryData}.\n+     *\n+     * <p><strong>Create an instance from String</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Flux}\n+     *\n+     * @param data to use.\n+     * @throws NullPointerException if {@code inputStream} is null.\n+     * @return {@link Mono} of {@link BinaryData} representing binary data.\n+     */\n+    public static Mono<BinaryData> fromFlux(Flux<ByteBuffer> data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b86b557b75db74ab5bd912bd8b2d3d83739d2487"}, "originalPosition": 142}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 773, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}