{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2Njg5MzQ5", "number": 9727, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNTowNzoyNlrODtYKfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoyNjo1N1rOD24axQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTA4NDEyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-avro-apache/src/main/java/module-info.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNTowNzoyNlrOF-w9zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNTowNzoyNlrOF-w9zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1ODI4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            module azure.core.serializer.avro.apache {\n          \n          \n            \n            module com.azure.core.serializer.avro.apache {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r401358287", "createdAt": "2020-04-01T05:07:26Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-serializer-avro-apache/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+module azure.core.serializer.avro.apache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fa70c846c33a4566b19e82b9cc1cac7155e192"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTA4NDU4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-avro-jackson/src/main/java/module-info.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNTowNzo0NlrOF-w-GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNTowNzo0NlrOF-w-GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1ODM2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            module azure.core.serializer.avro.jackson {\n          \n          \n            \n            module com.azure.core.serializer.avro.jackson {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r401358360", "createdAt": "2020-04-01T05:07:46Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-serializer-avro-jackson/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+module azure.core.serializer.avro.jackson {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fa70c846c33a4566b19e82b9cc1cac7155e192"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTA4NTI4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/module-info.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNTowODowN1rOF-w-fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNTowODowN1rOF-w-fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1ODQ2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            module azure.core.serializer.json.gson {\n          \n          \n            \n            module com.azure.core.serializer.json.gson {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r401358462", "createdAt": "2020-04-01T05:08:07Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+module azure.core.serializer.json.gson {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fa70c846c33a4566b19e82b9cc1cac7155e192"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTA4Njc2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/module-info.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNTowODo0NlrOF-w_Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNTowODo0NlrOF-w_Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1ODY3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            module azure.core.serializer.json.jackson {\n          \n          \n            \n            module com.azure.core.serializer.json.jackson {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r401358675", "createdAt": "2020-04-01T05:08:46Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+module azure.core.serializer.json.jackson {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fa70c846c33a4566b19e82b9cc1cac7155e192"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTI4OTU4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjo0NjowOFrOF-y3sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOToyNDoxOVrOGAlG8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4OTQ4OA==", "bodyText": "Since this is not a Client, builder is not mandatory but depending on what this class includes and how it gets instantiated we can still use builder if it's convenient.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r401389488", "createdAt": "2020-04-01T06:46:08Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,11 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+/*\n+ * Thoughts on this class skipping the builder pattern?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fa70c846c33a4566b19e82b9cc1cac7155e192"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczNzMzOA==", "bodyText": "I'm wondering if it would be easier/more convenient to just have these classes take the pre-built serializer for a given module, a Gson class for gson JSON parsing, ObjectMapper for Jackson, etc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r401737338", "createdAt": "2020-04-01T16:13:22Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,11 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+/*\n+ * Thoughts on this class skipping the builder pattern?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4OTQ4OA=="}, "originalCommit": {"oid": "b9fa70c846c33a4566b19e82b9cc1cac7155e192"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2MTE2OA==", "bodyText": "Made it so these don't have builders for now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r403261168", "createdAt": "2020-04-03T19:24:19Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,11 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+/*\n+ * Thoughts on this class skipping the builder pattern?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4OTQ4OA=="}, "originalCommit": {"oid": "b9fa70c846c33a4566b19e82b9cc1cac7155e192"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTI5NTM5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonDeserializer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjo0ODoxMFrOF-y68g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOToyMzo1OVrOGAlGRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MDMyMg==", "bodyText": "Should these JsonDeserializer/AvroDeserializer interfaces extend from Deserializer? Same for serializers too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r401390322", "createdAt": "2020-04-01T06:48:10Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonDeserializer.java", "diffHunk": "@@ -0,0 +1,4 @@\n+package com.azure.core.serializer;\n+\n+public interface JsonDeserializer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fa70c846c33a4566b19e82b9cc1cac7155e192"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczODQwNQ==", "bodyText": "I was just throwing interfaces into Azure Core to get a feeling on whether we would want overarching interfaces for serialization, general consensus right now is leaning away from that, whether each interface should be broken down into its serialization and deserialization components.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r401738405", "createdAt": "2020-04-01T16:14:53Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonDeserializer.java", "diffHunk": "@@ -0,0 +1,4 @@\n+package com.azure.core.serializer;\n+\n+public interface JsonDeserializer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MDMyMg=="}, "originalCommit": {"oid": "b9fa70c846c33a4566b19e82b9cc1cac7155e192"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2MDk5Ng==", "bodyText": "Removed overarching interfaces.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r403260996", "createdAt": "2020-04-03T19:23:59Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonDeserializer.java", "diffHunk": "@@ -0,0 +1,4 @@\n+package com.azure.core.serializer;\n+\n+public interface JsonDeserializer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MDMyMg=="}, "originalCommit": {"oid": "b9fa70c846c33a4566b19e82b9cc1cac7155e192"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzIxNDQxOnYy", "diffSide": "RIGHT", "path": "eng/versioning/external_dependencies.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODowMjo0M1rOGCPuGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODowMjo0M1rOGCPuGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNzg5OA==", "bodyText": "typo: jackson", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405007898", "createdAt": "2020-04-07T18:02:43Z", "author": {"login": "joshfree"}, "path": "eng/versioning/external_dependencies.txt", "diffHunk": "@@ -3,6 +3,7 @@\n com.fasterxml.jackson.core:jackson-annotations;2.10.1\n com.fasterxml.jackson.core:jackson-core;2.10.1\n com.fasterxml.jackson.core:jackson-databind;2.10.1\n+com.fasterxml.jsckson.dataformat:jackson-dataformat-avro;2.10.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a815255096c1b49caa764dd36ae6d888a8c683ca"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDA4OTA5OnYy", "diffSide": "RIGHT", "path": "pom.client.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoxOTo0MVrOGCYNVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDowODo0N1rOGCagng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0Njk2NQ==", "bodyText": "I would have this worded slightly differently perhaps - 'Azure Core - Serializer - Avro - Apache', etc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405146965", "createdAt": "2020-04-07T22:19:41Z", "author": {"login": "JonathanGiles"}, "path": "pom.client.xml", "diffHunk": "@@ -558,6 +558,22 @@\n                 <title>Azure Core - Management</title>\n                 <packages>com.azure.core.management*</packages>\n               </group>\n+              <group>\n+                <title>Azure Core - Serializer - Apache Avro</title>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "031fd217caa9524cfad28da1d2d3bbe223d6d240"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NDY3MA==", "bodyText": "Updated to use this convention", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405184670", "createdAt": "2020-04-08T00:08:47Z", "author": {"login": "alzimmermsft"}, "path": "pom.client.xml", "diffHunk": "@@ -558,6 +558,22 @@\n                 <title>Azure Core - Management</title>\n                 <packages>com.azure.core.management*</packages>\n               </group>\n+              <group>\n+                <title>Azure Core - Serializer - Apache Avro</title>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0Njk2NQ=="}, "originalCommit": {"oid": "031fd217caa9524cfad28da1d2d3bbe223d6d240"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDA5NDA5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-avro-apache/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoyMTo0NFrOGCYQWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjo0MDowN1rOGCYsnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NzczNg==", "bodyText": "Don't need square brackets around the 1.9.2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405147736", "createdAt": "2020-04-07T22:21:44Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-serializer-avro-apache/pom.xml", "diffHunk": "@@ -0,0 +1,90 @@\n+<!--\n+  ~ Copyright (c) Microsoft Corporation. All rights reserved.\n+  ~ Licensed under the MIT License.\n+  -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../../pom.client.xml</relativePath>\n+  </parent>\n+\n+  <groupId>com.azure</groupId>\n+  <artifactId>azure-core-serializer-avro-apache</artifactId>\n+  <packaging>jar</packaging>\n+  <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core-serializer-avro-apache;current} -->\n+\n+  <name>Microsoft Azure Apache Avro Serializer Library</name>\n+  <description>This package contains the Apache Avro serializer client plugin for azure-core.</description>\n+  <url>https://github.com/Azure/azure-sdk-for-java</url>\n+\n+  <licenses>\n+    <license>\n+      <name>The MIT License (MIT)</name>\n+      <url>http://opensource.org/licenses/MIT</url>\n+      <distribution>repo</distribution>\n+    </license>\n+  </licenses>\n+\n+  <distributionManagement>\n+    <site>\n+      <id>azure-java-build-docs</id>\n+      <url>${site.url}/site/${project.artifactId}</url>\n+    </site>\n+  </distributionManagement>\n+\n+  <scm>\n+    <url>https://github.com/Azure/azure-sdk-for-java</url>\n+    <connection>scm:git:https://github.com/Azure/azure-sdk-for-java.git</connection>\n+    <developerConnection>scm:git:https://github.com/Azure/azure-sdk-for-java.git</developerConnection>\n+  </scm>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <legal><![CDATA[[INFO] Any downloads listed may be third party software.  Microsoft grants you no rights for third party software.]]></legal>\n+  </properties>\n+\n+  <developers>\n+    <developer>\n+      <id>microsoft</id>\n+      <name>Microsoft</name>\n+    </developer>\n+  </developers>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core</artifactId>\n+      <version>1.5.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core;current} -->\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.avro</groupId>\n+      <artifactId>avro</artifactId>\n+      <version>1.9.2</version> <!-- {x-version-update;org.apache.avro:avro;external_dependency} -->\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-enforcer-plugin</artifactId>\n+        <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-enforcer-plugin;external_dependency} -->\n+        <configuration>\n+          <rules>\n+            <bannedDependencies>\n+              <includes>\n+                <include>com.azure:*</include>\n+                <include>org.apache.avro:avro:[1.9.2]</include>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "031fd217caa9524cfad28da1d2d3bbe223d6d240"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1NDk3Mg==", "bodyText": "Maven Enforcer has a slightly different mechanics for handling version numbers. A plain number means an inclusive range beginning with the listed version, surrounding it with [] changes the logic the exclusively be the listed version.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405154972", "createdAt": "2020-04-07T22:40:07Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-avro-apache/pom.xml", "diffHunk": "@@ -0,0 +1,90 @@\n+<!--\n+  ~ Copyright (c) Microsoft Corporation. All rights reserved.\n+  ~ Licensed under the MIT License.\n+  -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../../pom.client.xml</relativePath>\n+  </parent>\n+\n+  <groupId>com.azure</groupId>\n+  <artifactId>azure-core-serializer-avro-apache</artifactId>\n+  <packaging>jar</packaging>\n+  <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core-serializer-avro-apache;current} -->\n+\n+  <name>Microsoft Azure Apache Avro Serializer Library</name>\n+  <description>This package contains the Apache Avro serializer client plugin for azure-core.</description>\n+  <url>https://github.com/Azure/azure-sdk-for-java</url>\n+\n+  <licenses>\n+    <license>\n+      <name>The MIT License (MIT)</name>\n+      <url>http://opensource.org/licenses/MIT</url>\n+      <distribution>repo</distribution>\n+    </license>\n+  </licenses>\n+\n+  <distributionManagement>\n+    <site>\n+      <id>azure-java-build-docs</id>\n+      <url>${site.url}/site/${project.artifactId}</url>\n+    </site>\n+  </distributionManagement>\n+\n+  <scm>\n+    <url>https://github.com/Azure/azure-sdk-for-java</url>\n+    <connection>scm:git:https://github.com/Azure/azure-sdk-for-java.git</connection>\n+    <developerConnection>scm:git:https://github.com/Azure/azure-sdk-for-java.git</developerConnection>\n+  </scm>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <legal><![CDATA[[INFO] Any downloads listed may be third party software.  Microsoft grants you no rights for third party software.]]></legal>\n+  </properties>\n+\n+  <developers>\n+    <developer>\n+      <id>microsoft</id>\n+      <name>Microsoft</name>\n+    </developer>\n+  </developers>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core</artifactId>\n+      <version>1.5.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core;current} -->\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.avro</groupId>\n+      <artifactId>avro</artifactId>\n+      <version>1.9.2</version> <!-- {x-version-update;org.apache.avro:avro;external_dependency} -->\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-enforcer-plugin</artifactId>\n+        <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-enforcer-plugin;external_dependency} -->\n+        <configuration>\n+          <rules>\n+            <bannedDependencies>\n+              <includes>\n+                <include>com.azure:*</include>\n+                <include>org.apache.avro:avro:[1.9.2]</include>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NzczNg=="}, "originalCommit": {"oid": "031fd217caa9524cfad28da1d2d3bbe223d6d240"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDEwOTMyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoyNzozNFrOGCYZpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoyNzozNFrOGCYZpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MDExOQ==", "bodyText": "What is the use case for this method with the clazz argument?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405150119", "createdAt": "2020-04-07T22:27:34Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.io.OutputStream;\n+\n+/**\n+ * Generic interface covering basic JSON serialization and deserialization methods.\n+ */\n+public interface JsonSerializer {\n+    /**\n+     * Reads the JSON string into its object representation.\n+     *\n+     * @param input The JSON string.\n+     * @param clazz {@link Class} representing the object.\n+     * @param <T> Type of the object.\n+     * @return The object representing the JSON string.\n+     */\n+    <T> Mono<T> read(String input, Class<T> clazz);\n+\n+    /**\n+     * Writes the object into its JSON string.\n+     *\n+     * @param value The object.\n+     * @return The JSON string representing the object.\n+     */\n+    Mono<String> write(Object value);\n+\n+    /**\n+     * Writes the object into its JSON string.\n+     *\n+     * @param value The object.\n+     * @param clazz {@link Class} representing the object.\n+     * @return The JSON string representing the object.\n+     */\n+    Mono<String> write(Object value, Class<?> clazz);\n+\n+    /**\n+     * Converts the object into a JSON string and writes it to the {@link OutputStream}.\n+     *\n+     * @param value The object.\n+     * @param stream The {@link OutputStream} where the JSON string will be written.\n+     * @return An indicator that the object's JSON string has been written to the {@link OutputStream}.\n+     */\n+    Mono<Void> write(Object value, OutputStream stream);\n+\n+    /**\n+     * Converts the object into a JSON string and writes it to the {@link OutputStream}.\n+     *\n+     * @param value The object.\n+     * @param stream The {@link OutputStream} where the JSON string will be written.\n+     * @param clazz {@link Class} representing the object.\n+     * @return An indicator that the object's JSON string has been written to the {@link OutputStream}.\n+     */\n+    Mono<Void> write(Object value, OutputStream stream, Class<?> clazz);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "031fd217caa9524cfad28da1d2d3bbe223d6d240"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDExMDQxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoyNzo1N1rOGCYaTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDowOTowN1rOGCahBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MDI4NQ==", "bodyText": "Can this just used the provided mapper instead of making a copy?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405150285", "createdAt": "2020-04-07T22:27:57Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.avro.jackson;\n+\n+import com.azure.core.serializer.AvroSerializer;\n+import com.fasterxml.jackson.dataformat.avro.AvroMapper;\n+import com.fasterxml.jackson.dataformat.avro.AvroSchema;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+/**\n+ * Jackson based implementation of the {@link AvroSerializer} interface.\n+ */\n+public final class JacksonAvroSerializer implements AvroSerializer<AvroSchema> {\n+    private final AvroMapper mapper;\n+\n+    /**\n+     * Constructs a {@link AvroSerializer} using the default Jackson serializer.\n+     */\n+    public JacksonAvroSerializer() {\n+        this.mapper = new AvroMapper();\n+    }\n+\n+    /**\n+     * Constructs a {@link AvroSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    public JacksonAvroSerializer(AvroMapper mapper) {\n+        this.mapper = mapper.copy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "031fd217caa9524cfad28da1d2d3bbe223d6d240"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NDc3NQ==", "bodyText": "Removed the copy call.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405184775", "createdAt": "2020-04-08T00:09:07Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.avro.jackson;\n+\n+import com.azure.core.serializer.AvroSerializer;\n+import com.fasterxml.jackson.dataformat.avro.AvroMapper;\n+import com.fasterxml.jackson.dataformat.avro.AvroSchema;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+/**\n+ * Jackson based implementation of the {@link AvroSerializer} interface.\n+ */\n+public final class JacksonAvroSerializer implements AvroSerializer<AvroSchema> {\n+    private final AvroMapper mapper;\n+\n+    /**\n+     * Constructs a {@link AvroSerializer} using the default Jackson serializer.\n+     */\n+    public JacksonAvroSerializer() {\n+        this.mapper = new AvroMapper();\n+    }\n+\n+    /**\n+     * Constructs a {@link AvroSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    public JacksonAvroSerializer(AvroMapper mapper) {\n+        this.mapper = mapper.copy();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MDI4NQ=="}, "originalCommit": {"oid": "031fd217caa9524cfad28da1d2d3bbe223d6d240"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDExMjg4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoyODo1N1rOGCYb1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDowMToyOVrOGC-0ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MDY3Nw==", "bodyText": "log and return error.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405150677", "createdAt": "2020-04-07T22:28:57Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.avro.jackson;\n+\n+import com.azure.core.serializer.AvroSerializer;\n+import com.fasterxml.jackson.dataformat.avro.AvroMapper;\n+import com.fasterxml.jackson.dataformat.avro.AvroSchema;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+/**\n+ * Jackson based implementation of the {@link AvroSerializer} interface.\n+ */\n+public final class JacksonAvroSerializer implements AvroSerializer<AvroSchema> {\n+    private final AvroMapper mapper;\n+\n+    /**\n+     * Constructs a {@link AvroSerializer} using the default Jackson serializer.\n+     */\n+    public JacksonAvroSerializer() {\n+        this.mapper = new AvroMapper();\n+    }\n+\n+    /**\n+     * Constructs a {@link AvroSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    public JacksonAvroSerializer(AvroMapper mapper) {\n+        this.mapper = mapper.copy();\n+    }\n+\n+    @Override\n+    public <T> Mono<T> read(byte[] input, AvroSchema schema) {\n+        return Mono.defer(() -> {\n+            try {\n+                return Mono.just(mapper.reader().with(schema).readValue(input));\n+            } catch (IOException ex) {\n+                return Mono.error(ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "031fd217caa9524cfad28da1d2d3bbe223d6d240"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc3OTU1Ng==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405779556", "createdAt": "2020-04-08T20:01:29Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.avro.jackson;\n+\n+import com.azure.core.serializer.AvroSerializer;\n+import com.fasterxml.jackson.dataformat.avro.AvroMapper;\n+import com.fasterxml.jackson.dataformat.avro.AvroSchema;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+/**\n+ * Jackson based implementation of the {@link AvroSerializer} interface.\n+ */\n+public final class JacksonAvroSerializer implements AvroSerializer<AvroSchema> {\n+    private final AvroMapper mapper;\n+\n+    /**\n+     * Constructs a {@link AvroSerializer} using the default Jackson serializer.\n+     */\n+    public JacksonAvroSerializer() {\n+        this.mapper = new AvroMapper();\n+    }\n+\n+    /**\n+     * Constructs a {@link AvroSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    public JacksonAvroSerializer(AvroMapper mapper) {\n+        this.mapper = mapper.copy();\n+    }\n+\n+    @Override\n+    public <T> Mono<T> read(byte[] input, AvroSchema schema) {\n+        return Mono.defer(() -> {\n+            try {\n+                return Mono.just(mapper.reader().with(schema).readValue(input));\n+            } catch (IOException ex) {\n+                return Mono.error(ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MDY3Nw=="}, "originalCommit": {"oid": "031fd217caa9524cfad28da1d2d3bbe223d6d240"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDExNzYzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjozMDo0MFrOGCYerw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDowMTozN1rOGC-0tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MTQwNw==", "bodyText": "Mono.fromRunnable() should be sufficient. Don't need to wrap it with Mono.defer()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405151407", "createdAt": "2020-04-07T22:30:40Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.avro.jackson;\n+\n+import com.azure.core.serializer.AvroSerializer;\n+import com.fasterxml.jackson.dataformat.avro.AvroMapper;\n+import com.fasterxml.jackson.dataformat.avro.AvroSchema;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+/**\n+ * Jackson based implementation of the {@link AvroSerializer} interface.\n+ */\n+public final class JacksonAvroSerializer implements AvroSerializer<AvroSchema> {\n+    private final AvroMapper mapper;\n+\n+    /**\n+     * Constructs a {@link AvroSerializer} using the default Jackson serializer.\n+     */\n+    public JacksonAvroSerializer() {\n+        this.mapper = new AvroMapper();\n+    }\n+\n+    /**\n+     * Constructs a {@link AvroSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    public JacksonAvroSerializer(AvroMapper mapper) {\n+        this.mapper = mapper.copy();\n+    }\n+\n+    @Override\n+    public <T> Mono<T> read(byte[] input, AvroSchema schema) {\n+        return Mono.defer(() -> {\n+            try {\n+                return Mono.just(mapper.reader().with(schema).readValue(input));\n+            } catch (IOException ex) {\n+                return Mono.error(ex);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public Mono<byte[]> write(Object value, AvroSchema schema) {\n+        return Mono.defer(() -> {\n+            try {\n+                return Mono.just(mapper.writer().with(schema).writeValueAsBytes(value));\n+            } catch (IOException ex) {\n+                return Mono.error(ex);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> write(Object value, AvroSchema schema, OutputStream stream) {\n+        return Mono.defer(() -> Mono.fromRunnable(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "031fd217caa9524cfad28da1d2d3bbe223d6d240"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc3OTYzNg==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405779636", "createdAt": "2020-04-08T20:01:37Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.avro.jackson;\n+\n+import com.azure.core.serializer.AvroSerializer;\n+import com.fasterxml.jackson.dataformat.avro.AvroMapper;\n+import com.fasterxml.jackson.dataformat.avro.AvroSchema;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+/**\n+ * Jackson based implementation of the {@link AvroSerializer} interface.\n+ */\n+public final class JacksonAvroSerializer implements AvroSerializer<AvroSchema> {\n+    private final AvroMapper mapper;\n+\n+    /**\n+     * Constructs a {@link AvroSerializer} using the default Jackson serializer.\n+     */\n+    public JacksonAvroSerializer() {\n+        this.mapper = new AvroMapper();\n+    }\n+\n+    /**\n+     * Constructs a {@link AvroSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    public JacksonAvroSerializer(AvroMapper mapper) {\n+        this.mapper = mapper.copy();\n+    }\n+\n+    @Override\n+    public <T> Mono<T> read(byte[] input, AvroSchema schema) {\n+        return Mono.defer(() -> {\n+            try {\n+                return Mono.just(mapper.reader().with(schema).readValue(input));\n+            } catch (IOException ex) {\n+                return Mono.error(ex);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public Mono<byte[]> write(Object value, AvroSchema schema) {\n+        return Mono.defer(() -> {\n+            try {\n+                return Mono.just(mapper.writer().with(schema).writeValueAsBytes(value));\n+            } catch (IOException ex) {\n+                return Mono.error(ex);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> write(Object value, AvroSchema schema, OutputStream stream) {\n+        return Mono.defer(() -> Mono.fromRunnable(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MTQwNw=="}, "originalCommit": {"oid": "031fd217caa9524cfad28da1d2d3bbe223d6d240"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDEzODQ3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-avro-apache/src/main/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjozOToxMFrOGCYrIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjozOToxMFrOGCYrIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1NDU5NA==", "bodyText": "We should have null checks for input params (in all these read/write methods)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405154594", "createdAt": "2020-04-07T22:39:10Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-serializer-avro-apache/src/main/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.avro.apache;\n+\n+import com.azure.core.serializer.AvroSerializer;\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericDatumReader;\n+import org.apache.avro.generic.GenericDatumWriter;\n+import org.apache.avro.io.DatumReader;\n+import org.apache.avro.io.DatumWriter;\n+import org.apache.avro.io.DecoderFactory;\n+import org.apache.avro.io.EncoderFactory;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+/**\n+ * Apache based implementation of the {@link AvroSerializer} interface.\n+ */\n+public class ApacheAvroSerializer implements AvroSerializer {\n+    private static final Schema.Parser PARSER = new Schema.Parser();\n+    private static final DecoderFactory DECODER_FACTORY = DecoderFactory.get();\n+    private static final EncoderFactory ENCODER_FACTORY = EncoderFactory.get();\n+\n+    @Override\n+    public <T> Mono<T> read(byte[] input, String schema) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455d7b813f3eeb87af7cdaefbb7d3b75fa9c2c13"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTUwNjMwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzozMToxOVrOGE4yog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDoyMjozNlrOGFlgFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3Nzk1NA==", "bodyText": "why this needs to be async? You have the byte array and class, this only require some computational work. IMO this doesn't need to be async. same for the other APIs as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r407777954", "createdAt": "2020-04-13T23:31:19Z", "author": {"login": "moderakh"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.io.OutputStream;\n+\n+/**\n+ * Generic interface covering basic JSON serialization and deserialization methods.\n+ */\n+public interface JsonSerializer {\n+    /**\n+     * Reads the JSON byte stream into its object representation.\n+     *\n+     * @param input JSON byte stream.\n+     * @param clazz {@link Class} representing the object.\n+     * @param <T> Type of the object.\n+     * @return The object representing the JSON string.\n+     */\n+    <T> Mono<T> read(byte[] input, Class<T> clazz);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "163f23529c8300194a4a4b1304cf600cc4193938"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxMDQ4Nw==", "bodyText": "Changed to sync methods.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r408510487", "createdAt": "2020-04-15T00:22:36Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.io.OutputStream;\n+\n+/**\n+ * Generic interface covering basic JSON serialization and deserialization methods.\n+ */\n+public interface JsonSerializer {\n+    /**\n+     * Reads the JSON byte stream into its object representation.\n+     *\n+     * @param input JSON byte stream.\n+     * @param clazz {@link Class} representing the object.\n+     * @param <T> Type of the object.\n+     * @return The object representing the JSON string.\n+     */\n+    <T> Mono<T> read(byte[] input, Class<T> clazz);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3Nzk1NA=="}, "originalCommit": {"oid": "163f23529c8300194a4a4b1304cf600cc4193938"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODk1OTk0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo0ODozM1rOGGALlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjo1MDowM1rOGGCrdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NzYwNQ==", "bodyText": "is this more performant than mapper.writeValueAsBytes(value)?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r408947605", "createdAt": "2020-04-15T15:48:33Z", "author": {"login": "moderakh"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import reactor.core.Exceptions;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * Jackson based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class JacksonJsonSerializer implements JsonSerializer {\n+    private final ClientLogger logger = new ClientLogger(JacksonJsonSerializer.class);\n+\n+    private final ObjectMapper mapper;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    JacksonJsonSerializer(ObjectMapper mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    @Override\n+    public <T> T read(byte[] input, Class<T> clazz) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return mapper.readValue(input, clazz);\n+        } catch (IOException ex) {\n+            throw logger.logExceptionAsError(Exceptions.propagate(ex));\n+        }\n+    }\n+\n+    @Override\n+    public byte[] write(Object value) {\n+        try {\n+            return mapper.writeValueAsBytes(value);\n+        } catch (IOException ex) {\n+            throw logger.logExceptionAsError(Exceptions.propagate(ex));\n+        }\n+    }\n+\n+    @Override\n+    public byte[] write(Object value, Class<?> clazz) {\n+        try {\n+            return mapper.writerFor(clazz).writeValueAsBytes(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98b9e1fe09c5a50ff5be6df0dd08e7a6a9d620f8"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NjU1Mw==", "bodyText": "Nope, actually, I'll be removing this as I've read into this more. writerFor is generally meant for scenarios where you want to write the object as one of its super classes or an interface it implements.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r408976553", "createdAt": "2020-04-15T16:31:12Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import reactor.core.Exceptions;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * Jackson based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class JacksonJsonSerializer implements JsonSerializer {\n+    private final ClientLogger logger = new ClientLogger(JacksonJsonSerializer.class);\n+\n+    private final ObjectMapper mapper;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    JacksonJsonSerializer(ObjectMapper mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    @Override\n+    public <T> T read(byte[] input, Class<T> clazz) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return mapper.readValue(input, clazz);\n+        } catch (IOException ex) {\n+            throw logger.logExceptionAsError(Exceptions.propagate(ex));\n+        }\n+    }\n+\n+    @Override\n+    public byte[] write(Object value) {\n+        try {\n+            return mapper.writeValueAsBytes(value);\n+        } catch (IOException ex) {\n+            throw logger.logExceptionAsError(Exceptions.propagate(ex));\n+        }\n+    }\n+\n+    @Override\n+    public byte[] write(Object value, Class<?> clazz) {\n+        try {\n+            return mapper.writerFor(clazz).writeValueAsBytes(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NzYwNQ=="}, "originalCommit": {"oid": "98b9e1fe09c5a50ff5be6df0dd08e7a6a9d620f8"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4ODUzNQ==", "bodyText": "Removed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r408988535", "createdAt": "2020-04-15T16:50:03Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import reactor.core.Exceptions;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * Jackson based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class JacksonJsonSerializer implements JsonSerializer {\n+    private final ClientLogger logger = new ClientLogger(JacksonJsonSerializer.class);\n+\n+    private final ObjectMapper mapper;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    JacksonJsonSerializer(ObjectMapper mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    @Override\n+    public <T> T read(byte[] input, Class<T> clazz) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return mapper.readValue(input, clazz);\n+        } catch (IOException ex) {\n+            throw logger.logExceptionAsError(Exceptions.propagate(ex));\n+        }\n+    }\n+\n+    @Override\n+    public byte[] write(Object value) {\n+        try {\n+            return mapper.writeValueAsBytes(value);\n+        } catch (IOException ex) {\n+            throw logger.logExceptionAsError(Exceptions.propagate(ex));\n+        }\n+    }\n+\n+    @Override\n+    public byte[] write(Object value, Class<?> clazz) {\n+        try {\n+            return mapper.writerFor(clazz).writeValueAsBytes(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NzYwNQ=="}, "originalCommit": {"oid": "98b9e1fe09c5a50ff5be6df0dd08e7a6a9d620f8"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTM0Nzk3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoyNjozMVrOGGEC-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzoyOTo1MVrOGLh7yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDkzOQ==", "bodyText": "I don't remember of top of my head, does this support ObjectNode?\ni.e., mapper.readvalue(input, ObjectNode.class)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r409010939", "createdAt": "2020-04-15T17:26:31Z", "author": {"login": "moderakh"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import reactor.core.Exceptions;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * Jackson based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class JacksonJsonSerializer implements JsonSerializer {\n+    private final ClientLogger logger = new ClientLogger(JacksonJsonSerializer.class);\n+\n+    private final ObjectMapper mapper;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    JacksonJsonSerializer(ObjectMapper mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    @Override\n+    public <T> T read(byte[] input, Class<T> clazz) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return mapper.readValue(input, clazz);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf520b04683b44663a97f65f757e9ad4ece2102"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NjkzNQ==", "bodyText": "I believe that would be ObjectMapper.readTree, would this be a common scenario for Cosmos?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r409276935", "createdAt": "2020-04-16T04:38:37Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import reactor.core.Exceptions;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * Jackson based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class JacksonJsonSerializer implements JsonSerializer {\n+    private final ClientLogger logger = new ClientLogger(JacksonJsonSerializer.class);\n+\n+    private final ObjectMapper mapper;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    JacksonJsonSerializer(ObjectMapper mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    @Override\n+    public <T> T read(byte[] input, Class<T> clazz) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return mapper.readValue(input, clazz);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDkzOQ=="}, "originalCommit": {"oid": "ddf520b04683b44663a97f65f757e9ad4ece2102"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzEzMA==", "bodyText": "yes, that's a common scenario.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r409277130", "createdAt": "2020-04-16T04:39:26Z", "author": {"login": "moderakh"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import reactor.core.Exceptions;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * Jackson based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class JacksonJsonSerializer implements JsonSerializer {\n+    private final ClientLogger logger = new ClientLogger(JacksonJsonSerializer.class);\n+\n+    private final ObjectMapper mapper;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    JacksonJsonSerializer(ObjectMapper mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    @Override\n+    public <T> T read(byte[] input, Class<T> clazz) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return mapper.readValue(input, clazz);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDkzOQ=="}, "originalCommit": {"oid": "ddf520b04683b44663a97f65f757e9ad4ece2102"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3Nzc0NQ==", "bodyText": "how about adding a if/else branch to the same method on the class type?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r409277745", "createdAt": "2020-04-16T04:41:52Z", "author": {"login": "moderakh"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import reactor.core.Exceptions;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * Jackson based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class JacksonJsonSerializer implements JsonSerializer {\n+    private final ClientLogger logger = new ClientLogger(JacksonJsonSerializer.class);\n+\n+    private final ObjectMapper mapper;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    JacksonJsonSerializer(ObjectMapper mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    @Override\n+    public <T> T read(byte[] input, Class<T> clazz) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return mapper.readValue(input, clazz);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDkzOQ=="}, "originalCommit": {"oid": "ddf520b04683b44663a97f65f757e9ad4ece2102"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgyNjkzNA==", "bodyText": "Is the tree reading logic used when dealing with customer related objects or when dealing with service objects? I updated the PR description to better clarify the purpose of the interface added. If the tree reading scenario is common with customer object I'll dive into it more, I'd also rather see it being a separate API than tied into the read API which is more data-bindy.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r409826934", "createdAt": "2020-04-16T20:24:55Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import reactor.core.Exceptions;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * Jackson based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class JacksonJsonSerializer implements JsonSerializer {\n+    private final ClientLogger logger = new ClientLogger(JacksonJsonSerializer.class);\n+\n+    private final ObjectMapper mapper;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    JacksonJsonSerializer(ObjectMapper mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    @Override\n+    public <T> T read(byte[] input, Class<T> clazz) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return mapper.readValue(input, clazz);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDkzOQ=="}, "originalCommit": {"oid": "ddf520b04683b44663a97f65f757e9ad4ece2102"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0MjU5MQ==", "bodyText": "ObjectNode is used for both internal cosmos types, and also for user apis.\nas cosmos is a schema less database, we also would like to provide a schema less type, for that reason we also support ObjectNode in the public surface area. The other reason for supporting ObjectNode in the public surface area is perf as deserialization to ObjectNode doesn't require reflection whereas for deserializing to user provivded Pojo, jackson will use reflection which is slow.\nAs an example all of the following public API invocation currently work:\nUserPojo userPojo = cosmosContainer.readItem(id, pk, UserPojo.class).block().getItem();\nObjectNode objectNode = cosmosContainer.readIteam(id, pk, ObjectNode.class).blcok.getItem();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r413542591", "createdAt": "2020-04-23T06:27:31Z", "author": {"login": "moderakh"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import reactor.core.Exceptions;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * Jackson based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class JacksonJsonSerializer implements JsonSerializer {\n+    private final ClientLogger logger = new ClientLogger(JacksonJsonSerializer.class);\n+\n+    private final ObjectMapper mapper;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    JacksonJsonSerializer(ObjectMapper mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    @Override\n+    public <T> T read(byte[] input, Class<T> clazz) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return mapper.readValue(input, clazz);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDkzOQ=="}, "originalCommit": {"oid": "ddf520b04683b44663a97f65f757e9ad4ece2102"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0NjExOQ==", "bodyText": "btw, at least for jackson, ObjectMapper is capable of handling ObjectNode under the same API:\n static class UserPojo {\n        @JsonProperty\n        String id;\n\n        @JsonProperty\n        String pk;\n    }\n\n    public static void main(String[] args) throws Exception {\n\n        UserPojo userPojo = new UserPojo();\n        userPojo.id = \"myId\";\n        userPojo.pk = \"mypk\";\n\n        ObjectMapper objectMapper = new ObjectMapper();\n        byte[] bytes = objectMapper.writeValueAsBytes(userPojo);\n\n        ObjectNode deserializedObjectNode = objectMapper.readValue(bytes, ObjectNode.class);\n        UserPojo deserializedPojo = objectMapper.readValue(bytes, UserPojo.class);\n\n        assert (deserializedObjectNode.get(\"id\").asText().equals(deserializedPojo.id));\n\n    }", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r413546119", "createdAt": "2020-04-23T06:35:10Z", "author": {"login": "moderakh"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import reactor.core.Exceptions;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * Jackson based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class JacksonJsonSerializer implements JsonSerializer {\n+    private final ClientLogger logger = new ClientLogger(JacksonJsonSerializer.class);\n+\n+    private final ObjectMapper mapper;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    JacksonJsonSerializer(ObjectMapper mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    @Override\n+    public <T> T read(byte[] input, Class<T> clazz) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return mapper.readValue(input, clazz);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDkzOQ=="}, "originalCommit": {"oid": "ddf520b04683b44663a97f65f757e9ad4ece2102"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0MzQ5OQ==", "bodyText": "@moderakh so support for serializing and deserializing ObjectNode is needed? I did some digging into the Jackson code and it does have a quick path if ObjectNode.class is passed as the Class<T> into the deserialize methods. I'll add additional tests to the PR which test this out.\nStill digging into what GSON does, they do have a similar class JsonObject which I imagine also gets the same treatment.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414743499", "createdAt": "2020-04-24T17:29:51Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import reactor.core.Exceptions;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * Jackson based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class JacksonJsonSerializer implements JsonSerializer {\n+    private final ClientLogger logger = new ClientLogger(JacksonJsonSerializer.class);\n+\n+    private final ObjectMapper mapper;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    JacksonJsonSerializer(ObjectMapper mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    @Override\n+    public <T> T read(byte[] input, Class<T> clazz) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return mapper.readValue(input, clazz);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDkzOQ=="}, "originalCommit": {"oid": "ddf520b04683b44663a97f65f757e9ad4ece2102"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTM0ODc1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoyNjo0MlrOGGEDfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDo0MToyMVrOGGUUvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMTA3MQ==", "bodyText": "I don't remember of top of my head, does this support ObjectNode?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r409011071", "createdAt": "2020-04-15T17:26:42Z", "author": {"login": "moderakh"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import reactor.core.Exceptions;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * Jackson based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class JacksonJsonSerializer implements JsonSerializer {\n+    private final ClientLogger logger = new ClientLogger(JacksonJsonSerializer.class);\n+\n+    private final ObjectMapper mapper;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    JacksonJsonSerializer(ObjectMapper mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    @Override\n+    public <T> T read(byte[] input, Class<T> clazz) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return mapper.readValue(input, clazz);\n+        } catch (IOException ex) {\n+            throw logger.logExceptionAsError(Exceptions.propagate(ex));\n+        }\n+    }\n+\n+    @Override\n+    public byte[] write(Object value) {\n+        try {\n+            return mapper.writeValueAsBytes(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf520b04683b44663a97f65f757e9ad4ece2102"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzYyOA==", "bodyText": "This would be for adding a node into a tree being written, correct?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r409277628", "createdAt": "2020-04-16T04:41:21Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import reactor.core.Exceptions;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * Jackson based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class JacksonJsonSerializer implements JsonSerializer {\n+    private final ClientLogger logger = new ClientLogger(JacksonJsonSerializer.class);\n+\n+    private final ObjectMapper mapper;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    JacksonJsonSerializer(ObjectMapper mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    @Override\n+    public <T> T read(byte[] input, Class<T> clazz) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return mapper.readValue(input, clazz);\n+        } catch (IOException ex) {\n+            throw logger.logExceptionAsError(Exceptions.propagate(ex));\n+        }\n+    }\n+\n+    @Override\n+    public byte[] write(Object value) {\n+        try {\n+            return mapper.writeValueAsBytes(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMTA3MQ=="}, "originalCommit": {"oid": "ddf520b04683b44663a97f65f757e9ad4ece2102"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDA4MDc3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializerBuilder.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNzo0Njo1MlrOGHo8Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToxNzoxMFrOGKG7ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDAwNg==", "bodyText": "Let's find a better name for the setter that sets the implementation in these builders.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r410664006", "createdAt": "2020-04-18T07:46:52Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializerBuilder.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Fluent builder class that configures and instantiates instances of {@link GsonJsonSerializer}.\n+ */\n+public class GsonJsonSerializerBuilder {\n+    private Gson gson;\n+\n+    /**\n+     * Constructs a new instance of {@link GsonJsonSerializer} with the configurations set in this builder.\n+     *\n+     * @return A new instance of {@link GsonJsonSerializer}.\n+     */\n+    public GsonJsonSerializer build() {\n+        return (gson == null)\n+            ? new GsonJsonSerializer(new Gson())\n+            : new GsonJsonSerializer(gson);\n+    }\n+\n+    /**\n+     * Sets the {@link Gson} that will be used during serialization.\n+     * <p>\n+     * If this is set to {@code null} the default {@link Gson} will be used.\n+     *\n+     * @param gson {@link Gson} that will be used during serialization.\n+     * @return The updated GsonJsonSerializerBuilder class.\n+     */\n+    public GsonJsonSerializerBuilder gson(Gson gson) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3df34a218ba5cf419922171d0c84d1e1c0c44fea"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxODgzNA==", "bodyText": "I'll play with some API names since this will go against the guideline that setters should be named the same as the parameter type.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r411618834", "createdAt": "2020-04-20T19:02:46Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializerBuilder.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Fluent builder class that configures and instantiates instances of {@link GsonJsonSerializer}.\n+ */\n+public class GsonJsonSerializerBuilder {\n+    private Gson gson;\n+\n+    /**\n+     * Constructs a new instance of {@link GsonJsonSerializer} with the configurations set in this builder.\n+     *\n+     * @return A new instance of {@link GsonJsonSerializer}.\n+     */\n+    public GsonJsonSerializer build() {\n+        return (gson == null)\n+            ? new GsonJsonSerializer(new Gson())\n+            : new GsonJsonSerializer(gson);\n+    }\n+\n+    /**\n+     * Sets the {@link Gson} that will be used during serialization.\n+     * <p>\n+     * If this is set to {@code null} the default {@link Gson} will be used.\n+     *\n+     * @param gson {@link Gson} that will be used during serialization.\n+     * @return The updated GsonJsonSerializerBuilder class.\n+     */\n+    public GsonJsonSerializerBuilder gson(Gson gson) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDAwNg=="}, "originalCommit": {"oid": "3df34a218ba5cf419922171d0c84d1e1c0c44fea"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzMTkwMA==", "bodyText": "Thoughts on converging both the GSON and Jackson builders to use serializer when configuring the Gson or ObjectMapper respectively.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r412331900", "createdAt": "2020-04-21T17:02:35Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializerBuilder.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Fluent builder class that configures and instantiates instances of {@link GsonJsonSerializer}.\n+ */\n+public class GsonJsonSerializerBuilder {\n+    private Gson gson;\n+\n+    /**\n+     * Constructs a new instance of {@link GsonJsonSerializer} with the configurations set in this builder.\n+     *\n+     * @return A new instance of {@link GsonJsonSerializer}.\n+     */\n+    public GsonJsonSerializer build() {\n+        return (gson == null)\n+            ? new GsonJsonSerializer(new Gson())\n+            : new GsonJsonSerializer(gson);\n+    }\n+\n+    /**\n+     * Sets the {@link Gson} that will be used during serialization.\n+     * <p>\n+     * If this is set to {@code null} the default {@link Gson} will be used.\n+     *\n+     * @param gson {@link Gson} that will be used during serialization.\n+     * @return The updated GsonJsonSerializerBuilder class.\n+     */\n+    public GsonJsonSerializerBuilder gson(Gson gson) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDAwNg=="}, "originalCommit": {"oid": "3df34a218ba5cf419922171d0c84d1e1c0c44fea"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMjYzNg==", "bodyText": "yeah, I thought about serializer or implementation. Neither are great, but it probably makes sense to just have a standard name for all builders.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r412702636", "createdAt": "2020-04-22T06:24:09Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializerBuilder.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Fluent builder class that configures and instantiates instances of {@link GsonJsonSerializer}.\n+ */\n+public class GsonJsonSerializerBuilder {\n+    private Gson gson;\n+\n+    /**\n+     * Constructs a new instance of {@link GsonJsonSerializer} with the configurations set in this builder.\n+     *\n+     * @return A new instance of {@link GsonJsonSerializer}.\n+     */\n+    public GsonJsonSerializer build() {\n+        return (gson == null)\n+            ? new GsonJsonSerializer(new Gson())\n+            : new GsonJsonSerializer(gson);\n+    }\n+\n+    /**\n+     * Sets the {@link Gson} that will be used during serialization.\n+     * <p>\n+     * If this is set to {@code null} the default {@link Gson} will be used.\n+     *\n+     * @param gson {@link Gson} that will be used during serialization.\n+     * @return The updated GsonJsonSerializerBuilder class.\n+     */\n+    public GsonJsonSerializerBuilder gson(Gson gson) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDAwNg=="}, "originalCommit": {"oid": "3df34a218ba5cf419922171d0c84d1e1c0c44fea"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MjQ3NQ==", "bodyText": "Updated to use serializer.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r413252475", "createdAt": "2020-04-22T19:17:10Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializerBuilder.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Fluent builder class that configures and instantiates instances of {@link GsonJsonSerializer}.\n+ */\n+public class GsonJsonSerializerBuilder {\n+    private Gson gson;\n+\n+    /**\n+     * Constructs a new instance of {@link GsonJsonSerializer} with the configurations set in this builder.\n+     *\n+     * @return A new instance of {@link GsonJsonSerializer}.\n+     */\n+    public GsonJsonSerializer build() {\n+        return (gson == null)\n+            ? new GsonJsonSerializer(new Gson())\n+            : new GsonJsonSerializer(gson);\n+    }\n+\n+    /**\n+     * Sets the {@link Gson} that will be used during serialization.\n+     * <p>\n+     * If this is set to {@code null} the default {@link Gson} will be used.\n+     *\n+     * @param gson {@link Gson} that will be used during serialization.\n+     * @return The updated GsonJsonSerializerBuilder class.\n+     */\n+    public GsonJsonSerializerBuilder gson(Gson gson) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDAwNg=="}, "originalCommit": {"oid": "3df34a218ba5cf419922171d0c84d1e1c0c44fea"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDA4MjMyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializerBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNzo0OToxMlrOGHo9Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOTowMzowM1rOGIjOyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDIwMg==", "bodyText": "This name might be more appropriate than gson is.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r410664202", "createdAt": "2020-04-18T07:49:12Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializerBuilder.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Fluent builder class that configures and instantiates instances of {@link JacksonJsonSerializer}.\n+ */\n+public class JacksonJsonSerializerBuilder {\n+    private ObjectMapper objectMapper;\n+\n+    /**\n+     * Constructs a new instance of {@link JacksonJsonSerializer} with the configurations set in this builder.\n+     *\n+     * @return A new instance of {@link JacksonJsonSerializer}.\n+     */\n+    public JacksonJsonSerializer build() {\n+        return (objectMapper == null)\n+            ? new JacksonJsonSerializer(new ObjectMapper())\n+            : new JacksonJsonSerializer(objectMapper);\n+    }\n+\n+    /**\n+     * Sets the {@link ObjectMapper} that will be used during serialization.\n+     * <p>\n+     * If this is set to {@code null} the default {@link ObjectMapper} will be used.\n+     *\n+     * @param objectMapper {@link ObjectMapper} that will be used during serialization.\n+     * @return The updated JacksonJsonSerializerBuilder class.\n+     */\n+    public JacksonJsonSerializerBuilder objectMapper(ObjectMapper objectMapper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3df34a218ba5cf419922171d0c84d1e1c0c44fea"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxOTAxNw==", "bodyText": "I would agree, the name here is better.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r411619017", "createdAt": "2020-04-20T19:03:03Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializerBuilder.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Fluent builder class that configures and instantiates instances of {@link JacksonJsonSerializer}.\n+ */\n+public class JacksonJsonSerializerBuilder {\n+    private ObjectMapper objectMapper;\n+\n+    /**\n+     * Constructs a new instance of {@link JacksonJsonSerializer} with the configurations set in this builder.\n+     *\n+     * @return A new instance of {@link JacksonJsonSerializer}.\n+     */\n+    public JacksonJsonSerializer build() {\n+        return (objectMapper == null)\n+            ? new JacksonJsonSerializer(new ObjectMapper())\n+            : new JacksonJsonSerializer(objectMapper);\n+    }\n+\n+    /**\n+     * Sets the {@link ObjectMapper} that will be used during serialization.\n+     * <p>\n+     * If this is set to {@code null} the default {@link ObjectMapper} will be used.\n+     *\n+     * @param objectMapper {@link ObjectMapper} that will be used during serialization.\n+     * @return The updated JacksonJsonSerializerBuilder class.\n+     */\n+    public JacksonJsonSerializerBuilder objectMapper(ObjectMapper objectMapper) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDIwMg=="}, "originalCommit": {"oid": "3df34a218ba5cf419922171d0c84d1e1c0c44fea"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTA2ODYyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMToxNDoyNlrOGLpeZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMzoxODo0NFrOGLsW3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2NzA0Ng==", "bodyText": "Should serialize also support other charsets instead of always using UTF 8?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414867046", "createdAt": "2020-04-24T21:14:26Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.CoreUtils;\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+\n+/**\n+ * GSON based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class GsonJsonSerializer implements JsonSerializer {\n+    private final Gson gson;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed {@link Gson} serializer.\n+     *\n+     * @param gson Configured {@link Gson} serializer.\n+     */\n+    GsonJsonSerializer(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public <T> T deserialize(byte[] input, Class<T> clazz) {\n+        return gson.fromJson(CoreUtils.bomAwareToString(input, null), clazz);\n+    }\n+\n+    @Override\n+    public byte[] serialize(Object value) {\n+        return gson.toJson(value).getBytes(StandardCharsets.UTF_8);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bfe2e249c479985b9221a9a31beb10f47c21654"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxNDI2OQ==", "bodyText": "I believe it is safe to default to using UTF-8 when dealing with JSON, looking around in other places in code HttpRequest defaults to using UTF-8 when sending String bodies, so at minimum this will fall in line with that.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414914269", "createdAt": "2020-04-24T23:18:44Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.CoreUtils;\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+\n+/**\n+ * GSON based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class GsonJsonSerializer implements JsonSerializer {\n+    private final Gson gson;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed {@link Gson} serializer.\n+     *\n+     * @param gson Configured {@link Gson} serializer.\n+     */\n+    GsonJsonSerializer(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public <T> T deserialize(byte[] input, Class<T> clazz) {\n+        return gson.fromJson(CoreUtils.bomAwareToString(input, null), clazz);\n+    }\n+\n+    @Override\n+    public byte[] serialize(Object value) {\n+        return gson.toJson(value).getBytes(StandardCharsets.UTF_8);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2NzA0Ng=="}, "originalCommit": {"oid": "4bfe2e249c479985b9221a9a31beb10f47c21654"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTA3MzI4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/module-info.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMToxNjowMFrOGLphLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMTo1NjozMVrOGLqojQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2Nzc1Ng==", "bodyText": "This should export com.azure.core.serializer.json.gson.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414867756", "createdAt": "2020-04-24T21:16:00Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,7 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+module com.azure.core.serializer.json.gson {\n+    requires transitive com.azure.core;\n+    requires transitive gson;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bfe2e249c479985b9221a9a31beb10f47c21654"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg4NjAyOQ==", "bodyText": "Added", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414886029", "createdAt": "2020-04-24T21:56:31Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,7 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+module com.azure.core.serializer.json.gson {\n+    requires transitive com.azure.core;\n+    requires transitive gson;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2Nzc1Ng=="}, "originalCommit": {"oid": "4bfe2e249c479985b9221a9a31beb10f47c21654"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTEwMjM5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/module-info.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMToyNDoyOVrOGLpxXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMTo1NjozN1rOGLqosA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3MTkwMQ==", "bodyText": "Export com.azure.core.serializer.json.jackson.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414871901", "createdAt": "2020-04-24T21:24:29Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+module com.azure.core.serializer.json.jackson {\n+    requires transitive com.azure.core;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bfe2e249c479985b9221a9a31beb10f47c21654"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg4NjA2NA==", "bodyText": "Added", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414886064", "createdAt": "2020-04-24T21:56:37Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+module com.azure.core.serializer.json.jackson {\n+    requires transitive com.azure.core;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3MTkwMQ=="}, "originalCommit": {"oid": "4bfe2e249c479985b9221a9a31beb10f47c21654"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTEyNzQ4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMTozMjo0N1rOGLp_9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMzoxNzo0MFrOGLsVqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NTYzOA==", "bodyText": "We already have a package named com.azure.core.util.serializer. Should we move this interface to that package instead of creating this new package?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414875638", "createdAt": "2020-04-24T21:32:47Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bfe2e249c479985b9221a9a31beb10f47c21654"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg4NjU2Mg==", "bodyText": "Doesn't hurt to move it into that package, the package currently contains Jackson deserializer/serializer implementations so I don't know if we want to mix this interface into there.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414886562", "createdAt": "2020-04-24T21:58:02Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NTYzOA=="}, "originalCommit": {"oid": "4bfe2e249c479985b9221a9a31beb10f47c21654"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxMzk2MA==", "bodyText": "Moved into util.serializer.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414913960", "createdAt": "2020-04-24T23:17:40Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NTYzOA=="}, "originalCommit": {"oid": "4bfe2e249c479985b9221a9a31beb10f47c21654"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODcwNDQ5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-json-gson/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoxODoxOFrOGM15yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDozMDozMFrOGM2XRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExOTI0Mw==", "bodyText": "Our dependencies report is a bit messy around GSON. We should get MSAL to upgrade to 2.8.6 and move this to 2.8.6 as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r416119243", "createdAt": "2020-04-27T20:18:18Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core-serializer-json-gson/pom.xml", "diffHunk": "@@ -0,0 +1,103 @@\n+<!--\n+  ~ Copyright (c) Microsoft Corporation. All rights reserved.\n+  ~ Licensed under the MIT License.\n+  -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+  </parent>\n+\n+  <groupId>com.azure</groupId>\n+  <artifactId>azure-core-serializer-json-gson</artifactId>\n+  <packaging>jar</packaging>\n+  <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core-serializer-json-gson;current} -->\n+\n+  <name>Microsoft Azure Gson JSON Serializer Library</name>\n+  <description>This package contains the Gson JSON serializer client plugin for azure-core.</description>\n+  <url>https://github.com/Azure/azure-sdk-for-java</url>\n+\n+  <licenses>\n+    <license>\n+      <name>The MIT License (MIT)</name>\n+      <url>http://opensource.org/licenses/MIT</url>\n+      <distribution>repo</distribution>\n+    </license>\n+  </licenses>\n+\n+  <distributionManagement>\n+    <site>\n+      <id>azure-java-build-docs</id>\n+      <url>${site.url}/site/${project.artifactId}</url>\n+    </site>\n+  </distributionManagement>\n+\n+  <scm>\n+    <url>https://github.com/Azure/azure-sdk-for-java</url>\n+    <connection>scm:git:https://github.com/Azure/azure-sdk-for-java.git</connection>\n+    <developerConnection>scm:git:https://github.com/Azure/azure-sdk-for-java.git</developerConnection>\n+  </scm>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <legal><![CDATA[[INFO] Any downloads listed may be third party software.  Microsoft grants you no rights for third party software.]]></legal>\n+  </properties>\n+\n+  <developers>\n+    <developer>\n+      <id>microsoft</id>\n+      <name>Microsoft</name>\n+    </developer>\n+  </developers>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core</artifactId>\n+      <version>1.5.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core;current} -->\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.google.code.gson</groupId>\n+      <artifactId>gson</artifactId>\n+      <version>2.8.5</version> <!-- {x-version-update;com.google.code.gson:gson;external_dependency} -->\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-api</artifactId>\n+      <version>5.4.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter-api;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <version>5.4.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter-engine;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-enforcer-plugin</artifactId>\n+        <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-enforcer-plugin;external_dependency} -->\n+        <configuration>\n+          <rules>\n+            <bannedDependencies>\n+              <includes>\n+                <include>com.azure:*</include>\n+                <include>com.google.code.gson:gson:[2.8.5]</include> <!-- {x-include-update;com.google.code.gson:gson;external_dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "905c7e52d41e29f1378dbbd4540739f93e0ccc72"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNjc5MQ==", "bodyText": "I'll go ahead an update the version, wasn't going to proactively update it without a reason.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r416126791", "createdAt": "2020-04-27T20:30:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-gson/pom.xml", "diffHunk": "@@ -0,0 +1,103 @@\n+<!--\n+  ~ Copyright (c) Microsoft Corporation. All rights reserved.\n+  ~ Licensed under the MIT License.\n+  -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+  </parent>\n+\n+  <groupId>com.azure</groupId>\n+  <artifactId>azure-core-serializer-json-gson</artifactId>\n+  <packaging>jar</packaging>\n+  <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core-serializer-json-gson;current} -->\n+\n+  <name>Microsoft Azure Gson JSON Serializer Library</name>\n+  <description>This package contains the Gson JSON serializer client plugin for azure-core.</description>\n+  <url>https://github.com/Azure/azure-sdk-for-java</url>\n+\n+  <licenses>\n+    <license>\n+      <name>The MIT License (MIT)</name>\n+      <url>http://opensource.org/licenses/MIT</url>\n+      <distribution>repo</distribution>\n+    </license>\n+  </licenses>\n+\n+  <distributionManagement>\n+    <site>\n+      <id>azure-java-build-docs</id>\n+      <url>${site.url}/site/${project.artifactId}</url>\n+    </site>\n+  </distributionManagement>\n+\n+  <scm>\n+    <url>https://github.com/Azure/azure-sdk-for-java</url>\n+    <connection>scm:git:https://github.com/Azure/azure-sdk-for-java.git</connection>\n+    <developerConnection>scm:git:https://github.com/Azure/azure-sdk-for-java.git</developerConnection>\n+  </scm>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <legal><![CDATA[[INFO] Any downloads listed may be third party software.  Microsoft grants you no rights for third party software.]]></legal>\n+  </properties>\n+\n+  <developers>\n+    <developer>\n+      <id>microsoft</id>\n+      <name>Microsoft</name>\n+    </developer>\n+  </developers>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core</artifactId>\n+      <version>1.5.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core;current} -->\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.google.code.gson</groupId>\n+      <artifactId>gson</artifactId>\n+      <version>2.8.5</version> <!-- {x-version-update;com.google.code.gson:gson;external_dependency} -->\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-api</artifactId>\n+      <version>5.4.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter-api;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <version>5.4.2</version> <!-- {x-version-update;org.junit.jupiter:junit-jupiter-engine;external_dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-enforcer-plugin</artifactId>\n+        <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-enforcer-plugin;external_dependency} -->\n+        <configuration>\n+          <rules>\n+            <bannedDependencies>\n+              <includes>\n+                <include>com.azure:*</include>\n+                <include>com.google.code.gson:gson:[2.8.5]</include> <!-- {x-include-update;com.google.code.gson:gson;external_dependency} -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExOTI0Mw=="}, "originalCommit": {"oid": "905c7e52d41e29f1378dbbd4540739f93e0ccc72"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODc0MDUzOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoyNjo1N1rOGM2OyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDozOTozNlrOGM2sBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNDYxNw==", "bodyText": "Is there an immediate use case for this API?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r416124617", "createdAt": "2020-04-27T20:26:57Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import java.io.OutputStream;\n+\n+/**\n+ * Generic interface covering basic JSON serialization and deserialization methods.\n+ */\n+public interface JsonSerializer {\n+    /**\n+     * Reads the JSON byte stream into its object representation.\n+     *\n+     * @param input JSON byte stream.\n+     * @param clazz {@link Class} representing the object.\n+     * @param <T> Type of the object.\n+     * @return The object representing the JSON string.\n+     */\n+    <T> T deserialize(byte[] input, Class<T> clazz);\n+\n+    /**\n+     * Writes the object into its JSON byte stream.\n+     *\n+     * @param value The object.\n+     * @return The JSON byte stream representing the object.\n+     */\n+    byte[] serialize(Object value);\n+\n+    /**\n+     * Converts the object into a JSON byte stream and writes it to the {@link OutputStream}.\n+     *\n+     * @param value The object.\n+     * @param stream The {@link OutputStream} where the JSON byte stream will be written.\n+     */\n+    void serialize(Object value, OutputStream stream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "905c7e52d41e29f1378dbbd4540739f93e0ccc72"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyODE2MA==", "bodyText": "This should be removable and has a viable work around without the existence of the API.\nWith API\nserialize(value, stream);\nWithout API\nstream.write(serialize(value));", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r416128160", "createdAt": "2020-04-27T20:32:41Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import java.io.OutputStream;\n+\n+/**\n+ * Generic interface covering basic JSON serialization and deserialization methods.\n+ */\n+public interface JsonSerializer {\n+    /**\n+     * Reads the JSON byte stream into its object representation.\n+     *\n+     * @param input JSON byte stream.\n+     * @param clazz {@link Class} representing the object.\n+     * @param <T> Type of the object.\n+     * @return The object representing the JSON string.\n+     */\n+    <T> T deserialize(byte[] input, Class<T> clazz);\n+\n+    /**\n+     * Writes the object into its JSON byte stream.\n+     *\n+     * @param value The object.\n+     * @return The JSON byte stream representing the object.\n+     */\n+    byte[] serialize(Object value);\n+\n+    /**\n+     * Converts the object into a JSON byte stream and writes it to the {@link OutputStream}.\n+     *\n+     * @param value The object.\n+     * @param stream The {@link OutputStream} where the JSON byte stream will be written.\n+     */\n+    void serialize(Object value, OutputStream stream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNDYxNw=="}, "originalCommit": {"oid": "905c7e52d41e29f1378dbbd4540739f93e0ccc72"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEzMDE5MQ==", "bodyText": "Is there a use case though that the API would enable, in particular with greater perf?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r416130191", "createdAt": "2020-04-27T20:36:18Z", "author": {"login": "JonathanGiles"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import java.io.OutputStream;\n+\n+/**\n+ * Generic interface covering basic JSON serialization and deserialization methods.\n+ */\n+public interface JsonSerializer {\n+    /**\n+     * Reads the JSON byte stream into its object representation.\n+     *\n+     * @param input JSON byte stream.\n+     * @param clazz {@link Class} representing the object.\n+     * @param <T> Type of the object.\n+     * @return The object representing the JSON string.\n+     */\n+    <T> T deserialize(byte[] input, Class<T> clazz);\n+\n+    /**\n+     * Writes the object into its JSON byte stream.\n+     *\n+     * @param value The object.\n+     * @return The JSON byte stream representing the object.\n+     */\n+    byte[] serialize(Object value);\n+\n+    /**\n+     * Converts the object into a JSON byte stream and writes it to the {@link OutputStream}.\n+     *\n+     * @param value The object.\n+     * @param stream The {@link OutputStream} where the JSON byte stream will be written.\n+     */\n+    void serialize(Object value, OutputStream stream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNDYxNw=="}, "originalCommit": {"oid": "905c7e52d41e29f1378dbbd4540739f93e0ccc72"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEzMjEwMQ==", "bodyText": "There may be a minor performance enhancement but the underlying serialization logic is generally the same when using either write(Object) or write(Object, OutputStream) APIs. Given the API is for a pattern we generally don't see in our libraries I don't think keeping it adds much worth.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r416132101", "createdAt": "2020-04-27T20:39:36Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import java.io.OutputStream;\n+\n+/**\n+ * Generic interface covering basic JSON serialization and deserialization methods.\n+ */\n+public interface JsonSerializer {\n+    /**\n+     * Reads the JSON byte stream into its object representation.\n+     *\n+     * @param input JSON byte stream.\n+     * @param clazz {@link Class} representing the object.\n+     * @param <T> Type of the object.\n+     * @return The object representing the JSON string.\n+     */\n+    <T> T deserialize(byte[] input, Class<T> clazz);\n+\n+    /**\n+     * Writes the object into its JSON byte stream.\n+     *\n+     * @param value The object.\n+     * @return The JSON byte stream representing the object.\n+     */\n+    byte[] serialize(Object value);\n+\n+    /**\n+     * Converts the object into a JSON byte stream and writes it to the {@link OutputStream}.\n+     *\n+     * @param value The object.\n+     * @param stream The {@link OutputStream} where the JSON byte stream will be written.\n+     */\n+    void serialize(Object value, OutputStream stream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNDYxNw=="}, "originalCommit": {"oid": "905c7e52d41e29f1378dbbd4540739f93e0ccc72"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2068, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}