{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzODUzOTY4", "number": 9537, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzoxOTowOFrODrwAuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzoxOTowOFrODrwAuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjAxOTc2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/AzureKeyCredentialPolicy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzoxOTowOFrOF8RxIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzo0NDoyMFrOF8S5ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0OTk4Ng==", "bodyText": "Alan, on Python land, Johan is suggesting to change the parameter name from header to name so whenever we have a service that uses query keys instead of header keys, this name will work.\nI am considering changing it in .NET too so we are consistent\nMore info here: Azure/azure-sdk-for-python#10509 (comment)\nWhat do you think?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9537#discussion_r398749986", "createdAt": "2020-03-26T17:19:08Z", "author": {"login": "maririos"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/AzureKeyCredentialPolicy.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Pipeline policy that uses an {@link AzureKeyCredential} to set the specified header which authorizes requests.\n+ *\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the key.\n+ */\n+public final class AzureKeyCredentialPolicy implements HttpPipelinePolicy {\n+    private final ClientLogger logger = new ClientLogger(AzureKeyCredentialPolicy.class);\n+\n+    private final String header;\n+    private final AzureKeyCredential credential;\n+\n+    /**\n+     * Creates a policy that uses the passed {@link AzureKeyCredential} to set the specified header.\n+     *\n+     * @param header The header that will be set to the {@link AzureKeyCredential} key value.\n+     * @param credential The {@link AzureKeyCredential} containing the authorization key to use.\n+     * @throws NullPointerException If {@code header} or {@code credential} is {@code null}.\n+     * @throws IllegalArgumentException If {@code header} is empty.\n+     */\n+    public AzureKeyCredentialPolicy(String header, AzureKeyCredential credential) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37e383a4668fbf24b456621e92fab6b64498505e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2NjM1MA==", "bodyText": "Works with me, this is a non-breaking change for Java since we don't have named arguments.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9537#discussion_r398766350", "createdAt": "2020-03-26T17:41:20Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/AzureKeyCredentialPolicy.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Pipeline policy that uses an {@link AzureKeyCredential} to set the specified header which authorizes requests.\n+ *\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the key.\n+ */\n+public final class AzureKeyCredentialPolicy implements HttpPipelinePolicy {\n+    private final ClientLogger logger = new ClientLogger(AzureKeyCredentialPolicy.class);\n+\n+    private final String header;\n+    private final AzureKeyCredential credential;\n+\n+    /**\n+     * Creates a policy that uses the passed {@link AzureKeyCredential} to set the specified header.\n+     *\n+     * @param header The header that will be set to the {@link AzureKeyCredential} key value.\n+     * @param credential The {@link AzureKeyCredential} containing the authorization key to use.\n+     * @throws NullPointerException If {@code header} or {@code credential} is {@code null}.\n+     * @throws IllegalArgumentException If {@code header} is empty.\n+     */\n+    public AzureKeyCredentialPolicy(String header, AzureKeyCredential credential) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0OTk4Ng=="}, "originalCommit": {"oid": "37e383a4668fbf24b456621e92fab6b64498505e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2ODUyMg==", "bodyText": "Though if we have plans to support both headers and query parameters for the passed key Java may want to change this interface a bit to have a flag such as isHeaderKey and context switch on that to either add it as a header or a query parameter. This could also be added later as a non-breaking change.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9537#discussion_r398768522", "createdAt": "2020-03-26T17:44:20Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/AzureKeyCredentialPolicy.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Pipeline policy that uses an {@link AzureKeyCredential} to set the specified header which authorizes requests.\n+ *\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the key.\n+ */\n+public final class AzureKeyCredentialPolicy implements HttpPipelinePolicy {\n+    private final ClientLogger logger = new ClientLogger(AzureKeyCredentialPolicy.class);\n+\n+    private final String header;\n+    private final AzureKeyCredential credential;\n+\n+    /**\n+     * Creates a policy that uses the passed {@link AzureKeyCredential} to set the specified header.\n+     *\n+     * @param header The header that will be set to the {@link AzureKeyCredential} key value.\n+     * @param credential The {@link AzureKeyCredential} containing the authorization key to use.\n+     * @throws NullPointerException If {@code header} or {@code credential} is {@code null}.\n+     * @throws IllegalArgumentException If {@code header} is empty.\n+     */\n+    public AzureKeyCredentialPolicy(String header, AzureKeyCredential credential) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0OTk4Ng=="}, "originalCommit": {"oid": "37e383a4668fbf24b456621e92fab6b64498505e"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2170, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}