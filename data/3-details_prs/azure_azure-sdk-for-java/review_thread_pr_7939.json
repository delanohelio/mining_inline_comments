{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwOTYxOTcw", "number": 7939, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODowMDo0NlrODdxzgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNToxMTo1NVrODd6gpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTUxMjk2OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODowMDo0NlrOFmkzcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODowMDo0NlrOFmkzcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk5MzIwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n          \n          \n            \n            System.out.printf(\"Detected language name: %s, ISO 6391 Name: %s, Score: %s.%n\",", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r375993203", "createdAt": "2020-02-06T18:00:46Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -215,80 +215,59 @@ TextAnalyticsAsyncClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n ```\n \n ### Detect language\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L75-L82 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L75-L78 -->\n ```java\n String inputText = \"Bonjour tout le monde\";\n-\n-for (DetectedLanguage detectedLanguage : textAnalyticsClient.detectLanguage(inputText).getDetectedLanguages()) {\n-    System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n-        detectedLanguage.getName(),\n-        detectedLanguage.getIso6391Name(),\n-        detectedLanguage.getScore());\n-}\n+DetectedLanguage detectedLanguage = textAnalyticsClient.detectLanguage(inputText);\n+System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTYwOTY3OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODozMzozMlrOFmlxBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDozOTowN1rOFmyIhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwODk2NQ==", "bodyText": "this is interesting, because the example only has one sentence so the document and the sentence have the same results.\nwhat do you think about printing the DocumentSentiment.Sentiment instead?\nor add another sentence to the document and then print both the document sentiment and the sentences sentiments to users can see the differente", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376008965", "createdAt": "2020-02-06T18:33:32Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -215,80 +215,59 @@ TextAnalyticsAsyncClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n ```\n \n ### Detect language\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L75-L82 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L75-L78 -->\n ```java\n String inputText = \"Bonjour tout le monde\";\n-\n-for (DetectedLanguage detectedLanguage : textAnalyticsClient.detectLanguage(inputText).getDetectedLanguages()) {\n-    System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n-        detectedLanguage.getName(),\n-        detectedLanguage.getIso6391Name(),\n-        detectedLanguage.getScore());\n-}\n+DetectedLanguage detectedLanguage = textAnalyticsClient.detectLanguage(inputText);\n+System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+    detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n ```\n \n ### Recognize entity\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L89-L98 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L85-L89 -->\n ```java\n String text = \"Satya Nadella is the CEO of Microsoft\";\n-\n-for (CategorizedEntity entity : textAnalyticsClient.recognizeEntities(text).getEntities()) {\n-    System.out.printf(\n-        \"Recognized Categorized Entity: %s, Category: %s, SubCategory: %s, Score: %s.%n\",\n-        entity.getText(),\n-        entity.getCategory(),\n-        entity.getSubCategory(),\n-        entity.getScore());\n+for (CategorizedEntity entity : textAnalyticsClient.recognizeEntities(text)) {\n+    System.out.printf(\"Recognized Categorized Entity: %s, Category: %s, SubCategory: %s, Score: %s.%n\",\n+        entity.getText(), entity.getCategory(), entity.getSubCategory(), entity.getScore());\n }\n ```\n \n ### Recognize PII (Personally Identifiable Information) entity\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L105-L114 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L96-L100 -->\n ```java\n String text = \"My SSN is 555-55-5555\";\n-\n-for (PiiEntity entity : textAnalyticsClient.recognizePiiEntities(text).getEntities()) {\n-    System.out.printf(\n-        \"Recognized PII Entity: %s, Category: %s, SubCategory: %s, Score: %s.%n\",\n-        entity.getText(),\n-        entity.getCategory(),\n-        entity.getSubCategory(),\n-        entity.getScore());\n+for (PiiEntity entity : textAnalyticsClient.recognizePiiEntities(text)) {\n+    System.out.printf(\"Recognized PII Entity: %s, Category: %s, SubCategory: %s, Score: %s.%n\",\n+        entity.getText(), entity.getCategory(), entity.getSubCategory(), entity.getScore());\n }\n ```\n \n ### Recognize linked entity\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L121-L128 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L107-L111 -->\n \n ```java\n String text = \"Old Faithful is a geyser at Yellowstone Park.\";\n-\n-for (LinkedEntity linkedEntity : textAnalyticsClient.recognizeLinkedEntities(text).getLinkedEntities()) {\n+for (LinkedEntity linkedEntity : textAnalyticsClient.recognizeLinkedEntities(text)) {\n     System.out.printf(\"Recognized Linked Entity: %s, Url: %s, Data Source: %s.%n\",\n-        linkedEntity.getName(),\n-        linkedEntity.getUrl(),\n-        linkedEntity.getDataSource());\n+        linkedEntity.getName(), linkedEntity.getUrl(), linkedEntity.getDataSource());\n }\n ```\n ### Extract key phrases\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L135-L139 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L118-L121 -->\n ```java\n String text = \"My cat might need to see a veterinarian.\";\n-\n-for (String keyPhrase : textAnalyticsClient.extractKeyPhrases(text).getKeyPhrases()) {\n+for (String keyPhrase : textAnalyticsClient.extractKeyPhrases(text)) {\n     System.out.printf(\"Recognized phrases: %s.%n\", keyPhrase);\n }\n ```\n \n ### Analyze sentiment\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L146-L152 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L128-L131 -->\n ```java\n String text = \"The hotel was dark and unclean.\";\n-\n-for (TextSentiment textSentiment : textAnalyticsClient.analyzeSentiment(text).getSentenceSentiments()) {\n-    System.out.printf(\n-        \"Analyzed Sentence Sentiment class: %s.%n\",\n-        textSentiment.getTextSentimentClass());\n+for (SentenceSentiment textSentiment : textAnalyticsClient.analyzeSentiment(text).getSentenceSentiments()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMDc0NQ==", "bodyText": "Will add another input sentence.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376120745", "createdAt": "2020-02-06T22:35:50Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -215,80 +215,59 @@ TextAnalyticsAsyncClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n ```\n \n ### Detect language\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L75-L82 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L75-L78 -->\n ```java\n String inputText = \"Bonjour tout le monde\";\n-\n-for (DetectedLanguage detectedLanguage : textAnalyticsClient.detectLanguage(inputText).getDetectedLanguages()) {\n-    System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n-        detectedLanguage.getName(),\n-        detectedLanguage.getIso6391Name(),\n-        detectedLanguage.getScore());\n-}\n+DetectedLanguage detectedLanguage = textAnalyticsClient.detectLanguage(inputText);\n+System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+    detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n ```\n \n ### Recognize entity\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L89-L98 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L85-L89 -->\n ```java\n String text = \"Satya Nadella is the CEO of Microsoft\";\n-\n-for (CategorizedEntity entity : textAnalyticsClient.recognizeEntities(text).getEntities()) {\n-    System.out.printf(\n-        \"Recognized Categorized Entity: %s, Category: %s, SubCategory: %s, Score: %s.%n\",\n-        entity.getText(),\n-        entity.getCategory(),\n-        entity.getSubCategory(),\n-        entity.getScore());\n+for (CategorizedEntity entity : textAnalyticsClient.recognizeEntities(text)) {\n+    System.out.printf(\"Recognized Categorized Entity: %s, Category: %s, SubCategory: %s, Score: %s.%n\",\n+        entity.getText(), entity.getCategory(), entity.getSubCategory(), entity.getScore());\n }\n ```\n \n ### Recognize PII (Personally Identifiable Information) entity\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L105-L114 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L96-L100 -->\n ```java\n String text = \"My SSN is 555-55-5555\";\n-\n-for (PiiEntity entity : textAnalyticsClient.recognizePiiEntities(text).getEntities()) {\n-    System.out.printf(\n-        \"Recognized PII Entity: %s, Category: %s, SubCategory: %s, Score: %s.%n\",\n-        entity.getText(),\n-        entity.getCategory(),\n-        entity.getSubCategory(),\n-        entity.getScore());\n+for (PiiEntity entity : textAnalyticsClient.recognizePiiEntities(text)) {\n+    System.out.printf(\"Recognized PII Entity: %s, Category: %s, SubCategory: %s, Score: %s.%n\",\n+        entity.getText(), entity.getCategory(), entity.getSubCategory(), entity.getScore());\n }\n ```\n \n ### Recognize linked entity\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L121-L128 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L107-L111 -->\n \n ```java\n String text = \"Old Faithful is a geyser at Yellowstone Park.\";\n-\n-for (LinkedEntity linkedEntity : textAnalyticsClient.recognizeLinkedEntities(text).getLinkedEntities()) {\n+for (LinkedEntity linkedEntity : textAnalyticsClient.recognizeLinkedEntities(text)) {\n     System.out.printf(\"Recognized Linked Entity: %s, Url: %s, Data Source: %s.%n\",\n-        linkedEntity.getName(),\n-        linkedEntity.getUrl(),\n-        linkedEntity.getDataSource());\n+        linkedEntity.getName(), linkedEntity.getUrl(), linkedEntity.getDataSource());\n }\n ```\n ### Extract key phrases\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L135-L139 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L118-L121 -->\n ```java\n String text = \"My cat might need to see a veterinarian.\";\n-\n-for (String keyPhrase : textAnalyticsClient.extractKeyPhrases(text).getKeyPhrases()) {\n+for (String keyPhrase : textAnalyticsClient.extractKeyPhrases(text)) {\n     System.out.printf(\"Recognized phrases: %s.%n\", keyPhrase);\n }\n ```\n \n ### Analyze sentiment\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L146-L152 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L128-L131 -->\n ```java\n String text = \"The hotel was dark and unclean.\";\n-\n-for (TextSentiment textSentiment : textAnalyticsClient.analyzeSentiment(text).getSentenceSentiments()) {\n-    System.out.printf(\n-        \"Analyzed Sentence Sentiment class: %s.%n\",\n-        textSentiment.getTextSentimentClass());\n+for (SentenceSentiment textSentiment : textAnalyticsClient.analyzeSentiment(text).getSentenceSentiments()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwODk2NQ=="}, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMTU5MQ==", "bodyText": "Now that there are 2 sentences you could also print textAnalyticsClient.analyzeSentiment(text).getSentiment()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376211591", "createdAt": "2020-02-07T04:39:07Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -215,80 +215,59 @@ TextAnalyticsAsyncClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n ```\n \n ### Detect language\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L75-L82 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L75-L78 -->\n ```java\n String inputText = \"Bonjour tout le monde\";\n-\n-for (DetectedLanguage detectedLanguage : textAnalyticsClient.detectLanguage(inputText).getDetectedLanguages()) {\n-    System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n-        detectedLanguage.getName(),\n-        detectedLanguage.getIso6391Name(),\n-        detectedLanguage.getScore());\n-}\n+DetectedLanguage detectedLanguage = textAnalyticsClient.detectLanguage(inputText);\n+System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+    detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n ```\n \n ### Recognize entity\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L89-L98 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L85-L89 -->\n ```java\n String text = \"Satya Nadella is the CEO of Microsoft\";\n-\n-for (CategorizedEntity entity : textAnalyticsClient.recognizeEntities(text).getEntities()) {\n-    System.out.printf(\n-        \"Recognized Categorized Entity: %s, Category: %s, SubCategory: %s, Score: %s.%n\",\n-        entity.getText(),\n-        entity.getCategory(),\n-        entity.getSubCategory(),\n-        entity.getScore());\n+for (CategorizedEntity entity : textAnalyticsClient.recognizeEntities(text)) {\n+    System.out.printf(\"Recognized Categorized Entity: %s, Category: %s, SubCategory: %s, Score: %s.%n\",\n+        entity.getText(), entity.getCategory(), entity.getSubCategory(), entity.getScore());\n }\n ```\n \n ### Recognize PII (Personally Identifiable Information) entity\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L105-L114 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L96-L100 -->\n ```java\n String text = \"My SSN is 555-55-5555\";\n-\n-for (PiiEntity entity : textAnalyticsClient.recognizePiiEntities(text).getEntities()) {\n-    System.out.printf(\n-        \"Recognized PII Entity: %s, Category: %s, SubCategory: %s, Score: %s.%n\",\n-        entity.getText(),\n-        entity.getCategory(),\n-        entity.getSubCategory(),\n-        entity.getScore());\n+for (PiiEntity entity : textAnalyticsClient.recognizePiiEntities(text)) {\n+    System.out.printf(\"Recognized PII Entity: %s, Category: %s, SubCategory: %s, Score: %s.%n\",\n+        entity.getText(), entity.getCategory(), entity.getSubCategory(), entity.getScore());\n }\n ```\n \n ### Recognize linked entity\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L121-L128 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L107-L111 -->\n \n ```java\n String text = \"Old Faithful is a geyser at Yellowstone Park.\";\n-\n-for (LinkedEntity linkedEntity : textAnalyticsClient.recognizeLinkedEntities(text).getLinkedEntities()) {\n+for (LinkedEntity linkedEntity : textAnalyticsClient.recognizeLinkedEntities(text)) {\n     System.out.printf(\"Recognized Linked Entity: %s, Url: %s, Data Source: %s.%n\",\n-        linkedEntity.getName(),\n-        linkedEntity.getUrl(),\n-        linkedEntity.getDataSource());\n+        linkedEntity.getName(), linkedEntity.getUrl(), linkedEntity.getDataSource());\n }\n ```\n ### Extract key phrases\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L135-L139 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L118-L121 -->\n ```java\n String text = \"My cat might need to see a veterinarian.\";\n-\n-for (String keyPhrase : textAnalyticsClient.extractKeyPhrases(text).getKeyPhrases()) {\n+for (String keyPhrase : textAnalyticsClient.extractKeyPhrases(text)) {\n     System.out.printf(\"Recognized phrases: %s.%n\", keyPhrase);\n }\n ```\n \n ### Analyze sentiment\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L146-L152 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L128-L131 -->\n ```java\n String text = \"The hotel was dark and unclean.\";\n-\n-for (TextSentiment textSentiment : textAnalyticsClient.analyzeSentiment(text).getSentenceSentiments()) {\n-    System.out.printf(\n-        \"Analyzed Sentence Sentiment class: %s.%n\",\n-        textSentiment.getTextSentimentClass());\n+for (SentenceSentiment textSentiment : textAnalyticsClient.analyzeSentiment(text).getSentenceSentiments()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwODk2NQ=="}, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTYxMjA0OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODozNDoxM1rOFmlyXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODozNDoxM1rOFmlyXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwOTMwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                System.out.printf(\"Analyzed Sentence Sentiment class: %s.%n\", textSentiment.getSentimentLabel());\n          \n          \n            \n                System.out.printf(\"Analyzed Sentence Sentiment: %s.%n\", textSentiment.getSentimentLabel());", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376009308", "createdAt": "2020-02-06T18:34:13Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -215,80 +215,59 @@ TextAnalyticsAsyncClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n ```\n \n ### Detect language\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L75-L82 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L75-L78 -->\n ```java\n String inputText = \"Bonjour tout le monde\";\n-\n-for (DetectedLanguage detectedLanguage : textAnalyticsClient.detectLanguage(inputText).getDetectedLanguages()) {\n-    System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n-        detectedLanguage.getName(),\n-        detectedLanguage.getIso6391Name(),\n-        detectedLanguage.getScore());\n-}\n+DetectedLanguage detectedLanguage = textAnalyticsClient.detectLanguage(inputText);\n+System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+    detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n ```\n \n ### Recognize entity\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L89-L98 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L85-L89 -->\n ```java\n String text = \"Satya Nadella is the CEO of Microsoft\";\n-\n-for (CategorizedEntity entity : textAnalyticsClient.recognizeEntities(text).getEntities()) {\n-    System.out.printf(\n-        \"Recognized Categorized Entity: %s, Category: %s, SubCategory: %s, Score: %s.%n\",\n-        entity.getText(),\n-        entity.getCategory(),\n-        entity.getSubCategory(),\n-        entity.getScore());\n+for (CategorizedEntity entity : textAnalyticsClient.recognizeEntities(text)) {\n+    System.out.printf(\"Recognized Categorized Entity: %s, Category: %s, SubCategory: %s, Score: %s.%n\",\n+        entity.getText(), entity.getCategory(), entity.getSubCategory(), entity.getScore());\n }\n ```\n \n ### Recognize PII (Personally Identifiable Information) entity\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L105-L114 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L96-L100 -->\n ```java\n String text = \"My SSN is 555-55-5555\";\n-\n-for (PiiEntity entity : textAnalyticsClient.recognizePiiEntities(text).getEntities()) {\n-    System.out.printf(\n-        \"Recognized PII Entity: %s, Category: %s, SubCategory: %s, Score: %s.%n\",\n-        entity.getText(),\n-        entity.getCategory(),\n-        entity.getSubCategory(),\n-        entity.getScore());\n+for (PiiEntity entity : textAnalyticsClient.recognizePiiEntities(text)) {\n+    System.out.printf(\"Recognized PII Entity: %s, Category: %s, SubCategory: %s, Score: %s.%n\",\n+        entity.getText(), entity.getCategory(), entity.getSubCategory(), entity.getScore());\n }\n ```\n \n ### Recognize linked entity\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L121-L128 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L107-L111 -->\n \n ```java\n String text = \"Old Faithful is a geyser at Yellowstone Park.\";\n-\n-for (LinkedEntity linkedEntity : textAnalyticsClient.recognizeLinkedEntities(text).getLinkedEntities()) {\n+for (LinkedEntity linkedEntity : textAnalyticsClient.recognizeLinkedEntities(text)) {\n     System.out.printf(\"Recognized Linked Entity: %s, Url: %s, Data Source: %s.%n\",\n-        linkedEntity.getName(),\n-        linkedEntity.getUrl(),\n-        linkedEntity.getDataSource());\n+        linkedEntity.getName(), linkedEntity.getUrl(), linkedEntity.getDataSource());\n }\n ```\n ### Extract key phrases\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L135-L139 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L118-L121 -->\n ```java\n String text = \"My cat might need to see a veterinarian.\";\n-\n-for (String keyPhrase : textAnalyticsClient.extractKeyPhrases(text).getKeyPhrases()) {\n+for (String keyPhrase : textAnalyticsClient.extractKeyPhrases(text)) {\n     System.out.printf(\"Recognized phrases: %s.%n\", keyPhrase);\n }\n ```\n \n ### Analyze sentiment\n-<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L146-L152 -->\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L128-L131 -->\n ```java\n String text = \"The hotel was dark and unclean.\";\n-\n-for (TextSentiment textSentiment : textAnalyticsClient.analyzeSentiment(text).getSentenceSentiments()) {\n-    System.out.printf(\n-        \"Analyzed Sentence Sentiment class: %s.%n\",\n-        textSentiment.getTextSentimentClass());\n+for (SentenceSentiment textSentiment : textAnalyticsClient.analyzeSentiment(text).getSentenceSentiments()) {\n+    System.out.printf(\"Analyzed Sentence Sentiment class: %s.%n\", textSentiment.getSentimentLabel());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTYxODk5OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODozNjoyNFrOFml2fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDo0MTo0OFrOFmyKJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxMDM2Nw==", "bodyText": "can we import it?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376010367", "createdAt": "2020-02-06T18:36:24Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -51,12 +52,16 @@\n         this.service = service;\n     }\n \n-    Mono<Response<AnalyzeSentimentResult>> analyzeSentimentWithResponse(String text, String language, Context context) {\n+    Mono<Response<com.azure.ai.textanalytics.models.DocumentSentiment>> analyzeSentimentWithResponse(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMjY1OA==", "bodyText": "we already used \"import com.azure.ai.textanalytics.implementation.models.DocumentSentiment;\"\nSo can't import another same class name \"com.azure.ai.textanalytics.models.DocumentSentiment\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376122658", "createdAt": "2020-02-06T22:41:03Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -51,12 +52,16 @@\n         this.service = service;\n     }\n \n-    Mono<Response<AnalyzeSentimentResult>> analyzeSentimentWithResponse(String text, String language, Context context) {\n+    Mono<Response<com.azure.ai.textanalytics.models.DocumentSentiment>> analyzeSentimentWithResponse(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxMDM2Nw=="}, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMjAwNg==", "bodyText": ":| makes sense. Thanks for explaining", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376212006", "createdAt": "2020-02-07T04:41:48Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -51,12 +52,16 @@\n         this.service = service;\n     }\n \n-    Mono<Response<AnalyzeSentimentResult>> analyzeSentimentWithResponse(String text, String language, Context context) {\n+    Mono<Response<com.azure.ai.textanalytics.models.DocumentSentiment>> analyzeSentimentWithResponse(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxMDM2Nw=="}, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTYyODcxOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODozOTozM1rOFml84A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODozOTozM1rOFml84A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxMjAwMA==", "bodyText": "NIT: consider changing variable name too", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376012000", "createdAt": "2020-02-06T18:39:33Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -129,9 +134,9 @@ private AnalyzeSentimentResult convertToTextSentimentResult(final DocumentSentim\n         final SentimentConfidenceScorePerLabel confidenceScorePerLabel = documentSentiment.getDocumentScores();\n \n         // Sentence text sentiment\n-        final List<TextSentiment> sentenceSentimentTexts = documentSentiment.getSentences().stream()\n+        final List<SentenceSentiment> sentenceSentimentTexts = documentSentiment.getSentences().stream()\n             .map(sentenceSentiment -> {\n-                TextSentimentClass sentimentClass = TextSentimentClass.fromString(sentenceSentiment\n+                SentimentLabel sentimentClass = SentimentLabel.fromString(sentenceSentiment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTY0MDAzOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo0MzoxOVrOFmmELw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo0MzoxOVrOFmmELw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxMzg3MQ==", "bodyText": "NIT: the Texts part might be misleading as it actually doesn't contain the text per se, just sentiment and scores", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376013871", "createdAt": "2020-02-06T18:43:19Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -129,9 +134,9 @@ private AnalyzeSentimentResult convertToTextSentimentResult(final DocumentSentim\n         final SentimentConfidenceScorePerLabel confidenceScorePerLabel = documentSentiment.getDocumentScores();\n \n         // Sentence text sentiment\n-        final List<TextSentiment> sentenceSentimentTexts = documentSentiment.getSentences().stream()\n+        final List<SentenceSentiment> sentenceSentimentTexts = documentSentiment.getSentences().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTY0OTIzOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeLinkedEntityAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo0NjoyOFrOFmmKSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjo0NTowMVrOFmszLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxNTQzMg==", "bodyText": "just curious, is there a reason why it is not using the import?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376015432", "createdAt": "2020-02-06T18:46:28Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeLinkedEntityAsyncClient.java", "diffHunk": "@@ -49,13 +52,25 @@\n         this.service = service;\n     }\n \n-    Mono<Response<RecognizeLinkedEntitiesResult>> recognizeLinkedEntitiesWithResponse(String text, String language,\n-        Context context) {\n+    Mono<PagedResponse<com.azure.ai.textanalytics.models.LinkedEntity>> recognizeLinkedEntitiesWithResponse(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyNDIwNA==", "bodyText": "same class name is been taken from autogenerated class:\nimport com.azure.ai.textanalytics.**implementation**.models.LinkedEntity;\nSo can't use import. We transform explored class to autogenerated class, vise versa.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376124204", "createdAt": "2020-02-06T22:45:01Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeLinkedEntityAsyncClient.java", "diffHunk": "@@ -49,13 +52,25 @@\n         this.service = service;\n     }\n \n-    Mono<Response<RecognizeLinkedEntitiesResult>> recognizeLinkedEntitiesWithResponse(String text, String language,\n-        Context context) {\n+    Mono<PagedResponse<com.azure.ai.textanalytics.models.LinkedEntity>> recognizeLinkedEntitiesWithResponse(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxNTQzMg=="}, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTY2MTMxOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo1MDoyMVrOFmmR7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTowNDoxMVrOFmmskw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxNzM4OQ==", "bodyText": "One of the discussions with the adding batch to the methods was to add it at the end. so i.e. detectLanguageBatch\nthis is true for the other methods", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376017389", "createdAt": "2020-02-06T18:50:21Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -237,11 +236,7 @@ public TextAnalyticsServiceVersion getServiceVersion() {\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<DocumentResultCollection<DetectLanguageResult>> detectBatchLanguage(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxNzkxOQ==", "bodyText": "I will be doing that in an upcoming PR along with the change to add options parameter to List method overload.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376017919", "createdAt": "2020-02-06T18:51:22Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -237,11 +236,7 @@ public TextAnalyticsServiceVersion getServiceVersion() {\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<DocumentResultCollection<DetectLanguageResult>> detectBatchLanguage(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxNzM4OQ=="}, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAyNDIxMQ==", "bodyText": "Yes, It will fix in another API. Sameeksha and I splitting the workload now", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376024211", "createdAt": "2020-02-06T19:04:11Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -237,11 +236,7 @@ public TextAnalyticsServiceVersion getServiceVersion() {\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<DocumentResultCollection<DetectLanguageResult>> detectBatchLanguage(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxNzM4OQ=="}, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTY3OTkzOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo1NjozOVrOFmmeDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzowNTowMlrOFmtP6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAyMDQ5Mg==", "bodyText": "Why do we need to update these to PagedResponses?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376020492", "createdAt": "2020-02-06T18:56:39Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -819,26 +761,24 @@ public TextAnalyticsServiceVersion getServiceVersion() {\n      * <p>Extract key phrases in a text with a provided language. Subscribes to the call asynchronously and prints\n      * out the key phrases when a response is received.</p>\n      *\n-     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesWithResponse#string-string}\n+     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases#string-string}\n      *\n      * @param text the text to be analyzed.\n      * @param language The 2 letter ISO 639-1 representation of language for the text. If not set, uses \"en\" for\n      * English as default.\n      *\n-     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} has the\n-     * {@link ExtractKeyPhraseResult key phrases} of the text.\n+     * @return A {@link PagedFlux} containing the key phrases of the text.\n      *\n      * @throws NullPointerException if {@code text} is {@code null}.\n-     * @throws com.azure.ai.textanalytics.models.TextAnalyticsException if the response returned with\n-     * an {@link com.azure.ai.textanalytics.models.TextAnalyticsError error}.\n+     * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n      */\n-    @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<ExtractKeyPhraseResult>> extractKeyPhrasesWithResponse(String text, String language) {\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<String> extractKeyPhrases(String text, String language) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 458}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAyMzM0NQ==", "bodyText": "\"DO return PagedFlux for asynchronous APIs that expose collections. Even if the service does not support pagination, always return PagedFlux, as it allows for consumers to retrieve response information in a consistent manner.\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376023345", "createdAt": "2020-02-06T19:02:16Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -819,26 +761,24 @@ public TextAnalyticsServiceVersion getServiceVersion() {\n      * <p>Extract key phrases in a text with a provided language. Subscribes to the call asynchronously and prints\n      * out the key phrases when a response is received.</p>\n      *\n-     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesWithResponse#string-string}\n+     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases#string-string}\n      *\n      * @param text the text to be analyzed.\n      * @param language The 2 letter ISO 639-1 representation of language for the text. If not set, uses \"en\" for\n      * English as default.\n      *\n-     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} has the\n-     * {@link ExtractKeyPhraseResult key phrases} of the text.\n+     * @return A {@link PagedFlux} containing the key phrases of the text.\n      *\n      * @throws NullPointerException if {@code text} is {@code null}.\n-     * @throws com.azure.ai.textanalytics.models.TextAnalyticsException if the response returned with\n-     * an {@link com.azure.ai.textanalytics.models.TextAnalyticsError error}.\n+     * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n      */\n-    @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<ExtractKeyPhraseResult>> extractKeyPhrasesWithResponse(String text, String language) {\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<String> extractKeyPhrases(String text, String language) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAyMDQ5Mg=="}, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 458}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAyMzUzNQ==", "bodyText": "I need to correct sync api to return IterableStream", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376023535", "createdAt": "2020-02-06T19:02:39Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -819,26 +761,24 @@ public TextAnalyticsServiceVersion getServiceVersion() {\n      * <p>Extract key phrases in a text with a provided language. Subscribes to the call asynchronously and prints\n      * out the key phrases when a response is received.</p>\n      *\n-     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesWithResponse#string-string}\n+     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases#string-string}\n      *\n      * @param text the text to be analyzed.\n      * @param language The 2 letter ISO 639-1 representation of language for the text. If not set, uses \"en\" for\n      * English as default.\n      *\n-     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} has the\n-     * {@link ExtractKeyPhraseResult key phrases} of the text.\n+     * @return A {@link PagedFlux} containing the key phrases of the text.\n      *\n      * @throws NullPointerException if {@code text} is {@code null}.\n-     * @throws com.azure.ai.textanalytics.models.TextAnalyticsException if the response returned with\n-     * an {@link com.azure.ai.textanalytics.models.TextAnalyticsError error}.\n+     * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n      */\n-    @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<ExtractKeyPhraseResult>> extractKeyPhrasesWithResponse(String text, String language) {\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<String> extractKeyPhrases(String text, String language) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAyMDQ5Mg=="}, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 458}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzMTU2MQ==", "bodyText": "update: Sync collection APIs will stay with PageIterable. It contains response infor", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376131561", "createdAt": "2020-02-06T23:05:02Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -819,26 +761,24 @@ public TextAnalyticsServiceVersion getServiceVersion() {\n      * <p>Extract key phrases in a text with a provided language. Subscribes to the call asynchronously and prints\n      * out the key phrases when a response is received.</p>\n      *\n-     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesWithResponse#string-string}\n+     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases#string-string}\n      *\n      * @param text the text to be analyzed.\n      * @param language The 2 letter ISO 639-1 representation of language for the text. If not set, uses \"en\" for\n      * English as default.\n      *\n-     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} has the\n-     * {@link ExtractKeyPhraseResult key phrases} of the text.\n+     * @return A {@link PagedFlux} containing the key phrases of the text.\n      *\n      * @throws NullPointerException if {@code text} is {@code null}.\n-     * @throws com.azure.ai.textanalytics.models.TextAnalyticsException if the response returned with\n-     * an {@link com.azure.ai.textanalytics.models.TextAnalyticsError error}.\n+     * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n      */\n-    @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<ExtractKeyPhraseResult>> extractKeyPhrasesWithResponse(String text, String language) {\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<String> extractKeyPhrases(String text, String language) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAyMDQ5Mg=="}, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 458}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTc4ODI5OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTozMjowNFrOFmnihQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTozMjowNFrOFmnihQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzODAyMQ==", "bodyText": "nit: Preferably remove all \"**Class\" with label or just call them \"*Sentiment\".", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376038021", "createdAt": "2020-02-06T19:32:04Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -117,7 +122,7 @@\n      */\n     private AnalyzeSentimentResult convertToTextSentimentResult(final DocumentSentiment documentSentiment) {\n         // Document text sentiment\n-        final TextSentimentClass documentSentimentClass = TextSentimentClass.fromString(documentSentiment.\n+        final SentimentLabel documentSentimentClass = SentimentLabel.fromString(documentSentiment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTc5NDUxOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTozNDowOVrOFmnmcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDowODoxMVrOFmuerg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzOTAyNg==", "bodyText": "ReturnType.COLLECTION", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376039026", "createdAt": "2020-02-06T19:34:09Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -148,14 +152,13 @@ public TextAnalyticsServiceVersion getServiceVersion() {\n      * specified.\n      *\n      * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} has the\n-     * {@link DetectLanguageResult detected language} of the text.\n+     * {@link DetectedLanguage detected language} of the text.\n      *\n      * @throws NullPointerException if {@code text} is {@code null}.\n-     * @throws com.azure.ai.textanalytics.models.TextAnalyticsException if the response returned with\n-     * an {@link com.azure.ai.textanalytics.models.TextAnalyticsError error}.\n+     * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzMjg4Nw==", "bodyText": "Why? Since we are not returning a collection of T. And it is Mono, I believe SINGLE should be the correct one to use. Correct me if I am wrong.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376132887", "createdAt": "2020-02-06T23:08:23Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -148,14 +152,13 @@ public TextAnalyticsServiceVersion getServiceVersion() {\n      * specified.\n      *\n      * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} has the\n-     * {@link DetectLanguageResult detected language} of the text.\n+     * {@link DetectedLanguage detected language} of the text.\n      *\n      * @throws NullPointerException if {@code text} is {@code null}.\n-     * @throws com.azure.ai.textanalytics.models.TextAnalyticsException if the response returned with\n-     * an {@link com.azure.ai.textanalytics.models.TextAnalyticsError error}.\n+     * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzOTAyNg=="}, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1MTcyNg==", "bodyText": "Yeah, this should be a single, I think I commented at the wrong line, ignore this one.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376151726", "createdAt": "2020-02-07T00:08:11Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -148,14 +152,13 @@ public TextAnalyticsServiceVersion getServiceVersion() {\n      * specified.\n      *\n      * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} has the\n-     * {@link DetectLanguageResult detected language} of the text.\n+     * {@link DetectedLanguage detected language} of the text.\n      *\n      * @throws NullPointerException if {@code text} is {@code null}.\n-     * @throws com.azure.ai.textanalytics.models.TextAnalyticsException if the response returned with\n-     * an {@link com.azure.ai.textanalytics.models.TextAnalyticsError error}.\n+     * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzOTAyNg=="}, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTgxNjI5OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTo0MTozMFrOFmn0OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTo0MTozMFrOFmn0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0MjU1Mw==", "bodyText": "Consider using the validatePrimaryLanguage for testing the results, rather than converting them to lists and then doing the comparison.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376042553", "createdAt": "2020-02-06T19:41:30Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientTest.java", "diffHunk": "@@ -113,7 +111,8 @@ public void detectLanguagesBatchStringInput() {\n     public void detectSingleTextLanguage() {\n         DetectedLanguage primaryLanguage = new DetectedLanguage(\"English\", \"en\", 1.0);\n         StepVerifier.create(client.detectLanguage(\"This is a test English Text\"))\n-            .assertNext(response -> validateDetectedLanguages(Collections.singletonList(primaryLanguage), response.getDetectedLanguages()))\n+            .assertNext(response -> validateDetectedLanguages(Collections.singletonList(primaryLanguage),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTgyMzgzOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTo0NDowN1rOFmn5Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzoxNTozMVrOFmtfww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0Mzc4Ng==", "bodyText": "no assert ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376043786", "createdAt": "2020-02-06T19:44:07Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientTest.java", "diffHunk": "@@ -179,7 +179,6 @@ public void recognizeEntitiesForEmptyText() {\n     @Test\n     public void recognizeEntitiesForFaultyText() {\n         StepVerifier.create(client.recognizeEntities(\"!@#%%\"))\n-            .assertNext(response -> assertEquals(response.getEntities().size(), 0))\n             .verifyComplete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzNTYxOQ==", "bodyText": "updated", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376135619", "createdAt": "2020-02-06T23:15:31Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientTest.java", "diffHunk": "@@ -179,7 +179,6 @@ public void recognizeEntitiesForEmptyText() {\n     @Test\n     public void recognizeEntitiesForFaultyText() {\n         StepVerifier.create(client.recognizeEntities(\"!@#%%\"))\n-            .assertNext(response -> assertEquals(response.getEntities().size(), 0))\n             .verifyComplete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0Mzc4Ng=="}, "originalCommit": {"oid": "9941357abbbbd86ab9c8f0383cf63ecc69a70fa2"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjUyMjkyOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDoxNzozOFrOFmuo7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDoxNzozOFrOFmuo7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1NDM0OQ==", "bodyText": "Test to detect languages for a list of string input with provided country hint.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376154349", "createdAt": "2020-02-07T00:17:38Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTest.java", "diffHunk": "@@ -73,7 +75,7 @@ public void detectLanguagesBatchInput() {\n     }\n \n     /**\n-     * Test Detect batch languages for List of String input with country Hint.\n+     * Test detect batch languages for a list of string input with country hint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4bd7409452ef22fabdaae1827ccf6f7a65476e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjUyMzk5OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDoxODoxNFrOFmuphw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDoxODoxNFrOFmuphw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1NDUwMw==", "bodyText": "Test to detect languages for a list of string input.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376154503", "createdAt": "2020-02-07T00:18:14Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTest.java", "diffHunk": "@@ -83,7 +85,7 @@ public void detectLanguagesBatchListCountryHint() {\n     }\n \n     /**\n-     * Test Detect batch languages for List of String input.\n+     * Test detect batch languages for a list of string input.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4bd7409452ef22fabdaae1827ccf6f7a65476e"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjUyNDcxOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDoxODozOFrOFmup9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDoxODozOFrOFmup9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1NDYxMg==", "bodyText": "Can use validatePrimaryLanguage here and below.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376154612", "createdAt": "2020-02-07T00:18:38Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTest.java", "diffHunk": "@@ -99,7 +101,8 @@ public void detectSingleTextLanguage() {\n         DetectedLanguage primaryLanguage = new DetectedLanguage(\"English\", \"en\", 0.0);\n         List<DetectedLanguage> expectedLanguageList = Collections.singletonList(primaryLanguage);\n         validateDetectedLanguages(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4bd7409452ef22fabdaae1827ccf6f7a65476e"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjUyNzUyOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDoyMDowN1rOFmuroQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDoyMDowN1rOFmuroQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1NTA0MQ==", "bodyText": "use validatePrimaryLanguage instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376155041", "createdAt": "2020-02-07T00:20:07Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTest.java", "diffHunk": "@@ -484,8 +489,9 @@ public void updateToValidKey() {\n         credential.updateCredential(getApiKey());\n \n         // Action and Assert\n-        validateDetectedLanguages(Arrays.asList(new DetectedLanguage(\"English\", \"en\", 1.0)),\n-            client.detectLanguage(\"This is a test English Text\").getDetectedLanguages());\n+        validateDetectedLanguages(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4bd7409452ef22fabdaae1827ccf6f7a65476e"}, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjkyMzY0OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DocumentSentiment.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDo1ODowMVrOFmyVDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNToyMDo0OVrOFmykbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxNDc5OQ==", "bodyText": "Although the type is SentimentLabel, the other languages are using Sentiment as the name of the property.\nThis is true for SentenceSentiment too.\nnaming i.e\nDocumentSentiment\nSentiment\nSentimentScores\nSentences\nSentenceSentiment\nSentiment\nSentimentScores\nOffset\nLength", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376214799", "createdAt": "2020-02-07T04:58:01Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DocumentSentiment.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+import java.util.List;\n+\n+/**\n+ * The DocumentSentiment model\n+ */\n+@Immutable\n+public final class DocumentSentiment {\n+    private final SentimentLabel sentimentLabel;\n+    private final SentimentScorePerLabel sentimentScorePerLabel;\n+    private final List<SentenceSentiment> sentenceSentiments;\n+\n+    /**\n+     * Creates a {@code DocumentSentiment} model that describes the sentiment of the document.\n+     *\n+     * @param sentimentLabel the sentiment label of the document\n+     * @param sentimentScorePerLabel the score of sentiment label of the document\n+     * @param sentenceSentiments a list of sentence sentiments\n+     */\n+    public DocumentSentiment(SentimentLabel sentimentLabel, SentimentScorePerLabel sentimentScorePerLabel,\n+        List<SentenceSentiment> sentenceSentiments) {\n+        this.sentimentLabel = sentimentLabel;\n+        this.sentimentScorePerLabel = sentimentScorePerLabel;\n+        this.sentenceSentiments = sentenceSentiments;\n+    }\n+\n+    /**\n+     * Get the sentiment label.\n+     *\n+     * @return the SentimentLabel\n+     */\n+    public SentimentLabel getSentimentLabel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4bd7409452ef22fabdaae1827ccf6f7a65476e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxODczMw==", "bodyText": "Will update it. Thanks Mariana", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376218733", "createdAt": "2020-02-07T05:20:49Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DocumentSentiment.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+import java.util.List;\n+\n+/**\n+ * The DocumentSentiment model\n+ */\n+@Immutable\n+public final class DocumentSentiment {\n+    private final SentimentLabel sentimentLabel;\n+    private final SentimentScorePerLabel sentimentScorePerLabel;\n+    private final List<SentenceSentiment> sentenceSentiments;\n+\n+    /**\n+     * Creates a {@code DocumentSentiment} model that describes the sentiment of the document.\n+     *\n+     * @param sentimentLabel the sentiment label of the document\n+     * @param sentimentScorePerLabel the score of sentiment label of the document\n+     * @param sentenceSentiments a list of sentence sentiments\n+     */\n+    public DocumentSentiment(SentimentLabel sentimentLabel, SentimentScorePerLabel sentimentScorePerLabel,\n+        List<SentenceSentiment> sentenceSentiments) {\n+        this.sentimentLabel = sentimentLabel;\n+        this.sentimentScorePerLabel = sentimentScorePerLabel;\n+        this.sentenceSentiments = sentenceSentiments;\n+    }\n+\n+    /**\n+     * Get the sentiment label.\n+     *\n+     * @return the SentimentLabel\n+     */\n+    public SentimentLabel getSentimentLabel() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxNDc5OQ=="}, "originalCommit": {"oid": "3d4bd7409452ef22fabdaae1827ccf6f7a65476e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjkzMjcyOnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/SentimentScorePerLabel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTowNToyN1rOFmyaYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTowNTo1MFrOFmyaqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxNjE2Mw==", "bodyText": "Consider eliminating Score from the names. Our users will do i.e.\nxx.getSentimentScore().getPositive() so it already implies positive is a score.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376216163", "createdAt": "2020-02-07T05:05:27Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/SentimentScorePerLabel.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The SentimentScorePerLabel model\n+ */\n+@Immutable\n+public final class SentimentScorePerLabel {\n+    private final double negativeScore;\n+    private final double neutralScore;\n+    private final double positiveScore;\n+\n+    /**\n+     * Creates a {@code SentimentScorePerLabel} model that describes the sentiment score of the sentiment label.\n+     *\n+     * @param negativeScore negative score value, range in between 0 and 1.0\n+     * @param neutralScore neutral score value, range in between 0 and 1.0\n+     * @param positiveScore positive score value, range in between 0 and 1.0\n+     */\n+    public SentimentScorePerLabel(double negativeScore, double neutralScore, double positiveScore) {\n+        this.negativeScore = negativeScore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4bd7409452ef22fabdaae1827ccf6f7a65476e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxNjIzNQ==", "bodyText": "It will also align with other languages", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376216235", "createdAt": "2020-02-07T05:05:50Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/SentimentScorePerLabel.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The SentimentScorePerLabel model\n+ */\n+@Immutable\n+public final class SentimentScorePerLabel {\n+    private final double negativeScore;\n+    private final double neutralScore;\n+    private final double positiveScore;\n+\n+    /**\n+     * Creates a {@code SentimentScorePerLabel} model that describes the sentiment score of the sentiment label.\n+     *\n+     * @param negativeScore negative score value, range in between 0 and 1.0\n+     * @param neutralScore neutral score value, range in between 0 and 1.0\n+     * @param positiveScore positive score value, range in between 0 and 1.0\n+     */\n+    public SentimentScorePerLabel(double negativeScore, double neutralScore, double positiveScore) {\n+        this.negativeScore = negativeScore;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxNjE2Mw=="}, "originalCommit": {"oid": "3d4bd7409452ef22fabdaae1827ccf6f7a65476e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjkzOTI0OnYy", "diffSide": "RIGHT", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNToxMTo1NVrOFmyenQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNTozMzoxNVrOFmytEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxNzI0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private AnalyzeSentimentResult convertToTextSentimentResult(final DocumentSentiment documentSentiment) {\n          \n          \n            \n                private AnalyzeSentimentResult convertToSentenceSentimentResult(final DocumentSentiment documentSentiment) {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376217245", "createdAt": "2020-02-07T05:11:55Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -117,9 +122,9 @@\n      */\n     private AnalyzeSentimentResult convertToTextSentimentResult(final DocumentSentiment documentSentiment) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4bd7409452ef22fabdaae1827ccf6f7a65476e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyMDk0Nw==", "bodyText": "This method convert a DocumentSentiment to AnalyzeSentimentResult. I will change to convertToAnalyzeSentimentResult", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7939#discussion_r376220947", "createdAt": "2020-02-07T05:33:15Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -117,9 +122,9 @@\n      */\n     private AnalyzeSentimentResult convertToTextSentimentResult(final DocumentSentiment documentSentiment) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxNzI0NQ=="}, "originalCommit": {"oid": "3d4bd7409452ef22fabdaae1827ccf6f7a65476e"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3237, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}