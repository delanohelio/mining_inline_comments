{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MzkxMTAx", "number": 13858, "title": "Encryption: fix asyncness - remove blocking calls ", "bodyText": "This PR fixes the asyncness of the encryption api and implementation.\n\nPrior to this PR there were some blocking call were happening, this PR made the APIs to be async.\nsome minor cleanup, fixing code style, class access-level, etc\n\nTODO: I haven't decided on the async method names yet, whether we should have async in them or not. probably not. will fix that in another PR.\nTODO: I need to also fix asyncness in EncryptionKeyWrapProvider, will be done in another PR.", "createdAt": "2020-08-07T05:04:06Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13858", "merged": true, "mergeCommit": {"oid": "f2a9dc11a90f05c646cd305fcbc2063d89fdf809"}, "closed": true, "closedAt": "2020-08-11T16:55:22Z", "author": {"login": "moderakh"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7YN7egH2gAyNDY0MzkxMTAxOjUwNTJjN2Q0MTg4ZThjZTAyNmIzMWZlYzhiZjM4NDc0MjQ4YTEzMTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9v4D3AH2gAyNDY0MzkxMTAxOmJjZDcxNGQyODM1YzQwY2JhMzdjZDQ3M2Q3ZTdhYzlkMzg3MjQ3NTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5052c7d4188e8ce026b31fec8bf38474248a1312", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5052c7d4188e8ce026b31fec8bf38474248a1312", "committedDate": "2020-08-03T20:40:33Z", "message": "more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7898ba2129a20d56de3dbc4cc5e0eaf39cdd913", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e7898ba2129a20d56de3dbc4cc5e0eaf39cdd913", "committedDate": "2020-08-05T21:53:08Z", "message": "removed blocking calls where possible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa4b2dafafbc8bc99dcae50eb8de5c889372eb68", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fa4b2dafafbc8bc99dcae50eb8de5c889372eb68", "committedDate": "2020-08-05T22:23:35Z", "message": "minor cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57a9039f8aefc06a8beb7124e4f479f8541f1206", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/57a9039f8aefc06a8beb7124e4f479f8541f1206", "committedDate": "2020-08-05T22:45:22Z", "message": "minor cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3d64815a362f546cb00b57e5787a340027d77b3", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b3d64815a362f546cb00b57e5787a340027d77b3", "committedDate": "2020-08-05T22:54:13Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65db9390cdcd05f771cebb5ec1e27500311598c6", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/65db9390cdcd05f771cebb5ec1e27500311598c6", "committedDate": "2020-08-07T04:58:33Z", "message": "encryption/decryption on the correct scheduler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDM2NTEy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13858#pullrequestreview-463036512", "createdAt": "2020-08-07T05:06:36Z", "commit": {"oid": "65db9390cdcd05f771cebb5ec1e27500311598c6"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTowNjozNlrOG9MnVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNToxODowNVrOG9MyWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMjk5OA==", "bodyText": "return type should be updated now here and other places.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13858#discussion_r466822998", "createdAt": "2020-08-07T05:06:36Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/DataEncryptionKeyProvider.java", "diffHunk": "@@ -15,10 +17,8 @@\n      * @param encryptionAlgorithm Encryption algorithm that the retrieved key will be used with.\n      * @return Data encryption key bytes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65db9390cdcd05f771cebb5ec1e27500311598c6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMzc2OA==", "bodyText": "By capturing the Schedulers.elastic() in an instance variable, you are using the same Scheduler with every async API. Just a heads up on not sure how this will behave.\nAlso, Schedulers.boundedElastic() is the preferred way now for wrapping I/O calls. Please see that too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13858#discussion_r466823768", "createdAt": "2020-08-07T05:09:50Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/EncryptionCosmosAsyncContainer.java", "diffHunk": "@@ -33,13 +33,16 @@\n \n // TODO: for now basic functionality is in. some APIs and some logic branch is not complete yet.\n public class EncryptionCosmosAsyncContainer {\n+    private final Scheduler encryptionScheduler;\n     private final Encryptor encryptor;\n     private final CosmosResponseFactory responseFactory = new CosmosResponseFactoryCore();\n     private final CosmosAsyncContainer container;\n \n     EncryptionCosmosAsyncContainer(String id, CosmosAsyncDatabase database, Encryptor encryptor) {\n         this.container = BridgeInternal.createCosmosAsyncContainer(id, database);\n         this.encryptor = encryptor;\n+        // TODO: moderakh once EncryptionKeyWrapProvider apis are made async this should change to Schedulers.parallel()\n+        this.encryptionScheduler = Schedulers.elastic();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65db9390cdcd05f771cebb5ec1e27500311598c6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyNDA5MA==", "bodyText": "SubsribeOn will also change the actual call - which in this case could be all the way back to azure-cosmos. Any reason why you are not using PublishOn here ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13858#discussion_r466824090", "createdAt": "2020-08-07T05:11:04Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/EncryptionCosmosAsyncContainer.java", "diffHunk": "@@ -242,22 +259,22 @@\n             Preconditions.checkArgument(partitionKey != null, \"partitionKey cannot be null for operations using \"\n                 + \"EncryptionContainer.\");\n \n-            byte[] payload = cosmosSerializerToStream(item);\n-            Mono<CosmosItemResponse<byte[]>> result = this.replaceItemStream(payload,\n-                itemId,\n-                partitionKey,\n-                encryptionItemRequestOptions);\n+            return Mono.defer(() -> {\n+                byte[] payload = cosmosSerializerToStream(item);\n+                Mono<CosmosItemResponse<byte[]>> result = this.replaceItemStream(payload,\n+                    itemId,\n+                    partitionKey,\n+                    encryptionItemRequestOptions);\n \n-            return result.map(rsp -> (CosmosItemResponse<T>) this.responseFactory.createItemResponse(rsp,\n-                item.getClass()));\n+                return result.map(rsp -> (CosmosItemResponse<T>) this.responseFactory.createItemResponse(rsp,\n+                    item.getClass()));\n+            }).subscribeOn(encryptionScheduler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65db9390cdcd05f771cebb5ec1e27500311598c6"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyNDI1OA==", "bodyText": "return type update :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13858#discussion_r466824258", "createdAt": "2020-08-07T05:11:49Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/Encryptor.java", "diffHunk": "@@ -17,7 +19,7 @@\n      * @param encryptionAlgorithm Identifier for the encryption algorithm.\n      * @return Cipher text.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65db9390cdcd05f771cebb5ec1e27500311598c6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyNTEzNQ==", "bodyText": "Instead of using blocking calls, since now we are going asynchronous, please try using StepVerifier from reactor-test.\nIts actually built in for testing async APIs. We have used it in azure-spring-data-cosmos-test and also in azure-cosmos.\nPlease take a look at VeryLargeDocumentQueryTest.java and any reactive test in azure-spring-data-cosmos-test - ReactiveCosmosTemplateIT, ReactiveCourseRepositoryIT, etc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13858#discussion_r466825135", "createdAt": "2020-08-07T05:15:25Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/test/java/com/azure/cosmos/implementation/encryption/EncryptionTests.java", "diffHunk": "@@ -522,6 +590,58 @@ public void createItemEncrypt_readItemDecrypt() throws Exception {\n         assertThat(readWithoutDecryption.sensitive).isNull();\n     }\n \n+    // async write, upsert, read\n+    @Test(groups = { \"encryption\" }, timeOut = TIMEOUT)\n+    public void asyncCreateItemEncrypt_readItemDecrypt() throws Exception {\n+        EncryptionItemRequestOptions requestOptions = new EncryptionItemRequestOptions();\n+        EncryptionOptions encryptionOptions = new EncryptionOptions();\n+        encryptionOptions.setPathsToEncrypt(ImmutableList.of(\"/Sensitive\"));\n+\n+        encryptionOptions.setDataEncryptionKeyId(dekId);\n+        encryptionOptions.setEncryptionAlgorithm(CosmosEncryptionAlgorithm.AEAES_256_CBC_HMAC_SHA_256_RANDOMIZED);\n+        requestOptions.setEncryptionOptions(encryptionOptions);\n+\n+        TestDoc properties = getItem(UUID.randomUUID().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65db9390cdcd05f771cebb5ec1e27500311598c6"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyNTgxNg==", "bodyText": "Regarding these two changes (this and below) with using Flux.merge - did you do any performance testing?\nCan you please share the results ?\nWe should make sure this doesn't break any existing cosmos APIs. Please run the full CI for this PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13858#discussion_r466825816", "createdAt": "2020-08-07T05:18:05Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -460,39 +460,43 @@ public String getId() {\n         });\n     }\n \n-    private <T> Flux<FeedResponse<T>> applyTransformer(Flux<FeedResponse<Document>> queryDocuments, Function<Document, Document> transformer, Scheduler scheduler, Class<T> classType) {\n+    private <T> Flux<FeedResponse<T>> applyTransformer(Flux<FeedResponse<Document>> queryDocuments, Function<Document, Mono<Document>> transformer, Scheduler scheduler, Class<T> classType) {\n         if (transformer == null) {\n-            return queryDocuments.map(response -> prepareFeedResponse(response, classType));\n+            return queryDocuments.flatMap(response -> prepareFeedResponse(response, classType));\n         } else {\n-            return queryDocuments.publishOn(scheduler).subscribeOn(scheduler).map(response -> prepareFeedResponse(response, classType, transformer));\n+            return queryDocuments.publishOn(scheduler).subscribeOn(scheduler).flatMap(response -> prepareFeedResponse(response, classType, transformer));\n         }\n     }\n \n-    private <T> FeedResponse<T> prepareFeedResponse(FeedResponse<Document> response, Class<T> classType) {\n+    private <T> Mono<FeedResponse<T>> prepareFeedResponse(FeedResponse<Document> response, Class<T> classType) {\n         return prepareFeedResponse(response, classType, null);\n     }\n \n-    private <T> FeedResponse<T> prepareFeedResponse(FeedResponse<Document> response, Class<T> classType, Function<Document, Document> transformer) {\n+    private <T> Mono<FeedResponse<T>> prepareFeedResponse(FeedResponse<Document> response, Class<T> classType, Function<Document, Mono<Document>> transformer) {\n         QueryInfo queryInfo = ModelBridgeInternal.getQueryInfoFromFeedResponse(response);\n         if (queryInfo != null && queryInfo.hasSelectValue()) {\n-            List<T> transformedResults = response.getResults()\n+            List<Mono<T>> transformedResultsAsync = response.getResults()\n                                              .stream()\n                                               .map(d -> d.has(Constants.Properties.VALUE) ?\n-                                                 transform(d.get(Constants.Properties.VALUE), classType) :\n+                                                 Mono.just(transform(d.get(Constants.Properties.VALUE), classType)) :\n                                                  ModelBridgeInternal.toObjectFromJsonSerializable(d, classType, transformer))\n                                              .collect(Collectors.toList());\n \n-            return BridgeInternal.createFeedResponseWithQueryMetrics(transformedResults,\n-                                                                     response.getResponseHeaders(),\n-                                                                     ModelBridgeInternal.queryMetrics(response));\n-\n+            return Flux.merge(transformedResultsAsync).collectList().map(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65db9390cdcd05f771cebb5ec1e27500311598c6"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "180d808b7bc0f1b9b7c8b7a8dc928e2f8324f66c", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/180d808b7bc0f1b9b7c8b7a8dc928e2f8324f66c", "committedDate": "2020-08-10T07:01:24Z", "message": "address code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b74c571136c6003858abf1ffaa7f646db8d71f6a", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b74c571136c6003858abf1ffaa7f646db8d71f6a", "committedDate": "2020-08-10T17:55:47Z", "message": "addressed review comments, fixed code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd7f2b42a5e8a3cfcdd775b7caf97bc85f5a0669", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cd7f2b42a5e8a3cfcdd775b7caf97bc85f5a0669", "committedDate": "2020-08-11T03:57:45Z", "message": "factored out decryption code from container.queryITem"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NzMzNTI5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13858#pullrequestreview-464733529", "createdAt": "2020-08-11T04:04:07Z", "commit": {"oid": "cd7f2b42a5e8a3cfcdd775b7caf97bc85f5a0669"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15196399011a5a2eb566edae46ded5a99b5b2b23", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/15196399011a5a2eb566edae46ded5a99b5b2b23", "committedDate": "2020-08-11T05:03:25Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb3117600d9190b99da2c445cf47a2cca75e4b10", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fb3117600d9190b99da2c445cf47a2cca75e4b10", "committedDate": "2020-08-11T05:15:50Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcd714d2835c40cba37cd473d7e7ac9d38724758", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bcd714d2835c40cba37cd473d7e7ac9d38724758", "committedDate": "2020-08-11T05:22:14Z", "message": "cleanup"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 861, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}