{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNzE3OTk0", "number": 9413, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoyNToyMlrODq9PBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjo0NzowN1rODrTZRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzcwMDU0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/credential/AzureKeyCredential.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoyNToyMlrOF7BtGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDozMTo0MlrOF7B7Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzODIzNA==", "bodyText": "Could we name this method update to be consistent across languages?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9413#discussion_r397438234", "createdAt": "2020-03-24T20:25:22Z", "author": {"login": "maririos"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/credential/AzureKeyCredential.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.credential;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a credential that uses a key authenticate to an Azure Service.\n+ */\n+public class AzureKeyCredential {\n+    private final ClientLogger logger = new ClientLogger(AzureKeyCredential.class);\n+    private String key;\n+\n+    /**\n+     * Creates a credential that authorizes request with the given key.\n+     *\n+     * @param key The key used to authorize requests.\n+     * @throws NullPointerException If {@code key} is {@code null}.\n+     * @throws IllegalArgumentException If {@code key} is an empty string.\n+     */\n+    public AzureKeyCredential(String key) {\n+        Objects.requireNonNull(key);\n+        if (key.isEmpty()) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"'key' cannot be empty.\"));\n+        }\n+\n+        this.key = key;\n+    }\n+\n+    /**\n+     * Retrieves the key associated to this credential.\n+     *\n+     * @return The key being used to authorize requests.\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * Rotates the key associated to this credential.\n+     *\n+     * @param key The new key to associated with this credential.\n+     * @return The updated {@code ApiKeyCredential} object.\n+     * @throws NullPointerException If {@code key} is {@code null}.\n+     * @throws IllegalArgumentException If {@code key} is an empty string.\n+     */\n+    public AzureKeyCredential updateKey(String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b121da47d09b25a8aaafb59094aed79c10b96cc9"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0MTg1NA==", "bodyText": "Renamed to update.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9413#discussion_r397441854", "createdAt": "2020-03-24T20:31:42Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/credential/AzureKeyCredential.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.credential;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a credential that uses a key authenticate to an Azure Service.\n+ */\n+public class AzureKeyCredential {\n+    private final ClientLogger logger = new ClientLogger(AzureKeyCredential.class);\n+    private String key;\n+\n+    /**\n+     * Creates a credential that authorizes request with the given key.\n+     *\n+     * @param key The key used to authorize requests.\n+     * @throws NullPointerException If {@code key} is {@code null}.\n+     * @throws IllegalArgumentException If {@code key} is an empty string.\n+     */\n+    public AzureKeyCredential(String key) {\n+        Objects.requireNonNull(key);\n+        if (key.isEmpty()) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"'key' cannot be empty.\"));\n+        }\n+\n+        this.key = key;\n+    }\n+\n+    /**\n+     * Retrieves the key associated to this credential.\n+     *\n+     * @return The key being used to authorize requests.\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * Rotates the key associated to this credential.\n+     *\n+     * @param key The new key to associated with this credential.\n+     * @return The updated {@code ApiKeyCredential} object.\n+     * @throws NullPointerException If {@code key} is {@code null}.\n+     * @throws IllegalArgumentException If {@code key} is an empty string.\n+     */\n+    public AzureKeyCredential updateKey(String key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzODIzNA=="}, "originalCommit": {"oid": "b121da47d09b25a8aaafb59094aed79c10b96cc9"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mzc1ODMyOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/SearchApiKeyPipelinePolicy.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDo0MTozMVrOF7CQhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTo0MTo0NFrOF7vdQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0NzMwMw==", "bodyText": "Could the policies be private?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9413#discussion_r397447303", "createdAt": "2020-03-24T20:41:31Z", "author": {"login": "maririos"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/SearchApiKeyPipelinePolicy.java", "diffHunk": "@@ -12,31 +13,37 @@\n import java.util.Objects;\n \n /**\n- * Policy that adds the Cognitive Search Service api-key into the request's Authorization header.\n+ * Pipeline policy that uses an {@link AzureKeyCredential} to set the {@code api-key} header which authorizes requests\n+ * sent to the Azure Search service.\n+ *\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the key.\n  */\n public final class SearchApiKeyPipelinePolicy implements HttpPipelinePolicy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "874666292403307f811e3a60ade7465b87b66ea7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1NzExNg==", "bodyText": "Java has a guideline where we're expected to have our pipeline policies in the public API. We allow customers to roll their own pipeline if they wish, so making these inaccessible from the public API would make that more difficult.\n@JonathanGiles to point to the guideline since I'm having trouble finding it. (Or to add it if it is missing)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9413#discussion_r397457116", "createdAt": "2020-03-24T20:59:25Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/SearchApiKeyPipelinePolicy.java", "diffHunk": "@@ -12,31 +13,37 @@\n import java.util.Objects;\n \n /**\n- * Policy that adds the Cognitive Search Service api-key into the request's Authorization header.\n+ * Pipeline policy that uses an {@link AzureKeyCredential} to set the {@code api-key} header which authorizes requests\n+ * sent to the Azure Search service.\n+ *\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the key.\n  */\n public final class SearchApiKeyPipelinePolicy implements HttpPipelinePolicy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0NzMwMw=="}, "originalCommit": {"oid": "874666292403307f811e3a60ade7465b87b66ea7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4Njk0NA==", "bodyText": "Thanks for the clarification Alan!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9413#discussion_r397486944", "createdAt": "2020-03-24T21:58:32Z", "author": {"login": "maririos"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/SearchApiKeyPipelinePolicy.java", "diffHunk": "@@ -12,31 +13,37 @@\n import java.util.Objects;\n \n /**\n- * Policy that adds the Cognitive Search Service api-key into the request's Authorization header.\n+ * Pipeline policy that uses an {@link AzureKeyCredential} to set the {@code api-key} header which authorizes requests\n+ * sent to the Azure Search service.\n+ *\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the key.\n  */\n public final class SearchApiKeyPipelinePolicy implements HttpPipelinePolicy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0NzMwMw=="}, "originalCommit": {"oid": "874666292403307f811e3a60ade7465b87b66ea7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMDg0OQ==", "bodyText": "The wording might be unclear but it's here - \"DO provide a suitable authentication policy that authenticates the HTTP request in the HTTP pipeline when using non-standard credentials. This includes custom connection strings, if supported.\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9413#discussion_r398020849", "createdAt": "2020-03-25T17:04:53Z", "author": {"login": "JonathanGiles"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/SearchApiKeyPipelinePolicy.java", "diffHunk": "@@ -12,31 +13,37 @@\n import java.util.Objects;\n \n /**\n- * Policy that adds the Cognitive Search Service api-key into the request's Authorization header.\n+ * Pipeline policy that uses an {@link AzureKeyCredential} to set the {@code api-key} header which authorizes requests\n+ * sent to the Azure Search service.\n+ *\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the key.\n  */\n public final class SearchApiKeyPipelinePolicy implements HttpPipelinePolicy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0NzMwMw=="}, "originalCommit": {"oid": "874666292403307f811e3a60ade7465b87b66ea7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMzI0MA==", "bodyText": "In this case I would push to move up the shared Azure.Core implementation of a generic auth policy as in the discussion below, so we don't have these types left around as artifacts in libraries that GA before it's available", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9413#discussion_r398023240", "createdAt": "2020-03-25T17:08:14Z", "author": {"login": "schaabs"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/SearchApiKeyPipelinePolicy.java", "diffHunk": "@@ -12,31 +13,37 @@\n import java.util.Objects;\n \n /**\n- * Policy that adds the Cognitive Search Service api-key into the request's Authorization header.\n+ * Pipeline policy that uses an {@link AzureKeyCredential} to set the {@code api-key} header which authorizes requests\n+ * sent to the Azure Search service.\n+ *\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the key.\n  */\n public final class SearchApiKeyPipelinePolicy implements HttpPipelinePolicy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0NzMwMw=="}, "originalCommit": {"oid": "874666292403307f811e3a60ade7465b87b66ea7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4Nzg0Mw==", "bodyText": "If it is okay, I'm going to merge this PR as it keeps hitting merge conflicts due to its scope and file an issue to follow-up on a generic policy.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9413#discussion_r398187843", "createdAt": "2020-03-25T21:41:44Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/SearchApiKeyPipelinePolicy.java", "diffHunk": "@@ -12,31 +13,37 @@\n import java.util.Objects;\n \n /**\n- * Policy that adds the Cognitive Search Service api-key into the request's Authorization header.\n+ * Pipeline policy that uses an {@link AzureKeyCredential} to set the {@code api-key} header which authorizes requests\n+ * sent to the Azure Search service.\n+ *\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the key.\n  */\n public final class SearchApiKeyPipelinePolicy implements HttpPipelinePolicy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0NzMwMw=="}, "originalCommit": {"oid": "874666292403307f811e3a60ade7465b87b66ea7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mzc2MTMzOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/SearchApiKeyPipelinePolicy.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDo0MjoyNlrOF7CScQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzoxMzo0MlrOF7GiVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0Nzc5Mw==", "bodyText": "So this means that every client needs to implement it's own policy, is that correct?\nWondering if we could add a generic policy to Azure Core too", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9413#discussion_r397447793", "createdAt": "2020-03-24T20:42:26Z", "author": {"login": "maririos"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/SearchApiKeyPipelinePolicy.java", "diffHunk": "@@ -12,31 +13,37 @@\n import java.util.Objects;\n \n /**\n- * Policy that adds the Cognitive Search Service api-key into the request's Authorization header.\n+ * Pipeline policy that uses an {@link AzureKeyCredential} to set the {@code api-key} header which authorizes requests\n+ * sent to the Azure Search service.\n+ *\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the key.\n  */\n public final class SearchApiKeyPipelinePolicy implements HttpPipelinePolicy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "874666292403307f811e3a60ade7465b87b66ea7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1MzQwOA==", "bodyText": "I was discussing this with @JonathanGiles and we didn't strongly lean on one design or the other. I left the library specific policies in place given they are in preview and adding this into Azure Core would likely require it being part of the public API which could GA it sooner (Java doesn't have a good friends assembly or internal that .NET leverages).\n@JonathanGiles any concern around making this a generic Azure Core policy that uses the credential and a header string? We do something conceptually similar with the RetryPolicy where we can pass a retry header to look for on the response.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9413#discussion_r397453408", "createdAt": "2020-03-24T20:52:44Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/SearchApiKeyPipelinePolicy.java", "diffHunk": "@@ -12,31 +13,37 @@\n import java.util.Objects;\n \n /**\n- * Policy that adds the Cognitive Search Service api-key into the request's Authorization header.\n+ * Pipeline policy that uses an {@link AzureKeyCredential} to set the {@code api-key} header which authorizes requests\n+ * sent to the Azure Search service.\n+ *\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the key.\n  */\n public final class SearchApiKeyPipelinePolicy implements HttpPipelinePolicy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0Nzc5Mw=="}, "originalCommit": {"oid": "874666292403307f811e3a60ade7465b87b66ea7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4NzU5MQ==", "bodyText": "I left the library specific policies in place given they are in preview\n\nNote that Text Analytics is going to GA in April, so if we could add the policy to Core now, that will be great for TA.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9413#discussion_r397487591", "createdAt": "2020-03-24T21:59:54Z", "author": {"login": "maririos"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/SearchApiKeyPipelinePolicy.java", "diffHunk": "@@ -12,31 +13,37 @@\n import java.util.Objects;\n \n /**\n- * Policy that adds the Cognitive Search Service api-key into the request's Authorization header.\n+ * Pipeline policy that uses an {@link AzureKeyCredential} to set the {@code api-key} header which authorizes requests\n+ * sent to the Azure Search service.\n+ *\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the key.\n  */\n public final class SearchApiKeyPipelinePolicy implements HttpPipelinePolicy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0Nzc5Mw=="}, "originalCommit": {"oid": "874666292403307f811e3a60ade7465b87b66ea7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4OTY1MA==", "bodyText": "Couldn't the library specific policies be internal to the package, or added under implementation? Then you can always update them to use an implementation exposed by core at some point in the future.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9413#discussion_r397489650", "createdAt": "2020-03-24T22:04:21Z", "author": {"login": "schaabs"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/SearchApiKeyPipelinePolicy.java", "diffHunk": "@@ -12,31 +13,37 @@\n import java.util.Objects;\n \n /**\n- * Policy that adds the Cognitive Search Service api-key into the request's Authorization header.\n+ * Pipeline policy that uses an {@link AzureKeyCredential} to set the {@code api-key} header which authorizes requests\n+ * sent to the Azure Search service.\n+ *\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the key.\n  */\n public final class SearchApiKeyPipelinePolicy implements HttpPipelinePolicy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0Nzc5Mw=="}, "originalCommit": {"oid": "874666292403307f811e3a60ade7465b87b66ea7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNzM5Ng==", "bodyText": "Yes, this could be done but goes a bit against the response above around why the policy is in the public API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9413#discussion_r397517396", "createdAt": "2020-03-24T23:13:42Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/SearchApiKeyPipelinePolicy.java", "diffHunk": "@@ -12,31 +13,37 @@\n import java.util.Objects;\n \n /**\n- * Policy that adds the Cognitive Search Service api-key into the request's Authorization header.\n+ * Pipeline policy that uses an {@link AzureKeyCredential} to set the {@code api-key} header which authorizes requests\n+ * sent to the Azure Search service.\n+ *\n+ * <p>\n+ * Requests sent with this pipeline policy are required to use {@code HTTPS}. If the request isn't using {@code HTTPS}\n+ * an exception will be thrown to prevent leaking the key.\n  */\n public final class SearchApiKeyPipelinePolicy implements HttpPipelinePolicy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0Nzc5Mw=="}, "originalCommit": {"oid": "874666292403307f811e3a60ade7465b87b66ea7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzMzMTI3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/credential/AzureKeyCredential.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjo0NzowN1rOF7kdyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzowNzo0NlrOF7lY4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwNzc1Mg==", "bodyText": "Could you use one check of CoreUtil.isNullOrEmpty() here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9413#discussion_r398007752", "createdAt": "2020-03-25T16:47:07Z", "author": {"login": "sima-zhu"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/credential/AzureKeyCredential.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.credential;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a credential that uses a key authenticate to an Azure Service.\n+ */\n+public class AzureKeyCredential {\n+    private final ClientLogger logger = new ClientLogger(AzureKeyCredential.class);\n+    private String key;\n+\n+    /**\n+     * Creates a credential that authorizes request with the given key.\n+     *\n+     * @param key The key used to authorize requests.\n+     * @throws NullPointerException If {@code key} is {@code null}.\n+     * @throws IllegalArgumentException If {@code key} is an empty string.\n+     */\n+    public AzureKeyCredential(String key) {\n+        Objects.requireNonNull(key);\n+        if (key.isEmpty()) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"'key' cannot be empty.\"));\n+        }\n+\n+        this.key = key;\n+    }\n+\n+    /**\n+     * Retrieves the key associated to this credential.\n+     *\n+     * @return The key being used to authorize requests.\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * Rotates the key associated to this credential.\n+     *\n+     * @param key The new key to associated with this credential.\n+     * @return The updated {@code ApiKeyCredential} object.\n+     * @throws NullPointerException If {@code key} is {@code null}.\n+     * @throws IllegalArgumentException If {@code key} is an empty string.\n+     */\n+    public AzureKeyCredential update(String key) {\n+        Objects.requireNonNull(key);\n+        if (key.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "874666292403307f811e3a60ade7465b87b66ea7"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMjg4MA==", "bodyText": "Definitely could but our guidelines state if we expect a non-null parameter and we get null a NullPointerException should be thrown (the Objects.requireNonNull check) and then if we get a value that we don't expect that isn't null throw a IllegalArgumentException (the isEmpty check).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9413#discussion_r398022880", "createdAt": "2020-03-25T17:07:46Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/credential/AzureKeyCredential.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.credential;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a credential that uses a key authenticate to an Azure Service.\n+ */\n+public class AzureKeyCredential {\n+    private final ClientLogger logger = new ClientLogger(AzureKeyCredential.class);\n+    private String key;\n+\n+    /**\n+     * Creates a credential that authorizes request with the given key.\n+     *\n+     * @param key The key used to authorize requests.\n+     * @throws NullPointerException If {@code key} is {@code null}.\n+     * @throws IllegalArgumentException If {@code key} is an empty string.\n+     */\n+    public AzureKeyCredential(String key) {\n+        Objects.requireNonNull(key);\n+        if (key.isEmpty()) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"'key' cannot be empty.\"));\n+        }\n+\n+        this.key = key;\n+    }\n+\n+    /**\n+     * Retrieves the key associated to this credential.\n+     *\n+     * @return The key being used to authorize requests.\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * Rotates the key associated to this credential.\n+     *\n+     * @param key The new key to associated with this credential.\n+     * @return The updated {@code ApiKeyCredential} object.\n+     * @throws NullPointerException If {@code key} is {@code null}.\n+     * @throws IllegalArgumentException If {@code key} is an empty string.\n+     */\n+    public AzureKeyCredential update(String key) {\n+        Objects.requireNonNull(key);\n+        if (key.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwNzc1Mg=="}, "originalCommit": {"oid": "874666292403307f811e3a60ade7465b87b66ea7"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2184, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}