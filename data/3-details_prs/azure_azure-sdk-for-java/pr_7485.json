{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMzg5ODgy", "number": 7485, "title": "blob output stream encryption", "bodyText": "Resolves #5715", "createdAt": "2020-01-15T23:48:29Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485", "merged": true, "mergeCommit": {"oid": "e85d6ccc4708e5211d0cfa7cd73d172ddbabb621"}, "closed": true, "closedAt": "2020-01-22T00:33:20Z", "author": {"login": "gapra-msft"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6uYoAAH2gAyMzYzMzg5ODgyOmYwNzgyNTU2ZmZhMGM1YmE2Zjg0NTRkN2M1N2VkZTA4NWI2YzgxN2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8lEdygFqTM0NjA3OTE5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f0782556ffa0c5ba6f8454d7c57ede085b6c817f", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f0782556ffa0c5ba6f8454d7c57ede085b6c817f", "committedDate": "2020-01-15T23:45:04Z", "message": "Added support for encrypted blob client encryption"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79d76dd3b338efd7a4bae38340faf74ac3d54a7c", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/79d76dd3b338efd7a4bae38340faf74ac3d54a7c", "committedDate": "2020-01-15T23:47:29Z", "message": "Merge branch 'master' into storage/blobOutputStreamEncryption"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c64329be2107b05fe16954d5a127d5f6c0911e0", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8c64329be2107b05fe16954d5a127d5f6c0911e0", "committedDate": "2020-01-15T23:48:52Z", "message": "removed whitespace"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTk3NDYw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#pullrequestreview-343597460", "createdAt": "2020-01-15T23:49:09Z", "commit": {"oid": "79d76dd3b338efd7a4bae38340faf74ac3d54a7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMzo0OTowOVrOFeKEnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMzo0OTowOVrOFeKEnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2NjYyMw==", "bodyText": "TODO : Change java doc", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r367166623", "createdAt": "2020-01-15T23:49:09Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClient.java", "diffHunk": "@@ -56,6 +59,59 @@\n         this.encryptedBlobAsyncClient = encryptedBlobAsyncClient;\n     }\n \n+    /**\n+     * Creates and opens an output stream to write data to the block blob. If the blob already exists on the service, it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79d76dd3b338efd7a4bae38340faf74ac3d54a7c"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTk3NzEy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#pullrequestreview-343597712", "createdAt": "2020-01-15T23:49:57Z", "commit": {"oid": "79d76dd3b338efd7a4bae38340faf74ac3d54a7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMzo0OTo1N1rOFeKFfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMzo0OTo1N1rOFeKFfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2Njg0Ng==", "bodyText": "I had to make this public since the crypto package needs access. I dont see a problem doing this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r367166846", "createdAt": "2020-01-15T23:49:57Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java", "diffHunk": "@@ -40,7 +40,7 @@ static BlobOutputStream appendBlobOutputStream(final AppendBlobAsyncClient clien\n         return new AppendBlobOutputStream(client, appendBlobRequestConditions);\n     }\n \n-    static BlobOutputStream blockBlobOutputStream(final BlockBlobAsyncClient client,\n+    public static BlobOutputStream blockBlobOutputStream(final BlobAsyncClient client,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79d76dd3b338efd7a4bae38340faf74ac3d54a7c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNjAwMjYx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#pullrequestreview-343600261", "createdAt": "2020-01-15T23:57:49Z", "commit": {"oid": "8c64329be2107b05fe16954d5a127d5f6c0911e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMzo1Nzo0OVrOFeKODw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMzo1Nzo0OVrOFeKODw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2OTAzOQ==", "bodyText": "should I rename this to blobOutputStream or is that confusing?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r367169039", "createdAt": "2020-01-15T23:57:49Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java", "diffHunk": "@@ -40,7 +40,7 @@ static BlobOutputStream appendBlobOutputStream(final AppendBlobAsyncClient clien\n         return new AppendBlobOutputStream(client, appendBlobRequestConditions);\n     }\n \n-    static BlobOutputStream blockBlobOutputStream(final BlockBlobAsyncClient client,\n+    public static BlobOutputStream blockBlobOutputStream(final BlobAsyncClient client,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c64329be2107b05fe16954d5a127d5f6c0911e0"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0058326ed350b424b0e298c6466bf2abfbf6f084", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0058326ed350b424b0e298c6466bf2abfbf6f084", "committedDate": "2020-01-16T00:19:19Z", "message": "Removed unused imports, added javadoc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32d5dfb4ca3997898c68e9ec057dae054d6e6a60", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/32d5dfb4ca3997898c68e9ec057dae054d6e6a60", "committedDate": "2020-01-16T00:09:28Z", "message": "Removed unused imports, added javadoc"}, "afterCommit": {"oid": "0058326ed350b424b0e298c6466bf2abfbf6f084", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0058326ed350b424b0e298c6466bf2abfbf6f084", "committedDate": "2020-01-16T00:19:19Z", "message": "Removed unused imports, added javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe15583adbe109c08a01d35f833a4f71ed7a58cb", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fe15583adbe109c08a01d35f833a4f71ed7a58cb", "committedDate": "2020-01-16T00:48:18Z", "message": "removed unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MTU4ODAx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#pullrequestreview-344158801", "createdAt": "2020-01-16T19:26:27Z", "commit": {"oid": "fe15583adbe109c08a01d35f833a4f71ed7a58cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToyNjoyN1rOFek45g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToyNjoyN1rOFek45g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNTk5MA==", "bodyText": "I don't think the second sentence is relevant here since we accept the overwrite flag on this overload.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r367605990", "createdAt": "2020-01-16T19:26:27Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClient.java", "diffHunk": "@@ -56,6 +58,59 @@\n         this.encryptedBlobAsyncClient = encryptedBlobAsyncClient;\n     }\n \n+    /**\n+     * Creates and opens an output stream to write data to the block blob. If the blob already exists on the service, it\n+     * will be overwritten.\n+     *\n+     * @return A {@link BlobOutputStream} object used to write data to the blob.\n+     * @throws BlobStorageException If a storage service error occurred.\n+     */\n+    public BlobOutputStream getBlobOutputStream() {\n+        return getBlobOutputStream(false);\n+    }\n+\n+    /**\n+     * Creates and opens an output stream to write data to the block blob. If the blob already exists on the service, it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe15583adbe109c08a01d35f833a4f71ed7a58cb"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MTYzODg5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#pullrequestreview-344163889", "createdAt": "2020-01-16T19:34:58Z", "commit": {"oid": "fe15583adbe109c08a01d35f833a4f71ed7a58cb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22e61679de288f0164630901db2ca6d4505a9fa7", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/22e61679de288f0164630901db2ca6d4505a9fa7", "committedDate": "2020-01-16T20:48:02Z", "message": "Updated javadoc for blob output stream"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzIzOTA1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#pullrequestreview-344723905", "createdAt": "2020-01-17T17:15:53Z", "commit": {"oid": "22e61679de288f0164630901db2ca6d4505a9fa7"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzoxNTo1NFrOFe_wFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzoyMTo1NFrOFe_5sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0NjEwMQ==", "bodyText": "This case is interesting given that writing to the blob may be delayed a non-determinant amount of time, this differs from the other cases of overwrite where their write operation should happen relatively soon compared to the validation check.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r368046101", "createdAt": "2020-01-17T17:15:54Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClient.java", "diffHunk": "@@ -56,6 +58,57 @@\n         this.encryptedBlobAsyncClient = encryptedBlobAsyncClient;\n     }\n \n+    /**\n+     * Creates and opens an output stream to write data to the block blob.\n+     *\n+     * @return A {@link BlobOutputStream} object used to write data to the blob.\n+     * @throws BlobStorageException If a storage service error occurred.\n+     */\n+    public BlobOutputStream getBlobOutputStream() {\n+        return getBlobOutputStream(false);\n+    }\n+\n+    /**\n+     * Creates and opens an output stream to write data to the block blob.\n+     *\n+     * @return A {@link BlobOutputStream} object used to write data to the blob.\n+     * @param overwrite Whether or not to overwrite, should data exist on the blob.\n+     * @throws BlobStorageException If a storage service error occurred.\n+     */\n+    public BlobOutputStream getBlobOutputStream(boolean overwrite) {\n+        BlobRequestConditions requestConditions = null;\n+        if (!overwrite) {\n+            if (exists()) {\n+                throw logger.logExceptionAsError(new IllegalArgumentException(Constants.BLOB_ALREADY_EXISTS));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e61679de288f0164630901db2ca6d4505a9fa7"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0NzI4NQ==", "bodyText": "Could make this static as it access no instance level properties, on the flip side could remove the parameter and access all the values in the instance.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r368047285", "createdAt": "2020-01-17T17:18:50Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlockBlobClient.java", "diffHunk": "@@ -137,10 +138,28 @@ public BlobOutputStream getBlobOutputStream(BlobRequestConditions requestConditi\n     public BlobOutputStream getBlobOutputStream(ParallelTransferOptions parallelTransferOptions,\n         BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier,\n         BlobRequestConditions requestConditions) {\n-        return BlobOutputStream.blockBlobOutputStream(client, parallelTransferOptions, headers, metadata, tier,\n+\n+        BlobAsyncClient blobClient = prepareBuilder(client).buildAsyncClient();\n+\n+        return BlobOutputStream.blockBlobOutputStream(blobClient, parallelTransferOptions, headers, metadata, tier,\n             requestConditions);\n     }\n \n+    private BlobClientBuilder prepareBuilder(BlobAsyncClientBase client) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e61679de288f0164630901db2ca6d4505a9fa7"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0Nzk0NA==", "bodyText": "Leave the name as-is, this stream is meant to solely interact with Block Blobs, don't want to conflate the overarching Blob term to mean Block Blob (though that is the primary use case).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r368047944", "createdAt": "2020-01-17T17:20:29Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java", "diffHunk": "@@ -40,7 +40,7 @@ static BlobOutputStream appendBlobOutputStream(final AppendBlobAsyncClient clien\n         return new AppendBlobOutputStream(client, appendBlobRequestConditions);\n     }\n \n-    static BlobOutputStream blockBlobOutputStream(final BlockBlobAsyncClient client,\n+    public static BlobOutputStream blockBlobOutputStream(final BlobAsyncClient client,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2OTAzOQ=="}, "originalCommit": {"oid": "8c64329be2107b05fe16954d5a127d5f6c0911e0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0ODU2MQ==", "bodyText": "I don't have a strong issue with it, we may want to split this and the other implementations into their own class files and make them public as well. I don't see a overwhelmingly strong reason why a customer couldn't pass a client in themselves to create the stream vs needing to get it from the client.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r368048561", "createdAt": "2020-01-17T17:21:54Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java", "diffHunk": "@@ -40,7 +40,7 @@ static BlobOutputStream appendBlobOutputStream(final AppendBlobAsyncClient clien\n         return new AppendBlobOutputStream(client, appendBlobRequestConditions);\n     }\n \n-    static BlobOutputStream blockBlobOutputStream(final BlockBlobAsyncClient client,\n+    public static BlobOutputStream blockBlobOutputStream(final BlobAsyncClient client,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2Njg0Ng=="}, "originalCommit": {"oid": "79d76dd3b338efd7a4bae38340faf74ac3d54a7c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdccef0b8183dc5c6926c5e9f40037548cba1ccd", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fdccef0b8183dc5c6926c5e9f40037548cba1ccd", "committedDate": "2020-01-17T18:25:17Z", "message": "PR review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MDc5MTkz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#pullrequestreview-346079193", "createdAt": "2020-01-21T18:01:40Z", "commit": {"oid": "fdccef0b8183dc5c6926c5e9f40037548cba1ccd"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxODowMTo0MFrOFgDfPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxODowMTo0MFrOFgDfPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1NTkwMQ==", "bodyText": "Agreed, failing fast is the better option here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r369155901", "createdAt": "2020-01-21T18:01:40Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClient.java", "diffHunk": "@@ -56,6 +58,57 @@\n         this.encryptedBlobAsyncClient = encryptedBlobAsyncClient;\n     }\n \n+    /**\n+     * Creates and opens an output stream to write data to the block blob.\n+     *\n+     * @return A {@link BlobOutputStream} object used to write data to the blob.\n+     * @throws BlobStorageException If a storage service error occurred.\n+     */\n+    public BlobOutputStream getBlobOutputStream() {\n+        return getBlobOutputStream(false);\n+    }\n+\n+    /**\n+     * Creates and opens an output stream to write data to the block blob.\n+     *\n+     * @return A {@link BlobOutputStream} object used to write data to the blob.\n+     * @param overwrite Whether or not to overwrite, should data exist on the blob.\n+     * @throws BlobStorageException If a storage service error occurred.\n+     */\n+    public BlobOutputStream getBlobOutputStream(boolean overwrite) {\n+        BlobRequestConditions requestConditions = null;\n+        if (!overwrite) {\n+            if (exists()) {\n+                throw logger.logExceptionAsError(new IllegalArgumentException(Constants.BLOB_ALREADY_EXISTS));\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0NjEwMQ=="}, "originalCommit": {"oid": "22e61679de288f0164630901db2ca6d4505a9fa7"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 395, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}