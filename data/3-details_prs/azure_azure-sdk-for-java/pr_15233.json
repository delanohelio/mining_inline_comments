{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NTgwNTkw", "number": 15233, "title": "Porting region fail over changes from V2", "bodyText": "Porting below two PRs from V2\nAzure/azure-cosmosdb-java#351\nAzure/azure-cosmosdb-java#360\nNote : It does not have request timeout fix as in V2 Azure/azure-cosmosdb-java#360 , because currently we don't set request time out on http calls in V4 , open issue #13696", "createdAt": "2020-09-15T21:08:30Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15233", "merged": true, "mergeCommit": {"oid": "a0b306c2641eb2d878701bba098aa7d38d2930dd"}, "closed": true, "closedAt": "2020-09-16T09:00:16Z", "author": {"login": "simplynaveen20"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJOUrwgH2gAyNDg3NTgwNTkwOmVhZDRjMDlhNDc4NWU5YjU5NmRiMTgzYzM4MzJmMjM0OTI3Y2U1YmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJXr0fAH2gAyNDg3NTgwNTkwOjcyODlmYTM5OGU3YzA1ODFiNzZjZWM1NjBmZmNlYWY4OGM0NzdmMDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ead4c09a4785e9b596db183c3832f234927ce5bf", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ead4c09a4785e9b596db183c3832f234927ce5bf", "committedDate": "2020-09-15T21:03:49Z", "message": "Porting region failover changes from V2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5099704f747a696f9a7feffa4db42a9e6457c251", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5099704f747a696f9a7feffa4db42a9e6457c251", "committedDate": "2020-09-16T02:25:26Z", "message": "Merge branch 'latest-master' into users/nakumar/regionFailoverIssue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5787b44e2dbd1de567c1fda7feecf305ece0118d", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5787b44e2dbd1de567c1fda7feecf305ece0118d", "committedDate": "2020-09-16T02:26:46Z", "message": "adding address resolution test case for diagnostics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79a5a97d35ff631ca7be32a220943948a8073971", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/79a5a97d35ff631ca7be32a220943948a8073971", "committedDate": "2020-09-16T02:41:42Z", "message": "removing warning from test casesuppressing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MjM5MTA0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15233#pullrequestreview-489239104", "createdAt": "2020-09-16T02:58:48Z", "commit": {"oid": "79a5a97d35ff631ca7be32a220943948a8073971"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMjo1ODo0OVrOHSePpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzowMzozOFrOHSeUlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMTk0Mg==", "bodyText": "you have repeated code here and above method and also seems similar to code block in RxGatewayStoreModel.\nfor future work consider refactor the common code if that is possible.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15233#discussion_r489131942", "createdAt": "2020-09-16T02:58:49Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java", "diffHunk": "@@ -493,19 +525,52 @@ public void dispose() {\n         Mono<RxDocumentServiceResponse> dsrObs = HttpClientUtils.parseResponseAsync(httpResponseMono, httpRequest);\n \n         return dsrObs.map(\n-                dsr -> {\n-                    MetadataDiagnosticsContext metadataDiagnosticsContext = BridgeInternal.getMetaDataDiagnosticContext(request.requestContext.cosmosDiagnostics);\n-                    if (metadataDiagnosticsContext != null) {\n-                        Instant addressCallEndTime = Instant.now();\n-                        MetadataDiagnostics metaDataDiagnostic = new MetadataDiagnostics(addressCallStartTime,\n-                            addressCallEndTime,\n-                            MetadataType.MASTER_ADDRESS_LOOK_UP);\n-                        metadataDiagnosticsContext.addMetaDataDiagnostic(metaDataDiagnostic);\n-                    }\n+            dsr -> {\n+                MetadataDiagnosticsContext metadataDiagnosticsContext =\n+                    BridgeInternal.getMetaDataDiagnosticContext(request.requestContext.cosmosDiagnostics);\n+                if (metadataDiagnosticsContext != null) {\n+                    Instant addressCallEndTime = Instant.now();\n+                    MetadataDiagnostics metaDataDiagnostic = new MetadataDiagnostics(addressCallStartTime,\n+                        addressCallEndTime,\n+                        MetadataType.MASTER_ADDRESS_LOOK_UP);\n+                    metadataDiagnosticsContext.addMetaDataDiagnostic(metaDataDiagnostic);\n+                }\n \n-                    logAddressResolutionEnd(request, identifier);\n-                    return dsr.getQueryResponse(Address.class);\n-                });\n+                logAddressResolutionEnd(request, identifier, null);\n+                return dsr.getQueryResponse(Address.class);\n+            }).onErrorResume(throwable -> {\n+            Throwable unwrappedException = reactor.core.Exceptions.unwrap(throwable);\n+            logAddressResolutionEnd(request, identifier, unwrappedException.toString());\n+            if (!(unwrappedException instanceof Exception)) {\n+                // fatal error\n+                logger.error(\"Unexpected failure {}\", unwrappedException.getMessage(), unwrappedException);\n+                return Mono.error(unwrappedException);\n+            }\n+\n+            Exception exception = (Exception) unwrappedException;\n+            CosmosException dce;\n+            if (!(exception instanceof CosmosException)) {\n+                // wrap in CosmosException\n+                logger.error(\"Network failure\", exception);\n+                dce = BridgeInternal.createCosmosException(0, exception);\n+                BridgeInternal.setRequestHeaders(dce, request.getHeaders());\n+            } else {\n+                dce = (CosmosException) exception;\n+            }\n+\n+            if (WebExceptionUtility.isNetworkFailure(dce)) {\n+                BridgeInternal.setSubStatusCode(dce, HttpConstants.SubStatusCodes.GATEWAY_ENDPOINT_UNAVAILABLE);\n+            }\n+\n+            if (request.requestContext.cosmosDiagnostics != null) {\n+                BridgeInternal.recordGatewayResponse(request.requestContext.cosmosDiagnostics, request, null,\n+                    dce);\n+                BridgeInternal.setCosmosDiagnostics(dce,\n+                    request.requestContext.cosmosDiagnostics);\n+            }\n+\n+            return Mono.error(dce);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79a5a97d35ff631ca7be32a220943948a8073971"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMjkzOQ==", "bodyText": "I suspect this failure/assertion doesn't have any effect as this is happening on a different thread which is not joined.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15233#discussion_r489132939", "createdAt": "2020-09-16T03:02:32Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java", "diffHunk": "@@ -477,6 +487,80 @@ public void serializationOnVariousScenarios() {\n         assertThat(diagnostics).contains(\"\\\"userAgent\\\":\\\"\" + Utils.getUserAgent() + \"\\\"\");\n     }\n \n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void addressResolutionStatistics() {\n+        CosmosClient client = null;\n+        try {\n+            client = new CosmosClientBuilder()\n+                .endpoint(TestConfigurations.HOST)\n+                .key(TestConfigurations.MASTER_KEY)\n+                .contentResponseOnWriteEnabled(true)\n+                .directMode()\n+                .buildClient();\n+            CosmosContainer container =\n+                client.getDatabase(cosmosAsyncContainer.getDatabase().getId()).getContainer(cosmosAsyncContainer.getId());\n+            InternalObjectNode internalObjectNode = getInternalObjectNode();\n+            CosmosItemResponse<InternalObjectNode> writeResourceResponse = container.createItem(internalObjectNode);\n+            //Success address resolution client side statistics\n+            assertThat(writeResourceResponse.getDiagnostics().toString()).contains(\"addressResolutionStatistics\");\n+            assertThat(writeResourceResponse.getDiagnostics().toString()).contains(\"\\\"inflightRequest\\\":false\");\n+            assertThat(writeResourceResponse.getDiagnostics().toString()).doesNotContain(\"endTime=\\\"null\\\"\");\n+            assertThat(writeResourceResponse.getDiagnostics().toString()).contains(\"\\\"errorMessage\\\":null\");\n+            assertThat(writeResourceResponse.getDiagnostics().toString()).doesNotContain(\"\\\"errorMessage\\\":\\\"io.netty\" +\n+                \".channel.AbstractChannel$AnnotatedConnectException: Connection refused: no further information\");\n+\n+            client.close();\n+            client = new CosmosClientBuilder()\n+                .endpoint(TestConfigurations.HOST)\n+                .key(TestConfigurations.MASTER_KEY)\n+                .contentResponseOnWriteEnabled(true)\n+                .directMode()\n+                .buildClient();\n+            container =\n+                client.getDatabase(cosmosAsyncContainer.getDatabase().getId()).getContainer(cosmosAsyncContainer.getId());\n+            AsyncDocumentClient asyncDocumentClient = client.asyncClient().getContextClient();\n+            GlobalAddressResolver addressResolver = (GlobalAddressResolver) FieldUtils.readField(asyncDocumentClient,\n+                \"addressResolver\", true);\n+\n+            @SuppressWarnings(\"rawtypes\")\n+            Map addressCacheByEndpoint = (Map) FieldUtils.readField(addressResolver,\n+                \"addressCacheByEndpoint\",\n+                true);\n+            Object endpointCache = addressCacheByEndpoint.values().toArray()[0];\n+            GatewayAddressCache addressCache = (GatewayAddressCache) FieldUtils.readField(endpointCache, \"addressCache\", true);\n+\n+            HttpClient httpClient = httpClient(true);\n+            FieldUtils.writeField(addressCache, \"httpClient\", httpClient, true);\n+            new Thread(() -> {\n+                try {\n+                    Thread.sleep(5000);\n+                    HttpClient httpClient1 = httpClient(false);\n+                    FieldUtils.writeField(addressCache, \"httpClient\", httpClient1, true);\n+                } catch (Exception e) {\n+                    fail(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79a5a97d35ff631ca7be32a220943948a8073971"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMzIwNA==", "bodyText": "you don't need to catch exception. and fail. the test will fail regardless of this. if the exception is thrown.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15233#discussion_r489133204", "createdAt": "2020-09-16T03:03:38Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java", "diffHunk": "@@ -477,6 +487,80 @@ public void serializationOnVariousScenarios() {\n         assertThat(diagnostics).contains(\"\\\"userAgent\\\":\\\"\" + Utils.getUserAgent() + \"\\\"\");\n     }\n \n+    @Test(groups = {\"emulator\"}, timeOut = TIMEOUT)\n+    public void addressResolutionStatistics() {\n+        CosmosClient client = null;\n+        try {\n+            client = new CosmosClientBuilder()\n+                .endpoint(TestConfigurations.HOST)\n+                .key(TestConfigurations.MASTER_KEY)\n+                .contentResponseOnWriteEnabled(true)\n+                .directMode()\n+                .buildClient();\n+            CosmosContainer container =\n+                client.getDatabase(cosmosAsyncContainer.getDatabase().getId()).getContainer(cosmosAsyncContainer.getId());\n+            InternalObjectNode internalObjectNode = getInternalObjectNode();\n+            CosmosItemResponse<InternalObjectNode> writeResourceResponse = container.createItem(internalObjectNode);\n+            //Success address resolution client side statistics\n+            assertThat(writeResourceResponse.getDiagnostics().toString()).contains(\"addressResolutionStatistics\");\n+            assertThat(writeResourceResponse.getDiagnostics().toString()).contains(\"\\\"inflightRequest\\\":false\");\n+            assertThat(writeResourceResponse.getDiagnostics().toString()).doesNotContain(\"endTime=\\\"null\\\"\");\n+            assertThat(writeResourceResponse.getDiagnostics().toString()).contains(\"\\\"errorMessage\\\":null\");\n+            assertThat(writeResourceResponse.getDiagnostics().toString()).doesNotContain(\"\\\"errorMessage\\\":\\\"io.netty\" +\n+                \".channel.AbstractChannel$AnnotatedConnectException: Connection refused: no further information\");\n+\n+            client.close();\n+            client = new CosmosClientBuilder()\n+                .endpoint(TestConfigurations.HOST)\n+                .key(TestConfigurations.MASTER_KEY)\n+                .contentResponseOnWriteEnabled(true)\n+                .directMode()\n+                .buildClient();\n+            container =\n+                client.getDatabase(cosmosAsyncContainer.getDatabase().getId()).getContainer(cosmosAsyncContainer.getId());\n+            AsyncDocumentClient asyncDocumentClient = client.asyncClient().getContextClient();\n+            GlobalAddressResolver addressResolver = (GlobalAddressResolver) FieldUtils.readField(asyncDocumentClient,\n+                \"addressResolver\", true);\n+\n+            @SuppressWarnings(\"rawtypes\")\n+            Map addressCacheByEndpoint = (Map) FieldUtils.readField(addressResolver,\n+                \"addressCacheByEndpoint\",\n+                true);\n+            Object endpointCache = addressCacheByEndpoint.values().toArray()[0];\n+            GatewayAddressCache addressCache = (GatewayAddressCache) FieldUtils.readField(endpointCache, \"addressCache\", true);\n+\n+            HttpClient httpClient = httpClient(true);\n+            FieldUtils.writeField(addressCache, \"httpClient\", httpClient, true);\n+            new Thread(() -> {\n+                try {\n+                    Thread.sleep(5000);\n+                    HttpClient httpClient1 = httpClient(false);\n+                    FieldUtils.writeField(addressCache, \"httpClient\", httpClient1, true);\n+                } catch (Exception e) {\n+                    fail(e.getMessage());\n+                }\n+            }).start();\n+            PartitionKey partitionKey = new PartitionKey(internalObjectNode.get(\"mypk\"));\n+            CosmosItemResponse<InternalObjectNode> readResourceResponse =\n+                container.readItem(internalObjectNode.getId(), partitionKey, new CosmosItemRequestOptions(),\n+                    InternalObjectNode.class);\n+\n+            //Partial success address resolution client side statistics\n+            assertThat(readResourceResponse.getDiagnostics().toString()).contains(\"addressResolutionStatistics\");\n+            assertThat(readResourceResponse.getDiagnostics().toString()).contains(\"\\\"inflightRequest\\\":false\");\n+            assertThat(readResourceResponse.getDiagnostics().toString()).doesNotContain(\"endTime=\\\"null\\\"\");\n+            assertThat(readResourceResponse.getDiagnostics().toString()).contains(\"\\\"errorMessage\\\":null\");\n+            assertThat(readResourceResponse.getDiagnostics().toString()).contains(\"\\\"errorMessage\\\":\\\"io.netty\" +\n+                \".channel.AbstractChannel$AnnotatedConnectException: Connection refused: no further information\");\n+        } catch (Exception ex) {\n+            fail(\"This test should not throw exception\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79a5a97d35ff631ca7be32a220943948a8073971"}, "originalPosition": 114}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0676dded700b5fc4ca5c7410eb9d750be9625f9", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d0676dded700b5fc4ca5c7410eb9d750be9625f9", "committedDate": "2020-09-16T03:36:08Z", "message": "adding extra exception logging for fail test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0ffb0a518e136d5c20e24fd7f9e09b17415b4ff", "author": {"user": {"login": "simplynaveen20", "name": "Naveen Singh"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d0ffb0a518e136d5c20e24fd7f9e09b17415b4ff", "committedDate": "2020-09-16T05:02:22Z", "message": "fixing test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3269c7b86c24c7b0583e5243f0aaa94c07b2a082", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3269c7b86c24c7b0583e5243f0aaa94c07b2a082", "committedDate": "2020-09-16T07:00:53Z", "message": "Fixed address resolution test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7289fa398e7c0581b76cec560ffceaf88c477f00", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7289fa398e7c0581b76cec560ffceaf88c477f00", "committedDate": "2020-09-16T07:58:14Z", "message": "Fixed after test method in CosmosDiagnosticsTests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3334, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}