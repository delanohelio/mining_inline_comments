{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNTU2NTI2", "number": 14443, "title": "Digital Twin APIs Design", "bodyText": "", "createdAt": "2020-08-25T23:24:15Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443", "merged": true, "mergeCommit": {"oid": "1c9bc953f646f75d41dc1d5d4e714bb057283476"}, "closed": true, "closedAt": "2020-08-27T22:16:13Z", "author": {"login": "bikamani"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCfsr6gH2gAyNDczNTU2NTI2OmFlYzUyZTliMDFiMjk0OTJiMWMwNTFjNjc2Mjg1ODc4YWVjNmQ2ZTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDHxSrgH2gAyNDczNTU2NTI2OmZkYzY0MDJiY2E0YjlhNmRhZmZiNDhjMTBlOWE1ZGU5ZDJmNjA4ZjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aec52e9b01b29492b1c051c676285878aec6d6e9", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/aec52e9b01b29492b1c051c676285878aec6d6e9", "committedDate": "2020-08-25T23:20:57Z", "message": "dt crud apis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2606fd0152ee75f7a1833e60ffd47baf32cfdadb", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2606fd0152ee75f7a1833e60ffd47baf32cfdadb", "committedDate": "2020-08-27T01:17:55Z", "message": "more updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2OTAzODI0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#pullrequestreview-476903824", "createdAt": "2020-08-27T16:46:35Z", "commit": {"oid": "2606fd0152ee75f7a1833e60ffd47baf32cfdadb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjo0NjozNVrOHIYzTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjo0NjozNVrOHIYzTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1NzAwNQ==", "bodyText": "Note: Every sync api with response needs to have Context as I learned from Srikanta", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478557005", "createdAt": "2020-08-27T16:46:35Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,358 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param modelClass The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwinWithResponse(String digitalTwinId, Class<T> modelClass)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param modelClass The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Class<T> modelClass)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId, RequestOptions options)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param options The optional settings for this request\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations, RequestOptions options)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param modelClass The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> updateDigitalTwinWithResponse(String digitalTwinId, String digitalTwinUpdateOperations, Class<T> modelClass)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param modelClass The model class to convert the response to.\n+ * @param options The optional settings for this request\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> updateDigitalTwinWithResponse(String digitalTwinId, String digitalTwinUpdateOperations, RequestOptions options, Class<T> modelClass)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String> updateDigitalTwinWithResponse(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param options The optional settings for this request\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String> updateDigitalTwinWithResponse(String digitalTwinId, String digitalTwinUpdateOperations, RequestOptions options)\n+```\n+\n+</details>\n+\n+<details><summary><b>Sync APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public String getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param context Additional context that is passed through the Http pipeline during the service call.\n+ * @return A Http response containing application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Response<String> getDigitalTwinWithResponse(String digitalTwinId, Context context)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2606fd0152ee75f7a1833e60ffd47baf32cfdadb"}, "originalPosition": 209}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2OTAyNDk3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#pullrequestreview-476902497", "createdAt": "2020-08-27T16:45:02Z", "commit": {"oid": "2606fd0152ee75f7a1833e60ffd47baf32cfdadb"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjo0NTowMlrOHIYvXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjo1MDoyOFrOHIY8Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1NTk5OA==", "bodyText": "let's use \"Id\" across the PR", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478555998", "createdAt": "2020-08-27T16:45:02Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,358 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param modelClass The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwinWithResponse(String digitalTwinId, Class<T> modelClass)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param modelClass The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Class<T> modelClass)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2606fd0152ee75f7a1833e60ffd47baf32cfdadb"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1NjgyNw==", "bodyText": "Shouldn't this be <T> Mono<Response<T>> ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478556827", "createdAt": "2020-08-27T16:46:18Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,358 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param modelClass The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwinWithResponse(String digitalTwinId, Class<T> modelClass)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2606fd0152ee75f7a1833e60ffd47baf32cfdadb"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1NzYyOQ==", "bodyText": "I think we need another one with\npublic T Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478557629", "createdAt": "2020-08-27T16:47:36Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,358 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2606fd0152ee75f7a1833e60ffd47baf32cfdadb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1ODI4OQ==", "bodyText": "modelClass is a good name, but it's may be confused with actual ADT models,\nwe can use something like klazz/clazz (standard) or classType or something", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478558289", "createdAt": "2020-08-27T16:48:42Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,358 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param modelClass The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwinWithResponse(String digitalTwinId, Class<T> modelClass)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2606fd0152ee75f7a1833e60ffd47baf32cfdadb"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1ODg3MQ==", "bodyText": "Same here, we need another one with\npublic T Mono<T> createDigitalTwin(String digitalTwinId, String digitalTwin, Class<T> classType)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478558871", "createdAt": "2020-08-27T16:49:42Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,358 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param modelClass The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwinWithResponse(String digitalTwinId, Class<T> modelClass)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2606fd0152ee75f7a1833e60ffd47baf32cfdadb"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1OTMyNg==", "bodyText": "same goes for all non-response signatures ...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478559326", "createdAt": "2020-08-27T16:50:28Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,358 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param modelClass The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwinWithResponse(String digitalTwinId, Class<T> modelClass)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1ODg3MQ=="}, "originalCommit": {"oid": "2606fd0152ee75f7a1833e60ffd47baf32cfdadb"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2OTQ0ODE3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#pullrequestreview-476944817", "createdAt": "2020-08-27T17:41:59Z", "commit": {"oid": "2606fd0152ee75f7a1833e60ffd47baf32cfdadb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "441bb2e0f72103c59d9300d568c5df03f07dc654", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/441bb2e0f72103c59d9300d568c5df03f07dc654", "committedDate": "2020-08-27T19:09:44Z", "message": "add mono<t> versions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b7178acfd9cd1938d04cb3769320400e8b24746", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b7178acfd9cd1938d04cb3769320400e8b24746", "committedDate": "2020-08-27T19:10:47Z", "message": "modelType ==> classType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9f55f98a358d3ab11bb33078db57fa18eea8f7d", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b9f55f98a358d3ab11bb33078db57fa18eea8f7d", "committedDate": "2020-08-27T19:39:56Z", "message": "adding generic apis"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MDM2MTQz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#pullrequestreview-477036143", "createdAt": "2020-08-27T19:56:33Z", "commit": {"oid": "b9f55f98a358d3ab11bb33078db57fa18eea8f7d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOTo1NjozM1rOHIfI2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOTo1NjozM1rOHIfI2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2MDgyNw==", "bodyText": "This will need to be:\npublic <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> classType)\nWhen we are working with generic objects, we would expect the user to supply an object, not a serialized json string.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478660827", "createdAt": "2020-08-27T19:56:33Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,446 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, String digitalTwin, Class<T> classType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9f55f98a358d3ab11bb33078db57fa18eea8f7d"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MDM3MzYx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#pullrequestreview-477037361", "createdAt": "2020-08-27T19:58:22Z", "commit": {"oid": "b9f55f98a358d3ab11bb33078db57fa18eea8f7d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOTo1ODoyMlrOHIfMMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOTo1ODoyMlrOHIfMMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2MTY4MA==", "bodyText": "Same here as well, Object digitalTwin", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478661680", "createdAt": "2020-08-27T19:58:22Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,446 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, String digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Class<T> classType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9f55f98a358d3ab11bb33078db57fa18eea8f7d"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MDM3NzM3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#pullrequestreview-477037737", "createdAt": "2020-08-27T19:58:55Z", "commit": {"oid": "b9f55f98a358d3ab11bb33078db57fa18eea8f7d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOTo1ODo1NVrOHIfNVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOTo1ODo1NVrOHIfNVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2MTk3NQ==", "bodyText": "only max overload needs to have a withResponse.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478661975", "createdAt": "2020-08-27T19:58:55Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,446 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, String digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9f55f98a358d3ab11bb33078db57fa18eea8f7d"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MDQ5NDQ3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#pullrequestreview-477049447", "createdAt": "2020-08-27T20:16:58Z", "commit": {"oid": "b9f55f98a358d3ab11bb33078db57fa18eea8f7d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDoxNjo1OFrOHIfxbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDoxOToxM1rOHIf1gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MTIxNQ==", "bodyText": "ah, you are right, I missed it in the first iteration", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478671215", "createdAt": "2020-08-27T20:16:58Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,446 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, String digitalTwin, Class<T> classType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2MDgyNw=="}, "originalCommit": {"oid": "b9f55f98a358d3ab11bb33078db57fa18eea8f7d"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MTkwMg==", "bodyText": "<T> Mono<Response<T>", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478671902", "createdAt": "2020-08-27T20:18:29Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,446 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, String digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId, RequestOptions options)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations, Class<T> classType)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> updateDigitalTwinWithResponse(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<T> updateDigitalTwinWithResponse(String digitalTwinId, String digitalTwinUpdateOperations, Class<T> classType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9f55f98a358d3ab11bb33078db57fa18eea8f7d"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MjE2OQ==", "bodyText": "per our discussions, this will be List<Object> digitalTwinUpdateOperations", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478672169", "createdAt": "2020-08-27T20:19:03Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,446 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, String digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId, RequestOptions options)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations, Class<T> classType)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> updateDigitalTwinWithResponse(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<T> updateDigitalTwinWithResponse(String digitalTwinId, String digitalTwinUpdateOperations, Class<T> classType)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param options The optional settings for this request\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations, RequestOptions options)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param options The optional settings for this request\n+ * @param classType The model class to convert the response to.\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations, RequestOptions options, Class<T> classType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9f55f98a358d3ab11bb33078db57fa18eea8f7d"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MjI1Nw==", "bodyText": "and everywhere else", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478672257", "createdAt": "2020-08-27T20:19:13Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,446 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, String digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId, RequestOptions options)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations, Class<T> classType)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> updateDigitalTwinWithResponse(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<T> updateDigitalTwinWithResponse(String digitalTwinId, String digitalTwinUpdateOperations, Class<T> classType)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param options The optional settings for this request\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations, RequestOptions options)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param options The optional settings for this request\n+ * @param classType The model class to convert the response to.\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations, RequestOptions options, Class<T> classType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MjE2OQ=="}, "originalCommit": {"oid": "b9f55f98a358d3ab11bb33078db57fa18eea8f7d"}, "originalPosition": 203}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27c7022cfb925216b09d95300be92370a491e7f0", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/27c7022cfb925216b09d95300be92370a491e7f0", "committedDate": "2020-08-27T21:26:15Z", "message": "list of objects for patch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MDk3Mzkx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#pullrequestreview-477097391", "createdAt": "2020-08-27T21:29:16Z", "commit": {"oid": "27c7022cfb925216b09d95300be92370a491e7f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMToyOToxNlrOHIh62w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMToyOToxNlrOHIh62w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwNjM5NQ==", "bodyText": "don't need this API, the one below is sufficient.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478706395", "createdAt": "2020-08-27T21:29:16Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,427 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27c7022cfb925216b09d95300be92370a491e7f0"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MDk5MTcw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#pullrequestreview-477099170", "createdAt": "2020-08-27T21:32:19Z", "commit": {"oid": "27c7022cfb925216b09d95300be92370a491e7f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTozMjoxOVrOHIiAPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTozMjoxOVrOHIiAPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwNzc3Mw==", "bodyText": "You'll probably need to update this to Mono<Response<Void>>, else it'll complain about using raw unparameterized form of Response<T>; but you can make that change when you actually implement the API -> you'll get a warning on intellij.\nI'll leave it to you to update it as you see fit.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478707773", "createdAt": "2020-08-27T21:32:19Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,427 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId, RequestOptions options)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27c7022cfb925216b09d95300be92370a491e7f0"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MDk5NTMw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#pullrequestreview-477099530", "createdAt": "2020-08-27T21:32:59Z", "commit": {"oid": "27c7022cfb925216b09d95300be92370a491e7f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTozMjo1OVrOHIiBTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTozMjo1OVrOHIiBTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwODA0Nw==", "bodyText": "String digitalTwinUpdateOperations will need to be List<Object>.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478708047", "createdAt": "2020-08-27T21:32:59Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,427 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId, RequestOptions options)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27c7022cfb925216b09d95300be92370a491e7f0"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTAwNTc3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#pullrequestreview-477100577", "createdAt": "2020-08-27T21:34:57Z", "commit": {"oid": "27c7022cfb925216b09d95300be92370a491e7f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTozNDo1N1rOHIiElw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTozNDo1N1rOHIiElw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwODg4Nw==", "bodyText": "Shouldn't this withResponse be for the max overload only -> the one with RequestOptions?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478708887", "createdAt": "2020-08-27T21:34:57Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,427 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId, RequestOptions options)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations, Class<T> classType)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27c7022cfb925216b09d95300be92370a491e7f0"}, "originalPosition": 160}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTAxMTgx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#pullrequestreview-477101181", "createdAt": "2020-08-27T21:36:08Z", "commit": {"oid": "27c7022cfb925216b09d95300be92370a491e7f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTozNjowOFrOHIiGfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTozNjowOFrOHIiGfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwOTM3NQ==", "bodyText": "Same, this isn't required; withResponse is required with max overload only", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478709375", "createdAt": "2020-08-27T21:36:08Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,427 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId, RequestOptions options)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations, Class<T> classType)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, Class<T> classType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27c7022cfb925216b09d95300be92370a491e7f0"}, "originalPosition": 171}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTA5ODA5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#pullrequestreview-477109809", "createdAt": "2020-08-27T21:52:02Z", "commit": {"oid": "27c7022cfb925216b09d95300be92370a491e7f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTo1MjowM1rOHIihsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTo1MjowM1rOHIihsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxNjMzOA==", "bodyText": "todo: check with guidelines", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478716338", "createdAt": "2020-08-27T21:52:03Z", "author": {"login": "bikamani"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,427 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId, RequestOptions options)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations, Class<T> classType)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, Class<T> classType)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param options The optional settings for this request\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param options The optional settings for this request\n+ * @param classType The model class to convert the response to.\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options, Class<T> classType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27c7022cfb925216b09d95300be92370a491e7f0"}, "originalPosition": 194}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdc6402bca4b9a6daffb48c10e9a5de9d2f608f3", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fdc6402bca4b9a6daffb48c10e9a5de9d2f608f3", "committedDate": "2020-08-27T22:02:11Z", "message": "remove response apis which does not have max overload"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 258, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}