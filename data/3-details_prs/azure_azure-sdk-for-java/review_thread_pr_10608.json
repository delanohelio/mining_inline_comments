{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwOTc4NTQy", "number": 10608, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoxMDowNlrOD30eKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyMjozN1rOD4F2hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODU3OTYxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/implementation/PayloadSizeGate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoxMDowNlrOGOS4Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoxMDowNlrOGOS4Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0MjU1OQ==", "bodyText": "Can you add that the other copy is when we write it to the pool? Just so we don't forget what we mean later?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10608#discussion_r417642559", "createdAt": "2020-04-29T22:10:06Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/implementation/PayloadSizeGate.java", "diffHunk": "@@ -38,12 +38,17 @@\n      * @return Buffered data or incoming data depending on threshold condition.\n      */\n     Flux<ByteBuffer> write(ByteBuffer buf) {\n+        /* TODO (gapra): Investigate if there is way to avoid copying the data twice since this may result in lower perf. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e430c1b6bc56d8451639eeffe33ef5dc63ae5f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTQxOTQzOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/implementation/PayloadSizeGate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyMDo1NlrOGOuP_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoxMDozNlrOGOwWMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5MTAwNw==", "bodyText": "Ups. My bad.\nI think there isn't double copy now as copying was removed buffer pool - hence regression.\nFor future. Maybe it would be good to extract copying part to separate component that's inserted into Flux transform early in the process - so that it's more explicit (as we apparently quite depend on that).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10608#discussion_r418091007", "createdAt": "2020-04-30T15:20:56Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/implementation/PayloadSizeGate.java", "diffHunk": "@@ -38,12 +38,18 @@\n      * @return Buffered data or incoming data depending on threshold condition.\n      */\n     Flux<ByteBuffer> write(ByteBuffer buf) {\n+        /* TODO (gapra): Investigate if there is way to avoid copying the data twice since this may result in lower\n+            perf. The other copy is when we write the buffer to the pool */\n+        /* Deep copy the buffer. This is required to ensure integrity of data. */\n+        ByteBuffer cachedBuffer = ByteBuffer.allocate(buf.remaining()).put(buf);\n+        cachedBuffer.flip();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f2b45ca45673ad017fd771b10569083ba3857d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEyNTM2MA==", "bodyText": "#10639", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10608#discussion_r418125360", "createdAt": "2020-04-30T16:10:36Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/implementation/PayloadSizeGate.java", "diffHunk": "@@ -38,12 +38,18 @@\n      * @return Buffered data or incoming data depending on threshold condition.\n      */\n     Flux<ByteBuffer> write(ByteBuffer buf) {\n+        /* TODO (gapra): Investigate if there is way to avoid copying the data twice since this may result in lower\n+            perf. The other copy is when we write the buffer to the pool */\n+        /* Deep copy the buffer. This is required to ensure integrity of data. */\n+        ByteBuffer cachedBuffer = ByteBuffer.allocate(buf.remaining()).put(buf);\n+        cachedBuffer.flip();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5MTAwNw=="}, "originalCommit": {"oid": "95f2b45ca45673ad017fd771b10569083ba3857d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTQyNzI2OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/BlobAPITest.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyMjozN1rOGOuU2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo1Nzo1MlrOGOv1QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5MjI0OA==", "bodyText": "Thanks for the test. There wasn't anything that could catch that regression.\nI'm not sure if adding larger data sizes would bring value in this test.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10608#discussion_r418092248", "createdAt": "2020-04-30T15:22:37Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/BlobAPITest.groovy", "diffHunk": "@@ -80,6 +80,31 @@ class BlobAPITest extends APISpec {\n         stream.toByteArray() == randomData\n     }\n \n+\n+    /* Tests an issue found where buffered upload would not deep copy buffers while determining what upload path to take. */\n+    @Unroll\n+    def \"Upload input stream single upload\" () {\n+        setup:\n+        def randomData = getRandomByteArray(20 * Constants.KB)\n+        def input = new ByteArrayInputStream(randomData)\n+\n+        when:\n+        bc.upload(input, 20 * Constants.KB, true)\n+\n+        then:\n+        def stream = new ByteArrayOutputStream()\n+        bc.downloadWithResponse(stream, null, null, null, false, null, null)\n+        stream.toByteArray() == randomData\n+\n+        where:\n+        size                || _\n+        1 * Constants.KB    || _  /* Less than copyToOutputStream buffer size, Less than maxSingleUploadSize */\n+        8 * Constants.KB    || _  /* Equal to copyToOutputStream buffer size, Less than maxSingleUploadSize */\n+        20 * Constants.KB   || _  /* Greater than copyToOutputStream buffer size, Less than maxSingleUploadSize */\n+    }\n+\n+    /* TODO (gapra): Add more tests to test large data sizes. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f2b45ca45673ad017fd771b10569083ba3857d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExNjkyOQ==", "bodyText": "Just a future thought to improve the condition of the upload tests :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10608#discussion_r418116929", "createdAt": "2020-04-30T15:57:52Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/BlobAPITest.groovy", "diffHunk": "@@ -80,6 +80,31 @@ class BlobAPITest extends APISpec {\n         stream.toByteArray() == randomData\n     }\n \n+\n+    /* Tests an issue found where buffered upload would not deep copy buffers while determining what upload path to take. */\n+    @Unroll\n+    def \"Upload input stream single upload\" () {\n+        setup:\n+        def randomData = getRandomByteArray(20 * Constants.KB)\n+        def input = new ByteArrayInputStream(randomData)\n+\n+        when:\n+        bc.upload(input, 20 * Constants.KB, true)\n+\n+        then:\n+        def stream = new ByteArrayOutputStream()\n+        bc.downloadWithResponse(stream, null, null, null, false, null, null)\n+        stream.toByteArray() == randomData\n+\n+        where:\n+        size                || _\n+        1 * Constants.KB    || _  /* Less than copyToOutputStream buffer size, Less than maxSingleUploadSize */\n+        8 * Constants.KB    || _  /* Equal to copyToOutputStream buffer size, Less than maxSingleUploadSize */\n+        20 * Constants.KB   || _  /* Greater than copyToOutputStream buffer size, Less than maxSingleUploadSize */\n+    }\n+\n+    /* TODO (gapra): Add more tests to test large data sizes. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5MjI0OA=="}, "originalCommit": {"oid": "95f2b45ca45673ad017fd771b10569083ba3857d"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4521, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}