{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NzU3MDM2", "number": 11677, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTowMzo0N1rOEB4fAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMjozOToyN1rOECWKfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDA5NDczOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTowMzo0N1rOGeAE8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoyMDozOFrOGeCkug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExMTcyOA==", "bodyText": "Alternatively we can wrap the original Flux inside a Flux.defer and have\nfinal long[] currentTotalLength = new long[1];\ninside the defer which is some what more idiomatic I think.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11677#discussion_r434111728", "createdAt": "2020-06-02T19:03:47Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java", "diffHunk": "@@ -243,6 +243,18 @@ public static OffsetDateTime parseDate(String dateString) {\n                     throw LOGGER.logExceptionAsError(new RuntimeException(\"I/O errors occurs. Error details: \"\n                         + e.getMessage()));\n                 }\n+            })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f66bb4e972fefde9f5fd860bf63289d87604725"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExMzgwMg==", "bodyText": "It will also match what we do in RestProxy. https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/rest/RestProxy.java#L146", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11677#discussion_r434113802", "createdAt": "2020-06-02T19:07:19Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java", "diffHunk": "@@ -243,6 +243,18 @@ public static OffsetDateTime parseDate(String dateString) {\n                     throw LOGGER.logExceptionAsError(new RuntimeException(\"I/O errors occurs. Error details: \"\n                         + e.getMessage()));\n                 }\n+            })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExMTcyOA=="}, "originalCommit": {"oid": "4f66bb4e972fefde9f5fd860bf63289d87604725"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1MjYzNA==", "bodyText": "Good call. I was just working with what was already there, but I can clean that up.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11677#discussion_r434152634", "createdAt": "2020-06-02T20:20:38Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java", "diffHunk": "@@ -243,6 +243,18 @@ public static OffsetDateTime parseDate(String dateString) {\n                     throw LOGGER.logExceptionAsError(new RuntimeException(\"I/O errors occurs. Error details: \"\n                         + e.getMessage()));\n                 }\n+            })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExMTcyOA=="}, "originalCommit": {"oid": "4f66bb4e972fefde9f5fd860bf63289d87604725"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDEyNjcwOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlockBlobClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToxMjoxN1rOGeAYOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxOTo0OFrOGeCjCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExNjY2NQ==", "bodyText": "Why do we mark Integer.MAX_VALUE? If we call reset after this the read position of the stream will be Integer.MAX_VALUE.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11677#discussion_r434116665", "createdAt": "2020-06-02T19:12:17Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlockBlobClient.java", "diffHunk": "@@ -306,6 +313,8 @@ public void stageBlock(String base64BlockId, InputStream data, long length) {\n     public Response<Void> stageBlockWithResponse(String base64BlockId, InputStream data, long length, byte[] contentMd5,\n         String leaseId, Duration timeout, Context context) {\n         Objects.requireNonNull(data);\n+        data.mark(Integer.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f66bb4e972fefde9f5fd860bf63289d87604725"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1MjIwMw==", "bodyText": "The value passed to mark is the expiry limit. It says after reading N bytes invalidate the mark and throw on a call to reset. I don't think think we ever want our mark to expire. The mark is set at the position of the stream when mark is called, so the intention here is that we'll be resetting the same position that the stream was at when it was handed to us.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11677#discussion_r434152203", "createdAt": "2020-06-02T20:19:48Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlockBlobClient.java", "diffHunk": "@@ -306,6 +313,8 @@ public void stageBlock(String base64BlockId, InputStream data, long length) {\n     public Response<Void> stageBlockWithResponse(String base64BlockId, InputStream data, long length, byte[] contentMd5,\n         String leaseId, Duration timeout, Context context) {\n         Objects.requireNonNull(data);\n+        data.mark(Integer.MAX_VALUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExNjY2NQ=="}, "originalCommit": {"oid": "4f66bb4e972fefde9f5fd860bf63289d87604725"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDE1NTY3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToxOTo0MFrOGeAppQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozOTo1NlrOGeE6eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyMTEyNQ==", "bodyText": "Not all input streams support reset(). Some may throw IOException as specified in javadoc. Also, if the input stream does support resetting the position, this will reset to the last marked position that may be different from where the user wanted us to read the stream from.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11677#discussion_r434121125", "createdAt": "2020-06-02T19:19:40Z", "author": {"login": "srnagar"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java", "diffHunk": "@@ -243,6 +243,18 @@ public static OffsetDateTime parseDate(String dateString) {\n                     throw LOGGER.logExceptionAsError(new RuntimeException(\"I/O errors occurs. Error details: \"\n                         + e.getMessage()));\n                 }\n+            })\n+            .doFirst(() -> {\n+                /*\n+                If the request needs to be retried, the flux will be resubscribed to. The stream and counter must be\n+                reset in order to correctly return the same data again.\n+                 */\n+                currentTotalLength[0] = 0;\n+                try {\n+                    data.reset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f66bb4e972fefde9f5fd860bf63289d87604725"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0MTc0MA==", "bodyText": "Yes.\nThe most common InputStream in the upload case, FileInputStream (FIS), does not support reset. Users might have to wrap FIS in BufferedInputStream (BIS) and give it as input to upload API. But BIS comes with extra allocation cost as worse as the size of the file.\nFew options I could think of are:\n\n\nIf we choose reset path, then make it clear in the java-doc that it is required to have \"reset to the start\" support for retry. Since FileInputStream is the most common and does not support reset out of the box, having a code sample/snippet showing how to create InputStream from FileChannel may help. FileChannel backing File does support setting read position.\n\n\nanother option is to take a Supplier<InputStream> which means, each subscription will invoke Supplier to get a new InputStream (hence read-position 0 for each instance), But this is a API change and needs to discuss and get approved, there are questions like the pattern for disposing of the obtained IS.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11677#discussion_r434141740", "createdAt": "2020-06-02T19:58:58Z", "author": {"login": "anuchandy"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java", "diffHunk": "@@ -243,6 +243,18 @@ public static OffsetDateTime parseDate(String dateString) {\n                     throw LOGGER.logExceptionAsError(new RuntimeException(\"I/O errors occurs. Error details: \"\n                         + e.getMessage()));\n                 }\n+            })\n+            .doFirst(() -> {\n+                /*\n+                If the request needs to be retried, the flux will be resubscribed to. The stream and counter must be\n+                reset in order to correctly return the same data again.\n+                 */\n+                currentTotalLength[0] = 0;\n+                try {\n+                    data.reset();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyMTEyNQ=="}, "originalCommit": {"oid": "4f66bb4e972fefde9f5fd860bf63289d87604725"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1NzAyMg==", "bodyText": "Yes, I have added docs to all the apis which call this method indicating that the stream must be markable and giving guidance if it is not. I suggested opening a BlobOutputStream in those cases. I can also add a suggestion to consider wrapping it in a BufferedStream. I didn't add those javadocs to this method because it's in implementation, so those don't get generated anyway, but I can add that for our own internal purposes.\nBefore calling this method, the calling method should be calling mark to ensure it always resets to the same place, although I'm thinking I should actually move that call to be within this method.\nI'm not terribly concerned about FIS in this case because I think if customers are uploading file data they are going to be calling uploadFromFile.\nIt's also worth noting that requiring markability is consistent with the expectations we make on the fluxes passed in to the async equivalent--we require that those be replayable", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11677#discussion_r434157022", "createdAt": "2020-06-02T20:29:34Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java", "diffHunk": "@@ -243,6 +243,18 @@ public static OffsetDateTime parseDate(String dateString) {\n                     throw LOGGER.logExceptionAsError(new RuntimeException(\"I/O errors occurs. Error details: \"\n                         + e.getMessage()));\n                 }\n+            })\n+            .doFirst(() -> {\n+                /*\n+                If the request needs to be retried, the flux will be resubscribed to. The stream and counter must be\n+                reset in order to correctly return the same data again.\n+                 */\n+                currentTotalLength[0] = 0;\n+                try {\n+                    data.reset();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyMTEyNQ=="}, "originalCommit": {"oid": "4f66bb4e972fefde9f5fd860bf63289d87604725"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2OTU2OQ==", "bodyText": "Don't the async operations support non-replayable publishers? This javadoc says that the flux doesn't have to be replayable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11677#discussion_r434169569", "createdAt": "2020-06-02T20:54:26Z", "author": {"login": "srnagar"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java", "diffHunk": "@@ -243,6 +243,18 @@ public static OffsetDateTime parseDate(String dateString) {\n                     throw LOGGER.logExceptionAsError(new RuntimeException(\"I/O errors occurs. Error details: \"\n                         + e.getMessage()));\n                 }\n+            })\n+            .doFirst(() -> {\n+                /*\n+                If the request needs to be retried, the flux will be resubscribed to. The stream and counter must be\n+                reset in order to correctly return the same data again.\n+                 */\n+                currentTotalLength[0] = 0;\n+                try {\n+                    data.reset();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyMTEyNQ=="}, "originalCommit": {"oid": "4f66bb4e972fefde9f5fd860bf63289d87604725"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MDk3MA==", "bodyText": "Those are on the BlobClient, which does support non-replayable publishers for both async and sync. The analogues I'm referring to are on BlockBlobAsyncClient. e.g. stage block", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11677#discussion_r434190970", "createdAt": "2020-06-02T21:39:56Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java", "diffHunk": "@@ -243,6 +243,18 @@ public static OffsetDateTime parseDate(String dateString) {\n                     throw LOGGER.logExceptionAsError(new RuntimeException(\"I/O errors occurs. Error details: \"\n                         + e.getMessage()));\n                 }\n+            })\n+            .doFirst(() -> {\n+                /*\n+                If the request needs to be retried, the flux will be resubscribed to. The stream and counter must be\n+                reset in order to correctly return the same data again.\n+                 */\n+                currentTotalLength[0] = 0;\n+                try {\n+                    data.reset();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyMTEyNQ=="}, "originalCommit": {"oid": "4f66bb4e972fefde9f5fd860bf63289d87604725"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODk1NzQxOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/AppendBlobClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMjozOToyN1rOGev9kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMjozOToyN1rOGev9kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg5NjI3Mw==", "bodyText": "Could we enforce the mark supported by calling?\nhttps://docs.oracle.com/javase/7/docs/api/java/io/InputStream.html#markSupported()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11677#discussion_r434896273", "createdAt": "2020-06-03T22:39:27Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/AppendBlobClient.java", "diffHunk": "@@ -156,7 +156,8 @@ public AppendBlobItem create(boolean overwrite) {\n      *\n      * {@codesnippet com.azure.storage.blob.specialized.AppendBlobClient.appendBlock#InputStream-long}\n      *\n-     * @param data The data to write to the blob.\n+     * @param data The data to write to the blob. The data must be markable. This is in order to support retries. If", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d5287dc682597227ad8e0b162e0470e95ca5dd2"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4057, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}