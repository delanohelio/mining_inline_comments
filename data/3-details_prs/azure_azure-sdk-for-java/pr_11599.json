{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1Mzc4NzY4", "number": 11599, "title": "JSON Serializer Streaming Interfaces", "bodyText": "Introduced in this PR is streaming interfaces for handling JSON. Instead of the normal databind serialization which requires reading and writing entire byte streams this works with a tree structure representing the JSON.", "createdAt": "2020-05-29T23:52:05Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599", "merged": true, "mergeCommit": {"oid": "ab3b88256848107ec2700f765c48b27bef4e6e05"}, "closed": true, "closedAt": "2020-06-23T19:08:37Z", "author": {"login": "alzimmermsft"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmLXqEAH2gAyNDI1Mzc4NzY4OmFjZGQ4M2IwOTcwZGNhOTE5ZmQwOTFiYTBhNjk5ZjA1YjdlZjhmNjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuKJICgFqTQzNjA2NjcyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "acdd83b0970dca919fd091ba0a699f05b7ef8f66", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/acdd83b0970dca919fd091ba0a699f05b7ef8f66", "committedDate": "2020-05-29T23:50:00Z", "message": "Prototype of streaming interface for JSON serializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6a6b6d339e659fe7a12463588417bdce8b53486", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f6a6b6d339e659fe7a12463588417bdce8b53486", "committedDate": "2020-06-01T20:18:50Z", "message": "Added Javadocs and tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyOTU3ODM0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#pullrequestreview-422957834", "createdAt": "2020-06-02T18:39:28Z", "commit": {"oid": "f6a6b6d339e659fe7a12463588417bdce8b53486"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODozOToyOFrOGd_RCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODo1Mzo1M1rOGd_vXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5ODQ0Mw==", "bodyText": "thoughts on INSTANCE public final static property of type GsonJsonNull?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r434098443", "createdAt": "2020-06-02T18:39:28Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonNull.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonNull;\n+\n+import java.util.Objects;\n+\n+/**\n+ * GSON specific implementation of {@link JsonNull}.\n+ */\n+public final class GsonJsonNull implements JsonNull {\n+    private final com.google.gson.JsonNull jsonNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a6b6d339e659fe7a12463588417bdce8b53486"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5ODcwMA==", "bodyText": "if we can have an INSTANCE property, do we need this \"public\" ctr ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r434098700", "createdAt": "2020-06-02T18:39:59Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonNull.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonNull;\n+\n+import java.util.Objects;\n+\n+/**\n+ * GSON specific implementation of {@link JsonNull}.\n+ */\n+public final class GsonJsonNull implements JsonNull {\n+    private final com.google.gson.JsonNull jsonNull;\n+\n+    /**\n+     * Constructs a {@link JsonNull} backed by GSON {@link com.google.gson.JsonNull#INSTANCE}\n+     */\n+    public GsonJsonNull() {\n+        this.jsonNull = com.google.gson.JsonNull.INSTANCE;\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonNull} backed by the passed GSON {@link com.google.gson.JsonNull}.\n+     *\n+     * @param jsonNull The backing GSON {@link com.google.gson.JsonNull}.\n+     */\n+    public GsonJsonNull(com.google.gson.JsonNull jsonNull) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a6b6d339e659fe7a12463588417bdce8b53486"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwMjk1Mw==", "bodyText": "We default to StandardCharsets.UTF_8, wondering whether we should take charset as input param in case  the over the wire bytes are in a different charset https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r434102953", "createdAt": "2020-06-02T18:48:00Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java", "diffHunk": "@@ -29,8 +31,28 @@\n         return gson.fromJson(CoreUtils.bomAwareToString(input, null), clazz);\n     }\n \n+    @Override\n+    public <T> T deserializeTree(JsonNode jsonNode, Class<T> clazz) {\n+        return gson.fromJson(JsonNodeUtils.toGsonElement(jsonNode), clazz);\n+    }\n+\n     @Override\n     public byte[] serialize(Object value) {\n         return gson.toJson(value).getBytes(StandardCharsets.UTF_8);\n     }\n+\n+    @Override\n+    public byte[] serializeTree(JsonNode jsonNode) {\n+        return gson.toJson(JsonNodeUtils.toGsonElement(jsonNode)).getBytes(StandardCharsets.UTF_8);\n+    }\n+\n+    @Override\n+    public JsonNode toTree(byte[] input) {\n+        return JsonNodeUtils.fromGsonElement(new JsonParser().parse(new String(input, StandardCharsets.UTF_8)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a6b6d339e659fe7a12463588417bdce8b53486"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwNDMyNA==", "bodyText": "wondering which one is a more descriptive name for this \"core\" contract -  JsonValue or JsonPrimitive", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r434104324", "createdAt": "2020-06-02T18:50:35Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonValue.java", "diffHunk": "@@ -0,0 +1,164 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonValue;\n+import com.google.gson.JsonPrimitive;\n+\n+import java.util.Objects;\n+\n+/**\n+ * GSON specific implementation of {@link JsonValue}.\n+ */\n+public final class GsonJsonValue implements JsonValue {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a6b6d339e659fe7a12463588417bdce8b53486"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwNjIwNw==", "bodyText": "I wish there is a good place to have these convertor util methods so that it's more discoverable. Not sure, may be as static in GsonJsonSerializer type, just a thought.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r434106207", "createdAt": "2020-06-02T18:53:53Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/JsonNodeUtils.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonNode;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * Helper methods for converting between Azure Core and GSON types.\n+ */\n+final class JsonNodeUtils {\n+\n+    /**\n+     * Converts an Azure Core {@link JsonNode} into a GSON {@link JsonElement}.\n+     *\n+     * @param jsonNode The Azure Core {@link JsonNode}.\n+     * @return The corresponding GSON {@link JsonElement}.\n+     * @throws IllegalArgumentException If the {@link JsonNode} cannot be converted to a {@link JsonElement}.\n+     */\n+    public static JsonElement toGsonElement(JsonNode jsonNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a6b6d339e659fe7a12463588417bdce8b53486"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6df9fcbe72124f64ea3c965b1f1ff7ea5392d7d3", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6df9fcbe72124f64ea3c965b1f1ff7ea5392d7d3", "committedDate": "2020-06-02T22:07:41Z", "message": "Merge branch 'master' into AzCore_JSONStreamingInterface"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjkxNDU2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#pullrequestreview-424691456", "createdAt": "2020-06-04T17:54:04Z", "commit": {"oid": "f6a6b6d339e659fe7a12463588417bdce8b53486"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODozNDowOVrOGfS1uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowMzoyOVrOGfT_Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2NzcwNw==", "bodyText": "Not sure if these overridden methods will inherit JavaDoc automatically. Safe to add @inheritdoc explicitly.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435467707", "createdAt": "2020-06-04T18:34:09Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonNode;\n+import com.azure.core.util.serializer.JsonObject;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+/**\n+ * GSON specific implementation of {@link JsonObject}.\n+ */\n+public final class GsonJsonObject implements JsonObject {\n+    private final com.google.gson.JsonObject jsonObject;\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by an empty GSON {@link com.google.gson.JsonObject}.\n+     */\n+    public GsonJsonObject() {\n+        this.jsonObject = new com.google.gson.JsonObject();\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by the passed GSON {@link com.google.gson.JsonObject}.\n+     *\n+     * @param jsonObject The backing GSON {@link com.google.gson.JsonObject}.\n+     */\n+    public GsonJsonObject(com.google.gson.JsonObject jsonObject) {\n+        this.jsonObject = jsonObject;\n+    }\n+\n+    com.google.gson.JsonObject getJsonObject() {\n+        return jsonObject;\n+    }\n+\n+    @Override\n+    public Stream<Map.Entry<String, JsonNode>> fields() {\n+        return jsonObject.entrySet().stream().map(entry ->\n+            new AbstractMap.SimpleEntry<>(entry.getKey(), JsonNodeUtils.fromGsonElement(entry.getValue())));\n+    }\n+\n+    @Override\n+    public Stream<String> fieldNames() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a6b6d339e659fe7a12463588417bdce8b53486"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2OTY1Mg==", "bodyText": "JsonPrimitive is more descriptive", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435469652", "createdAt": "2020-06-04T18:36:35Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonValue.java", "diffHunk": "@@ -0,0 +1,164 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonValue;\n+import com.google.gson.JsonPrimitive;\n+\n+import java.util.Objects;\n+\n+/**\n+ * GSON specific implementation of {@link JsonValue}.\n+ */\n+public final class GsonJsonValue implements JsonValue {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwNDMyNA=="}, "originalCommit": {"oid": "f6a6b6d339e659fe7a12463588417bdce8b53486"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3MjQwOQ==", "bodyText": "These exceptions should be logged before throwing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435472409", "createdAt": "2020-06-04T18:40:22Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/JsonNodeUtils.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonNode;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * Helper methods for converting between Azure Core and GSON types.\n+ */\n+final class JsonNodeUtils {\n+\n+    /**\n+     * Converts an Azure Core {@link JsonNode} into a GSON {@link JsonElement}.\n+     *\n+     * @param jsonNode The Azure Core {@link JsonNode}.\n+     * @return The corresponding GSON {@link JsonElement}.\n+     * @throws IllegalArgumentException If the {@link JsonNode} cannot be converted to a {@link JsonElement}.\n+     */\n+    public static JsonElement toGsonElement(JsonNode jsonNode) {\n+        if (jsonNode.isArray()) {\n+            if (jsonNode instanceof GsonJsonArray) {\n+                return ((GsonJsonArray) jsonNode).getJsonArray();\n+            }\n+\n+            throw new IllegalArgumentException(\"JsonNode is an array but isn't GsonJsonArray.\");\n+        } else if (jsonNode.isNull()) {\n+            if (jsonNode instanceof GsonJsonNull) {\n+                return ((GsonJsonNull) jsonNode).getJsonNull();\n+            }\n+\n+            throw new IllegalArgumentException(\"JsonNode is a null but isn't GsonJsonNull.\");\n+        } else if (jsonNode.isObject()) {\n+            if (jsonNode instanceof GsonJsonObject) {\n+                return ((GsonJsonObject) jsonNode).getJsonObject();\n+            }\n+\n+            throw new IllegalArgumentException(\"JsonNode is an array but isn't GsonJsonObject.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a6b6d339e659fe7a12463588417bdce8b53486"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3Mzk4OA==", "bodyText": "Add some tests to include UTF-8 chars.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435473988", "createdAt": "2020-06-04T18:42:13Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-serializer-json-gson/src/test/java/com/azure/core/serializer/json/gson/JsonNodeUtilsTests.java", "diffHunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonNode;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.Mockito;\n+\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Tests {@link JsonNodeUtils}.\n+ */\n+public class JsonNodeUtilsTests {\n+    @AfterEach\n+    public void cleanupInlineMocks() {\n+        Mockito.framework().clearInlineMocks();\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"toGsonElementSupplier\")\n+    public void toGsonElement(JsonNode jsonNode, JsonElement expected) {\n+        assertEquals(expected, JsonNodeUtils.toGsonElement(jsonNode));\n+    }\n+\n+    private static Stream<Arguments> toGsonElementSupplier() {\n+        JsonArray jsonArray = new JsonArray();\n+        JsonNull jsonNull = JsonNull.INSTANCE;\n+        JsonObject jsonObject = new JsonObject();\n+        JsonPrimitive booleanNode = new JsonPrimitive(true);\n+        JsonPrimitive doubleNode = new JsonPrimitive(42D);\n+        JsonPrimitive floatNode = new JsonPrimitive(42F);\n+        JsonPrimitive intNode = new JsonPrimitive(42);\n+        JsonPrimitive longNode = new JsonPrimitive(42L);\n+        JsonPrimitive shortNode = new JsonPrimitive((short) 42);\n+        JsonPrimitive textNode = new JsonPrimitive(\"42\");\n+\n+        return Stream.of(\n+            Arguments.of(new GsonJsonArray(jsonArray), jsonArray),\n+            Arguments.of(new GsonJsonArray(), jsonArray),\n+            Arguments.of(new GsonJsonNull(jsonNull), jsonNull),\n+            Arguments.of(new GsonJsonNull(), jsonNull),\n+            Arguments.of(new GsonJsonObject(jsonObject), jsonObject),\n+            Arguments.of(new GsonJsonObject(), jsonObject),\n+            Arguments.of(new GsonJsonValue(booleanNode), booleanNode),\n+            Arguments.of(new GsonJsonValue(true), booleanNode),\n+            Arguments.of(new GsonJsonValue(doubleNode), doubleNode),\n+            Arguments.of(new GsonJsonValue(42D), doubleNode),\n+            Arguments.of(new GsonJsonValue(floatNode), floatNode),\n+            Arguments.of(new GsonJsonValue(42F), floatNode),\n+            Arguments.of(new GsonJsonValue(intNode), intNode),\n+            Arguments.of(new GsonJsonValue(42), intNode),\n+            Arguments.of(new GsonJsonValue(longNode), longNode),\n+            Arguments.of(new GsonJsonValue(42L), longNode),\n+            Arguments.of(new GsonJsonValue(shortNode), shortNode),\n+            Arguments.of(new GsonJsonValue((short) 42), shortNode),\n+            Arguments.of(new GsonJsonValue(textNode), textNode),\n+            Arguments.of(new GsonJsonValue(\"42\"), textNode)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a6b6d339e659fe7a12463588417bdce8b53486"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NDQyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return {@link Iterator} for all elements in the array.\n          \n          \n            \n                 * @return {@link Stream} for all elements in the array.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435484420", "createdAt": "2020-06-04T18:59:40Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonArray.java", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import java.util.Iterator;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Interface that represents a JSON array.\n+ */\n+public interface JsonArray extends JsonNode {\n+    @Override\n+    default boolean isArray() {\n+        return true;\n+    }\n+\n+    /**\n+     * Adds a {@link JsonNode} to the end of this array.\n+     *\n+     * @param jsonNode The {@link JsonNode} to add to the array.\n+     * @return The updated {@link JsonArray} object.\n+     */\n+    JsonArray add(JsonNode jsonNode);\n+\n+    /**\n+     * Clears all values in the array.\n+     *\n+     * @return The updated {@link JsonArray} object.\n+     */\n+    JsonArray clear();\n+\n+    /**\n+     * @return {@link Iterator} for all elements in the array.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a6b6d339e659fe7a12463588417bdce8b53486"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NTEzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return {@link Iterator} for all field names in the object.\n          \n          \n            \n                 * @return {@link Stream} for all field names in the object.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435485133", "createdAt": "2020-06-04T19:00:55Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonObject.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Interface that represents a JSON object.\n+ */\n+public interface JsonObject extends JsonNode {\n+    @Override\n+    default boolean isObject() {\n+        return true;\n+    }\n+\n+    /**\n+     * @return {@link Iterator} for all fields in the object.\n+     */\n+    Stream<Map.Entry<String, JsonNode>> fields();\n+\n+    /**\n+     * @return {@link Iterator} for all field names in the object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a6b6d339e659fe7a12463588417bdce8b53486"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NTIzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return {@link Iterator} for all fields in the object.\n          \n          \n            \n                 * @return {@link Stream} for all fields in the object.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435485234", "createdAt": "2020-06-04T19:01:04Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonObject.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Interface that represents a JSON object.\n+ */\n+public interface JsonObject extends JsonNode {\n+    @Override\n+    default boolean isObject() {\n+        return true;\n+    }\n+\n+    /**\n+     * @return {@link Iterator} for all fields in the object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a6b6d339e659fe7a12463588417bdce8b53486"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NjQ5MA==", "bodyText": "Do we need these *Tree methods?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435486490", "createdAt": "2020-06-04T19:03:29Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+/**\n+ * Generic interface covering basic JSON serialization and deserialization methods.\n+ */\n+public interface JsonSerializer extends ObjectSerializer {\n+    /**\n+     * Reads a JSON byte array into its object representation.\n+     *\n+     * @param input JSON byte array.\n+     * @param clazz {@link Class} representing the object.\n+     * @param <T> Type of the object.\n+     * @return The object represented by the deserialized JSON byte array.\n+     */\n+    @Override\n+    <T> T deserialize(byte[] input, Class<T> clazz);\n+\n+    /**\n+     * Reads a JSON tree into its object representation.\n+     *\n+     * @param jsonNode The JSON tree.\n+     * @param clazz {@link Class} representing the object.\n+     * @param <T> Type of the object.\n+     * @return The object represented by the deserialized JSON tree.\n+     */\n+    <T> T deserializeTree(JsonNode jsonNode, Class<T> clazz);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a6b6d339e659fe7a12463588417bdce8b53486"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce3937d57b22077e610c622aff23ec4d57af4890", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ce3937d57b22077e610c622aff23ec4d57af4890", "committedDate": "2020-06-05T00:11:43Z", "message": "Merge branch 'master' into AzCore_JSONStreamingInterface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f8b5382d42bfecd471a09283de154ba3bca2b46", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9f8b5382d42bfecd471a09283de154ba3bca2b46", "committedDate": "2020-06-05T00:42:44Z", "message": "Renamed JsonValue to JsonPrimitive, removed JsonNull implementation constructors for constants, added exception logging, fixed Javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49ef0c09fb26591eb96801623654ba65b750f2a2", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/49ef0c09fb26591eb96801623654ba65b750f2a2", "committedDate": "2020-06-05T00:59:55Z", "message": "Add UTF-8 string tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0OTM1Mjg3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#pullrequestreview-424935287", "createdAt": "2020-06-05T01:12:56Z", "commit": {"oid": "9f8b5382d42bfecd471a09283de154ba3bca2b46"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMToxMjo1NlrOGfdRSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMToyMzo0NVrOGfdahA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzODYwMg==", "bodyText": "jsonObject.get(name) can return null if element does not exist , we might want to ensure it's not causing NPE in JsonNodeUtils", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435638602", "createdAt": "2020-06-05T01:12:56Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonNode;\n+import com.azure.core.util.serializer.JsonObject;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+/**\n+ * GSON specific implementation of {@link JsonObject}.\n+ */\n+public final class GsonJsonObject implements JsonObject {\n+    private final com.google.gson.JsonObject jsonObject;\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by an empty GSON {@link com.google.gson.JsonObject}.\n+     */\n+    public GsonJsonObject() {\n+        this.jsonObject = new com.google.gson.JsonObject();\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by the passed GSON {@link com.google.gson.JsonObject}.\n+     *\n+     * @param jsonObject The backing GSON {@link com.google.gson.JsonObject}.\n+     */\n+    public GsonJsonObject(com.google.gson.JsonObject jsonObject) {\n+        this.jsonObject = jsonObject;\n+    }\n+\n+    com.google.gson.JsonObject getJsonObject() {\n+        return jsonObject;\n+    }\n+\n+    @Override\n+    public Stream<Map.Entry<String, JsonNode>> fields() {\n+        return jsonObject.entrySet().stream().map(entry ->\n+            new AbstractMap.SimpleEntry<>(entry.getKey(), JsonNodeUtils.fromGsonElement(entry.getValue())));\n+    }\n+\n+    @Override\n+    public Stream<String> fieldNames() {\n+        return jsonObject.keySet().stream();\n+    }\n+\n+    @Override\n+    public JsonNode get(String name) {\n+        return JsonNodeUtils.fromGsonElement(jsonObject.get(name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f8b5382d42bfecd471a09283de154ba3bca2b46"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MDI3Mw==", "bodyText": "looking at the gson code base, remove also could return null if element not exists hence we might want to guard aganist NPE here as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435640273", "createdAt": "2020-06-05T01:20:32Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonNode;\n+import com.azure.core.util.serializer.JsonObject;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+/**\n+ * GSON specific implementation of {@link JsonObject}.\n+ */\n+public final class GsonJsonObject implements JsonObject {\n+    private final com.google.gson.JsonObject jsonObject;\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by an empty GSON {@link com.google.gson.JsonObject}.\n+     */\n+    public GsonJsonObject() {\n+        this.jsonObject = new com.google.gson.JsonObject();\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by the passed GSON {@link com.google.gson.JsonObject}.\n+     *\n+     * @param jsonObject The backing GSON {@link com.google.gson.JsonObject}.\n+     */\n+    public GsonJsonObject(com.google.gson.JsonObject jsonObject) {\n+        this.jsonObject = jsonObject;\n+    }\n+\n+    com.google.gson.JsonObject getJsonObject() {\n+        return jsonObject;\n+    }\n+\n+    @Override\n+    public Stream<Map.Entry<String, JsonNode>> fields() {\n+        return jsonObject.entrySet().stream().map(entry ->\n+            new AbstractMap.SimpleEntry<>(entry.getKey(), JsonNodeUtils.fromGsonElement(entry.getValue())));\n+    }\n+\n+    @Override\n+    public Stream<String> fieldNames() {\n+        return jsonObject.keySet().stream();\n+    }\n+\n+    @Override\n+    public JsonNode get(String name) {\n+        return JsonNodeUtils.fromGsonElement(jsonObject.get(name));\n+    }\n+\n+    @Override\n+    public boolean has(String name) {\n+        return jsonObject.has(name);\n+    }\n+\n+    @Override\n+    public JsonObject put(String name, JsonNode jsonNode) {\n+        jsonObject.add(name, JsonNodeUtils.toGsonElement(jsonNode));\n+        return this;\n+    }\n+\n+    @Override\n+    public JsonNode remove(String name) {\n+        return JsonNodeUtils.fromGsonElement(jsonObject.remove(name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ef0c09fb26591eb96801623654ba65b750f2a2"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MDQ4Mg==", "bodyText": "see the previous comment about JsonObject::remove.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435640482", "createdAt": "2020-06-05T01:21:29Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonNode;\n+import com.azure.core.util.serializer.JsonObject;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+/**\n+ * GSON specific implementation of {@link JsonObject}.\n+ */\n+public final class GsonJsonObject implements JsonObject {\n+    private final com.google.gson.JsonObject jsonObject;\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by an empty GSON {@link com.google.gson.JsonObject}.\n+     */\n+    public GsonJsonObject() {\n+        this.jsonObject = new com.google.gson.JsonObject();\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by the passed GSON {@link com.google.gson.JsonObject}.\n+     *\n+     * @param jsonObject The backing GSON {@link com.google.gson.JsonObject}.\n+     */\n+    public GsonJsonObject(com.google.gson.JsonObject jsonObject) {\n+        this.jsonObject = jsonObject;\n+    }\n+\n+    com.google.gson.JsonObject getJsonObject() {\n+        return jsonObject;\n+    }\n+\n+    @Override\n+    public Stream<Map.Entry<String, JsonNode>> fields() {\n+        return jsonObject.entrySet().stream().map(entry ->\n+            new AbstractMap.SimpleEntry<>(entry.getKey(), JsonNodeUtils.fromGsonElement(entry.getValue())));\n+    }\n+\n+    @Override\n+    public Stream<String> fieldNames() {\n+        return jsonObject.keySet().stream();\n+    }\n+\n+    @Override\n+    public JsonNode get(String name) {\n+        return JsonNodeUtils.fromGsonElement(jsonObject.get(name));\n+    }\n+\n+    @Override\n+    public boolean has(String name) {\n+        return jsonObject.has(name);\n+    }\n+\n+    @Override\n+    public JsonObject put(String name, JsonNode jsonNode) {\n+        jsonObject.add(name, JsonNodeUtils.toGsonElement(jsonNode));\n+        return this;\n+    }\n+\n+    @Override\n+    public JsonNode remove(String name) {\n+        return JsonNodeUtils.fromGsonElement(jsonObject.remove(name));\n+    }\n+\n+    @Override\n+    public JsonNode set(String name, JsonNode jsonNode) {\n+        JsonNode oldValue = JsonNodeUtils.fromGsonElement(jsonObject.remove(name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ef0c09fb26591eb96801623654ba65b750f2a2"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MDk2NA==", "bodyText": "Should we do a null check on all ctrs of all core.json type that takes gson types (same for jackson)? later methods in these types assume the instance it wraps is not null", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435640964", "createdAt": "2020-06-05T01:23:45Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonArray.java", "diffHunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonArray;\n+import com.azure.core.util.serializer.JsonNode;\n+import com.google.gson.JsonElement;\n+\n+import java.util.Objects;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * GSON specific implementation of {@link JsonArray}.\n+ */\n+public final class GsonJsonArray implements JsonArray {\n+    private final com.google.gson.JsonArray jsonArray;\n+\n+    /**\n+     * Constructs a {@link JsonArray} backed by an empty GSON {@link com.google.gson.JsonArray}.\n+     */\n+    public GsonJsonArray() {\n+        this.jsonArray = new com.google.gson.JsonArray();\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonArray} backed by the passed GSON {@link com.google.gson.JsonArray}.\n+     *\n+     * @param jsonArray The backing GSON {@link com.google.gson.JsonArray}.\n+     */\n+    public GsonJsonArray(com.google.gson.JsonArray jsonArray) {\n+        this.jsonArray = jsonArray;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ef0c09fb26591eb96801623654ba65b750f2a2"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0OTQxMjM5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#pullrequestreview-424941239", "createdAt": "2020-06-05T01:34:31Z", "commit": {"oid": "49ef0c09fb26591eb96801623654ba65b750f2a2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMTozNDozMVrOGfdkVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMTozOToyM1rOGfdpFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MzQ3OQ==", "bodyText": "I guess getAsBoolean?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435643479", "createdAt": "2020-06-05T01:34:31Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonPrimitive.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonPrimitive;\n+\n+import java.util.Objects;\n+\n+/**\n+ * GSON specific implementation of {@link JsonPrimitive}.\n+ */\n+public final class GsonJsonPrimitive implements JsonPrimitive {\n+    private final com.google.gson.JsonPrimitive jsonPrimitive;\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed boolean.\n+     *\n+     * @param value Boolean value to wrap.\n+     */\n+    public GsonJsonPrimitive(boolean value) {\n+        this.jsonPrimitive = new com.google.gson.JsonPrimitive(value);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed double.\n+     *\n+     * @param value Double value to wrap.\n+     */\n+    public GsonJsonPrimitive(double value) {\n+        this((Number) value);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed float.\n+     *\n+     * @param value Float value to wrap.\n+     */\n+    public GsonJsonPrimitive(float value) {\n+        this((Number) value);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed int.\n+     *\n+     * @param value Int value to wrap.\n+     */\n+    public GsonJsonPrimitive(int value) {\n+        this((Number) value);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed long.\n+     *\n+     * @param value Long value to wrap.\n+     */\n+    public GsonJsonPrimitive(long value) {\n+        this((Number) value);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed short.\n+     *\n+     * @param value Short value to wrap.\n+     */\n+    public GsonJsonPrimitive(short value) {\n+        this((Number) value);\n+    }\n+\n+    private GsonJsonPrimitive(Number number) {\n+        this.jsonPrimitive = new com.google.gson.JsonPrimitive(number);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed string.\n+     *\n+     * @param value String value to wrap.\n+     */\n+    public GsonJsonPrimitive(String value) {\n+        this.jsonPrimitive = new com.google.gson.JsonPrimitive(value);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} backed by the passed GSON {@link com.google.gson.JsonPrimitive}.\n+     *\n+     * @param jsonPrimitive The backing GSON {@link com.google.gson.JsonPrimitive}.\n+     */\n+    public GsonJsonPrimitive(com.google.gson.JsonPrimitive jsonPrimitive) {\n+        this.jsonPrimitive = jsonPrimitive;\n+    }\n+\n+    com.google.gson.JsonPrimitive getJsonPrimitive() {\n+        return jsonPrimitive;\n+    }\n+\n+    @Override\n+    public boolean isBoolean() {\n+        return jsonPrimitive.isBoolean();\n+    }\n+\n+    @Override\n+    public boolean getBoolean() {\n+        return jsonPrimitive.isBoolean();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ef0c09fb26591eb96801623654ba65b750f2a2"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MzkwMg==", "bodyText": "nit; GsonJsonValue -> GsonJsonPrimitive", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435643902", "createdAt": "2020-06-05T01:36:19Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/JsonNodeUtils.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.JsonNode;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * Helper methods for converting between Azure Core and GSON types.\n+ */\n+final class JsonNodeUtils {\n+    private static final ClientLogger LOGGER = new ClientLogger(JsonNodeUtils.class);\n+\n+    /**\n+     * Converts an Azure Core {@link JsonNode} into a GSON {@link JsonElement}.\n+     *\n+     * @param jsonNode The Azure Core {@link JsonNode}.\n+     * @return The corresponding GSON {@link JsonElement}.\n+     * @throws IllegalArgumentException If the {@link JsonNode} cannot be converted to a {@link JsonElement}.\n+     */\n+    public static JsonElement toGsonElement(JsonNode jsonNode) {\n+        if (jsonNode.isArray()) {\n+            if (jsonNode instanceof GsonJsonArray) {\n+                return ((GsonJsonArray) jsonNode).getJsonArray();\n+            }\n+\n+            throw LOGGER.logExceptionAsError(\n+                new IllegalArgumentException(\"JsonNode is an array but isn't GsonJsonArray.\"));\n+        } else if (jsonNode.isNull()) {\n+            if (jsonNode instanceof GsonJsonNull) {\n+                return ((GsonJsonNull) jsonNode).getJsonNull();\n+            }\n+\n+            throw LOGGER.logExceptionAsError(\n+                new IllegalArgumentException(\"JsonNode is a null but isn't GsonJsonNull.\"));\n+        } else if (jsonNode.isObject()) {\n+            if (jsonNode instanceof GsonJsonObject) {\n+                return ((GsonJsonObject) jsonNode).getJsonObject();\n+            }\n+\n+            throw LOGGER.logExceptionAsError(\n+                new IllegalArgumentException(\"JsonNode is an array but isn't GsonJsonObject.\"));\n+        } else if (jsonNode.isValue()) {\n+            if (jsonNode instanceof GsonJsonPrimitive) {\n+                return ((GsonJsonPrimitive) jsonNode).getJsonPrimitive();\n+            }\n+\n+            throw LOGGER.logExceptionAsError(\n+                new IllegalArgumentException(\"JsonNode is a value but isn't GsonJsonValue.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ef0c09fb26591eb96801623654ba65b750f2a2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0NDY5NA==", "bodyText": "possible NPE, since replace can return null", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435644694", "createdAt": "2020-06-05T01:39:23Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonObject.java", "diffHunk": "@@ -0,0 +1,105 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.util.serializer.JsonNode;\n+import com.azure.core.util.serializer.JsonObject;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Jackson specific implementation of {@link JsonObject}.\n+ */\n+public class JacksonJsonObject implements JsonObject {\n+    private final ObjectNode objectNode;\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by an empty {@link ObjectNode}.\n+     */\n+    public JacksonJsonObject() {\n+        this.objectNode = JsonNodeFactory.instance.objectNode();\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by the passed Jackson {@link ObjectNode}.\n+     *\n+     * @param objectNode The backing Jackson {@link ObjectNode}.\n+     */\n+    public JacksonJsonObject(ObjectNode objectNode) {\n+        this.objectNode = objectNode;\n+    }\n+\n+    ObjectNode getObjectNode() {\n+        return objectNode;\n+    }\n+\n+    @Override\n+    public Stream<Map.Entry<String, JsonNode>> fields() {\n+        Spliterator<Map.Entry<String, com.fasterxml.jackson.databind.JsonNode>> spliterator = Spliterators\n+            .spliteratorUnknownSize(objectNode.fields(), Spliterator.ORDERED);\n+\n+        return StreamSupport.stream(spliterator, false).map(entry ->\n+            new AbstractMap.SimpleEntry<>(entry.getKey(), JsonNodeUtils.fromJacksonNode(entry.getValue())));\n+    }\n+\n+    @Override\n+    public Stream<String> fieldNames() {\n+        Spliterator<String> spliterator = Spliterators\n+            .spliteratorUnknownSize(objectNode.fieldNames(), Spliterator.ORDERED);\n+\n+        return StreamSupport.stream(spliterator, false);\n+    }\n+\n+    @Override\n+    public JsonNode get(String name) {\n+        return JsonNodeUtils.fromJacksonNode(objectNode.get(name));\n+    }\n+\n+    @Override\n+    public boolean has(String name) {\n+        return objectNode.has(name);\n+    }\n+\n+    @Override\n+    public JsonObject put(String name, JsonNode jsonNode) {\n+        objectNode.set(name, JsonNodeUtils.toJacksonNode(jsonNode));\n+        return this;\n+    }\n+\n+    @Override\n+    public JsonNode remove(String name) {\n+        return JsonNodeUtils.fromJacksonNode(objectNode.remove(name));\n+    }\n+\n+    @Override\n+    public JsonNode set(String name, JsonNode jsonNode) {\n+        return JsonNodeUtils.fromJacksonNode(objectNode.replace(name, JsonNodeUtils.toJacksonNode(jsonNode)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ef0c09fb26591eb96801623654ba65b750f2a2"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "038abf5962b9a2e94cb2b0745fb0ba00fbeea804", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/038abf5962b9a2e94cb2b0745fb0ba00fbeea804", "committedDate": "2020-06-05T20:06:37Z", "message": "Added tests for JsonObject implementations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7f8aefda60419e0ff1500a31df7bb8926127a75", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b7f8aefda60419e0ff1500a31df7bb8926127a75", "committedDate": "2020-06-05T23:40:58Z", "message": "Add JsonArray implementation tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ac4c7e91cbd82c647a13579bea5547c58a8c3f4", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7ac4c7e91cbd82c647a13579bea5547c58a8c3f4", "committedDate": "2020-06-06T01:07:37Z", "message": "JsonPrimitive implementation tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ad0f8a757ac45b7d9387f19d3f5dca0536fc232", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8ad0f8a757ac45b7d9387f19d3f5dca0536fc232", "committedDate": "2020-06-06T01:10:01Z", "message": "Rename JsonPrimitive APIs from get to getAs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1Njg4NjQw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#pullrequestreview-425688640", "createdAt": "2020-06-06T00:24:19Z", "commit": {"oid": "b7f8aefda60419e0ff1500a31df7bb8926127a75"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMDoyNDoxOVrOGgAbkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMDo1Mjo0NVrOGgA0vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxNDY3Mw==", "bodyText": "actually I mean the concrete method we're calling inside the GsonJsonPrimitive::getBoolean() method\nwe do return jsonPrimitive.isBoolean(); but should it be return jsonPrimitive.getAsBoolean();? like other getDouble, getFloat methods or I'm missing some context?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r436214673", "createdAt": "2020-06-06T00:24:19Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonPrimitive.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonPrimitive;\n+\n+import java.util.Objects;\n+\n+/**\n+ * GSON specific implementation of {@link JsonPrimitive}.\n+ */\n+public final class GsonJsonPrimitive implements JsonPrimitive {\n+    private final com.google.gson.JsonPrimitive jsonPrimitive;\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed boolean.\n+     *\n+     * @param value Boolean value to wrap.\n+     */\n+    public GsonJsonPrimitive(boolean value) {\n+        this.jsonPrimitive = new com.google.gson.JsonPrimitive(value);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed double.\n+     *\n+     * @param value Double value to wrap.\n+     */\n+    public GsonJsonPrimitive(double value) {\n+        this((Number) value);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed float.\n+     *\n+     * @param value Float value to wrap.\n+     */\n+    public GsonJsonPrimitive(float value) {\n+        this((Number) value);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed int.\n+     *\n+     * @param value Int value to wrap.\n+     */\n+    public GsonJsonPrimitive(int value) {\n+        this((Number) value);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed long.\n+     *\n+     * @param value Long value to wrap.\n+     */\n+    public GsonJsonPrimitive(long value) {\n+        this((Number) value);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed short.\n+     *\n+     * @param value Short value to wrap.\n+     */\n+    public GsonJsonPrimitive(short value) {\n+        this((Number) value);\n+    }\n+\n+    private GsonJsonPrimitive(Number number) {\n+        this.jsonPrimitive = new com.google.gson.JsonPrimitive(number);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed string.\n+     *\n+     * @param value String value to wrap.\n+     */\n+    public GsonJsonPrimitive(String value) {\n+        this.jsonPrimitive = new com.google.gson.JsonPrimitive(value);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} backed by the passed GSON {@link com.google.gson.JsonPrimitive}.\n+     *\n+     * @param jsonPrimitive The backing GSON {@link com.google.gson.JsonPrimitive}.\n+     */\n+    public GsonJsonPrimitive(com.google.gson.JsonPrimitive jsonPrimitive) {\n+        this.jsonPrimitive = jsonPrimitive;\n+    }\n+\n+    com.google.gson.JsonPrimitive getJsonPrimitive() {\n+        return jsonPrimitive;\n+    }\n+\n+    @Override\n+    public boolean isBoolean() {\n+        return jsonPrimitive.isBoolean();\n+    }\n+\n+    @Override\n+    public boolean getBoolean() {\n+        return jsonPrimitive.isBoolean();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MzQ3OQ=="}, "originalCommit": {"oid": "49ef0c09fb26591eb96801623654ba65b750f2a2"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMTExOQ==", "bodyText": "Ok, com.google.gson.JsonArray::get return JsonNull.INSTANCE  for null value. In azure-core JacksonJsonArray::has we use native Jackson::JsonArray::has(int). As per doc that native method return true even if the stored value is null. So our impls has the same behavior, which is good.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r436221119", "createdAt": "2020-06-06T00:52:45Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonArray.java", "diffHunk": "@@ -0,0 +1,131 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.JsonArray;\n+import com.azure.core.util.serializer.JsonNode;\n+import com.google.gson.JsonElement;\n+\n+import java.util.Objects;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * GSON specific implementation of {@link JsonArray}.\n+ */\n+public final class GsonJsonArray implements JsonArray {\n+    private final ClientLogger logger = new ClientLogger(GsonJsonArray.class);\n+\n+    private final com.google.gson.JsonArray jsonArray;\n+\n+    /**\n+     * Constructs a {@link JsonArray} backed by an empty GSON {@link com.google.gson.JsonArray}.\n+     */\n+    public GsonJsonArray() {\n+        this.jsonArray = new com.google.gson.JsonArray();\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonArray} backed by the passed GSON {@link com.google.gson.JsonArray}.\n+     *\n+     * @param jsonArray The backing GSON {@link com.google.gson.JsonArray}.\n+     * @throws NullPointerException If {@code jsonArray} is {@code null}.\n+     */\n+    public GsonJsonArray(com.google.gson.JsonArray jsonArray) {\n+        this.jsonArray = Objects.requireNonNull(jsonArray, \"'jsonArray' cannot be null.\");\n+    }\n+\n+    com.google.gson.JsonArray getJsonArray() {\n+        return jsonArray;\n+    }\n+\n+    @Override\n+    public JsonArray add(JsonNode jsonNode) {\n+        jsonArray.add(JsonNodeUtils.toGsonElement(jsonNode));\n+        return this;\n+    }\n+\n+    @Override\n+    public JsonArray clear() {\n+        int size = jsonArray.size();\n+        for (int i = 0; i < size; i++) {\n+            jsonArray.remove(0);\n+        }\n+\n+        return this;\n+    }\n+\n+    @Override\n+    public Stream<JsonNode> elements() {\n+        Spliterator<JsonElement> spliterator = Spliterators\n+            .spliteratorUnknownSize(jsonArray.iterator(), Spliterator.ORDERED);\n+\n+        return StreamSupport.stream(spliterator, false).map(JsonNodeUtils::fromGsonElement);\n+    }\n+\n+    @Override\n+    public JsonNode get(int index) {\n+        checkBounds(index);\n+\n+        JsonElement jsonElement = jsonArray.get(index);\n+        return (jsonElement == null) ? null :  JsonNodeUtils.fromGsonElement(jsonElement);\n+    }\n+\n+    @Override\n+    public boolean has(int index) {\n+        if (index < 0 || index >= jsonArray.size()) {\n+            return false;\n+        }\n+\n+        return jsonArray.get(index) != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f8aefda60419e0ff1500a31df7bb8926127a75"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c2a9a4ae0c0775fb173343834048ccb5976b479", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2c2a9a4ae0c0775fb173343834048ccb5976b479", "committedDate": "2020-06-10T23:29:50Z", "message": "Merge branch 'master' into AzCore_JSONStreamingInterface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b6720153e7f55c4769655e2e5e70a0e79b68bb4", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b6720153e7f55c4769655e2e5e70a0e79b68bb4", "committedDate": "2020-06-12T22:33:55Z", "message": "Merge branch 'master' into AzCore_JSONStreamingInterface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "733b205237d450b22a80d437263a55107c00f0ca", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/733b205237d450b22a80d437263a55107c00f0ca", "committedDate": "2020-06-13T00:02:17Z", "message": "Changed APIs to use streams instead of byte arrays, made serialization APIs asynchronous"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01803655101cdd82f19f29f4627c3d53cb35b45e", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/01803655101cdd82f19f29f4627c3d53cb35b45e", "committedDate": "2020-06-16T21:58:54Z", "message": "Merge branch 'release/azurecore-1.6.0-beta.1' of https://github.com/Azure/azure-sdk-for-java into AzCore_JSONStreamingInterface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e202dae8e7b34ff7f7e86aec8e48000c15dbf3c", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1e202dae8e7b34ff7f7e86aec8e48000c15dbf3c", "committedDate": "2020-06-19T21:09:41Z", "message": "Merge branch 'release/azurecore-1.6.0-beta.1' of https://github.com/Azure/azure-sdk-for-java into AzCore_JSONStreamingInterface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e83fa8d1f9fac55df1f07d284c66e5df62e0c776", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e83fa8d1f9fac55df1f07d284c66e5df62e0c776", "committedDate": "2020-06-19T21:15:27Z", "message": "Merge branch 'release/azurecore-1.6.0-beta.1' of https://github.com/Azure/azure-sdk-for-java into AzCore_JSONStreamingInterface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3236db5d222f1e45b99db87d1dad15c9756971a7", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3236db5d222f1e45b99db87d1dad15c9756971a7", "committedDate": "2020-06-19T21:33:16Z", "message": "Add service provider interfaces for JSON serializers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea8fd6a71d60233dfcd118e408eb176953268dc2", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ea8fd6a71d60233dfcd118e408eb176953268dc2", "committedDate": "2020-06-20T00:25:00Z", "message": "Fix linting issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d406c3ca0e3ef85cc127b4847706f4861ccdb760", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d406c3ca0e3ef85cc127b4847706f4861ccdb760", "committedDate": "2020-06-22T22:19:48Z", "message": "Merge branch 'release/azurecore-1.6.0-beta.1' of https://github.com/Azure/azure-sdk-for-java into AzCore_JSONStreamingInterface"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MDY2NzI4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#pullrequestreview-436066728", "createdAt": "2020-06-23T18:55:37Z", "commit": {"oid": "d406c3ca0e3ef85cc127b4847706f4861ccdb760"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3890, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}