{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNzQxMzMx", "number": 14341, "title": "api(adt): Add API design doc for relationship APIs", "bodyText": "This PR adds the API design discussed for relationship APIs. There is some implementation code present as well, in the sync and async client, but the purpose of that is to demonstrate how the APIs would be used. The actual implementation will be implemented in a subsequent PR.\nThe readme is present here: https://github.com/Azure/azure-sdk-for-java/blob/feature/adt/abmisr/relationshipApiDesign/sdk/digitaltwins/azure-digitaltwins-core/API%20design.md#relationships\nThere are a couple of samples here that demonstrate how we would access the sync and async responses -> for APIs returning single items or a collection.\nPoints to note:\n\nAs t has been previously decided on, the public API surface will return String and Response<String>, to begin with. Going forward, we might expose additional APIs that return <T> and <Response<T>.\nThe PL returns a strongly typed response object (eg. DigitalTwinsAddRelationshipResponse) since the swagger file defines additional headers in each of the response objects (eg DigitalTwinsAddRelationshipHeaders). This information cannot be stored in Response directly. (Response supports raw Http header, but not the custom headers that are defined in the swagger doc. This is acceptable for the PL, since DigitalTwinsAddRelationshipResponse is an implementation of Response<T>. However, we cannot expose DigitalTwinsAddRelationshipResponse directly in the CL since DigitalTwinsAddRelationshipResponse.getValue() returns an Object, and not a serialized String.\nThe maximal overload of both the sync and async APIs return Response<T>.\nThe maximal overload of the sync APIs have a com.azure.core.util.Context arg as the last arg. This provides the thread context, useful in making multi-threaded calls. There are more details available here.", "createdAt": "2020-08-21T16:56:25Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341", "merged": true, "mergeCommit": {"oid": "6027874a11a99de2aff70f3c44e89814af83760e"}, "closed": true, "closedAt": "2020-08-21T20:50:36Z", "author": {"login": "abhipsaMisra"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdBHku4gH2gAyNDcxNzQxMzMxOjFkYjYxMDc4MzYxM2ZjZGIxMmRkMmRhOTg5NDJlNDYwYmMzZTRiMjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBK6LCgH2gAyNDcxNzQxMzMxOjA1Y2MzYzBmMzkwY2RlNGVhZDhhY2Y3NDRlNzk4MjJjNGI3ZDQ5Mzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1db610783613fcdb12dd2da98942e460bc3e4b25", "committedDate": "2020-08-21T16:40:37Z", "message": "api(adt): Add API design doc for relationship APIs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjQ2NzEw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#pullrequestreview-472646710", "createdAt": "2020-08-21T16:57:07Z", "commit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo1NzowN1rOHE0f9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo1NzowN1rOHE0f9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxNjUwMg==", "bodyText": "The groupId is inherited from the parent, so we don't need to declare it here as well", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#discussion_r474816502", "createdAt": "2020-08-21T16:57:07Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "diffHunk": "@@ -11,7 +11,6 @@\n     <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n   </parent>\n \n-    <groupId>com.azure</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjUwMjU1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#pullrequestreview-472650255", "createdAt": "2020-08-21T17:02:45Z", "commit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowMjo0NVrOHE0qiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowMjo0NVrOHE0qiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxOTIxMQ==", "bodyText": "Each?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#discussion_r474819211", "createdAt": "2020-08-21T17:02:45Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -177,98 +177,95 @@ TODO:\n ## Relationships\n <details><summary><b>Terminology</b></summary>\n \n-Relationship: A named set of outgoing edges part of a Digital Twin persisted state.\n+Relationships: A named set of outgoing edges/relationships part of a Digital Twin persisted state.\n \n-Edge: (aka a \"Relationship Edge\") an individual edge in the Digital Twin relationship graph, ie. a tuple containing:\n+Each Relationship: (aka a \"Relationship Edge\") an individual edge in the Digital Twin relationship graph, ie. a tuple containing:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjUwNzUz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#pullrequestreview-472650753", "createdAt": "2020-08-21T17:03:33Z", "commit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowMzozM1rOHE0r7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowMzozM1rOHE0r7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxOTU2NQ==", "bodyText": "Probably should just mention that in Graph these are called edges, and then don't use the word Edge again. Let's just call it what it is called in the API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#discussion_r474819565", "createdAt": "2020-08-21T17:03:33Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -177,98 +177,95 @@ TODO:\n ## Relationships\n <details><summary><b>Terminology</b></summary>\n \n-Relationship: A named set of outgoing edges part of a Digital Twin persisted state.\n+Relationships: A named set of outgoing edges/relationships part of a Digital Twin persisted state.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjU0MzU1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#pullrequestreview-472654355", "createdAt": "2020-08-21T17:09:40Z", "commit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowOTo0MVrOHE02-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowOTo0MVrOHE02-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjM5NA==", "bodyText": "small S in relationship", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#discussion_r474822394", "createdAt": "2020-08-21T17:09:41Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -177,98 +177,95 @@ TODO:\n ## Relationships\n <details><summary><b>Terminology</b></summary>\n \n-Relationship: A named set of outgoing edges part of a Digital Twin persisted state.\n+Relationships: A named set of outgoing edges/relationships part of a Digital Twin persisted state.\n \n-Edge: (aka a \"Relationship Edge\") an individual edge in the Digital Twin relationship graph, ie. a tuple containing:\n+Each Relationship: (aka a \"Relationship Edge\") an individual edge in the Digital Twin relationship graph, ie. a tuple containing:\n     \n-\tEdgeId (Unique identifier of this edge within the context of the source Digital Twin)\n+\tRelationshipId (Unique identifier of this edge within the context of the source Digital Twin)\n \tSourceId (Id of the source Digital Twin) \n \tTargetId (Id of the target Digital Twin)\n-\trelationship name (User defined string such as \"contains\", \"hasDoorTo\", \"isNextTo\")\n+\tRelationshipName (User defined string such as \"contains\", \"hasDoorTo\", \"isNextTo\")\n \t0 to many user defined properties (ie: \"OccupancyLimit\", \"temperature\")\n \n-Each Edge is identified by its EdgeId. An EdgeId must be unique within the scope of the source Digital Twin.\n+Each relationship in a digital twin is identified by its RelationshipId. An RelationshipId must be unique within the scope of the source Digital Twin. The combination of SourceId and RelationshipId must be unique within the scope of the service.\n </details>\n \n <details><summary><b>Examples</b></summary>\n-An edge that signifies that room1 has a door to room2, and that it is open, would look like\n+A relationship that signifies that room1 has a door to room2, and that it is open, would look like\n \t\n-```csharp\n+```json\n {\n-    \"$edgeId\": \"Door1\",\n+    \"$relationshipId\": \"Door1\",\n     \"$sourceId\": \"Room1\",\n     \"$targetId\": \"Room2\",\n-    \"$relationship\": \"hasDoorTo\",\n+    \"$relationshipName\": \"hasDoorTo\",\n     \"doorStatus\": \"open\"\n }\n ```\n \t\n-An edge that signifies that Room 1 contains a thermostat would look like\n+A relationship that signifies that Room 1 contains a thermostat would look like\n \n-```csharp\n+```json\n {\n-\t\"$edgeId\" : \"ThermostatEdge1\",\n+\t\"$relationshipId\" : \"ThermostatEdge1\",\n \t\"$sourceId\" : \"Room1\",\n \t\"$targetId\" : \"Thermostat1\",\n-\t\"$relationship\" : \"contains\",\n+\t\"$relationshipName\" : \"contains\",\n \t\"installDate\" : \"2019-4-1\",\n \t\"replaceBatteryDate\" : \"2020-4-1\"\n }\n ```\n \n-When getting a list of edges (operations like \"get all edges for a Digital Twin\" or \"get all edges for a Digital Twin with a given relationshipName\"), the SDK will return a string in the below format:\n+When getting a list of relationships (operations like \"get all relationships for a Digital Twin\" or \"get all relationships for a Digital Twin with a given relationshipName\"), the client library will return a string in the below format:\n \n-```csharp\n+```json\n {\n   \"value\": [\n     {\n-      \"$edgeId\": \"Door1\",\n+      \"$relationshipId\": \"Door1\",\n       \"$sourceId\": \"Room1\",\n       \"$targetId\": \"Room2\",\n-      \"$relationship\": \"hasDoorTo\",\n+      \"$relationshipName\": \"hasDoorTo\",\n       \"doorStatus\": \"open\"\n     },\n     {\n-      \"$edgeId\": \"Door2\",\n+      \"$relationshipId\": \"Door2\",\n       \"$sourceId\": \"Room1\",\n       \"$targetId\": \"Room3\",\n-      \"$relationship\": \"hasDoorTo\",\n+      \"$relationshipName\": \"hasDoorTo\",\n       \"doorStatus\": \"closed\"\n     }\n   ],\n   \"nextLink\": \"url-to-next-page\"\n }\n ```\n \n-When creating a relationship edge, the edge string does not follow the above format. The rest endpoint to create a relationship edge contains the sourceId, relationshipName, and the edgeId, so the payload only needs to specify the targetId and any application properties, as seen below:\n-```csharp\n+When creating a relationship, the edge string does not follow the above format. The rest endpoint to create a relationship edge contains the sourceId, relationshipName, and the relationShipId, so the payload only needs to specify the targetId and any application properties, as seen below:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjU0Njgz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#pullrequestreview-472654683", "createdAt": "2020-08-21T17:10:13Z", "commit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxMDoxM1rOHE04BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxMDoxM1rOHE04BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjY2MA==", "bodyText": "I thought the paths had to have a / prefix.\nAlso, ADT doesn't support nested properties yet, right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#discussion_r474822660", "createdAt": "2020-08-21T17:10:13Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -177,98 +177,95 @@ TODO:\n ## Relationships\n <details><summary><b>Terminology</b></summary>\n \n-Relationship: A named set of outgoing edges part of a Digital Twin persisted state.\n+Relationships: A named set of outgoing edges/relationships part of a Digital Twin persisted state.\n \n-Edge: (aka a \"Relationship Edge\") an individual edge in the Digital Twin relationship graph, ie. a tuple containing:\n+Each Relationship: (aka a \"Relationship Edge\") an individual edge in the Digital Twin relationship graph, ie. a tuple containing:\n     \n-\tEdgeId (Unique identifier of this edge within the context of the source Digital Twin)\n+\tRelationshipId (Unique identifier of this edge within the context of the source Digital Twin)\n \tSourceId (Id of the source Digital Twin) \n \tTargetId (Id of the target Digital Twin)\n-\trelationship name (User defined string such as \"contains\", \"hasDoorTo\", \"isNextTo\")\n+\tRelationshipName (User defined string such as \"contains\", \"hasDoorTo\", \"isNextTo\")\n \t0 to many user defined properties (ie: \"OccupancyLimit\", \"temperature\")\n \n-Each Edge is identified by its EdgeId. An EdgeId must be unique within the scope of the source Digital Twin.\n+Each relationship in a digital twin is identified by its RelationshipId. An RelationshipId must be unique within the scope of the source Digital Twin. The combination of SourceId and RelationshipId must be unique within the scope of the service.\n </details>\n \n <details><summary><b>Examples</b></summary>\n-An edge that signifies that room1 has a door to room2, and that it is open, would look like\n+A relationship that signifies that room1 has a door to room2, and that it is open, would look like\n \t\n-```csharp\n+```json\n {\n-    \"$edgeId\": \"Door1\",\n+    \"$relationshipId\": \"Door1\",\n     \"$sourceId\": \"Room1\",\n     \"$targetId\": \"Room2\",\n-    \"$relationship\": \"hasDoorTo\",\n+    \"$relationshipName\": \"hasDoorTo\",\n     \"doorStatus\": \"open\"\n }\n ```\n \t\n-An edge that signifies that Room 1 contains a thermostat would look like\n+A relationship that signifies that Room 1 contains a thermostat would look like\n \n-```csharp\n+```json\n {\n-\t\"$edgeId\" : \"ThermostatEdge1\",\n+\t\"$relationshipId\" : \"ThermostatEdge1\",\n \t\"$sourceId\" : \"Room1\",\n \t\"$targetId\" : \"Thermostat1\",\n-\t\"$relationship\" : \"contains\",\n+\t\"$relationshipName\" : \"contains\",\n \t\"installDate\" : \"2019-4-1\",\n \t\"replaceBatteryDate\" : \"2020-4-1\"\n }\n ```\n \n-When getting a list of edges (operations like \"get all edges for a Digital Twin\" or \"get all edges for a Digital Twin with a given relationshipName\"), the SDK will return a string in the below format:\n+When getting a list of relationships (operations like \"get all relationships for a Digital Twin\" or \"get all relationships for a Digital Twin with a given relationshipName\"), the client library will return a string in the below format:\n \n-```csharp\n+```json\n {\n   \"value\": [\n     {\n-      \"$edgeId\": \"Door1\",\n+      \"$relationshipId\": \"Door1\",\n       \"$sourceId\": \"Room1\",\n       \"$targetId\": \"Room2\",\n-      \"$relationship\": \"hasDoorTo\",\n+      \"$relationshipName\": \"hasDoorTo\",\n       \"doorStatus\": \"open\"\n     },\n     {\n-      \"$edgeId\": \"Door2\",\n+      \"$relationshipId\": \"Door2\",\n       \"$sourceId\": \"Room1\",\n       \"$targetId\": \"Room3\",\n-      \"$relationship\": \"hasDoorTo\",\n+      \"$relationshipName\": \"hasDoorTo\",\n       \"doorStatus\": \"closed\"\n     }\n   ],\n   \"nextLink\": \"url-to-next-page\"\n }\n ```\n \n-When creating a relationship edge, the edge string does not follow the above format. The rest endpoint to create a relationship edge contains the sourceId, relationshipName, and the edgeId, so the payload only needs to specify the targetId and any application properties, as seen below:\n-```csharp\n+When creating a relationship, the edge string does not follow the above format. The rest endpoint to create a relationship edge contains the sourceId, relationshipName, and the relationShipId, so the payload only needs to specify the targetId and any application properties, as seen below:\n+```json\n {\n-    \"edge\": \n-    {\n         \"$targetId\": \"myTargetTwin\",\n         \"myApplicationProperty1\": 1,\n         \"myApplicationProperty2\": \"some value\"\n-    }\n }\n ```\n \n When updating a relationship edge, the patch string follows the below format\n-```csharp\n+```json\n {\n-\t\"patchDocument\": \n-\t[\n-\t    {\n-\t        \"op\": \"replace\",\n-\t        \"path\": \"property1\",\n-\t        \"value\": 1\n-\t    },\n-\t\t{\n-\t        \"op\": \"add\",\n-\t        \"path\": \"property2/subProperty1\",\n-\t        \"value\": 1\n-\t    },\n-\t    {\n-\t        \"op\": \"remove\",\n+    \"patchDocument\": \n+    [\n+        {\n+            \"op\": \"replace\",\n+            \"path\": \"property1\",\n+            \"value\": 1\n+        },\n+        {\n+            \"op\": \"add\",\n+            \"path\": \"property2/subProperty1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjc0MTIz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#pullrequestreview-472674123", "createdAt": "2020-08-21T17:41:31Z", "commit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo0MTozMVrOHE1zRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo0MTozMVrOHE1zRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzNzgyOA==", "bodyText": "What is the semaphore for?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#discussion_r474837828", "createdAt": "2020-08-21T17:41:31Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/AsyncSample.java", "diffHunk": "@@ -27,16 +38,107 @@ public static void main(String[] args) throws InterruptedException\n         DigitalTwinsAsyncClient client = new DigitalTwinsClientBuilder()\n             .tokenCredential(tokenCredential)\n             .endpoint(endpoint)\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n             .buildAsyncClient();\n \n-        Mono<DigitalTwinsGetByIdResponse> asyncResponse = client.getDigitalTwin(digitalTwinId);\n+        // Create the source and target twins\n+        final Semaphore createTwinsSemaphore = new Semaphore(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjc2MTQ1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14341#pullrequestreview-472676145", "createdAt": "2020-08-21T17:44:53Z", "commit": {"oid": "1db610783613fcdb12dd2da98942e460bc3e4b25"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0c6b7b1ad39b2c0536a7782d78113009fc7c532", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a0c6b7b1ad39b2c0536a7782d78113009fc7c532", "committedDate": "2020-08-21T19:26:06Z", "message": "cr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "943f920c5a0b33b3f35cd6ac3d47e643b25ed2c6", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/943f920c5a0b33b3f35cd6ac3d47e643b25ed2c6", "committedDate": "2020-08-21T19:34:56Z", "message": "build failure fixed in sample"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05cc3c0f390cde4ead8acf744e79822c4b7d4938", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/05cc3c0f390cde4ead8acf744e79822c4b7d4938", "committedDate": "2020-08-21T20:33:45Z", "message": "adding group ID again"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 333, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}