{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MTMxNjUz", "number": 17774, "title": "OLTP spark query pipeline draft on DataSourceV2 spark3", "bodyText": "This PR adds the support for spark query DataSourceV2 pipeline\n\nsee TestReadE2EMain for end to end integration demo file\nI have a separate PR for supporting spark filter translation to cosmos parametrized query: #17789\n\nTODO: we need to discuss on the following items who does what (to be done after this PR):\n\ntranslate spark query filter to cosmos query: for now this is very basic to make TestReadE2EMain work. I have a separate PR supporting filter translation: #17789\nFor now only one spark task will be created. We need to utilize feed-range api to create one spark task per feed-range.\nwe need to cache comos-client, for now there is no caching hence not managing the lifetime of the cosmos-clients (memory leak)\nthis PR brings in the JsonSupport.scala and some code in CosmosRowConverter from v2 OLTP spark connector for translating ObjectNode to spark InternalRow. This code requires rewrite. This is only brought in for sake of making the TestReadE2EMain work.", "createdAt": "2020-11-24T02:35:44Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17774", "merged": true, "mergeCommit": {"oid": "492a91cd45ffab9ae4693b4c6e67744c70f2dd7a"}, "closed": true, "closedAt": "2020-11-24T19:34:07Z", "author": {"login": "moderakh"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfgVk4gH2gAyNTI2MTMxNjUzOjVkNGVjZmFjNWZjMzQ5Yzk4MjAxZDgyZDQzNzlhOTYxNDAxMzYzYjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdftwtQgH2gAyNTI2MTMxNjUzOjQwNDcwM2U0NjNlMDM5ZTE3OGZkMDM1NWFmZmJiMDY1YThlZmIyZjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5d4ecfac5fc349c98201d82d4379a961401363b4", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5d4ecfac5fc349c98201d82d4379a961401363b4", "committedDate": "2020-11-24T02:29:25Z", "message": "spark query draft"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MDYwNDE3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17774#pullrequestreview-537060417", "createdAt": "2020-11-24T03:58:41Z", "commit": {"oid": "5d4ecfac5fc349c98201d82d4379a961401363b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MTQ0MDEy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17774#pullrequestreview-537144012", "createdAt": "2020-11-24T07:35:15Z", "commit": {"oid": "5d4ecfac5fc349c98201d82d4379a961401363b4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNzozNToxNVrOH4vUjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNzo0MDowOVrOH4veOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI1NzYxMg==", "bodyText": "I think we should discuss the format name - \"cosmos.items\" feels a little off to me.. can we go with the style we have in the unified Spark connector in Synapse", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17774#discussion_r529257612", "createdAt": "2020-11-24T07:35:15Z", "author": {"login": "tknandu"}, "path": "sdk/cosmos/azure-cosmos-spark_3-0_2-12/src/test/scala/com/azure/cosmos/spark/TestReadE2EMain.scala", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.spark\n+\n+import com.azure.cosmos.implementation.TestConfigurations\n+import com.azure.cosmos.{ConsistencyLevel, CosmosClientBuilder}\n+import org.apache.spark.sql.SparkSession\n+\n+/** sample test for query */\n+object TestReadE2EMain {\n+  def main(args: Array[String]) {\n+    val cosmosEndpoint = TestConfigurations.HOST\n+    val cosmosMasterKey = TestConfigurations.MASTER_KEY\n+    val cosmosDatabase = \"testDB\"\n+    val cosmosContainer = \"testContainer\"\n+\n+//    val client = new CosmosClientBuilder()\n+//      .endpoint(cosmosEndpoint)\n+//      .key(cosmosMasterKey)\n+//      .consistencyLevel(ConsistencyLevel.EVENTUAL)\n+//      .buildAsyncClient()\n+//\n+//    client.createDatabaseIfNotExists(cosmosDatabase).block()\n+//    client.getDatabase(cosmosDatabase).createContainerIfNotExists(cosmosContainer, \"/id\").block()\n+//    client.close()\n+\n+    val cfg = Map(\"spark.cosmos.accountEndpoint\" -> cosmosEndpoint,\n+      \"spark.cosmos.accountKey\" -> cosmosMasterKey,\n+      \"spark.cosmos.database\" -> cosmosDatabase,\n+      \"spark.cosmos.container\" -> cosmosContainer\n+    )\n+\n+    val spark = SparkSession.builder()\n+      .appName(\"spark connector sample\")\n+      .master(\"local\")\n+      .getOrCreate()\n+\n+    val df = spark.read.format(\"cosmos.items\").options(cfg).load()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4ecfac5fc349c98201d82d4379a961401363b4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI2MDA4OA==", "bodyText": "Critical for us to land support for FeedRange (single FeedRange covering multiple physical partition by eventual GA) mapping to 1 Spark task since that is core large customer requirement", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17774#discussion_r529260088", "createdAt": "2020-11-24T07:40:09Z", "author": {"login": "tknandu"}, "path": "sdk/cosmos/azure-cosmos-spark_3-0_2-12/src/main/scala/com/azure/cosmos/spark/CosmosScan.scala", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.spark\n+\n+import org.apache.spark.sql.connector.read.{Batch, InputPartition, PartitionReaderFactory, Scan}\n+import org.apache.spark.sql.types.{IntegerType, StringType, StructField, StructType}\n+\n+case class CosmosScan(config: Map[String, String], sqlQuerySpec: String)\n+  extends Scan\n+    with Batch\n+    with CosmosLoggingTrait {\n+  logInfo(s\"Instantiated ${this.getClass.getSimpleName}\")\n+\n+  override def readSchema(): StructType = {\n+    // TODO: moderakh add support for schema inference\n+    // for now schema is hard coded to make TestE2EMain to work\n+    StructType(Seq(StructField(\"number\", IntegerType), StructField(\"word\", StringType)))\n+  }\n+\n+  override def planInputPartitions(): Array[InputPartition] = {\n+    // TODO: moderakh use get feed range?\n+    // for now we are returning one partition hence only one spark task will be created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4ecfac5fc349c98201d82d4379a961401363b4"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MTQ3NDUy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17774#pullrequestreview-537147452", "createdAt": "2020-11-24T07:41:12Z", "commit": {"oid": "5d4ecfac5fc349c98201d82d4379a961401363b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MzAyODA4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17774#pullrequestreview-537302808", "createdAt": "2020-11-24T09:35:55Z", "commit": {"oid": "5d4ecfac5fc349c98201d82d4379a961401363b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "404703e463e039e178fd0355affbb065a8efb2f6", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/404703e463e039e178fd0355affbb065a8efb2f6", "committedDate": "2020-11-24T18:07:49Z", "message": "fixed checkstyle warns"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1674, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}