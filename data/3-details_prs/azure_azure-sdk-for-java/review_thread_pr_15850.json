{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1ODc2Mzk0", "number": 15850, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDo1MTo0NVrOEpQp0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjoxOTo0M1rOEppYdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjk5OTIwOnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDo1MTo0NVrOHa06Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOToyNjo1MlrOHbYByg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5MTg1MA==", "bodyText": "Make sure to check context for null on the calling function to avoid NPE when doing addData", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497891850", "createdAt": "2020-10-01T00:51:45Z", "author": {"login": "samvaity"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -85,10 +92,12 @@ public EventGridServiceVersion getServiceVersion() {\n     }\n \n     Mono<Void> sendCloudEvents(Iterable<CloudEvent> events, Context context) {\n+        this.addCloudEventTracePlaceHolder(events);\n         return Flux.fromIterable(events)\n             .map(CloudEvent::toImpl)\n             .collectList()\n-            .flatMap(list -> this.impl.publishCloudEventEventsAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishCloudEventEventsAsync(this.hostname, list,\n+                context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNDM3Nw==", "bodyText": "Does withContext guarantee context to be not null?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498404377", "createdAt": "2020-10-01T17:25:37Z", "author": {"login": "YijunXieMS"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -85,10 +92,12 @@ public EventGridServiceVersion getServiceVersion() {\n     }\n \n     Mono<Void> sendCloudEvents(Iterable<CloudEvent> events, Context context) {\n+        this.addCloudEventTracePlaceHolder(events);\n         return Flux.fromIterable(events)\n             .map(CloudEvent::toImpl)\n             .collectList()\n-            .flatMap(list -> this.impl.publishCloudEventEventsAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishCloudEventEventsAsync(this.hostname, list,\n+                context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5MTg1MA=="}, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2NzI3NA==", "bodyText": "In some cases, we end up calling this from the sync client and hence the context could be null. Need a check there when passing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498467274", "createdAt": "2020-10-01T19:26:52Z", "author": {"login": "samvaity"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -85,10 +92,12 @@ public EventGridServiceVersion getServiceVersion() {\n     }\n \n     Mono<Void> sendCloudEvents(Iterable<CloudEvent> events, Context context) {\n+        this.addCloudEventTracePlaceHolder(events);\n         return Flux.fromIterable(events)\n             .map(CloudEvent::toImpl)\n             .collectList()\n-            .flatMap(list -> this.impl.publishCloudEventEventsAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishCloudEventEventsAsync(this.hostname, list,\n+                context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5MTg1MA=="}, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzAwMjYyOnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDo1MjozOVrOHa08XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTowMDo1MFrOHbar3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5MjQ0NQ==", "bodyText": "Do we need both?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497892445", "createdAt": "2020-10-01T00:52:39Z", "author": {"login": "samvaity"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -158,6 +171,21 @@ public EventGridServiceVersion getServiceVersion() {\n     Mono<Response<Void>> sendCustomEventsWithResponse(Iterable<Object> events, Context context) {\n         return Flux.fromIterable(events)\n             .collectList()\n-            .flatMap(list -> this.impl.publishCustomEventEventsWithResponseAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishCustomEventEventsWithResponseAsync(this.hostname, list,\n+                context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));\n+    }\n+\n+    private void addCloudEventTracePlaceHolder(Iterable<CloudEvent> events) {\n+        if (TracerProxy.isTracingEnabled()) {\n+            for (CloudEvent event : events) {\n+                if (event.getExtensionAttributes() == null ||\n+                    (event.getExtensionAttributes().get(Constants.TRACE_PARENT) == null &&\n+                    event.getExtensionAttributes().get(Constants.TRACE_STATE) == null)) {\n+\n+                    event.addExtensionAttribute(Constants.TRACE_PARENT, Constants.TRACE_PARENT_PLACEHOLDER);\n+                    event.addExtensionAttribute(Constants.TRACE_STATE, Constants.TRACE_STATE_PLACEHOLDER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMDgxNQ==", "bodyText": "I put the two placeholder separately. After placeholder replacement, whatever in the request headers will be put into the body eventually. There won't be two in the header has just one.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498510815", "createdAt": "2020-10-01T21:00:50Z", "author": {"login": "YijunXieMS"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -158,6 +171,21 @@ public EventGridServiceVersion getServiceVersion() {\n     Mono<Response<Void>> sendCustomEventsWithResponse(Iterable<Object> events, Context context) {\n         return Flux.fromIterable(events)\n             .collectList()\n-            .flatMap(list -> this.impl.publishCustomEventEventsWithResponseAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishCustomEventEventsWithResponseAsync(this.hostname, list,\n+                context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));\n+    }\n+\n+    private void addCloudEventTracePlaceHolder(Iterable<CloudEvent> events) {\n+        if (TracerProxy.isTracingEnabled()) {\n+            for (CloudEvent event : events) {\n+                if (event.getExtensionAttributes() == null ||\n+                    (event.getExtensionAttributes().get(Constants.TRACE_PARENT) == null &&\n+                    event.getExtensionAttributes().get(Constants.TRACE_STATE) == null)) {\n+\n+                    event.addExtensionAttribute(Constants.TRACE_PARENT, Constants.TRACE_PARENT_PLACEHOLDER);\n+                    event.addExtensionAttribute(Constants.TRACE_STATE, Constants.TRACE_STATE_PLACEHOLDER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5MjQ0NQ=="}, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzAwNDkyOnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDo1MzoxN1rOHa0-BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzoyOTowMlrOHbUTlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5Mjg2OQ==", "bodyText": "Not sure how this resource provide namespace link is relevant to the constructor.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497892869", "createdAt": "2020-10-01T00:53:17Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -33,6 +36,9 @@\n \n     private final EventGridServiceVersion serviceVersion;\n \n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNjI5NA==", "bodyText": "It's for a constant, which is copied to Constants.java but I didn't copy this together. Good catch.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498406294", "createdAt": "2020-10-01T17:29:02Z", "author": {"login": "YijunXieMS"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -33,6 +36,9 @@\n \n     private final EventGridServiceVersion serviceVersion;\n \n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5Mjg2OQ=="}, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzAxMDM3OnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDo1NDo0N1rOHa1BvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo1OToxOFrOHbao8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5MzgyMA==", "bodyText": "Add this to the Constants file where the value is declared.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497893820", "createdAt": "2020-10-01T00:54:47Z", "author": {"login": "samvaity"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -33,6 +36,9 @@\n \n     private final EventGridServiceVersion serviceVersion;\n \n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMDA2Nw==", "bodyText": "I copied the value there but didn't copy the comment ;-(. Corrected.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498510067", "createdAt": "2020-10-01T20:59:18Z", "author": {"login": "YijunXieMS"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -33,6 +36,9 @@\n \n     private final EventGridServiceVersion serviceVersion;\n \n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5MzgyMA=="}, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzAxMTIyOnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDo1NDo1OFrOHa1CUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjowNzo0MFrOHbcQiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5Mzk3MQ==", "bodyText": "Should have a null check for context before using it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497893971", "createdAt": "2020-10-01T00:54:58Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -70,7 +76,8 @@ public EventGridServiceVersion getServiceVersion() {\n         return Flux.fromIterable(events)\n             .map(EventGridEvent::toImpl)\n             .collectList()\n-            .flatMap(list -> this.impl.publishEventsAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishEventsAsync(this.hostname,\n+                list, context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMTk3OQ==", "bodyText": "This internal api is called by a public API, which calls FluxUtil.withContext to create a Context. So I assume the context won't be null.\nIn debugging, I see it's an empty Context instance instead of null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498511979", "createdAt": "2020-10-01T21:03:25Z", "author": {"login": "YijunXieMS"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -70,7 +76,8 @@ public EventGridServiceVersion getServiceVersion() {\n         return Flux.fromIterable(events)\n             .map(EventGridEvent::toImpl)\n             .collectList()\n-            .flatMap(list -> this.impl.publishEventsAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishEventsAsync(this.hostname,\n+                list, context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5Mzk3MQ=="}, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNjU4NA==", "bodyText": "@YijunXieMS - this method is also called from sync client and the user can pass a null context.\nUser can call sendEventsWithResponse(events, null)\n    public Response<Void> sendEventsWithResponse(Iterable<EventGridEvent> events, Context context) {\n        return asyncClient.sendEventsWithResponse(events, context).block();\n    }", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498536584", "createdAt": "2020-10-01T22:07:40Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -70,7 +76,8 @@ public EventGridServiceVersion getServiceVersion() {\n         return Flux.fromIterable(events)\n             .map(EventGridEvent::toImpl)\n             .collectList()\n-            .flatMap(list -> this.impl.publishEventsAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishEventsAsync(this.hostname,\n+                list, context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5Mzk3MQ=="}, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzAxNTY1OnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/systemevents/AcsChatMessageEventBaseProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDo1NjowMlrOHa1FLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzoyODoxM1rOHbUR0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NDcwMw==", "bodyText": "We shouldn't manually be updating a generated file?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497894703", "createdAt": "2020-10-01T00:56:02Z", "author": {"login": "samvaity"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/systemevents/AcsChatMessageEventBaseProperties.java", "diffHunk": "@@ -45,7 +45,7 @@\n      * The version of the message\n      */\n     @JsonProperty(value = \"version\")\n-    private Integer version;\n+    private Long version;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNTg0MQ==", "bodyText": "This change is because the swagger is changed and code is re-generated. Not a manual change.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498405841", "createdAt": "2020-10-01T17:28:13Z", "author": {"login": "YijunXieMS"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/systemevents/AcsChatMessageEventBaseProperties.java", "diffHunk": "@@ -45,7 +45,7 @@\n      * The version of the message\n      */\n     @JsonProperty(value = \"version\")\n-    private Integer version;\n+    private Long version;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NDcwMw=="}, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzAyNTc4OnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDo1ODo0N1rOHa1MQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTowMzo0MlrOHbaw8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NjUxNA==", "bodyText": "events can be null since the public APIs don't seem to check. It might be better to have the null check and include an error message to indicate that events cannot be null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497896514", "createdAt": "2020-10-01T00:58:47Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -158,6 +171,21 @@ public EventGridServiceVersion getServiceVersion() {\n     Mono<Response<Void>> sendCustomEventsWithResponse(Iterable<Object> events, Context context) {\n         return Flux.fromIterable(events)\n             .collectList()\n-            .flatMap(list -> this.impl.publishCustomEventEventsWithResponseAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishCustomEventEventsWithResponseAsync(this.hostname, list,\n+                context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));\n+    }\n+\n+    private void addCloudEventTracePlaceHolder(Iterable<CloudEvent> events) {\n+        if (TracerProxy.isTracingEnabled()) {\n+            for (CloudEvent event : events) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMjExNQ==", "bodyText": "Added null check like in EventHubs", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498512115", "createdAt": "2020-10-01T21:03:42Z", "author": {"login": "YijunXieMS"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -158,6 +171,21 @@ public EventGridServiceVersion getServiceVersion() {\n     Mono<Response<Void>> sendCustomEventsWithResponse(Iterable<Object> events, Context context) {\n         return Flux.fromIterable(events)\n             .collectList()\n-            .flatMap(list -> this.impl.publishCustomEventEventsWithResponseAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishCustomEventEventsWithResponseAsync(this.hostname, list,\n+                context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));\n+    }\n+\n+    private void addCloudEventTracePlaceHolder(Iterable<CloudEvent> events) {\n+        if (TracerProxy.isTracingEnabled()) {\n+            for (CloudEvent event : events) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NjUxNA=="}, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzAyOTA1OnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDo1OTo0NVrOHa1OZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTowMzo0OVrOHbaxJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NzA2Mg==", "bodyText": "Add javadoc", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497897062", "createdAt": "2020-10-01T00:59:45Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.messaging.eventgrid.implementation;\n+\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.tracing.TracerProxy;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+\n+\n+public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMjE2NQ==", "bodyText": "Added", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498512165", "createdAt": "2020-10-01T21:03:49Z", "author": {"login": "YijunXieMS"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.messaging.eventgrid.implementation;\n+\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.tracing.TracerProxy;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+\n+\n+public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NzA2Mg=="}, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzA2MTQ0OnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMTowODozNlrOHa1kRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTowNDozN1rOHbayZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkwMjY2MQ==", "bodyText": "Can the Flux stream have strings that are split across multiple ByteBuffer boundaries?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497902661", "createdAt": "2020-10-01T01:08:36Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.messaging.eventgrid.implementation;\n+\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.tracing.TracerProxy;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+\n+\n+public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final HttpRequest request = context.getHttpRequest();\n+        final HttpHeader contentType = request.getHeaders().get(Constants.CONTENT_TYPE);\n+        if (TracerProxy.isTracingEnabled() && contentType != null &&\n+            Constants.CLOUD_EVENT_CONTENT_TYPE.equals(contentType.getValue())) {\n+            return request.getBody().map(byteBuffer ->\n+                replaceTracingPlaceHolder(request, byteBuffer)).then(next.process());\n+        }\n+        else {\n+            return next.process();\n+        }\n+    }\n+\n+    static String replaceTracingPlaceHolder(HttpRequest request, ByteBuffer byteBuffer) {\n+        String bodyString = new String(byteBuffer.array(), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMjQ4Nw==", "bodyText": "Changed to use a StringBuilder to take everything from the Flux. Good question.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498512487", "createdAt": "2020-10-01T21:04:37Z", "author": {"login": "YijunXieMS"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.messaging.eventgrid.implementation;\n+\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.tracing.TracerProxy;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+\n+\n+public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final HttpRequest request = context.getHttpRequest();\n+        final HttpHeader contentType = request.getHeaders().get(Constants.CONTENT_TYPE);\n+        if (TracerProxy.isTracingEnabled() && contentType != null &&\n+            Constants.CLOUD_EVENT_CONTENT_TYPE.equals(contentType.getValue())) {\n+            return request.getBody().map(byteBuffer ->\n+                replaceTracingPlaceHolder(request, byteBuffer)).then(next.process());\n+        }\n+        else {\n+            return next.process();\n+        }\n+    }\n+\n+    static String replaceTracingPlaceHolder(HttpRequest request, ByteBuffer byteBuffer) {\n+        String bodyString = new String(byteBuffer.array(), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkwMjY2MQ=="}, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzA4MzI3OnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMToxNDoyMVrOHa1zBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTowNToxN1rOHbazmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkwNjQzOQ==", "bodyText": "It is not very clear why we are replacing the trace names. It might be good to add some documentation for this method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497906439", "createdAt": "2020-10-01T01:14:21Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.messaging.eventgrid.implementation;\n+\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.tracing.TracerProxy;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+\n+\n+public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final HttpRequest request = context.getHttpRequest();\n+        final HttpHeader contentType = request.getHeaders().get(Constants.CONTENT_TYPE);\n+        if (TracerProxy.isTracingEnabled() && contentType != null &&\n+            Constants.CLOUD_EVENT_CONTENT_TYPE.equals(contentType.getValue())) {\n+            return request.getBody().map(byteBuffer ->\n+                replaceTracingPlaceHolder(request, byteBuffer)).then(next.process());\n+        }\n+        else {\n+            return next.process();\n+        }\n+    }\n+\n+    static String replaceTracingPlaceHolder(HttpRequest request, ByteBuffer byteBuffer) {\n+        String bodyString = new String(byteBuffer.array(), StandardCharsets.UTF_8);\n+        final HttpHeader traceparentHeader = request.getHeaders().get(Constants.TRACE_PARENT);\n+        final HttpHeader tracestateHeader = request.getHeaders().get(Constants.TRACE_STATE);\n+        bodyString = bodyString.replace(Constants.TRACE_PARENT_REPLACE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMjc5NQ==", "bodyText": "Added Javadoc and some comments.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498512795", "createdAt": "2020-10-01T21:05:17Z", "author": {"login": "YijunXieMS"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.messaging.eventgrid.implementation;\n+\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.tracing.TracerProxy;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+\n+\n+public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final HttpRequest request = context.getHttpRequest();\n+        final HttpHeader contentType = request.getHeaders().get(Constants.CONTENT_TYPE);\n+        if (TracerProxy.isTracingEnabled() && contentType != null &&\n+            Constants.CLOUD_EVENT_CONTENT_TYPE.equals(contentType.getValue())) {\n+            return request.getBody().map(byteBuffer ->\n+                replaceTracingPlaceHolder(request, byteBuffer)).then(next.process());\n+        }\n+        else {\n+            return next.process();\n+        }\n+    }\n+\n+    static String replaceTracingPlaceHolder(HttpRequest request, ByteBuffer byteBuffer) {\n+        String bodyString = new String(byteBuffer.array(), StandardCharsets.UTF_8);\n+        final HttpHeader traceparentHeader = request.getHeaders().get(Constants.TRACE_PARENT);\n+        final HttpHeader tracestateHeader = request.getHeaders().get(Constants.TRACE_STATE);\n+        bodyString = bodyString.replace(Constants.TRACE_PARENT_REPLACE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkwNjQzOQ=="}, "originalCommit": {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTAyNzYwOnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjowODoxOVrOHbcRQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjowODoxOVrOHbcRQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNjc2OQ==", "bodyText": "I think my comment about user passing null for context applies to this method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498536769", "createdAt": "2020-10-01T22:08:19Z", "author": {"login": "srnagar"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -116,14 +137,18 @@ public EventGridServiceVersion getServiceVersion() {\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Response<Void>> sendEventsWithResponse(Iterable<EventGridEvent> events) {\n+        if (events == null) {\n+            return monoError(logger, new NullPointerException(\"'events' cannot be null.\"));\n+        }\n         return withContext(context -> sendEventsWithResponse(events, context));\n     }\n \n     Mono<Response<Void>> sendEventsWithResponse(Iterable<EventGridEvent> events, Context context) {\n         return Flux.fromIterable(events)\n             .map(EventGridEvent::toImpl)\n             .collectList()\n-            .flatMap(list -> this.impl.publishEventsWithResponseAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishEventsWithResponseAsync(this.hostname, list,\n+                context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8f0686594b9fbd006b04db6303a8845754af878"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTA1MDc4OnYy", "diffSide": "RIGHT", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjoxOTo0M1rOHbcfng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMzoyMTowNFrOHbdiZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MDQ0Ng==", "bodyText": "Do we want the request headers to have the keys of tracestate and traceparent with empty values ?\n\ntraceparentHeader != null\n? String.format(\",\"%s\":\"%s\"\", Constants.TRACE_PARENT, traceparentHeader.getValue())\n: \"\")\n\nI think we should skip updating the key value if traceparentHeader == null.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498540446", "createdAt": "2020-10-01T22:19:43Z", "author": {"login": "samvaity"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.azure.messaging.eventgrid.implementation;\n+\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.tracing.TracerProxy;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import com.azure.messaging.eventgrid.CloudEvent;\n+/**\n+ * This pipeline policy should be added after OpenTelemetryPolicy in the http pipeline.\n+ *\n+ * It checks whether the {@link HttpRequest} headers have \"traceparent\" or \"tracestate\" and whether the serialized\n+ * http body json string for a list of {@link CloudEvent} instances has place holders\n+ * {@link Constants#TRACE_PARENT_PLACEHOLDER} or {@link Constants#TRACE_STATE_PLACEHOLDER}.\n+ * The place holders will be replaced by the value from headers if the headers have \"traceparent\" or \"tracestate\",\n+ * or be removed if the headers don't have.\n+ *\n+ * The place holders won't exist in the json string if the {@link TracerProxy#isTracingEnabled()} returns false.\n+ */\n+public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final HttpRequest request = context.getHttpRequest();\n+        final HttpHeader contentType = request.getHeaders().get(Constants.CONTENT_TYPE);\n+        StringBuilder bodyStringBuilder = new StringBuilder();\n+        if (TracerProxy.isTracingEnabled() && contentType != null &&\n+            Constants.CLOUD_EVENT_CONTENT_TYPE.equals(contentType.getValue())) {\n+            return request.getBody().map(byteBuffer -> bodyStringBuilder.append(new String(byteBuffer.array(),\n+                StandardCharsets.UTF_8)))\n+                .then(Mono.fromCallable(() -> replaceTracingPlaceHolder(request, bodyStringBuilder)))\n+                .then(next.process());\n+        }\n+        else {\n+            return next.process();\n+        }\n+    }\n+\n+    /**\n+     *\n+     * @param request The {@link HttpRequest}, whose body will be mutated by replacing traceparent and tracestate\n+     *                placeholders.\n+     * @param bodyStringBuilder The {@link StringBuilder} that contains the full HttpRequest body string.\n+     * @return The new body string with the place holders replaced (if header has tracing)\n+     * or removed (if header no tracing).\n+     */\n+    static String replaceTracingPlaceHolder(HttpRequest request, StringBuilder bodyStringBuilder) {\n+        final int traceParentPlaceHolderIndex = bodyStringBuilder.indexOf(Constants.TRACE_PARENT_PLACEHOLDER);\n+        if (traceParentPlaceHolderIndex >= 0) { // There is \"traceparent\" placeholder in body, replace it.\n+            final HttpHeader traceparentHeader = request.getHeaders().get(Constants.TRACE_PARENT);\n+            bodyStringBuilder.replace(traceParentPlaceHolderIndex,\n+                Constants.TRACE_PARENT_PLACEHOLDER.length() + traceParentPlaceHolderIndex,\n+                traceparentHeader != null\n+                    ? String.format(\",\\\"%s\\\":\\\"%s\\\"\", Constants.TRACE_PARENT, traceparentHeader.getValue())\n+                    : \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf5d796c03e39094d509d4b06baea8784af7abd"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1NzU0MQ==", "bodyText": "Clarified offline, this is not updating the request headers.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498557541", "createdAt": "2020-10-01T23:21:04Z", "author": {"login": "samvaity"}, "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.azure.messaging.eventgrid.implementation;\n+\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.tracing.TracerProxy;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import com.azure.messaging.eventgrid.CloudEvent;\n+/**\n+ * This pipeline policy should be added after OpenTelemetryPolicy in the http pipeline.\n+ *\n+ * It checks whether the {@link HttpRequest} headers have \"traceparent\" or \"tracestate\" and whether the serialized\n+ * http body json string for a list of {@link CloudEvent} instances has place holders\n+ * {@link Constants#TRACE_PARENT_PLACEHOLDER} or {@link Constants#TRACE_STATE_PLACEHOLDER}.\n+ * The place holders will be replaced by the value from headers if the headers have \"traceparent\" or \"tracestate\",\n+ * or be removed if the headers don't have.\n+ *\n+ * The place holders won't exist in the json string if the {@link TracerProxy#isTracingEnabled()} returns false.\n+ */\n+public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final HttpRequest request = context.getHttpRequest();\n+        final HttpHeader contentType = request.getHeaders().get(Constants.CONTENT_TYPE);\n+        StringBuilder bodyStringBuilder = new StringBuilder();\n+        if (TracerProxy.isTracingEnabled() && contentType != null &&\n+            Constants.CLOUD_EVENT_CONTENT_TYPE.equals(contentType.getValue())) {\n+            return request.getBody().map(byteBuffer -> bodyStringBuilder.append(new String(byteBuffer.array(),\n+                StandardCharsets.UTF_8)))\n+                .then(Mono.fromCallable(() -> replaceTracingPlaceHolder(request, bodyStringBuilder)))\n+                .then(next.process());\n+        }\n+        else {\n+            return next.process();\n+        }\n+    }\n+\n+    /**\n+     *\n+     * @param request The {@link HttpRequest}, whose body will be mutated by replacing traceparent and tracestate\n+     *                placeholders.\n+     * @param bodyStringBuilder The {@link StringBuilder} that contains the full HttpRequest body string.\n+     * @return The new body string with the place holders replaced (if header has tracing)\n+     * or removed (if header no tracing).\n+     */\n+    static String replaceTracingPlaceHolder(HttpRequest request, StringBuilder bodyStringBuilder) {\n+        final int traceParentPlaceHolderIndex = bodyStringBuilder.indexOf(Constants.TRACE_PARENT_PLACEHOLDER);\n+        if (traceParentPlaceHolderIndex >= 0) { // There is \"traceparent\" placeholder in body, replace it.\n+            final HttpHeader traceparentHeader = request.getHeaders().get(Constants.TRACE_PARENT);\n+            bodyStringBuilder.replace(traceParentPlaceHolderIndex,\n+                Constants.TRACE_PARENT_PLACEHOLDER.length() + traceParentPlaceHolderIndex,\n+                traceparentHeader != null\n+                    ? String.format(\",\\\"%s\\\":\\\"%s\\\"\", Constants.TRACE_PARENT, traceparentHeader.getValue())\n+                    : \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MDQ0Ng=="}, "originalCommit": {"oid": "6cf5d796c03e39094d509d4b06baea8784af7abd"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 726, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}