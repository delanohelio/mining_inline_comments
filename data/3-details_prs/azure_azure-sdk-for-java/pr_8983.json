{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2OTA1MDk5", "number": 8983, "title": "ServiceBus Track 2 Peek operation on Management channel  ( Include $cbs channel for auth)", "bodyText": "This include following feature\n\n$cbs channel for sending auth token.\npeek operation\npeek from a sequence number", "createdAt": "2020-03-11T20:28:38Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983", "merged": true, "mergeCommit": {"oid": "62a0dd42979d6bfb8b2367fe931d06741eb32a29"}, "closed": true, "closedAt": "2020-03-12T06:59:19Z", "author": {"login": "hemanttanwar"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMtHWoAH2gAyMzg2OTA1MDk5OmViYmUyNWQzZmI0OTgwYWJhN2Y3YWNlODg0MzAxZTdhZWRhYzA1ZmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcM1my5gH2gAyMzg2OTA1MDk5OmMzOTViODQ5ZjNjNDQ3NThjMjBiMGViYmIwOTc4NGU0NTZlY2EzMGQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ebbe25d3fb4980aba7f7ace884301e7aedac05fd", "committedDate": "2020-03-11T20:26:56Z", "message": "peek and management channel with $cbs channel"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTA0ODAz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#pullrequestreview-373104803", "createdAt": "2020-03-11T20:33:01Z", "commit": {"oid": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDozMzowMlrOF1IHAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDo0OTo1NFrOF1Im0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1MTcxNA==", "bodyText": "This already exists in RequestResponseChannel.java. Is there a reason it is here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391251714", "createdAt": "2020-03-11T20:33:02Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/AmqpConstants.java", "diffHunk": "@@ -19,4 +19,8 @@\n \n     static final int AMQP_BATCH_MESSAGE_FORMAT = 0x80013700; // 2147563264L;\n \n+    public static final String REQUEST_RESPONSE_LEGACY_STATUS_CODE = \"status-code\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1MjQxNA==", "bodyText": "Access modifier and using final instead. Consider setting Collections.emptyList instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391252414", "createdAt": "2020-03-11T20:34:22Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/MessageSerializerResult.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.implementation;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/***\n+ * This will hole additional data which can not be stored in AMQP Message.\n+ * Example last  serial number.\n+ */\n+public class MessageSerializerResult<T> {\n+    List<T> messages = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1MjYyMw==", "bodyText": "This class isn't used anywhere?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391252623", "createdAt": "2020-03-11T20:34:49Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/MessageSerializerResult.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1MjgxOQ==", "bodyText": "Why does a connection know about these modes? I'd expect them to be parameters when creating a receiver or sender or when creating the management node itself.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391252819", "createdAt": "2020-03-11T20:35:16Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ReactorConnection.java", "diffHunk": "@@ -77,10 +81,13 @@\n      * @param messageSerializer Serializer to translate objects to and from proton-j {@link Message messages}.\n      * @param product The name of the product this connection is created for.\n      * @param clientVersion The version of the client library creating the connection.\n+     * @param senderSettleMode to set as {@link SenderSettleMode} on sender.\n+     * @param receiverSettleMode to set as {@link ReceiverSettleMode} on receiver.\n      */\n     public ReactorConnection(String connectionId, ConnectionOptions connectionOptions, ReactorProvider reactorProvider,\n         ReactorHandlerProvider handlerProvider, TokenManagerProvider tokenManagerProvider,\n-        MessageSerializer messageSerializer, String product, String clientVersion) {\n+        MessageSerializer messageSerializer, String product, String clientVersion,\n+        SenderSettleMode senderSettleMode, ReceiverSettleMode receiverSettleMode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1MzkwNg==", "bodyText": "Can this live as a private static method in RequestResponseChannel.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391253906", "createdAt": "2020-03-11T20:37:29Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/RequestResponseUtils.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.implementation;\n+\n+import org.apache.qpid.proton.message.Message;\n+\n+/**\n+ * This consists of various utilities needed to manage Request/Response  channel.\n+ */\n+public class RequestResponseUtils {\n+    public static final int REQUEST_RESPONSE_UNDEFINED_STATUS_CODE = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NDA3Mg==", "bodyText": "nit:  empty line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391254072", "createdAt": "2020-03-11T20:37:51Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -48,6 +53,7 @@\n     private static final String VIA_PARTITION_KEY_NAME = \"x-opt-via-partition-key\";\n     private static final String DEAD_LETTER_SOURCE_NAME = \"x-opt-deadletter-source\";\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NTUwMA==", "bodyText": "Since this is related to reading the status code from AmqpMessages, a better place would be to put it in MessageUtils. There should be a class already", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391255500", "createdAt": "2020-03-11T20:40:48Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/RequestResponseUtils.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.implementation;\n+\n+import org.apache.qpid.proton.message.Message;\n+\n+/**\n+ * This consists of various utilities needed to manage Request/Response  channel.\n+ */\n+public class RequestResponseUtils {\n+    public static final int REQUEST_RESPONSE_UNDEFINED_STATUS_CODE = -1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1MzkwNg=="}, "originalCommit": {"oid": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NTU4MA==", "bodyText": "nit: new line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391255580", "createdAt": "2020-03-11T20:40:58Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -164,20 +170,37 @@ public int getSize(org.apache.qpid.proton.message.Message amqpMessage) {\n \n         if (clazz == ServiceBusReceivedMessage.class) {\n             return (T) deserializeMessage(message);\n+        } else if (clazz == List.class) {\n+            return (T) deserializeListOfMessages(message);\n         } else {\n             throw logger.logExceptionAsError(new IllegalArgumentException(\n                 \"Deserialization only supports ServiceBusReceivedMessage.\"));\n         }\n     }\n \n+    private List<ServiceBusReceivedMessage> deserializeListOfMessages(Message amqpMessage) {\n+        //maintain the order of elements because last sequence number needs to be maintain.\n+        List<Message> listAmqpMessages = convertAMQPValueMessageToBrokeredMessage(amqpMessage);\n+\n+        List<ServiceBusReceivedMessage> receivedMessageList = new ArrayList<>();\n+        for (Message oneAmqpMessage:listAmqpMessages\n+             ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NzQxMQ==", "bodyText": "Why do we pass in the TokenManager here. iirc, before we create the ManagementChannel, we already create a token manager that authorizes with it. We shouldn't need to manually authorize ourselves.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391257411", "createdAt": "2020-03-11T20:44:50Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -59,9 +62,17 @@\n     private final MessageSerializer messageSerializer;\n     private final TokenManagerProvider tokenManagerProvider;\n \n+    /*This is to maintain cbs node and get authorization.*/\n+    private final TokenManager cbsBasedTokenManager;\n+\n+    // Maintain last peek sequence number\n+    private AtomicReference<Long>  lastPeekedSequenceNumber = new AtomicReference<>(0L);\n+\n+\n     ManagementChannel(Mono<RequestResponseChannel> responseChannelMono, String topicOrQueueName,\n                       TokenCredential credential, TokenManagerProvider tokenManagerProvider,\n-                      MessageSerializer messageSerializer, Scheduler scheduler) {\n+                      MessageSerializer messageSerializer, Scheduler scheduler, TokenManager cbsBasedTokenManager", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NzYyOQ==", "bodyText": "This doesn't need to be public", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391257629", "createdAt": "2020-03-11T20:45:21Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementConstants.java", "diffHunk": "@@ -0,0 +1,32 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.implementation;\n+\n+import com.azure.core.amqp.implementation.AmqpConstants;\n+\n+/**\n+ * Constants which is used for management calls to support operations for example renewlock, schedule, defer etc.\n+ */\n+public class ManagementConstants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1ODgzNg==", "bodyText": "Every time a peek operation is called, it'll create another management channel node.  This is a bit wasteful if we keep getting the management node and have to recreate it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391258836", "createdAt": "2020-03-11T20:47:48Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorAmqpConnection.java", "diffHunk": "@@ -101,10 +117,14 @@ public ServiceBusReactorAmqpConnection(String connectionId, ConnectionOptions co\n                     logger.info(\"Creating management node. entityPath: [{}]. address: [{}]. linkName: [{}]\",\n                         entityPath, address, linkName);\n \n+                    TokenManager cbsBasedTokenManager =  new AzureTokenManagerProvider(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1OTAxOA==", "bodyText": "Move these to tests and use stepverifier.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391259018", "createdAt": "2020-03-11T20:48:10Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientPeek.java", "diffHunk": "@@ -143,7 +143,7 @@ public void peekOneMessage() {\n                 });\n \n         try {\n-            Thread.sleep(5000);\n+            Thread.sleep(90000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1OTYwMA==", "bodyText": "sender.send(message).then(receiver.peek()) is probably what you want. thenMany suggests it returns a flux.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391259600", "createdAt": "2020-03-11T20:49:20Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -54,4 +54,28 @@ void receiveMessageAutoComplete() {\n             })\n             .verifyComplete();\n     }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @Test\n+    void peekMessage() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+        final ReceiveMessageOptions options = new ReceiveMessageOptions().setAutoComplete(true);\n+        receiver = createBuilder()\n+            .receiveMessageOptions(options)\n+            .buildAsyncReceiverClient();\n+\n+        // Assert & Act\n+        StepVerifier.create(sender.send(message).thenMany(receiver.peek()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1OTg1Nw==", "bodyText": "When you return inline mocks like this, you need to add the Mockito.clearInlinMocks() or else it won't be garbage collected.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391259857", "createdAt": "2020-03-11T20:49:54Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -122,6 +131,41 @@ void teardown() {\n         consumer.close();\n     }\n \n+    /**\n+     * Verifies that this peek one messages.\n+     */\n+    @Test\n+    void peekOneMessage() {\n+        // Arrange\n+        final int numberOfEvents = 1;\n+        when(managementNode.peek())\n+            .thenReturn(Mono.just(mock(ServiceBusReceivedMessage.class)));\n+\n+        // Act & Assert\n+        StepVerifier.create(consumer.peek())\n+            .expectNextCount(numberOfEvents)\n+            .verifyComplete();\n+\n+    }\n+\n+    /**\n+     * Verifies that this peek one messages from a sequence Number.\n+     */\n+    @Test\n+    void peekWithSequenceOneMessage() {\n+        // Arrange\n+        final int numberOfEvents = 1;\n+        final int fromSequenceNumber = 10;\n+\n+        when(managementNode.peek(fromSequenceNumber))\n+            .thenReturn(Mono.just(mock(ServiceBusReceivedMessage.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "589482feff2603c5e06bb37d0019ae6c7ad2e213", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/589482feff2603c5e06bb37d0019ae6c7ad2e213", "committedDate": "2020-03-11T21:56:06Z", "message": "spot bugs fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e1bb4c013c29e1d068a6a12282117dd0f72072d5", "committedDate": "2020-03-12T00:52:47Z", "message": "took care of review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMjY0NDE0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#pullrequestreview-373264414", "createdAt": "2020-03-12T03:56:48Z", "commit": {"oid": "e1bb4c013c29e1d068a6a12282117dd0f72072d5"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMzo1Njo0OFrOF1QhDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDowNjo0OFrOF1QoeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM4OTQ1Mw==", "bodyText": "casing should be Amqp rather than AMQP", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391389453", "createdAt": "2020-03-12T03:56:48Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -407,4 +430,31 @@ private static int sizeof(Object obj) {\n         throw new IllegalArgumentException(String.format(Locale.US,\n             \"Encoding Type: %s is not supported\", obj.getClass()));\n     }\n+\n+    private List<Message> convertAMQPValueMessageToBrokeredMessage(Message amqpResponseMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1bb4c013c29e1d068a6a12282117dd0f72072d5"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM4OTg1Nw==", "bodyText": "This is a hack to maintain state.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391389857", "createdAt": "2020-03-12T03:58:51Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -46,79 +47,107 @@\n     private static final String MANAGEMENT_SECURITY_TOKEN_KEY = \"security_token\";\n \n     // Well-known values for the service request.\n-    private static final String READ_OPERATION_VALUE = \"READ\";\n     private static final String PEEK_OPERATION_VALUE = AmqpConstants.VENDOR + \":peek-message\";\n-    private static final String MANAGEMENT_EVENTHUB_ENTITY_TYPE = AmqpConstants.VENDOR + \":servicebus\";\n+    private static final String MANAGEMENT_SERVICEBUS_ENTITY_TYPE = AmqpConstants.VENDOR + \":servicebus\";\n     private static final String MANAGEMENT_SERVER_TIMEOUT = AmqpConstants.VENDOR + \":server-timeout\";\n \n-\n-    private final TokenCredential tokenProvider;\n     private final Mono<RequestResponseChannel> channelMono;\n     private final Scheduler scheduler;\n-    private final String topicOrQueueName;\n     private final MessageSerializer messageSerializer;\n-    private final TokenManagerProvider tokenManagerProvider;\n \n-    ManagementChannel(Mono<RequestResponseChannel> responseChannelMono, String topicOrQueueName,\n-                      TokenCredential credential, TokenManagerProvider tokenManagerProvider,\n-                      MessageSerializer messageSerializer, Scheduler scheduler) {\n+    /*This is to maintain cbs node and get authorization.*/\n+    private final TokenManager cbsBasedTokenManager;\n+\n+    // Maintain last peek sequence number\n+    private AtomicReference<Long>  lastPeekedSequenceNumber = new AtomicReference<>(0L);\n+    private AtomicReference<Boolean> cbsBasedTokenManagerCalled = new AtomicReference<>(false);\n+\n \n-        this.tokenManagerProvider = Objects.requireNonNull(tokenManagerProvider,\n-            \"'tokenManagerProvider' cannot be null.\");\n-        this.tokenProvider = Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n-        this.topicOrQueueName = Objects.requireNonNull(topicOrQueueName, \"'eventHubName' cannot be null.\");\n+\n+    ManagementChannel(Mono<RequestResponseChannel> responseChannelMono,\n+                      MessageSerializer messageSerializer, Scheduler scheduler, TokenManager cbsBasedTokenManager\n+    ) {\n         this.messageSerializer = Objects.requireNonNull(messageSerializer, \"'messageSerializer' cannot be null.\");\n         this.channelMono = Objects.requireNonNull(responseChannelMono, \"'responseChannelMono' cannot be null.\");\n         this.scheduler = Objects.requireNonNull(scheduler, \"'scheduler' cannot be null.\");\n+        this.cbsBasedTokenManager = Objects.requireNonNull(cbsBasedTokenManager,\n+            \"'cbsBasedTokenManager' cannot be null.\");\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n-    public Mono<ServiceBusReceivedMessage> peek() {\n+    public Mono<ServiceBusReceivedMessage> peek(long fromSequenceNumber) {\n \n-        int maxMessages = 2;\n-        long fromSequenceNumber = 1;\n-        final Map<String, Object> properties = new HashMap<>();\n-        properties.put(MANAGEMENT_ENTITY_TYPE_KEY, MANAGEMENT_EVENTHUB_ENTITY_TYPE);\n-        properties.put(MANAGEMENT_ENTITY_NAME_KEY, topicOrQueueName);\n-        properties.put(MANAGEMENT_OPERATION_KEY, READ_OPERATION_VALUE);\n-\n-        return peek(properties, ServiceBusReceivedMessage.class, maxMessages, fromSequenceNumber, null)\n+        return peek(new HashMap<>(), ServiceBusReceivedMessage.class, 1, fromSequenceNumber, null)\n+            .last()\n             .publishOn(scheduler);\n     }\n \n-    private <T> Mono<T> peek(Map<String, Object> appProperties, Class<T> responseType,\n-                             int maxMessages, long fromSequenceNumber, UUID sessionId) {\n-\n-        final String tokenAudience = tokenManagerProvider.getScopesFromResource(topicOrQueueName);\n-\n-        return tokenProvider.getToken(new TokenRequestContext().addScopes(tokenAudience)).flatMap(accessToken -> {\n-            appProperties.put(MANAGEMENT_SECURITY_TOKEN_KEY, accessToken.getToken());\n-\n-            // set mandatory application properties for AMQP message.\n-            appProperties.put(MANAGEMENT_OPERATION_KEY, PEEK_OPERATION_VALUE);\n-            appProperties.put(MANAGEMENT_SERVER_TIMEOUT, \"\" + 1000 * 30);\n-\n-            final Message request = Proton.message();\n-            final ApplicationProperties applicationProperties = new ApplicationProperties(appProperties);\n-            request.setApplicationProperties(applicationProperties);\n-\n-            // set mandatory properties on AMQP message body\n-            HashMap<String, Object> requestBodyMap = new HashMap<>();\n-            requestBodyMap.put(ServiceBusConstants.REQUEST_RESPONSE_FROM_SEQUENCE_NUMBER, fromSequenceNumber);\n-            requestBodyMap.put(ServiceBusConstants.REQUEST_RESPONSE_MESSAGE_COUNT, maxMessages);\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<ServiceBusReceivedMessage> peek() {\n \n-            if (!Objects.isNull(sessionId)) {\n-                requestBodyMap.put(ServiceBusConstants.REQUEST_RESPONSE_SESSION_ID, sessionId);\n-            }\n+        return peek(this.lastPeekedSequenceNumber.get() + 1);\n+    }\n \n-            request.setBody(new AmqpValue(requestBodyMap));\n+    private <T> Flux<T> peek(Map<String, Object> appProperties, Class<T> responseType,\n+                             int maxMessages, long fromSequenceNumber, UUID sessionId) {\n \n-            return channelMono.flatMap(requestResponseChannel -> requestResponseChannel.sendWithAck(request))\n-                .map(message -> messageSerializer.deserialize(message, responseType));\n-        });\n+        return\n+            Mono.defer(() -> {\n+                if (!cbsBasedTokenManagerCalled.get()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1bb4c013c29e1d068a6a12282117dd0f72072d5"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM4OTkxOA==", "bodyText": "These don't need to be public because the class is not public.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391389918", "createdAt": "2020-03-12T03:59:15Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementConstants.java", "diffHunk": "@@ -0,0 +1,27 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.implementation;\n+\n+import com.azure.core.amqp.implementation.AmqpConstants;\n+\n+/**\n+ * Constants which is used for management calls to support operations for example renewlock, schedule, defer etc.\n+ */\n+class ManagementConstants {\n+    public static final String REQUEST_RESPONSE_FROM_SEQUENCE_NUMBER = \"from-sequence-number\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1bb4c013c29e1d068a6a12282117dd0f72072d5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM4OTk4Mw==", "bodyText": "Why does this need to be public?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391389983", "createdAt": "2020-03-12T03:59:36Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorAmqpConnection.java", "diffHunk": "@@ -36,6 +41,11 @@\n     private static final String MANAGEMENT_LINK_NAME = \"mgmt\";\n     private static final String MANAGEMENT_ADDRESS = \"$management\";\n \n+    /** This is used in setting up management chhannel and it is always fixed.\n+     * This is not used by sdk user trying to receive/send messages.*/\n+    public static final SenderSettleMode MANAGEMENT_SEND_SETTLE_MODE = SenderSettleMode.SETTLED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1bb4c013c29e1d068a6a12282117dd0f72072d5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MDA3OQ==", "bodyText": "It doesn't need to be a variable because enums are basically static. You can pass the values in as-is in the constructor.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391390079", "createdAt": "2020-03-12T04:00:11Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorAmqpConnection.java", "diffHunk": "@@ -36,6 +41,11 @@\n     private static final String MANAGEMENT_LINK_NAME = \"mgmt\";\n     private static final String MANAGEMENT_ADDRESS = \"$management\";\n \n+    /** This is used in setting up management chhannel and it is always fixed.\n+     * This is not used by sdk user trying to receive/send messages.*/\n+    public static final SenderSettleMode MANAGEMENT_SEND_SETTLE_MODE = SenderSettleMode.SETTLED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM4OTk4Mw=="}, "originalCommit": {"oid": "e1bb4c013c29e1d068a6a12282117dd0f72072d5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MDk1Ng==", "bodyText": "AppProperties as a parameter isn't necessary, you always pass the same parameter.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391390956", "createdAt": "2020-03-12T04:04:55Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -46,79 +47,107 @@\n     private static final String MANAGEMENT_SECURITY_TOKEN_KEY = \"security_token\";\n \n     // Well-known values for the service request.\n-    private static final String READ_OPERATION_VALUE = \"READ\";\n     private static final String PEEK_OPERATION_VALUE = AmqpConstants.VENDOR + \":peek-message\";\n-    private static final String MANAGEMENT_EVENTHUB_ENTITY_TYPE = AmqpConstants.VENDOR + \":servicebus\";\n+    private static final String MANAGEMENT_SERVICEBUS_ENTITY_TYPE = AmqpConstants.VENDOR + \":servicebus\";\n     private static final String MANAGEMENT_SERVER_TIMEOUT = AmqpConstants.VENDOR + \":server-timeout\";\n \n-\n-    private final TokenCredential tokenProvider;\n     private final Mono<RequestResponseChannel> channelMono;\n     private final Scheduler scheduler;\n-    private final String topicOrQueueName;\n     private final MessageSerializer messageSerializer;\n-    private final TokenManagerProvider tokenManagerProvider;\n \n-    ManagementChannel(Mono<RequestResponseChannel> responseChannelMono, String topicOrQueueName,\n-                      TokenCredential credential, TokenManagerProvider tokenManagerProvider,\n-                      MessageSerializer messageSerializer, Scheduler scheduler) {\n+    /*This is to maintain cbs node and get authorization.*/\n+    private final TokenManager cbsBasedTokenManager;\n+\n+    // Maintain last peek sequence number\n+    private AtomicReference<Long>  lastPeekedSequenceNumber = new AtomicReference<>(0L);\n+    private AtomicReference<Boolean> cbsBasedTokenManagerCalled = new AtomicReference<>(false);\n+\n \n-        this.tokenManagerProvider = Objects.requireNonNull(tokenManagerProvider,\n-            \"'tokenManagerProvider' cannot be null.\");\n-        this.tokenProvider = Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n-        this.topicOrQueueName = Objects.requireNonNull(topicOrQueueName, \"'eventHubName' cannot be null.\");\n+\n+    ManagementChannel(Mono<RequestResponseChannel> responseChannelMono,\n+                      MessageSerializer messageSerializer, Scheduler scheduler, TokenManager cbsBasedTokenManager\n+    ) {\n         this.messageSerializer = Objects.requireNonNull(messageSerializer, \"'messageSerializer' cannot be null.\");\n         this.channelMono = Objects.requireNonNull(responseChannelMono, \"'responseChannelMono' cannot be null.\");\n         this.scheduler = Objects.requireNonNull(scheduler, \"'scheduler' cannot be null.\");\n+        this.cbsBasedTokenManager = Objects.requireNonNull(cbsBasedTokenManager,\n+            \"'cbsBasedTokenManager' cannot be null.\");\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n-    public Mono<ServiceBusReceivedMessage> peek() {\n+    public Mono<ServiceBusReceivedMessage> peek(long fromSequenceNumber) {\n \n-        int maxMessages = 2;\n-        long fromSequenceNumber = 1;\n-        final Map<String, Object> properties = new HashMap<>();\n-        properties.put(MANAGEMENT_ENTITY_TYPE_KEY, MANAGEMENT_EVENTHUB_ENTITY_TYPE);\n-        properties.put(MANAGEMENT_ENTITY_NAME_KEY, topicOrQueueName);\n-        properties.put(MANAGEMENT_OPERATION_KEY, READ_OPERATION_VALUE);\n-\n-        return peek(properties, ServiceBusReceivedMessage.class, maxMessages, fromSequenceNumber, null)\n+        return peek(new HashMap<>(), ServiceBusReceivedMessage.class, 1, fromSequenceNumber, null)\n+            .last()\n             .publishOn(scheduler);\n     }\n \n-    private <T> Mono<T> peek(Map<String, Object> appProperties, Class<T> responseType,\n-                             int maxMessages, long fromSequenceNumber, UUID sessionId) {\n-\n-        final String tokenAudience = tokenManagerProvider.getScopesFromResource(topicOrQueueName);\n-\n-        return tokenProvider.getToken(new TokenRequestContext().addScopes(tokenAudience)).flatMap(accessToken -> {\n-            appProperties.put(MANAGEMENT_SECURITY_TOKEN_KEY, accessToken.getToken());\n-\n-            // set mandatory application properties for AMQP message.\n-            appProperties.put(MANAGEMENT_OPERATION_KEY, PEEK_OPERATION_VALUE);\n-            appProperties.put(MANAGEMENT_SERVER_TIMEOUT, \"\" + 1000 * 30);\n-\n-            final Message request = Proton.message();\n-            final ApplicationProperties applicationProperties = new ApplicationProperties(appProperties);\n-            request.setApplicationProperties(applicationProperties);\n-\n-            // set mandatory properties on AMQP message body\n-            HashMap<String, Object> requestBodyMap = new HashMap<>();\n-            requestBodyMap.put(ServiceBusConstants.REQUEST_RESPONSE_FROM_SEQUENCE_NUMBER, fromSequenceNumber);\n-            requestBodyMap.put(ServiceBusConstants.REQUEST_RESPONSE_MESSAGE_COUNT, maxMessages);\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<ServiceBusReceivedMessage> peek() {\n \n-            if (!Objects.isNull(sessionId)) {\n-                requestBodyMap.put(ServiceBusConstants.REQUEST_RESPONSE_SESSION_ID, sessionId);\n-            }\n+        return peek(this.lastPeekedSequenceNumber.get() + 1);\n+    }\n \n-            request.setBody(new AmqpValue(requestBodyMap));\n+    private <T> Flux<T> peek(Map<String, Object> appProperties, Class<T> responseType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1bb4c013c29e1d068a6a12282117dd0f72072d5"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MTE0Nw==", "bodyText": "You should dispose of the existing one (created in BeforeEach) if you are going to recreate it. It'll still consume resources.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391391147", "createdAt": "2020-03-12T04:05:53Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -54,4 +54,53 @@ void receiveMessageAutoComplete() {\n             })\n             .verifyComplete();\n     }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @Test\n+    void peekMessage() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+        final ReceiveMessageOptions options = new ReceiveMessageOptions().setAutoComplete(true);\n+        receiver = createBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1bb4c013c29e1d068a6a12282117dd0f72072d5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MTI5Nw==", "bodyText": "Should put this in AfterEach, if the test fails at line 163, it'll never be run.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391391297", "createdAt": "2020-03-12T04:06:34Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -122,6 +130,43 @@ void teardown() {\n         consumer.close();\n     }\n \n+    /**\n+     * Verifies that this peek one messages.\n+     */\n+    @Test\n+    void peekOneMessage() {\n+        // Arrange\n+        final int numberOfEvents = 1;\n+        when(managementNode.peek())\n+            .thenReturn(Mono.just(mock(ServiceBusReceivedMessage.class)));\n+\n+        // Act & Assert\n+        StepVerifier.create(consumer.peek())\n+            .expectNextCount(numberOfEvents)\n+            .verifyComplete();\n+\n+    }\n+\n+    /**\n+     * Verifies that this peek one messages from a sequence Number.\n+     */\n+    @Test\n+    void peekWithSequenceOneMessage() {\n+        // Arrange\n+        final int numberOfEvents = 1;\n+        final int fromSequenceNumber = 10;\n+\n+        when(managementNode.peek(fromSequenceNumber))\n+            .thenReturn(Mono.just(mock(ServiceBusReceivedMessage.class)));\n+\n+        // Act & Assert\n+        StepVerifier.create(consumer.peek(fromSequenceNumber))\n+            .expectNextCount(numberOfEvents)\n+            .verifyComplete();\n+\n+        Mockito.framework().clearInlineMocks();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1bb4c013c29e1d068a6a12282117dd0f72072d5"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MTM1Mw==", "bodyText": "Do you have a test that peeks the next sequence number?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391391353", "createdAt": "2020-03-12T04:06:48Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -122,6 +130,43 @@ void teardown() {\n         consumer.close();\n     }\n \n+    /**\n+     * Verifies that this peek one messages.\n+     */\n+    @Test\n+    void peekOneMessage() {\n+        // Arrange\n+        final int numberOfEvents = 1;\n+        when(managementNode.peek())\n+            .thenReturn(Mono.just(mock(ServiceBusReceivedMessage.class)));\n+\n+        // Act & Assert\n+        StepVerifier.create(consumer.peek())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1bb4c013c29e1d068a6a12282117dd0f72072d5"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMjc2ODc4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#pullrequestreview-373276878", "createdAt": "2020-03-12T04:50:08Z", "commit": {"oid": "e1bb4c013c29e1d068a6a12282117dd0f72072d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d103c4673b363d11d266e2145ed7cb7ca238624c", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d103c4673b363d11d266e2145ed7cb7ca238624c", "committedDate": "2020-03-12T05:56:48Z", "message": "More review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c395b849f3c44758c20b0ebbb09784e456eca30d", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c395b849f3c44758c20b0ebbb09784e456eca30d", "committedDate": "2020-03-12T06:20:31Z", "message": "trigger pipeline"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 766, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}