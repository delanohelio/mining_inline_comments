{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMjY2MDY3", "number": 9188, "title": "Persistence token cache for Mac & Linux with new MSAL ext", "bodyText": "Here lists the set of design decisions we need to make, to go from the MSAL shared token cache accessors to a user-friendly SharedTokenCacheCredential design that works seamlessly and effortlessly across platforms and environments.\nUser interface for credentials\nscope\nQ: What credentials are we supporting shared token cache?\nA: All user account credentials and service principal credentials.\nuser account credentials (public client applications)\nQ: Enable or disable reading from the shared token cache by default?\nA: Disable.\nQ: Enable or disable writing to the shared token cache by default?\nA: Disable.\nQ: What environment variable to specify which account if there are multiple?\nA: AZURE_USERNAME.\nservice principal credentials (confidential client applications)\nQ: Do we want to support token cache for this?\nA: Yes.\nQ: Enable or disable reading from the shared token cache by default?\nA: Disable.\nQ: Enable or disable writing from the shared token cache by default?\nA: Disable.\nQ: What environment variable to specify which service principal if there are multiple?\nA: N/A \u2013 will be specified on the ConfidentialClientApplication\nQ: If both AZURE_USERNAME and AZURE_CLIENT_ID are present, what does it do?\nA: N/A\nconfigurations\nQ: Do we have one method to enable both read & write, or separate methods?\nA: One method.\nQ: Do we start writing to cache in SharedTokenCacheCredential now?\nA: Yes\nQ: Do we allow configuring where the token cache is stored?\nA: No\noperating system specifics\nQ: Do we automatically fallback to unprotected file on Linux if Gnome keyring item is unavailable?\nA: No. Allow through a property \u201callowUnencryptedCache\u201d.\nShared token cache implementation\nstorage locations for user accounts\nQ: Where to store the DPAPI encrypted file on Windows?\nA: {user.home}\\AppData\\Local.IdentityService\\msal.cache\nQ: Where to store the secret item in Keychain on Mac?\nA: Service = Microsoft.Developer.IdentityService, Account = MSALCache\nQ: Where to store the secret item in Gnome Keyring?\nA: Under default keyring, with item label \u201cMSALCache\u201d, and schema \u201cmsal.cache\u201d.\nQ: Where to store the secret item as an unprotected file on Linux?\nA: $HOME/.IdentityService/msal.cache\n(Document all these to be implementations and shouldn\u2019t be taken as a hard dependency)\nstorage locations for service principals\nQ: Do we merge the token cache data for service principals with the user accounts?\nA: Hopefully no, to avoid service principals peeking into the user tokens\nQ: If the answer is no for the above question, specify the locations for all questions in Article 2.1.\nA: MSALConfidentialCache, msal.confidential.cache\nError handling & logging\nexceptions\nQ: What exceptions do we throw if DPAPI encrypted file cannot be found on Windows, or Keychain item is unavailable on Mac, or Gnome Keyring item is unavailable on Linux, or unprotected file is unavailable?\nA: CredentialUnavailableException for SharedTokenCacheCredential, ClientAuthenticationException for others if enabled\nQ: What exceptions do we throw if the file, or the Keychain/Keyring item is available, but cannot be parsed or error out for any other reasons?\nA: Wrap them in ClientAuthenticationException / AuthenticationFailedException.\nlogging\nQ: What information do we log in this process?\nA: 1) What platform we are on and 2) if the token cache access succeeded or failed. No information of where the token cache is located will be logged.\n\nfor sure, 1) potentially in the future\n\ntransient errors\nQ: Is there a plan to detect and retry transient errors, like a race condition that MSAL fails to prevent?\nA: for now no.", "createdAt": "2020-03-18T07:29:11Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188", "merged": true, "mergeCommit": {"oid": "f1e23f87592b6f9fc361cb7995e1d1b8ac5c03e1"}, "closed": true, "closedAt": "2020-05-04T22:08:59Z", "author": {"login": "jianghaolu"}, "timelineItems": {"totalCount": 78, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOXUv1AH2gAyMzkwMjY2MDY3Ojg5OGEwMmYxNmUxYTcyN2Q1MGQzZGZiNmJiYTk3NmQyNjk0OTE2MmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceGNixAH2gAyMzkwMjY2MDY3OjNkZmYxZjM0Mzc1NzVmMWU5NTgxYmQ0MmZkZTNjOWZhOWM2OTQ3ZGY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "898a02f16e1a727d50d3dfb6bba976d26949162e", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/898a02f16e1a727d50d3dfb6bba976d26949162e", "committedDate": "2020-03-17T00:11:30Z", "message": "Depend on msal persistence extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "132c01a578726cf3c8227a80e6bc38ba34171470", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/132c01a578726cf3c8227a80e6bc38ba34171470", "committedDate": "2020-03-18T07:27:29Z", "message": "Initial draft of shared token cache for Mac and Linux"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c034433635405cd77f8f5dd3a03f504e645a6e8", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3c034433635405cd77f8f5dd3a03f504e645a6e8", "committedDate": "2020-03-18T07:31:32Z", "message": "Clean up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NjE5NDk1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-376619495", "createdAt": "2020-03-18T07:34:19Z", "commit": {"oid": "3c034433635405cd77f8f5dd3a03f504e645a6e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzozNDoxOVrOF35ELA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzozNDoxOVrOF35ELA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1MDk1Ng==", "bodyText": "Keychain service & account names are consistent with Python ext at https://github.com/AzureAD/microsoft-authentication-extensions-for-python/blob/71b5301cb8c4768a9f439bde20750d448062944c/msal_extensions/token_cache.py#L141 and this test in .NET ext: https://github.com/AzureAD/microsoft-authentication-extensions-for-dotnet/blob/85c1e8ec283b940b1cc34eae44ac37fa645738ff/tests/Microsoft.Identity.Client.Extensions.Msal.UnitTests/MsalCacheStorageTests.cs", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r394150956", "createdAt": "2020-03-18T07:34:19Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredential.java", "diffHunk": "@@ -23,6 +27,18 @@\n  */\n @Immutable\n public final class DefaultAzureCredential extends ChainedTokenCredential {\n+    private static final String DEFAULT_CACHE_FILE_NAME = \"msal.cache\";\n+    private static final Path DEFAULT_CACHE_DIRECTORY = Platform.isWindows() ?\n+            Paths.get(System.getProperty(\"user.home\"), \"AppData\", \"Local\", \".IdentityService\", \"msal.cache\") :\n+            Paths.get(System.getProperty(\"user.home\"),\".IdentityService\", \"msal.cache\");\n+    private static final String DEFAULT_KEYCHAIN_SERVICE = \"Microsoft.Developer.IdentityService\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c034433635405cd77f8f5dd3a03f504e645a6e8"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NjE5OTY4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-376619968", "createdAt": "2020-03-18T07:35:16Z", "commit": {"oid": "3c034433635405cd77f8f5dd3a03f504e645a6e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzozNToxN1rOF35Flg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzozNToxN1rOF35Flg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1MTMxOA==", "bodyText": "This is consistent with Visual Studio: https://github.com/microsoft/Git-Credential-Manager-Core/blob/master/src/shared/Microsoft.Git.CredentialManager/Authentication/MicrosoftAuthentication.cs#L228", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r394151318", "createdAt": "2020-03-18T07:35:17Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredential.java", "diffHunk": "@@ -23,6 +27,18 @@\n  */\n @Immutable\n public final class DefaultAzureCredential extends ChainedTokenCredential {\n+    private static final String DEFAULT_CACHE_FILE_NAME = \"msal.cache\";\n+    private static final Path DEFAULT_CACHE_DIRECTORY = Platform.isWindows() ?\n+            Paths.get(System.getProperty(\"user.home\"), \"AppData\", \"Local\", \".IdentityService\", \"msal.cache\") :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c034433635405cd77f8f5dd3a03f504e645a6e8"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NjIwMTky", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-376620192", "createdAt": "2020-03-18T07:35:43Z", "commit": {"oid": "3c034433635405cd77f8f5dd3a03f504e645a6e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzozNTo0M1rOF35GUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzozNTo0M1rOF35GUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1MTUwNA==", "bodyText": "This is invented by me - open for discussion", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r394151504", "createdAt": "2020-03-18T07:35:43Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredential.java", "diffHunk": "@@ -23,6 +27,18 @@\n  */\n @Immutable\n public final class DefaultAzureCredential extends ChainedTokenCredential {\n+    private static final String DEFAULT_CACHE_FILE_NAME = \"msal.cache\";\n+    private static final Path DEFAULT_CACHE_DIRECTORY = Platform.isWindows() ?\n+            Paths.get(System.getProperty(\"user.home\"), \"AppData\", \"Local\", \".IdentityService\", \"msal.cache\") :\n+            Paths.get(System.getProperty(\"user.home\"),\".IdentityService\", \"msal.cache\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c034433635405cd77f8f5dd3a03f504e645a6e8"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NjIwNDYz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-376620463", "createdAt": "2020-03-18T07:36:15Z", "commit": {"oid": "3c034433635405cd77f8f5dd3a03f504e645a6e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzozNjoxNVrOF35HNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzozNjoxNVrOF35HNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1MTczNQ==", "bodyText": "Line 39 and 40 are also from the test https://github.com/AzureAD/microsoft-authentication-extensions-for-dotnet/blob/85c1e8ec283b940b1cc34eae44ac37fa645738ff/tests/Microsoft.Identity.Client.Extensions.Msal.UnitTests/MsalCacheStorageTests.cs", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r394151735", "createdAt": "2020-03-18T07:36:15Z", "author": {"login": "jianghaolu"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredential.java", "diffHunk": "@@ -23,6 +27,18 @@\n  */\n @Immutable\n public final class DefaultAzureCredential extends ChainedTokenCredential {\n+    private static final String DEFAULT_CACHE_FILE_NAME = \"msal.cache\";\n+    private static final Path DEFAULT_CACHE_DIRECTORY = Platform.isWindows() ?\n+            Paths.get(System.getProperty(\"user.home\"), \"AppData\", \"Local\", \".IdentityService\", \"msal.cache\") :\n+            Paths.get(System.getProperty(\"user.home\"),\".IdentityService\", \"msal.cache\");\n+    private static final String DEFAULT_KEYCHAIN_SERVICE = \"Microsoft.Developer.IdentityService\";\n+    private static final String DEFAULT_KEYCHAIN_ACCOUNT = \"MSALCache\";\n+    private static final String DEFAULT_KEYRING_NAME = \"default\";\n+    private static final KeyRingItemSchema DEFAULT_KEYRING_SCHEMA = KeyRingItemSchema.GENERIC_SECRET;\n+    private static final String DEFAULT_KEYRING_ITEM_NAME = DEFAULT_KEYCHAIN_ACCOUNT;\n+    private static final String DEFAULT_KEYRING_ATTR_NAME = \"MsalClientID\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c034433635405cd77f8f5dd3a03f504e645a6e8"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49acab7e6a50a2cbf902b3fb78565792d34b260a", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/49acab7e6a50a2cbf902b3fb78565792d34b260a", "committedDate": "2020-03-18T21:18:46Z", "message": "Add msal ext to module-info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f50d8b7e12ea6e7b535b025192c678a7732bc26e", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f50d8b7e12ea6e7b535b025192c678a7732bc26e", "committedDate": "2020-03-18T22:40:05Z", "message": "Wrap MSAL error and fix module-info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e4c467657ae1143afcb456d0d1faca0df7adc09", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4e4c467657ae1143afcb456d0d1faca0df7adc09", "committedDate": "2020-03-18T23:13:23Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fca0133afb51e296ab1ea63dfcc02fcb37ff4935", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fca0133afb51e296ab1ea63dfcc02fcb37ff4935", "committedDate": "2020-03-18T23:37:50Z", "message": "Fix spotbugs and naming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "571b44c4cb9ed408cea69de5e323ee9206224834", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/571b44c4cb9ed408cea69de5e323ee9206224834", "committedDate": "2020-03-23T21:20:30Z", "message": "Fix default azure credential test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2c5dc36599d20d8277d47228ac94d6d6d8af086", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e2c5dc36599d20d8277d47228ac94d6d6d8af086", "committedDate": "2020-04-01T19:36:11Z", "message": "Add initial perf test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd341e7d557ee525145f9f7b881c07709ee0d85e", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/dd341e7d557ee525145f9f7b881c07709ee0d85e", "committedDate": "2020-04-03T21:20:52Z", "message": "more perf testing work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cba579bc24e6d656a48be916760d4d3a7f16f30", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7cba579bc24e6d656a48be916760d4d3a7f16f30", "committedDate": "2020-04-06T23:25:10Z", "message": "Move default to identity client options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "600fc6b4af77373b5bb1e56bc9e73e8329eed72c", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/600fc6b4af77373b5bb1e56bc9e73e8329eed72c", "committedDate": "2020-04-07T01:43:34Z", "message": "Fix array access in identity client options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c53b243c38cee41ccd8aa2a6a07319124fbb39e", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1c53b243c38cee41ccd8aa2a6a07319124fbb39e", "committedDate": "2020-04-07T06:49:50Z", "message": "Fix libsecret on Windows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3539779b9c632bd28823c2e9752989a3517c184e", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3539779b9c632bd28823c2e9752989a3517c184e", "committedDate": "2020-04-07T21:59:45Z", "message": "Remove shared token cache configurations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80bb671f72a12fa4058efde35f03a5f0fca6d304", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/80bb671f72a12fa4058efde35f03a5f0fca6d304", "committedDate": "2020-04-07T22:04:37Z", "message": "Clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b28941119a5df60ed5f687f59fdd733988c56179", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b28941119a5df60ed5f687f59fdd733988c56179", "committedDate": "2020-04-07T22:19:28Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java into persistence-perf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a83c9ab0df31f2a9b17efbdee519ca2c03671917", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a83c9ab0df31f2a9b17efbdee519ca2c03671917", "committedDate": "2020-04-07T23:16:30Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52e11f6e41c1d0908b4a5af476326f99611b72db", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/52e11f6e41c1d0908b4a5af476326f99611b72db", "committedDate": "2020-04-07T23:21:08Z", "message": "Fix versions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a79873983b33434529421634dc46231450f44dc", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5a79873983b33434529421634dc46231450f44dc", "committedDate": "2020-04-07T23:37:49Z", "message": "Fix versions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfcf3b3302fcce9049223909adc90bd233b901b7", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bfcf3b3302fcce9049223909adc90bd233b901b7", "committedDate": "2020-04-08T00:03:24Z", "message": "Add version again"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTc3MTM5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-389577139", "createdAt": "2020-04-08T00:23:53Z", "commit": {"oid": "bfcf3b3302fcce9049223909adc90bd233b901b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3660848340c4b749d9aa07eb91e4022ad3aab0f6", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3660848340c4b749d9aa07eb91e4022ad3aab0f6", "committedDate": "2020-04-08T20:53:44Z", "message": "Lazy initialize pub client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c5606a4e0968a9bece6c96b4ea612089d18fa94", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8c5606a4e0968a9bece6c96b4ea612089d18fa94", "committedDate": "2020-04-08T21:05:25Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java into persistence-perf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "435a4f25db9eb59dcad9c6deb5853b17836a1565", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/435a4f25db9eb59dcad9c6deb5853b17836a1565", "committedDate": "2020-04-08T21:25:24Z", "message": "Defer Mono.fromFuture()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ad8ef8bbcaececf6ce2ba6855631111601aaec0", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4ad8ef8bbcaececf6ce2ba6855631111601aaec0", "committedDate": "2020-04-08T22:05:15Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java into persistence-perf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ac9807992e1983c20ba5b684a67b174b439629d", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5ac9807992e1983c20ba5b684a67b174b439629d", "committedDate": "2020-04-08T22:11:25Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b48bbb94412070d81f71d096262f9204911cb32", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0b48bbb94412070d81f71d096262f9204911cb32", "committedDate": "2020-04-13T22:50:03Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java into persistence-perf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8245f0ddd25be0bac8b2859827a67e4cf08b2bb", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f8245f0ddd25be0bac8b2859827a67e4cf08b2bb", "committedDate": "2020-04-14T18:37:01Z", "message": "Fix in perf test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8d572a807ecb35cd78d0fb8516f2b2cee3ce12f", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e8d572a807ecb35cd78d0fb8516f2b2cee3ce12f", "committedDate": "2020-04-14T18:41:16Z", "message": "Merge branch 'persistence' of github.com:jianghaolu/azure-sdk-for-java into persistence-perf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed6b0137e88e994d19dabf75263dd001404da094", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ed6b0137e88e994d19dabf75263dd001404da094", "committedDate": "2020-04-20T21:59:37Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java into persistence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1472726a6612a02a1fd330071c1aaad23a903a5b", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1472726a6612a02a1fd330071c1aaad23a903a5b", "committedDate": "2020-04-21T07:15:18Z", "message": "Does not throw except SharedTokenCacheCredential"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cc825445fa02cfa045a30e07ce3a61a575965cc", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1cc825445fa02cfa045a30e07ce3a61a575965cc", "committedDate": "2020-04-21T18:15:47Z", "message": "Fix merge error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b1e50d109738ef602e5c0370617d420d503fdd9", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6b1e50d109738ef602e5c0370617d420d503fdd9", "committedDate": "2020-04-21T21:59:58Z", "message": "x-include-update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a16cadc09e7e61a66ef9bdcc1e4c8baab99a0ec", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a16cadc09e7e61a66ef9bdcc1e4c8baab99a0ec", "committedDate": "2020-04-22T05:46:47Z", "message": "Minor change in public client creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db0eb379f701bf774bb710128c34afca682da12a", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/db0eb379f701bf774bb710128c34afca682da12a", "committedDate": "2020-04-22T06:39:13Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "775568f00d9d8b942c670b74412c0e0112a6d15b", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/775568f00d9d8b942c670b74412c0e0112a6d15b", "committedDate": "2020-04-22T06:52:05Z", "message": "Revert persistent cache demo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "006b191ee58398d9114cdab3625bd1a87ce36726", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/006b191ee58398d9114cdab3625bd1a87ce36726", "committedDate": "2020-04-22T07:26:35Z", "message": "Align Linux default settings with MSAL.NET tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjU4OTIz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-398658923", "createdAt": "2020-04-22T23:26:31Z", "commit": {"oid": "ed6b0137e88e994d19dabf75263dd001404da094"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzoyNjozMlrOGKP8jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzoyNjozMlrOGKP8jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwMDIwNQ==", "bodyText": "Looks like a bad merge here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r413400205", "createdAt": "2020-04-22T23:26:32Z", "author": {"login": "weshaggard"}, "path": "eng/versioning/version_client.txt", "diffHunk": "@@ -19,8 +19,9 @@ com.azure:azure-cosmos-examples;4.0.1-beta.1;4.0.1-beta.1\n com.azure:azure-cosmos-benchmark;4.0.1-beta.1;4.0.1-beta.1\n com.azure:azure-data-appconfiguration;1.1.1;1.2.0-beta.1\n com.azure:azure-e2e;1.0.0-beta.1;1.0.0-beta.1\n-com.azure:azure-identity;1.0.4;1.1.0-beta.3\n+com.azure:azure-identity;1.0.5;1.1.0-beta.4\n com.azure:azure-identity-perf;1.0.0-beta.1;1.0.0-beta.1\n+>>>>>>> 3a255eb005748305722895bc50d3dd4ff5789bdb", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6b0137e88e994d19dabf75263dd001404da094"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MzI5MDIx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-399329021", "createdAt": "2020-04-23T17:38:42Z", "commit": {"oid": "006b191ee58398d9114cdab3625bd1a87ce36726"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzozODo0M1rOGK0Krg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzo1MDo0M1rOGK0qcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5MzY0Ng==", "bodyText": "nit: to be consistent with the rest of the javadoc change this to\n@return An updated instance of this builder with useUnprotectedFileOnLinux set as specified.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r413993646", "createdAt": "2020-04-23T17:38:43Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AadCredentialBuilderBase.java", "diffHunk": "@@ -70,4 +70,31 @@ public T executorService(ExecutorService executorService) {\n         this.identityClientOptions.setExecutorService(executorService);\n         return (T) this;\n     }\n+\n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param useUnprotectedFileOnLinux whether to use an unprotected file for cache storage.\n+     *\n+     * @return The updated T object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006b191ee58398d9114cdab3625bd1a87ce36726"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5MzgzNw==", "bodyText": "same as above", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r413993837", "createdAt": "2020-04-23T17:39:00Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AadCredentialBuilderBase.java", "diffHunk": "@@ -70,4 +70,31 @@ public T executorService(ExecutorService executorService) {\n         this.identityClientOptions.setExecutorService(executorService);\n         return (T) this;\n     }\n+\n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param useUnprotectedFileOnLinux whether to use an unprotected file for cache storage.\n+     *\n+     * @return The updated T object.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public T useUnprotectedTokenCacheFileOnLinux(boolean useUnprotectedFileOnLinux) {\n+        this.identityClientOptions.setUseUnprotectedTokenCacheFileOnLinux(useUnprotectedFileOnLinux);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Disable using the shared token cache.\n+     *\n+     * @param disabled whether to disable using the shared token cache.\n+     *\n+     * @return The updated identity client options.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006b191ee58398d9114cdab3625bd1a87ce36726"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NDkwNw==", "bodyText": "Since the javadoc mentions that this is an expandable enum, should this class extend from ExpandableStringEnum?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r413994907", "createdAt": "2020-04-23T17:40:37Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/KeyringItemSchema.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity;\n+\n+/**\n+ * An expandable enum for types of item schema in a Keyring.\n+ */\n+public final class KeyringItemSchema {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006b191ee58398d9114cdab3625bd1a87ce36726"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5ODk4Ng==", "bodyText": "Use log instead of e.printStackTrace()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r413998986", "createdAt": "2020-04-23T17:46:30Z", "author": {"login": "srnagar"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -490,6 +529,86 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             });\n     }\n \n+    /**\n+     * Gets token from shared token cache\n+     * */\n+    public Mono<AccessToken> authenticateWithSharedTokenCache(TokenRequestContext request, String username) {\n+        String authorityUrl = options.getAuthorityHost().replaceAll(\"/+$\", \"\") + \"/\" + tenantId + \"/\";\n+        // find if the Public Client app with the requested username exists\n+        return Mono.fromFuture(() -> getPublicClientApplication(true).getAccounts())\n+                .onErrorResume(t -> Mono.error(new CredentialUnavailableException(\n+                        \"Cannot get accounts from token cache. Error: \" + t.getMessage(), t)))\n+                .flatMap(set -> {\n+                    IAccount requestedAccount;\n+                    Map<String, IAccount> accounts = new HashMap<>(); // home account id -> account\n+\n+                    for (IAccount cached : set) {\n+                        if (username == null || username.equals(cached.username())) {\n+                            if (!accounts.containsKey(cached.homeAccountId())) { // only put the first one\n+                                accounts.put(cached.homeAccountId(), cached);\n+                            }\n+                        }\n+                    }\n+\n+                    if (accounts.size() == 0) {\n+                        if (username == null) {\n+                            return Mono.error(new CredentialUnavailableException(\"No accounts were discovered in the \"\n+                                    + \"shared token cache. To fix, authenticate through tooling supporting azure \"\n+                                    + \"developer sign on.\"));\n+                        } else {\n+                            return Mono.error(new CredentialUnavailableException(String.format(\"User account '%s' was \"\n+                                    + \"not found in the shared token cache. Discovered Accounts: [ '%s' ]\", username,\n+                                    set.stream().map(IAccount::username).distinct()\n+                                            .collect(Collectors.joining(\", \")))));\n+                        }\n+                    } else if (accounts.size() > 1) {\n+                        if (username == null) {\n+                            return Mono.error(new CredentialUnavailableException(\"Multiple accounts were discovered \"\n+                                    + \"in the shared token cache. To fix, set the AZURE_USERNAME and AZURE_TENANT_ID \"\n+                                    + \"environment variable to the preferred username, or specify it when \"\n+                                    + \"constructing SharedTokenCacheCredential.\"));\n+                        } else {\n+                            return Mono.error(new CredentialUnavailableException(\"Multiple entries for the user \"\n+                                    + \"account \" + username + \" were found in the shared token cache. This is not \"\n+                                    + \"currently supported by the SharedTokenCacheCredential.\"));\n+                        }\n+                    } else {\n+                        requestedAccount = accounts.values().iterator().next();\n+                    }\n+\n+                    // if it does, then request the token\n+                    SilentParameters params = SilentParameters.builder(\n+                            new HashSet<>(request.getScopes()), requestedAccount)\n+                            .authorityUrl(authorityUrl)\n+                            .build();\n+\n+                    SilentParameters forceParams = SilentParameters.builder(\n+                            new HashSet<>(request.getScopes()), requestedAccount)\n+                            .authorityUrl(authorityUrl)\n+                            .forceRefresh(true)\n+                            .build();\n+\n+                    CompletableFuture<IAuthenticationResult> future;\n+                    try {\n+                        future = getPublicClientApplication(false).acquireTokenSilently(params);\n+                        return Mono.fromFuture(() -> future).map(result ->\n+                                    new MsalToken(result, options))\n+                                .filter(t -> !t.isExpired())\n+                                .switchIfEmpty(Mono.defer(() -> Mono.fromFuture(() -> {\n+                                        try {\n+                                            return getPublicClientApplication(false).acquireTokenSilently(forceParams);\n+                                        } catch (MalformedURLException e) {\n+                                            throw logger.logExceptionAsWarning(new RuntimeException(e));\n+                                        }\n+                                    }\n+                                ).map(result -> new MsalToken(result, options))));\n+                    } catch (MalformedURLException e) {\n+                        e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006b191ee58398d9114cdab3625bd1a87ce36726"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwMTc3Ng==", "bodyText": "Use the artifact id here: azure-identity-perf", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r414001776", "createdAt": "2020-04-23T17:50:43Z", "author": {"login": "srnagar"}, "path": "sdk/identity/pom.xml", "diffHunk": "@@ -12,5 +12,6 @@\n     <!-- NOTE: Commenting out becuase we are now binary composed.\n     -->\n     <module>azure-identity</module>\n+    <module>perf-test</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006b191ee58398d9114cdab3625bd1a87ce36726"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb9c6150b09493f5f45eebe6e563b428401edf51", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/eb9c6150b09493f5f45eebe6e563b428401edf51", "committedDate": "2020-04-23T18:07:47Z", "message": "Fix readme and use expandable enum"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDU1MDkz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-399455093", "createdAt": "2020-04-23T20:34:15Z", "commit": {"oid": "eb9c6150b09493f5f45eebe6e563b428401edf51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDozNDoxNlrOGK69fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDozNDoxNlrOGK69fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwNDk1Nw==", "bodyText": "I think that persistence of the token cache should be opt-in rather than opt out. Also I'm not sure we can put this on the base builder for all credentials, for instance what does it mean to create a SharedTokenCachceCredential with the shared token cache disabled.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r414104957", "createdAt": "2020-04-23T20:34:16Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AadCredentialBuilderBase.java", "diffHunk": "@@ -70,4 +70,31 @@ public T executorService(ExecutorService executorService) {\n         this.identityClientOptions.setExecutorService(executorService);\n         return (T) this;\n     }\n+\n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param useUnprotectedFileOnLinux whether to use an unprotected file for cache storage.\n+     *\n+     * @return An updated instance of this builder with the unprotected token cache setting set as specified.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public T useUnprotectedTokenCacheFileOnLinux(boolean useUnprotectedFileOnLinux) {\n+        this.identityClientOptions.setUseUnprotectedTokenCacheFileOnLinux(useUnprotectedFileOnLinux);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Disable using the shared token cache.\n+     *\n+     * @param disabled whether to disable using the shared token cache.\n+     *\n+     * @return An updated instance of this builder with if the shared token cache disabled specified.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public T disableSharedTokenCache(boolean disabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb9c6150b09493f5f45eebe6e563b428401edf51"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDU3MTY0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-399457164", "createdAt": "2020-04-23T20:37:21Z", "commit": {"oid": "eb9c6150b09493f5f45eebe6e563b428401edf51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDozNzoyMVrOGK7E1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDozNzoyMVrOGK7E1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwNjgzOA==", "bodyText": "Is this meant to be part of the public API? I'd prefer to keep these details internal.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r414106838", "createdAt": "2020-04-23T20:37:21Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/KeyringItemSchema.java", "diffHunk": "@@ -0,0 +1,20 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+\n+/**\n+ * An expandable enum for types of item schema in a Keyring.\n+ */\n+\n+public final class KeyringItemSchema extends ExpandableStringEnum<KeyringItemSchema> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb9c6150b09493f5f45eebe6e563b428401edf51"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTE4Mzkw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-399518390", "createdAt": "2020-04-23T22:22:26Z", "commit": {"oid": "eb9c6150b09493f5f45eebe6e563b428401edf51"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjoyMjoyNlrOGK-grA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjoyNzozMFrOGK-pOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2MzExNg==", "bodyText": "do we need them to be static ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r414163116", "createdAt": "2020-04-23T22:22:26Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity-perf/src/main/java/com/azure/identity/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.perf.core;\n+\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.identity.InteractiveBrowserCredential;\n+import com.azure.identity.InteractiveBrowserCredentialBuilder;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+import reactor.core.publisher.Mono;\n+\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+    protected static final String CLI_CLIENT_ID = \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb9c6150b09493f5f45eebe6e563b428401edf51"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NTMwNw==", "bodyText": "ManagedIdentityCredential and DefaultAzureCredential inherit from CredentialBuilderBase, so they will not inherit this setter currently.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r414165307", "createdAt": "2020-04-23T22:27:30Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AadCredentialBuilderBase.java", "diffHunk": "@@ -70,4 +70,31 @@ public T executorService(ExecutorService executorService) {\n         this.identityClientOptions.setExecutorService(executorService);\n         return (T) this;\n     }\n+\n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param useUnprotectedFileOnLinux whether to use an unprotected file for cache storage.\n+     *\n+     * @return An updated instance of this builder with the unprotected token cache setting set as specified.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public T useUnprotectedTokenCacheFileOnLinux(boolean useUnprotectedFileOnLinux) {\n+        this.identityClientOptions.setUseUnprotectedTokenCacheFileOnLinux(useUnprotectedFileOnLinux);\n+        return (T) this;\n+    }\n+\n+    /**\n+     * Disable using the shared token cache.\n+     *\n+     * @param disabled whether to disable using the shared token cache.\n+     *\n+     * @return An updated instance of this builder with if the shared token cache disabled specified.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public T disableSharedTokenCache(boolean disabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwNDk1Nw=="}, "originalCommit": {"oid": "eb9c6150b09493f5f45eebe6e563b428401edf51"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abfbea9b13903775212825c1fd6c261b690e5d2e", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/abfbea9b13903775212825c1fd6c261b690e5d2e", "committedDate": "2020-04-25T20:09:08Z", "message": "Merge branch 'persistence' of github.com:jianghaolu/azure-sdk-for-java into persistence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "233ce5cb67766680997b09cd944cda342f92a1c0", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/233ce5cb67766680997b09cd944cda342f92a1c0", "committedDate": "2020-04-29T06:24:47Z", "message": "Disable shared token cache by default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0b1725bcf66d5d879ba8a764e1281886193b101", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a0b1725bcf66d5d879ba8a764e1281886193b101", "committedDate": "2020-04-29T06:44:29Z", "message": "Allow enabling on select builders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77c8a593e6b0ca17b71912361e2ff2c99f83cb99", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/77c8a593e6b0ca17b71912361e2ff2c99f83cb99", "committedDate": "2020-04-29T07:18:41Z", "message": "Wrap exceptions in ClientAuthenticationExceptions when Msal fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c7045cdf0860adb8c52b562390ea12d167a1ffe", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7c7045cdf0860adb8c52b562390ea12d167a1ffe", "committedDate": "2020-04-29T07:23:48Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java into persistence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ed8e7223daf3df49e337c1e163a56ab9459cdb52", "committedDate": "2020-04-29T07:46:50Z", "message": "Address spotbugs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyODUyMTAz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-402852103", "createdAt": "2020-04-29T16:47:26Z", "commit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo0NzoyNlrOGOHzFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo0NzoyNlrOGOHzFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MTAxMg==", "bodyText": "Is this exception message meant to be the same as the one above?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417461012", "createdAt": "2020-04-29T16:47:26Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -144,7 +153,22 @@\n             if (options.getExecutorService() != null) {\n                 publicClientApplicationBuilder.executorService(options.getExecutorService());\n             }\n+            if (options.isSharedTokenCacheEnabled()) {\n+                try {\n+                    publicClientApplicationBuilder.setTokenCacheAccessAspect(\n+                            new PersistenceTokenCacheAccessAspect(options.getPersistenceSettings()));\n+                } catch (Throwable t) {\n+                    if (sharedTokenCacheCredential) {\n+                        throw logger.logExceptionAsError(new CredentialUnavailableException(\n+                            \"Shared token cache is unavailable in this environment.\", t));\n+                    } else {\n+                        throw logger.logExceptionAsError(new ClientAuthenticationException(\n+                            \"Shared token cache is unavailable in this environment.\", null, t));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyODU0MDc2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-402854076", "createdAt": "2020-04-29T16:49:53Z", "commit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo0OTo1M1rOGOH5WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1Njo0OFrOGOIMZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MjYxNg==", "bodyText": "Should this be onErrorMap? This logic looks to be more of an error mapping than an alternate resume from an exception given this will propagate an error.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417462616", "createdAt": "2020-04-29T16:49:53Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with username \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDE2Mg==", "bodyText": "Do we ever want this future to be cancellable? If yes, we will need to add a doFinally operator that will check for cancelled to cancel the future.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417464162", "createdAt": "2020-04-29T16:52:02Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDQ5Ng==", "bodyText": "The defer isn't needed here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417464496", "createdAt": "2020-04-29T16:52:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with username \"\n+                + \"and password\", null, t))).map(ar -> new MsalToken(ar, options));\n     }\n \n     /**\n      * Asynchronously acquire a token from the currently logged in client.\n      *\n      * @param request the details of the token request\n+     * @param account the account used to login to acquire the last token\n      * @return a Publisher that emits an AccessToken\n      */\n-    public Mono<MsalToken> authenticateWithUserRefreshToken(TokenRequestContext request, MsalToken msalToken) {\n+    public Mono<MsalToken> authenticateWithMsalAccount(TokenRequestContext request, IAccount account) {\n         SilentParameters parameters;\n-        if (msalToken.getAccount() != null) {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), msalToken.getAccount()).build();\n+        SilentParameters forceParameters;\n+        if (account != null) {\n+            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account).build();\n+            forceParameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account)\n+                    .forceRefresh(true).build();\n         } else {\n             parameters = SilentParameters.builder(new HashSet<>(request.getScopes())).build();\n+            forceParameters = SilentParameters.builder(new HashSet<>(request.getScopes())).forceRefresh(true).build();\n         }\n         return Mono.defer(() -> {\n             try {\n-                return Mono.fromFuture(publicClientApplication.acquireTokenSilently(parameters))\n-                        .map(ar -> new MsalToken(ar, options));\n+                return Mono.fromFuture(getPublicClientApplication(false).acquireTokenSilently(parameters))\n+                        .map(ar -> new MsalToken(ar, options))\n+                        .filter(t -> !t.isExpired())\n+                        .switchIfEmpty(Mono.defer(() -> Mono.fromFuture(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDg5OQ==", "bodyText": "Should this use a future supplier as below?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417464899", "createdAt": "2020-04-29T16:53:06Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with username \"\n+                + \"and password\", null, t))).map(ar -> new MsalToken(ar, options));\n     }\n \n     /**\n      * Asynchronously acquire a token from the currently logged in client.\n      *\n      * @param request the details of the token request\n+     * @param account the account used to login to acquire the last token\n      * @return a Publisher that emits an AccessToken\n      */\n-    public Mono<MsalToken> authenticateWithUserRefreshToken(TokenRequestContext request, MsalToken msalToken) {\n+    public Mono<MsalToken> authenticateWithMsalAccount(TokenRequestContext request, IAccount account) {\n         SilentParameters parameters;\n-        if (msalToken.getAccount() != null) {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), msalToken.getAccount()).build();\n+        SilentParameters forceParameters;\n+        if (account != null) {\n+            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account).build();\n+            forceParameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account)\n+                    .forceRefresh(true).build();\n         } else {\n             parameters = SilentParameters.builder(new HashSet<>(request.getScopes())).build();\n+            forceParameters = SilentParameters.builder(new HashSet<>(request.getScopes())).forceRefresh(true).build();\n         }\n         return Mono.defer(() -> {\n             try {\n-                return Mono.fromFuture(publicClientApplication.acquireTokenSilently(parameters))\n-                        .map(ar -> new MsalToken(ar, options));\n+                return Mono.fromFuture(getPublicClientApplication(false).acquireTokenSilently(parameters))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NjA5MQ==", "bodyText": "Does account here have to be non-null? If it can be null, could the if/else block be merged to always pass account?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417466091", "createdAt": "2020-04-29T16:54:48Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with username \"\n+                + \"and password\", null, t))).map(ar -> new MsalToken(ar, options));\n     }\n \n     /**\n      * Asynchronously acquire a token from the currently logged in client.\n      *\n      * @param request the details of the token request\n+     * @param account the account used to login to acquire the last token\n      * @return a Publisher that emits an AccessToken\n      */\n-    public Mono<MsalToken> authenticateWithUserRefreshToken(TokenRequestContext request, MsalToken msalToken) {\n+    public Mono<MsalToken> authenticateWithMsalAccount(TokenRequestContext request, IAccount account) {\n         SilentParameters parameters;\n-        if (msalToken.getAccount() != null) {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), msalToken.getAccount()).build();\n+        SilentParameters forceParameters;\n+        if (account != null) {\n+            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NjcwNA==", "bodyText": "Need to use Exceptions.propagate here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417466704", "createdAt": "2020-04-29T16:55:43Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,29 +404,44 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with username \"\n+                + \"and password\", null, t))).map(ar -> new MsalToken(ar, options));\n     }\n \n     /**\n      * Asynchronously acquire a token from the currently logged in client.\n      *\n      * @param request the details of the token request\n+     * @param account the account used to login to acquire the last token\n      * @return a Publisher that emits an AccessToken\n      */\n-    public Mono<MsalToken> authenticateWithUserRefreshToken(TokenRequestContext request, MsalToken msalToken) {\n+    public Mono<MsalToken> authenticateWithMsalAccount(TokenRequestContext request, IAccount account) {\n         SilentParameters parameters;\n-        if (msalToken.getAccount() != null) {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), msalToken.getAccount()).build();\n+        SilentParameters forceParameters;\n+        if (account != null) {\n+            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account).build();\n+            forceParameters = SilentParameters.builder(new HashSet<>(request.getScopes()), account)\n+                    .forceRefresh(true).build();\n         } else {\n             parameters = SilentParameters.builder(new HashSet<>(request.getScopes())).build();\n+            forceParameters = SilentParameters.builder(new HashSet<>(request.getScopes())).forceRefresh(true).build();\n         }\n         return Mono.defer(() -> {\n             try {\n-                return Mono.fromFuture(publicClientApplication.acquireTokenSilently(parameters))\n-                        .map(ar -> new MsalToken(ar, options));\n+                return Mono.fromFuture(getPublicClientApplication(false).acquireTokenSilently(parameters))\n+                        .map(ar -> new MsalToken(ar, options))\n+                        .filter(t -> !t.isExpired())\n+                        .switchIfEmpty(Mono.defer(() -> Mono.fromFuture(() -> {\n+                                try {\n+                                    return getPublicClientApplication(false).acquireTokenSilently(forceParameters);\n+                                } catch (MalformedURLException e) {\n+                                    throw logger.logExceptionAsWarning(new RuntimeException(e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NzE4OA==", "bodyText": "onErrorMap?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417467188", "createdAt": "2020-04-29T16:56:19Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -425,8 +464,9 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             DeviceCodeFlowParameters parameters = DeviceCodeFlowParameters.builder(new HashSet<>(request.getScopes()),\n                 dc -> deviceCodeConsumer.accept(new DeviceCodeInfo(dc.userCode(), dc.deviceCode(),\n                     dc.verificationUri(), OffsetDateTime.now().plusSeconds(dc.expiresIn()), dc.message()))).build();\n-            return publicClientApplication.acquireToken(parameters);\n-        }).map(ar -> new MsalToken(ar, options));\n+            return getPublicClientApplication(false).acquireToken(parameters);\n+        }).onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with device code\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NzI4OQ==", "bodyText": "onErrorMap?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417467289", "createdAt": "2020-04-29T16:56:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -439,11 +479,12 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithAuthorizationCode(TokenRequestContext request, String authorizationCode,\n                                                              URI redirectUrl) {\n-        return Mono.fromFuture(() -> publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             AuthorizationCodeParameters.builder(authorizationCode, redirectUrl)\n                 .scopes(new HashSet<>(request.getScopes()))\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorResume(t -> Mono.error(new ClientAuthenticationException(\"Failed to acquire token with \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NzQ5NA==", "bodyText": "onErrorMap?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r417467494", "createdAt": "2020-04-29T16:56:48Z", "author": {"login": "alzimmermsft"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -490,6 +531,56 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             });\n     }\n \n+    /**\n+     * Gets token from shared token cache\n+     * */\n+    public Mono<AccessToken> authenticateWithSharedTokenCache(TokenRequestContext request, String username) {\n+        // find if the Public Client app with the requested username exists\n+        return Mono.fromFuture(() -> getPublicClientApplication(true).getAccounts())\n+                .onErrorResume(t -> Mono.error(new CredentialUnavailableException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8e7223daf3df49e337c1e163a56ab9459cdb52"}, "originalPosition": 196}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09718dd9d337c865b7073d84002a6a496e6de77e", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/09718dd9d337c865b7073d84002a6a496e6de77e", "committedDate": "2020-04-29T20:26:53Z", "message": "Clean up and address Alan's review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "806539a60aa9bf92793a100eafbb62f414a1b60e", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/806539a60aa9bf92793a100eafbb62f414a1b60e", "committedDate": "2020-04-29T20:30:05Z", "message": "Merge error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "066d41336c054bd7290070387a5ed46d7f157152", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/066d41336c054bd7290070387a5ed46d7f157152", "committedDate": "2020-04-29T20:50:09Z", "message": "CI says IdentityClient doesn't compile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cc8c1b60735420762714373444870c50eaed310", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6cc8c1b60735420762714373444870c50eaed310", "committedDate": "2020-04-29T23:37:03Z", "message": "Checkstyle: indentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODQzOTIy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-403843922", "createdAt": "2020-04-30T20:13:29Z", "commit": {"oid": "6cc8c1b60735420762714373444870c50eaed310"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxMzoyOVrOGO4rnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxMzoyOVrOGO4rnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2MTkxNg==", "bodyText": "This logic here and below was updated before. Please get the one from master.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418261916", "createdAt": "2020-04-30T20:13:29Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -490,6 +530,56 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             });\n     }\n \n+    /**\n+     * Gets token from shared token cache\n+     * */\n+    public Mono<AccessToken> authenticateWithSharedTokenCache(TokenRequestContext request, String username) {\n+        // find if the Public Client app with the requested username exists\n+        return Mono.fromFuture(() -> getPublicClientApplication(true).getAccounts())\n+                .onErrorMap(t -> new CredentialUnavailableException(\n+                        \"Cannot get accounts from token cache. Error: \" + t.getMessage(), t))\n+                .flatMap(set -> {\n+                    IAccount requestedAccount;\n+                    Map<String, IAccount> accounts = new HashMap<>(); // home account id -> account\n+\n+                    for (IAccount cached : set) {\n+                        if (username == null || username.equals(cached.username())) {\n+                            if (!accounts.containsKey(cached.homeAccountId())) { // only put the first one\n+                                accounts.put(cached.homeAccountId(), cached);\n+                            }\n+                        }\n+                    }\n+\n+                    if (accounts.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc8c1b60735420762714373444870c50eaed310"}, "originalPosition": 229}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODQ0NDcx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-403844471", "createdAt": "2020-04-30T20:14:18Z", "commit": {"oid": "6cc8c1b60735420762714373444870c50eaed310"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxNDoxOFrOGO4taA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxNDoxOFrOGO4taA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2MjM3Ng==", "bodyText": "Error messages and checks were changed here and below.  get the ones from master.\nThis one is PII exposure.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418262376", "createdAt": "2020-04-30T20:14:18Z", "author": {"login": "g2vinay"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -490,6 +530,56 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             });\n     }\n \n+    /**\n+     * Gets token from shared token cache\n+     * */\n+    public Mono<AccessToken> authenticateWithSharedTokenCache(TokenRequestContext request, String username) {\n+        // find if the Public Client app with the requested username exists\n+        return Mono.fromFuture(() -> getPublicClientApplication(true).getAccounts())\n+                .onErrorMap(t -> new CredentialUnavailableException(\n+                        \"Cannot get accounts from token cache. Error: \" + t.getMessage(), t))\n+                .flatMap(set -> {\n+                    IAccount requestedAccount;\n+                    Map<String, IAccount> accounts = new HashMap<>(); // home account id -> account\n+\n+                    for (IAccount cached : set) {\n+                        if (username == null || username.equals(cached.username())) {\n+                            if (!accounts.containsKey(cached.homeAccountId())) { // only put the first one\n+                                accounts.put(cached.homeAccountId(), cached);\n+                            }\n+                        }\n+                    }\n+\n+                    if (accounts.size() == 0) {\n+                        if (username == null) {\n+                            return Mono.error(new CredentialUnavailableException(\"No accounts were discovered in the \"\n+                                    + \"shared token cache. To fix, authenticate through tooling supporting azure \"\n+                                    + \"developer sign on.\"));\n+                        } else {\n+                            return Mono.error(new CredentialUnavailableException(String.format(\"User account '%s' was \"\n+                                    + \"not found in the shared token cache. Discovered Accounts: [ '%s' ]\", username,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc8c1b60735420762714373444870c50eaed310"}, "originalPosition": 236}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5c466269fe95ea6a729b15cca402cef4fbe0c49", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d5c466269fe95ea6a729b15cca402cef4fbe0c49", "committedDate": "2020-04-30T21:27:18Z", "message": "Update shared token cache look up with master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTUzMTg5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-403953189", "createdAt": "2020-04-30T23:55:19Z", "commit": {"oid": "6cc8c1b60735420762714373444870c50eaed310"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo1NToxOVrOGO-OwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo1NToxOVrOGO-OwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MjgzMg==", "bodyText": "Would you want this to resume on an error and return an empty Mono? I'd expect the error to be propagated downstream and allow downstream subscribers to do with that error what they will. In  globalSetupAsync this is call is chained with .then(), so it would hide the error.\nThere are similar instances in other credentials below.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418352832", "createdAt": "2020-04-30T23:55:19Z", "author": {"login": "conniey"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DeviceCodeCredential.java", "diffHunk": "@@ -51,7 +51,7 @@\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         return Mono.defer(() -> {\n             if (cachedToken.get() != null) {\n-                return identityClient.authenticateWithUserRefreshToken(request, cachedToken.get())\n+                return identityClient.authenticateWithMsalAccount(request, cachedToken.get().getAccount())\n                     .onErrorResume(t -> Mono.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cc8c1b60735420762714373444870c50eaed310"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTU1ODM3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-403955837", "createdAt": "2020-05-01T00:03:34Z", "commit": {"oid": "d5c466269fe95ea6a729b15cca402cef4fbe0c49"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDowMzozNVrOGO-Xjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDowNzo0NlrOGO-b9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1NTA4Nw==", "bodyText": "Since you're using futures, it may be easier to follow using:\nvar completableFuture = new CompletableFuture<MsalToken>();\ncompletableFuture.completeExceptionally(logger.logExceptionAsError(Exceptions.propagate(e));\nreturn completableFuture;", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418355087", "createdAt": "2020-05-01T00:03:35Z", "author": {"login": "conniey"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -380,33 +403,47 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n      */\n     public Mono<MsalToken> authenticateWithUsernamePassword(TokenRequestContext request,\n                                                             String username, String password) {\n-        return Mono.fromFuture(publicClientApplication.acquireToken(\n+        return Mono.fromFuture(() -> getPublicClientApplication(false).acquireToken(\n             UserNamePasswordParameters.builder(new HashSet<>(request.getScopes()), username, password.toCharArray())\n                 .build()))\n-            .map(ar -> new MsalToken(ar, options));\n+            .onErrorMap(t -> new ClientAuthenticationException(\"Failed to acquire token with username and password\",\n+                null, t)).map(ar -> new MsalToken(ar, options));\n     }\n \n     /**\n      * Asynchronously acquire a token from the currently logged in client.\n      *\n      * @param request the details of the token request\n+     * @param account the account used to login to acquire the last token\n      * @return a Publisher that emits an AccessToken\n      */\n-    public Mono<MsalToken> authenticateWithUserRefreshToken(TokenRequestContext request, MsalToken msalToken) {\n-        SilentParameters parameters;\n-        if (msalToken.getAccount() != null) {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes()), msalToken.getAccount()).build();\n-        } else {\n-            parameters = SilentParameters.builder(new HashSet<>(request.getScopes())).build();\n-        }\n-        return Mono.defer(() -> {\n+    public Mono<MsalToken> authenticateWithMsalAccount(TokenRequestContext request, IAccount account) {\n+        return Mono.defer(() -> Mono.fromFuture(() -> {\n+            SilentParameters.SilentParametersBuilder parametersBuilder = SilentParameters.builder(\n+                new HashSet<>(request.getScopes()));\n+            if (account != null) {\n+                parametersBuilder = parametersBuilder.account(account);\n+            }\n             try {\n-                return Mono.fromFuture(publicClientApplication.acquireTokenSilently(parameters))\n-                        .map(ar -> new MsalToken(ar, options));\n+                return getPublicClientApplication(false)\n+                    .acquireTokenSilently(parametersBuilder.build());\n             } catch (MalformedURLException e) {\n-                return Mono.error(e);\n+                throw logger.logExceptionAsError(Exceptions.propagate(e));\n             }\n-        });\n+        }).map(ar -> new MsalToken(ar, options))\n+        .filter(t -> !t.isExpired())\n+        .switchIfEmpty(Mono.fromFuture(() -> {\n+            SilentParameters.SilentParametersBuilder forceParametersBuilder = SilentParameters.builder(\n+                new HashSet<>(request.getScopes())).forceRefresh(true);\n+            if (account != null) {\n+                forceParametersBuilder = forceParametersBuilder.account(account);\n+            }\n+            try {\n+                return getPublicClientApplication(false).acquireTokenSilently(forceParametersBuilder.build());\n+            } catch (MalformedURLException e) {\n+                throw logger.logExceptionAsError(Exceptions.propagate(e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c466269fe95ea6a729b15cca402cef4fbe0c49"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1NTkxOQ==", "bodyText": "nit: set.isEmpty()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418355919", "createdAt": "2020-05-01T00:06:37Z", "author": {"login": "conniey"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -490,6 +529,56 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             });\n     }\n \n+    /**\n+     * Gets token from shared token cache\n+     * */\n+    public Mono<AccessToken> authenticateWithSharedTokenCache(TokenRequestContext request, String username) {\n+        // find if the Public Client app with the requested username exists\n+        return Mono.fromFuture(() -> getPublicClientApplication(true).getAccounts())\n+                .onErrorMap(t -> new CredentialUnavailableException(\n+                        \"Cannot get accounts from token cache. Error: \" + t.getMessage(), t))\n+                .flatMap(set -> {\n+                    IAccount requestedAccount;\n+                    Map<String, IAccount> accounts = new HashMap<>(); // home account id -> account\n+\n+                    for (IAccount cached : set) {\n+                        if (username == null || username.equals(cached.username())) {\n+                            if (!accounts.containsKey(cached.homeAccountId())) { // only put the first one\n+                                accounts.put(cached.homeAccountId(), cached);\n+                            }\n+                        }\n+                    }\n+\n+                    if (set.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c466269fe95ea6a729b15cca402cef4fbe0c49"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1NjA2Mw==", "bodyText": "Should we use return FluxUtils.monoError(logger, new ....)? Or is it preferable not to log it", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418356063", "createdAt": "2020-05-01T00:07:14Z", "author": {"login": "conniey"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -490,6 +529,56 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             });\n     }\n \n+    /**\n+     * Gets token from shared token cache\n+     * */\n+    public Mono<AccessToken> authenticateWithSharedTokenCache(TokenRequestContext request, String username) {\n+        // find if the Public Client app with the requested username exists\n+        return Mono.fromFuture(() -> getPublicClientApplication(true).getAccounts())\n+                .onErrorMap(t -> new CredentialUnavailableException(\n+                        \"Cannot get accounts from token cache. Error: \" + t.getMessage(), t))\n+                .flatMap(set -> {\n+                    IAccount requestedAccount;\n+                    Map<String, IAccount> accounts = new HashMap<>(); // home account id -> account\n+\n+                    for (IAccount cached : set) {\n+                        if (username == null || username.equals(cached.username())) {\n+                            if (!accounts.containsKey(cached.homeAccountId())) { // only put the first one\n+                                accounts.put(cached.homeAccountId(), cached);\n+                            }\n+                        }\n+                    }\n+\n+                    if (set.size() == 0) {\n+                        return Mono.error(new CredentialUnavailableException(\"SharedTokenCacheCredential \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c466269fe95ea6a729b15cca402cef4fbe0c49"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1NjIxMw==", "bodyText": "nit: Same with .isEmpty() here. But I won't lose sleep. :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418356213", "createdAt": "2020-05-01T00:07:46Z", "author": {"login": "conniey"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -490,6 +529,56 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             });\n     }\n \n+    /**\n+     * Gets token from shared token cache\n+     * */\n+    public Mono<AccessToken> authenticateWithSharedTokenCache(TokenRequestContext request, String username) {\n+        // find if the Public Client app with the requested username exists\n+        return Mono.fromFuture(() -> getPublicClientApplication(true).getAccounts())\n+                .onErrorMap(t -> new CredentialUnavailableException(\n+                        \"Cannot get accounts from token cache. Error: \" + t.getMessage(), t))\n+                .flatMap(set -> {\n+                    IAccount requestedAccount;\n+                    Map<String, IAccount> accounts = new HashMap<>(); // home account id -> account\n+\n+                    for (IAccount cached : set) {\n+                        if (username == null || username.equals(cached.username())) {\n+                            if (!accounts.containsKey(cached.homeAccountId())) { // only put the first one\n+                                accounts.put(cached.homeAccountId(), cached);\n+                            }\n+                        }\n+                    }\n+\n+                    if (set.size() == 0) {\n+                        return Mono.error(new CredentialUnavailableException(\"SharedTokenCacheCredential \"\n+                                + \"authentication unavailable. No accounts were found in the cache.\"));\n+                    }\n+\n+                    if (CoreUtils.isNullOrEmpty(username)) {\n+                        return Mono.error(new CredentialUnavailableException(\"SharedTokenCacheCredential \"\n+                                + \"authentication unavailable. Multiple accounts were found in the cache. Use \"\n+                                + \"username and tenant id to disambiguate.\"));\n+                    }\n+\n+                    if (accounts.size() != 1) {\n+                        if (accounts.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c466269fe95ea6a729b15cca402cef4fbe0c49"}, "originalPosition": 235}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDI2NzM5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-404026739", "createdAt": "2020-05-01T05:28:43Z", "commit": {"oid": "d5c466269fe95ea6a729b15cca402cef4fbe0c49"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNToyODo0M1rOGPCf9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTozMjo1N1rOGPCjYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyMjc3Mg==", "bodyText": "providedfor -> provided for", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418422772", "createdAt": "2020-05-01T05:28:43Z", "author": {"login": "conniey"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -109,8 +113,14 @@\n         this.tenantId = tenantId;\n         this.clientId = clientId;\n         this.options = options;\n-        if (clientId == null) {\n-            this.publicClientApplication = null;\n+    }\n+\n+    private PublicClientApplication getPublicClientApplication(boolean sharedTokenCacheCredential) {\n+        if (publicClientApplication != null) {\n+            return publicClientApplication;\n+        } else if (clientId == null) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\n+                \"A non-null value for client ID must be providedfor user authentication.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c466269fe95ea6a729b15cca402cef4fbe0c49"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyMzY1MA==", "bodyText": "These tests could be using StepVerifier rather than block.\n// Arrange\nvar context = new TokenRequestContext().addScopes(\"https://vault.azure.net/.default\");\n\n// Act & Assert\nStepVerifier.create(client.authenticateWithMsalAccount(context, token.getAccount()))\n    .assertNext(token -> {\n        assertNotNull(token.getToken());\n        assertNotNull(token.getExpiresAt());\n    })\n    .verifyComplete();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418423650", "createdAt": "2020-05-01T05:32:57Z", "author": {"login": "conniey"}, "path": "sdk/identity/azure-identity/src/test/java/com/azure/identity/implementation/IdentityClientIntegrationTests.java", "diffHunk": "@@ -51,7 +51,7 @@ public void deviceCodeCanGetToken() {\n         Assert.assertNotNull(token.getToken());\n         Assert.assertNotNull(token.getExpiresAt());\n         Assert.assertFalse(token.isExpired());\n-        token = client.authenticateWithUserRefreshToken(new TokenRequestContext().addScopes(\"https://vault.azure.net/.default\"), token).block();\n+        token = client.authenticateWithMsalAccount(new TokenRequestContext().addScopes(\"https://vault.azure.net/.default\"), token.getAccount()).block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c466269fe95ea6a729b15cca402cef4fbe0c49"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0bf3f76bb45b910ff5bd7bdca807110665c1df44", "committedDate": "2020-05-01T08:26:11Z", "message": "Address Connie's feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTAzNDY3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-404103467", "createdAt": "2020-05-01T10:26:53Z", "commit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDoyNjo1M1rOGPGuqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDoyNjo1M1rOGPGuqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5MjA3Mg==", "bodyText": "In .NET and python we named this option EnablePersistentCache.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418492072", "createdAt": "2020-05-01T10:26:53Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DeviceCodeCredentialBuilder.java", "diffHunk": "@@ -29,6 +29,31 @@ public DeviceCodeCredentialBuilder challengeConsumer(\n         return this;\n     }\n \n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param allowUnencryptedCache whether to use an unprotected file for cache storage.\n+     *\n+     * @return An updated instance of this builder with the unprotected token cache setting set as specified.\n+     */\n+    public DeviceCodeCredentialBuilder allowUnencryptedCache(boolean allowUnencryptedCache) {\n+        this.identityClientOptions.allowUnencryptedCache(allowUnencryptedCache);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets whether to enable using the shared token cache. This is disabled by default.\n+     *\n+     * @param enabled whether to enabled using the shared token cache.\n+     *\n+     * @return An updated instance of this builder with if the shared token cache enabled specified.\n+     */\n+    public DeviceCodeCredentialBuilder enableSharedTokenCache(boolean enabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTAzNTUy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-404103552", "createdAt": "2020-05-01T10:27:08Z", "commit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDoyNzowOFrOGPGu2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDoyNzowOFrOGPGu2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5MjEyMw==", "bodyText": "Same comment about EnablePersistentCache", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418492123", "createdAt": "2020-05-01T10:27:08Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/InteractiveBrowserCredentialBuilder.java", "diffHunk": "@@ -27,6 +27,31 @@ public InteractiveBrowserCredentialBuilder port(int port) {\n         return this;\n     }\n \n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param allowUnencryptedCache whether to use an unprotected file for cache storage.\n+     *\n+     * @return An updated instance of this builder with the unprotected token cache setting set as specified.\n+     */\n+    public InteractiveBrowserCredentialBuilder allowUnencryptedCache(boolean allowUnencryptedCache) {\n+        this.identityClientOptions.allowUnencryptedCache(allowUnencryptedCache);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets whether to enable using the shared token cache. This is disabled by default.\n+     *\n+     * @param enabled whether to enabled using the shared token cache.\n+     *\n+     * @return An updated instance of this builder with if the shared token cache enabled specified.\n+     */\n+    public InteractiveBrowserCredentialBuilder enableSharedTokenCache(boolean enabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTA3Mzg5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-404107389", "createdAt": "2020-05-01T10:40:17Z", "commit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDo0MDoxOFrOGPG7wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDo0MDoxOFrOGPG7wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5NTQyNg==", "bodyText": "This method is called from numerous methods on the IdentityClient some which pass sharedTokenCacheCredential as true and some as false. Whichever calls this method first will cache the publicClientApplication and then all subsequent calls will effectively ignore the sharedTokenCacheCredential parameter. I'm guessing this doesn't matter in practice because certain credentials only call certain methods, and each credential has it's own instance of IdentityClient, and IdentityClient is internal. However, this makes the functionality of this class and the classes that use it interdependent in a non-obvious way which could easily be overlooked if we try to make optimizations like sharing an instance of IdentityClient. I think we should consider refactoring this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418495426", "createdAt": "2020-05-01T10:40:18Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -109,8 +113,14 @@\n         this.tenantId = tenantId;\n         this.clientId = clientId;\n         this.options = options;\n-        if (clientId == null) {\n-            this.publicClientApplication = null;\n+    }\n+\n+    private PublicClientApplication getPublicClientApplication(boolean sharedTokenCacheCredential) {\n+        if (publicClientApplication != null) {\n+            return publicClientApplication;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTEyNDE5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-404112419", "createdAt": "2020-05-01T10:59:05Z", "commit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDo1OTowNlrOGPHNPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDo1OTowNlrOGPHNPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5OTkwMg==", "bodyText": "This is not thread safe. If two clients using the same credential call get token at the same time it's possible that multiple threads attempt to initialize publicClientApplication at the same time. In this case they might each get different instances and any tokens cached on any instances other than the final one will be lost.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418499902", "createdAt": "2020-05-01T10:59:06Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -144,7 +154,21 @@\n             if (options.getExecutorService() != null) {\n                 publicClientApplicationBuilder.executorService(options.getExecutorService());\n             }\n+            if (options.isSharedTokenCacheEnabled()) {\n+                try {\n+                    publicClientApplicationBuilder.setTokenCacheAccessAspect(\n+                            new PersistenceTokenCacheAccessAspect(options.getPersistenceSettings()));\n+                } catch (Throwable t) {\n+                    String message = \"Shared token cache is unavailable in this environment.\";\n+                    if (sharedTokenCacheCredential) {\n+                        throw logger.logExceptionAsError(new CredentialUnavailableException(message, t));\n+                    } else {\n+                        throw logger.logExceptionAsError(new ClientAuthenticationException(message, null, t));\n+                    }\n+                }\n+            }\n             this.publicClientApplication = publicClientApplicationBuilder.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTEzMjQ4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-404113248", "createdAt": "2020-05-01T11:02:27Z", "commit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMTowMjoyN1rOGPHQHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMTowMjoyN1rOGPHQHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwMDYzOQ==", "bodyText": "authenticateWithSharedTokenCache searches the shared token cache for an account each time. Shouldn't the account be saved off after the first time this method is called so that authenticateWithMsalAccount can be called instead?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418500639", "createdAt": "2020-05-01T11:02:27Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java", "diffHunk": "@@ -63,92 +51,18 @@\n         } else {\n             this.tenantId = tenantId;\n         }\n-        this.options = identityClientOptions;\n+        this.identityClient = new IdentityClientBuilder()\n+                .tenantId(this.tenantId)\n+                .clientId(this.clientId)\n+                .identityClientOptions(identityClientOptions)\n+                .build();\n     }\n \n     /**\n      * Gets token from shared token cache\n      * */\n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        String authorityUrl = options.getAuthorityHost().replaceAll(\"/+$\", \"\") + \"/\" + tenantId + \"/\";\n-        // Initialize here so that the constructor doesn't throw\n-        if (pubClient == null) {\n-            try {\n-                PersistentTokenCacheAccessAspect accessAspect = new PersistentTokenCacheAccessAspect();\n-                PublicClientApplication.Builder applicationBuilder =  PublicClientApplication.builder(this.clientId);\n-                if (options.getExecutorService() != null) {\n-                    applicationBuilder.executorService(options.getExecutorService());\n-                }\n-\n-                pubClient = applicationBuilder\n-                    .authority(authorityUrl)\n-                    .setTokenCacheAccessAspect(accessAspect)\n-                    .build();\n-            } catch (Exception e) {\n-                return Mono.error(new CredentialUnavailableException(\"SharedTokenCacheCredential authentication \"\n-                                                                         + \"unavailable.\" +  e.getMessage(), e));\n-            }\n-        }\n-\n-        // find if the Public Client app with the requested username exists\n-        return Mono.fromFuture(pubClient.getAccounts())\n-            .flatMap(set -> {\n-                IAccount requestedAccount;\n-                Map<String, IAccount> accounts = new HashMap<>(); // home account id -> account\n-\n-                for (IAccount cached : set) {\n-                    if (username == null || username.equals(cached.username())) {\n-                        if (!accounts.containsKey(cached.homeAccountId())) { // only put the first one\n-                            accounts.put(cached.homeAccountId(), cached);\n-                        }\n-                    }\n-                }\n-\n-                if (set.size() == 0) {\n-                    return Mono.error(new CredentialUnavailableException(\"SharedTokenCacheCredential authentication \"\n-                             + \"unavailable. No accounts were found in the cache.\"));\n-                }\n-\n-                if (CoreUtils.isNullOrEmpty(username)) {\n-                    return Mono.error(new CredentialUnavailableException(\"SharedTokenCacheCredential authentication \"\n-                             + \"unavailable. Multiple accounts were found in the cache. Use username and tenant id \"\n-                             + \"to disambiguate.\"));\n-                }\n-\n-                if (accounts.size() != 1) {\n-                    if (accounts.size() == 0) {\n-                        return Mono.error(new CredentialUnavailableException(\n-                            String.format(\"SharedTokenCacheCredential authentication \"\n-                             + \"unavailable. No account matching the specified username %s was found in \"\n-                             + \"the cache.\", username)));\n-                    } else {\n-                        return Mono.error(new CredentialUnavailableException(String.format(\"SharedTokenCacheCredential\"\n-                             + \" authentication unavailable. Multiple accounts matching the specified username %s were \"\n-                             + \"found in the cache.\", username)));\n-                    }\n-                }\n-\n-                requestedAccount = accounts.values().iterator().next();\n-\n-\n-                // if it does, then request the token\n-                SilentParameters params = SilentParameters.builder(\n-                        new HashSet<>(request.getScopes()), requestedAccount)\n-                    .authorityUrl(authorityUrl)\n-                    .build();\n-\n-                CompletableFuture<IAuthenticationResult> future;\n-                try {\n-                    future = pubClient.acquireTokenSilently(params);\n-                    return Mono.fromFuture(() -> future).map(result ->\n-                        new AccessToken(result.accessToken(),\n-                            result.expiresOnDate().toInstant().atOffset(ZoneOffset.UTC)));\n-\n-                } catch (MalformedURLException e) {\n-                    e.printStackTrace();\n-                    return Mono.error(new RuntimeException(\"Token was not found\"));\n-                }\n-            });\n+        return identityClient.authenticateWithSharedTokenCache(request, username);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTE0MDg1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#pullrequestreview-404114085", "createdAt": "2020-05-01T11:05:27Z", "commit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMTowNToyN1rOGPHS-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMTowNToyN1rOGPHS-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwMTM2OA==", "bodyText": "We hadn't added the ability to use the shared token cache to the UsernamePasswordCredential in .NET and Python yet. I'm not totally against it, but I think it adds limited value since UsernamePasswordCredential has no user interaction.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9188#discussion_r418501368", "createdAt": "2020-05-01T11:05:27Z", "author": {"login": "schaabs"}, "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/UsernamePasswordCredentialBuilder.java", "diffHunk": "@@ -36,6 +36,31 @@ public UsernamePasswordCredentialBuilder password(String password) {\n         return this;\n     }\n \n+    /**\n+     * Sets whether to use an unprotected file specified by <code>cacheFileLocation()</code> instead of\n+     * Gnome keyring on Linux. This is false by default.\n+     *\n+     * @param allowUnencryptedCache whether to use an unprotected file for cache storage.\n+     *\n+     * @return An updated instance of this builder with the unprotected token cache setting set as specified.\n+     */\n+    public UsernamePasswordCredentialBuilder allowUnencryptedCache(boolean allowUnencryptedCache) {\n+        this.identityClientOptions.allowUnencryptedCache(allowUnencryptedCache);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets whether to enable using the shared token cache. This is disabled by default.\n+     *\n+     * @param enabled whether to enabled using the shared token cache.\n+     *\n+     * @return An updated instance of this builder with if the shared token cache enabled specified.\n+     */\n+    public UsernamePasswordCredentialBuilder enableSharedTokenCache(boolean enabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf3f76bb45b910ff5bd7bdca807110665c1df44"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b337b9393669c0a558f3b7b09cba50882e44efb7", "author": {"user": {"login": "g2vinay", "name": "Vinay Gera"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b337b9393669c0a558f3b7b09cba50882e44efb7", "committedDate": "2020-05-01T23:18:48Z", "message": "address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e1d1a01c892bb0df03cb9eea274a0dcb7692cc3", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4e1d1a01c892bb0df03cb9eea274a0dcb7692cc3", "committedDate": "2020-05-03T00:47:34Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java into persistence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b4e8786b95af3894842e96b655472206e2fbc8c", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5b4e8786b95af3894842e96b655472206e2fbc8c", "committedDate": "2020-05-04T18:34:02Z", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java into persistence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25d2a63d58710d4196006095b59ce3f455efa7e4", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/25d2a63d58710d4196006095b59ce3f455efa7e4", "committedDate": "2020-05-04T20:53:33Z", "message": "Fix shared token cache and error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3a405d368d8d04df222e99b69e80f84f140100d", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e3a405d368d8d04df222e99b69e80f84f140100d", "committedDate": "2020-05-04T21:14:44Z", "message": "Use getPublicClientApplication()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dff1f3437575f1e9581bd42fde3c9fa9c6947df", "author": {"user": {"login": "jianghaolu", "name": "Jianghao Lu"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3dff1f3437575f1e9581bd42fde3c9fa9c6947df", "committedDate": "2020-05-04T21:18:02Z", "message": "Undo changes in key vault"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 719, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}