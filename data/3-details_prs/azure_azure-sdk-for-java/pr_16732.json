{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NzE2OTQw", "number": 16732, "title": "[MetricsAdvisor] API design and renaming updates ", "bodyText": "This PR\n\nUpdated createdDataFeed method to take one DataFeed object.\nRenamed listValuesOfDimensionWithAnomalies method to listDimensionValuesWithAnomalies.\nRenamed model ListValuesOfDimensionWithAnomaliesOptions method to ListDimensionValuesWithAnomaliesOptions.\nRenamed properties viewers , admins and their accessors to viewerEmails and adminEmails respectively on\nDataFeedOptions model.\nRenamed model DataSourceMissingDataPointFillType to DataFeedMissingDataPointFillType.\nRenamed properties on MetricEnrichedSeriesData and MetricSeriesData model.\nRenamed method setSeverity to setSeverityRangeCondition on MetricAnomalyAlertConditions model.\n\nSince this PR was getting too long, updates coming in follow up PR:\n\nUpdate models to take required constructor args\nMore renames", "createdAt": "2020-10-23T04:55:27Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16732", "merged": true, "mergeCommit": {"oid": "2383dfc9b32e6de469af16d27d39fffbeb58077a"}, "closed": true, "closedAt": "2020-11-05T21:25:06Z", "author": {"login": "samvaity"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYZ7JfgBqjM5NDU4MjU2MzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZalh8AH2gAyNTA4NzE2OTQwOmM2NDJiMzEzNmFmYTRiZDEyZGZmMzIzYjYwNjM2NjAzMzlkMzBiNzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ed82449cd86b4978229006ed50d6dee4f9229a6", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4ed82449cd86b4978229006ed50d6dee4f9229a6", "committedDate": "2020-10-26T08:18:41Z", "message": "renames"}, "afterCommit": {"oid": "41e409c5ddf9f999d573cc6f6155b7608bf56349", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/41e409c5ddf9f999d573cc6f6155b7608bf56349", "committedDate": "2020-11-02T00:58:48Z", "message": "renames"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "41e409c5ddf9f999d573cc6f6155b7608bf56349", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/41e409c5ddf9f999d573cc6f6155b7608bf56349", "committedDate": "2020-11-02T00:58:48Z", "message": "renames"}, "afterCommit": {"oid": "a66fa4b10a8f6b6a433d1ea41bf26394a4dbf45c", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a66fa4b10a8f6b6a433d1ea41bf26394a4dbf45c", "committedDate": "2020-11-02T03:46:09Z", "message": "renames"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNzYxOTI3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16732#pullrequestreview-521761927", "createdAt": "2020-11-02T15:57:47Z", "commit": {"oid": "f62fe1dc2d969b3579b014ccacf3d5d422102605"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTo1Nzo0N1rOHsKkcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTo1Nzo0N1rOHsKkcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3MjU2MA==", "bodyText": "Does it make sense to do a null check for params in this method as well? Today if a user calls listIncidentRootCases(null, incidentId,..) the error we throw is incident.detectionConfigurationId is required and cannot be null", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16732#discussion_r516072560", "createdAt": "2020-11-02T15:57:47Z", "author": {"login": "anuchandy"}, "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java", "diffHunk": "@@ -776,67 +779,69 @@\n     PagedFlux<IncidentRootCause> listIncidentRootCauses(\n         String detectionConfigurationId,\n         String incidentId, Context context) {\n-        Incident incident = new Incident();\n-        IncidentHelper.setId(incident, incidentId);\n-        IncidentHelper.setDetectionConfigurationId(incident, detectionConfigurationId);\n+        AnomalyIncident anomalyIncident = new AnomalyIncident();\n+        IncidentHelper.setId(anomalyIncident, incidentId);\n+        IncidentHelper.setDetectionConfigurationId(anomalyIncident, detectionConfigurationId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f62fe1dc2d969b3579b014ccacf3d5d422102605"}, "originalPosition": 266}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6b011718a931d583216f92af57bba7db4c3d416", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e6b011718a931d583216f92af57bba7db4c3d416", "committedDate": "2020-11-02T22:20:23Z", "message": "renaming quick fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "638443269baf547fa4f70daf04d68732ff4a4d3c", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/638443269baf547fa4f70daf04d68732ff4a4d3c", "committedDate": "2020-11-02T22:32:23Z", "message": "create data feed update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4233fa072296eb4ec0961253cc1d74cf69c2f02", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c4233fa072296eb4ec0961253cc1d74cf69c2f02", "committedDate": "2020-11-02T22:33:40Z", "message": "update readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e1ac965014adf0078c60b8cd9a5aa8c12fd718f", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0e1ac965014adf0078c60b8cd9a5aa8c12fd718f", "committedDate": "2020-11-02T23:07:41Z", "message": "renames"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b94f9a97362363af14c5931d2de9bbc45b3e7f3", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b94f9a97362363af14c5931d2de9bbc45b3e7f3", "committedDate": "2020-11-02T23:08:11Z", "message": "swagger rename updates, readme update"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f62fe1dc2d969b3579b014ccacf3d5d422102605", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f62fe1dc2d969b3579b014ccacf3d5d422102605", "committedDate": "2020-11-02T04:38:17Z", "message": "swagger rename updates, readme update"}, "afterCommit": {"oid": "8351117c14717511e6ee337b29f917199cece54a", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8351117c14717511e6ee337b29f917199cece54a", "committedDate": "2020-11-02T23:44:02Z", "message": "rebase changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "712b0394138c21be8a37753d51149dd46173a273", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/712b0394138c21be8a37753d51149dd46173a273", "committedDate": "2020-11-03T00:28:47Z", "message": "rebase changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8351117c14717511e6ee337b29f917199cece54a", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8351117c14717511e6ee337b29f917199cece54a", "committedDate": "2020-11-02T23:44:02Z", "message": "rebase changes"}, "afterCommit": {"oid": "712b0394138c21be8a37753d51149dd46173a273", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/712b0394138c21be8a37753d51149dd46173a273", "committedDate": "2020-11-03T00:28:47Z", "message": "rebase changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b3a29cb339cf6821b7d48bb1bed917db04d2cf1", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b3a29cb339cf6821b7d48bb1bed917db04d2cf1", "committedDate": "2020-11-03T18:59:34Z", "message": "remove tests coverage pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "022c137c2b34c06ba829b3e7619e34da6150340e", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/022c137c2b34c06ba829b3e7619e34da6150340e", "committedDate": "2020-11-03T23:28:15Z", "message": "options update"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e29262f7ba05a5672a337a36d287a984cdad6873", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e29262f7ba05a5672a337a36d287a984cdad6873", "committedDate": "2020-11-03T22:44:04Z", "message": "options update"}, "afterCommit": {"oid": "022c137c2b34c06ba829b3e7619e34da6150340e", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/022c137c2b34c06ba829b3e7619e34da6150340e", "committedDate": "2020-11-03T23:28:15Z", "message": "options update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTUxMjA2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16732#pullrequestreview-522951206", "createdAt": "2020-11-03T23:39:02Z", "commit": {"oid": "022c137c2b34c06ba829b3e7619e34da6150340e"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzozOTowM1rOHtESuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzo1OTo0NFrOHtEqqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxODI5OQ==", "bodyText": "nit; one or more etrics -> one or more metrics", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16732#discussion_r517018299", "createdAt": "2020-11-03T23:39:03Z", "author": {"login": "anuchandy"}, "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/README.md", "diffHunk": "@@ -68,78 +68,81 @@ MetricsAdvisorAdministrationClient metricsAdvisorAdministrationClient =\n ### MetricsAdvisorClient\n `MetricsAdvisorClient` helps with:\n \n-- listing incidents\n-- listing root causes of incidents\n-- retrieving original time series data and time series data enriched by the service.\n-- listing alerts\n-- adding feedback to tune your model\n+- Diagnose anomalies and incidents and help with root cause analysis of incidents.\n+- Retrieve original time series data and time series data enriched by the service.\n+- Send real time alerts through multiple notification hooks.\n+- Adjust anomaly/incident detection using feedback to tune your model.\n \n ### MetricsAdvisorAdministrationClient\n `MetricsAdvisorAdministrationClient` allows you to\n \n-- manage data feeds\n-- configure anomaly detection configurations\n-- configure anomaly alerting configurations\n-- manage hooks\n+- Manage data feeds\n+- List available metrics and their detection configurations\n+- Fine tune anomaly detection configurations\n+- Configure anomaly alerting configurations\n+- Manage notification hooks\n \n ### Data feed\n-A `data feed` is what Metrics Advisor ingests from the user-specified data source such as Cosmos structure stream, SQL query result, and so on.\n-A data feed contains rows of timestamps, zero or more dimensions, one or more metrics. Therefore, multiple metrics could share the same data source and even the same data feed.\n+A data feed is what Metrics Advisor ingests from the user-specified data source such as Cosmos structure stream, SQL query result, and so on.\n+It contains rows of timestamps, zero or more dimensions, one or more etrics. Therefore, multiple metrics could share the same data source and even the same data feed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "022c137c2b34c06ba829b3e7619e34da6150340e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNDA5MQ==", "bodyText": "should we also check for whether the option is not null before invoking getFilter", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16732#discussion_r517024091", "createdAt": "2020-11-03T23:58:38Z", "author": {"login": "anuchandy"}, "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java", "diffHunk": "@@ -546,55 +553,58 @@\n      * Fetch the anomalies identified by an anomaly detection configuration.\n      *\n      * <p><strong>Code sample</strong></p>\n-     * {@codesnippet com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfiguration#String-ListAnomaliesDetectedOptions}\n+     * {@codesnippet com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfig#String-OffsetDateTime-OffsetDateTime-ListAnomaliesDetectedOptions}\n      *\n      * @param detectionConfigurationId The anomaly detection configuration id.\n+     * @param startTime The start time of the time range within which the anomalies were detected.\n+     * @param endTime The end time of the time range within which the anomalies were detected.\n      * @param options The additional parameters.\n+     *\n      * @return The anomalies.\n      * @throws IllegalArgumentException thrown if {@code detectionConfigurationId} does not conform\n      *     to the UUID format specification\n      *     or {@code options.filter} is used to set severity but either min or max severity is missing.\n      * @throws NullPointerException thrown if the {@code detectionConfigurationId} or {@code options}\n-     *     or {@code options.startTime} or {@code options.endTime} is null.\n+     *     or {@code startTime} or {@code endTime} is null.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedFlux<Anomaly> listAnomaliesForDetectionConfiguration(\n+    public PagedFlux<DataPointAnomaly> listAnomaliesForDetectionConfig(\n         String detectionConfigurationId,\n-        ListAnomaliesDetectedOptions options) {\n+        OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options) {\n         try {\n             return new PagedFlux<>(() ->\n                 withContext(context ->\n-                    listAnomaliesForDetectionConfigurationSinglePageAsync(detectionConfigurationId,\n-                        options, context)),\n+                    listAnomaliesForDetectionConfigSinglePageAsync(detectionConfigurationId,\n+                        startTime, endTime, options, context)),\n                 continuationToken ->\n-                    withContext(context -> listAnomaliesForDetectionConfigurationNextPageAsync(continuationToken,\n-                        options, context)));\n+                    withContext(context -> listAnomaliesForDetectionConfigNextPageAsync(continuationToken,\n+                        startTime, endTime, options, context)));\n         } catch (RuntimeException ex) {\n             return new PagedFlux<>(() -> FluxUtil.monoError(logger, ex));\n         }\n     }\n \n-    PagedFlux<Anomaly> listAnomaliesForDetectionConfiguration(\n+    PagedFlux<DataPointAnomaly> listAnomaliesForDetectionConfig(\n         String detectionConfigurationId,\n-        ListAnomaliesDetectedOptions options, Context context) {\n+        OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options, Context context) {\n         return new PagedFlux<>(() ->\n-            listAnomaliesForDetectionConfigurationSinglePageAsync(detectionConfigurationId, options, context),\n+            listAnomaliesForDetectionConfigSinglePageAsync(detectionConfigurationId, startTime, endTime, options,\n+                context),\n             continuationToken ->\n-                listAnomaliesForDetectionConfigurationNextPageAsync(continuationToken, options, context));\n+                listAnomaliesForDetectionConfigNextPageAsync(continuationToken, startTime, endTime, options, context));\n     }\n \n-    private Mono<PagedResponse<Anomaly>> listAnomaliesForDetectionConfigurationSinglePageAsync(\n+    private Mono<PagedResponse<DataPointAnomaly>> listAnomaliesForDetectionConfigSinglePageAsync(\n         String detectionConfigurationId,\n-        ListAnomaliesDetectedOptions options,\n+        OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options,\n         Context context) {\n         Objects.requireNonNull(detectionConfigurationId, \"'detectionConfigurationId' is required.\");\n-        Objects.requireNonNull(options, \"'options' is required.\");\n-        Objects.requireNonNull(options.getStartTime(), \"'options.startTime' is required.\");\n-        Objects.requireNonNull(options.getEndTime(), \"'options.endTime' is required.\");\n+        Objects.requireNonNull(startTime, \"'startTime' is required.\");\n+        Objects.requireNonNull(endTime, \"'endTime' is required.\");\n \n         DetectionAnomalyResultQuery query = new DetectionAnomalyResultQuery()\n-            .setStartTime(options.getStartTime())\n-            .setEndTime(options.getEndTime());\n+            .setStartTime(startTime)\n+            .setEndTime(endTime);\n \n         if (options.getFilter() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "022c137c2b34c06ba829b3e7619e34da6150340e"}, "originalPosition": 302}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNDQyNQ==", "bodyText": "same comment for listAnomaliesForDetectionConfigNextPageAsync", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16732#discussion_r517024425", "createdAt": "2020-11-03T23:59:44Z", "author": {"login": "anuchandy"}, "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java", "diffHunk": "@@ -546,55 +553,58 @@\n      * Fetch the anomalies identified by an anomaly detection configuration.\n      *\n      * <p><strong>Code sample</strong></p>\n-     * {@codesnippet com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfiguration#String-ListAnomaliesDetectedOptions}\n+     * {@codesnippet com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfig#String-OffsetDateTime-OffsetDateTime-ListAnomaliesDetectedOptions}\n      *\n      * @param detectionConfigurationId The anomaly detection configuration id.\n+     * @param startTime The start time of the time range within which the anomalies were detected.\n+     * @param endTime The end time of the time range within which the anomalies were detected.\n      * @param options The additional parameters.\n+     *\n      * @return The anomalies.\n      * @throws IllegalArgumentException thrown if {@code detectionConfigurationId} does not conform\n      *     to the UUID format specification\n      *     or {@code options.filter} is used to set severity but either min or max severity is missing.\n      * @throws NullPointerException thrown if the {@code detectionConfigurationId} or {@code options}\n-     *     or {@code options.startTime} or {@code options.endTime} is null.\n+     *     or {@code startTime} or {@code endTime} is null.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedFlux<Anomaly> listAnomaliesForDetectionConfiguration(\n+    public PagedFlux<DataPointAnomaly> listAnomaliesForDetectionConfig(\n         String detectionConfigurationId,\n-        ListAnomaliesDetectedOptions options) {\n+        OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options) {\n         try {\n             return new PagedFlux<>(() ->\n                 withContext(context ->\n-                    listAnomaliesForDetectionConfigurationSinglePageAsync(detectionConfigurationId,\n-                        options, context)),\n+                    listAnomaliesForDetectionConfigSinglePageAsync(detectionConfigurationId,\n+                        startTime, endTime, options, context)),\n                 continuationToken ->\n-                    withContext(context -> listAnomaliesForDetectionConfigurationNextPageAsync(continuationToken,\n-                        options, context)));\n+                    withContext(context -> listAnomaliesForDetectionConfigNextPageAsync(continuationToken,\n+                        startTime, endTime, options, context)));\n         } catch (RuntimeException ex) {\n             return new PagedFlux<>(() -> FluxUtil.monoError(logger, ex));\n         }\n     }\n \n-    PagedFlux<Anomaly> listAnomaliesForDetectionConfiguration(\n+    PagedFlux<DataPointAnomaly> listAnomaliesForDetectionConfig(\n         String detectionConfigurationId,\n-        ListAnomaliesDetectedOptions options, Context context) {\n+        OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options, Context context) {\n         return new PagedFlux<>(() ->\n-            listAnomaliesForDetectionConfigurationSinglePageAsync(detectionConfigurationId, options, context),\n+            listAnomaliesForDetectionConfigSinglePageAsync(detectionConfigurationId, startTime, endTime, options,\n+                context),\n             continuationToken ->\n-                listAnomaliesForDetectionConfigurationNextPageAsync(continuationToken, options, context));\n+                listAnomaliesForDetectionConfigNextPageAsync(continuationToken, startTime, endTime, options, context));\n     }\n \n-    private Mono<PagedResponse<Anomaly>> listAnomaliesForDetectionConfigurationSinglePageAsync(\n+    private Mono<PagedResponse<DataPointAnomaly>> listAnomaliesForDetectionConfigSinglePageAsync(\n         String detectionConfigurationId,\n-        ListAnomaliesDetectedOptions options,\n+        OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options,\n         Context context) {\n         Objects.requireNonNull(detectionConfigurationId, \"'detectionConfigurationId' is required.\");\n-        Objects.requireNonNull(options, \"'options' is required.\");\n-        Objects.requireNonNull(options.getStartTime(), \"'options.startTime' is required.\");\n-        Objects.requireNonNull(options.getEndTime(), \"'options.endTime' is required.\");\n+        Objects.requireNonNull(startTime, \"'startTime' is required.\");\n+        Objects.requireNonNull(endTime, \"'endTime' is required.\");\n \n         DetectionAnomalyResultQuery query = new DetectionAnomalyResultQuery()\n-            .setStartTime(options.getStartTime())\n-            .setEndTime(options.getEndTime());\n+            .setStartTime(startTime)\n+            .setEndTime(endTime);\n \n         if (options.getFilter() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNDA5MQ=="}, "originalCommit": {"oid": "022c137c2b34c06ba829b3e7619e34da6150340e"}, "originalPosition": 302}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c642b3136afa4bd12dff323b6063660339d30b78", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c642b3136afa4bd12dff323b6063660339d30b78", "committedDate": "2020-11-05T04:23:52Z", "message": "update review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1774, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}