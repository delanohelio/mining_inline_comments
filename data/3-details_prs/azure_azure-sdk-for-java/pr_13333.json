{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzNjMxOTI2", "number": 13333, "title": "TA add \"opinion mining\" new feature ", "bodyText": "Added \"Opinion Mining\" new feature support in Text Analytics.\n\nImplementation and JavaDoc, fixes: #12982\nSamples, fixes: #12984\nTests, fixes:  #12983\nCodeSnippet\n\n\n\nfixes: #11642", "createdAt": "2020-07-20T16:46:34Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333", "merged": true, "mergeCommit": {"oid": "5843d992409a7db0a26b73caba93d1d7bdd52d23"}, "closed": true, "closedAt": "2020-08-28T21:48:34Z", "author": {"login": "mssfang"}, "timelineItems": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1AIzYgH2gAyNDUzNjMxOTI2OmU4MTM0N2Y0ZWI3MzNmZmJjMmJiZjExYzllY2Q3MzQzOGMxY2FmNjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDbwUGgH2gAyNDUzNjMxOTI2OmJlOTcyMWZkY2E3NTAzZjdmNWI4ZTVkOGI1NmY2YTFlMGQ0MmM0OTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e81347f4eb733ffbc2bbf11c9ecd73438c1caf68", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e81347f4eb733ffbc2bbf11c9ecd73438c1caf68", "committedDate": "2020-07-15T01:13:41Z", "message": "regenerated base code and all tests passed now"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "873cd82f898ed8004e3710a1e57aa530b45c89ad", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/873cd82f898ed8004e3710a1e57aa530b45c89ad", "committedDate": "2020-07-15T04:16:24Z", "message": "update record json files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82553a3a2aef3a0fa83d5de10db411db7119fd6d", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/82553a3a2aef3a0fa83d5de10db411db7119fd6d", "committedDate": "2020-07-15T15:31:30Z", "message": "added service API version 3.1-preview.1 and updates tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8a8233e12444025792b0d4e455e54515783c7c7", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d8a8233e12444025792b0d4e455e54515783c7c7", "committedDate": "2020-07-15T15:57:36Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into TA-3.1-preview1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0362d1e600a01bd6fcde5535eaa98d6f1d0d0d7d", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0362d1e600a01bd6fcde5535eaa98d6f1d0d0d7d", "committedDate": "2020-07-15T20:29:30Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into TA-OpinionMining"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cca467fa27aefd30c11deebaefcfb5b66520f9a", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3cca467fa27aefd30c11deebaefcfb5b66520f9a", "committedDate": "2020-07-20T16:43:38Z", "message": "opinion mining first version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fe2c35f335049f046ed63786ab8caba5b7fe7e6", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9fe2c35f335049f046ed63786ab8caba5b7fe7e6", "committedDate": "2020-07-20T16:56:12Z", "message": "reorder sentenceSentiment object input parameters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MDU0OTAw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#pullrequestreview-457054900", "createdAt": "2020-07-28T21:52:08Z", "commit": {"oid": "9fe2c35f335049f046ed63786ab8caba5b7fe7e6"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTo1MjowOFrOG4gdsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoyMToyNVrOG4hwrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkwNTMyOQ==", "bodyText": "nit: Added support for opinion mining feature.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r461905329", "createdAt": "2020-07-28T21:52:08Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/CHANGELOG.md", "diffHunk": "@@ -1,7 +1,9 @@\n # Release History\n \n ## 1.1.0-beta.1 (Unreleased)\n-\n+**New features**\n+- Text analytics SDK update the service to version `v3.1-preview.1` from `v3.0`.\n+- Added Opinion Mining feature.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fe2c35f335049f046ed63786ab8caba5b7fe7e6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkwNTg2OQ==", "bodyText": "To match SentimentConfidenceScorePerLabel should this be renamed to AspectConfidenceScorePerLabel?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r461905869", "createdAt": "2020-07-28T21:52:53Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -4,15 +4,23 @@\n package com.azure.ai.textanalytics;\n \n import com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl;\n+import com.azure.ai.textanalytics.implementation.models.AspectConfidenceScoreLabel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fe2c35f335049f046ed63786ab8caba5b7fe7e6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkwNjQ0OQ==", "bodyText": "@param isIncludeOpinionMining The boolean indicator to include opinion mining data in the returned result.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r461906449", "createdAt": "2020-07-28T21:53:36Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -67,15 +75,16 @@\n      * which contains {@link AnalyzeSentimentResultCollection}.\n      *\n      * @param documents The list of documents to analyze sentiments for.\n+     * @param isIncludeOpinionMining The boolean indicator to show the opinion mining.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fe2c35f335049f046ed63786ab8caba5b7fe7e6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkwNzY5NA==", "bodyText": "should the boolean be named just includeOpinionMining. I think its the getter of this property that is to be named isOpinionMiningIncluded()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r461907694", "createdAt": "2020-07-28T21:55:07Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -86,16 +95,18 @@\n      * which contains {@link AnalyzeSentimentResultCollection}.\n      *\n      * @param documents The list of documents to analyze sentiments for.\n+     * @param isIncludeOpinionMining The boolean indicator to show the opinion mining.\n      * @param options The {@link TextAnalyticsRequestOptions} request options.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n      *\n      * @return A mono {@link Response} contains {@link AnalyzeSentimentResultCollection}.\n      */\n     Mono<Response<AnalyzeSentimentResultCollection>> analyzeSentimentBatchWithContext(\n-        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context) {\n+        Iterable<TextDocumentInput> documents, boolean isIncludeOpinionMining, TextAnalyticsRequestOptions options,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fe2c35f335049f046ed63786ab8caba5b7fe7e6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkwOTQ0NA==", "bodyText": "Should we do this check before the method call?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r461909444", "createdAt": "2020-07-28T21:57:11Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -188,24 +201,104 @@ private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment\n      * {@link AnalyzeSentimentResultCollection} from a {@link SimpleResponse} of {@link SentimentResponse}.\n      *\n      * @param documents A list of documents to be analyzed.\n+     * @param isIncludeOpinionMining The boolean indicator to show the opinion mining.\n      * @param options The {@link TextAnalyticsRequestOptions} request options.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n      *\n      * @return A mono {@link Response} contains {@link AnalyzeSentimentResultCollection}.\n      */\n     private Mono<Response<AnalyzeSentimentResultCollection>> getAnalyzedSentimentResponse(\n-        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context) {\n-        // TODO: add opinion mining in the following PR\n+        Iterable<TextDocumentInput> documents, boolean isIncludeOpinionMining, TextAnalyticsRequestOptions options,\n+        Context context) {\n         return service.sentimentWithResponseAsync(\n             new MultiLanguageBatchInput().setDocuments(toMultiLanguageInput(documents)),\n             options == null ? null : options.getModelVersion(),\n             options == null ? null : options.isIncludeStatistics(),\n-            null,\n+            isIncludeOpinionMining,\n             context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE))\n             .doOnSubscribe(ignoredValue -> logger.info(\"A batch of documents - {}\", documents.toString()))\n             .doOnSuccess(response -> logger.info(\"Analyzed sentiment for a batch of documents - {}\", response))\n             .doOnError(error -> logger.warning(\"Failed to analyze sentiment - {}\", error))\n             .map(this::toAnalyzeSentimentResultCollectionResponse)\n             .onErrorMap(throwable -> mapToHttpResponseExceptionIfExist(throwable));\n     }\n+\n+    /*\n+     * Transform SentenceSentiment's opinion mining to output that user can use.\n+     */\n+    private IterableStream<AspectSentiment> toAspectSentimentList(\n+        com.azure.ai.textanalytics.implementation.models.SentenceSentiment sentenceSentiment) {\n+        if (sentenceSentiment.getAspects() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fe2c35f335049f046ed63786ab8caba5b7fe7e6"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxMDMwMg==", "bodyText": "Instead of the 0 can we put in a variable so we know what it stands for?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r461910302", "createdAt": "2020-07-28T21:58:18Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -188,24 +201,104 @@ private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment\n      * {@link AnalyzeSentimentResultCollection} from a {@link SimpleResponse} of {@link SentimentResponse}.\n      *\n      * @param documents A list of documents to be analyzed.\n+     * @param isIncludeOpinionMining The boolean indicator to show the opinion mining.\n      * @param options The {@link TextAnalyticsRequestOptions} request options.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n      *\n      * @return A mono {@link Response} contains {@link AnalyzeSentimentResultCollection}.\n      */\n     private Mono<Response<AnalyzeSentimentResultCollection>> getAnalyzedSentimentResponse(\n-        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context) {\n-        // TODO: add opinion mining in the following PR\n+        Iterable<TextDocumentInput> documents, boolean isIncludeOpinionMining, TextAnalyticsRequestOptions options,\n+        Context context) {\n         return service.sentimentWithResponseAsync(\n             new MultiLanguageBatchInput().setDocuments(toMultiLanguageInput(documents)),\n             options == null ? null : options.getModelVersion(),\n             options == null ? null : options.isIncludeStatistics(),\n-            null,\n+            isIncludeOpinionMining,\n             context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE))\n             .doOnSubscribe(ignoredValue -> logger.info(\"A batch of documents - {}\", documents.toString()))\n             .doOnSuccess(response -> logger.info(\"Analyzed sentiment for a batch of documents - {}\", response))\n             .doOnError(error -> logger.warning(\"Failed to analyze sentiment - {}\", error))\n             .map(this::toAnalyzeSentimentResultCollectionResponse)\n             .onErrorMap(throwable -> mapToHttpResponseExceptionIfExist(throwable));\n     }\n+\n+    /*\n+     * Transform SentenceSentiment's opinion mining to output that user can use.\n+     */\n+    private IterableStream<AspectSentiment> toAspectSentimentList(\n+        com.azure.ai.textanalytics.implementation.models.SentenceSentiment sentenceSentiment) {\n+        if (sentenceSentiment.getAspects() == null) {\n+            return null;\n+        }\n+        final List<SentenceAspect> sentenceAspects = sentenceSentiment.getAspects();\n+        final List<AspectSentiment> aspectSentiments = new ArrayList<>();\n+        sentenceAspects.forEach(sentenceAspect -> {\n+            final List<OpinionSentiment> opinionSentiments = new ArrayList<>();\n+            sentenceAspect.getRelations().forEach(aspectRelation -> {\n+                final AspectRelationType aspectRelationType = aspectRelation.getRelationType();\n+                final String refLink = aspectRelation.getRef();\n+                final int refIndex = Integer.parseInt(refLink.substring(refLink.lastIndexOf(\"/\") + 1));\n+                // TODO: Future work to add AspectRelationType.ASPECT feature when service has the implementation.\n+                if (AspectRelationType.OPINION.equals(aspectRelationType)) {\n+                    opinionSentiments.add(toOpinionSentiment(sentenceSentiment.getOpinions().get(refIndex)));\n+                }\n+            });\n+\n+            aspectSentiments.add(new AspectSentiment(sentenceAspect.getText(),\n+                toTextSentiment(sentenceAspect.getSentiment()), new IterableStream<>(opinionSentiments),\n+                sentenceAspect.getOffset(), sentenceAspect.getLength(),\n+                toSentimentConfidenceScores(sentenceAspect.getConfidenceScores())));\n+        });\n+\n+        return new IterableStream<>(aspectSentiments);\n+    }\n+\n+    /*\n+     * Transform type AspectConfidenceScoreLabel to SentimentConfidenceScores.\n+     */\n+    private SentimentConfidenceScores toSentimentConfidenceScores(\n+        AspectConfidenceScoreLabel aspectConfidenceScoreLabel) {\n+        return new SentimentConfidenceScores(aspectConfidenceScoreLabel.getNegative(), 0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fe2c35f335049f046ed63786ab8caba5b7fe7e6"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxMTYxMw==", "bodyText": "Why can't we directly use fromString here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r461911613", "createdAt": "2020-07-28T21:59:55Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -188,24 +201,104 @@ private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment\n      * {@link AnalyzeSentimentResultCollection} from a {@link SimpleResponse} of {@link SentimentResponse}.\n      *\n      * @param documents A list of documents to be analyzed.\n+     * @param isIncludeOpinionMining The boolean indicator to show the opinion mining.\n      * @param options The {@link TextAnalyticsRequestOptions} request options.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n      *\n      * @return A mono {@link Response} contains {@link AnalyzeSentimentResultCollection}.\n      */\n     private Mono<Response<AnalyzeSentimentResultCollection>> getAnalyzedSentimentResponse(\n-        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context) {\n-        // TODO: add opinion mining in the following PR\n+        Iterable<TextDocumentInput> documents, boolean isIncludeOpinionMining, TextAnalyticsRequestOptions options,\n+        Context context) {\n         return service.sentimentWithResponseAsync(\n             new MultiLanguageBatchInput().setDocuments(toMultiLanguageInput(documents)),\n             options == null ? null : options.getModelVersion(),\n             options == null ? null : options.isIncludeStatistics(),\n-            null,\n+            isIncludeOpinionMining,\n             context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE))\n             .doOnSubscribe(ignoredValue -> logger.info(\"A batch of documents - {}\", documents.toString()))\n             .doOnSuccess(response -> logger.info(\"Analyzed sentiment for a batch of documents - {}\", response))\n             .doOnError(error -> logger.warning(\"Failed to analyze sentiment - {}\", error))\n             .map(this::toAnalyzeSentimentResultCollectionResponse)\n             .onErrorMap(throwable -> mapToHttpResponseExceptionIfExist(throwable));\n     }\n+\n+    /*\n+     * Transform SentenceSentiment's opinion mining to output that user can use.\n+     */\n+    private IterableStream<AspectSentiment> toAspectSentimentList(\n+        com.azure.ai.textanalytics.implementation.models.SentenceSentiment sentenceSentiment) {\n+        if (sentenceSentiment.getAspects() == null) {\n+            return null;\n+        }\n+        final List<SentenceAspect> sentenceAspects = sentenceSentiment.getAspects();\n+        final List<AspectSentiment> aspectSentiments = new ArrayList<>();\n+        sentenceAspects.forEach(sentenceAspect -> {\n+            final List<OpinionSentiment> opinionSentiments = new ArrayList<>();\n+            sentenceAspect.getRelations().forEach(aspectRelation -> {\n+                final AspectRelationType aspectRelationType = aspectRelation.getRelationType();\n+                final String refLink = aspectRelation.getRef();\n+                final int refIndex = Integer.parseInt(refLink.substring(refLink.lastIndexOf(\"/\") + 1));\n+                // TODO: Future work to add AspectRelationType.ASPECT feature when service has the implementation.\n+                if (AspectRelationType.OPINION.equals(aspectRelationType)) {\n+                    opinionSentiments.add(toOpinionSentiment(sentenceSentiment.getOpinions().get(refIndex)));\n+                }\n+            });\n+\n+            aspectSentiments.add(new AspectSentiment(sentenceAspect.getText(),\n+                toTextSentiment(sentenceAspect.getSentiment()), new IterableStream<>(opinionSentiments),\n+                sentenceAspect.getOffset(), sentenceAspect.getLength(),\n+                toSentimentConfidenceScores(sentenceAspect.getConfidenceScores())));\n+        });\n+\n+        return new IterableStream<>(aspectSentiments);\n+    }\n+\n+    /*\n+     * Transform type AspectConfidenceScoreLabel to SentimentConfidenceScores.\n+     */\n+    private SentimentConfidenceScores toSentimentConfidenceScores(\n+        AspectConfidenceScoreLabel aspectConfidenceScoreLabel) {\n+        return new SentimentConfidenceScores(aspectConfidenceScoreLabel.getNegative(), 0,\n+            aspectConfidenceScoreLabel.getPositive());\n+    }\n+\n+    /*\n+     * Transform type SentenceOpinion to OpinionSentiment.\n+     */\n+    private OpinionSentiment toOpinionSentiment(SentenceOpinion sentenceOpinion) {\n+        return new OpinionSentiment(sentenceOpinion.getText(), toTextSentiment(sentenceOpinion.getSentiment()),\n+            sentenceOpinion.getOffset(), sentenceOpinion.getLength(), sentenceOpinion.isNegated(),\n+            toSentimentConfidenceScores(sentenceOpinion.getConfidenceScores()));\n+    }\n+\n+    /*\n+     * Transform type SentenceOpinionSentiment to TextSentiment.\n+     */\n+    private TextSentiment toTextSentiment(SentenceOpinionSentiment sentenceOpinionSentiment) {\n+        if (SentenceOpinionSentiment.POSITIVE.equals(sentenceOpinionSentiment)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fe2c35f335049f046ed63786ab8caba5b7fe7e6"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxMjgzNg==", "bodyText": "Should we clarify more what opinion mining might mean?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r461912836", "createdAt": "2020-07-28T22:01:31Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -649,14 +649,41 @@ public String getDefaultLanguage() {\n      *\n      * @return A {@link Mono} contains the {@link DocumentSentiment analyzed document sentiment} of the document.\n      *\n-     * @throws NullPointerException if {@code document} is {@code null}.\n+     * @throws NullPointerException if {@code document} is null.\n      * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<DocumentSentiment> analyzeSentiment(String document, String language) {\n+        return analyzeSentiment(document, false, language);\n+    }\n+\n+    /**\n+     * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n+     * Neutral) for the document and each sentence within it. If {@code isIncludeOpinionMining} set to true, the output\n+     * will include the opinion mining result.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fe2c35f335049f046ed63786ab8caba5b7fe7e6"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNDE3NQ==", "bodyText": "Isn't this Javadoc applicable to the Asycn client javadocs too?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r461914175", "createdAt": "2020-07-28T22:03:12Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClient.java", "diffHunk": "@@ -587,14 +612,42 @@ public DocumentSentiment analyzeSentiment(String document, String language) {\n      *\n      * @return A {@link AnalyzeSentimentResultCollection}.\n      *\n-     * @throws NullPointerException if {@code documents} is {@code null}.\n+     * @throws NullPointerException if {@code documents} is null.\n      * @throws IllegalArgumentException if {@code documents} is empty.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public AnalyzeSentimentResultCollection analyzeSentimentBatch(\n         Iterable<String> documents, String language, TextAnalyticsRequestOptions options) {\n-        inputDocumentsValidation(documents);\n-        return client.analyzeSentimentBatch(documents, language, options).block();\n+        return client.analyzeSentimentBatch(documents, false, language, options).block();\n+    }\n+\n+    /**\n+     * Returns a sentiment prediction, as well as confidence scores for each sentiment label\n+     * (Positive, Negative, and Neutral) for the document and each sentence within it.\n+     * If {@code isIncludeOpinionMining} set to true, the output will include the opinion mining result.\n+     *\n+     * <p><strong>Code Sample</strong></p>\n+     * <p>Analyze the sentiments in a list of documents with a provided language representation and request options.</p>\n+     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch#Iterable-boolean-String-TextAnalyticsRequestOptions}\n+     *\n+     * @param documents A list of documents to be analyzed.\n+     * For text length limits, maximum batch size, and supported text encoding, see\n+     * <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>.\n+     * @param isIncludeOpinionMining The boolean indicator to define if the request includes opinion mining.\n+     * @param language The 2 letter ISO 639-1 representation of language for the documents. If not set, uses \"en\" for\n+     * English as default.\n+     * @param options The {@link TextAnalyticsRequestOptions options} to configure the scoring model for documents\n+     * and show statistics.\n+     *\n+     * @return A {@link AnalyzeSentimentResultCollection}.\n+     *\n+     * @throws NullPointerException if {@code documents} is null.\n+     * @throws IllegalArgumentException if {@code documents} is empty.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fe2c35f335049f046ed63786ab8caba5b7fe7e6"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNTM5MQ==", "bodyText": "does the param name need to be plural, it kind of suggests its returning more than one value?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r461925391", "createdAt": "2020-07-28T22:18:23Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/OpinionSentiment.java", "diffHunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The {@link OpinionSentiment} model.\n+ */\n+@Immutable\n+public final class OpinionSentiment {\n+    private final String text;\n+    private final TextSentiment sentiment;\n+    private final SentimentConfidenceScores confidenceScores;\n+    private final boolean isNegated;\n+    private final int length;\n+    private final int offset;\n+\n+    /**\n+     * Create an {@link OpinionSentiment} model that describes opinion sentiment.\n+     *\n+     * @param text The opinion text property.\n+     * @param sentiment The text sentiment label: POSITIVE, NEGATIVE.\n+     * @param offset The offset of opinion text.\n+     * @param length The length of opinion text.\n+     * @param isNegated The boolean indicator to show if the opinion text negated or not.\n+     * @param confidenceScores The {@link SentimentConfidenceScores}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fe2c35f335049f046ed63786ab8caba5b7fe7e6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNjU3NA==", "bodyText": "I think these examples need to be more concise seeing they get injected into javadocs esp, it can make the javdocs pretty verbose.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r461926574", "createdAt": "2020-07-28T22:21:25Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsClientJavaDocCodeSnippets.java", "diffHunk": "@@ -490,6 +498,73 @@ public void analyzeSentimentWithLanguage() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment#String-String\n     }\n \n+    /**\n+     * Code snippet for {@link TextAnalyticsClient#analyzeSentiment(String, boolean, String)}\n+     */\n+    public void analyzeSentimentWithLanguageWithOpinionMining() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment#String-boolean-String\n+        final DocumentSentiment documentSentiment = textAnalyticsClient.analyzeSentiment(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fe2c35f335049f046ed63786ab8caba5b7fe7e6"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fedfae2933395a2f2fa418f17dbff8a16cd1f563", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fedfae2933395a2f2fa418f17dbff8a16cd1f563", "committedDate": "2020-08-03T16:39:49Z", "message": "resolved conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9efab3fc55e4a4e9298d64f98f1363ea5e591025", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9efab3fc55e4a4e9298d64f98f1363ea5e591025", "committedDate": "2020-08-05T23:02:54Z", "message": "addressed feebacks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDk5Mzk0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#pullrequestreview-462099394", "createdAt": "2020-08-05T23:55:43Z", "commit": {"oid": "9efab3fc55e4a4e9298d64f98f1363ea5e591025"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzo1NTo0M1rOG8ef3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzo1NTo0M1rOG8ef3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NzQyMA==", "bodyText": "Why is this in the changeset ?\nIt should have been a part of the increment PR?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r466067420", "createdAt": "2020-08-05T23:55:43Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/CHANGELOG.md", "diffHunk": "@@ -1,10 +1,11 @@\n # Release History\n ## 5.1.0-beta.1 (Unreleased)\n-\n-## 1.1.0-beta.1 (Unreleased)\n **New features**\n - Text analytics SDK update the service to version `v3.1-preview.1` from `v3.0`.\n-- Added Opinion Mining feature.\n+- Added support for the Opinion Mining feature.\n+\n+## 5.0.0 (2020-07-27)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9efab3fc55e4a4e9298d64f98f1363ea5e591025"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d42ac1712153c94852a9dad4d98d406452ee7ef5", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d42ac1712153c94852a9dad4d98d406452ee7ef5", "committedDate": "2020-08-06T14:08:37Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into TA-OpinionMining"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de3970a837d6f49c16076650c4274879d6e43f03", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/de3970a837d6f49c16076650c4274879d6e43f03", "committedDate": "2020-08-11T05:40:05Z", "message": "resolve conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09abd7013938bb43aa43c8eb01ffac917ab8d389", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/09abd7013938bb43aa43c8eb01ffac917ab8d389", "committedDate": "2020-08-11T05:51:57Z", "message": "reorder the API's parameter input list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fab703d1891767de604494cf79fea5f246cbbd3a", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fab703d1891767de604494cf79fea5f246cbbd3a", "committedDate": "2020-08-12T02:50:24Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into TA-OpinionMining"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTY0ODE5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#pullrequestreview-466164819", "createdAt": "2020-08-12T18:22:37Z", "commit": {"oid": "09abd7013938bb43aa43c8eb01ffac917ab8d389"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoyMjozOFrOG_tOmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoyODozOFrOG_tbrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1NDQ4OA==", "bodyText": "Should include that if this flag is specified, you'll get a minedOpinions property on SentenceSentiment", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r469454488", "createdAt": "2020-08-12T18:22:38Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -86,16 +97,18 @@\n      * which contains {@link AnalyzeSentimentResultCollection}.\n      *\n      * @param documents The list of documents to analyze sentiments for.\n+     * @param includeOpinionMining The boolean indicator to include opinion mining data in the returned result.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09abd7013938bb43aa43c8eb01ffac917ab8d389"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1NjE4Ng==", "bodyText": "nit: I think this might be a better description", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r469456186", "createdAt": "2020-08-12T18:25:38Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/MinedOpinion.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.util.IterableStream;\n+\n+/**\n+ * The {@link MinedOpinion} model.\n+ */\n+public final class MinedOpinion {\n+    private final AspectSentiment aspect;\n+    private final IterableStream<OpinionSentiment> opinions;\n+\n+    /**\n+     * Create an {@link MinedOpinion} model that describes mined opinion.\n+     *\n+     * @param aspect The aspect of the mined opinion.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09abd7013938bb43aa43c8eb01ffac917ab8d389"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1NjY1Mw==", "bodyText": "should include this is only returned if you pass the opinion mining parameter to the analyzeSentiment cal", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r469456653", "createdAt": "2020-08-12T18:26:33Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/SentenceSentiment.java", "diffHunk": "@@ -14,25 +15,42 @@\n     private final String text;\n     private final SentimentConfidenceScores confidenceScores;\n     private final TextSentiment sentiment;\n+    private final IterableStream<MinedOpinion> minedOpinions;\n \n     /**\n      * Creates a {@link SentenceSentiment} model that describes the sentiment analysis of sentence.\n-     *\n-     * @param text The sentence text\n+     * @param text The sentence text.\n      * @param sentiment The sentiment label of the sentence.\n      * @param confidenceScores The sentiment confidence score (Softmax score) between 0 and 1, for each sentiment label.\n      *   Higher values signify higher confidence.\n      */\n     public SentenceSentiment(String text, TextSentiment sentiment, SentimentConfidenceScores confidenceScores) {\n         this.text = text;\n         this.sentiment = sentiment;\n+        this.minedOpinions = null;\n+        this.confidenceScores = confidenceScores;\n+    }\n+\n+    /**\n+     * Creates a {@link SentenceSentiment} model that describes the sentiment analysis of sentence.\n+     * @param text The sentence text.\n+     * @param sentiment The sentiment label of the sentence.\n+     * @param minedOpinions The mined opinions of the sentence sentiment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09abd7013938bb43aa43c8eb01ffac917ab8d389"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1NzA3NQ==", "bodyText": "nit: \"Is the aspect negated\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r469457075", "createdAt": "2020-08-12T18:27:17Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/AnalyzeSentimentWithAspects.java", "diffHunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.ai.textanalytics.models.DocumentSentiment;\n+import com.azure.ai.textanalytics.models.MinedOpinion;\n+import com.azure.ai.textanalytics.models.OpinionSentiment;\n+import com.azure.ai.textanalytics.models.SentimentConfidenceScores;\n+import com.azure.ai.textanalytics.models.TextSentiment;\n+import com.azure.core.credential.AzureKeyCredential;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.azure.ai.textanalytics.models.TextSentiment.MIXED;\n+import static com.azure.ai.textanalytics.models.TextSentiment.NEGATIVE;\n+import static com.azure.ai.textanalytics.models.TextSentiment.POSITIVE;\n+\n+/**\n+ * Sample demonstrates how to synchronously analyze the sentiment of document with opinion mining.\n+ */\n+public class AnalyzeSentimentWithAspects {\n+    /**\n+     * Main method to invoke this demo about how to analyze the sentiment of document.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        TextAnalyticsClient client = new TextAnalyticsClientBuilder()\n+            .credential(new AzureKeyCredential(\"{key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildClient();\n+\n+        // The text that needs be analyzed.\n+        String document = \"Bad atmosphere. Not close to plenty of restaurants, hotels, and transit! Staff are not friendly and helpful.\";\n+\n+        System.out.printf(\"Text = %s%n\", document);\n+\n+        final DocumentSentiment documentSentiment = client.analyzeSentiment(document, \"en\", true);\n+        SentimentConfidenceScores scores = documentSentiment.getConfidenceScores();\n+        System.out.printf(\n+            \"Recognized document sentiment: %s, positive score: %f, neutral score: %f, negative score: %f.%n\",\n+            documentSentiment.getSentiment(), scores.getPositive(), scores.getNeutral(), scores.getNegative());\n+\n+        List<MinedOpinion> positiveMinedOpinions = new ArrayList<>();\n+        List<MinedOpinion> mixedMinedOpinions = new ArrayList<>();\n+        List<MinedOpinion> negativeMinedOpinions = new ArrayList<>();\n+        documentSentiment.getSentences().forEach(sentenceSentiment -> {\n+            SentimentConfidenceScores sentenceScores = sentenceSentiment.getConfidenceScores();\n+            System.out.printf(\"\\tSentence sentiment: %s, positive score: %f, neutral score: %f, negative score: %f.%n\",\n+                sentenceSentiment.getSentiment(), sentenceScores.getPositive(), sentenceScores.getNeutral(), sentenceScores.getNegative());\n+            sentenceSentiment.getMinedOpinions().forEach(minedOpinion -> {\n+                TextSentiment aspectTextSentiment = minedOpinion.getAspect().getSentiment();\n+                if (NEGATIVE.equals(aspectTextSentiment)) {\n+                    negativeMinedOpinions.add(minedOpinion);\n+                } else if (POSITIVE.equals(aspectTextSentiment)) {\n+                    positiveMinedOpinions.add(minedOpinion);\n+                } else if (MIXED.equals(aspectTextSentiment)) {\n+                    mixedMinedOpinions.add(minedOpinion);\n+                }\n+            });\n+        });\n+\n+        System.out.printf(\"Positive aspects count: %d%n\", positiveMinedOpinions.size());\n+        for (MinedOpinion positiveMinedOpinion : positiveMinedOpinions) {\n+            System.out.printf(\"\\tAspect: %s%n\", positiveMinedOpinion.getAspect().getText());\n+            for (OpinionSentiment opinionSentiment : positiveMinedOpinion.getOpinions()) {\n+                System.out.printf(\"\\t\\t'%s' sentiment because of \\\"%s\\\". Does the aspect negated: %s.%n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09abd7013938bb43aa43c8eb01ffac917ab8d389"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1NzgzOQ==", "bodyText": "Should also include it's only available for v3.1-preview.1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r469457839", "createdAt": "2020-08-12T18:28:38Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -86,16 +97,18 @@\n      * which contains {@link AnalyzeSentimentResultCollection}.\n      *\n      * @param documents The list of documents to analyze sentiments for.\n+     * @param includeOpinionMining The boolean indicator to include opinion mining data in the returned result.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1NDQ4OA=="}, "originalCommit": {"oid": "09abd7013938bb43aa43c8eb01ffac917ab8d389"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34716072b45d5ffb5c22a59bea18363e02e16877", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/34716072b45d5ffb5c22a59bea18363e02e16877", "committedDate": "2020-08-13T03:53:08Z", "message": "with latest design implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ed68e89a1c9d900f05b593eb2c055f12c95febb4", "committedDate": "2020-08-13T03:53:18Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into TA-OpinionMining"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2OTgzMDA4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#pullrequestreview-466983008", "createdAt": "2020-08-13T17:28:02Z", "commit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzoyODowMlrOHAVzug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzoyODowMlrOHAVzug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDExOTM1NA==", "bodyText": "This would be a breaking change, are we ok with that?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470119354", "createdAt": "2020-08-13T17:28:02Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -67,15 +75,21 @@\n      * which contains {@link AnalyzeSentimentResultCollection}.\n      *\n      * @param documents The list of documents to analyze sentiments for.\n-     * @param options The {@link TextAnalyticsRequestOptions} request options.\n-     *\n+     * @param options The additional configurable {@link AnalyzeSentimentOptions options} that may be passed when\n+     * analyzing sentiments.\n      * @return A mono {@link Response} contains {@link AnalyzeSentimentResultCollection}.\n+     *\n+     * @throws NullPointerException if {@code documents} is null.\n+     * @throws IllegalArgumentException if {@code documents} is empty.\n      */\n     public Mono<Response<AnalyzeSentimentResultCollection>> analyzeSentimentBatch(\n-        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options) {\n+        Iterable<TextDocumentInput> documents, AnalyzeSentimentOptions options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2OTk5MTc0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#pullrequestreview-466999174", "createdAt": "2020-08-13T17:50:26Z", "commit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzo1MDoyN1rOHAW9ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzo1MDoyN1rOHAW9ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEzODI3MA==", "bodyText": "what happens if the the character \"/\" is not found?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470138270", "createdAt": "2020-08-13T17:50:27Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -188,24 +197,80 @@ private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment\n      * {@link AnalyzeSentimentResultCollection} from a {@link SimpleResponse} of {@link SentimentResponse}.\n      *\n      * @param documents A list of documents to be analyzed.\n+     * @param includeOpinionMining The boolean indicator to include opinion mining data in the returned result. If this\n+     * flag is specified, you'll get a {@code minedOpinions} property on SentenceSentiment. It's available start from\n+     * v3.1-preview.1 service version.\n      * @param options The {@link TextAnalyticsRequestOptions} request options.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n      *\n      * @return A mono {@link Response} contains {@link AnalyzeSentimentResultCollection}.\n      */\n     private Mono<Response<AnalyzeSentimentResultCollection>> getAnalyzedSentimentResponse(\n-        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context) {\n-        // TODO: add opinion mining in the following PR\n+        Iterable<TextDocumentInput> documents, boolean includeOpinionMining, TextAnalyticsRequestOptions options,\n+        Context context) {\n         return service.sentimentWithResponseAsync(\n             new MultiLanguageBatchInput().setDocuments(toMultiLanguageInput(documents)),\n             options == null ? null : options.getModelVersion(),\n             options == null ? null : options.isIncludeStatistics(),\n-            null,\n+            includeOpinionMining,\n             context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE))\n             .doOnSubscribe(ignoredValue -> logger.info(\"A batch of documents - {}\", documents.toString()))\n             .doOnSuccess(response -> logger.info(\"Analyzed sentiment for a batch of documents - {}\", response))\n             .doOnError(error -> logger.warning(\"Failed to analyze sentiment - {}\", error))\n             .map(this::toAnalyzeSentimentResultCollectionResponse)\n             .onErrorMap(throwable -> mapToHttpResponseExceptionIfExist(throwable));\n     }\n+\n+    /*\n+     * Transform SentenceSentiment's opinion mining to output that user can use.\n+     */\n+    private IterableStream<MinedOpinion> toMinedOpinionList(\n+        com.azure.ai.textanalytics.implementation.models.SentenceSentiment sentenceSentiment) {\n+        // If include opinion mining indicator is false, the service return null for the aspect list.\n+        if (sentenceSentiment.getAspects() == null) {\n+            return null;\n+        }\n+        final List<SentenceAspect> sentenceAspects = sentenceSentiment.getAspects();\n+        final List<MinedOpinion> minedOpinions = new ArrayList<>();\n+        sentenceAspects.forEach(sentenceAspect -> {\n+            final List<OpinionSentiment> opinionSentiments = new ArrayList<>();\n+            sentenceAspect.getRelations().forEach(aspectRelation -> {\n+                final AspectRelationType aspectRelationType = aspectRelation.getRelationType();\n+                final String refLink = aspectRelation.getRef();\n+                final int refIndex = Integer.parseInt(refLink.substring(refLink.lastIndexOf(\"/\") + 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 178}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDAwOTI1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#pullrequestreview-467000925", "createdAt": "2020-08-13T17:52:53Z", "commit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzo1Mjo1NFrOHAXEfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzo1Mjo1NFrOHAXEfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0MDAyOA==", "bodyText": "Should this example show opinion mining aspect of analyzing sentiment?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470140028", "createdAt": "2020-08-13T17:52:54Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -649,14 +652,46 @@ public String getDefaultLanguage() {\n      *\n      * @return A {@link Mono} contains the {@link DocumentSentiment analyzed document sentiment} of the document.\n      *\n-     * @throws NullPointerException if {@code document} is {@code null}.\n+     * @throws NullPointerException if {@code document} is null.\n      * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<DocumentSentiment> analyzeSentiment(String document, String language) {\n+        return analyzeSentiment(document, language, null);\n+    }\n+\n+    /**\n+     * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n+     * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n+     * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining result. It mined the\n+     * opinions of a sentence and conduct more granular analysis around the aspects of a product or service\n+     * (also known as aspect-based sentiment analysis).\n+     *\n+     * <p><strong>Code Sample</strong></p>\n+     * <p>Analyze the sentiments in a document with a provided language representation and\n+     * {@link AnalyzeSentimentOptions} options. Subscribes to the call asynchronously and prints out the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 208}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDA2OTk4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#pullrequestreview-467006998", "createdAt": "2020-08-13T18:00:56Z", "commit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODowMDo1NlrOHAXZfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODoxNzowOFrOHAX9oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0NTQwNg==", "bodyText": "Does this exception not apply to the previous API's?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470145406", "createdAt": "2020-08-13T18:00:56Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -727,11 +796,44 @@ public String getDefaultLanguage() {\n      *\n      * @return A {@link Mono} contains a {@link Response} that contains a {@link AnalyzeSentimentResultCollection}.\n      *\n-     * @throws NullPointerException if {@code documents} is {@code null}.\n+     * @throws NullPointerException if {@code documents} is null.\n+     * @throws IllegalArgumentException if {@code documents} is empty.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0NjU2NA==", "bodyText": "Need more description explaining the property. This descriptions here is for the private property and hence won't be accessible to th users. Consider moving that here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470146564", "createdAt": "2020-08-13T18:02:52Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/AnalyzeSentimentOptions.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+/**\n+ * The {@link AnalyzeSentimentOptions} model.\n+ */\n+@Fluent\n+public final class AnalyzeSentimentOptions {\n+    private TextAnalyticsRequestOptions requestOptions;\n+\n+    /*\n+     * The boolean indicator to include opinion mining data in the returned result. If this\n+     * flag is specified, you'll get a {@code minedOpinions} property on SentenceSentiment. It's available start from\n+     * v3.1-preview.1 service version.\n+     */\n+    private boolean includeOpinionMining;\n+\n+    /**\n+     * Get the value of {@code requestOptions}.\n+     *\n+     * @return the value of {@code requestOptions}.\n+     */\n+    public TextAnalyticsRequestOptions getRequestOptions() {\n+        return requestOptions;\n+    }\n+\n+    /**\n+     * Set the value of {@code includeOpinionMining}.\n+     *\n+     * @param requestOptions It used to configure the scoring model for documents and show statistics.\n+     * @return the AnalyzeSentimentOptions object itself.\n+     */\n+    public AnalyzeSentimentOptions setRequestOptions(TextAnalyticsRequestOptions requestOptions) {\n+        this.requestOptions = requestOptions;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the value of {@code includeOpinionMining}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0NjkxOA==", "bodyText": "label?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470146918", "createdAt": "2020-08-13T18:03:32Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/AspectSentiment.java", "diffHunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The {@link AspectSentiment} model.\n+ */\n+@Immutable\n+public final class AspectSentiment {\n+    private final String text;\n+    private final TextSentiment sentiment;\n+    private final SentimentConfidenceScores confidenceScores;\n+    private final int length;\n+    private final int offset;\n+\n+    /**\n+     * Create an {@link AspectSentiment} model that describes aspect.\n+     *\n+     * @param text The aspect text property.\n+     * @param sentiment The text sentiment label: POSITIVE, NEGATIVE.\n+     * @param offset The offset of aspect text.\n+     * @param length The length of aspect text.\n+     * @param confidenceScores The {@link SentimentConfidenceScores}.\n+     */\n+    public AspectSentiment(String text, TextSentiment sentiment,\n+        int offset, int length, SentimentConfidenceScores confidenceScores) {\n+        this.text = text;\n+        this.sentiment = sentiment;\n+        this.confidenceScores = confidenceScores;\n+        this.length = length;\n+        this.offset = offset;\n+    }\n+\n+    /**\n+     * Get the aspect text property.\n+     *\n+     * @return The text value.\n+     */\n+    public String getText() {\n+        return text;\n+    }\n+\n+    /**\n+     * Get the aspect text sentiment label: POSITIVE, NEGATIVE.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0ODAxNQ==", "bodyText": "Should add more docs explaining what aspect and opionion is.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470148015", "createdAt": "2020-08-13T18:05:35Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/MinedOpinion.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.util.IterableStream;\n+\n+/**\n+ * The {@link MinedOpinion} model.\n+ */\n+public final class MinedOpinion {\n+    private final AspectSentiment aspect;\n+    private final IterableStream<OpinionSentiment> opinions;\n+\n+    /**\n+     * Create an {@link MinedOpinion} model that describes mined opinion.\n+     *\n+     * @param aspect The aspect of a product/service that this opinion is about.\n+     * @param opinions The opinions of the aspect text.\n+     */\n+    public MinedOpinion(AspectSentiment aspect, IterableStream<OpinionSentiment> opinions) {\n+        this.aspect = aspect;\n+        this.opinions = opinions;\n+    }\n+\n+    /**\n+     * Get the opinions of aspect text.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1MTQyMA==", "bodyText": "Are we only creating the opinion list to print out the size ?\nSeems like not adding a lot of value.\nThis example could be simplified I think.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470151420", "createdAt": "2020-08-13T18:11:22Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/AnalyzeSentimentWithOpinionMining.java", "diffHunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.ai.textanalytics.models.AnalyzeSentimentOptions;\n+import com.azure.ai.textanalytics.models.DocumentSentiment;\n+import com.azure.ai.textanalytics.models.MinedOpinion;\n+import com.azure.ai.textanalytics.models.OpinionSentiment;\n+import com.azure.ai.textanalytics.models.SentimentConfidenceScores;\n+import com.azure.ai.textanalytics.models.TextSentiment;\n+import com.azure.core.credential.AzureKeyCredential;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.azure.ai.textanalytics.models.TextSentiment.MIXED;\n+import static com.azure.ai.textanalytics.models.TextSentiment.NEGATIVE;\n+import static com.azure.ai.textanalytics.models.TextSentiment.POSITIVE;\n+\n+/**\n+ * Sample demonstrates how to synchronously analyze the sentiment of document with opinion mining.\n+ */\n+public class AnalyzeSentimentWithOpinionMining {\n+    /**\n+     * Main method to invoke this demo about how to analyze the sentiment of document.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        TextAnalyticsClient client = new TextAnalyticsClientBuilder()\n+            .credential(new AzureKeyCredential(\"{key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildClient();\n+\n+        // The text that needs be analyzed.\n+        String document = \"Bad atmosphere. Not close to plenty of restaurants, hotels, and transit! Staff are not friendly and helpful.\";\n+\n+        System.out.printf(\"Text = %s%n\", document);\n+\n+        AnalyzeSentimentOptions options = new AnalyzeSentimentOptions().setIncludeOpinionMining(true);\n+        final DocumentSentiment documentSentiment = client.analyzeSentiment(document, \"en\", options);\n+        SentimentConfidenceScores scores = documentSentiment.getConfidenceScores();\n+        System.out.printf(\n+            \"Recognized document sentiment: %s, positive score: %f, neutral score: %f, negative score: %f.%n\",\n+            documentSentiment.getSentiment(), scores.getPositive(), scores.getNeutral(), scores.getNegative());\n+\n+        List<MinedOpinion> positiveMinedOpinions = new ArrayList<>();\n+        List<MinedOpinion> mixedMinedOpinions = new ArrayList<>();\n+        List<MinedOpinion> negativeMinedOpinions = new ArrayList<>();\n+        documentSentiment.getSentences().forEach(sentenceSentiment -> {\n+            SentimentConfidenceScores sentenceScores = sentenceSentiment.getConfidenceScores();\n+            System.out.printf(\"\\tSentence sentiment: %s, positive score: %f, neutral score: %f, negative score: %f.%n\",\n+                sentenceSentiment.getSentiment(), sentenceScores.getPositive(), sentenceScores.getNeutral(), sentenceScores.getNegative());\n+            sentenceSentiment.getMinedOpinions().forEach(minedOpinion -> {\n+                TextSentiment aspectTextSentiment = minedOpinion.getAspect().getSentiment();\n+                if (NEGATIVE.equals(aspectTextSentiment)) {\n+                    negativeMinedOpinions.add(minedOpinion);\n+                } else if (POSITIVE.equals(aspectTextSentiment)) {\n+                    positiveMinedOpinions.add(minedOpinion);\n+                } else if (MIXED.equals(aspectTextSentiment)) {\n+                    mixedMinedOpinions.add(minedOpinion);\n+                }\n+            });\n+        });\n+\n+        System.out.printf(\"Positive aspects count: %d%n\", positiveMinedOpinions.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1MjIwNw==", "bodyText": "Don't think its a good idea to be making these lists, can't we directly add the content from L508-l513 here?\nApplicable for all examples below.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470152207", "createdAt": "2020-08-13T18:12:41Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -469,7 +478,42 @@ public void analyzeSentimentWithLanguage() {\n                         sentenceSentiment.getConfidenceScores().getNegative());\n                 }\n             });\n-        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment#string-string\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment#String-String\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#analyzeSentiment(String, String, AnalyzeSentimentOptions)}\n+     */\n+    public void analyzeSentimentWithLanguageWithOpinionMining() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment#String-String-AnalyzeSentimentOptions\n+        textAnalyticsAsyncClient.analyzeSentiment(\"The hotel was dark and unclean.\", \"en\",\n+            new AnalyzeSentimentOptions().setIncludeOpinionMining(true))\n+            .subscribe(documentSentiment -> {\n+                List<MinedOpinion> positiveMinedOpinions = new ArrayList<>();\n+                List<MinedOpinion> mixedMinedOpinions = new ArrayList<>();\n+                List<MinedOpinion> negativeMinedOpinions = new ArrayList<>();\n+                for (SentenceSentiment sentenceSentiment : documentSentiment.getSentences()) {\n+                    sentenceSentiment.getMinedOpinions().forEach(minedOpinion -> {\n+                        TextSentiment aspectTextSentiment = minedOpinion.getAspect().getSentiment();\n+                        if (NEGATIVE.equals(aspectTextSentiment)) {\n+                            negativeMinedOpinions.add(minedOpinion);\n+                        } else if (POSITIVE.equals(aspectTextSentiment)) {\n+                            positiveMinedOpinions.add(minedOpinion);\n+                        } else if (MIXED.equals(aspectTextSentiment)) {\n+                            mixedMinedOpinions.add(minedOpinion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1MjM1Mg==", "bodyText": "unused?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470152352", "createdAt": "2020-08-13T18:12:57Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -469,7 +478,42 @@ public void analyzeSentimentWithLanguage() {\n                         sentenceSentiment.getConfidenceScores().getNegative());\n                 }\n             });\n-        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment#string-string\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment#String-String\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#analyzeSentiment(String, String, AnalyzeSentimentOptions)}\n+     */\n+    public void analyzeSentimentWithLanguageWithOpinionMining() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment#String-String-AnalyzeSentimentOptions\n+        textAnalyticsAsyncClient.analyzeSentiment(\"The hotel was dark and unclean.\", \"en\",\n+            new AnalyzeSentimentOptions().setIncludeOpinionMining(true))\n+            .subscribe(documentSentiment -> {\n+                List<MinedOpinion> positiveMinedOpinions = new ArrayList<>();\n+                List<MinedOpinion> mixedMinedOpinions = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1MjgxMQ==", "bodyText": "Not a good example to show.\nPlease use the options more efficiently or use other overload.\nApplicable for all examples below.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470152811", "createdAt": "2020-08-13T18:13:53Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -482,7 +526,7 @@ public void analyzeSentimentStringListWithOptions() {\n             \"The restaurant had amazing gnocchi.\"\n         );\n \n-        textAnalyticsAsyncClient.analyzeSentimentBatch(documents, \"en\", null).subscribe(\n+        textAnalyticsAsyncClient.analyzeSentimentBatch(documents, \"en\", (TextAnalyticsRequestOptions) null).subscribe(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1NDY1Nw==", "bodyText": "Consider providing an empty object", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470154657", "createdAt": "2020-08-13T18:17:08Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/DocumentInputAsyncTest.java", "diffHunk": "@@ -617,7 +617,7 @@ public void analyzeSentimentNullInputWithLanguageHint() {\n      */\n     @Test\n     public void analyzeSentimentBatchNullInput() {\n-        StepVerifier.create(client.analyzeSentimentBatch(null, null, null))\n+        StepVerifier.create(client.analyzeSentimentBatch(null, null, (TextAnalyticsRequestOptions) null))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2OTMxNTA0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#pullrequestreview-466931504", "createdAt": "2020-08-13T16:37:04Z", "commit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjozNzowNFrOHATfIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToxNzozOVrOHAaIFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4MTMxMw==", "bodyText": "Please consider having this in another PR for separation of concern.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470081313", "createdAt": "2020-08-13T16:37:04Z", "author": {"login": "deyaaeldeen"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -117,17 +135,6 @@\n             analyzeSentimentResults.add(convertToAnalyzeSentimentResult(documentSentiment));\n         }\n         for (DocumentError documentError : sentimentResponse.getErrors()) {\n-            /*\n-             *  TODO: Remove this after service update to throw exception.\n-             *  Currently, service sets max limit of document size to 5, if the input documents size > 5, it will\n-             *  have an id = \"\", empty id. In the future, they will remove this and throw HttpResponseException.\n-             */\n-            if (documentError.getId().isEmpty()) {\n-                throw logger.logExceptionAsError(\n-                    new HttpResponseException(documentError.getError().getInnererror().getMessage(),\n-                    getEmptyErrorIdHttpResponse(new SimpleResponse<>(response, response.getValue())),\n-                        documentError.getError().getInnererror().getCode()));\n-            }\n             analyzeSentimentResults.add(new AnalyzeSentimentResult(documentError.getId(), null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4NjgwOQ==", "bodyText": "One suggestion:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * flag is specified, you'll get a {@code minedOpinions} property on SentenceSentiment. It's available start from\n          \n          \n            \n                 * v3.1-preview.1 service version.\n          \n          \n            \n                 * flag is specified, you'll get a {@code minedOpinions} property on SentenceSentiment. It is provided by service\n          \n          \n            \n                 * v3.1-preview.1 and later.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470086809", "createdAt": "2020-08-13T16:46:16Z", "author": {"login": "deyaaeldeen"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -188,24 +197,80 @@ private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment\n      * {@link AnalyzeSentimentResultCollection} from a {@link SimpleResponse} of {@link SentimentResponse}.\n      *\n      * @param documents A list of documents to be analyzed.\n+     * @param includeOpinionMining The boolean indicator to include opinion mining data in the returned result. If this\n+     * flag is specified, you'll get a {@code minedOpinions} property on SentenceSentiment. It's available start from\n+     * v3.1-preview.1 service version.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDExODQzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            final int refIndex = Integer.parseInt(refLink.substring(refLink.lastIndexOf(\"/\") + 1));\n          \n          \n            \n                            if (AspectRelationType.OPINION.equals(aspectRelationType)) {\n          \n          \n            \n                                opinionSentiments.add(toOpinionSentiment(sentenceSentiment.getOpinions().get(refIndex)));\n          \n          \n            \n                            final int opinionIndex = Integer.parseInt(refLink.substring(refLink.lastIndexOf(\"/\") + 1));\n          \n          \n            \n                            if (AspectRelationType.OPINION.equals(aspectRelationType)) {\n          \n          \n            \n                                opinionSentiments.add(toOpinionSentiment(sentenceSentiment.getOpinions().get(opinionIndex)));", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470118437", "createdAt": "2020-08-13T17:27:01Z", "author": {"login": "deyaaeldeen"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -188,24 +197,80 @@ private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment\n      * {@link AnalyzeSentimentResultCollection} from a {@link SimpleResponse} of {@link SentimentResponse}.\n      *\n      * @param documents A list of documents to be analyzed.\n+     * @param includeOpinionMining The boolean indicator to include opinion mining data in the returned result. If this\n+     * flag is specified, you'll get a {@code minedOpinions} property on SentenceSentiment. It's available start from\n+     * v3.1-preview.1 service version.\n      * @param options The {@link TextAnalyticsRequestOptions} request options.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n      *\n      * @return A mono {@link Response} contains {@link AnalyzeSentimentResultCollection}.\n      */\n     private Mono<Response<AnalyzeSentimentResultCollection>> getAnalyzedSentimentResponse(\n-        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context) {\n-        // TODO: add opinion mining in the following PR\n+        Iterable<TextDocumentInput> documents, boolean includeOpinionMining, TextAnalyticsRequestOptions options,\n+        Context context) {\n         return service.sentimentWithResponseAsync(\n             new MultiLanguageBatchInput().setDocuments(toMultiLanguageInput(documents)),\n             options == null ? null : options.getModelVersion(),\n             options == null ? null : options.isIncludeStatistics(),\n-            null,\n+            includeOpinionMining,\n             context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE))\n             .doOnSubscribe(ignoredValue -> logger.info(\"A batch of documents - {}\", documents.toString()))\n             .doOnSuccess(response -> logger.info(\"Analyzed sentiment for a batch of documents - {}\", response))\n             .doOnError(error -> logger.warning(\"Failed to analyze sentiment - {}\", error))\n             .map(this::toAnalyzeSentimentResultCollectionResponse)\n             .onErrorMap(throwable -> mapToHttpResponseExceptionIfExist(throwable));\n     }\n+\n+    /*\n+     * Transform SentenceSentiment's opinion mining to output that user can use.\n+     */\n+    private IterableStream<MinedOpinion> toMinedOpinionList(\n+        com.azure.ai.textanalytics.implementation.models.SentenceSentiment sentenceSentiment) {\n+        // If include opinion mining indicator is false, the service return null for the aspect list.\n+        if (sentenceSentiment.getAspects() == null) {\n+            return null;\n+        }\n+        final List<SentenceAspect> sentenceAspects = sentenceSentiment.getAspects();\n+        final List<MinedOpinion> minedOpinions = new ArrayList<>();\n+        sentenceAspects.forEach(sentenceAspect -> {\n+            final List<OpinionSentiment> opinionSentiments = new ArrayList<>();\n+            sentenceAspect.getRelations().forEach(aspectRelation -> {\n+                final AspectRelationType aspectRelationType = aspectRelation.getRelationType();\n+                final String refLink = aspectRelation.getRef();\n+                final int refIndex = Integer.parseInt(refLink.substring(refLink.lastIndexOf(\"/\") + 1));\n+                if (AspectRelationType.OPINION.equals(aspectRelationType)) {\n+                    opinionSentiments.add(toOpinionSentiment(sentenceSentiment.getOpinions().get(refIndex)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0MjEwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n          \n          \n            \n                 * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n          \n          \n            \n                 * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining result. It mined the\n          \n          \n            \n                 * opinions of a sentence and conduct more granular analysis around the aspects of a product or service\n          \n          \n            \n                 * (also known as aspect-based sentiment analysis).\n          \n          \n            \n                 * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n          \n          \n            \n                 * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n          \n          \n            \n                 * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining results. It mines the\n          \n          \n            \n                 * opinions of a sentence and conducts more granular analysis around aspects in the text (also known as\n          \n          \n            \n                 * aspect-based sentiment analysis).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470142102", "createdAt": "2020-08-13T17:55:53Z", "author": {"login": "deyaaeldeen"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -649,14 +652,46 @@ public String getDefaultLanguage() {\n      *\n      * @return A {@link Mono} contains the {@link DocumentSentiment analyzed document sentiment} of the document.\n      *\n-     * @throws NullPointerException if {@code document} is {@code null}.\n+     * @throws NullPointerException if {@code document} is null.\n      * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<DocumentSentiment> analyzeSentiment(String document, String language) {\n+        return analyzeSentiment(document, language, null);\n+    }\n+\n+    /**\n+     * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n+     * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n+     * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining result. It mined the\n+     * opinions of a sentence and conduct more granular analysis around the aspects of a product or service\n+     * (also known as aspect-based sentiment analysis).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0MzkxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n          \n          \n            \n                 * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n          \n          \n            \n                 * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining result. It mined the\n          \n          \n            \n                 * opinions of a sentence and conduct more granular analysis around the aspects of a product or service\n          \n          \n            \n                 * (also known as aspect-based sentiment analysis).\n          \n          \n            \n                 * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n          \n          \n            \n                 * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n          \n          \n            \n                 * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining results. It mines the\n          \n          \n            \n                 * opinions of a sentence and conducts more granular analysis around aspects in the text (also known as\n          \n          \n            \n                 * aspect-based sentiment analysis).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470143913", "createdAt": "2020-08-13T17:58:35Z", "author": {"login": "deyaaeldeen"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -693,11 +728,45 @@ public String getDefaultLanguage() {\n      *\n      * @return A {@link Mono} contains a {@link AnalyzeSentimentResultCollection}.\n      *\n-     * @throws NullPointerException if {@code documents} is {@code null}.\n+     * @throws NullPointerException if {@code documents} is null.\n+     * @throws IllegalArgumentException if {@code documents} is empty.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<AnalyzeSentimentResultCollection> analyzeSentimentBatch(\n         Iterable<String> documents, String language, TextAnalyticsRequestOptions options) {\n+        return analyzeSentimentBatch(documents, language, new AnalyzeSentimentOptions().setRequestOptions(options));\n+    }\n+\n+    /**\n+     * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n+     * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n+     * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining result. It mined the\n+     * opinions of a sentence and conduct more granular analysis around the aspects of a product or service\n+     * (also known as aspect-based sentiment analysis).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0NDEzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n          \n          \n            \n                 * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n          \n          \n            \n                 * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining result. It mined the\n          \n          \n            \n                 * opinions of a sentence and conduct more granular analysis around the aspects of a product or service\n          \n          \n            \n                 * (also known as aspect-based sentiment analysis).\n          \n          \n            \n                 * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n          \n          \n            \n                 * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n          \n          \n            \n                 * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining results. It mines the\n          \n          \n            \n                 * opinions of a sentence and conducts more granular analysis around aspects in the text (also known as\n          \n          \n            \n                 * aspect-based sentiment analysis).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470144134", "createdAt": "2020-08-13T17:58:57Z", "author": {"login": "deyaaeldeen"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -727,11 +796,44 @@ public String getDefaultLanguage() {\n      *\n      * @return A {@link Mono} contains a {@link Response} that contains a {@link AnalyzeSentimentResultCollection}.\n      *\n-     * @throws NullPointerException if {@code documents} is {@code null}.\n+     * @throws NullPointerException if {@code documents} is null.\n+     * @throws IllegalArgumentException if {@code documents} is empty.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Response<AnalyzeSentimentResultCollection>> analyzeSentimentBatchWithResponse(\n         Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options) {\n+        return analyzeSentimentAsyncClient.analyzeSentimentBatch(documents,\n+            new AnalyzeSentimentOptions().setRequestOptions(options));\n+    }\n+\n+    /**\n+     * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n+     * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n+     * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining result. It mined the\n+     * opinions of a sentence and conduct more granular analysis around the aspects of a product or service\n+     * (also known as aspect-based sentiment analysis).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 302}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0NDgyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n          \n          \n            \n                 * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n          \n          \n            \n                 * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining result. It mined the\n          \n          \n            \n                 * opinions of a sentence and conduct more granular analysis around the aspects of a product or service\n          \n          \n            \n                 * (also known as aspect-based sentiment analysis).\n          \n          \n            \n                 * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n          \n          \n            \n                 * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n          \n          \n            \n                 * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining results. It mines the\n          \n          \n            \n                 * opinions of a sentence and conducts more granular analysis around aspects in the text (also known as\n          \n          \n            \n                 * aspect-based sentiment analysis).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470144825", "createdAt": "2020-08-13T17:59:57Z", "author": {"login": "deyaaeldeen"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClient.java", "diffHunk": "@@ -560,15 +563,45 @@ public DocumentSentiment analyzeSentiment(String document) {\n      *\n      * @return A {@link DocumentSentiment analyzed document sentiment} of the document.\n      *\n-     * @throws NullPointerException if {@code document} is {@code null}.\n+     * @throws NullPointerException if {@code document} is null.\n      * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public DocumentSentiment analyzeSentiment(String document, String language) {\n-        Objects.requireNonNull(document, \"'document' cannot be null.\");\n         return client.analyzeSentiment(document, language).block();\n     }\n \n+    /**\n+     * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n+     * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n+     * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining result. It mined the\n+     * opinions of a sentence and conduct more granular analysis around the aspects of a product or service\n+     * (also known as aspect-based sentiment analysis).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0NTAwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n          \n          \n            \n                 * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n          \n          \n            \n                 * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining result. It mined the\n          \n          \n            \n                 * opinions of a sentence and conduct more granular analysis around the aspects of a product or service\n          \n          \n            \n                 * (also known as aspect-based sentiment analysis).\n          \n          \n            \n                 * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n          \n          \n            \n                 * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n          \n          \n            \n                 * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining results. It mines the\n          \n          \n            \n                 * opinions of a sentence and conducts more granular analysis around aspects in the text (also known as\n          \n          \n            \n                 * aspect-based sentiment analysis).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470145007", "createdAt": "2020-08-13T18:00:13Z", "author": {"login": "deyaaeldeen"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClient.java", "diffHunk": "@@ -587,13 +620,45 @@ public DocumentSentiment analyzeSentiment(String document, String language) {\n      *\n      * @return A {@link AnalyzeSentimentResultCollection}.\n      *\n-     * @throws NullPointerException if {@code documents} is {@code null}.\n+     * @throws NullPointerException if {@code documents} is null.\n      * @throws IllegalArgumentException if {@code documents} is empty.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public AnalyzeSentimentResultCollection analyzeSentimentBatch(\n         Iterable<String> documents, String language, TextAnalyticsRequestOptions options) {\n-        inputDocumentsValidation(documents);\n+        return client.analyzeSentimentBatch(documents, language,\n+            new AnalyzeSentimentOptions().setRequestOptions(options)).block();\n+    }\n+\n+    /**\n+     * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n+     * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n+     * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining result. It mined the\n+     * opinions of a sentence and conduct more granular analysis around the aspects of a product or service\n+     * (also known as aspect-based sentiment analysis).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0NTI4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n          \n          \n            \n                 * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n          \n          \n            \n                 * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining result. It mined the\n          \n          \n            \n                 * opinions of a sentence and conduct more granular analysis around the aspects of a product or service\n          \n          \n            \n                 * (also known as aspect-based sentiment analysis).\n          \n          \n            \n                 * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n          \n          \n            \n                 * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n          \n          \n            \n                 * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining results. It mines the\n          \n          \n            \n                 * opinions of a sentence and conducts more granular analysis around aspects in the text (also known as\n          \n          \n            \n                 * aspect-based sentiment analysis).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470145283", "createdAt": "2020-08-13T18:00:42Z", "author": {"login": "deyaaeldeen"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClient.java", "diffHunk": "@@ -615,13 +680,44 @@ public AnalyzeSentimentResultCollection analyzeSentimentBatch(\n      *\n      * @return A {@link Response} that contains a {@link AnalyzeSentimentResultCollection}.\n      *\n-     * @throws NullPointerException if {@code documents} is {@code null}.\n+     * @throws NullPointerException if {@code documents} is null.\n      * @throws IllegalArgumentException if {@code documents} is empty.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Response<AnalyzeSentimentResultCollection> analyzeSentimentBatchWithResponse(\n         Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context) {\n-        inputDocumentsValidation(documents);\n+        return client.analyzeSentimentAsyncClient.analyzeSentimentBatchWithContext(documents,\n+            new AnalyzeSentimentOptions().setRequestOptions(options), context).block();\n+    }\n+\n+    /**\n+     * Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and\n+     * Neutral) for the document and each sentence within it. If the {@code includeOpinionMining} of\n+     * {@link AnalyzeSentimentOptions} set to true, the output will include the opinion mining result. It mined the\n+     * opinions of a sentence and conduct more granular analysis around the aspects of a product or service\n+     * (also known as aspect-based sentiment analysis).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 319}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0NjEzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * flag is specified, you'll get a {@code minedOpinions} property on SentenceSentiment. It's available start from\n          \n          \n            \n                 * v3.1-preview.1 service version.\n          \n          \n            \n                 * flag is specified, you'll get a {@code minedOpinions} property on SentenceSentiment. It is provided by service\n          \n          \n            \n                 * v3.1-preview.1 and later.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470146134", "createdAt": "2020-08-13T18:02:09Z", "author": {"login": "deyaaeldeen"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/AnalyzeSentimentOptions.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+/**\n+ * The {@link AnalyzeSentimentOptions} model.\n+ */\n+@Fluent\n+public final class AnalyzeSentimentOptions {\n+    private TextAnalyticsRequestOptions requestOptions;\n+\n+    /*\n+     * The boolean indicator to include opinion mining data in the returned result. If this\n+     * flag is specified, you'll get a {@code minedOpinions} property on SentenceSentiment. It's available start from\n+     * v3.1-preview.1 service version.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0NjI4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * flag is specified, you'll get a {@code minedOpinions} property on SentenceSentiment. It's available start from\n          \n          \n            \n                 * v3.1-preview.1 service version.\n          \n          \n            \n                 * flag is specified, you'll get a {@code minedOpinions} property on SentenceSentiment. It is provided by service\n          \n          \n            \n                 * v3.1-preview.1 and later.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470146281", "createdAt": "2020-08-13T18:02:20Z", "author": {"login": "deyaaeldeen"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/AnalyzeSentimentOptions.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+/**\n+ * The {@link AnalyzeSentimentOptions} model.\n+ */\n+@Fluent\n+public final class AnalyzeSentimentOptions {\n+    private TextAnalyticsRequestOptions requestOptions;\n+\n+    /*\n+     * The boolean indicator to include opinion mining data in the returned result. If this\n+     * flag is specified, you'll get a {@code minedOpinions} property on SentenceSentiment. It's available start from\n+     * v3.1-preview.1 service version.\n+     */\n+    private boolean includeOpinionMining;\n+\n+    /**\n+     * Get the value of {@code requestOptions}.\n+     *\n+     * @return the value of {@code requestOptions}.\n+     */\n+    public TextAnalyticsRequestOptions getRequestOptions() {\n+        return requestOptions;\n+    }\n+\n+    /**\n+     * Set the value of {@code includeOpinionMining}.\n+     *\n+     * @param requestOptions It used to configure the scoring model for documents and show statistics.\n+     * @return the AnalyzeSentimentOptions object itself.\n+     */\n+    public AnalyzeSentimentOptions setRequestOptions(TextAnalyticsRequestOptions requestOptions) {\n+        this.requestOptions = requestOptions;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the value of {@code includeOpinionMining}.\n+     *\n+     * @return the value of {@code includeOpinionMining}.\n+     */\n+    public boolean isIncludeOpinionMining() {\n+        return includeOpinionMining;\n+    }\n+\n+    /**\n+     * Set the value of {@code includeOpinionMining}.\n+     *\n+     * @param includeOpinionMining The boolean indicator to include opinion mining data in the returned result. If this\n+     * flag is specified, you'll get a {@code minedOpinions} property on SentenceSentiment. It's available start from\n+     * v3.1-preview.1 service version.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1MzU0OQ==", "bodyText": "There are more labels in the type than listed here. I know the service returns only those for now, but not sure this is addressed clearly in the documentation and could be a point of confusion for the user.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470153549", "createdAt": "2020-08-13T18:15:05Z", "author": {"login": "deyaaeldeen"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/AspectSentiment.java", "diffHunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The {@link AspectSentiment} model.\n+ */\n+@Immutable\n+public final class AspectSentiment {\n+    private final String text;\n+    private final TextSentiment sentiment;\n+    private final SentimentConfidenceScores confidenceScores;\n+    private final int length;\n+    private final int offset;\n+\n+    /**\n+     * Create an {@link AspectSentiment} model that describes aspect.\n+     *\n+     * @param text The aspect text property.\n+     * @param sentiment The text sentiment label: POSITIVE, NEGATIVE.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1Nzk5NA==", "bodyText": "Furthermore, dot net uses a different type which also has a neutral option in it. cc @iscai-msft @maririos", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470157994", "createdAt": "2020-08-13T18:23:35Z", "author": {"login": "deyaaeldeen"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/AspectSentiment.java", "diffHunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The {@link AspectSentiment} model.\n+ */\n+@Immutable\n+public final class AspectSentiment {\n+    private final String text;\n+    private final TextSentiment sentiment;\n+    private final SentimentConfidenceScores confidenceScores;\n+    private final int length;\n+    private final int offset;\n+\n+    /**\n+     * Create an {@link AspectSentiment} model that describes aspect.\n+     *\n+     * @param text The aspect text property.\n+     * @param sentiment The text sentiment label: POSITIVE, NEGATIVE.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1MzU0OQ=="}, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1OTM2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get the confidence score of the sentiment label. All score values sum up to 1, higher the score value means\n          \n          \n            \n                 * higher confidence the sentiment label represents.\n          \n          \n            \n                 * Get the confidence score of the sentiment label. All score values sum up to 1, the higher the score,\n          \n          \n            \n                 * the higher the confidence in the sentiment.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470159366", "createdAt": "2020-08-13T18:26:09Z", "author": {"login": "deyaaeldeen"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/AspectSentiment.java", "diffHunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The {@link AspectSentiment} model.\n+ */\n+@Immutable\n+public final class AspectSentiment {\n+    private final String text;\n+    private final TextSentiment sentiment;\n+    private final SentimentConfidenceScores confidenceScores;\n+    private final int length;\n+    private final int offset;\n+\n+    /**\n+     * Create an {@link AspectSentiment} model that describes aspect.\n+     *\n+     * @param text The aspect text property.\n+     * @param sentiment The text sentiment label: POSITIVE, NEGATIVE.\n+     * @param offset The offset of aspect text.\n+     * @param length The length of aspect text.\n+     * @param confidenceScores The {@link SentimentConfidenceScores}.\n+     */\n+    public AspectSentiment(String text, TextSentiment sentiment,\n+        int offset, int length, SentimentConfidenceScores confidenceScores) {\n+        this.text = text;\n+        this.sentiment = sentiment;\n+        this.confidenceScores = confidenceScores;\n+        this.length = length;\n+        this.offset = offset;\n+    }\n+\n+    /**\n+     * Get the aspect text property.\n+     *\n+     * @return The text value.\n+     */\n+    public String getText() {\n+        return text;\n+    }\n+\n+    /**\n+     * Get the aspect text sentiment label: POSITIVE, NEGATIVE.\n+     * @return The sentiment value.\n+     */\n+    public TextSentiment getSentiment() {\n+        return sentiment;\n+    }\n+\n+\n+    /**\n+     * Get the offset of aspect text.\n+     *\n+     * @return The offset of aspect text.\n+     */\n+    public int getOffset() {\n+        return offset;\n+    }\n+\n+    /**\n+     * Get the length of aspect text.\n+     *\n+     * @return The length of aspect text.\n+     */\n+    public int getLength() {\n+        return length;\n+    }\n+\n+    /**\n+     * Get the confidence score of the sentiment label. All score values sum up to 1, higher the score value means\n+     * higher confidence the sentiment label represents.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1OTc2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Create an {@link MinedOpinion} model that describes mined opinion.\n          \n          \n            \n                 * Create an {@link MinedOpinion} model that describes a mined opinion.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470159760", "createdAt": "2020-08-13T18:26:53Z", "author": {"login": "deyaaeldeen"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/MinedOpinion.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.util.IterableStream;\n+\n+/**\n+ * The {@link MinedOpinion} model.\n+ */\n+public final class MinedOpinion {\n+    private final AspectSentiment aspect;\n+    private final IterableStream<OpinionSentiment> opinions;\n+\n+    /**\n+     * Create an {@link MinedOpinion} model that describes mined opinion.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MDEwMQ==", "bodyText": "same comment about neutral.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r470190101", "createdAt": "2020-08-13T19:17:39Z", "author": {"login": "deyaaeldeen"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/OpinionSentiment.java", "diffHunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The {@link OpinionSentiment} model.\n+ */\n+@Immutable\n+public final class OpinionSentiment {\n+    private final String text;\n+    private final TextSentiment sentiment;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68e89a1c9d900f05b593eb2c055f12c95febb4"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ea1826951e249af2cbf9cc15d3afc1433c501a5", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7ea1826951e249af2cbf9cc15d3afc1433c501a5", "committedDate": "2020-08-19T13:01:43Z", "message": "address feedback 2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjk1MTU0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#pullrequestreview-470695154", "createdAt": "2020-08-19T17:36:52Z", "commit": {"oid": "7ea1826951e249af2cbf9cc15d3afc1433c501a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzozNjo1MlrOHDSXsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzozNjo1MlrOHDSXsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwODc1NA==", "bodyText": "v3.1-preview.1 or above ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r473208754", "createdAt": "2020-08-19T17:36:52Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/CHANGELOG.md", "diffHunk": "@@ -7,11 +7,9 @@\n **New features**\n - Text analytics SDK update the service to version `v3.1-preview.1` from `v3.0`.\n - Added support for the Opinion Mining feature. To use this feature, you need to make sure you are using the \n-service's v3.1-preview.1 API. To get this support pass `includeOpinionMining` as True when calling:\n-  `analyzeSentiment(String document, String language, boolean includeOpinionMining)`\n-  `analyzeSentimentBatch(Iterable<String> documents, String language, boolean includeOpinionMining, TextAnalyticsRequestOptions options)`\n-  `analyzeSentimentBatchWithResponse(Iterable<TextDocumentInput> documents, boolean includeOpinionMining, TextAnalyticsRequestOptions options)`\n-  \n+service's v3.1-preview.1 API. To get this support pass `includeOpinionMining` as `true` in `AnalyzeSentimentOptions` ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea1826951e249af2cbf9cc15d3afc1433c501a5"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjk2OTA2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#pullrequestreview-470696906", "createdAt": "2020-08-19T17:39:18Z", "commit": {"oid": "7ea1826951e249af2cbf9cc15d3afc1433c501a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzozOToxOFrOHDSc7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzozOToxOFrOHDSc7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxMDA5NQ==", "bodyText": "this should be fixes by now, no? are u planning on updating our code to delete this condition in a future PR?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r473210095", "createdAt": "2020-08-19T17:39:18Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -131,10 +128,22 @@\n         Response<SentimentResponse> response) {\n         final SentimentResponse sentimentResponse = response.getValue();\n         final List<AnalyzeSentimentResult> analyzeSentimentResults = new ArrayList<>();\n-        for (DocumentSentiment documentSentiment : sentimentResponse.getDocuments()) {\n-            analyzeSentimentResults.add(convertToAnalyzeSentimentResult(documentSentiment));\n+        final List<DocumentSentiment> documentSentiments = sentimentResponse.getDocuments();\n+        for (DocumentSentiment documentSentiment : documentSentiments) {\n+            analyzeSentimentResults.add(convertToAnalyzeSentimentResult(documentSentiment, documentSentiments));\n         }\n         for (DocumentError documentError : sentimentResponse.getErrors()) {\n+            /*\n+             *  TODO: Remove this after service update to throw exception.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea1826951e249af2cbf9cc15d3afc1433c501a5"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjk5MDUz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#pullrequestreview-470699053", "createdAt": "2020-08-19T17:42:18Z", "commit": {"oid": "7ea1826951e249af2cbf9cc15d3afc1433c501a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzo0MjoxOFrOHDSjxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzo0MjoxOFrOHDSjxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxMTg0Nw==", "bodyText": "is this a common pattern in Java?\nAt least in .NET, we always return an empty list instead of null (applies to other libraries too)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r473211847", "createdAt": "2020-08-19T17:42:18Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -224,32 +232,32 @@ private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment\n     /*\n      * Transform SentenceSentiment's opinion mining to output that user can use.\n      */\n-    private IterableStream<MinedOpinion> toMinedOpinionList(\n-        com.azure.ai.textanalytics.implementation.models.SentenceSentiment sentenceSentiment) {\n+    private IterableStream<MinedOpinions> toMinedOpinionList(\n+        com.azure.ai.textanalytics.implementation.models.SentenceSentiment sentenceSentiment,\n+        List<DocumentSentiment> documentSentimentList) {\n         // If include opinion mining indicator is false, the service return null for the aspect list.\n-        if (sentenceSentiment.getAspects() == null) {\n+        final List<SentenceAspect> sentenceAspects = sentenceSentiment.getAspects();\n+        if (sentenceAspects == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea1826951e249af2cbf9cc15d3afc1433c501a5"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwOTg4MDA0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#pullrequestreview-470988004", "createdAt": "2020-08-19T21:46:42Z", "commit": {"oid": "7ea1826951e249af2cbf9cc15d3afc1433c501a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTo0Njo0MlrOHDbSKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTo0Njo0MlrOHDbSKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM1NDc5Mw==", "bodyText": "Did you have to change this because of an error in the compiler or something?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r473354793", "createdAt": "2020-08-19T21:46:42Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -482,7 +509,7 @@ public void analyzeSentimentStringListWithOptions() {\n             \"The restaurant had amazing gnocchi.\"\n         );\n \n-        textAnalyticsAsyncClient.analyzeSentimentBatch(documents, \"en\", null).subscribe(\n+        textAnalyticsAsyncClient.analyzeSentimentBatch(documents, \"en\", new TextAnalyticsRequestOptions()).subscribe(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea1826951e249af2cbf9cc15d3afc1433c501a5"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwOTg4Njk4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#pullrequestreview-470988698", "createdAt": "2020-08-19T21:47:58Z", "commit": {"oid": "7ea1826951e249af2cbf9cc15d3afc1433c501a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTo0Nzo1OVrOHDbWaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTo0Nzo1OVrOHDbWaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM1NTg4Mw==", "bodyText": "it is the opinion that is negated, not the aspect :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r473355883", "createdAt": "2020-08-19T21:47:59Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsClientJavaDocCodeSnippets.java", "diffHunk": "@@ -582,4 +642,52 @@ public void analyzeBatchSentimentMaxOverload() {\n         });\n         // END: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch#Iterable-TextAnalyticsRequestOptions-Context\n     }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsClient#analyzeSentimentBatchWithResponse(Iterable, AnalyzeSentimentOptions, Context)}\n+     */\n+    public void analyzeBatchSentimentMaxOverloadWithOpinionMining() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch#Iterable-AnalyzeSentimentOptions-Context\n+        List<TextDocumentInput> textDocumentInputs = Arrays.asList(\n+            new TextDocumentInput(\"1\", \"The hotel was dark and unclean. The restaurant had amazing gnocchi.\")\n+                .setLanguage(\"en\"),\n+            new TextDocumentInput(\"2\", \"The restaurant had amazing gnocchi. The hotel was dark and unclean.\")\n+                .setLanguage(\"en\")\n+        );\n+\n+        AnalyzeSentimentOptions options = new AnalyzeSentimentOptions().setIncludeOpinionMining(true)\n+            .setIncludeStatistics(true);\n+\n+        // Analyzing batch sentiments\n+        Response<AnalyzeSentimentResultCollection> response =\n+            textAnalyticsClient.analyzeSentimentBatchWithResponse(textDocumentInputs, options, Context.NONE);\n+\n+        // Response's status code\n+        System.out.printf(\"Status code of request response: %d%n\", response.getStatusCode());\n+        AnalyzeSentimentResultCollection resultCollection = response.getValue();\n+\n+        // Batch statistics\n+        TextDocumentBatchStatistics batchStatistics = resultCollection.getStatistics();\n+        System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n+            batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n+\n+        // Analyzed sentiment for each of documents from a batch of documents\n+        resultCollection.forEach(analyzeSentimentResult -> {\n+            System.out.printf(\"Document ID: %s%n\", analyzeSentimentResult.getId());\n+            DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment();\n+            documentSentiment.getSentences().forEach(sentenceSentiment -> {\n+                System.out.printf(\"\\tSentence sentiment: %s%n\", sentenceSentiment.getSentiment());\n+                sentenceSentiment.getMinedOpinions().forEach(minedOpinions -> {\n+                    AspectSentiment aspectSentiment = minedOpinions.getAspect();\n+                    System.out.printf(\"\\tAspect sentiment: %s, aspect text: %s%n\", aspectSentiment.getSentiment(),\n+                        aspectSentiment.getText());\n+                    for (OpinionSentiment opinionSentiment : minedOpinions.getOpinions()) {\n+                        System.out.printf(\"\\t\\t'%s' sentiment because of \\\"%s\\\". Is the aspect negated: %s.%n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea1826951e249af2cbf9cc15d3afc1433c501a5"}, "originalPosition": 153}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f0920d3ec855262d7772e5615f8880467b13a3b", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7f0920d3ec855262d7772e5615f8880467b13a3b", "committedDate": "2020-08-20T05:04:26Z", "message": "wording and address mariana feedbacks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMjY2Mzkw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#pullrequestreview-471266390", "createdAt": "2020-08-20T05:55:50Z", "commit": {"oid": "7f0920d3ec855262d7772e5615f8880467b13a3b"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTo1NTo1MVrOHDrsIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNjowMzo0MlrOHDsAQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMzU4NQ==", "bodyText": "Since these are private functions, I am not sure if these error messages will help user understand what went wrong. Also, if they are for debuggability purposes should we consider not throwing the execption but just logging it?\nIs this the client side expectation we are setting?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r473623585", "createdAt": "2020-08-20T05:55:51Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -188,24 +208,134 @@ private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment\n      * {@link AnalyzeSentimentResultCollection} from a {@link SimpleResponse} of {@link SentimentResponse}.\n      *\n      * @param documents A list of documents to be analyzed.\n-     * @param options The {@link TextAnalyticsRequestOptions} request options.\n+     * @param options The additional configurable {@link AnalyzeSentimentOptions options} that may be passed when\n+     * analyzing sentiments.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n      *\n      * @return A mono {@link Response} contains {@link AnalyzeSentimentResultCollection}.\n      */\n     private Mono<Response<AnalyzeSentimentResultCollection>> getAnalyzedSentimentResponse(\n-        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context) {\n-        // TODO: add opinion mining in the following PR\n+        Iterable<TextDocumentInput> documents, AnalyzeSentimentOptions options, Context context) {\n         return service.sentimentWithResponseAsync(\n             new MultiLanguageBatchInput().setDocuments(toMultiLanguageInput(documents)),\n             options == null ? null : options.getModelVersion(),\n             options == null ? null : options.isIncludeStatistics(),\n-            null,\n+            options == null ? null : options.isIncludeOpinionMining(),\n             context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE))\n             .doOnSubscribe(ignoredValue -> logger.info(\"A batch of documents - {}\", documents.toString()))\n             .doOnSuccess(response -> logger.info(\"Analyzed sentiment for a batch of documents - {}\", response))\n             .doOnError(error -> logger.warning(\"Failed to analyze sentiment - {}\", error))\n             .map(this::toAnalyzeSentimentResultCollectionResponse)\n             .onErrorMap(throwable -> mapToHttpResponseExceptionIfExist(throwable));\n     }\n+\n+    /*\n+     * Transform SentenceSentiment's opinion mining to output that user can use.\n+     */\n+    private IterableStream<MinedOpinions> toMinedOpinionList(\n+        com.azure.ai.textanalytics.implementation.models.SentenceSentiment sentenceSentiment,\n+        List<DocumentSentiment> documentSentimentList) {\n+        // If include opinion mining indicator is false, the service return null for the aspect list.\n+        final List<SentenceAspect> sentenceAspects = sentenceSentiment.getAspects();\n+        if (sentenceAspects == null) {\n+            return null;\n+        }\n+        final List<MinedOpinions> minedOpinions = new ArrayList<>();\n+        sentenceAspects.forEach(sentenceAspect -> {\n+            final List<OpinionSentiment> opinionSentiments = new ArrayList<>();\n+            sentenceAspect.getRelations().forEach(aspectRelation -> {\n+                final AspectRelationType aspectRelationType = aspectRelation.getRelationType();\n+                final String opinionPointer = aspectRelation.getRef();\n+                if (AspectRelationType.OPINION == aspectRelationType) {\n+                    opinionSentiments.add(toOpinionSentiment(\n+                        findSentimentOpinion(opinionPointer, documentSentimentList)));\n+                }\n+            });\n+\n+            minedOpinions.add(new MinedOpinions(\n+                new AspectSentiment(sentenceAspect.getText(),\n+                    TextSentiment.fromString(sentenceAspect.getSentiment().toString()),\n+                    sentenceAspect.getOffset(), sentenceAspect.getLength(),\n+                    toSentimentConfidenceScores(sentenceAspect.getConfidenceScores())),\n+                new IterableStream<>(opinionSentiments)));\n+        });\n+\n+        return new IterableStream<>(minedOpinions);\n+    }\n+\n+    /*\n+     * Transform type AspectConfidenceScoreLabel to SentimentConfidenceScores.\n+     */\n+    private SentimentConfidenceScores toSentimentConfidenceScores(\n+        AspectConfidenceScoreLabel aspectConfidenceScoreLabel) {\n+        return new SentimentConfidenceScores(aspectConfidenceScoreLabel.getNegative(), NEUTRAL_SCORE_ZERO,\n+            aspectConfidenceScoreLabel.getPositive());\n+    }\n+\n+    /*\n+     * Transform type SentenceOpinion to OpinionSentiment.\n+     */\n+    private OpinionSentiment toOpinionSentiment(SentenceOpinion sentenceOpinion) {\n+        return new OpinionSentiment(sentenceOpinion.getText(),\n+            TextSentiment.fromString(sentenceOpinion.getSentiment().toString()),\n+            sentenceOpinion.getOffset(), sentenceOpinion.getLength(), sentenceOpinion.isNegated(),\n+            toSentimentConfidenceScores(sentenceOpinion.getConfidenceScores()));\n+    }\n+\n+    /*\n+     * Parses the reference pointer to an index array that contains document, sentence, and opinion indexes.\n+     */\n+    private int[] parseRefPointerToIndexArray(String referencePointer) {\n+        // The pattern always start with character '#', the opinion index will existing in specified sentence, which\n+        // is under specified document.\n+        // example: #/documents/0/sentences/0/opinions/0\n+        final String patternRegex = \"#\\\\/documents\\\\/(\\\\d+)\\\\/sentences\\\\/(\\\\d+)\\\\/opinions\\\\/(\\\\d+)\";\n+        final Pattern pattern = Pattern.compile(patternRegex);\n+        final Matcher matcher = pattern.matcher(referencePointer);\n+        final boolean isMatched = matcher.find();\n+\n+        // The first index represents the document index, second one represents the sentence index,\n+        // third ond represents the opinion index.\n+        final int[] result = new int[3];\n+        if (isMatched) {\n+            String[] segments = referencePointer.split(\"/\");\n+            result[0] = Integer.parseInt(segments[2]);\n+            result[1] = Integer.parseInt(segments[4]);\n+            result[2] = Integer.parseInt(segments[6]);\n+        } else {\n+            throw logger.logExceptionAsError(new RuntimeException(\n+                String.format(\"'referencePointer' %s is not a valid opinion pointer\", referencePointer)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0920d3ec855262d7772e5615f8880467b13a3b"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyNTU2Ng==", "bodyText": "Not sure if this would be the best way, we could get a NumberFormatException or a IndexOutOfBoundExcption depending on if the segment is not a valid number or we didn't get 6 segments.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r473625566", "createdAt": "2020-08-20T05:58:54Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -188,24 +208,134 @@ private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment\n      * {@link AnalyzeSentimentResultCollection} from a {@link SimpleResponse} of {@link SentimentResponse}.\n      *\n      * @param documents A list of documents to be analyzed.\n-     * @param options The {@link TextAnalyticsRequestOptions} request options.\n+     * @param options The additional configurable {@link AnalyzeSentimentOptions options} that may be passed when\n+     * analyzing sentiments.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n      *\n      * @return A mono {@link Response} contains {@link AnalyzeSentimentResultCollection}.\n      */\n     private Mono<Response<AnalyzeSentimentResultCollection>> getAnalyzedSentimentResponse(\n-        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context) {\n-        // TODO: add opinion mining in the following PR\n+        Iterable<TextDocumentInput> documents, AnalyzeSentimentOptions options, Context context) {\n         return service.sentimentWithResponseAsync(\n             new MultiLanguageBatchInput().setDocuments(toMultiLanguageInput(documents)),\n             options == null ? null : options.getModelVersion(),\n             options == null ? null : options.isIncludeStatistics(),\n-            null,\n+            options == null ? null : options.isIncludeOpinionMining(),\n             context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE))\n             .doOnSubscribe(ignoredValue -> logger.info(\"A batch of documents - {}\", documents.toString()))\n             .doOnSuccess(response -> logger.info(\"Analyzed sentiment for a batch of documents - {}\", response))\n             .doOnError(error -> logger.warning(\"Failed to analyze sentiment - {}\", error))\n             .map(this::toAnalyzeSentimentResultCollectionResponse)\n             .onErrorMap(throwable -> mapToHttpResponseExceptionIfExist(throwable));\n     }\n+\n+    /*\n+     * Transform SentenceSentiment's opinion mining to output that user can use.\n+     */\n+    private IterableStream<MinedOpinions> toMinedOpinionList(\n+        com.azure.ai.textanalytics.implementation.models.SentenceSentiment sentenceSentiment,\n+        List<DocumentSentiment> documentSentimentList) {\n+        // If include opinion mining indicator is false, the service return null for the aspect list.\n+        final List<SentenceAspect> sentenceAspects = sentenceSentiment.getAspects();\n+        if (sentenceAspects == null) {\n+            return null;\n+        }\n+        final List<MinedOpinions> minedOpinions = new ArrayList<>();\n+        sentenceAspects.forEach(sentenceAspect -> {\n+            final List<OpinionSentiment> opinionSentiments = new ArrayList<>();\n+            sentenceAspect.getRelations().forEach(aspectRelation -> {\n+                final AspectRelationType aspectRelationType = aspectRelation.getRelationType();\n+                final String opinionPointer = aspectRelation.getRef();\n+                if (AspectRelationType.OPINION == aspectRelationType) {\n+                    opinionSentiments.add(toOpinionSentiment(\n+                        findSentimentOpinion(opinionPointer, documentSentimentList)));\n+                }\n+            });\n+\n+            minedOpinions.add(new MinedOpinions(\n+                new AspectSentiment(sentenceAspect.getText(),\n+                    TextSentiment.fromString(sentenceAspect.getSentiment().toString()),\n+                    sentenceAspect.getOffset(), sentenceAspect.getLength(),\n+                    toSentimentConfidenceScores(sentenceAspect.getConfidenceScores())),\n+                new IterableStream<>(opinionSentiments)));\n+        });\n+\n+        return new IterableStream<>(minedOpinions);\n+    }\n+\n+    /*\n+     * Transform type AspectConfidenceScoreLabel to SentimentConfidenceScores.\n+     */\n+    private SentimentConfidenceScores toSentimentConfidenceScores(\n+        AspectConfidenceScoreLabel aspectConfidenceScoreLabel) {\n+        return new SentimentConfidenceScores(aspectConfidenceScoreLabel.getNegative(), NEUTRAL_SCORE_ZERO,\n+            aspectConfidenceScoreLabel.getPositive());\n+    }\n+\n+    /*\n+     * Transform type SentenceOpinion to OpinionSentiment.\n+     */\n+    private OpinionSentiment toOpinionSentiment(SentenceOpinion sentenceOpinion) {\n+        return new OpinionSentiment(sentenceOpinion.getText(),\n+            TextSentiment.fromString(sentenceOpinion.getSentiment().toString()),\n+            sentenceOpinion.getOffset(), sentenceOpinion.getLength(), sentenceOpinion.isNegated(),\n+            toSentimentConfidenceScores(sentenceOpinion.getConfidenceScores()));\n+    }\n+\n+    /*\n+     * Parses the reference pointer to an index array that contains document, sentence, and opinion indexes.\n+     */\n+    private int[] parseRefPointerToIndexArray(String referencePointer) {\n+        // The pattern always start with character '#', the opinion index will existing in specified sentence, which\n+        // is under specified document.\n+        // example: #/documents/0/sentences/0/opinions/0\n+        final String patternRegex = \"#\\\\/documents\\\\/(\\\\d+)\\\\/sentences\\\\/(\\\\d+)\\\\/opinions\\\\/(\\\\d+)\";\n+        final Pattern pattern = Pattern.compile(patternRegex);\n+        final Matcher matcher = pattern.matcher(referencePointer);\n+        final boolean isMatched = matcher.find();\n+\n+        // The first index represents the document index, second one represents the sentence index,\n+        // third ond represents the opinion index.\n+        final int[] result = new int[3];\n+        if (isMatched) {\n+            String[] segments = referencePointer.split(\"/\");\n+            result[0] = Integer.parseInt(segments[2]);\n+            result[1] = Integer.parseInt(segments[4]);\n+            result[2] = Integer.parseInt(segments[6]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0920d3ec855262d7772e5615f8880467b13a3b"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyNjg3NA==", "bodyText": "{@code neutral} This wouldn't be highlighted correctly since it is an enum. Need to add a an enum highlighter,", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r473626874", "createdAt": "2020-08-20T06:00:47Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/AspectSentiment.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The {@link AspectSentiment} model.\n+ */\n+@Immutable\n+public final class AspectSentiment {\n+    private final String text;\n+    private final TextSentiment sentiment;\n+    private final SentimentConfidenceScores confidenceScores;\n+    private final int length;\n+    private final int offset;\n+\n+    /**\n+     * Create an {@link AspectSentiment} model that describes aspect.\n+     *\n+     * @param text The aspect text property.\n+     * @param sentiment The text sentiment label: POSITIVE, NEGATIVE, MIXED. {@link TextSentiment} has\n+     * {@code neutral} sentiment type additionally, but aspect sentiment can only be positive, negative, or mixed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0920d3ec855262d7772e5615f8880467b13a3b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyNzEzOQ==", "bodyText": "the docs could be better", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r473627139", "createdAt": "2020-08-20T06:01:14Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/AspectSentiment.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The {@link AspectSentiment} model.\n+ */\n+@Immutable\n+public final class AspectSentiment {\n+    private final String text;\n+    private final TextSentiment sentiment;\n+    private final SentimentConfidenceScores confidenceScores;\n+    private final int length;\n+    private final int offset;\n+\n+    /**\n+     * Create an {@link AspectSentiment} model that describes aspect.\n+     *\n+     * @param text The aspect text property.\n+     * @param sentiment The text sentiment label: POSITIVE, NEGATIVE, MIXED. {@link TextSentiment} has\n+     * {@code neutral} sentiment type additionally, but aspect sentiment can only be positive, negative, or mixed.\n+     * @param offset The offset of aspect text.\n+     * @param length The length of aspect text.\n+     * @param confidenceScores The {@link SentimentConfidenceScores}.\n+     */\n+    public AspectSentiment(String text, TextSentiment sentiment,\n+        int offset, int length, SentimentConfidenceScores confidenceScores) {\n+        this.text = text;\n+        this.sentiment = sentiment;\n+        this.confidenceScores = confidenceScores;\n+        this.length = length;\n+        this.offset = offset;\n+    }\n+\n+    /**\n+     * Get the aspect text property.\n+     *\n+     * @return The text value.\n+     */\n+    public String getText() {\n+        return text;\n+    }\n+\n+    /**\n+     * Get the aspect text sentiment label: POSITIVE, NEGATIVE, MIXED. {@link TextSentiment} has\n+     * {@code neutral} sentiment type additionally, but aspect sentiment can only be positive, negative, or mixed.\n+     *\n+     * @return The sentiment value.\n+     */\n+    public TextSentiment getSentiment() {\n+        return sentiment;\n+    }\n+\n+\n+    /**\n+     * Get the offset of aspect text.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0920d3ec855262d7772e5615f8880467b13a3b"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyNzk4Ng==", "bodyText": "Update the docs here to help user understand the functionality.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r473627986", "createdAt": "2020-08-20T06:02:33Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/OpinionSentiment.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The {@link OpinionSentiment} model.\n+ */\n+@Immutable\n+public final class OpinionSentiment {\n+    private final String text;\n+    private final TextSentiment sentiment;\n+    private final SentimentConfidenceScores confidenceScores;\n+    private final boolean isNegated;\n+    private final int length;\n+    private final int offset;\n+\n+    /**\n+     * Create an {@link OpinionSentiment} model that describes opinion sentiment.\n+     *\n+     * @param text The opinion text property.\n+     * @param sentiment The text sentiment label: POSITIVE, NEGATIVE, MIXED. {@link TextSentiment} has\n+     * {@code neutral} sentiment type additionally, but opinion sentiment can only be positive, negative, or mixed.\n+     * @param offset The offset of opinion text.\n+     * @param length The length of opinion text.\n+     * @param isNegated The boolean indicator to show if the opinion text negated or not.\n+     * @param confidenceScores The {@link SentimentConfidenceScores}.\n+     */\n+    public OpinionSentiment(String text, TextSentiment sentiment, int offset, int length,\n+        boolean isNegated, SentimentConfidenceScores confidenceScores) {\n+        this.text = text;\n+        this.sentiment = sentiment;\n+        this.offset = offset;\n+        this.length = length;\n+        this.isNegated = isNegated;\n+        this.confidenceScores = confidenceScores;\n+    }\n+\n+    /**\n+     * Get the opinion text property.\n+     *\n+     * @return The text value.\n+     */\n+    public String getText() {\n+        return text;\n+    }\n+\n+    /**\n+     * Get the opinion text sentiment label: POSITIVE, NEGATIVE, MIXED. {@link TextSentiment} has\n+     * {@code neutral} sentiment type additionally, but aspect sentiment can only be positive, negative, or mixed.\n+     *\n+     * @return The sentiment value.\n+     */\n+    public TextSentiment getSentiment() {\n+        return sentiment;\n+    }\n+\n+    /**\n+     * Get the offset of opinion text.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0920d3ec855262d7772e5615f8880467b13a3b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyODczOQ==", "bodyText": "This is final, does it mean it is always null on this model class?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r473628739", "createdAt": "2020-08-20T06:03:42Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/SentenceSentiment.java", "diffHunk": "@@ -14,25 +15,43 @@\n     private final String text;\n     private final SentimentConfidenceScores confidenceScores;\n     private final TextSentiment sentiment;\n+    private final IterableStream<MinedOpinions> minedOpinions;\n \n     /**\n      * Creates a {@link SentenceSentiment} model that describes the sentiment analysis of sentence.\n-     *\n-     * @param text The sentence text\n+     * @param text The sentence text.\n      * @param sentiment The sentiment label of the sentence.\n      * @param confidenceScores The sentiment confidence score (Softmax score) between 0 and 1, for each sentiment label.\n      *   Higher values signify higher confidence.\n      */\n     public SentenceSentiment(String text, TextSentiment sentiment, SentimentConfidenceScores confidenceScores) {\n         this.text = text;\n         this.sentiment = sentiment;\n+        this.minedOpinions = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0920d3ec855262d7772e5615f8880467b13a3b"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "151c199ad33fbda4682ca7ba1dfc003fbbb24098", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/151c199ad33fbda4682ca7ba1dfc003fbbb24098", "committedDate": "2020-08-20T23:57:10Z", "message": "resolve conflict"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzU1ODMy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#pullrequestreview-473755832", "createdAt": "2020-08-24T18:30:36Z", "commit": {"oid": "7f0920d3ec855262d7772e5615f8880467b13a3b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODozMDozNlrOHFxYNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODozMDozNlrOHFxYNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxMzk0Mw==", "bodyText": "could we add tests that validate that if an opinion comes in another sentence the above code is going to work?\nThey will probably have to be mock tests", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r475813943", "createdAt": "2020-08-24T18:30:36Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -188,24 +208,134 @@ private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment\n      * {@link AnalyzeSentimentResultCollection} from a {@link SimpleResponse} of {@link SentimentResponse}.\n      *\n      * @param documents A list of documents to be analyzed.\n-     * @param options The {@link TextAnalyticsRequestOptions} request options.\n+     * @param options The additional configurable {@link AnalyzeSentimentOptions options} that may be passed when\n+     * analyzing sentiments.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n      *\n      * @return A mono {@link Response} contains {@link AnalyzeSentimentResultCollection}.\n      */\n     private Mono<Response<AnalyzeSentimentResultCollection>> getAnalyzedSentimentResponse(\n-        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context) {\n-        // TODO: add opinion mining in the following PR\n+        Iterable<TextDocumentInput> documents, AnalyzeSentimentOptions options, Context context) {\n         return service.sentimentWithResponseAsync(\n             new MultiLanguageBatchInput().setDocuments(toMultiLanguageInput(documents)),\n             options == null ? null : options.getModelVersion(),\n             options == null ? null : options.isIncludeStatistics(),\n-            null,\n+            options == null ? null : options.isIncludeOpinionMining(),\n             context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE))\n             .doOnSubscribe(ignoredValue -> logger.info(\"A batch of documents - {}\", documents.toString()))\n             .doOnSuccess(response -> logger.info(\"Analyzed sentiment for a batch of documents - {}\", response))\n             .doOnError(error -> logger.warning(\"Failed to analyze sentiment - {}\", error))\n             .map(this::toAnalyzeSentimentResultCollectionResponse)\n             .onErrorMap(throwable -> mapToHttpResponseExceptionIfExist(throwable));\n     }\n+\n+    /*\n+     * Transform SentenceSentiment's opinion mining to output that user can use.\n+     */\n+    private IterableStream<MinedOpinions> toMinedOpinionList(\n+        com.azure.ai.textanalytics.implementation.models.SentenceSentiment sentenceSentiment,\n+        List<DocumentSentiment> documentSentimentList) {\n+        // If include opinion mining indicator is false, the service return null for the aspect list.\n+        final List<SentenceAspect> sentenceAspects = sentenceSentiment.getAspects();\n+        if (sentenceAspects == null) {\n+            return null;\n+        }\n+        final List<MinedOpinions> minedOpinions = new ArrayList<>();\n+        sentenceAspects.forEach(sentenceAspect -> {\n+            final List<OpinionSentiment> opinionSentiments = new ArrayList<>();\n+            sentenceAspect.getRelations().forEach(aspectRelation -> {\n+                final AspectRelationType aspectRelationType = aspectRelation.getRelationType();\n+                final String opinionPointer = aspectRelation.getRef();\n+                if (AspectRelationType.OPINION == aspectRelationType) {\n+                    opinionSentiments.add(toOpinionSentiment(\n+                        findSentimentOpinion(opinionPointer, documentSentimentList)));\n+                }\n+            });\n+\n+            minedOpinions.add(new MinedOpinions(\n+                new AspectSentiment(sentenceAspect.getText(),\n+                    TextSentiment.fromString(sentenceAspect.getSentiment().toString()),\n+                    sentenceAspect.getOffset(), sentenceAspect.getLength(),\n+                    toSentimentConfidenceScores(sentenceAspect.getConfidenceScores())),\n+                new IterableStream<>(opinionSentiments)));\n+        });\n+\n+        return new IterableStream<>(minedOpinions);\n+    }\n+\n+    /*\n+     * Transform type AspectConfidenceScoreLabel to SentimentConfidenceScores.\n+     */\n+    private SentimentConfidenceScores toSentimentConfidenceScores(\n+        AspectConfidenceScoreLabel aspectConfidenceScoreLabel) {\n+        return new SentimentConfidenceScores(aspectConfidenceScoreLabel.getNegative(), NEUTRAL_SCORE_ZERO,\n+            aspectConfidenceScoreLabel.getPositive());\n+    }\n+\n+    /*\n+     * Transform type SentenceOpinion to OpinionSentiment.\n+     */\n+    private OpinionSentiment toOpinionSentiment(SentenceOpinion sentenceOpinion) {\n+        return new OpinionSentiment(sentenceOpinion.getText(),\n+            TextSentiment.fromString(sentenceOpinion.getSentiment().toString()),\n+            sentenceOpinion.getOffset(), sentenceOpinion.getLength(), sentenceOpinion.isNegated(),\n+            toSentimentConfidenceScores(sentenceOpinion.getConfidenceScores()));\n+    }\n+\n+    /*\n+     * Parses the reference pointer to an index array that contains document, sentence, and opinion indexes.\n+     */\n+    private int[] parseRefPointerToIndexArray(String referencePointer) {\n+        // The pattern always start with character '#', the opinion index will existing in specified sentence, which\n+        // is under specified document.\n+        // example: #/documents/0/sentences/0/opinions/0\n+        final String patternRegex = \"#\\\\/documents\\\\/(\\\\d+)\\\\/sentences\\\\/(\\\\d+)\\\\/opinions\\\\/(\\\\d+)\";\n+        final Pattern pattern = Pattern.compile(patternRegex);\n+        final Matcher matcher = pattern.matcher(referencePointer);\n+        final boolean isMatched = matcher.find();\n+\n+        // The first index represents the document index, second one represents the sentence index,\n+        // third ond represents the opinion index.\n+        final int[] result = new int[3];\n+        if (isMatched) {\n+            String[] segments = referencePointer.split(\"/\");\n+            result[0] = Integer.parseInt(segments[2]);\n+            result[1] = Integer.parseInt(segments[4]);\n+            result[2] = Integer.parseInt(segments[6]);\n+        } else {\n+            throw logger.logExceptionAsError(new RuntimeException(\n+                String.format(\"'referencePointer' %s is not a valid opinion pointer\", referencePointer)));\n+        }\n+\n+        return result;\n+    }\n+\n+    /*\n+     * Find the specific sentence opinion in the document sentiment list by given the opinion reference pointer.\n+     */\n+    private SentenceOpinion findSentimentOpinion(String opinionPointer, List<DocumentSentiment> documentSentimentList) {\n+        final int[] opinionIndexes = parseRefPointerToIndexArray(opinionPointer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0920d3ec855262d7772e5615f8880467b13a3b"}, "originalPosition": 247}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczODc3MDkx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#pullrequestreview-473877091", "createdAt": "2020-08-24T21:41:58Z", "commit": {"oid": "7f0920d3ec855262d7772e5615f8880467b13a3b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMTo0MTo1OFrOHF3ShQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMTo0MTo1OFrOHF3ShQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkxMDc4OQ==", "bodyText": "for includeStatistics, we should also add a comment about how this information is only available for batch operations so we don't confuse the user when trying it to use in the single document operations", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r475910789", "createdAt": "2020-08-24T21:41:58Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsRequestOptions.java", "diffHunk": "@@ -48,6 +49,7 @@ public boolean isIncludeStatistics() {\n      *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0920d3ec855262d7772e5615f8880467b13a3b"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9969645cbdbf2042c5d8d64bbea6d868a798bc63", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9969645cbdbf2042c5d8d64bbea6d868a798bc63", "committedDate": "2020-08-26T22:52:26Z", "message": "resolve conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3c11bddddca17a664124961d65f47ab5dde6a48", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d3c11bddddca17a664124961d65f47ab5dde6a48", "committedDate": "2020-08-27T00:22:46Z", "message": "checkstyle issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f43c1bdd151d6187b33c20bca2c15ce9e6dcb957", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f43c1bdd151d6187b33c20bca2c15ce9e6dcb957", "committedDate": "2020-08-27T23:33:24Z", "message": "add mockito dependency and tests to TA"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MjE2NzUw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#pullrequestreview-477216750", "createdAt": "2020-08-28T03:26:31Z", "commit": {"oid": "f43c1bdd151d6187b33c20bca2c15ce9e6dcb957"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzoyNjozMVrOHIoO5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzo0NDo1NVrOHIogRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwOTgyOQ==", "bodyText": "Updated Text analytics SDK version to from..", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r478809829", "createdAt": "2020-08-28T03:26:31Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/CHANGELOG.md", "diffHunk": "@@ -5,9 +5,13 @@\n   - `offset` is the offset of the text from the start of the document\n   \n **New features**\n+- Text analytics SDK update the service to version `v3.1-preview.1` from `v3.0`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43c1bdd151d6187b33c20bca2c15ce9e6dcb957"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxMjAwNQ==", "bodyText": "Redundant escape characters, seems like this should work?\n\nfinal String patternRegex = \"#/documents/(\\d+)/sentences/(\\d+)/opinions/(\\d+)\";", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r478812005", "createdAt": "2020-08-28T03:35:30Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -175,24 +195,135 @@ private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment\n      * {@link AnalyzeSentimentResultCollection} from a {@link SimpleResponse} of {@link SentimentResponse}.\n      *\n      * @param documents A list of documents to be analyzed.\n-     * @param options The {@link TextAnalyticsRequestOptions} request options.\n+     * @param options The additional configurable {@link AnalyzeSentimentOptions options} that may be passed when\n+     * analyzing sentiments.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n      *\n      * @return A mono {@link Response} contains {@link AnalyzeSentimentResultCollection}.\n      */\n     private Mono<Response<AnalyzeSentimentResultCollection>> getAnalyzedSentimentResponse(\n-        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context) {\n-        // TODO: add opinion mining in the following PR\n+        Iterable<TextDocumentInput> documents, AnalyzeSentimentOptions options, Context context) {\n         return service.sentimentWithResponseAsync(\n             new MultiLanguageBatchInput().setDocuments(toMultiLanguageInput(documents)),\n             options == null ? null : options.getModelVersion(),\n             options == null ? null : options.isIncludeStatistics(),\n-            null,\n+            options == null ? null : options.isIncludeOpinionMining(),\n             context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE))\n             .doOnSubscribe(ignoredValue -> logger.info(\"A batch of documents - {}\", documents.toString()))\n             .doOnSuccess(response -> logger.info(\"Analyzed sentiment for a batch of documents - {}\", response))\n             .doOnError(error -> logger.warning(\"Failed to analyze sentiment - {}\", error))\n             .map(this::toAnalyzeSentimentResultCollectionResponse)\n             .onErrorMap(throwable -> mapToHttpResponseExceptionIfExist(throwable));\n     }\n+\n+    /*\n+     * Transform SentenceSentiment's opinion mining to output that user can use.\n+     */\n+    private IterableStream<MinedOpinion> toMinedOpinionList(\n+        com.azure.ai.textanalytics.implementation.models.SentenceSentiment sentenceSentiment,\n+        List<DocumentSentiment> documentSentimentList) {\n+        // If include opinion mining indicator is false, the service return null for the aspect list.\n+        final List<SentenceAspect> sentenceAspects = sentenceSentiment.getAspects();\n+        if (sentenceAspects == null) {\n+            return null;\n+        }\n+        final List<MinedOpinion> minedOpinions = new ArrayList<>();\n+        sentenceAspects.forEach(sentenceAspect -> {\n+            final List<OpinionSentiment> opinionSentiments = new ArrayList<>();\n+            sentenceAspect.getRelations().forEach(aspectRelation -> {\n+                final AspectRelationType aspectRelationType = aspectRelation.getRelationType();\n+                final String opinionPointer = aspectRelation.getRef();\n+                if (AspectRelationType.OPINION == aspectRelationType) {\n+                    opinionSentiments.add(toOpinionSentiment(\n+                        findSentimentOpinion(opinionPointer, documentSentimentList)));\n+                }\n+            });\n+\n+            minedOpinions.add(new MinedOpinion(\n+                new AspectSentiment(sentenceAspect.getText(),\n+                    TextSentiment.fromString(sentenceAspect.getSentiment().toString()),\n+                    sentenceAspect.getOffset(), sentenceAspect.getLength(),\n+                    toSentimentConfidenceScores(sentenceAspect.getConfidenceScores())),\n+                new IterableStream<>(opinionSentiments)));\n+        });\n+\n+        return new IterableStream<>(minedOpinions);\n+    }\n+\n+    /*\n+     * Transform type AspectConfidenceScoreLabel to SentimentConfidenceScores.\n+     */\n+    private SentimentConfidenceScores toSentimentConfidenceScores(\n+        AspectConfidenceScoreLabel aspectConfidenceScoreLabel) {\n+        return new SentimentConfidenceScores(aspectConfidenceScoreLabel.getNegative(), NEUTRAL_SCORE_ZERO,\n+            aspectConfidenceScoreLabel.getPositive());\n+    }\n+\n+    /*\n+     * Transform type SentenceOpinion to OpinionSentiment.\n+     */\n+    private OpinionSentiment toOpinionSentiment(SentenceOpinion sentenceOpinion) {\n+        return new OpinionSentiment(sentenceOpinion.getText(),\n+            TextSentiment.fromString(sentenceOpinion.getSentiment().toString()),\n+            sentenceOpinion.getOffset(), sentenceOpinion.getLength(), sentenceOpinion.isNegated(),\n+            toSentimentConfidenceScores(sentenceOpinion.getConfidenceScores()));\n+    }\n+\n+    /*\n+     * Parses the reference pointer to an index array that contains document, sentence, and opinion indexes.\n+     */\n+    int[] parseRefPointerToIndexArray(String opinionPointer) {\n+        // The pattern always start with character '#', the opinion index will existing in specified sentence, which\n+        // is under specified document.\n+        // example: #/documents/0/sentences/0/opinions/0\n+        final String patternRegex = \"#\\\\/documents\\\\/(\\\\d+)\\\\/sentences\\\\/(\\\\d+)\\\\/opinions\\\\/(\\\\d+)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43c1bdd151d6187b33c20bca2c15ce9e6dcb957"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxMjE2Nw==", "bodyText": "nit: can replace lambda", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r478812167", "createdAt": "2020-08-28T03:36:12Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -175,24 +195,135 @@ private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment\n      * {@link AnalyzeSentimentResultCollection} from a {@link SimpleResponse} of {@link SentimentResponse}.\n      *\n      * @param documents A list of documents to be analyzed.\n-     * @param options The {@link TextAnalyticsRequestOptions} request options.\n+     * @param options The additional configurable {@link AnalyzeSentimentOptions options} that may be passed when\n+     * analyzing sentiments.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n      *\n      * @return A mono {@link Response} contains {@link AnalyzeSentimentResultCollection}.\n      */\n     private Mono<Response<AnalyzeSentimentResultCollection>> getAnalyzedSentimentResponse(\n-        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context) {\n-        // TODO: add opinion mining in the following PR\n+        Iterable<TextDocumentInput> documents, AnalyzeSentimentOptions options, Context context) {\n         return service.sentimentWithResponseAsync(\n             new MultiLanguageBatchInput().setDocuments(toMultiLanguageInput(documents)),\n             options == null ? null : options.getModelVersion(),\n             options == null ? null : options.isIncludeStatistics(),\n-            null,\n+            options == null ? null : options.isIncludeOpinionMining(),\n             context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE))\n             .doOnSubscribe(ignoredValue -> logger.info(\"A batch of documents - {}\", documents.toString()))\n             .doOnSuccess(response -> logger.info(\"Analyzed sentiment for a batch of documents - {}\", response))\n             .doOnError(error -> logger.warning(\"Failed to analyze sentiment - {}\", error))\n             .map(this::toAnalyzeSentimentResultCollectionResponse)\n             .onErrorMap(throwable -> mapToHttpResponseExceptionIfExist(throwable));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43c1bdd151d6187b33c20bca2c15ce9e6dcb957"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxMzE0NA==", "bodyText": "What happens if the service accidentally sends getAspects() as empty even when the boolean indicator for opinion mining is set to true. Seems like we wouldn't catch that. Should check for if the boolean is set not if this is empty. Service can send back error data.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r478813144", "createdAt": "2020-08-28T03:40:11Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -175,24 +195,135 @@ private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment\n      * {@link AnalyzeSentimentResultCollection} from a {@link SimpleResponse} of {@link SentimentResponse}.\n      *\n      * @param documents A list of documents to be analyzed.\n-     * @param options The {@link TextAnalyticsRequestOptions} request options.\n+     * @param options The additional configurable {@link AnalyzeSentimentOptions options} that may be passed when\n+     * analyzing sentiments.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n      *\n      * @return A mono {@link Response} contains {@link AnalyzeSentimentResultCollection}.\n      */\n     private Mono<Response<AnalyzeSentimentResultCollection>> getAnalyzedSentimentResponse(\n-        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context) {\n-        // TODO: add opinion mining in the following PR\n+        Iterable<TextDocumentInput> documents, AnalyzeSentimentOptions options, Context context) {\n         return service.sentimentWithResponseAsync(\n             new MultiLanguageBatchInput().setDocuments(toMultiLanguageInput(documents)),\n             options == null ? null : options.getModelVersion(),\n             options == null ? null : options.isIncludeStatistics(),\n-            null,\n+            options == null ? null : options.isIncludeOpinionMining(),\n             context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE))\n             .doOnSubscribe(ignoredValue -> logger.info(\"A batch of documents - {}\", documents.toString()))\n             .doOnSuccess(response -> logger.info(\"Analyzed sentiment for a batch of documents - {}\", response))\n             .doOnError(error -> logger.warning(\"Failed to analyze sentiment - {}\", error))\n             .map(this::toAnalyzeSentimentResultCollectionResponse)\n             .onErrorMap(throwable -> mapToHttpResponseExceptionIfExist(throwable));\n     }\n+\n+    /*\n+     * Transform SentenceSentiment's opinion mining to output that user can use.\n+     */\n+    private IterableStream<MinedOpinion> toMinedOpinionList(\n+        com.azure.ai.textanalytics.implementation.models.SentenceSentiment sentenceSentiment,\n+        List<DocumentSentiment> documentSentimentList) {\n+        // If include opinion mining indicator is false, the service return null for the aspect list.\n+        final List<SentenceAspect> sentenceAspects = sentenceSentiment.getAspects();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43c1bdd151d6187b33c20bca2c15ce9e6dcb957"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNDI3OQ==", "bodyText": "nit: extra lines", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r478814279", "createdAt": "2020-08-28T03:44:55Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/MinedOpinion.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.util.IterableStream;\n+\n+/**\n+ * The {@link MinedOpinion} model.\n+ */\n+public final class MinedOpinion {\n+    private final AspectSentiment aspect;\n+    private final IterableStream<OpinionSentiment> opinions;\n+\n+    /**\n+     * Create an {@link MinedOpinion} model that describes the mined opinions.\n+     *\n+     * @param aspect The aspect of a product/service that the opinions is about.\n+     * @param opinions The opinions of the aspect text.\n+     */\n+    public MinedOpinion(AspectSentiment aspect, IterableStream<OpinionSentiment> opinions) {\n+        this.aspect = aspect;\n+        this.opinions = opinions;\n+    }\n+\n+    /**\n+     * Get the aspect in text, such as the attributes of products or services. For example, if a customer leaves\n+     * feedback about a hotel such as \"the room was great, but the staff was unfriendly\", opinion mining will locate\n+     * aspects in the text. The \"room\" and \"staff\" are two aspects recognized.\n+     *\n+     * @return The aspect in text.\n+     */\n+    public AspectSentiment getAspect() {\n+        return this.aspect;\n+    }\n+\n+    /**\n+     * Get the opinions of aspect text.\n+     *\n+     * @return The opinions of aspect text.\n+     */\n+    public IterableStream<OpinionSentiment> getOpinions() {\n+        return opinions;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43c1bdd151d6187b33c20bca2c15ce9e6dcb957"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5f0ea680876a5ad0c0712eaada35b4450291e48", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e5f0ea680876a5ad0c0712eaada35b4450291e48", "committedDate": "2020-08-28T05:33:53Z", "message": "wording and feedbakcs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MzAyMzkx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#pullrequestreview-477302391", "createdAt": "2020-08-28T06:52:06Z", "commit": {"oid": "e5f0ea680876a5ad0c0712eaada35b4450291e48"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNjo1MjowNlrOHIrr_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNjo1MjowNlrOHIrr_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2NjQzMA==", "bodyText": "Just wanted to clarify that we are using mocks because the reference pointer is an internal function and can only be accessed with object mocking?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13333#discussion_r478866430", "createdAt": "2020-08-28T06:52:06Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/ReferencePointerParseTest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl;\n+import com.azure.ai.textanalytics.implementation.models.DocumentSentiment;\n+import com.azure.ai.textanalytics.implementation.models.SentenceOpinion;\n+import com.azure.ai.textanalytics.implementation.models.SentenceSentiment;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Unit tests for Aspect relation's reference parse\n+ */\n+public class ReferencePointerParseTest {\n+\n+    @Mock", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5f0ea680876a5ad0c0712eaada35b4450291e48"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be9721fdca7503f7f5b8e5d8b56f6a1e0d42c499", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/be9721fdca7503f7f5b8e5d8b56f6a1e0d42c499", "committedDate": "2020-08-28T21:19:13Z", "message": "don't mock on input"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1200, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}