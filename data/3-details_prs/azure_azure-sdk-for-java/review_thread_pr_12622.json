{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjIyNTg0", "number": 12622, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozMzowNlrOEJ0fYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToyNjoxNVrOEoQ7VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzMyNjQyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/pom.xml", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozMzowNlrOGqhJjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjowNjoyN1rOGtdwGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzNjQ5NQ==", "bodyText": "Is Direct dependency needed?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r447236495", "createdAt": "2020-06-29T20:33:06Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -132,6 +132,20 @@ Licensed under the MIT License.\n       </exclusions>\n     </dependency>\n \n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551baf34ddf19e8dc1d7f9f94a18e8c34c7cf360"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzNjY1NA==", "bodyText": "Ohh its a test depdnency?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r447236654", "createdAt": "2020-06-29T20:33:27Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -132,6 +132,20 @@ Licensed under the MIT License.\n       </exclusions>\n     </dependency>\n \n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzNjQ5NQ=="}, "originalCommit": {"oid": "551baf34ddf19e8dc1d7f9f94a18e8c34c7cf360"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MzU2OQ==", "bodyText": "yes, this is a test dependency only; however the second dependency we need to talk about, if we want to take direct dependency on. SimpleTokenCache requires it... basically this creates a background thread via Reactor's ReplayProcessor which ensures that the AAD token is refreshed before it expires.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r447283569", "createdAt": "2020-06-29T22:11:34Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -132,6 +132,20 @@ Licensed under the MIT License.\n       </exclusions>\n     </dependency>\n \n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzNjQ5NQ=="}, "originalCommit": {"oid": "551baf34ddf19e8dc1d7f9f94a18e8c34c7cf360"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4ODM1Mw==", "bodyText": "To be more exact, ReplayProcessor requires that an HttpClient implementation is available as part of the current app's package. This can be something that the client bring or our Cosmos library can and the customer can exclude it if they want to bring their own.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r447288353", "createdAt": "2020-06-29T22:17:24Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -132,6 +132,20 @@ Licensed under the MIT License.\n       </exclusions>\n     </dependency>\n \n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzNjQ5NQ=="}, "originalCommit": {"oid": "551baf34ddf19e8dc1d7f9f94a18e8c34c7cf360"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMxOTkzMA==", "bodyText": "I am guessing this will be optional dependency right? if AAD integration is needed this would be needed at runtime. no?\nshouldn't this be the following?\n    <dependency>\n      <groupId>com.azure</groupId>\n      <artifactId>azure-identity</artifactId>\n      <version>1.1.0-beta.3</version> <!-- {x-version-update;com.azure:azure-identity;dependency} -->\n      <optional>true</optional>\n    </dependency>", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r449319930", "createdAt": "2020-07-03T00:20:29Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -132,6 +132,20 @@ Licensed under the MIT License.\n       </exclusions>\n     </dependency>\n \n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzNjQ5NQ=="}, "originalCommit": {"oid": "551baf34ddf19e8dc1d7f9f94a18e8c34c7cf360"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMxNjQ0Nw==", "bodyText": "It's the azure-core-http-netty that might be needed... azure-identity is only required for testing purposes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r450316447", "createdAt": "2020-07-06T15:50:10Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -132,6 +132,20 @@ Licensed under the MIT License.\n       </exclusions>\n     </dependency>\n \n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzNjQ5NQ=="}, "originalCommit": {"oid": "551baf34ddf19e8dc1d7f9f94a18e8c34c7cf360"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMyNjU1NQ==", "bodyText": "Regarding the e2e testing, will add these once the AAD support is available in the Cosmos public emulator. Regular AAD requires creating a proper identity first which needs to be recognized by the Cosmos service (this is still worked on); to create this identity the tests need special permission to RBAC (subscription ownership, rights etc). Instead of this we are going to leverage the Cosmos emulator where we can create a TokenCredential like instance using emulator available secrets (key, emulator certificate) which Cosmos backend will properly recognize for this particular case (see ifLocalEmulator).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r450326555", "createdAt": "2020-07-06T16:06:27Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -132,6 +132,20 @@ Licensed under the MIT License.\n       </exclusions>\n     </dependency>\n \n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzNjQ5NQ=="}, "originalCommit": {"oid": "551baf34ddf19e8dc1d7f9f94a18e8c34c7cf360"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDU4MDAyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/AadTokenAuthorizationHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzo1NTo1N1rOGsf-sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTo1ODowMVrOGtdbyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMxNDQ4Mw==", "bodyText": "String.format() will do regex underneath which is CPU intensive. if possible please use String concat/StringBuilder on the hot path:\nhttps://stackoverflow.com/questions/513600/should-i-use-javas-string-format-if-performance-is-important?answertab=votes#tab-top", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r449314483", "createdAt": "2020-07-02T23:55:57Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/AadTokenAuthorizationHelper.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.core.credential.SimpleTokenCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+\n+/**\n+ * This class is used internally and act as a helper in authorization of\n+ * AAD tokens and its supporting method.\n+ *\n+ */\n+public class AadTokenAuthorizationHelper {\n+    public static final String AAD_AUTH_SCHEMA_TYPE_SEGMENT = \"type\";\n+    public static final String AAD_AUTH_VERSION_SEGMENT = \"ver\";\n+    public static final String AAD_AUTH_SIGNATURE_SEGMENT = \"sig\";\n+    public static final String AAD_AUTH_SCHEMA_TYPE_VALUE = \"aad\";\n+    public static final String AAD_AUTH_VERSION_VALUE = \"1.0\";\n+    public static final String AAD_AUTH_TOKEN_FORMAT = \"%s=%s&%s=%s&%s=%s\";\n+    public static final String AAD_AUTH_TOKEN_GENERAL_SCOPE = \"https://management.azure.com/.default\";\n+    private static final String AUTH_PREFIX = \"type=aad&ver=1.0&sig=\";\n+    private static final Logger logger = LoggerFactory.getLogger(AadTokenAuthorizationHelper.class);\n+\n+    /**\n+     * This method will try to fetch the AAD token to access the resource and add it to the rquest headers.\n+     *\n+     * @param request the request headers.\n+     * @param simpleTokenCache token cache that supports caching a token and refreshing it.\n+     * @return the request headers with authorization header updated.\n+     */\n+    public static Mono<RxDocumentServiceRequest> populateAuthorizationHeader(RxDocumentServiceRequest request, SimpleTokenCache simpleTokenCache) {\n+        if (request == null) {\n+            return Mono.error(new IllegalArgumentException(\"request\"));\n+        }\n+        if (simpleTokenCache == null) {\n+            return Mono.error(new IllegalArgumentException(\"simpleTokenCache\"));\n+        }\n+\n+        return simpleTokenCache.getToken()\n+            .map(accessToken -> {\n+                String authorization = String.format(AAD_AUTH_TOKEN_FORMAT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae636ddf4ef58562318383bc14c109055bbe7992"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMyMTM1NQ==", "bodyText": "fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r450321355", "createdAt": "2020-07-06T15:58:01Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/AadTokenAuthorizationHelper.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.core.credential.SimpleTokenCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+\n+/**\n+ * This class is used internally and act as a helper in authorization of\n+ * AAD tokens and its supporting method.\n+ *\n+ */\n+public class AadTokenAuthorizationHelper {\n+    public static final String AAD_AUTH_SCHEMA_TYPE_SEGMENT = \"type\";\n+    public static final String AAD_AUTH_VERSION_SEGMENT = \"ver\";\n+    public static final String AAD_AUTH_SIGNATURE_SEGMENT = \"sig\";\n+    public static final String AAD_AUTH_SCHEMA_TYPE_VALUE = \"aad\";\n+    public static final String AAD_AUTH_VERSION_VALUE = \"1.0\";\n+    public static final String AAD_AUTH_TOKEN_FORMAT = \"%s=%s&%s=%s&%s=%s\";\n+    public static final String AAD_AUTH_TOKEN_GENERAL_SCOPE = \"https://management.azure.com/.default\";\n+    private static final String AUTH_PREFIX = \"type=aad&ver=1.0&sig=\";\n+    private static final Logger logger = LoggerFactory.getLogger(AadTokenAuthorizationHelper.class);\n+\n+    /**\n+     * This method will try to fetch the AAD token to access the resource and add it to the rquest headers.\n+     *\n+     * @param request the request headers.\n+     * @param simpleTokenCache token cache that supports caching a token and refreshing it.\n+     * @return the request headers with authorization header updated.\n+     */\n+    public static Mono<RxDocumentServiceRequest> populateAuthorizationHeader(RxDocumentServiceRequest request, SimpleTokenCache simpleTokenCache) {\n+        if (request == null) {\n+            return Mono.error(new IllegalArgumentException(\"request\"));\n+        }\n+        if (simpleTokenCache == null) {\n+            return Mono.error(new IllegalArgumentException(\"simpleTokenCache\"));\n+        }\n+\n+        return simpleTokenCache.getToken()\n+            .map(accessToken -> {\n+                String authorization = String.format(AAD_AUTH_TOKEN_FORMAT,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMxNDQ4Mw=="}, "originalCommit": {"oid": "ae636ddf4ef58562318383bc14c109055bbe7992"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDU4MTg4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/AadTokenAuthorizationHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzo1Njo1NlrOGsf_yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTo1ODowOVrOGtdcJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMxNDc2Mw==", "bodyText": "throwing the exception here should work too. that simpler to read.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r449314763", "createdAt": "2020-07-02T23:56:56Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/AadTokenAuthorizationHelper.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.core.credential.SimpleTokenCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+\n+/**\n+ * This class is used internally and act as a helper in authorization of\n+ * AAD tokens and its supporting method.\n+ *\n+ */\n+public class AadTokenAuthorizationHelper {\n+    public static final String AAD_AUTH_SCHEMA_TYPE_SEGMENT = \"type\";\n+    public static final String AAD_AUTH_VERSION_SEGMENT = \"ver\";\n+    public static final String AAD_AUTH_SIGNATURE_SEGMENT = \"sig\";\n+    public static final String AAD_AUTH_SCHEMA_TYPE_VALUE = \"aad\";\n+    public static final String AAD_AUTH_VERSION_VALUE = \"1.0\";\n+    public static final String AAD_AUTH_TOKEN_FORMAT = \"%s=%s&%s=%s&%s=%s\";\n+    public static final String AAD_AUTH_TOKEN_GENERAL_SCOPE = \"https://management.azure.com/.default\";\n+    private static final String AUTH_PREFIX = \"type=aad&ver=1.0&sig=\";\n+    private static final Logger logger = LoggerFactory.getLogger(AadTokenAuthorizationHelper.class);\n+\n+    /**\n+     * This method will try to fetch the AAD token to access the resource and add it to the rquest headers.\n+     *\n+     * @param request the request headers.\n+     * @param simpleTokenCache token cache that supports caching a token and refreshing it.\n+     * @return the request headers with authorization header updated.\n+     */\n+    public static Mono<RxDocumentServiceRequest> populateAuthorizationHeader(RxDocumentServiceRequest request, SimpleTokenCache simpleTokenCache) {\n+        if (request == null) {\n+            return Mono.error(new IllegalArgumentException(\"request\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae636ddf4ef58562318383bc14c109055bbe7992"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMyMTQ0NQ==", "bodyText": "fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r450321445", "createdAt": "2020-07-06T15:58:09Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/AadTokenAuthorizationHelper.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.core.credential.SimpleTokenCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+\n+/**\n+ * This class is used internally and act as a helper in authorization of\n+ * AAD tokens and its supporting method.\n+ *\n+ */\n+public class AadTokenAuthorizationHelper {\n+    public static final String AAD_AUTH_SCHEMA_TYPE_SEGMENT = \"type\";\n+    public static final String AAD_AUTH_VERSION_SEGMENT = \"ver\";\n+    public static final String AAD_AUTH_SIGNATURE_SEGMENT = \"sig\";\n+    public static final String AAD_AUTH_SCHEMA_TYPE_VALUE = \"aad\";\n+    public static final String AAD_AUTH_VERSION_VALUE = \"1.0\";\n+    public static final String AAD_AUTH_TOKEN_FORMAT = \"%s=%s&%s=%s&%s=%s\";\n+    public static final String AAD_AUTH_TOKEN_GENERAL_SCOPE = \"https://management.azure.com/.default\";\n+    private static final String AUTH_PREFIX = \"type=aad&ver=1.0&sig=\";\n+    private static final Logger logger = LoggerFactory.getLogger(AadTokenAuthorizationHelper.class);\n+\n+    /**\n+     * This method will try to fetch the AAD token to access the resource and add it to the rquest headers.\n+     *\n+     * @param request the request headers.\n+     * @param simpleTokenCache token cache that supports caching a token and refreshing it.\n+     * @return the request headers with authorization header updated.\n+     */\n+    public static Mono<RxDocumentServiceRequest> populateAuthorizationHeader(RxDocumentServiceRequest request, SimpleTokenCache simpleTokenCache) {\n+        if (request == null) {\n+            return Mono.error(new IllegalArgumentException(\"request\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMxNDc2Mw=="}, "originalCommit": {"oid": "ae636ddf4ef58562318383bc14c109055bbe7992"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzgxMTA4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjozNDoyOVrOHEz0NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDoyOTo1MFrOHE8KFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNTMwMQ==", "bodyText": "wrong merge, undo please.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474805301", "createdAt": "2020-08-21T16:34:29Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -246,8 +250,19 @@ boolean isContentResponseOnWriteEnabled() {\n      * @return the mono.\n      */\n     public Mono<CosmosDatabaseResponse> createDatabaseIfNotExists(String id, ThroughputProperties throughputProperties) {\n-        return withContext(context -> createDatabaseIfNotExistsInternal(getDatabase(id),\n-            throughputProperties, context));\n+        return this.getDatabase(id).read().onErrorResume(exception -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk0MTk3Mw==", "bodyText": "fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474941973", "createdAt": "2020-08-21T20:29:50Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -246,8 +250,19 @@ boolean isContentResponseOnWriteEnabled() {\n      * @return the mono.\n      */\n     public Mono<CosmosDatabaseResponse> createDatabaseIfNotExists(String id, ThroughputProperties throughputProperties) {\n-        return withContext(context -> createDatabaseIfNotExistsInternal(getDatabase(id),\n-            throughputProperties, context));\n+        return this.getDatabase(id).read().onErrorResume(exception -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNTMwMQ=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzgxNjQ3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjozNjoxMFrOHEz3hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDo1NDozN1rOHE9aEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNjE0OA==", "bodyText": "we are doing validation in build() for other cases.\nI wonder if we should set the others to null or we should validation in build()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474806148", "createdAt": "2020-08-21T16:36:10Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -199,7 +202,12 @@ CosmosAuthorizationTokenResolver getAuthorizationTokenResolver() {\n      */\n     CosmosClientBuilder authorizationTokenResolver(\n         CosmosAuthorizationTokenResolver cosmosAuthorizationTokenResolver) {\n-        this.cosmosAuthorizationTokenResolver = cosmosAuthorizationTokenResolver;\n+        this.cosmosAuthorizationTokenResolver = Objects.requireNonNull(cosmosAuthorizationTokenResolver,\n+            \"'cosmosAuthorizationTokenResolver' cannot be null.\");\n+        this.keyOrResourceToken = null;\n+        this.credential = null;\n+        this.permissions = null;\n+        this.tokenCredential = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk2MjQ0OQ==", "bodyText": "only one of these members should be valid at a given time and the last setting should \"persist\". It is confusing to have multiple auth settings valid at the same time; that is why the reset.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474962449", "createdAt": "2020-08-21T20:54:37Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -199,7 +202,12 @@ CosmosAuthorizationTokenResolver getAuthorizationTokenResolver() {\n      */\n     CosmosClientBuilder authorizationTokenResolver(\n         CosmosAuthorizationTokenResolver cosmosAuthorizationTokenResolver) {\n-        this.cosmosAuthorizationTokenResolver = cosmosAuthorizationTokenResolver;\n+        this.cosmosAuthorizationTokenResolver = Objects.requireNonNull(cosmosAuthorizationTokenResolver,\n+            \"'cosmosAuthorizationTokenResolver' cannot be null.\");\n+        this.keyOrResourceToken = null;\n+        this.credential = null;\n+        this.permissions = null;\n+        this.tokenCredential = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNjE0OA=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzgyOTUzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/AadTokenAuthorizationHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo0MDoyOVrOHEz_wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDo0NDowOVrOHE84Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwODI1Nw==", "bodyText": "this seems to be all constants except the last token. it has additional overhead.\nyou could have another constant which holds\nprivate static final String AUTH_PREFIX = \n AAD_AUTH_SCHEMA_TYPE_SEGMENT +\"=\" + AAD_AUTH_SCHEMA_TYPE_VALUE + \n AAD_AUTH_VERSION_SEGMENT + \"=\" + AAD_AUTH_VERSION_VALUE\n + AAD_AUTH_SIGNATURE_SEGMENT+ \"=\";", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474808257", "createdAt": "2020-08-21T16:40:29Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/AadTokenAuthorizationHelper.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.core.credential.SimpleTokenCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+\n+/**\n+ * This class is used internally and act as a helper in authorization of\n+ * AAD tokens and its supporting method.\n+ *\n+ */\n+public class AadTokenAuthorizationHelper {\n+    public static final String AAD_AUTH_SCHEMA_TYPE_SEGMENT = \"type\";\n+    public static final String AAD_AUTH_VERSION_SEGMENT = \"ver\";\n+    public static final String AAD_AUTH_SIGNATURE_SEGMENT = \"sig\";\n+    public static final String AAD_AUTH_SCHEMA_TYPE_VALUE = \"aad\";\n+    public static final String AAD_AUTH_VERSION_VALUE = \"1.0\";\n+    public static final String AAD_AUTH_TOKEN_COSMOS_SCOPE = \"https://cosmos.azure.com/.default\";\n+    private static final String AUTH_PREFIX = \"type=aad&ver=1.0&sig=\";\n+    private static final Logger logger = LoggerFactory.getLogger(AadTokenAuthorizationHelper.class);\n+\n+    /**\n+     * This method will try to fetch the AAD token to access the resource and add it to the request headers.\u2028\n+     *\n+     * @param request the request headers.\n+     * @param simpleTokenCache token cache that supports caching a token and refreshing it.\n+     * @return the request headers with authorization header updated.\n+     */\n+    public static Mono<RxDocumentServiceRequest> populateAuthorizationHeader(RxDocumentServiceRequest request, SimpleTokenCache simpleTokenCache) {\n+        if (request == null || request.getHeaders() == null) {\n+            throw new IllegalArgumentException(\"request\");\n+        }\n+        if (simpleTokenCache == null) {\n+            throw new IllegalArgumentException(\"simpleTokenCache\");\n+        }\n+\n+        return getAuthorizationToken(simpleTokenCache)\n+            .map(authorization -> {\n+                request.getHeaders().put(HttpConstants.HttpHeaders.AUTHORIZATION, authorization);\n+                return request;\n+            });\n+    }\n+\n+    public static Mono<String> getAuthorizationToken(SimpleTokenCache simpleTokenCache) {\n+        return simpleTokenCache.getToken()\n+            .map(accessToken -> {\n+                String authorization;\n+                StringBuilder authorizationBuilder = new StringBuilder()\n+                    .append(AAD_AUTH_SCHEMA_TYPE_SEGMENT).append(\"=\").append(AAD_AUTH_SCHEMA_TYPE_VALUE)\n+                    .append(AAD_AUTH_VERSION_SEGMENT).append(\"=\").append(AAD_AUTH_VERSION_VALUE)\n+                    .append(AAD_AUTH_SIGNATURE_SEGMENT).append(\"=\").append(accessToken.getToken());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk1Mzc4Mg==", "bodyText": "fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474953782", "createdAt": "2020-08-21T20:44:09Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/AadTokenAuthorizationHelper.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.core.credential.SimpleTokenCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+\n+/**\n+ * This class is used internally and act as a helper in authorization of\n+ * AAD tokens and its supporting method.\n+ *\n+ */\n+public class AadTokenAuthorizationHelper {\n+    public static final String AAD_AUTH_SCHEMA_TYPE_SEGMENT = \"type\";\n+    public static final String AAD_AUTH_VERSION_SEGMENT = \"ver\";\n+    public static final String AAD_AUTH_SIGNATURE_SEGMENT = \"sig\";\n+    public static final String AAD_AUTH_SCHEMA_TYPE_VALUE = \"aad\";\n+    public static final String AAD_AUTH_VERSION_VALUE = \"1.0\";\n+    public static final String AAD_AUTH_TOKEN_COSMOS_SCOPE = \"https://cosmos.azure.com/.default\";\n+    private static final String AUTH_PREFIX = \"type=aad&ver=1.0&sig=\";\n+    private static final Logger logger = LoggerFactory.getLogger(AadTokenAuthorizationHelper.class);\n+\n+    /**\n+     * This method will try to fetch the AAD token to access the resource and add it to the request headers.\u2028\n+     *\n+     * @param request the request headers.\n+     * @param simpleTokenCache token cache that supports caching a token and refreshing it.\n+     * @return the request headers with authorization header updated.\n+     */\n+    public static Mono<RxDocumentServiceRequest> populateAuthorizationHeader(RxDocumentServiceRequest request, SimpleTokenCache simpleTokenCache) {\n+        if (request == null || request.getHeaders() == null) {\n+            throw new IllegalArgumentException(\"request\");\n+        }\n+        if (simpleTokenCache == null) {\n+            throw new IllegalArgumentException(\"simpleTokenCache\");\n+        }\n+\n+        return getAuthorizationToken(simpleTokenCache)\n+            .map(authorization -> {\n+                request.getHeaders().put(HttpConstants.HttpHeaders.AUTHORIZATION, authorization);\n+                return request;\n+            });\n+    }\n+\n+    public static Mono<String> getAuthorizationToken(SimpleTokenCache simpleTokenCache) {\n+        return simpleTokenCache.getToken()\n+            .map(accessToken -> {\n+                String authorization;\n+                StringBuilder authorizationBuilder = new StringBuilder()\n+                    .append(AAD_AUTH_SCHEMA_TYPE_SEGMENT).append(\"=\").append(AAD_AUTH_SCHEMA_TYPE_VALUE)\n+                    .append(AAD_AUTH_VERSION_SEGMENT).append(\"=\").append(AAD_AUTH_VERSION_VALUE)\n+                    .append(AAD_AUTH_SIGNATURE_SEGMENT).append(\"=\").append(accessToken.getToken());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwODI1Nw=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzgzNTYxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo0Mjo0MFrOHE0DpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo1NDo1MFrOHFrhGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwOTI1Mg==", "bodyText": "These are available in TestConfiguration please use those.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474809252", "createdAt": "2020-08-21T16:42:40Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.apachecommons.lang.RandomStringUtils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    protected AadAuthorizationTests() {\n+        super();\n+    }\n+\n+    private static Properties properties = System.getProperties();\n+\n+    private final static String EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    private final static String HOST = \"https://localhost:8081/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkyNTY0MQ==", "bodyText": "Not exactly; TestConfigurations sets ACCOUNT_HOST and ACCOUNT_KEY and depending on the environment or properties being set they might default to the public emulator settings.\nSince this test might also serve as sample I'll prefer to leave those constants in the test so anyone looking for an AAD using emulator sample has all the elements they need in the respective test file.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474925641", "createdAt": "2020-08-21T20:09:33Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.apachecommons.lang.RandomStringUtils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    protected AadAuthorizationTests() {\n+        super();\n+    }\n+\n+    private static Properties properties = System.getProperties();\n+\n+    private final static String EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    private final static String HOST = \"https://localhost:8081/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwOTI1Mg=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxNzkxMg==", "bodyText": "for both CI to pass and also local debugging for all tests we are relying on the TestConfiguration file.\nPlease change to follow the same pattern. If you need different pattern for sample, please create a sample file:\nhttps://github.com/Azure/azure-sdk-for-java/tree/master/sdk/cosmos/azure-cosmos/src/samples/java/com/azure/cosmos", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r475717912", "createdAt": "2020-08-24T15:54:50Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.apachecommons.lang.RandomStringUtils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    protected AadAuthorizationTests() {\n+        super();\n+    }\n+\n+    private static Properties properties = System.getProperties();\n+\n+    private final static String EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    private final static String HOST = \"https://localhost:8081/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwOTI1Mg=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzg5NTY4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowMToyNFrOHE0oJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDoxMDo0NVrOHE7OCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxODU5OQ==", "bodyText": "we use a pattern for the database test-names. This will also ensure if there is a any db left over, gets cleanup by the next test run:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final String databaseId = \"dbAad\" + RandomStringUtils.randomAlphabetic(6);;\n          \n          \n            \n                private final String databaseId = CosmosDatabaseForTest.generateId();\n          \n      \n    \n    \n  \n\nplease follow this pattern.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474818599", "createdAt": "2020-08-21T17:01:24Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.apachecommons.lang.RandomStringUtils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    protected AadAuthorizationTests() {\n+        super();\n+    }\n+\n+    private static Properties properties = System.getProperties();\n+\n+    private final static String EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    private final static String HOST = \"https://localhost:8081/\";\n+\n+    private final static String PARTITION_KEY_PATH = \"/mypk\";\n+    private final String databaseId = \"dbAad\" + RandomStringUtils.randomAlphabetic(6);;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkyNjYwMg==", "bodyText": "fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474926602", "createdAt": "2020-08-21T20:10:45Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.apachecommons.lang.RandomStringUtils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    protected AadAuthorizationTests() {\n+        super();\n+    }\n+\n+    private static Properties properties = System.getProperties();\n+\n+    private final static String EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    private final static String HOST = \"https://localhost:8081/\";\n+\n+    private final static String PARTITION_KEY_PATH = \"/mypk\";\n+    private final String databaseId = \"dbAad\" + RandomStringUtils.randomAlphabetic(6);;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxODU5OQ=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzkwNDU1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowNDozMVrOHE0tkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjowNTowMlrOHGIzug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxOTk4NQ==", "bodyText": "you are creating the clients yourself, so please remove this constructor. This will confuse the test infra and will re-run this test multiple times unnecessarily.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474819985", "createdAt": "2020-08-21T17:04:31Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.apachecommons.lang.RandomStringUtils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    protected AadAuthorizationTests() {\n+        super();\n+    }\n+\n+    private static Properties properties = System.getProperties();\n+\n+    private final static String EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    private final static String HOST = \"https://localhost:8081/\";\n+\n+    private final static String PARTITION_KEY_PATH = \"/mypk\";\n+    private final String databaseId = \"dbAad\" + RandomStringUtils.randomAlphabetic(6);;\n+\n+\n+    @Test(groups = { \"emulator\" }, timeOut = 2 * TIMEOUT)\n+    public void createAadTokenCredential() throws InterruptedException {\n+        TokenCredential emulatorCredential = new AadSimpleEmulatorTokenCredential(EMULATOR_KEY);\n+\n+        CosmosAsyncDatabase db = null;\n+\n+        CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()\n+            .endpoint(HOST)\n+            .key(EMULATOR_KEY)\n+            .credential(emulatorCredential)\n+            .buildAsyncClient();\n+\n+        CosmosAsyncClient cosmosAadClient = new CosmosClientBuilder()\n+            .endpoint(HOST)\n+            .credential(emulatorCredential)\n+            .buildAsyncClient();\n+\n+        try {\n+            CosmosDatabaseResponse databaseResponse = cosmosAsyncClient.createDatabase(databaseId).block();\n+\n+            db = cosmosAadClient.getDatabase(databaseId).read()\n+                .map(dabaseResponse -> {\n+                    CosmosAsyncDatabase database = cosmosAadClient.getDatabase(dabaseResponse.getProperties().getId());\n+                    log.info(\"Found database {} with {}\", database.getId(), dabaseResponse.getProperties().getETag());\n+                    return database;\n+                }).block();\n+\n+            // CREATE collection\n+            assert db != null;\n+            String containerName = UUID.randomUUID().toString();\n+            CosmosContainerResponse containerResponse = cosmosAsyncClient.getDatabase(databaseId).createContainer(containerName, PARTITION_KEY_PATH).block();\n+\n+            CosmosAsyncContainer container = db.getContainer(containerName).read()\n+                .map(cosmosContainerResponse -> {\n+                    CosmosAsyncContainer container1 = cosmosAadClient.getDatabase(databaseId).getContainer(cosmosContainerResponse.getProperties().getId());\n+                    log.info(\"Found container {} with {}\", container1.getId(), cosmosContainerResponse.getProperties().getETag());\n+                    return container1;\n+                }).block();\n+\n+            // CREATE document\n+            assert container != null;\n+            String itemName = UUID.randomUUID().toString();\n+            String partitionKeyValue = UUID.randomUUID().toString();\n+            InternalObjectNode properties = getDocumentDefinition(itemName, partitionKeyValue);\n+\n+            CosmosItemResponse<InternalObjectNode> cosmosItemResponse = container.createItem(properties, new CosmosItemRequestOptions()).block();\n+\n+            CosmosItemRequestOptions options = new CosmosItemRequestOptions();\n+            InternalObjectNode item = container\n+                .readItem(itemName, new PartitionKey(partitionKeyValue), options, InternalObjectNode.class)\n+                .map(CosmosItemResponse::getItem)\n+                .map(jsonNode -> {\n+                    log.info(\"Found item with content: \" + jsonNode.toString());\n+                    return jsonNode;\n+                }).block();\n+            assert item != null;\n+\n+            // QUERY document\n+            CosmosQueryRequestOptions requestOptions = new CosmosQueryRequestOptions();\n+            CosmosPagedFlux<JsonNode> queryPagedFlux = container\n+                .queryItems(\"SELECT * FROM c\", requestOptions, JsonNode.class);\n+            List<JsonNode> feedResponse = queryPagedFlux.byPage()\n+                .flatMap(jsonNodeFeedResponse -> {\n+                    return Flux.fromIterable(jsonNodeFeedResponse.getResults());\n+                }).map(jsonNode -> {\n+                    log.info(\"Found item with content: \" + jsonNode.toString());\n+                    return jsonNode;\n+                })\n+                .collectList()\n+                .block();\n+\n+            // DELETE document\n+            container.deleteItem(item.getId(), new PartitionKey(partitionKeyValue));\n+\n+        } finally {\n+            if (db != null) {\n+                cosmosAsyncClient.getDatabase(databaseId).delete().block();\n+            }\n+\n+            if (cosmosAadClient != null) {\n+                safeClose(cosmosAadClient);\n+            }\n+\n+            if (cosmosAsyncClient != null) {\n+                safeClose(cosmosAsyncClient);\n+            }\n+        }\n+\n+        Thread.sleep(5000);\n+    }\n+\n+    private InternalObjectNode getDocumentDefinition(String itemId, String partitionKeyValue) {\n+        final InternalObjectNode properties = new InternalObjectNode(String.format(\"{ \"\n+                + \"\\\"id\\\": \\\"%s\\\", \"\n+                + \"\\\"mypk\\\": \\\"%s\\\", \"\n+                + \"\\\"sgmts\\\": [[6519456, 1471916863], [2498434, 1455671440]]\"\n+                + \"}\"\n+            , itemId, partitionKeyValue));\n+        return properties;\n+    }\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public AadAuthorizationTests(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkyODU4MQ==", "bodyText": "fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474928581", "createdAt": "2020-08-21T20:13:15Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.apachecommons.lang.RandomStringUtils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    protected AadAuthorizationTests() {\n+        super();\n+    }\n+\n+    private static Properties properties = System.getProperties();\n+\n+    private final static String EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    private final static String HOST = \"https://localhost:8081/\";\n+\n+    private final static String PARTITION_KEY_PATH = \"/mypk\";\n+    private final String databaseId = \"dbAad\" + RandomStringUtils.randomAlphabetic(6);;\n+\n+\n+    @Test(groups = { \"emulator\" }, timeOut = 2 * TIMEOUT)\n+    public void createAadTokenCredential() throws InterruptedException {\n+        TokenCredential emulatorCredential = new AadSimpleEmulatorTokenCredential(EMULATOR_KEY);\n+\n+        CosmosAsyncDatabase db = null;\n+\n+        CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()\n+            .endpoint(HOST)\n+            .key(EMULATOR_KEY)\n+            .credential(emulatorCredential)\n+            .buildAsyncClient();\n+\n+        CosmosAsyncClient cosmosAadClient = new CosmosClientBuilder()\n+            .endpoint(HOST)\n+            .credential(emulatorCredential)\n+            .buildAsyncClient();\n+\n+        try {\n+            CosmosDatabaseResponse databaseResponse = cosmosAsyncClient.createDatabase(databaseId).block();\n+\n+            db = cosmosAadClient.getDatabase(databaseId).read()\n+                .map(dabaseResponse -> {\n+                    CosmosAsyncDatabase database = cosmosAadClient.getDatabase(dabaseResponse.getProperties().getId());\n+                    log.info(\"Found database {} with {}\", database.getId(), dabaseResponse.getProperties().getETag());\n+                    return database;\n+                }).block();\n+\n+            // CREATE collection\n+            assert db != null;\n+            String containerName = UUID.randomUUID().toString();\n+            CosmosContainerResponse containerResponse = cosmosAsyncClient.getDatabase(databaseId).createContainer(containerName, PARTITION_KEY_PATH).block();\n+\n+            CosmosAsyncContainer container = db.getContainer(containerName).read()\n+                .map(cosmosContainerResponse -> {\n+                    CosmosAsyncContainer container1 = cosmosAadClient.getDatabase(databaseId).getContainer(cosmosContainerResponse.getProperties().getId());\n+                    log.info(\"Found container {} with {}\", container1.getId(), cosmosContainerResponse.getProperties().getETag());\n+                    return container1;\n+                }).block();\n+\n+            // CREATE document\n+            assert container != null;\n+            String itemName = UUID.randomUUID().toString();\n+            String partitionKeyValue = UUID.randomUUID().toString();\n+            InternalObjectNode properties = getDocumentDefinition(itemName, partitionKeyValue);\n+\n+            CosmosItemResponse<InternalObjectNode> cosmosItemResponse = container.createItem(properties, new CosmosItemRequestOptions()).block();\n+\n+            CosmosItemRequestOptions options = new CosmosItemRequestOptions();\n+            InternalObjectNode item = container\n+                .readItem(itemName, new PartitionKey(partitionKeyValue), options, InternalObjectNode.class)\n+                .map(CosmosItemResponse::getItem)\n+                .map(jsonNode -> {\n+                    log.info(\"Found item with content: \" + jsonNode.toString());\n+                    return jsonNode;\n+                }).block();\n+            assert item != null;\n+\n+            // QUERY document\n+            CosmosQueryRequestOptions requestOptions = new CosmosQueryRequestOptions();\n+            CosmosPagedFlux<JsonNode> queryPagedFlux = container\n+                .queryItems(\"SELECT * FROM c\", requestOptions, JsonNode.class);\n+            List<JsonNode> feedResponse = queryPagedFlux.byPage()\n+                .flatMap(jsonNodeFeedResponse -> {\n+                    return Flux.fromIterable(jsonNodeFeedResponse.getResults());\n+                }).map(jsonNode -> {\n+                    log.info(\"Found item with content: \" + jsonNode.toString());\n+                    return jsonNode;\n+                })\n+                .collectList()\n+                .block();\n+\n+            // DELETE document\n+            container.deleteItem(item.getId(), new PartitionKey(partitionKeyValue));\n+\n+        } finally {\n+            if (db != null) {\n+                cosmosAsyncClient.getDatabase(databaseId).delete().block();\n+            }\n+\n+            if (cosmosAadClient != null) {\n+                safeClose(cosmosAadClient);\n+            }\n+\n+            if (cosmosAsyncClient != null) {\n+                safeClose(cosmosAsyncClient);\n+            }\n+        }\n+\n+        Thread.sleep(5000);\n+    }\n+\n+    private InternalObjectNode getDocumentDefinition(String itemId, String partitionKeyValue) {\n+        final InternalObjectNode properties = new InternalObjectNode(String.format(\"{ \"\n+                + \"\\\"id\\\": \\\"%s\\\", \"\n+                + \"\\\"mypk\\\": \\\"%s\\\", \"\n+                + \"\\\"sgmts\\\": [[6519456, 1471916863], [2498434, 1455671440]]\"\n+                + \"}\"\n+            , itemId, partitionKeyValue));\n+        return properties;\n+    }\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public AadAuthorizationTests(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxOTk4NQ=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxODkzNg==", "bodyText": "seems this one is missed. Please remove.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r475718936", "createdAt": "2020-08-24T15:56:13Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.apachecommons.lang.RandomStringUtils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    protected AadAuthorizationTests() {\n+        super();\n+    }\n+\n+    private static Properties properties = System.getProperties();\n+\n+    private final static String EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    private final static String HOST = \"https://localhost:8081/\";\n+\n+    private final static String PARTITION_KEY_PATH = \"/mypk\";\n+    private final String databaseId = \"dbAad\" + RandomStringUtils.randomAlphabetic(6);;\n+\n+\n+    @Test(groups = { \"emulator\" }, timeOut = 2 * TIMEOUT)\n+    public void createAadTokenCredential() throws InterruptedException {\n+        TokenCredential emulatorCredential = new AadSimpleEmulatorTokenCredential(EMULATOR_KEY);\n+\n+        CosmosAsyncDatabase db = null;\n+\n+        CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()\n+            .endpoint(HOST)\n+            .key(EMULATOR_KEY)\n+            .credential(emulatorCredential)\n+            .buildAsyncClient();\n+\n+        CosmosAsyncClient cosmosAadClient = new CosmosClientBuilder()\n+            .endpoint(HOST)\n+            .credential(emulatorCredential)\n+            .buildAsyncClient();\n+\n+        try {\n+            CosmosDatabaseResponse databaseResponse = cosmosAsyncClient.createDatabase(databaseId).block();\n+\n+            db = cosmosAadClient.getDatabase(databaseId).read()\n+                .map(dabaseResponse -> {\n+                    CosmosAsyncDatabase database = cosmosAadClient.getDatabase(dabaseResponse.getProperties().getId());\n+                    log.info(\"Found database {} with {}\", database.getId(), dabaseResponse.getProperties().getETag());\n+                    return database;\n+                }).block();\n+\n+            // CREATE collection\n+            assert db != null;\n+            String containerName = UUID.randomUUID().toString();\n+            CosmosContainerResponse containerResponse = cosmosAsyncClient.getDatabase(databaseId).createContainer(containerName, PARTITION_KEY_PATH).block();\n+\n+            CosmosAsyncContainer container = db.getContainer(containerName).read()\n+                .map(cosmosContainerResponse -> {\n+                    CosmosAsyncContainer container1 = cosmosAadClient.getDatabase(databaseId).getContainer(cosmosContainerResponse.getProperties().getId());\n+                    log.info(\"Found container {} with {}\", container1.getId(), cosmosContainerResponse.getProperties().getETag());\n+                    return container1;\n+                }).block();\n+\n+            // CREATE document\n+            assert container != null;\n+            String itemName = UUID.randomUUID().toString();\n+            String partitionKeyValue = UUID.randomUUID().toString();\n+            InternalObjectNode properties = getDocumentDefinition(itemName, partitionKeyValue);\n+\n+            CosmosItemResponse<InternalObjectNode> cosmosItemResponse = container.createItem(properties, new CosmosItemRequestOptions()).block();\n+\n+            CosmosItemRequestOptions options = new CosmosItemRequestOptions();\n+            InternalObjectNode item = container\n+                .readItem(itemName, new PartitionKey(partitionKeyValue), options, InternalObjectNode.class)\n+                .map(CosmosItemResponse::getItem)\n+                .map(jsonNode -> {\n+                    log.info(\"Found item with content: \" + jsonNode.toString());\n+                    return jsonNode;\n+                }).block();\n+            assert item != null;\n+\n+            // QUERY document\n+            CosmosQueryRequestOptions requestOptions = new CosmosQueryRequestOptions();\n+            CosmosPagedFlux<JsonNode> queryPagedFlux = container\n+                .queryItems(\"SELECT * FROM c\", requestOptions, JsonNode.class);\n+            List<JsonNode> feedResponse = queryPagedFlux.byPage()\n+                .flatMap(jsonNodeFeedResponse -> {\n+                    return Flux.fromIterable(jsonNodeFeedResponse.getResults());\n+                }).map(jsonNode -> {\n+                    log.info(\"Found item with content: \" + jsonNode.toString());\n+                    return jsonNode;\n+                })\n+                .collectList()\n+                .block();\n+\n+            // DELETE document\n+            container.deleteItem(item.getId(), new PartitionKey(partitionKeyValue));\n+\n+        } finally {\n+            if (db != null) {\n+                cosmosAsyncClient.getDatabase(databaseId).delete().block();\n+            }\n+\n+            if (cosmosAadClient != null) {\n+                safeClose(cosmosAadClient);\n+            }\n+\n+            if (cosmosAsyncClient != null) {\n+                safeClose(cosmosAsyncClient);\n+            }\n+        }\n+\n+        Thread.sleep(5000);\n+    }\n+\n+    private InternalObjectNode getDocumentDefinition(String itemId, String partitionKeyValue) {\n+        final InternalObjectNode properties = new InternalObjectNode(String.format(\"{ \"\n+                + \"\\\"id\\\": \\\"%s\\\", \"\n+                + \"\\\"mypk\\\": \\\"%s\\\", \"\n+                + \"\\\"sgmts\\\": [[6519456, 1471916863], [2498434, 1455671440]]\"\n+                + \"}\"\n+            , itemId, partitionKeyValue));\n+        return properties;\n+    }\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public AadAuthorizationTests(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxOTk4NQ=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5NzgxOA==", "bodyText": "thank you.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r476197818", "createdAt": "2020-08-25T06:05:02Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.apachecommons.lang.RandomStringUtils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    protected AadAuthorizationTests() {\n+        super();\n+    }\n+\n+    private static Properties properties = System.getProperties();\n+\n+    private final static String EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    private final static String HOST = \"https://localhost:8081/\";\n+\n+    private final static String PARTITION_KEY_PATH = \"/mypk\";\n+    private final String databaseId = \"dbAad\" + RandomStringUtils.randomAlphabetic(6);;\n+\n+\n+    @Test(groups = { \"emulator\" }, timeOut = 2 * TIMEOUT)\n+    public void createAadTokenCredential() throws InterruptedException {\n+        TokenCredential emulatorCredential = new AadSimpleEmulatorTokenCredential(EMULATOR_KEY);\n+\n+        CosmosAsyncDatabase db = null;\n+\n+        CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()\n+            .endpoint(HOST)\n+            .key(EMULATOR_KEY)\n+            .credential(emulatorCredential)\n+            .buildAsyncClient();\n+\n+        CosmosAsyncClient cosmosAadClient = new CosmosClientBuilder()\n+            .endpoint(HOST)\n+            .credential(emulatorCredential)\n+            .buildAsyncClient();\n+\n+        try {\n+            CosmosDatabaseResponse databaseResponse = cosmosAsyncClient.createDatabase(databaseId).block();\n+\n+            db = cosmosAadClient.getDatabase(databaseId).read()\n+                .map(dabaseResponse -> {\n+                    CosmosAsyncDatabase database = cosmosAadClient.getDatabase(dabaseResponse.getProperties().getId());\n+                    log.info(\"Found database {} with {}\", database.getId(), dabaseResponse.getProperties().getETag());\n+                    return database;\n+                }).block();\n+\n+            // CREATE collection\n+            assert db != null;\n+            String containerName = UUID.randomUUID().toString();\n+            CosmosContainerResponse containerResponse = cosmosAsyncClient.getDatabase(databaseId).createContainer(containerName, PARTITION_KEY_PATH).block();\n+\n+            CosmosAsyncContainer container = db.getContainer(containerName).read()\n+                .map(cosmosContainerResponse -> {\n+                    CosmosAsyncContainer container1 = cosmosAadClient.getDatabase(databaseId).getContainer(cosmosContainerResponse.getProperties().getId());\n+                    log.info(\"Found container {} with {}\", container1.getId(), cosmosContainerResponse.getProperties().getETag());\n+                    return container1;\n+                }).block();\n+\n+            // CREATE document\n+            assert container != null;\n+            String itemName = UUID.randomUUID().toString();\n+            String partitionKeyValue = UUID.randomUUID().toString();\n+            InternalObjectNode properties = getDocumentDefinition(itemName, partitionKeyValue);\n+\n+            CosmosItemResponse<InternalObjectNode> cosmosItemResponse = container.createItem(properties, new CosmosItemRequestOptions()).block();\n+\n+            CosmosItemRequestOptions options = new CosmosItemRequestOptions();\n+            InternalObjectNode item = container\n+                .readItem(itemName, new PartitionKey(partitionKeyValue), options, InternalObjectNode.class)\n+                .map(CosmosItemResponse::getItem)\n+                .map(jsonNode -> {\n+                    log.info(\"Found item with content: \" + jsonNode.toString());\n+                    return jsonNode;\n+                }).block();\n+            assert item != null;\n+\n+            // QUERY document\n+            CosmosQueryRequestOptions requestOptions = new CosmosQueryRequestOptions();\n+            CosmosPagedFlux<JsonNode> queryPagedFlux = container\n+                .queryItems(\"SELECT * FROM c\", requestOptions, JsonNode.class);\n+            List<JsonNode> feedResponse = queryPagedFlux.byPage()\n+                .flatMap(jsonNodeFeedResponse -> {\n+                    return Flux.fromIterable(jsonNodeFeedResponse.getResults());\n+                }).map(jsonNode -> {\n+                    log.info(\"Found item with content: \" + jsonNode.toString());\n+                    return jsonNode;\n+                })\n+                .collectList()\n+                .block();\n+\n+            // DELETE document\n+            container.deleteItem(item.getId(), new PartitionKey(partitionKeyValue));\n+\n+        } finally {\n+            if (db != null) {\n+                cosmosAsyncClient.getDatabase(databaseId).delete().block();\n+            }\n+\n+            if (cosmosAadClient != null) {\n+                safeClose(cosmosAadClient);\n+            }\n+\n+            if (cosmosAsyncClient != null) {\n+                safeClose(cosmosAsyncClient);\n+            }\n+        }\n+\n+        Thread.sleep(5000);\n+    }\n+\n+    private InternalObjectNode getDocumentDefinition(String itemId, String partitionKeyValue) {\n+        final InternalObjectNode properties = new InternalObjectNode(String.format(\"{ \"\n+                + \"\\\"id\\\": \\\"%s\\\", \"\n+                + \"\\\"mypk\\\": \\\"%s\\\", \"\n+                + \"\\\"sgmts\\\": [[6519456, 1471916863], [2498434, 1455671440]]\"\n+                + \"}\"\n+            , itemId, partitionKeyValue));\n+        return properties;\n+    }\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public AadAuthorizationTests(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxOTk4NQ=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzkxMDkyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowNjoyOVrOHE0xQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDoyNjo0MFrOHE8AOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMDkzMA==", "bodyText": "please don't rely on InternalObjectNode for the new tests. we want to move away the end users to use ObjectNode instead and these tests may get used as samples.\nPlease either use a pojo or use ObjectNode.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474820930", "createdAt": "2020-08-21T17:06:29Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.apachecommons.lang.RandomStringUtils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    protected AadAuthorizationTests() {\n+        super();\n+    }\n+\n+    private static Properties properties = System.getProperties();\n+\n+    private final static String EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    private final static String HOST = \"https://localhost:8081/\";\n+\n+    private final static String PARTITION_KEY_PATH = \"/mypk\";\n+    private final String databaseId = \"dbAad\" + RandomStringUtils.randomAlphabetic(6);;\n+\n+\n+    @Test(groups = { \"emulator\" }, timeOut = 2 * TIMEOUT)\n+    public void createAadTokenCredential() throws InterruptedException {\n+        TokenCredential emulatorCredential = new AadSimpleEmulatorTokenCredential(EMULATOR_KEY);\n+\n+        CosmosAsyncDatabase db = null;\n+\n+        CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()\n+            .endpoint(HOST)\n+            .key(EMULATOR_KEY)\n+            .credential(emulatorCredential)\n+            .buildAsyncClient();\n+\n+        CosmosAsyncClient cosmosAadClient = new CosmosClientBuilder()\n+            .endpoint(HOST)\n+            .credential(emulatorCredential)\n+            .buildAsyncClient();\n+\n+        try {\n+            CosmosDatabaseResponse databaseResponse = cosmosAsyncClient.createDatabase(databaseId).block();\n+\n+            db = cosmosAadClient.getDatabase(databaseId).read()\n+                .map(dabaseResponse -> {\n+                    CosmosAsyncDatabase database = cosmosAadClient.getDatabase(dabaseResponse.getProperties().getId());\n+                    log.info(\"Found database {} with {}\", database.getId(), dabaseResponse.getProperties().getETag());\n+                    return database;\n+                }).block();\n+\n+            // CREATE collection\n+            assert db != null;\n+            String containerName = UUID.randomUUID().toString();\n+            CosmosContainerResponse containerResponse = cosmosAsyncClient.getDatabase(databaseId).createContainer(containerName, PARTITION_KEY_PATH).block();\n+\n+            CosmosAsyncContainer container = db.getContainer(containerName).read()\n+                .map(cosmosContainerResponse -> {\n+                    CosmosAsyncContainer container1 = cosmosAadClient.getDatabase(databaseId).getContainer(cosmosContainerResponse.getProperties().getId());\n+                    log.info(\"Found container {} with {}\", container1.getId(), cosmosContainerResponse.getProperties().getETag());\n+                    return container1;\n+                }).block();\n+\n+            // CREATE document\n+            assert container != null;\n+            String itemName = UUID.randomUUID().toString();\n+            String partitionKeyValue = UUID.randomUUID().toString();\n+            InternalObjectNode properties = getDocumentDefinition(itemName, partitionKeyValue);\n+\n+            CosmosItemResponse<InternalObjectNode> cosmosItemResponse = container.createItem(properties, new CosmosItemRequestOptions()).block();\n+\n+            CosmosItemRequestOptions options = new CosmosItemRequestOptions();\n+            InternalObjectNode item = container\n+                .readItem(itemName, new PartitionKey(partitionKeyValue), options, InternalObjectNode.class)\n+                .map(CosmosItemResponse::getItem)\n+                .map(jsonNode -> {\n+                    log.info(\"Found item with content: \" + jsonNode.toString());\n+                    return jsonNode;\n+                }).block();\n+            assert item != null;\n+\n+            // QUERY document\n+            CosmosQueryRequestOptions requestOptions = new CosmosQueryRequestOptions();\n+            CosmosPagedFlux<JsonNode> queryPagedFlux = container\n+                .queryItems(\"SELECT * FROM c\", requestOptions, JsonNode.class);\n+            List<JsonNode> feedResponse = queryPagedFlux.byPage()\n+                .flatMap(jsonNodeFeedResponse -> {\n+                    return Flux.fromIterable(jsonNodeFeedResponse.getResults());\n+                }).map(jsonNode -> {\n+                    log.info(\"Found item with content: \" + jsonNode.toString());\n+                    return jsonNode;\n+                })\n+                .collectList()\n+                .block();\n+\n+            // DELETE document\n+            container.deleteItem(item.getId(), new PartitionKey(partitionKeyValue));\n+\n+        } finally {\n+            if (db != null) {\n+                cosmosAsyncClient.getDatabase(databaseId).delete().block();\n+            }\n+\n+            if (cosmosAadClient != null) {\n+                safeClose(cosmosAadClient);\n+            }\n+\n+            if (cosmosAsyncClient != null) {\n+                safeClose(cosmosAsyncClient);\n+            }\n+        }\n+\n+        Thread.sleep(5000);\n+    }\n+\n+    private InternalObjectNode getDocumentDefinition(String itemId, String partitionKeyValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkzOTQ0OA==", "bodyText": "fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474939448", "createdAt": "2020-08-21T20:26:40Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.apachecommons.lang.RandomStringUtils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    protected AadAuthorizationTests() {\n+        super();\n+    }\n+\n+    private static Properties properties = System.getProperties();\n+\n+    private final static String EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    private final static String HOST = \"https://localhost:8081/\";\n+\n+    private final static String PARTITION_KEY_PATH = \"/mypk\";\n+    private final String databaseId = \"dbAad\" + RandomStringUtils.randomAlphabetic(6);;\n+\n+\n+    @Test(groups = { \"emulator\" }, timeOut = 2 * TIMEOUT)\n+    public void createAadTokenCredential() throws InterruptedException {\n+        TokenCredential emulatorCredential = new AadSimpleEmulatorTokenCredential(EMULATOR_KEY);\n+\n+        CosmosAsyncDatabase db = null;\n+\n+        CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()\n+            .endpoint(HOST)\n+            .key(EMULATOR_KEY)\n+            .credential(emulatorCredential)\n+            .buildAsyncClient();\n+\n+        CosmosAsyncClient cosmosAadClient = new CosmosClientBuilder()\n+            .endpoint(HOST)\n+            .credential(emulatorCredential)\n+            .buildAsyncClient();\n+\n+        try {\n+            CosmosDatabaseResponse databaseResponse = cosmosAsyncClient.createDatabase(databaseId).block();\n+\n+            db = cosmosAadClient.getDatabase(databaseId).read()\n+                .map(dabaseResponse -> {\n+                    CosmosAsyncDatabase database = cosmosAadClient.getDatabase(dabaseResponse.getProperties().getId());\n+                    log.info(\"Found database {} with {}\", database.getId(), dabaseResponse.getProperties().getETag());\n+                    return database;\n+                }).block();\n+\n+            // CREATE collection\n+            assert db != null;\n+            String containerName = UUID.randomUUID().toString();\n+            CosmosContainerResponse containerResponse = cosmosAsyncClient.getDatabase(databaseId).createContainer(containerName, PARTITION_KEY_PATH).block();\n+\n+            CosmosAsyncContainer container = db.getContainer(containerName).read()\n+                .map(cosmosContainerResponse -> {\n+                    CosmosAsyncContainer container1 = cosmosAadClient.getDatabase(databaseId).getContainer(cosmosContainerResponse.getProperties().getId());\n+                    log.info(\"Found container {} with {}\", container1.getId(), cosmosContainerResponse.getProperties().getETag());\n+                    return container1;\n+                }).block();\n+\n+            // CREATE document\n+            assert container != null;\n+            String itemName = UUID.randomUUID().toString();\n+            String partitionKeyValue = UUID.randomUUID().toString();\n+            InternalObjectNode properties = getDocumentDefinition(itemName, partitionKeyValue);\n+\n+            CosmosItemResponse<InternalObjectNode> cosmosItemResponse = container.createItem(properties, new CosmosItemRequestOptions()).block();\n+\n+            CosmosItemRequestOptions options = new CosmosItemRequestOptions();\n+            InternalObjectNode item = container\n+                .readItem(itemName, new PartitionKey(partitionKeyValue), options, InternalObjectNode.class)\n+                .map(CosmosItemResponse::getItem)\n+                .map(jsonNode -> {\n+                    log.info(\"Found item with content: \" + jsonNode.toString());\n+                    return jsonNode;\n+                }).block();\n+            assert item != null;\n+\n+            // QUERY document\n+            CosmosQueryRequestOptions requestOptions = new CosmosQueryRequestOptions();\n+            CosmosPagedFlux<JsonNode> queryPagedFlux = container\n+                .queryItems(\"SELECT * FROM c\", requestOptions, JsonNode.class);\n+            List<JsonNode> feedResponse = queryPagedFlux.byPage()\n+                .flatMap(jsonNodeFeedResponse -> {\n+                    return Flux.fromIterable(jsonNodeFeedResponse.getResults());\n+                }).map(jsonNode -> {\n+                    log.info(\"Found item with content: \" + jsonNode.toString());\n+                    return jsonNode;\n+                })\n+                .collectList()\n+                .block();\n+\n+            // DELETE document\n+            container.deleteItem(item.getId(), new PartitionKey(partitionKeyValue));\n+\n+        } finally {\n+            if (db != null) {\n+                cosmosAsyncClient.getDatabase(databaseId).delete().block();\n+            }\n+\n+            if (cosmosAadClient != null) {\n+                safeClose(cosmosAadClient);\n+            }\n+\n+            if (cosmosAsyncClient != null) {\n+                safeClose(cosmosAsyncClient);\n+            }\n+        }\n+\n+        Thread.sleep(5000);\n+    }\n+\n+    private InternalObjectNode getDocumentDefinition(String itemId, String partitionKeyValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMDkzMA=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzkxNTUwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowODowMVrOHE00DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowODowMVrOHE00DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMTY0NQ==", "bodyText": "good change. thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474821645", "createdAt": "2020-08-21T17:08:01Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java", "diffHunk": "@@ -267,42 +267,48 @@ public GatewayAddressCache(\n \n         addressQuery.put(HttpConstants.QueryStrings.PARTITION_KEY_RANGE_IDS, String.join(\",\", partitionKeyRangeIds));\n         headers.put(HttpConstants.HttpHeaders.X_DATE, Utils.nowAsRFC1123());\n-        String token;\n-\n-        token = this.tokenProvider.getUserAuthorizationToken(\n-                collectionRid,\n-                ResourceType.Document,\n-                RequestVerb.GET,\n-                headers,\n-                AuthorizationTokenType.PrimaryMasterKey,\n-                request.properties);\n-\n-        if (token == null && request.getIsNameBased()) {\n-            // User doesn't have rid based resource token. Maybe user has name based.\n-            String collectionAltLink = PathsHelper.getCollectionPath(request.getResourceAddress());\n-            token = this.tokenProvider.getUserAuthorizationToken(\n-                    collectionAltLink,\n+\n+        if (tokenProvider.getAuthorizationTokenType() != AuthorizationTokenType.AadToken) {\n+            String token = this.tokenProvider.getUserAuthorizationToken(\n+                    collectionRid,\n                     ResourceType.Document,\n                     RequestVerb.GET,\n                     headers,\n                     AuthorizationTokenType.PrimaryMasterKey,\n                     request.properties);\n+\n+            if (token == null && request.getIsNameBased()) {\n+                // User doesn't have rid based resource token. Maybe user has name based.\n+                String collectionAltLink = PathsHelper.getCollectionPath(request.getResourceAddress());\n+                token = this.tokenProvider.getUserAuthorizationToken(\n+                        collectionAltLink,\n+                        ResourceType.Document,\n+                        RequestVerb.GET,\n+                        headers,\n+                        AuthorizationTokenType.PrimaryMasterKey,\n+                        request.properties);\n+            }\n+\n+            token = HttpUtils.urlEncode(token);\n+            headers.put(HttpConstants.HttpHeaders.AUTHORIZATION, token);\n         }\n \n-        token = HttpUtils.urlEncode(token);\n-        headers.put(HttpConstants.HttpHeaders.AUTHORIZATION, token);\n         URI targetEndpoint = Utils.setQuery(this.addressEndpoint.toString(), Utils.createQuery(addressQuery));\n         String identifier = logAddressResolutionStart(request, targetEndpoint);\n \n-        HttpHeaders httpHeaders = new HttpHeaders(headers.size());\n-        for (Map.Entry<String, String> entry : headers.entrySet()) {\n-            httpHeaders.set(entry.getKey(), entry.getValue());\n-        }\n+        HttpHeaders httpHeaders = new HttpHeaders(headers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzkyMDk3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TestConfigurations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowOTo1NVrOHE03Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowOTo1NVrOHE03Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjQ5OA==", "bodyText": "good change. thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474822498", "createdAt": "2020-08-21T17:09:55Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TestConfigurations.java", "diffHunk": "@@ -51,7 +51,7 @@\n         properties.getProperty(\"ACCOUNT_HOST\",\n                     StringUtils.defaultString(Strings.emptyToNull(\n                             System.getenv().get(\"ACCOUNT_HOST\")),\n-                            \"https://localhost:443/\"));\n+                            \"https://localhost:8081/\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzkyNDE3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/pom.xml", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxMDo0OVrOHE05Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo1OTowN1rOHGAWnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjk3MA==", "bodyText": "why do we need this one?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474822970", "createdAt": "2020-08-21T17:10:49Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -128,6 +128,20 @@ Licensed under the MIT License.\n         </exclusion>\n       </exclusions>\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>\n+      <version>1.1.0</version> <!-- {x-version-update;com.azure:azure-identity;dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-http-netty</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk0MzI4NA==", "bodyText": "SimpleCacheToken requires an HTTP client implementation to be available (it looks for it via reflection).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474943284", "createdAt": "2020-08-21T20:31:26Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -128,6 +128,20 @@ Licensed under the MIT License.\n         </exclusion>\n       </exclusions>\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>\n+      <version>1.1.0</version> <!-- {x-version-update;com.azure:azure-identity;dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-http-netty</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjk3MA=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMzk4NQ==", "bodyText": "Thanks for the explanation. In that case we need to ensure we are not bringing the netty-tcnative transitive dependency through azure-core-http-netty->azure-core->netty-tcnative* as due to a bug in RNTBD, netty-tcnative* will cause problem:\nsee this for more detail: #7829\nPlease exclude the conflicting transitive dependency.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r475713985", "createdAt": "2020-08-24T15:48:53Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -128,6 +128,20 @@ Licensed under the MIT License.\n         </exclusion>\n       </exclusions>\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>\n+      <version>1.1.0</version> <!-- {x-version-update;com.azure:azure-identity;dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-http-netty</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjk3MA=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgzNjY1Nw==", "bodyText": "We are not bringing that particular dependency:\n... [INFO] +- com.azure:azure-core-http-netty:jar:1.5.4:compile [INFO] |  \\- io.netty:netty-transport-native-kqueue:jar:osx-x86_64:4.1.51.Final:compile ...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r475836657", "createdAt": "2020-08-24T19:13:24Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -128,6 +128,20 @@ Licensed under the MIT License.\n         </exclusion>\n       </exclusions>\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>\n+      <version>1.1.0</version> <!-- {x-version-update;com.azure:azure-identity;dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-http-netty</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjk3MA=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg2NTUyNw==", "bodyText": "hmm,\nplease check here:\nfrom here: azure-core-http-netty has dependency on azure-core\nhttps://mvnrepository.com/artifact/com.azure/azure-core-http-netty/1.5.4\nand azure-core has dependency on nett-tcnative-boringssl\nhttps://mvnrepository.com/artifact/com.azure/azure-core/1.7.0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r475865527", "createdAt": "2020-08-24T20:10:34Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -128,6 +128,20 @@ Licensed under the MIT License.\n         </exclusion>\n       </exclusions>\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>\n+      <version>1.1.0</version> <!-- {x-version-update;com.azure:azure-identity;dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-http-netty</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjk3MA=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA1OTI5Mg==", "bodyText": "added exclusion directives for \"azure-core\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r476059292", "createdAt": "2020-08-25T01:59:07Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/pom.xml", "diffHunk": "@@ -128,6 +128,20 @@ Licensed under the MIT License.\n         </exclusion>\n       </exclusions>\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>\n+      <version>1.1.0</version> <!-- {x-version-update;com.azure:azure-identity;dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-http-netty</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMjk3MA=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzkzMjY2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxMzozNVrOHE0-eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDoxNDoyNlrOHE7aDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNDMxMg==", "bodyText": "once everything is ready on this PR we need to do a perf test to ensure we don't have perf degradation.\nIf you haven't done perf tests before, ping me offline I will show you how to run the perf tests.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474824312", "createdAt": "2020-08-21T17:13:35Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -783,38 +820,42 @@ private String parentResourceLinkToQueryLink(String parentResouceLink, ResourceT\n     }\n \n     private Mono<RxDocumentServiceResponse> delete(RxDocumentServiceRequest request, DocumentClientRetryPolicy documentClientRetryPolicy) {\n-        populateHeaders(request, RequestVerb.DELETE);\n-        if(request.requestContext != null && documentClientRetryPolicy.getRetryCount() > 0) {\n-            documentClientRetryPolicy.updateEndTime();\n-            request.requestContext.updateRetryContext(documentClientRetryPolicy, true);\n-        }\n+        return populateHeaders(request, RequestVerb.DELETE)\n+            .flatMap(requestPopulated -> {\n+                if (requestPopulated.requestContext != null && documentClientRetryPolicy.getRetryCount() > 0) {\n+                    documentClientRetryPolicy.updateEndTime();\n+                    requestPopulated.requestContext.updateRetryContext(documentClientRetryPolicy, true);\n+                }\n \n-        return getStoreProxy(request).processMessage(request);\n+                return getStoreProxy(requestPopulated).processMessage(requestPopulated);\n+            });\n     }\n \n     private Mono<RxDocumentServiceResponse> read(RxDocumentServiceRequest request, DocumentClientRetryPolicy documentClientRetryPolicy) {\n-        populateHeaders(request, RequestVerb.GET);\n-        if(request.requestContext != null && documentClientRetryPolicy.getRetryCount() > 0) {\n-            documentClientRetryPolicy.updateEndTime();\n-            request.requestContext.updateRetryContext(documentClientRetryPolicy, true);\n-        }\n-\n-        return getStoreProxy(request).processMessage(request);\n+        return populateHeaders(request, RequestVerb.GET)\n+            .flatMap(requestPopulated -> {\n+                    if (requestPopulated.requestContext != null && documentClientRetryPolicy.getRetryCount() > 0) {\n+                        documentClientRetryPolicy.updateEndTime();\n+                        requestPopulated.requestContext.updateRetryContext(documentClientRetryPolicy, true);\n+                    }\n+                return getStoreProxy(requestPopulated).processMessage(requestPopulated);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkyMjAyMA==", "bodyText": "I would not expect this change to add any perf impact since we basically move populating the auth header as part of the mono execution when subscribed to it.\nBut yes, to be sure, let's do a perf test.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474922020", "createdAt": "2020-08-21T20:04:56Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -783,38 +820,42 @@ private String parentResourceLinkToQueryLink(String parentResouceLink, ResourceT\n     }\n \n     private Mono<RxDocumentServiceResponse> delete(RxDocumentServiceRequest request, DocumentClientRetryPolicy documentClientRetryPolicy) {\n-        populateHeaders(request, RequestVerb.DELETE);\n-        if(request.requestContext != null && documentClientRetryPolicy.getRetryCount() > 0) {\n-            documentClientRetryPolicy.updateEndTime();\n-            request.requestContext.updateRetryContext(documentClientRetryPolicy, true);\n-        }\n+        return populateHeaders(request, RequestVerb.DELETE)\n+            .flatMap(requestPopulated -> {\n+                if (requestPopulated.requestContext != null && documentClientRetryPolicy.getRetryCount() > 0) {\n+                    documentClientRetryPolicy.updateEndTime();\n+                    requestPopulated.requestContext.updateRetryContext(documentClientRetryPolicy, true);\n+                }\n \n-        return getStoreProxy(request).processMessage(request);\n+                return getStoreProxy(requestPopulated).processMessage(requestPopulated);\n+            });\n     }\n \n     private Mono<RxDocumentServiceResponse> read(RxDocumentServiceRequest request, DocumentClientRetryPolicy documentClientRetryPolicy) {\n-        populateHeaders(request, RequestVerb.GET);\n-        if(request.requestContext != null && documentClientRetryPolicy.getRetryCount() > 0) {\n-            documentClientRetryPolicy.updateEndTime();\n-            request.requestContext.updateRetryContext(documentClientRetryPolicy, true);\n-        }\n-\n-        return getStoreProxy(request).processMessage(request);\n+        return populateHeaders(request, RequestVerb.GET)\n+            .flatMap(requestPopulated -> {\n+                    if (requestPopulated.requestContext != null && documentClientRetryPolicy.getRetryCount() > 0) {\n+                        documentClientRetryPolicy.updateEndTime();\n+                        requestPopulated.requestContext.updateRetryContext(documentClientRetryPolicy, true);\n+                    }\n+                return getStoreProxy(requestPopulated).processMessage(requestPopulated);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNDMxMg=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkyOTY3Nw==", "bodyText": "map -> flatMap changes the async flow.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474929677", "createdAt": "2020-08-21T20:14:26Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -783,38 +820,42 @@ private String parentResourceLinkToQueryLink(String parentResouceLink, ResourceT\n     }\n \n     private Mono<RxDocumentServiceResponse> delete(RxDocumentServiceRequest request, DocumentClientRetryPolicy documentClientRetryPolicy) {\n-        populateHeaders(request, RequestVerb.DELETE);\n-        if(request.requestContext != null && documentClientRetryPolicy.getRetryCount() > 0) {\n-            documentClientRetryPolicy.updateEndTime();\n-            request.requestContext.updateRetryContext(documentClientRetryPolicy, true);\n-        }\n+        return populateHeaders(request, RequestVerb.DELETE)\n+            .flatMap(requestPopulated -> {\n+                if (requestPopulated.requestContext != null && documentClientRetryPolicy.getRetryCount() > 0) {\n+                    documentClientRetryPolicy.updateEndTime();\n+                    requestPopulated.requestContext.updateRetryContext(documentClientRetryPolicy, true);\n+                }\n \n-        return getStoreProxy(request).processMessage(request);\n+                return getStoreProxy(requestPopulated).processMessage(requestPopulated);\n+            });\n     }\n \n     private Mono<RxDocumentServiceResponse> read(RxDocumentServiceRequest request, DocumentClientRetryPolicy documentClientRetryPolicy) {\n-        populateHeaders(request, RequestVerb.GET);\n-        if(request.requestContext != null && documentClientRetryPolicy.getRetryCount() > 0) {\n-            documentClientRetryPolicy.updateEndTime();\n-            request.requestContext.updateRetryContext(documentClientRetryPolicy, true);\n-        }\n-\n-        return getStoreProxy(request).processMessage(request);\n+        return populateHeaders(request, RequestVerb.GET)\n+            .flatMap(requestPopulated -> {\n+                    if (requestPopulated.requestContext != null && documentClientRetryPolicy.getRetryCount() > 0) {\n+                        documentClientRetryPolicy.updateEndTime();\n+                        requestPopulated.requestContext.updateRetryContext(documentClientRetryPolicy, true);\n+                    }\n+                return getStoreProxy(requestPopulated).processMessage(requestPopulated);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNDMxMg=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzk0MjU4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/IAuthorizationTokenProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxNjo0NVrOHE1Emw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo1MToxNlrOHFrYHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNTg4Mw==", "bodyText": "I thought authorization token is always set on the RxDocumentServiceRequest directly.\ndo we need to set it on HttpHeaders too?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474825883", "createdAt": "2020-08-21T17:16:45Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/IAuthorizationTokenProvider.java", "diffHunk": "@@ -11,4 +14,9 @@ String getUserAuthorizationToken(String resourceAddress,\n                                      Map<String, String> headers,\n                                      AuthorizationTokenType primarymasterkey,\n                                      Map<String, Object> properties);\n+\n+    Mono<RxDocumentServiceRequest> populateAuthorizationHeader(RxDocumentServiceRequest request);\n+    Mono<HttpHeaders> populateAuthorizationHeader(HttpHeaders httpHeaders);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk1ODQ4OQ==", "bodyText": "Yes, there are couple calls to get the authorization token that operate on HttpHeaders (see GatewayAddressCache).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r474958489", "createdAt": "2020-08-21T20:49:45Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/IAuthorizationTokenProvider.java", "diffHunk": "@@ -11,4 +14,9 @@ String getUserAuthorizationToken(String resourceAddress,\n                                      Map<String, String> headers,\n                                      AuthorizationTokenType primarymasterkey,\n                                      Map<String, Object> properties);\n+\n+    Mono<RxDocumentServiceRequest> populateAuthorizationHeader(RxDocumentServiceRequest request);\n+    Mono<HttpHeaders> populateAuthorizationHeader(HttpHeaders httpHeaders);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNTg4Mw=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxNTYxMw==", "bodyText": "makes sense. thanks for the explanation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r475715613", "createdAt": "2020-08-24T15:51:16Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/IAuthorizationTokenProvider.java", "diffHunk": "@@ -11,4 +14,9 @@ String getUserAuthorizationToken(String resourceAddress,\n                                      Map<String, String> headers,\n                                      AuthorizationTokenType primarymasterkey,\n                                      Map<String, Object> properties);\n+\n+    Mono<RxDocumentServiceRequest> populateAuthorizationHeader(RxDocumentServiceRequest request);\n+    Mono<HttpHeaders> populateAuthorizationHeader(HttpHeaders httpHeaders);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNTg4Mw=="}, "originalCommit": {"oid": "0de74f887d5f38bde1e45c0f047753942c5fc6bb"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDE5Mjc4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjowODoxMlrOHFsEMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjowODoxMlrOHFsEMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcyNjg5Nw==", "bodyText": "thanks for fixing the javadoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r475726897", "createdAt": "2020-08-24T16:08:12Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -241,12 +249,16 @@ String getKey() {\n      * @return current Builder.\n      */\n     public CosmosClientBuilder key(String key) {\n-        this.keyOrResourceToken = key;\n+        this.keyOrResourceToken = Objects.requireNonNull(key, \"'key' cannot be null.\");\n+        this.cosmosAuthorizationTokenResolver = null;\n+        this.credential = null;\n+        this.permissions = null;\n+        this.tokenCredential = null;\n         return this;\n     }\n \n     /**\n-     * Sets a resource token used to perform authentication\n+     * Gets a resource token used to perform authentication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c777f4e16a5bb54917ded4e18b5bc5315fd76d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjAyMjUwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TestConfigurations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTowMjoxNlrOHF-DPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMjowMDowN1rOHGAZHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAyMTU2NA==", "bodyText": "why are we defining new public property for something which is already available?\nI thought the plan was to reuse TestConfiguration.HOST\non the CI the value for TestConfiguration.HOST will be populated by the CI.\nin local debugging that can be populated from a properties file from user home.\nThis breaks that.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r476021564", "createdAt": "2020-08-25T01:02:16Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TestConfigurations.java", "diffHunk": "@@ -32,26 +32,28 @@\n     private static Logger logger = LoggerFactory.getLogger(TestConfigurations.class);\n     private static Properties properties = loadProperties();\n \n+    public final static String COSMOS_EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    public final static String COSMOS_EMULATOR_HOST = \"https://localhost:8081/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689cf963c0b3ed2bffd0d1d6d6399f975882e913"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA1OTkzNQ==", "bodyText": "added comments for the test specific expectations and change to rely on MASTER_KEY and HOST", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r476059935", "createdAt": "2020-08-25T02:00:07Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TestConfigurations.java", "diffHunk": "@@ -32,26 +32,28 @@\n     private static Logger logger = LoggerFactory.getLogger(TestConfigurations.class);\n     private static Properties properties = loadProperties();\n \n+    public final static String COSMOS_EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n+    public final static String COSMOS_EMULATOR_HOST = \"https://localhost:8081/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAyMTU2NA=="}, "originalCommit": {"oid": "689cf963c0b3ed2bffd0d1d6d6399f975882e913"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjAyNTk5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTowMzoxM1rOHF-Fig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMToxMzowMlrOHF-fKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAyMjE1NA==", "bodyText": "why are we defining new public property for something which is already available?\nI thought the plan was to reuse TestConfiguration.HOST and not redefine a constant for the same thing.\n\non the CI the value for TestConfiguration.HOST will be populated by the CI.\nin local debugging that can be populated from a properties file from user home.\n\nThis breaks both 1) and 2).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r476022154", "createdAt": "2020-08-25T01:03:13Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.CosmosDatabaseForTest;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    private final static String PARTITION_KEY_PATH = \"/mypk\";\n+    private final String databaseId = CosmosDatabaseForTest.generateId();\n+\n+    protected AadAuthorizationTests() {\n+    }\n+\n+    @Test(groups = { \"emulator\" }, timeOut = 10 * TIMEOUT)\n+    public void createAadTokenCredential() throws InterruptedException {\n+        CosmosAsyncDatabase db = null;\n+\n+        CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.COSMOS_EMULATOR_HOST)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689cf963c0b3ed2bffd0d1d6d6399f975882e913"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAyODcxNQ==", "bodyText": "This is an emulator only test which it cannot be run against prod endpoint.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r476028715", "createdAt": "2020-08-25T01:13:02Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.CosmosDatabaseForTest;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    private final static String PARTITION_KEY_PATH = \"/mypk\";\n+    private final String databaseId = CosmosDatabaseForTest.generateId();\n+\n+    protected AadAuthorizationTests() {\n+    }\n+\n+    @Test(groups = { \"emulator\" }, timeOut = 10 * TIMEOUT)\n+    public void createAadTokenCredential() throws InterruptedException {\n+        CosmosAsyncDatabase db = null;\n+\n+        CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()\n+            .endpoint(TestConfigurations.COSMOS_EMULATOR_HOST)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAyMjE1NA=="}, "originalCommit": {"oid": "689cf963c0b3ed2bffd0d1d6d6399f975882e913"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjgyNTE1OnYy", "diffSide": "RIGHT", "path": "eng/pipelines/templates/stages/cosmos-sdk-client.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDozMjowOFrOHGGcsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDozMjowOFrOHGGcsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE1OTE1NA==", "bodyText": "/cc: @j82w", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r476159154", "createdAt": "2020-08-25T04:32:08Z", "author": {"login": "kirankumarkolli"}, "path": "eng/pipelines/templates/stages/cosmos-sdk-client.yml", "diffHunk": "@@ -129,7 +129,7 @@ stages:\n         PreRunSteps:\n         - template: /eng/common/pipelines/templates/steps/cosmos-emulator.yml\n           parameters:\n-            StartParameters: '-PartitionCount 50 -Consistency Strong -Timeout 600'\n+            StartParameters: '-EnableAadAuthentication -PartitionCount 50 -Consistency Strong -Timeout 600'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "026ae2a19195b7831fbce5ebaf0900b9bd80aad1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDEyMzQ5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToxMDozN1rOHGmC1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToxMDozN1rOHGmC1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3NjgyMw==", "bodyText": "Any reason to not do null or whitespace?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r476676823", "createdAt": "2020-08-25T19:10:37Z", "author": {"login": "j82w"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -199,7 +202,12 @@ CosmosAuthorizationTokenResolver getAuthorizationTokenResolver() {\n      */\n     CosmosClientBuilder authorizationTokenResolver(\n         CosmosAuthorizationTokenResolver cosmosAuthorizationTokenResolver) {\n-        this.cosmosAuthorizationTokenResolver = cosmosAuthorizationTokenResolver;\n+        this.cosmosAuthorizationTokenResolver = Objects.requireNonNull(cosmosAuthorizationTokenResolver,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e76ae2715fd727018e6377b886dc48998abb008"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTQ3MTY3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/caches/RxClientCollectionCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMTo1Nzo0OFrOHYi5UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMTo1Nzo0OFrOHYi5UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5OTYwMQ==", "bodyText": "Is special handling for performance?\nIs there perf data to prove that it impacts performance?\nFor now NON-BLOCKER, but worth revisiting perf vs maintenance forward.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r495499601", "createdAt": "2020-09-26T21:57:48Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/caches/RxClientCollectionCache.java", "diffHunk": "@@ -80,27 +80,38 @@ public RxClientCollectionCache(ISessionContainer sessionContainer,\n \n         request.getHeaders().put(HttpConstants.HttpHeaders.X_DATE, Utils.nowAsRFC1123());\n \n-        String resourceName = request.getResourceAddress();\n-        String authorizationToken = tokenProvider.getUserAuthorizationToken(\n-                resourceName,\n-                request.getResourceType(),\n-                RequestVerb.GET,\n-                request.getHeaders(),\n-                AuthorizationTokenType.PrimaryMasterKey,\n-                properties);\n-\n-        try {\n-            authorizationToken = URLEncoder.encode(authorizationToken, \"UTF-8\");\n-        } catch (UnsupportedEncodingException e) {\n-            return Mono.error(new IllegalStateException(\"Failed to encode authtoken.\", e));\n+        if (tokenProvider.getAuthorizationTokenType() != AuthorizationTokenType.AadToken) {\n+            String resourceName = request.getResourceAddress();\n+            String authorizationToken = tokenProvider.getUserAuthorizationToken(\n+                    resourceName,\n+                    request.getResourceType(),\n+                    RequestVerb.GET,\n+                    request.getHeaders(),\n+                    AuthorizationTokenType.PrimaryMasterKey,\n+                    properties);\n+\n+            try {\n+                authorizationToken = URLEncoder.encode(authorizationToken, \"UTF-8\");\n+            } catch (UnsupportedEncodingException e) {\n+                return Mono.error(new IllegalStateException(\"Failed to encode authtoken.\", e));\n+            }\n+            request.getHeaders().put(HttpConstants.HttpHeaders.AUTHORIZATION, authorizationToken);\n         }\n-        request.getHeaders().put(HttpConstants.HttpHeaders.AUTHORIZATION, authorizationToken);\n \n         if (retryPolicyInstance != null){\n             retryPolicyInstance.onBeforeSendRequest(request);\n         }\n+\n         Instant addressCallStartTime = Instant.now();\n-        Mono<RxDocumentServiceResponse> responseObs = this.storeModel.processMessage(request);\n+        Mono<RxDocumentServiceResponse> responseObs;\n+        if (tokenProvider.getAuthorizationTokenType() != AuthorizationTokenType.AadToken) {\n+            responseObs = this.storeModel.processMessage(request);\n+        } else {\n+            responseObs = tokenProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb6f04d51a9f0d4af206e94f1d119db81fa00"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTQ3MjIxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Utils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMTo1OToxMlrOHYi5nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMTo1OToxMlrOHYi5nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5OTY3Ng==", "bodyText": "Base64 doesn't have new lines or line feed, isn't that a bug if it happens?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r495499676", "createdAt": "2020-09-26T21:59:12Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Utils.java", "diffHunk": "@@ -116,6 +118,15 @@ public static String decodeAsUTF8String(String inputString) {\n         }\n     }\n \n+    public static String encodeUrlBase64String(byte[] binaryData) {\n+        String encodedString = Base64UrlEncoder.withoutPadding().encodeToString(binaryData);\n+\n+        if (encodedString.endsWith(\"\\r\\n\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb6f04d51a9f0d4af206e94f1d119db81fa00"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTQ3MzkwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TestConfigurations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMjowMTo0NFrOHYi6Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMjowMTo0NFrOHYi6Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5OTg3OA==", "bodyText": "Why is test configuration in source path?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r495499878", "createdAt": "2020-09-26T22:01:44Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/TestConfigurations.java", "diffHunk": "@@ -32,26 +32,29 @@\n     private static Logger logger = LoggerFactory.getLogger(TestConfigurations.class);\n     private static Properties properties = loadProperties();\n \n+    private final static String COSMOS_EMULATOR_KEY = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb6f04d51a9f0d4af206e94f1d119db81fa00"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjU1ODI4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToyNjoxNVrOHZQNhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTowMjozMVrOHarWUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI0MjA1Mg==", "bodyText": "why are we disabling the emulator test?\ncould you enable it for the PR? if the emulator is readly?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r496242052", "createdAt": "2020-09-28T21:26:15Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,223 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.CosmosDatabaseForTest;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    private final static String PARTITION_KEY_PATH = \"/mypk\";\n+    private final String databaseId = CosmosDatabaseForTest.generateId();\n+\n+    protected AadAuthorizationTests() {\n+    }\n+\n+    // Cosmos public emulator only test; this test will fail if run against Azure Cosmos endpoint at this time.\n+    //   We customize the Aad token to be specifically constructed for the Cosmos public emulator only; for Azure Cosmos\n+    //   the token will be requested and generated from an Azure Identity service.\n+    //@Test(groups = { \"emulator\" }, timeOut = 10 * TIMEOUT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb6f04d51a9f0d4af206e94f1d119db81fa00"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczNTI0OA==", "bodyText": "There's an issue with the CI VM which prevents the AAD authenticator to initialize properly in the Gateway. I tried to reproduce this locally but unsuccessful so far (everything passes). We also validated AAD paths e2e against test federation so we should be good to go.\nI will re-enable the test once a new public emulator will ship which I will expect to work around the current authenticator initialization issue.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12622#discussion_r497735248", "createdAt": "2020-09-30T19:02:31Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AadAuthorizationTests.java", "diffHunk": "@@ -0,0 +1,223 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.core.credential.AccessToken;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.CosmosDatabaseForTest;\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.OffsetDateTime;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+public class AadAuthorizationTests extends TestSuiteBase {\n+    private final static Logger log = LoggerFactory.getLogger(AadAuthorizationTests.class);\n+    private static final ObjectMapper OBJECT_MAPPER = Utils.getSimpleObjectMapper();\n+\n+    private final static String PARTITION_KEY_PATH = \"/mypk\";\n+    private final String databaseId = CosmosDatabaseForTest.generateId();\n+\n+    protected AadAuthorizationTests() {\n+    }\n+\n+    // Cosmos public emulator only test; this test will fail if run against Azure Cosmos endpoint at this time.\n+    //   We customize the Aad token to be specifically constructed for the Cosmos public emulator only; for Azure Cosmos\n+    //   the token will be requested and generated from an Azure Identity service.\n+    //@Test(groups = { \"emulator\" }, timeOut = 10 * TIMEOUT)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI0MjA1Mg=="}, "originalCommit": {"oid": "327cb6f04d51a9f0d4af206e94f1d119db81fa00"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3708, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}