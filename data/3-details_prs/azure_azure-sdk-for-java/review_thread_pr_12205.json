{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0ODMzMDIy", "number": 12205, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo1NDozN1rOELfpjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTozNzoxN1rOEMqc5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDg4MzMyOnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo1NDozN1rOGtEzNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjo1MzoyMFrOGtfg1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzc0OQ==", "bodyText": "I would have expected to call this serializer by default - keen to hear other peoples thoughts though.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r449917749", "createdAt": "2020-07-05T20:54:37Z", "author": {"login": "JonathanGiles"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "diffHunk": "@@ -361,6 +363,16 @@ public EventHubClientBuilder prefetchCount(int prefetchCount) {\n         return this;\n     }\n \n+    /**\n+     * Set registry serializer\n+     * @param objectSerializer serializer\n+     * @return updated builder instance\n+     */\n+    public EventHubClientBuilder objectSerializer(ObjectSerializer objectSerializer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a7bce3ba6747454325b9acc56cf474a5f9cd635"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMyNDc4NQ==", "bodyText": "+1 to Jonathan's thoughts.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450324785", "createdAt": "2020-07-06T16:03:36Z", "author": {"login": "conniey"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "diffHunk": "@@ -361,6 +363,16 @@ public EventHubClientBuilder prefetchCount(int prefetchCount) {\n         return this;\n     }\n \n+    /**\n+     * Set registry serializer\n+     * @param objectSerializer serializer\n+     * @return updated builder instance\n+     */\n+    public EventHubClientBuilder objectSerializer(ObjectSerializer objectSerializer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzc0OQ=="}, "originalCommit": {"oid": "7a7bce3ba6747454325b9acc56cf474a5f9cd635"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM1NTQxNQ==", "bodyText": "Not at all attached to this.  I'll update it to serializer.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450355415", "createdAt": "2020-07-06T16:53:20Z", "author": {"login": "arerlend"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "diffHunk": "@@ -361,6 +363,16 @@ public EventHubClientBuilder prefetchCount(int prefetchCount) {\n         return this;\n     }\n \n+    /**\n+     * Set registry serializer\n+     * @param objectSerializer serializer\n+     * @return updated builder instance\n+     */\n+    public EventHubClientBuilder objectSerializer(ObjectSerializer objectSerializer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzc0OQ=="}, "originalCommit": {"oid": "7a7bce3ba6747454325b9acc56cf474a5f9cd635"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDg4NDU3OnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo1NjoxMlrOGtEzzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo1NjoxMlrOGtEzzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzkwMQ==", "bodyText": "Nit: Different indentation here (and also in previous files, there was needless changes to indentation)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r449917901", "createdAt": "2020-07-05T20:56:12Z", "author": {"login": "JonathanGiles"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.experimental.serializer.ObjectSerializer;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+public final class ObjectBatch<T> extends Batch {\n+    private final ClientLogger logger = new ClientLogger(ObjectBatch.class);\n+    private final Object lock = new Object();\n+    private final Class<T> batchType;\n+    private final ObjectSerializer objectSerializer;\n+\n+    /**\n+     *\n+     * @param maxMessageSize\n+     * @param partitionId\n+     * @param partitionKey\n+     * @param batchType\n+     * @param contextProvider\n+     * @param tracerProvider\n+     * @param objectSerializer\n+     * @param entityPath\n+     * @param hostname\n+     */\n+    ObjectBatch(int maxMessageSize, String partitionId, String partitionKey, Class<T> batchType,\n+                    ErrorContextProvider contextProvider, TracerProvider tracerProvider,\n+                ObjectSerializer objectSerializer, String entityPath, String hostname) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a7bce3ba6747454325b9acc56cf474a5f9cd635"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODA4ODQ1OnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/Batch.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODozNToxMVrOGtiwaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODozNToxMVrOGtiwaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwODU1Mg==", "bodyText": "Expand all imports instead of using *.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450408552", "createdAt": "2020-07-06T18:35:11Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/Batch.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.AmqpMessageConstant;\n+import com.azure.core.amqp.exception.AmqpErrorCondition;\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.AmqpConstants;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.tracing.ProcessKind;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.amqp.Binary;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Data;\n+import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;\n+import org.apache.qpid.proton.message.Message;\n+import reactor.core.publisher.Signal;\n+\n+import java.nio.BufferOverflowException;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODA5MjA4OnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/Batch.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODozNjoyNFrOGtiytw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODozNjoyNFrOGtiytw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwOTE0Mw==", "bodyText": "Add javadoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450409143", "createdAt": "2020-07-06T18:36:24Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/Batch.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.AmqpMessageConstant;\n+import com.azure.core.amqp.exception.AmqpErrorCondition;\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.AmqpConstants;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.tracing.ProcessKind;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.amqp.Binary;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Data;\n+import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;\n+import org.apache.qpid.proton.message.Message;\n+import reactor.core.publisher.Signal;\n+\n+import java.nio.BufferOverflowException;\n+import java.util.*;\n+\n+import static com.azure.core.util.tracing.Tracer.*;\n+import static com.azure.messaging.eventhubs.implementation.ClientConstants.AZ_NAMESPACE_VALUE;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODA5NTE2OnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/Batch.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODozNzozM1rOGti0tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODozNzozM1rOGti0tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwOTY1Mw==", "bodyText": "Why protected?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450409653", "createdAt": "2020-07-06T18:37:33Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/Batch.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.AmqpMessageConstant;\n+import com.azure.core.amqp.exception.AmqpErrorCondition;\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.AmqpConstants;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.tracing.ProcessKind;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.amqp.Binary;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Data;\n+import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;\n+import org.apache.qpid.proton.message.Message;\n+import reactor.core.publisher.Signal;\n+\n+import java.nio.BufferOverflowException;\n+import java.util.*;\n+\n+import static com.azure.core.util.tracing.Tracer.*;\n+import static com.azure.messaging.eventhubs.implementation.ClientConstants.AZ_NAMESPACE_VALUE;\n+\n+public abstract class Batch {\n+    private final ClientLogger logger = new ClientLogger(this.getClass());\n+    private final Object lock = new Object();\n+    private final int maxMessageSize;\n+    private final String partitionKey;\n+    private final ErrorContextProvider contextProvider;\n+    private final List<EventData> events;\n+    private final byte[] eventBytes;\n+    private final String partitionId;\n+    private int sizeInBytes;\n+    protected final TracerProvider tracerProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODEyOTM2OnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/Batch.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo0ODoyNVrOGtjJjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTo1ODo0MlrOGtobHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxNDk5MQ==", "bodyText": "The name Batch seems too generic. Since EventDataBatch is already taken, can't think of too many better alternatives. EventDataBatchBase maybe?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450414991", "createdAt": "2020-07-06T18:48:25Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/Batch.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.AmqpMessageConstant;\n+import com.azure.core.amqp.exception.AmqpErrorCondition;\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.AmqpConstants;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.tracing.ProcessKind;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.amqp.Binary;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Data;\n+import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;\n+import org.apache.qpid.proton.message.Message;\n+import reactor.core.publisher.Signal;\n+\n+import java.nio.BufferOverflowException;\n+import java.util.*;\n+\n+import static com.azure.core.util.tracing.Tracer.*;\n+import static com.azure.messaging.eventhubs.implementation.ClientConstants.AZ_NAMESPACE_VALUE;\n+\n+public abstract class Batch {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1ODY1NA==", "bodyText": "Sure.  I will also move it to the implementation directory since it shouldn't be directly instantiated by users.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450458654", "createdAt": "2020-07-06T20:20:48Z", "author": {"login": "arerlend"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/Batch.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.AmqpMessageConstant;\n+import com.azure.core.amqp.exception.AmqpErrorCondition;\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.AmqpConstants;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.tracing.ProcessKind;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.amqp.Binary;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Data;\n+import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;\n+import org.apache.qpid.proton.message.Message;\n+import reactor.core.publisher.Signal;\n+\n+import java.nio.BufferOverflowException;\n+import java.util.*;\n+\n+import static com.azure.core.util.tracing.Tracer.*;\n+import static com.azure.messaging.eventhubs.implementation.ClientConstants.AZ_NAMESPACE_VALUE;\n+\n+public abstract class Batch {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxNDk5MQ=="}, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwMTQwNg==", "bodyText": "Actually leaving it here, makes inheritance significantly messier.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450501406", "createdAt": "2020-07-06T21:58:42Z", "author": {"login": "arerlend"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/Batch.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.AmqpMessageConstant;\n+import com.azure.core.amqp.exception.AmqpErrorCondition;\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.AmqpConstants;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.tracing.ProcessKind;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.amqp.Binary;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Data;\n+import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;\n+import org.apache.qpid.proton.message.Message;\n+import reactor.core.publisher.Signal;\n+\n+import java.nio.BufferOverflowException;\n+import java.util.*;\n+\n+import static com.azure.core.util.tracing.Tracer.*;\n+import static com.azure.messaging.eventhubs.implementation.ClientConstants.AZ_NAMESPACE_VALUE;\n+\n+public abstract class Batch {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxNDk5MQ=="}, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODEzNDUwOnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo0OTo0M1rOGtjMbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo0OTo0M1rOGtjMbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxNTcyNQ==", "bodyText": "This doesn't have to be registry serializer. Any implementation of ObjectSerializer should work here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450415725", "createdAt": "2020-07-06T18:49:43Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "diffHunk": "@@ -361,6 +363,16 @@ public EventHubClientBuilder prefetchCount(int prefetchCount) {\n         return this;\n     }\n \n+    /**\n+     * Set registry serializer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE1MDM4OnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1NDowMlrOGtjVpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1NDowMlrOGtjVpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxODA4Nw==", "bodyText": "Setting a serializer on the builder should not force the producer to send ObjectBatch only.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450418087", "createdAt": "2020-07-06T18:54:02Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -510,6 +584,41 @@ private String getEntityPath(String partitionId) {\n             .flatMap(connection -> connection.createSendLink(linkName, entityPath, retryOptions));\n     }\n \n+    private <T> Mono<T> verifySendMode(SendMode mode) {\n+        switch (mode) {\n+            case EVENT_DATA:\n+                if (serializer != null) {\n+                    return monoError(logger, new IllegalStateException());\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE2NDY5OnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1ODozOVrOGtjelg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1ODozOVrOGtjelg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMDM3NA==", "bodyText": "This is also used in createBatch() method for EventDataBatch. Update that method as well to call this method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450420374", "createdAt": "2020-07-06T18:58:39Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -510,6 +584,41 @@ private String getEntityPath(String partitionId) {\n             .flatMap(connection -> connection.createSendLink(linkName, entityPath, retryOptions));\n     }\n \n+    private <T> Mono<T> verifySendMode(SendMode mode) {\n+        switch (mode) {\n+            case EVENT_DATA:\n+                if (serializer != null) {\n+                    return monoError(logger, new IllegalStateException());\n+                }\n+                break;\n+            case OBJECT:\n+                if (serializer == null) {\n+                    return monoError(logger, new IllegalStateException());\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        return null;\n+    }\n+\n+    private <T> Mono<T> validateBatchOptions(CreateBatchOptions options) {\n+        if (!CoreUtils.isNullOrEmpty(options.getPartitionKey())\n+            && !CoreUtils.isNullOrEmpty(options.getPartitionId())) {\n+            return monoError(logger, new IllegalArgumentException(String.format(Locale.US,\n+                \"CreateBatchOptions.getPartitionKey() and CreateBatchOptions.getPartitionId() are both set. \"\n+                    + \"Only one or the other can be used. partitionKey: '%s'. partitionId: '%s'\",\n+                options.getPartitionKey(), options.getPartitionId())));\n+        } else if (!CoreUtils.isNullOrEmpty(options.getPartitionKey())\n+            && options.getPartitionKey().length() > MAX_PARTITION_KEY_LENGTH) {\n+            return monoError(logger, new IllegalArgumentException(String.format(Locale.US,\n+                \"Partition key '%s' exceeds the maximum allowed length: '%s'.\", options.getPartitionKey(),\n+                MAX_PARTITION_KEY_LENGTH)));\n+        }\n+        return null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE2NTU5OnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1ODo1N1rOGtjfIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1ODo1N1rOGtjfIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMDUxMw==", "bodyText": "add javadoc", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450420513", "createdAt": "2020-07-06T18:58:57Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.experimental.serializer.ObjectSerializer;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+public final class ObjectBatch<T> extends Batch {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE3MTQ1OnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowMDo0OVrOGtjizg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMToyMToxM1rOGtngMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMTQ1NA==", "bodyText": "Should this method return Mono<Boolean> instead to avoid blocking?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450421454", "createdAt": "2020-07-06T19:00:49Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.experimental.serializer.ObjectSerializer;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+public final class ObjectBatch<T> extends Batch {\n+    private final ClientLogger logger = new ClientLogger(ObjectBatch.class);\n+    private final Object lock = new Object();\n+    private final Class<T> batchType;\n+    private final ObjectSerializer objectSerializer;\n+\n+    /**\n+     *\n+     * @param maxMessageSize\n+     * @param partitionId\n+     * @param partitionKey\n+     * @param batchType\n+     * @param contextProvider\n+     * @param tracerProvider\n+     * @param objectSerializer\n+     * @param entityPath\n+     * @param hostname\n+     */\n+    ObjectBatch(int maxMessageSize, String partitionId, String partitionKey, Class<T> batchType,\n+                    ErrorContextProvider contextProvider, TracerProvider tracerProvider,\n+                ObjectSerializer objectSerializer, String entityPath, String hostname) {\n+        super(maxMessageSize, partitionId, partitionKey, contextProvider, tracerProvider, entityPath, hostname);\n+        this.batchType = Objects.requireNonNull(batchType, \"'batchType' cannot be null.\");\n+        this.objectSerializer = Objects.requireNonNull(objectSerializer, \"'objectSerializer' cannot be null.\");\n+    }\n+\n+    /**\n+     * Tries to add an object to the batch.\n+     *\n+     * @param object The object to add to the batch.\n+     * @return {@code true} if the object could be added to the batch; {@code false} if the serialized object\n+     *      was too large to fit in the batch.\n+     * @throws IllegalArgumentException if object is {@code null}.\n+     * @throws AmqpException if serialized object as {@link EventData} is larger than the maximum size\n+     *      of the {@link EventDataBatch}.\n+     */\n+    public Boolean tryAdd(final T object) {\n+        if (object == null) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\"object cannot be null\"));\n+        }\n+\n+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        return objectSerializer.serialize(outputStream, object).map(s -> {\n+            EventData eventData = new EventData(s.toByteArray());\n+            EventData event = tracerProvider.isEnabled() ? traceMessageSpan(eventData) : eventData;\n+            return tryAdd(event);\n+        }).block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQzMDM1MQ==", "bodyText": "The concern here was that EventDataBatch's TryAdd method is sync whereas this would be async.\nIf it's fine for it to be asymmetric, then async is absolutely fine.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450430351", "createdAt": "2020-07-06T19:19:32Z", "author": {"login": "arerlend"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.experimental.serializer.ObjectSerializer;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+public final class ObjectBatch<T> extends Batch {\n+    private final ClientLogger logger = new ClientLogger(ObjectBatch.class);\n+    private final Object lock = new Object();\n+    private final Class<T> batchType;\n+    private final ObjectSerializer objectSerializer;\n+\n+    /**\n+     *\n+     * @param maxMessageSize\n+     * @param partitionId\n+     * @param partitionKey\n+     * @param batchType\n+     * @param contextProvider\n+     * @param tracerProvider\n+     * @param objectSerializer\n+     * @param entityPath\n+     * @param hostname\n+     */\n+    ObjectBatch(int maxMessageSize, String partitionId, String partitionKey, Class<T> batchType,\n+                    ErrorContextProvider contextProvider, TracerProvider tracerProvider,\n+                ObjectSerializer objectSerializer, String entityPath, String hostname) {\n+        super(maxMessageSize, partitionId, partitionKey, contextProvider, tracerProvider, entityPath, hostname);\n+        this.batchType = Objects.requireNonNull(batchType, \"'batchType' cannot be null.\");\n+        this.objectSerializer = Objects.requireNonNull(objectSerializer, \"'objectSerializer' cannot be null.\");\n+    }\n+\n+    /**\n+     * Tries to add an object to the batch.\n+     *\n+     * @param object The object to add to the batch.\n+     * @return {@code true} if the object could be added to the batch; {@code false} if the serialized object\n+     *      was too large to fit in the batch.\n+     * @throws IllegalArgumentException if object is {@code null}.\n+     * @throws AmqpException if serialized object as {@link EventData} is larger than the maximum size\n+     *      of the {@link EventDataBatch}.\n+     */\n+    public Boolean tryAdd(final T object) {\n+        if (object == null) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\"object cannot be null\"));\n+        }\n+\n+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        return objectSerializer.serialize(outputStream, object).map(s -> {\n+            EventData eventData = new EventData(s.toByteArray());\n+            EventData event = tracerProvider.isEnabled() ? traceMessageSpan(eventData) : eventData;\n+            return tryAdd(event);\n+        }).block();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMTQ1NA=="}, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ2MjE5OQ==", "bodyText": "EventDataBatch's tryAdd has no IO operation and can be done synchronously. Here, the serializer can potentially make a service call and blocking can cause other issues downstream. Another option is to have tryAdd() and tryAddAsync().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450462199", "createdAt": "2020-07-06T20:28:32Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.experimental.serializer.ObjectSerializer;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+public final class ObjectBatch<T> extends Batch {\n+    private final ClientLogger logger = new ClientLogger(ObjectBatch.class);\n+    private final Object lock = new Object();\n+    private final Class<T> batchType;\n+    private final ObjectSerializer objectSerializer;\n+\n+    /**\n+     *\n+     * @param maxMessageSize\n+     * @param partitionId\n+     * @param partitionKey\n+     * @param batchType\n+     * @param contextProvider\n+     * @param tracerProvider\n+     * @param objectSerializer\n+     * @param entityPath\n+     * @param hostname\n+     */\n+    ObjectBatch(int maxMessageSize, String partitionId, String partitionKey, Class<T> batchType,\n+                    ErrorContextProvider contextProvider, TracerProvider tracerProvider,\n+                ObjectSerializer objectSerializer, String entityPath, String hostname) {\n+        super(maxMessageSize, partitionId, partitionKey, contextProvider, tracerProvider, entityPath, hostname);\n+        this.batchType = Objects.requireNonNull(batchType, \"'batchType' cannot be null.\");\n+        this.objectSerializer = Objects.requireNonNull(objectSerializer, \"'objectSerializer' cannot be null.\");\n+    }\n+\n+    /**\n+     * Tries to add an object to the batch.\n+     *\n+     * @param object The object to add to the batch.\n+     * @return {@code true} if the object could be added to the batch; {@code false} if the serialized object\n+     *      was too large to fit in the batch.\n+     * @throws IllegalArgumentException if object is {@code null}.\n+     * @throws AmqpException if serialized object as {@link EventData} is larger than the maximum size\n+     *      of the {@link EventDataBatch}.\n+     */\n+    public Boolean tryAdd(final T object) {\n+        if (object == null) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\"object cannot be null\"));\n+        }\n+\n+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        return objectSerializer.serialize(outputStream, object).map(s -> {\n+            EventData eventData = new EventData(s.toByteArray());\n+            EventData event = tracerProvider.isEnabled() ? traceMessageSpan(eventData) : eventData;\n+            return tryAdd(event);\n+        }).block();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMTQ1NA=="}, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ4NjMyMg==", "bodyText": "Yeah I thought it might be a bit confusing to have one sync and one async, but I'll just make sure it is clear in the javadoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450486322", "createdAt": "2020-07-06T21:21:13Z", "author": {"login": "arerlend"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.experimental.serializer.ObjectSerializer;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+public final class ObjectBatch<T> extends Batch {\n+    private final ClientLogger logger = new ClientLogger(ObjectBatch.class);\n+    private final Object lock = new Object();\n+    private final Class<T> batchType;\n+    private final ObjectSerializer objectSerializer;\n+\n+    /**\n+     *\n+     * @param maxMessageSize\n+     * @param partitionId\n+     * @param partitionKey\n+     * @param batchType\n+     * @param contextProvider\n+     * @param tracerProvider\n+     * @param objectSerializer\n+     * @param entityPath\n+     * @param hostname\n+     */\n+    ObjectBatch(int maxMessageSize, String partitionId, String partitionKey, Class<T> batchType,\n+                    ErrorContextProvider contextProvider, TracerProvider tracerProvider,\n+                ObjectSerializer objectSerializer, String entityPath, String hostname) {\n+        super(maxMessageSize, partitionId, partitionKey, contextProvider, tracerProvider, entityPath, hostname);\n+        this.batchType = Objects.requireNonNull(batchType, \"'batchType' cannot be null.\");\n+        this.objectSerializer = Objects.requireNonNull(objectSerializer, \"'objectSerializer' cannot be null.\");\n+    }\n+\n+    /**\n+     * Tries to add an object to the batch.\n+     *\n+     * @param object The object to add to the batch.\n+     * @return {@code true} if the object could be added to the batch; {@code false} if the serialized object\n+     *      was too large to fit in the batch.\n+     * @throws IllegalArgumentException if object is {@code null}.\n+     * @throws AmqpException if serialized object as {@link EventData} is larger than the maximum size\n+     *      of the {@link EventDataBatch}.\n+     */\n+    public Boolean tryAdd(final T object) {\n+        if (object == null) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\"object cannot be null\"));\n+        }\n+\n+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        return objectSerializer.serialize(outputStream, object).map(s -> {\n+            EventData eventData = new EventData(s.toByteArray());\n+            EventData event = tracerProvider.isEnabled() ? traceMessageSpan(eventData) : eventData;\n+            return tryAdd(event);\n+        }).block();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMTQ1NA=="}, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE3ODIzOnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/models/PartitionEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowMjo1OFrOGtjm9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowMjo1OFrOGtjm9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMjUxOA==", "bodyText": "Should check objectType for null too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450422518", "createdAt": "2020-07-06T19:02:58Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/models/PartitionEvent.java", "diffHunk": "@@ -59,4 +66,19 @@ public EventData getData() {\n     public LastEnqueuedEventProperties getLastEnqueuedEventProperties() {\n         return lastEnqueuedEventProperties;\n     }\n+\n+    public <T> T getDeserializedObject(Class<T> objectType) {\n+        Objects.requireNonNull(objectSerializer, \"No serializer set for deserializing event data payload.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE4MDY0OnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/models/PartitionEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowMzo1M1rOGtjodQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowMzo1M1rOGtjodQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMjkwMQ==", "bodyText": "Same here - should not block in this method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450422901", "createdAt": "2020-07-06T19:03:53Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/models/PartitionEvent.java", "diffHunk": "@@ -59,4 +66,19 @@ public EventData getData() {\n     public LastEnqueuedEventProperties getLastEnqueuedEventProperties() {\n         return lastEnqueuedEventProperties;\n     }\n+\n+    public <T> T getDeserializedObject(Class<T> objectType) {\n+        Objects.requireNonNull(objectSerializer, \"No serializer set for deserializing event data payload.\");\n+\n+        if (deserialized != null) {\n+            if (objectType.isInstance(deserialized)) {\n+                return objectType.cast(deserialized);\n+            };\n+        }\n+\n+        T typedDeserializedObject =\n+            objectSerializer.deserialize(new ByteArrayInputStream(eventData.getBody()), objectType).block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE4NDQzOnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/module-info.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowNToxNFrOGtjq3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowNToxNFrOGtjq3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMzUxOQ==", "bodyText": "Since com.azure.core is always going to be there, we should keep this uncommented even though it's redundant when experimental is added for beta releases.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r450423519", "createdAt": "2020-07-06T19:05:14Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/module-info.java", "diffHunk": "@@ -2,7 +2,8 @@\n // Licensed under the MIT License.\n \n module com.azure.messaging.eventhubs {\n-    requires transitive com.azure.core;\n+//    requires transitive com.azure.core;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3acc8c9f72a0becbede6bae614c11e926c67803"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzEwMzA2OnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMzozNDo1N1rOGuTIWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMTowNjowMFrOGuUm7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIwMTExMg==", "bodyText": "What happens when the value is null at construction time?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r451201112", "createdAt": "2020-07-07T23:34:57Z", "author": {"login": "alzimmermsft"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "diffHunk": "@@ -361,6 +363,18 @@ public EventHubClientBuilder prefetchCount(int prefetchCount) {\n         return this;\n     }\n \n+    /**\n+     * Set ObjectSerializer implementation to be used for creating ObjectBatch.\n+     *\n+     * @param serializer ObjectSerializer implementation\n+     *\n+     * @return updated builder instance\n+     */\n+    public EventHubClientBuilder serializer(ObjectSerializer serializer) {\n+        this.serializer = serializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e66eb11ab6b56896e089e6128800fd4b7328f8b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNTMyNQ==", "bodyText": "Yeah this is a very reasonable question.  Right now the client allows serializer to be null, and will check when you go down a serialization code path that serializer is set.  Otherwise it doesn't care if serializer is set or not.  I don't think this is particularly future proof behavior but the alternative aren't much better:\n\nsetting a pass-through \"byte array serializer\" that serves no purpose except to keep serializer from being null\nfully typing clients such that serializers must always be set\nnot fully typing clients with the following options, e.g. in produce\n\nObject-type parameter methods that determine if you're should use a serializer or not, like tryAdd(Object o)\nmethod overloads for tryAdd(Object o) or tryAdd(T o) and also tryAdd(EventData e)... which forces you to:\n\nallow EventDataBatch to contain both SR objects and hand-crafted EventData... which is a bad idea\nrestrict send modes to either  EventData mode or Object mode, based on whether a serializer is set", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r451225325", "createdAt": "2020-07-08T01:06:00Z", "author": {"login": "arerlend"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "diffHunk": "@@ -361,6 +363,18 @@ public EventHubClientBuilder prefetchCount(int prefetchCount) {\n         return this;\n     }\n \n+    /**\n+     * Set ObjectSerializer implementation to be used for creating ObjectBatch.\n+     *\n+     * @param serializer ObjectSerializer implementation\n+     *\n+     * @return updated builder instance\n+     */\n+    public EventHubClientBuilder serializer(ObjectSerializer serializer) {\n+        this.serializer = serializer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIwMTExMg=="}, "originalCommit": {"oid": "2e66eb11ab6b56896e089e6128800fd4b7328f8b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzIzODkwOnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMDo1MToyNVrOGuUYsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTowMzoyMlrOGu5JHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyMTY4Mg==", "bodyText": "Would it be better to check this is non-null when validating batch options or could this be created from other contexts?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r451221682", "createdAt": "2020-07-08T00:51:25Z", "author": {"login": "alzimmermsft"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.experimental.serializer.ObjectSerializer;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * A class for aggregating Java objects into a single, size-limited, batch. Objects are serialized into EventData\n+ * objects and are added to the batch.  It is treated as a single message when sent to the Azure Event Hubs service.\n+ *\n+ * @param <T> type of objects in the batch.  Multi-type batches are not permitted.\n+ */\n+public final class ObjectBatch<T> extends EventDataBatchBase {\n+    private final ClientLogger logger = new ClientLogger(ObjectBatch.class);\n+    private final Class<T> batchType;\n+    private final ObjectSerializer objectSerializer;\n+\n+    ObjectBatch(int maxMessageSize, String partitionId, String partitionKey, Class<T> batchType,\n+                    ErrorContextProvider contextProvider, TracerProvider tracerProvider,\n+                    ObjectSerializer objectSerializer, String entityPath, String hostname) {\n+        super(maxMessageSize, partitionId, partitionKey, contextProvider, tracerProvider, entityPath, hostname);\n+        this.batchType = Objects.requireNonNull(batchType, \"'batchType' cannot be null.\");\n+        this.objectSerializer = Objects.requireNonNull(objectSerializer, \"'objectSerializer' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e66eb11ab6b56896e089e6128800fd4b7328f8b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMzkwMA==", "bodyText": "Added a check in object batch creation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r451823900", "createdAt": "2020-07-08T21:03:22Z", "author": {"login": "arerlend"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.experimental.serializer.ObjectSerializer;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * A class for aggregating Java objects into a single, size-limited, batch. Objects are serialized into EventData\n+ * objects and are added to the batch.  It is treated as a single message when sent to the Azure Event Hubs service.\n+ *\n+ * @param <T> type of objects in the batch.  Multi-type batches are not permitted.\n+ */\n+public final class ObjectBatch<T> extends EventDataBatchBase {\n+    private final ClientLogger logger = new ClientLogger(ObjectBatch.class);\n+    private final Class<T> batchType;\n+    private final ObjectSerializer objectSerializer;\n+\n+    ObjectBatch(int maxMessageSize, String partitionId, String partitionKey, Class<T> batchType,\n+                    ErrorContextProvider contextProvider, TracerProvider tracerProvider,\n+                    ObjectSerializer objectSerializer, String entityPath, String hostname) {\n+        super(maxMessageSize, partitionId, partitionKey, contextProvider, tracerProvider, entityPath, hostname);\n+        this.batchType = Objects.requireNonNull(batchType, \"'batchType' cannot be null.\");\n+        this.objectSerializer = Objects.requireNonNull(objectSerializer, \"'objectSerializer' cannot be null.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyMTY4Mg=="}, "originalCommit": {"oid": "2e66eb11ab6b56896e089e6128800fd4b7328f8b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzIzOTYyOnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMDo1MTo1NFrOGuUZGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMDo1MTo1NFrOGuUZGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyMTc4Nw==", "bodyText": "Should this be using monoError?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r451221787", "createdAt": "2020-07-08T00:51:54Z", "author": {"login": "alzimmermsft"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.experimental.serializer.ObjectSerializer;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * A class for aggregating Java objects into a single, size-limited, batch. Objects are serialized into EventData\n+ * objects and are added to the batch.  It is treated as a single message when sent to the Azure Event Hubs service.\n+ *\n+ * @param <T> type of objects in the batch.  Multi-type batches are not permitted.\n+ */\n+public final class ObjectBatch<T> extends EventDataBatchBase {\n+    private final ClientLogger logger = new ClientLogger(ObjectBatch.class);\n+    private final Class<T> batchType;\n+    private final ObjectSerializer objectSerializer;\n+\n+    ObjectBatch(int maxMessageSize, String partitionId, String partitionKey, Class<T> batchType,\n+                    ErrorContextProvider contextProvider, TracerProvider tracerProvider,\n+                    ObjectSerializer objectSerializer, String entityPath, String hostname) {\n+        super(maxMessageSize, partitionId, partitionKey, contextProvider, tracerProvider, entityPath, hostname);\n+        this.batchType = Objects.requireNonNull(batchType, \"'batchType' cannot be null.\");\n+        this.objectSerializer = Objects.requireNonNull(objectSerializer, \"'objectSerializer' cannot be null.\");\n+    }\n+\n+    /**\n+     * Tries to asynchronously serialize an object into an EventData payload and add the EventData to the batch.\n+     *\n+     * @param object The object to add to the batch.\n+     * @return {@code true} if the object could be added to the batch; {@code false} if the serialized\n+     * object was too large to fit in the batch.\n+     * @throws IllegalArgumentException if object is {@code null}.\n+     * @throws AmqpException if serialized object as {@link EventData} is larger than the maximum size\n+     *      of the {@link EventDataBatch}.\n+     */\n+    public Mono<Boolean> tryAdd(final T object) {\n+        if (object == null) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\"object cannot be null\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e66eb11ab6b56896e089e6128800fd4b7328f8b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzI0MTc3OnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMDo1MzoxNlrOGuUaew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTowMjoyNlrOGu5Hhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyMjEzOQ==", "bodyText": "Given that this is internal a cool optimization would be creating a private extension of ByteArrayOuputStream to access its backing byte[] directly. toByteArray will make a clone of the byte[].", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r451222139", "createdAt": "2020-07-08T00:53:16Z", "author": {"login": "alzimmermsft"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.experimental.serializer.ObjectSerializer;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * A class for aggregating Java objects into a single, size-limited, batch. Objects are serialized into EventData\n+ * objects and are added to the batch.  It is treated as a single message when sent to the Azure Event Hubs service.\n+ *\n+ * @param <T> type of objects in the batch.  Multi-type batches are not permitted.\n+ */\n+public final class ObjectBatch<T> extends EventDataBatchBase {\n+    private final ClientLogger logger = new ClientLogger(ObjectBatch.class);\n+    private final Class<T> batchType;\n+    private final ObjectSerializer objectSerializer;\n+\n+    ObjectBatch(int maxMessageSize, String partitionId, String partitionKey, Class<T> batchType,\n+                    ErrorContextProvider contextProvider, TracerProvider tracerProvider,\n+                    ObjectSerializer objectSerializer, String entityPath, String hostname) {\n+        super(maxMessageSize, partitionId, partitionKey, contextProvider, tracerProvider, entityPath, hostname);\n+        this.batchType = Objects.requireNonNull(batchType, \"'batchType' cannot be null.\");\n+        this.objectSerializer = Objects.requireNonNull(objectSerializer, \"'objectSerializer' cannot be null.\");\n+    }\n+\n+    /**\n+     * Tries to asynchronously serialize an object into an EventData payload and add the EventData to the batch.\n+     *\n+     * @param object The object to add to the batch.\n+     * @return {@code true} if the object could be added to the batch; {@code false} if the serialized\n+     * object was too large to fit in the batch.\n+     * @throws IllegalArgumentException if object is {@code null}.\n+     * @throws AmqpException if serialized object as {@link EventData} is larger than the maximum size\n+     *      of the {@link EventDataBatch}.\n+     */\n+    public Mono<Boolean> tryAdd(final T object) {\n+        if (object == null) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\"object cannot be null\"));\n+        }\n+\n+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        return objectSerializer.serialize(outputStream, object).map(s -> tryAdd(new EventData(s.toByteArray())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e66eb11ab6b56896e089e6128800fd4b7328f8b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMzQ5NA==", "bodyText": "Probably not going to have that for this PR, but we should consider this since the copy will be done for every message receive.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r451823494", "createdAt": "2020-07-08T21:02:26Z", "author": {"login": "arerlend"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/ObjectBatch.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.eventhubs;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.amqp.implementation.ErrorContextProvider;\n+import com.azure.core.amqp.implementation.TracerProvider;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.experimental.serializer.ObjectSerializer;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * A class for aggregating Java objects into a single, size-limited, batch. Objects are serialized into EventData\n+ * objects and are added to the batch.  It is treated as a single message when sent to the Azure Event Hubs service.\n+ *\n+ * @param <T> type of objects in the batch.  Multi-type batches are not permitted.\n+ */\n+public final class ObjectBatch<T> extends EventDataBatchBase {\n+    private final ClientLogger logger = new ClientLogger(ObjectBatch.class);\n+    private final Class<T> batchType;\n+    private final ObjectSerializer objectSerializer;\n+\n+    ObjectBatch(int maxMessageSize, String partitionId, String partitionKey, Class<T> batchType,\n+                    ErrorContextProvider contextProvider, TracerProvider tracerProvider,\n+                    ObjectSerializer objectSerializer, String entityPath, String hostname) {\n+        super(maxMessageSize, partitionId, partitionKey, contextProvider, tracerProvider, entityPath, hostname);\n+        this.batchType = Objects.requireNonNull(batchType, \"'batchType' cannot be null.\");\n+        this.objectSerializer = Objects.requireNonNull(objectSerializer, \"'objectSerializer' cannot be null.\");\n+    }\n+\n+    /**\n+     * Tries to asynchronously serialize an object into an EventData payload and add the EventData to the batch.\n+     *\n+     * @param object The object to add to the batch.\n+     * @return {@code true} if the object could be added to the batch; {@code false} if the serialized\n+     * object was too large to fit in the batch.\n+     * @throws IllegalArgumentException if object is {@code null}.\n+     * @throws AmqpException if serialized object as {@link EventData} is larger than the maximum size\n+     *      of the {@link EventDataBatch}.\n+     */\n+    public Mono<Boolean> tryAdd(final T object) {\n+        if (object == null) {\n+            throw logger.logExceptionAsWarning(new IllegalArgumentException(\"object cannot be null\"));\n+        }\n+\n+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        return objectSerializer.serialize(outputStream, object).map(s -> tryAdd(new EventData(s.toByteArray())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyMjEzOQ=="}, "originalCommit": {"oid": "2e66eb11ab6b56896e089e6128800fd4b7328f8b"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjkxOTc4OnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDoyNDozNFrOGu3-BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDoyNDozNFrOGu3-BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNDY3Ng==", "bodyText": "This enum is not used anywhere. This can be removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r451804676", "createdAt": "2020-07-08T20:24:34Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -110,15 +111,23 @@\n     private final Scheduler scheduler;\n     private final boolean isSharedConnection;\n     private final Runnable onClientClose;\n+    private final ObjectSerializer serializer;\n+\n+    private enum SendMode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e66eb11ab6b56896e089e6128800fd4b7328f8b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzEzMDcyOnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTozNDoyMlrOGu6BkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMzoyODoxMFrOGu8i2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzODM1Mg==", "bodyText": "Should this be in a single chain instead of nesting the flatMap operators?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r451838352", "createdAt": "2020-07-08T21:34:22Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -248,6 +263,71 @@ public String getEventHubName() {\n                 }));\n     }\n \n+    /**\n+     * Creates an {@link ObjectBatch} that can fit as many serialized objects as events as the transport allows.\n+     * @param objectType type of object in the batch\n+     * @param <T> object type\n+     *\n+     * @return A new {@link ObjectBatch} that can fit as many serialized objects as events as the transport allows.\n+     */\n+    public <T> Mono<ObjectBatch<T>> createBatch(Class<T> objectType) {\n+        return createBatch(objectType, DEFAULT_BATCH_OPTIONS);\n+    }\n+\n+    /**\n+     * Creates an {@link ObjectBatch} configured with the options specified.\n+     *\n+     * @param objectType type of object in the batch\n+     * @param <T> object type\n+     * @param options A set of options used to configure the {@link ObjectBatch}.\n+     * @return A new {@link ObjectBatch} that can fit as many events as the transport allows.\n+     * @throws NullPointerException if {@code options} is null.\n+     */\n+    public <T> Mono<ObjectBatch<T>> createBatch(Class<T> objectType, CreateBatchOptions options) {\n+        if (objectType == null) {\n+            return monoError(logger, new IllegalArgumentException(\"'objectType' cannot be null.\"));\n+        }\n+        if (serializer == null) {\n+            return monoError(logger,\n+                new NullPointerException(\"No serializer set for performing object serialization for ObjectBatch.\"));\n+        }\n+        if (options == null) {\n+            return monoError(logger, new NullPointerException(\"'options' cannot be null.\"));\n+        }\n+\n+        Mono<ObjectBatch<T>> optionsError = validateBatchOptions(options);\n+        if (optionsError != null) {\n+            return optionsError;\n+        }\n+\n+        final String partitionKey = options.getPartitionKey();\n+        final String partitionId = options.getPartitionId();\n+        final int batchMaxSize = options.getMaximumSizeInBytes();\n+\n+        return getSendLink(partitionId)\n+            .flatMap(link -> link.getLinkSize()\n+                .flatMap(size -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03693c9fe6470ef28aebc6c179cbb088d326a8d2"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg3OTY0MQ==", "bodyText": "Yeah I grabbed this one from existing batch creation code, looks like link ref is used for some other args.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r451879641", "createdAt": "2020-07-08T23:28:10Z", "author": {"login": "arerlend"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java", "diffHunk": "@@ -248,6 +263,71 @@ public String getEventHubName() {\n                 }));\n     }\n \n+    /**\n+     * Creates an {@link ObjectBatch} that can fit as many serialized objects as events as the transport allows.\n+     * @param objectType type of object in the batch\n+     * @param <T> object type\n+     *\n+     * @return A new {@link ObjectBatch} that can fit as many serialized objects as events as the transport allows.\n+     */\n+    public <T> Mono<ObjectBatch<T>> createBatch(Class<T> objectType) {\n+        return createBatch(objectType, DEFAULT_BATCH_OPTIONS);\n+    }\n+\n+    /**\n+     * Creates an {@link ObjectBatch} configured with the options specified.\n+     *\n+     * @param objectType type of object in the batch\n+     * @param <T> object type\n+     * @param options A set of options used to configure the {@link ObjectBatch}.\n+     * @return A new {@link ObjectBatch} that can fit as many events as the transport allows.\n+     * @throws NullPointerException if {@code options} is null.\n+     */\n+    public <T> Mono<ObjectBatch<T>> createBatch(Class<T> objectType, CreateBatchOptions options) {\n+        if (objectType == null) {\n+            return monoError(logger, new IllegalArgumentException(\"'objectType' cannot be null.\"));\n+        }\n+        if (serializer == null) {\n+            return monoError(logger,\n+                new NullPointerException(\"No serializer set for performing object serialization for ObjectBatch.\"));\n+        }\n+        if (options == null) {\n+            return monoError(logger, new NullPointerException(\"'options' cannot be null.\"));\n+        }\n+\n+        Mono<ObjectBatch<T>> optionsError = validateBatchOptions(options);\n+        if (optionsError != null) {\n+            return optionsError;\n+        }\n+\n+        final String partitionKey = options.getPartitionKey();\n+        final String partitionId = options.getPartitionId();\n+        final int batchMaxSize = options.getMaximumSizeInBytes();\n+\n+        return getSendLink(partitionId)\n+            .flatMap(link -> link.getLinkSize()\n+                .flatMap(size -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzODM1Mg=="}, "originalCommit": {"oid": "03693c9fe6470ef28aebc6c179cbb088d326a8d2"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzEzODk0OnYy", "diffSide": "RIGHT", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/module-info.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTozNzoxN1rOGu6Giw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTozNzoxN1rOGu6Giw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzOTYyNw==", "bodyText": "This has to be transitive too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12205#discussion_r451839627", "createdAt": "2020-07-08T21:37:17Z", "author": {"login": "srnagar"}, "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/module-info.java", "diffHunk": "@@ -3,6 +3,7 @@\n \n module com.azure.messaging.eventhubs {\n     requires transitive com.azure.core;\n+    requires com.azure.core.experimental;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03693c9fe6470ef28aebc6c179cbb088d326a8d2"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3845, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}