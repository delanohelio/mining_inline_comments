{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MjgwODkx", "number": 17234, "title": "[TA] Healthcare Analyze feature", "bodyText": "Added support for Healthcare Analyze and Cancellation endpoints\n\n Implementation\n Sample, Test, Codesnippet\n CHANGELOG\n\nThe README is not going to support until the service release the feature at 11/19.\nfixes: #17247", "createdAt": "2020-11-05T19:11:31Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234", "merged": true, "mergeCommit": {"oid": "5dd341e3a0d68e8bd62e5ae1d269bbaf349d53f7"}, "closed": true, "closedAt": "2020-11-06T17:31:55Z", "author": {"login": "mssfang"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZnLUQAH2gAyNTE2MjgwODkxOjdiMGUyNGM0ZDMyMzkwZGQ5YzJlYWM5MDBlYWI1MWZjZjEwNDU1OWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZ8Dc8gFqTUyNTM4ODYyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7b0e24c4d32390dd9c2eac900eab51fcf104559a", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b0e24c4d32390dd9c2eac900eab51fcf104559a", "committedDate": "2020-11-05T19:04:00Z", "message": "TA-Healthcare"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "446bb428456b154a9cdabf289e717f70b8ff3abe", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/446bb428456b154a9cdabf289e717f70b8ff3abe", "committedDate": "2020-11-05T19:13:15Z", "message": "remove checkstyle supppresion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703", "committedDate": "2020-11-05T19:42:24Z", "message": "regenerate swagger ater a new change merged in"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NjY0NTY0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#pullrequestreview-524664564", "createdAt": "2020-11-05T21:03:58Z", "commit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTowMzo1OFrOHuWX9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTowMzo1OFrOHuWX9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2MzEyNQ==", "bodyText": "should the name here be beginAnalyzeHealthcareBatch?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518363125", "createdAt": "2020-11-05T21:03:58Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeHealthcareAsyncClient.java", "diffHunk": "@@ -0,0 +1,326 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.ai.textanalytics.implementation.HealthcareTaskResultPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsOperationResultPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.Utility;\n+import com.azure.ai.textanalytics.implementation.models.HealthcareJobState;\n+import com.azure.ai.textanalytics.implementation.models.HealthcareResult;\n+import com.azure.ai.textanalytics.implementation.models.MultiLanguageBatchInput;\n+import com.azure.ai.textanalytics.implementation.models.StringIndexType;\n+import com.azure.ai.textanalytics.implementation.models.TextAnalyticsError;\n+import com.azure.ai.textanalytics.models.HealthcareTaskResult;\n+import com.azure.ai.textanalytics.models.RecognizeHealthcareEntityOptions;\n+import com.azure.ai.textanalytics.models.TextAnalyticsException;\n+import com.azure.ai.textanalytics.models.TextAnalyticsOperationResult;\n+import com.azure.ai.textanalytics.models.TextDocumentInput;\n+import com.azure.ai.textanalytics.util.RecognizeHealthcareEntitiesResultCollection;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.PagedResponseBase;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.azure.ai.textanalytics.TextAnalyticsAsyncClient.COGNITIVE_TRACING_NAMESPACE_VALUE;\n+import static com.azure.ai.textanalytics.implementation.Utility.DEFAULT_POLL_DURATION;\n+import static com.azure.ai.textanalytics.implementation.Utility.inputDocumentsValidation;\n+import static com.azure.ai.textanalytics.implementation.Utility.parseModelId;\n+import static com.azure.ai.textanalytics.implementation.Utility.parseNextLink;\n+import static com.azure.ai.textanalytics.implementation.Utility.toJobState;\n+import static com.azure.ai.textanalytics.implementation.Utility.toMultiLanguageInput;\n+import static com.azure.ai.textanalytics.implementation.Utility.toRecognizeHealthcareEntitiesResultCollection;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextAnalyticsError;\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+class AnalyzeHealthcareAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(AnalyzeHealthcareAsyncClient.class);\n+    private final TextAnalyticsClientImpl service;\n+\n+    /**\n+     * Create an {@link AnalyzeHealthcareAsyncClient} that sends requests to the Text Analytics services's healthcare\n+     * LRO endpoint.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     */\n+    AnalyzeHealthcareAsyncClient(TextAnalyticsClientImpl service) {\n+        this.service = service;\n+    }\n+\n+    PollerFlux<TextAnalyticsOperationResult, PagedFlux<HealthcareTaskResult>> beginAnalyzeHealthcare(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NjY2MTg0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#pullrequestreview-524666184", "createdAt": "2020-11-05T21:06:30Z", "commit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTowNjozMFrOHuWdEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTowNjozMFrOHuWdEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2NDQzNA==", "bodyText": "this could be simplify by managing it like you do with modelVersion", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518364434", "createdAt": "2020-11-05T21:06:30Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeHealthcareAsyncClient.java", "diffHunk": "@@ -0,0 +1,326 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.ai.textanalytics.implementation.HealthcareTaskResultPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsOperationResultPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.Utility;\n+import com.azure.ai.textanalytics.implementation.models.HealthcareJobState;\n+import com.azure.ai.textanalytics.implementation.models.HealthcareResult;\n+import com.azure.ai.textanalytics.implementation.models.MultiLanguageBatchInput;\n+import com.azure.ai.textanalytics.implementation.models.StringIndexType;\n+import com.azure.ai.textanalytics.implementation.models.TextAnalyticsError;\n+import com.azure.ai.textanalytics.models.HealthcareTaskResult;\n+import com.azure.ai.textanalytics.models.RecognizeHealthcareEntityOptions;\n+import com.azure.ai.textanalytics.models.TextAnalyticsException;\n+import com.azure.ai.textanalytics.models.TextAnalyticsOperationResult;\n+import com.azure.ai.textanalytics.models.TextDocumentInput;\n+import com.azure.ai.textanalytics.util.RecognizeHealthcareEntitiesResultCollection;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.PagedResponseBase;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.azure.ai.textanalytics.TextAnalyticsAsyncClient.COGNITIVE_TRACING_NAMESPACE_VALUE;\n+import static com.azure.ai.textanalytics.implementation.Utility.DEFAULT_POLL_DURATION;\n+import static com.azure.ai.textanalytics.implementation.Utility.inputDocumentsValidation;\n+import static com.azure.ai.textanalytics.implementation.Utility.parseModelId;\n+import static com.azure.ai.textanalytics.implementation.Utility.parseNextLink;\n+import static com.azure.ai.textanalytics.implementation.Utility.toJobState;\n+import static com.azure.ai.textanalytics.implementation.Utility.toMultiLanguageInput;\n+import static com.azure.ai.textanalytics.implementation.Utility.toRecognizeHealthcareEntitiesResultCollection;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextAnalyticsError;\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+class AnalyzeHealthcareAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(AnalyzeHealthcareAsyncClient.class);\n+    private final TextAnalyticsClientImpl service;\n+\n+    /**\n+     * Create an {@link AnalyzeHealthcareAsyncClient} that sends requests to the Text Analytics services's healthcare\n+     * LRO endpoint.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     */\n+    AnalyzeHealthcareAsyncClient(TextAnalyticsClientImpl service) {\n+        this.service = service;\n+    }\n+\n+    PollerFlux<TextAnalyticsOperationResult, PagedFlux<HealthcareTaskResult>> beginAnalyzeHealthcare(\n+        Iterable<TextDocumentInput> documents, RecognizeHealthcareEntityOptions options, Context context) {\n+        try {\n+            inputDocumentsValidation(documents);\n+            String modelVersion = null;\n+            StringIndexType stringIndexType = null;\n+            if (options != null) {\n+                modelVersion = options.getModelVersion();\n+                if (options.getStringIndexType() != null) {\n+                    stringIndexType = StringIndexType.fromString(options.getStringIndexType().toString());\n+                }\n+            }\n+            final Boolean finalIncludeStatistics = options == null ? null : options.isIncludeStatistics();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0Njc5MTQ5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#pullrequestreview-524679149", "createdAt": "2020-11-05T21:16:45Z", "commit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToxNjo0NVrOHuW2Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToxNjo0NVrOHuW2Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM3MDg4Mg==", "bodyText": "Consider increasing the number as having a for loop for 1 value is weird", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518370882", "createdAt": "2020-11-05T21:16:45Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/lro/AnalyzeHealthcareTask.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.lro;\n+\n+import com.azure.ai.textanalytics.TextAnalyticsClient;\n+import com.azure.ai.textanalytics.TextAnalyticsClientBuilder;\n+import com.azure.ai.textanalytics.models.HealthcareEntityCollection;\n+import com.azure.ai.textanalytics.models.HealthcareEntityLink;\n+import com.azure.ai.textanalytics.models.HealthcareTaskResult;\n+import com.azure.ai.textanalytics.models.RecognizeHealthcareEntityOptions;\n+import com.azure.ai.textanalytics.models.TextAnalyticsOperationResult;\n+import com.azure.ai.textanalytics.models.TextDocumentBatchStatistics;\n+import com.azure.ai.textanalytics.models.TextDocumentInput;\n+import com.azure.ai.textanalytics.util.RecognizeHealthcareEntitiesResultCollection;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.polling.SyncPoller;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Sample demonstrates how to analyze a healthcare task.\n+ */\n+public class AnalyzeHealthcareTask {\n+    /**\n+     * Main method to invoke this demo about how to begin recognizing the healthcare long-running operation.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        TextAnalyticsClient client =\n+            new TextAnalyticsClientBuilder()\n+                .credential(new AzureKeyCredential(\"{key}\"))\n+                .endpoint(\"{endpoint}\")\n+                .buildClient();\n+\n+        List<TextDocumentInput> documents = new ArrayList<>();\n+        for (int i = 0; i < 1; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NjgyNzE0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#pullrequestreview-524682714", "createdAt": "2020-11-05T21:22:25Z", "commit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToyMjoyNVrOHuXK_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToyMjoyNVrOHuXK_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM3NjE5MA==", "bodyText": "Is there a way for the user to set $top and or $skip ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518376190", "createdAt": "2020-11-05T21:22:25Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeHealthcareAsyncClient.java", "diffHunk": "@@ -0,0 +1,326 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.ai.textanalytics.implementation.HealthcareTaskResultPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsOperationResultPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.Utility;\n+import com.azure.ai.textanalytics.implementation.models.HealthcareJobState;\n+import com.azure.ai.textanalytics.implementation.models.HealthcareResult;\n+import com.azure.ai.textanalytics.implementation.models.MultiLanguageBatchInput;\n+import com.azure.ai.textanalytics.implementation.models.StringIndexType;\n+import com.azure.ai.textanalytics.implementation.models.TextAnalyticsError;\n+import com.azure.ai.textanalytics.models.HealthcareTaskResult;\n+import com.azure.ai.textanalytics.models.RecognizeHealthcareEntityOptions;\n+import com.azure.ai.textanalytics.models.TextAnalyticsException;\n+import com.azure.ai.textanalytics.models.TextAnalyticsOperationResult;\n+import com.azure.ai.textanalytics.models.TextDocumentInput;\n+import com.azure.ai.textanalytics.util.RecognizeHealthcareEntitiesResultCollection;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.PagedResponseBase;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.azure.ai.textanalytics.TextAnalyticsAsyncClient.COGNITIVE_TRACING_NAMESPACE_VALUE;\n+import static com.azure.ai.textanalytics.implementation.Utility.DEFAULT_POLL_DURATION;\n+import static com.azure.ai.textanalytics.implementation.Utility.inputDocumentsValidation;\n+import static com.azure.ai.textanalytics.implementation.Utility.parseModelId;\n+import static com.azure.ai.textanalytics.implementation.Utility.parseNextLink;\n+import static com.azure.ai.textanalytics.implementation.Utility.toJobState;\n+import static com.azure.ai.textanalytics.implementation.Utility.toMultiLanguageInput;\n+import static com.azure.ai.textanalytics.implementation.Utility.toRecognizeHealthcareEntitiesResultCollection;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextAnalyticsError;\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+class AnalyzeHealthcareAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(AnalyzeHealthcareAsyncClient.class);\n+    private final TextAnalyticsClientImpl service;\n+\n+    /**\n+     * Create an {@link AnalyzeHealthcareAsyncClient} that sends requests to the Text Analytics services's healthcare\n+     * LRO endpoint.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     */\n+    AnalyzeHealthcareAsyncClient(TextAnalyticsClientImpl service) {\n+        this.service = service;\n+    }\n+\n+    PollerFlux<TextAnalyticsOperationResult, PagedFlux<HealthcareTaskResult>> beginAnalyzeHealthcare(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0Njg0ODcx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#pullrequestreview-524684871", "createdAt": "2020-11-05T21:25:41Z", "commit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToyNTo0MVrOHuXRYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToyNTo0MVrOHuXRYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM3NzgyNw==", "bodyText": "batch? not sure though....\nI think for now it is fine", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518377827", "createdAt": "2020-11-05T21:25:41Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -1002,4 +1011,53 @@ public String getDefaultLanguage() {\n         Iterable<TextDocumentInput> documents, AnalyzeSentimentOptions options) {\n         return analyzeSentimentAsyncClient.analyzeSentimentBatch(documents, options);\n     }\n+\n+    // Health Care\n+    /**\n+     * Analyze healthcare entities, entity linking, and entity relations in a list of\n+     * {@link TextDocumentInput document} with provided request options.\n+     *\n+     * See <a href=\"https://aka.ms/talangs\">this</a> supported languages in Text Analytics API.\n+     *\n+     * <p>Analyze healthcare entities, entity linking, and entity relations in a list of\n+     * {@link TextDocumentInput document} and provided request options to\n+     * show statistics. Subscribes to the call asynchronously and prints out the entity details when a response is\n+     * received.</p>\n+     *\n+     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsAsyncClient.beginAnalyzeHealthcare#Iterable-RecognizeHealthcareEntityOptions}\n+     *\n+     * @param documents A list of {@link TextDocumentInput documents} to be analyzed.\n+     * @param options The additional configurable {@link AnalyzeSentimentOptions options} that may be passed when\n+     * analyzing sentiments.\n+     *\n+     * @return A {@link PollerFlux} that polls the analyze healthcare operation until it has completed, has failed,\n+     * or has been cancelled. The completed operation returns a {@link PagedFlux} of {@link HealthcareTaskResult}.\n+     *\n+     * @throws TextAnalyticsException If analyze operation fails.\n+     * @throws NullPointerException If {@code jobId} is null.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PollerFlux<TextAnalyticsOperationResult, PagedFlux<HealthcareTaskResult>> beginAnalyzeHealthcare(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0Njg3MzUy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#pullrequestreview-524687352", "createdAt": "2020-11-05T21:29:43Z", "commit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToyOTo0M1rOHuXZfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToyOTo0M1rOHuXZfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM3OTkwMQ==", "bodyText": "I know you are passing showStats around, but this link will also contain it, so you could always aprse it here and use it", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518379901", "createdAt": "2020-11-05T21:29:43Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/Utility.java", "diffHunk": "@@ -228,4 +259,179 @@ public static TextAnalyticsException toTextAnalyticsException(\n             .setCountryHint(textDocumentInput.getCountryHint())));\n         return multiLanguageInputs;\n     }\n+\n+    /**\n+     * Extracts the result ID from the URL.\n+     *\n+     * @param operationLocation The URL specified in the 'Operation-Location' response header containing the\n+     * resultId used to track the progress and obtain the result of the analyze operation.\n+     *\n+     * @return The resultId used to track the progress.\n+     */\n+    public static String parseModelId(String operationLocation) {\n+        if (!CoreUtils.isNullOrEmpty(operationLocation)) {\n+            int lastIndex = operationLocation.lastIndexOf('/');\n+            if (lastIndex != -1) {\n+                return operationLocation.substring(lastIndex + 1);\n+            }\n+        }\n+        throw LOGGER.logExceptionAsError(\n+            new RuntimeException(\"Failed to parse operation header for result Id from: \" + operationLocation));\n+    }\n+\n+    /**\n+     * Extract the next pagination link which contains the request parameter values, into map,\n+     * such as '$skip=20' and '$top=2'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NjkyMzc2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#pullrequestreview-524692376", "createdAt": "2020-11-05T21:37:53Z", "commit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTozNzo1M1rOHuXpEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTozNzo1M1rOHuXpEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4Mzg4OA==", "bodyText": "has this always been public? idk if I am in one of those generated classes... but hopefully we can hide the StringIndexType", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518383888", "createdAt": "2020-11-05T21:37:53Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/StringIndexType.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+\n+/**\n+ * Defines values for StringIndexType.\n+ */\n+public enum StringIndexType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NjkzMTc4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#pullrequestreview-524693178", "createdAt": "2020-11-05T21:39:11Z", "commit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTozOToxMlrOHuXsHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTozOToxMlrOHuXsHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4NDY2OQ==", "bodyText": "It took me a while to understand what this was haha I think you need to update the method name :P", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518384669", "createdAt": "2020-11-05T21:39:12Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -784,4 +791,82 @@ public void analyzeBatchSentimentMaxOverloadWithOpinionMining() {\n             });\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch#Iterable-AnalyzeSentimentOptions\n     }\n+\n+    // Healthcare\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#beginAnalyzeHealthcare(Iterable, RecognizeHealthcareEntityOptions)}\n+     */\n+    public void analyzeBatchHealthcareMaxOverloadWithOpinionMining() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NjkzNTkx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#pullrequestreview-524693591", "createdAt": "2020-11-05T21:39:54Z", "commit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTozOTo1NVrOHuXtiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTozOTo1NVrOHuXtiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4NTAzMw==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        System.out.println(\"document id = \" + healthcareEntitiesResult.getId());\n          \n          \n            \n                                        System.out.println(\"Document id = \" + healthcareEntitiesResult.getId());", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518385033", "createdAt": "2020-11-05T21:39:55Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -784,4 +791,82 @@ public void analyzeBatchSentimentMaxOverloadWithOpinionMining() {\n             });\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch#Iterable-AnalyzeSentimentOptions\n     }\n+\n+    // Healthcare\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#beginAnalyzeHealthcare(Iterable, RecognizeHealthcareEntityOptions)}\n+     */\n+    public void analyzeBatchHealthcareMaxOverloadWithOpinionMining() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.beginAnalyzeHealthcare#Iterable-RecognizeHealthcareEntityOptions\n+        List<TextDocumentInput> documents = new ArrayList<>();\n+        for (int i = 0; i < 3; i++) {\n+            documents.add(new TextDocumentInput(Integer.toString(i),\n+                \"The patient is a 54-year-old gentleman with a history of progressive angina \"\n+                    + \"over the past several months.\"));\n+        }\n+\n+        // Request options: show statistics and model version\n+        RecognizeHealthcareEntityOptions options = new RecognizeHealthcareEntityOptions()\n+            .setIncludeStatistics(true);\n+\n+        textAnalyticsAsyncClient.beginAnalyzeHealthcare(documents, options)\n+            .flatMap(AsyncPollResponse::getFinalResult)\n+            .subscribe(healthcareTaskResultPagedFlux -> {\n+                healthcareTaskResultPagedFlux.subscribe(\n+                    healthcareTaskResult -> {\n+                        System.out.printf(\"Job display name: %s, job ID: %s.%n\", healthcareTaskResult.getDisplayName(),\n+                            healthcareTaskResult.getJobId());\n+\n+                        RecognizeHealthcareEntitiesResultCollection healthcareEntitiesResultCollection =\n+                            healthcareTaskResult.getResult();\n+                        // Model version\n+                        System.out.printf(\"Results of Azure Text Analytics \\\"Analyze Healthcare\\\" Model, version: %s%n\",\n+                            healthcareEntitiesResultCollection.getModelVersion());\n+\n+                        // Batch statistics\n+                        TextDocumentBatchStatistics batchStatistics =\n+                            healthcareEntitiesResultCollection.getStatistics();\n+                        System.out.printf(\"Documents statistics: document count = %s, erroneous document count = %s,\"\n+                                + \" transaction count = %s, valid document count = %s.%n\",\n+                            batchStatistics.getDocumentCount(), batchStatistics.getInvalidDocumentCount(),\n+                            batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n+\n+                        healthcareEntitiesResultCollection.forEach(healthcareEntitiesResult -> {\n+                            System.out.println(\"document id = \" + healthcareEntitiesResult.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0Njk4NjU2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#pullrequestreview-524698656", "createdAt": "2020-11-05T21:48:02Z", "commit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo0ODowMlrOHuX-iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo0ODowMlrOHuX-iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4OTM4NQ==", "bodyText": "name here too", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518389385", "createdAt": "2020-11-05T21:48:02Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsClientJavaDocCodeSnippets.java", "diffHunk": "@@ -805,4 +816,88 @@ public void analyzeBatchSentimentMaxOverloadWithOpinionMining() {\n         });\n         // END: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch#Iterable-AnalyzeSentimentOptions-Context\n     }\n+\n+    // Healthcare\n+    /**\n+     * Code snippet for {@link TextAnalyticsClient#beginAnalyzeHealthcare(Iterable, RecognizeHealthcareEntityOptions, Context)}\n+     */\n+    public void analyzeBatchHealthcareMaxOverloadWithOpinionMining() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0Njk4OTY5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#pullrequestreview-524698969", "createdAt": "2020-11-05T21:48:31Z", "commit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo0ODozMVrOHuX_xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo0ODozMVrOHuX_xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4OTcwMw==", "bodyText": "why the need for 100 documents?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518389703", "createdAt": "2020-11-05T21:48:31Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/lro/CancelHealthcareJob.java", "diffHunk": "@@ -0,0 +1,66 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.lro;\n+\n+import com.azure.ai.textanalytics.TextAnalyticsClient;\n+import com.azure.ai.textanalytics.TextAnalyticsClientBuilder;\n+import com.azure.ai.textanalytics.models.HealthcareTaskResult;\n+import com.azure.ai.textanalytics.models.TextAnalyticsOperationResult;\n+import com.azure.ai.textanalytics.models.TextDocumentInput;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.SyncPoller;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Sample demonstrates how to cancel a healthcare job.\n+ */\n+public class CancelHealthcareJob {\n+    /**\n+     * Main method to invoke this demo about how to cancel the healthcare long-running operation.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        TextAnalyticsClient client =\n+            new TextAnalyticsClientBuilder()\n+                .credential(new AzureKeyCredential(\"{key}\"))\n+                .endpoint(\"{endpoint}\")\n+                .buildClient();\n+\n+        List<TextDocumentInput> documents = new ArrayList<>();\n+        for (int i = 0; i < 100; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzAxMDc0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#pullrequestreview-524701074", "createdAt": "2020-11-05T21:51:56Z", "commit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo1MTo1NlrOHuYGyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo1MTo1NlrOHuYGyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5MTQ5Nw==", "bodyText": "what is the purpose of the ParameterizedTest name? not sure how to map DISPLAY_NAME_WITH_ARGUMENTS with what the test is doing", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518391497", "createdAt": "2020-11-05T21:51:56Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientTest.java", "diffHunk": "@@ -1579,4 +1586,39 @@ public void analyzeSentimentZalgoText(HttpClient httpClient, TextAnalyticsServic\n                 })).verifyComplete(), SENTIMENT_OFFSET_INPUT\n         );\n     }\n+\n+    // Healthcare LRO\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.textanalytics.TestUtils#getTestParameters\")\n+    public void healthcareLROWithOptions(HttpClient httpClient, TextAnalyticsServiceVersion serviceVersion) {\n+        client = getTextAnalyticsAsyncClient(httpClient, serviceVersion);\n+        healthcareLRO((documents, options) -> {\n+            SyncPoller<TextAnalyticsOperationResult, PagedFlux<HealthcareTaskResult>>\n+                syncPoller = client.beginAnalyzeHealthcare(documents, options).getSyncPoller();\n+            syncPoller.waitForCompletion();\n+            PagedFlux<HealthcareTaskResult> healthcareEntitiesResultCollectionPagedFlux\n+                = syncPoller.getFinalResult();\n+            validateHealthcareTaskResult(\n+                options.isIncludeStatistics(),\n+                Arrays.asList(getExpectedHealthcareTaskResult()),\n+                healthcareEntitiesResultCollectionPagedFlux.toStream().collect(Collectors.toList()));\n+        });\n+    }\n+\n+    // Healthcare LRO - Cancellation\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzAzODI0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#pullrequestreview-524703824", "createdAt": "2020-11-05T21:56:37Z", "commit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo1NjozN1rOHuYPmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo1NjozN1rOHuYPmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5Mzc1Mg==", "bodyText": "again, 100. (just curious)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518393752", "createdAt": "2020-11-05T21:56:37Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "diffHunk": "@@ -596,6 +611,23 @@ void zalgoTextRunner(Consumer<String> testRunner, String text) {\n         testRunner.accept(\"o\u0335\u0308\u0307\u0312\u0303\u034b\u0307\u0305\u035b\u030b\u035b\u030e\u0341\u0351\u0304\u0310\u0302\u030e\u031b\u0357\u035d\u0333\u0318\u0318\u0355\u0354\u0355\u0327\u032d\u0327\u031f\u0319\u034e\u0348\u031e\u0322\u0354m\u0335\u035d\u0315\u0304\u030f\u0360\u034c\u0302\u0311\u033d\u034d\u0349\u0317g\u0335\u030b\u0352\u0344\u0360\u0313\u0312\u0308\u030d\u030c\u0343\u0305\u0351\u0312\u0343\u0305\u0305\u0352\u033f\u030f\u0301\u0357\u0300\u0307\u035b\u030f\u0300\u031b\u0344\u0300\u030a\u033e\u0340\u035d\u0314\u0349\u0322\u031e\u0321\u032f\u0320\u0324\u0323\u0355\u0322\u031f\u032b\u032b\u033c\u0330\u0353\u0345\u0321\u0328\u0326\u0321\u0356\u035c\u0327\u0323\u0323\u034e \" + text);\n     }\n \n+    // Healthcare LRO\n+    void healthcareLRO(BiConsumer<List<TextDocumentInput>, RecognizeHealthcareEntityOptions> testRunner) {\n+        testRunner.accept(\n+            asList(\n+                new TextDocumentInput(\"0\", HEALTHCARE_INPUTS.get(0)),\n+                new TextDocumentInput(\"1\", HEALTHCARE_INPUTS.get(1))),\n+            new RecognizeHealthcareEntityOptions().setIncludeStatistics(true));\n+    }\n+\n+    void cancelHealthcareLRO(Consumer<List<TextDocumentInput>> testRunner) {\n+        List<TextDocumentInput> documents = new ArrayList<>();\n+        for (int i = 0; i < 100; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzA0Njgw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#pullrequestreview-524704680", "createdAt": "2020-11-05T21:57:54Z", "commit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo1Nzo1NVrOHuYSQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo1Nzo1NVrOHuYSQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5NDQzMw==", "bodyText": "could u add a test for pagination?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518394433", "createdAt": "2020-11-05T21:57:55Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTest.java", "diffHunk": "@@ -1515,4 +1522,38 @@ public void analyzeSentimentZalgoText(HttpClient httpClient, TextAnalyticsServic\n             SENTIMENT_OFFSET_INPUT\n         );\n     }\n+\n+    // Healthcare LRO\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.textanalytics.TestUtils#getTestParameters\")\n+    public void healthcareLROWithOptions(HttpClient httpClient, TextAnalyticsServiceVersion serviceVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzA1Mjgy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#pullrequestreview-524705282", "createdAt": "2020-11-05T21:58:51Z", "commit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo1ODo1MVrOHuYT8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo1ODo1MVrOHuYT8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5NDg2Nw==", "bodyText": "it will be good to also add validation for no documents sent", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518394867", "createdAt": "2020-11-05T21:58:51Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTest.java", "diffHunk": "@@ -1515,4 +1522,38 @@ public void analyzeSentimentZalgoText(HttpClient httpClient, TextAnalyticsServic\n             SENTIMENT_OFFSET_INPUT\n         );\n     }\n+\n+    // Healthcare LRO\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.textanalytics.TestUtils#getTestParameters\")\n+    public void healthcareLROWithOptions(HttpClient httpClient, TextAnalyticsServiceVersion serviceVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ac3e30ec450d074ab4ef8a9a23e31f9a50b1703"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c03aa751db4ebf08f2f64251cc0832fc569ce4ba", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c03aa751db4ebf08f2f64251cc0832fc569ce4ba", "committedDate": "2020-11-05T22:49:24Z", "message": "transfer to laptop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "968acb98bda24788fd1bcbbe172665d1743a1268", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/968acb98bda24788fd1bcbbe172665d1743a1268", "committedDate": "2020-11-06T00:20:45Z", "message": "cancellation is working now"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzgxODI4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#pullrequestreview-524781828", "createdAt": "2020-11-06T00:47:47Z", "commit": {"oid": "968acb98bda24788fd1bcbbe172665d1743a1268"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b5dbc8f48620263b1afbee87ad4de4adb22245b", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1b5dbc8f48620263b1afbee87ad4de4adb22245b", "committedDate": "2020-11-06T03:37:11Z", "message": "address mari's most feedbacks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53e0d0e853a6233f613ad880281f3d5ff5732530", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/53e0d0e853a6233f613ad880281f3d5ff5732530", "committedDate": "2020-11-06T03:57:19Z", "message": "replace a wrong json file for async pagination test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1Mzg4NjI3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#pullrequestreview-525388627", "createdAt": "2020-11-06T18:18:20Z", "commit": {"oid": "53e0d0e853a6233f613ad880281f3d5ff5732530"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODoxODoyMVrOHu4nwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODozMzozNVrOHu5GyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyNDIyNA==", "bodyText": "why not assign it false here, rather than the check again on L101", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518924224", "createdAt": "2020-11-06T18:18:21Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeHealthcareAsyncClient.java", "diffHunk": "@@ -0,0 +1,323 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.ai.textanalytics.implementation.HealthcareTaskResultPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsErrorInformationPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsExceptionPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsOperationResultPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.Utility;\n+import com.azure.ai.textanalytics.implementation.models.HealthcareJobState;\n+import com.azure.ai.textanalytics.implementation.models.HealthcareResult;\n+import com.azure.ai.textanalytics.implementation.models.MultiLanguageBatchInput;\n+import com.azure.ai.textanalytics.implementation.models.StringIndexType;\n+import com.azure.ai.textanalytics.implementation.models.TextAnalyticsError;\n+import com.azure.ai.textanalytics.models.HealthcareTaskResult;\n+import com.azure.ai.textanalytics.models.RecognizeHealthcareEntityOptions;\n+import com.azure.ai.textanalytics.models.TextAnalyticsErrorCode;\n+import com.azure.ai.textanalytics.models.TextAnalyticsErrorInformation;\n+import com.azure.ai.textanalytics.models.TextAnalyticsException;\n+import com.azure.ai.textanalytics.models.TextAnalyticsOperationResult;\n+import com.azure.ai.textanalytics.models.TextDocumentInput;\n+import com.azure.ai.textanalytics.util.RecognizeHealthcareEntitiesResultCollection;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.PagedResponseBase;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.azure.ai.textanalytics.TextAnalyticsAsyncClient.COGNITIVE_TRACING_NAMESPACE_VALUE;\n+import static com.azure.ai.textanalytics.implementation.Utility.DEFAULT_POLL_DURATION;\n+import static com.azure.ai.textanalytics.implementation.Utility.inputDocumentsValidation;\n+import static com.azure.ai.textanalytics.implementation.Utility.parseModelId;\n+import static com.azure.ai.textanalytics.implementation.Utility.parseNextLink;\n+import static com.azure.ai.textanalytics.implementation.Utility.toJobState;\n+import static com.azure.ai.textanalytics.implementation.Utility.toMultiLanguageInput;\n+import static com.azure.ai.textanalytics.implementation.Utility.toRecognizeHealthcareEntitiesResultCollection;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextAnalyticsError;\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+class AnalyzeHealthcareAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(AnalyzeHealthcareAsyncClient.class);\n+    private final TextAnalyticsClientImpl service;\n+\n+    /**\n+     * Create an {@link AnalyzeHealthcareAsyncClient} that sends requests to the Text Analytics services's healthcare\n+     * LRO endpoint.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     */\n+    AnalyzeHealthcareAsyncClient(TextAnalyticsClientImpl service) {\n+        this.service = service;\n+    }\n+\n+    PollerFlux<TextAnalyticsOperationResult, PagedFlux<HealthcareTaskResult>> beginAnalyzeHealthcare(\n+        Iterable<TextDocumentInput> documents, RecognizeHealthcareEntityOptions options, Context context) {\n+        try {\n+            inputDocumentsValidation(documents);\n+            String modelVersion = null;\n+            if (options != null) {\n+                modelVersion = options.getModelVersion();\n+            }\n+            final Boolean finalIncludeStatistics = options == null ? null : options.isIncludeStatistics();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e0d0e853a6233f613ad880281f3d5ff5732530"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyNDgwMA==", "bodyText": "Do users not have a way to provide the polling interval, by design?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518924800", "createdAt": "2020-11-06T18:19:26Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeHealthcareAsyncClient.java", "diffHunk": "@@ -0,0 +1,323 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.ai.textanalytics.implementation.HealthcareTaskResultPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsErrorInformationPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsExceptionPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsOperationResultPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.Utility;\n+import com.azure.ai.textanalytics.implementation.models.HealthcareJobState;\n+import com.azure.ai.textanalytics.implementation.models.HealthcareResult;\n+import com.azure.ai.textanalytics.implementation.models.MultiLanguageBatchInput;\n+import com.azure.ai.textanalytics.implementation.models.StringIndexType;\n+import com.azure.ai.textanalytics.implementation.models.TextAnalyticsError;\n+import com.azure.ai.textanalytics.models.HealthcareTaskResult;\n+import com.azure.ai.textanalytics.models.RecognizeHealthcareEntityOptions;\n+import com.azure.ai.textanalytics.models.TextAnalyticsErrorCode;\n+import com.azure.ai.textanalytics.models.TextAnalyticsErrorInformation;\n+import com.azure.ai.textanalytics.models.TextAnalyticsException;\n+import com.azure.ai.textanalytics.models.TextAnalyticsOperationResult;\n+import com.azure.ai.textanalytics.models.TextDocumentInput;\n+import com.azure.ai.textanalytics.util.RecognizeHealthcareEntitiesResultCollection;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.PagedResponseBase;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.azure.ai.textanalytics.TextAnalyticsAsyncClient.COGNITIVE_TRACING_NAMESPACE_VALUE;\n+import static com.azure.ai.textanalytics.implementation.Utility.DEFAULT_POLL_DURATION;\n+import static com.azure.ai.textanalytics.implementation.Utility.inputDocumentsValidation;\n+import static com.azure.ai.textanalytics.implementation.Utility.parseModelId;\n+import static com.azure.ai.textanalytics.implementation.Utility.parseNextLink;\n+import static com.azure.ai.textanalytics.implementation.Utility.toJobState;\n+import static com.azure.ai.textanalytics.implementation.Utility.toMultiLanguageInput;\n+import static com.azure.ai.textanalytics.implementation.Utility.toRecognizeHealthcareEntitiesResultCollection;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextAnalyticsError;\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+class AnalyzeHealthcareAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(AnalyzeHealthcareAsyncClient.class);\n+    private final TextAnalyticsClientImpl service;\n+\n+    /**\n+     * Create an {@link AnalyzeHealthcareAsyncClient} that sends requests to the Text Analytics services's healthcare\n+     * LRO endpoint.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     */\n+    AnalyzeHealthcareAsyncClient(TextAnalyticsClientImpl service) {\n+        this.service = service;\n+    }\n+\n+    PollerFlux<TextAnalyticsOperationResult, PagedFlux<HealthcareTaskResult>> beginAnalyzeHealthcare(\n+        Iterable<TextDocumentInput> documents, RecognizeHealthcareEntityOptions options, Context context) {\n+        try {\n+            inputDocumentsValidation(documents);\n+            String modelVersion = null;\n+            if (options != null) {\n+                modelVersion = options.getModelVersion();\n+            }\n+            final Boolean finalIncludeStatistics = options == null ? null : options.isIncludeStatistics();\n+            return new PollerFlux<>(\n+                DEFAULT_POLL_DURATION,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e0d0e853a6233f613ad880281f3d5ff5732530"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyNjcwNA==", "bodyText": "Is this top and skip value not exposed to the user?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518926704", "createdAt": "2020-11-06T18:22:58Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeHealthcareAsyncClient.java", "diffHunk": "@@ -0,0 +1,323 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.ai.textanalytics.implementation.HealthcareTaskResultPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsErrorInformationPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsExceptionPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsOperationResultPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.Utility;\n+import com.azure.ai.textanalytics.implementation.models.HealthcareJobState;\n+import com.azure.ai.textanalytics.implementation.models.HealthcareResult;\n+import com.azure.ai.textanalytics.implementation.models.MultiLanguageBatchInput;\n+import com.azure.ai.textanalytics.implementation.models.StringIndexType;\n+import com.azure.ai.textanalytics.implementation.models.TextAnalyticsError;\n+import com.azure.ai.textanalytics.models.HealthcareTaskResult;\n+import com.azure.ai.textanalytics.models.RecognizeHealthcareEntityOptions;\n+import com.azure.ai.textanalytics.models.TextAnalyticsErrorCode;\n+import com.azure.ai.textanalytics.models.TextAnalyticsErrorInformation;\n+import com.azure.ai.textanalytics.models.TextAnalyticsException;\n+import com.azure.ai.textanalytics.models.TextAnalyticsOperationResult;\n+import com.azure.ai.textanalytics.models.TextDocumentInput;\n+import com.azure.ai.textanalytics.util.RecognizeHealthcareEntitiesResultCollection;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.PagedResponseBase;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.azure.ai.textanalytics.TextAnalyticsAsyncClient.COGNITIVE_TRACING_NAMESPACE_VALUE;\n+import static com.azure.ai.textanalytics.implementation.Utility.DEFAULT_POLL_DURATION;\n+import static com.azure.ai.textanalytics.implementation.Utility.inputDocumentsValidation;\n+import static com.azure.ai.textanalytics.implementation.Utility.parseModelId;\n+import static com.azure.ai.textanalytics.implementation.Utility.parseNextLink;\n+import static com.azure.ai.textanalytics.implementation.Utility.toJobState;\n+import static com.azure.ai.textanalytics.implementation.Utility.toMultiLanguageInput;\n+import static com.azure.ai.textanalytics.implementation.Utility.toRecognizeHealthcareEntitiesResultCollection;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextAnalyticsError;\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+class AnalyzeHealthcareAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(AnalyzeHealthcareAsyncClient.class);\n+    private final TextAnalyticsClientImpl service;\n+\n+    /**\n+     * Create an {@link AnalyzeHealthcareAsyncClient} that sends requests to the Text Analytics services's healthcare\n+     * LRO endpoint.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     */\n+    AnalyzeHealthcareAsyncClient(TextAnalyticsClientImpl service) {\n+        this.service = service;\n+    }\n+\n+    PollerFlux<TextAnalyticsOperationResult, PagedFlux<HealthcareTaskResult>> beginAnalyzeHealthcare(\n+        Iterable<TextDocumentInput> documents, RecognizeHealthcareEntityOptions options, Context context) {\n+        try {\n+            inputDocumentsValidation(documents);\n+            String modelVersion = null;\n+            if (options != null) {\n+                modelVersion = options.getModelVersion();\n+            }\n+            final Boolean finalIncludeStatistics = options == null ? null : options.isIncludeStatistics();\n+            return new PollerFlux<>(\n+                DEFAULT_POLL_DURATION,\n+                activationOperation(service.healthWithResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(toMultiLanguageInput(documents)),\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE),\n+                    modelVersion,\n+                    StringIndexType.UTF16CODE_UNIT) // Currently StringIndexType is not explored, we use it internally\n+                    .map(healthResponse -> {\n+                        final TextAnalyticsOperationResult textAnalyticsOperationResult =\n+                            new TextAnalyticsOperationResult();\n+                        TextAnalyticsOperationResultPropertiesHelper.setResultId(textAnalyticsOperationResult,\n+                            parseModelId(healthResponse.getDeserializedHeaders().getOperationLocation()));\n+                        return textAnalyticsOperationResult;\n+                    })),\n+                pollingOperation(jobId -> service.healthStatusWithResponseAsync(jobId, context, null, null,\n+                    finalIncludeStatistics)),\n+                (activationResponse, pollingContext) ->\n+                    monoError(logger, new RuntimeException(\"Use the `beginCancelHealthcareJob` to cancel the job\")),\n+                fetchingOperation(resultId -> Mono.just(getHealthcareFluxPage(resultId,\n+                    finalIncludeStatistics == null ? false : finalIncludeStatistics, context)))\n+            );\n+        } catch (RuntimeException ex) {\n+            return PollerFlux.error(ex);\n+        }\n+    }\n+\n+    PollerFlux<TextAnalyticsOperationResult, PagedIterable<HealthcareTaskResult>> beginAnalyzeHealthcarePagedIterable(\n+        Iterable<TextDocumentInput> documents, RecognizeHealthcareEntityOptions options, Context context) {\n+        try {\n+            inputDocumentsValidation(documents);\n+            String modelVersion = null;\n+            if (options != null) {\n+                modelVersion = options.getModelVersion();\n+            }\n+            final Boolean finalIncludeStatistics = options == null ? null : options.isIncludeStatistics();\n+            return new PollerFlux<>(\n+                DEFAULT_POLL_DURATION,\n+                activationOperation(service.healthWithResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(toMultiLanguageInput(documents)),\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE),\n+                    modelVersion,\n+                    StringIndexType.UTF16CODE_UNIT)  // Currently StringIndexType is not explored, we use it internally\n+                    .map(healthResponse -> {\n+                        final TextAnalyticsOperationResult textAnalyticsOperationResult =\n+                            new TextAnalyticsOperationResult();\n+                        TextAnalyticsOperationResultPropertiesHelper.setResultId(textAnalyticsOperationResult,\n+                            parseModelId(healthResponse.getDeserializedHeaders().getOperationLocation()));\n+                        return textAnalyticsOperationResult;\n+                    })),\n+                pollingOperation(jobId -> service.healthStatusWithResponseAsync(jobId, context, null, null,\n+                    finalIncludeStatistics)),\n+                (activationResponse, pollingContext) ->\n+                    monoError(logger, new RuntimeException(\"Use the `beginCancelHealthcareJob` to cancel the job\")),\n+                fetchingOperationIterable(resultId -> Mono.just(new PagedIterable<>(getHealthcareFluxPage(resultId,\n+                    finalIncludeStatistics == null ? false : finalIncludeStatistics, context))))\n+            );\n+        } catch (RuntimeException ex) {\n+            return PollerFlux.error(ex);\n+        }\n+    }\n+\n+    PagedFlux<HealthcareTaskResult> getHealthcareFluxPage(UUID jobID, boolean showStats, Context context) {\n+        return new PagedFlux<>(\n+            () -> getPage(null, jobID, showStats, context),\n+            continuationToken -> getPage(continuationToken, jobID, showStats, context));\n+    }\n+\n+    Mono<PagedResponse<HealthcareTaskResult>> getPage(String continuationToken, UUID jobID,\n+        boolean showStats, Context context) {\n+        try {\n+            if (continuationToken != null) {\n+                final Map<String, Integer> continuationTokenMap = parseNextLink(continuationToken);\n+                final Integer topValue = continuationTokenMap.getOrDefault(\"$top\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e0d0e853a6233f613ad880281f3d5ff5732530"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkzMTkxOA==", "bodyText": "Did we agree on calling this a jobId ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518931918", "createdAt": "2020-11-06T18:33:06Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeHealthcareAsyncClient.java", "diffHunk": "@@ -0,0 +1,323 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.ai.textanalytics.implementation.HealthcareTaskResultPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsErrorInformationPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsExceptionPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsOperationResultPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.Utility;\n+import com.azure.ai.textanalytics.implementation.models.HealthcareJobState;\n+import com.azure.ai.textanalytics.implementation.models.HealthcareResult;\n+import com.azure.ai.textanalytics.implementation.models.MultiLanguageBatchInput;\n+import com.azure.ai.textanalytics.implementation.models.StringIndexType;\n+import com.azure.ai.textanalytics.implementation.models.TextAnalyticsError;\n+import com.azure.ai.textanalytics.models.HealthcareTaskResult;\n+import com.azure.ai.textanalytics.models.RecognizeHealthcareEntityOptions;\n+import com.azure.ai.textanalytics.models.TextAnalyticsErrorCode;\n+import com.azure.ai.textanalytics.models.TextAnalyticsErrorInformation;\n+import com.azure.ai.textanalytics.models.TextAnalyticsException;\n+import com.azure.ai.textanalytics.models.TextAnalyticsOperationResult;\n+import com.azure.ai.textanalytics.models.TextDocumentInput;\n+import com.azure.ai.textanalytics.util.RecognizeHealthcareEntitiesResultCollection;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.PagedResponseBase;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.azure.ai.textanalytics.TextAnalyticsAsyncClient.COGNITIVE_TRACING_NAMESPACE_VALUE;\n+import static com.azure.ai.textanalytics.implementation.Utility.DEFAULT_POLL_DURATION;\n+import static com.azure.ai.textanalytics.implementation.Utility.inputDocumentsValidation;\n+import static com.azure.ai.textanalytics.implementation.Utility.parseModelId;\n+import static com.azure.ai.textanalytics.implementation.Utility.parseNextLink;\n+import static com.azure.ai.textanalytics.implementation.Utility.toJobState;\n+import static com.azure.ai.textanalytics.implementation.Utility.toMultiLanguageInput;\n+import static com.azure.ai.textanalytics.implementation.Utility.toRecognizeHealthcareEntitiesResultCollection;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextAnalyticsError;\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+class AnalyzeHealthcareAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(AnalyzeHealthcareAsyncClient.class);\n+    private final TextAnalyticsClientImpl service;\n+\n+    /**\n+     * Create an {@link AnalyzeHealthcareAsyncClient} that sends requests to the Text Analytics services's healthcare\n+     * LRO endpoint.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     */\n+    AnalyzeHealthcareAsyncClient(TextAnalyticsClientImpl service) {\n+        this.service = service;\n+    }\n+\n+    PollerFlux<TextAnalyticsOperationResult, PagedFlux<HealthcareTaskResult>> beginAnalyzeHealthcare(\n+        Iterable<TextDocumentInput> documents, RecognizeHealthcareEntityOptions options, Context context) {\n+        try {\n+            inputDocumentsValidation(documents);\n+            String modelVersion = null;\n+            if (options != null) {\n+                modelVersion = options.getModelVersion();\n+            }\n+            final Boolean finalIncludeStatistics = options == null ? null : options.isIncludeStatistics();\n+            return new PollerFlux<>(\n+                DEFAULT_POLL_DURATION,\n+                activationOperation(service.healthWithResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(toMultiLanguageInput(documents)),\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE),\n+                    modelVersion,\n+                    StringIndexType.UTF16CODE_UNIT) // Currently StringIndexType is not explored, we use it internally\n+                    .map(healthResponse -> {\n+                        final TextAnalyticsOperationResult textAnalyticsOperationResult =\n+                            new TextAnalyticsOperationResult();\n+                        TextAnalyticsOperationResultPropertiesHelper.setResultId(textAnalyticsOperationResult,\n+                            parseModelId(healthResponse.getDeserializedHeaders().getOperationLocation()));\n+                        return textAnalyticsOperationResult;\n+                    })),\n+                pollingOperation(jobId -> service.healthStatusWithResponseAsync(jobId, context, null, null,\n+                    finalIncludeStatistics)),\n+                (activationResponse, pollingContext) ->\n+                    monoError(logger, new RuntimeException(\"Use the `beginCancelHealthcareJob` to cancel the job\")),\n+                fetchingOperation(resultId -> Mono.just(getHealthcareFluxPage(resultId,\n+                    finalIncludeStatistics == null ? false : finalIncludeStatistics, context)))\n+            );\n+        } catch (RuntimeException ex) {\n+            return PollerFlux.error(ex);\n+        }\n+    }\n+\n+    PollerFlux<TextAnalyticsOperationResult, PagedIterable<HealthcareTaskResult>> beginAnalyzeHealthcarePagedIterable(\n+        Iterable<TextDocumentInput> documents, RecognizeHealthcareEntityOptions options, Context context) {\n+        try {\n+            inputDocumentsValidation(documents);\n+            String modelVersion = null;\n+            if (options != null) {\n+                modelVersion = options.getModelVersion();\n+            }\n+            final Boolean finalIncludeStatistics = options == null ? null : options.isIncludeStatistics();\n+            return new PollerFlux<>(\n+                DEFAULT_POLL_DURATION,\n+                activationOperation(service.healthWithResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(toMultiLanguageInput(documents)),\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE),\n+                    modelVersion,\n+                    StringIndexType.UTF16CODE_UNIT)  // Currently StringIndexType is not explored, we use it internally\n+                    .map(healthResponse -> {\n+                        final TextAnalyticsOperationResult textAnalyticsOperationResult =\n+                            new TextAnalyticsOperationResult();\n+                        TextAnalyticsOperationResultPropertiesHelper.setResultId(textAnalyticsOperationResult,\n+                            parseModelId(healthResponse.getDeserializedHeaders().getOperationLocation()));\n+                        return textAnalyticsOperationResult;\n+                    })),\n+                pollingOperation(jobId -> service.healthStatusWithResponseAsync(jobId, context, null, null,\n+                    finalIncludeStatistics)),\n+                (activationResponse, pollingContext) ->\n+                    monoError(logger, new RuntimeException(\"Use the `beginCancelHealthcareJob` to cancel the job\")),\n+                fetchingOperationIterable(resultId -> Mono.just(new PagedIterable<>(getHealthcareFluxPage(resultId,\n+                    finalIncludeStatistics == null ? false : finalIncludeStatistics, context))))\n+            );\n+        } catch (RuntimeException ex) {\n+            return PollerFlux.error(ex);\n+        }\n+    }\n+\n+    PagedFlux<HealthcareTaskResult> getHealthcareFluxPage(UUID jobID, boolean showStats, Context context) {\n+        return new PagedFlux<>(\n+            () -> getPage(null, jobID, showStats, context),\n+            continuationToken -> getPage(continuationToken, jobID, showStats, context));\n+    }\n+\n+    Mono<PagedResponse<HealthcareTaskResult>> getPage(String continuationToken, UUID jobID,\n+        boolean showStats, Context context) {\n+        try {\n+            if (continuationToken != null) {\n+                final Map<String, Integer> continuationTokenMap = parseNextLink(continuationToken);\n+                final Integer topValue = continuationTokenMap.getOrDefault(\"$top\", null);\n+                final Integer skipValue = continuationTokenMap.getOrDefault(\"$skip\", null);\n+                return service.healthStatusWithResponseAsync(jobID, context, topValue, skipValue, showStats)\n+                    .map(this::toTextAnalyticsPagedResponse)\n+                    .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n+            } else {\n+                return service.healthStatusWithResponseAsync(jobID, context, null, null, showStats)\n+                    .map(this::toTextAnalyticsPagedResponse)\n+                    .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n+            }\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    private PagedResponse<HealthcareTaskResult> toTextAnalyticsPagedResponse(\n+        Response<HealthcareJobState> response) {\n+        final HealthcareJobState healthcareJobState = response.getValue();\n+        final HealthcareResult healthcareResult = healthcareJobState.getResults();\n+        final RecognizeHealthcareEntitiesResultCollection recognizeHealthcareEntitiesResults\n+            = toRecognizeHealthcareEntitiesResultCollection(healthcareResult);\n+        final List<TextAnalyticsError> errors = healthcareJobState.getErrors();\n+\n+        final HealthcareTaskResult healthcareTaskResult = new HealthcareTaskResult(\n+            // TODO: change back to UUID after service support it.\n+            healthcareJobState.getJobId().toString(),\n+            healthcareJobState.getCreatedDateTime(),\n+            healthcareJobState.getLastUpdateDateTime(),\n+            toJobState(healthcareJobState.getStatus()),\n+            healthcareJobState.getDisplayName(),\n+            healthcareJobState.getExpirationDateTime());\n+        HealthcareTaskResultPropertiesHelper.setResult(healthcareTaskResult, recognizeHealthcareEntitiesResults);\n+        if (errors != null) {\n+            HealthcareTaskResultPropertiesHelper.setErrors(healthcareTaskResult,\n+                errors.stream().map(error -> toTextAnalyticsError(error)).collect(Collectors.toList()));\n+        }\n+\n+        return new PagedResponseBase<Void, HealthcareTaskResult>(\n+            response.getRequest(),\n+            response.getStatusCode(),\n+            response.getHeaders(),\n+            Arrays.asList(healthcareTaskResult),\n+            healthcareJobState.getNextLink(),\n+            null);\n+    }\n+\n+    PollerFlux<TextAnalyticsOperationResult, Void> beginCancelAnalyzeHealthcare(UUID jobId, Context context) {\n+        try {\n+            Objects.requireNonNull(jobId, \"'jobId' is required and cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e0d0e853a6233f613ad880281f3d5ff5732530"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkzMjE2OQ==", "bodyText": "We should expect a string from the user and internally convert it to a UUID.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17234#discussion_r518932169", "createdAt": "2020-11-06T18:33:35Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeHealthcareAsyncClient.java", "diffHunk": "@@ -0,0 +1,323 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.ai.textanalytics.implementation.HealthcareTaskResultPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsErrorInformationPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsExceptionPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsOperationResultPropertiesHelper;\n+import com.azure.ai.textanalytics.implementation.Utility;\n+import com.azure.ai.textanalytics.implementation.models.HealthcareJobState;\n+import com.azure.ai.textanalytics.implementation.models.HealthcareResult;\n+import com.azure.ai.textanalytics.implementation.models.MultiLanguageBatchInput;\n+import com.azure.ai.textanalytics.implementation.models.StringIndexType;\n+import com.azure.ai.textanalytics.implementation.models.TextAnalyticsError;\n+import com.azure.ai.textanalytics.models.HealthcareTaskResult;\n+import com.azure.ai.textanalytics.models.RecognizeHealthcareEntityOptions;\n+import com.azure.ai.textanalytics.models.TextAnalyticsErrorCode;\n+import com.azure.ai.textanalytics.models.TextAnalyticsErrorInformation;\n+import com.azure.ai.textanalytics.models.TextAnalyticsException;\n+import com.azure.ai.textanalytics.models.TextAnalyticsOperationResult;\n+import com.azure.ai.textanalytics.models.TextDocumentInput;\n+import com.azure.ai.textanalytics.util.RecognizeHealthcareEntitiesResultCollection;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.PagedResponseBase;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollResponse;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.polling.PollingContext;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.azure.ai.textanalytics.TextAnalyticsAsyncClient.COGNITIVE_TRACING_NAMESPACE_VALUE;\n+import static com.azure.ai.textanalytics.implementation.Utility.DEFAULT_POLL_DURATION;\n+import static com.azure.ai.textanalytics.implementation.Utility.inputDocumentsValidation;\n+import static com.azure.ai.textanalytics.implementation.Utility.parseModelId;\n+import static com.azure.ai.textanalytics.implementation.Utility.parseNextLink;\n+import static com.azure.ai.textanalytics.implementation.Utility.toJobState;\n+import static com.azure.ai.textanalytics.implementation.Utility.toMultiLanguageInput;\n+import static com.azure.ai.textanalytics.implementation.Utility.toRecognizeHealthcareEntitiesResultCollection;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextAnalyticsError;\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+class AnalyzeHealthcareAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(AnalyzeHealthcareAsyncClient.class);\n+    private final TextAnalyticsClientImpl service;\n+\n+    /**\n+     * Create an {@link AnalyzeHealthcareAsyncClient} that sends requests to the Text Analytics services's healthcare\n+     * LRO endpoint.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     */\n+    AnalyzeHealthcareAsyncClient(TextAnalyticsClientImpl service) {\n+        this.service = service;\n+    }\n+\n+    PollerFlux<TextAnalyticsOperationResult, PagedFlux<HealthcareTaskResult>> beginAnalyzeHealthcare(\n+        Iterable<TextDocumentInput> documents, RecognizeHealthcareEntityOptions options, Context context) {\n+        try {\n+            inputDocumentsValidation(documents);\n+            String modelVersion = null;\n+            if (options != null) {\n+                modelVersion = options.getModelVersion();\n+            }\n+            final Boolean finalIncludeStatistics = options == null ? null : options.isIncludeStatistics();\n+            return new PollerFlux<>(\n+                DEFAULT_POLL_DURATION,\n+                activationOperation(service.healthWithResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(toMultiLanguageInput(documents)),\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE),\n+                    modelVersion,\n+                    StringIndexType.UTF16CODE_UNIT) // Currently StringIndexType is not explored, we use it internally\n+                    .map(healthResponse -> {\n+                        final TextAnalyticsOperationResult textAnalyticsOperationResult =\n+                            new TextAnalyticsOperationResult();\n+                        TextAnalyticsOperationResultPropertiesHelper.setResultId(textAnalyticsOperationResult,\n+                            parseModelId(healthResponse.getDeserializedHeaders().getOperationLocation()));\n+                        return textAnalyticsOperationResult;\n+                    })),\n+                pollingOperation(jobId -> service.healthStatusWithResponseAsync(jobId, context, null, null,\n+                    finalIncludeStatistics)),\n+                (activationResponse, pollingContext) ->\n+                    monoError(logger, new RuntimeException(\"Use the `beginCancelHealthcareJob` to cancel the job\")),\n+                fetchingOperation(resultId -> Mono.just(getHealthcareFluxPage(resultId,\n+                    finalIncludeStatistics == null ? false : finalIncludeStatistics, context)))\n+            );\n+        } catch (RuntimeException ex) {\n+            return PollerFlux.error(ex);\n+        }\n+    }\n+\n+    PollerFlux<TextAnalyticsOperationResult, PagedIterable<HealthcareTaskResult>> beginAnalyzeHealthcarePagedIterable(\n+        Iterable<TextDocumentInput> documents, RecognizeHealthcareEntityOptions options, Context context) {\n+        try {\n+            inputDocumentsValidation(documents);\n+            String modelVersion = null;\n+            if (options != null) {\n+                modelVersion = options.getModelVersion();\n+            }\n+            final Boolean finalIncludeStatistics = options == null ? null : options.isIncludeStatistics();\n+            return new PollerFlux<>(\n+                DEFAULT_POLL_DURATION,\n+                activationOperation(service.healthWithResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(toMultiLanguageInput(documents)),\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE),\n+                    modelVersion,\n+                    StringIndexType.UTF16CODE_UNIT)  // Currently StringIndexType is not explored, we use it internally\n+                    .map(healthResponse -> {\n+                        final TextAnalyticsOperationResult textAnalyticsOperationResult =\n+                            new TextAnalyticsOperationResult();\n+                        TextAnalyticsOperationResultPropertiesHelper.setResultId(textAnalyticsOperationResult,\n+                            parseModelId(healthResponse.getDeserializedHeaders().getOperationLocation()));\n+                        return textAnalyticsOperationResult;\n+                    })),\n+                pollingOperation(jobId -> service.healthStatusWithResponseAsync(jobId, context, null, null,\n+                    finalIncludeStatistics)),\n+                (activationResponse, pollingContext) ->\n+                    monoError(logger, new RuntimeException(\"Use the `beginCancelHealthcareJob` to cancel the job\")),\n+                fetchingOperationIterable(resultId -> Mono.just(new PagedIterable<>(getHealthcareFluxPage(resultId,\n+                    finalIncludeStatistics == null ? false : finalIncludeStatistics, context))))\n+            );\n+        } catch (RuntimeException ex) {\n+            return PollerFlux.error(ex);\n+        }\n+    }\n+\n+    PagedFlux<HealthcareTaskResult> getHealthcareFluxPage(UUID jobID, boolean showStats, Context context) {\n+        return new PagedFlux<>(\n+            () -> getPage(null, jobID, showStats, context),\n+            continuationToken -> getPage(continuationToken, jobID, showStats, context));\n+    }\n+\n+    Mono<PagedResponse<HealthcareTaskResult>> getPage(String continuationToken, UUID jobID,\n+        boolean showStats, Context context) {\n+        try {\n+            if (continuationToken != null) {\n+                final Map<String, Integer> continuationTokenMap = parseNextLink(continuationToken);\n+                final Integer topValue = continuationTokenMap.getOrDefault(\"$top\", null);\n+                final Integer skipValue = continuationTokenMap.getOrDefault(\"$skip\", null);\n+                return service.healthStatusWithResponseAsync(jobID, context, topValue, skipValue, showStats)\n+                    .map(this::toTextAnalyticsPagedResponse)\n+                    .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n+            } else {\n+                return service.healthStatusWithResponseAsync(jobID, context, null, null, showStats)\n+                    .map(this::toTextAnalyticsPagedResponse)\n+                    .onErrorMap(Utility::mapToHttpResponseExceptionIfExist);\n+            }\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    private PagedResponse<HealthcareTaskResult> toTextAnalyticsPagedResponse(\n+        Response<HealthcareJobState> response) {\n+        final HealthcareJobState healthcareJobState = response.getValue();\n+        final HealthcareResult healthcareResult = healthcareJobState.getResults();\n+        final RecognizeHealthcareEntitiesResultCollection recognizeHealthcareEntitiesResults\n+            = toRecognizeHealthcareEntitiesResultCollection(healthcareResult);\n+        final List<TextAnalyticsError> errors = healthcareJobState.getErrors();\n+\n+        final HealthcareTaskResult healthcareTaskResult = new HealthcareTaskResult(\n+            // TODO: change back to UUID after service support it.\n+            healthcareJobState.getJobId().toString(),\n+            healthcareJobState.getCreatedDateTime(),\n+            healthcareJobState.getLastUpdateDateTime(),\n+            toJobState(healthcareJobState.getStatus()),\n+            healthcareJobState.getDisplayName(),\n+            healthcareJobState.getExpirationDateTime());\n+        HealthcareTaskResultPropertiesHelper.setResult(healthcareTaskResult, recognizeHealthcareEntitiesResults);\n+        if (errors != null) {\n+            HealthcareTaskResultPropertiesHelper.setErrors(healthcareTaskResult,\n+                errors.stream().map(error -> toTextAnalyticsError(error)).collect(Collectors.toList()));\n+        }\n+\n+        return new PagedResponseBase<Void, HealthcareTaskResult>(\n+            response.getRequest(),\n+            response.getStatusCode(),\n+            response.getHeaders(),\n+            Arrays.asList(healthcareTaskResult),\n+            healthcareJobState.getNextLink(),\n+            null);\n+    }\n+\n+    PollerFlux<TextAnalyticsOperationResult, Void> beginCancelAnalyzeHealthcare(UUID jobId, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e0d0e853a6233f613ad880281f3d5ff5732530"}, "originalPosition": 200}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 276, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}