{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMjk5Mzcw", "number": 8083, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTowNTozMVrODeki9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTowNTozMVrODeki9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzgyNjQ1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/RetryAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTowNTozMVrOFnx--w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTowNjoyM1rOFnyAmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI1NzcyMw==", "bodyText": "Recursion should be avoided as much as we can because of obvious reasons.\nI believe this can easily be converted to a while loop.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8083#discussion_r377257723", "createdAt": "2020-02-10T19:05:31Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/RetryAnalyzer.java", "diffHunk": "@@ -22,11 +24,41 @@ public RetryAnalyzer() {\n     @Override\n     public boolean retryMethod(ITestResult result) {\n         try {\n-            TimeUnit.SECONDS.sleep(waitBetweenRetriesInSeconds);\n+\n+            int timeToWaitBeforeRetryInSeconds = getTimeToWaitInSeconds(result);\n+            TimeUnit.SECONDS.sleep(timeToWaitBeforeRetryInSeconds);\n         } catch (InterruptedException e) {\n             return false;\n         }\n \n         return true;\n     }\n+\n+    private int getTimeToWaitInSeconds(ITestResult result) {\n+        Throwable throwable = result.getThrowable();\n+        CosmosClientException cosmosClientException = extractCosmosClientExceptionIfAny(throwable);\n+\n+        if (cosmosClientException == null) {\n+            return  waitBetweenRetriesInSeconds;\n+        }\n+\n+        long retryAfterInMilliseconds = cosmosClientException.getRetryAfterInMilliseconds();\n+        if (retryAfterInMilliseconds <= 0) {\n+            return waitBetweenRetriesInSeconds;\n+        }\n+\n+        return Math.max(Math.toIntExact(Duration.ofMillis(retryAfterInMilliseconds).getSeconds()), waitBetweenRetriesInSeconds);\n+    }\n+\n+    private CosmosClientException extractCosmosClientExceptionIfAny(Throwable t) {\n+        if (t == null) {\n+            return null;\n+        }\n+\n+        if (t instanceof CosmosClientException) {\n+            return (CosmosClientException) t;\n+        }\n+\n+        return extractCosmosClientExceptionIfAny(t.getCause());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb9c5599c08c63c89efdd5a2accfe425f757a51"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI1ODEzNw==", "bodyText": "why?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8083#discussion_r377258137", "createdAt": "2020-02-10T19:06:23Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/RetryAnalyzer.java", "diffHunk": "@@ -22,11 +24,41 @@ public RetryAnalyzer() {\n     @Override\n     public boolean retryMethod(ITestResult result) {\n         try {\n-            TimeUnit.SECONDS.sleep(waitBetweenRetriesInSeconds);\n+\n+            int timeToWaitBeforeRetryInSeconds = getTimeToWaitInSeconds(result);\n+            TimeUnit.SECONDS.sleep(timeToWaitBeforeRetryInSeconds);\n         } catch (InterruptedException e) {\n             return false;\n         }\n \n         return true;\n     }\n+\n+    private int getTimeToWaitInSeconds(ITestResult result) {\n+        Throwable throwable = result.getThrowable();\n+        CosmosClientException cosmosClientException = extractCosmosClientExceptionIfAny(throwable);\n+\n+        if (cosmosClientException == null) {\n+            return  waitBetweenRetriesInSeconds;\n+        }\n+\n+        long retryAfterInMilliseconds = cosmosClientException.getRetryAfterInMilliseconds();\n+        if (retryAfterInMilliseconds <= 0) {\n+            return waitBetweenRetriesInSeconds;\n+        }\n+\n+        return Math.max(Math.toIntExact(Duration.ofMillis(retryAfterInMilliseconds).getSeconds()), waitBetweenRetriesInSeconds);\n+    }\n+\n+    private CosmosClientException extractCosmosClientExceptionIfAny(Throwable t) {\n+        if (t == null) {\n+            return null;\n+        }\n+\n+        if (t instanceof CosmosClientException) {\n+            return (CosmosClientException) t;\n+        }\n+\n+        return extractCosmosClientExceptionIfAny(t.getCause());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI1NzcyMw=="}, "originalCommit": {"oid": "cbb9c5599c08c63c89efdd5a2accfe425f757a51"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3169, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}