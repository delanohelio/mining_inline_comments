{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMDkwMTky", "number": 12512, "title": "Testing for Tables Autorest Code", "bodyText": "The goal of this PR is to create tests for the Autorest code on the Tables Service. These test the API calls to insure they all function correctly.\nA test file was create for the test in addition to fixes to Autorest code related to authentication since Tables auth is different from other storage services.", "createdAt": "2020-06-25T15:17:55Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512", "merged": true, "mergeCommit": {"oid": "86afb162836cadde5d991b2a7efe09c95abcf521"}, "closed": true, "closedAt": "2020-07-07T19:14:07Z", "author": {"login": "eboyd23"}, "timelineItems": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuyxDjAFqTQzNzczNDAwNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyqS4gAH2gAyNDQwMDkwMTkyOjc2N2JmZGYxOTY4ZDNmOTEyMjI0MWVmNWEwYWM5NzMxMDJlZDJhYWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NzM0MDA2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#pullrequestreview-437734006", "createdAt": "2020-06-25T18:02:27Z", "commit": {"oid": "f5db0f1192bfa3a67ed2bc438c1f41750e96f55b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODowMjoyN1rOGpF3fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODoxNToyMlrOGpGTjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0MDkyNw==", "bodyText": "We should be using the dependency version, not the current one.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r445740927", "createdAt": "2020-06-25T18:02:27Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/pom.xml", "diffHunk": "@@ -42,6 +42,23 @@ Licensed under the MIT License.\n       <artifactId>azure-core</artifactId>\n       <version>1.5.1</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-storage-common</artifactId>\n+      <version>12.7.0-beta.1</version> <!-- {x-version-update;com.azure:azure-storage-common;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5db0f1192bfa3a67ed2bc438c1f41750e96f55b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0MTg5MA==", "bodyText": "This should be the dependency version as well. Please follow the format for adding dependencies. @JimSuplizio 's tooling keeps our versions aligned. So it needs that <!-- {x-version-update;.... --> metadatda.\nhttps://github.com/Azure/azure-sdk-for-java/blob/master/sdk/appconfiguration/azure-data-appconfiguration/pom.xml#L63", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r445741890", "createdAt": "2020-06-25T18:04:14Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/pom.xml", "diffHunk": "@@ -42,6 +42,23 @@ Licensed under the MIT License.\n       <artifactId>azure-core</artifactId>\n       <version>1.5.1</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-storage-common</artifactId>\n+      <version>12.7.0-beta.1</version> <!-- {x-version-update;com.azure:azure-storage-common;current} -->\n+    </dependency>\n+      <dependency>\n+          <groupId>org.junit.jupiter</groupId>\n+          <artifactId>junit-jupiter</artifactId>\n+          <version>RELEASE</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5db0f1192bfa3a67ed2bc438c1f41750e96f55b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0MjE2NA==", "bodyText": "Add the  <!-- {x-version-update;.... --> tag so it uses the correct dependency version.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r445742164", "createdAt": "2020-06-25T18:04:43Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/pom.xml", "diffHunk": "@@ -42,6 +42,23 @@ Licensed under the MIT License.\n       <artifactId>azure-core</artifactId>\n       <version>1.5.1</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-storage-common</artifactId>\n+      <version>12.7.0-beta.1</version> <!-- {x-version-update;com.azure:azure-storage-common;current} -->\n+    </dependency>\n+      <dependency>\n+          <groupId>org.junit.jupiter</groupId>\n+          <artifactId>junit-jupiter</artifactId>\n+          <version>RELEASE</version>\n+          <scope>test</scope>\n+      </dependency>\n+    <dependency>\n+      <groupId>io.projectreactor</groupId>\n+      <artifactId>reactor-test</artifactId>\n+      <version>3.3.5.RELEASE</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5db0f1192bfa3a67ed2bc438c1f41750e96f55b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0MjUzNQ==", "bodyText": "There will be some checkstyle failures such as missing MIT header. And adding documentation to public methods/classes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r445742535", "createdAt": "2020-06-25T18:05:24Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TablesSharedKeyCredential.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package com.azure.data.tables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5db0f1192bfa3a67ed2bc438c1f41750e96f55b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0MzE3Ng==", "bodyText": "Undo space.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r445743176", "createdAt": "2020-06-25T18:06:38Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/implementation/TablesImpl.java", "diffHunk": "@@ -270,7 +270,7 @@\n             filterInternal = queryOptions.getFilter();\n         }\n         String filter = filterInternal;\n-        return service.query(\n+         return service.query(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5db0f1192bfa3a67ed2bc438c1f41750e96f55b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0MzMwNA==", "bodyText": "REmove file if it is commented out.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r445743304", "createdAt": "2020-06-25T18:06:51Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/AzureTablesAsyncClientTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+//package com.azure.data.tables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5db0f1192bfa3a67ed2bc438c1f41750e96f55b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0Mzk3NQ==", "bodyText": "Names of test files should match class it is testing. autorestTest should be AzureTableImplTest", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r445743975", "createdAt": "2020-06-25T18:08:12Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/autorestTest.java", "diffHunk": "@@ -0,0 +1,364 @@\n+package com.azure.data.tables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5db0f1192bfa3a67ed2bc438c1f41750e96f55b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0NDg5OA==", "bodyText": "Sort methods by visibility and keep like methods together. For example, all tests should be together @Test. If it is a @BeforeEach or @AfterEach, put them at the top.\nHelper methods like auth() should be made private and at the bottom.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r445744898", "createdAt": "2020-06-25T18:09:45Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/autorestTest.java", "diffHunk": "@@ -0,0 +1,364 @@\n+package com.azure.data.tables;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.TablesImpl;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.storage.common.StorageSharedKeyCredential;\n+import com.azure.storage.common.implementation.connectionstring.StorageAuthenticationSettings;\n+import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import com.azure.storage.common.policy.StorageSharedKeyCredentialPolicy;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import reactor.test.StepVerifier;\n+\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+public class autorestTest {\n+    final String tableA = \"tableA\";\n+    final String tableB = \"tableB\";\n+    final String tableZ = \"tableZ\";\n+    final AzureTableImpl azureTable = auth();\n+    final String pk = \"PartitionKey\";\n+    final String rk = \"RowKey\";\n+    Map<String, Object> propertiesB = new HashMap<>();\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5db0f1192bfa3a67ed2bc438c1f41750e96f55b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0NTE0OA==", "bodyText": "This test should inherit from TestBase.\nIf this test is run on the same resource twice, it will fail. If you look at the AppConfiguration tests, they use testResourceNamer. https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientTestBase.java#L56", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r445745148", "createdAt": "2020-06-25T18:10:10Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/autorestTest.java", "diffHunk": "@@ -0,0 +1,364 @@\n+package com.azure.data.tables;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.TablesImpl;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.storage.common.StorageSharedKeyCredential;\n+import com.azure.storage.common.implementation.connectionstring.StorageAuthenticationSettings;\n+import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import com.azure.storage.common.policy.StorageSharedKeyCredentialPolicy;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import reactor.test.StepVerifier;\n+\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+public class autorestTest {\n+    final String tableA = \"tableA\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5db0f1192bfa3a67ed2bc438c1f41750e96f55b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0NjIwMg==", "bodyText": "Please clean up unnecessary empty lines.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r445746202", "createdAt": "2020-06-25T18:12:04Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/autorestTest.java", "diffHunk": "@@ -0,0 +1,364 @@\n+package com.azure.data.tables;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.TablesImpl;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.storage.common.StorageSharedKeyCredential;\n+import com.azure.storage.common.implementation.connectionstring.StorageAuthenticationSettings;\n+import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import com.azure.storage.common.policy.StorageSharedKeyCredentialPolicy;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import reactor.test.StepVerifier;\n+\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+public class autorestTest {\n+    final String tableA = \"tableA\";\n+    final String tableB = \"tableB\";\n+    final String tableZ = \"tableZ\";\n+    final AzureTableImpl azureTable = auth();\n+    final String pk = \"PartitionKey\";\n+    final String rk = \"RowKey\";\n+    Map<String, Object> propertiesB = new HashMap<>();\n+\n+\n+    void createAndUpdateTableFixed() {\n+        final String connectionString = System.getenv(\"azure_tables_connection_string\");\n+        final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        StorageConnectionString storageConnectionString\n+            = StorageConnectionString.create(connectionString, new ClientLogger(\"tables\"));\n+\n+        StorageAuthenticationSettings authSettings = storageConnectionString.getStorageAuthSettings();\n+        StorageSharedKeyCredential sharedKeyCredential = new StorageSharedKeyCredential(authSettings.getAccount().getName(),\n+            authSettings.getAccount().getAccessKey());\n+\n+        //storagesharedkey object and the storage auth object\n+        policies.add(new AddDatePolicy());\n+        policies.add(new StorageSharedKeyCredentialPolicy(sharedKeyCredential));\n+        //HttpLoggingPolicy()\n+\n+        final HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .httpClient(null)\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .build();\n+\n+        AzureTableImplBuilder azureTableImplBuilder = new AzureTableImplBuilder();\n+        AzureTableImpl azureTable = azureTableImplBuilder\n+            .pipeline(pipeline)\n+            .url(\"/https://telboytrial.table.core.windows.net\")\n+            .buildClient();\n+\n+        try {\n+            TablesImpl tables = azureTable.getTables();\n+\n+            StepVerifier.create(tables.deleteWithResponseAsync(\"ebTable\", \"ID23\", Context.NONE))\n+                .assertNext(response -> {\n+                    System.out.println(response);\n+                    Assertions.assertEquals(200, response.getStatusCode());\n+                })\n+                .expectComplete()\n+                .verify();\n+        } catch (Exception e) {\n+            System.out.print(e);\n+        }\n+\n+    }\n+\n+\n+    static AzureTableImpl auth() {\n+        final String connectionString = System.getenv(\"azure_tables_connection_string\");\n+\n+        StorageConnectionString storageConnectionString\n+            = StorageConnectionString.create(connectionString, new ClientLogger(\"tables\"));\n+\n+        StorageAuthenticationSettings authSettings = storageConnectionString.getStorageAuthSettings();\n+        TablesSharedKeyCredential sharedKeyCredential = new TablesSharedKeyCredential(authSettings.getAccount().getName(),\n+            authSettings.getAccount().getAccessKey());\n+\n+        final List<HttpPipelinePolicy> policies = Arrays.asList(\n+            new AddDatePolicy(),\n+            new AddHeadersPolicy(new HttpHeaders().put(\"Accept\", OdataMetadataFormat.APPLICATION_JSON_ODATA_MINIMALMETADATA.toString())),\n+            new TablesSharedKeyCredentialPolicy(sharedKeyCredential),\n+            new HttpLoggingPolicy(new HttpLogOptions()\n+                .setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n+        );\n+        final HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .build();\n+        AzureTableImpl azureTable = new AzureTableImplBuilder()\n+            .pipeline(pipeline)\n+            .version(\"2019-02-02\")\n+            .url(\"https://telboytrial.table.core.windows.net\")\n+            .buildClient();\n+        return azureTable;\n+    }\n+\n+\n+    @BeforeEach\n+    void beforeTests() {\n+        createTableHelper(tableA);\n+        createTableHelper(tableB);\n+\n+        propertiesB.put(\"PartitionKey\", \"Store\");\n+        propertiesB.put(\"RowKey\", \"Boston\");\n+        propertiesB.put(\"Employees\", \"200\");\n+        insertEntityHelper(tableA, propertiesB);\n+\n+        Map<String, Object> propertiesA = new HashMap<>();\n+        propertiesA.put(\"PartitionKey\", \"Store\");\n+        propertiesA.put(\"RowKey\", \"Atlanta\");\n+        propertiesA.put(\"Employees\", \"50\");\n+        insertEntityHelper(tableA, propertiesA);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5db0f1192bfa3a67ed2bc438c1f41750e96f55b"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0NjUzNQ==", "bodyText": "You can call the method deleteTable(...). Helper isn't necessary. DeleteTable is enough to describe the functionality of the method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r445746535", "createdAt": "2020-06-25T18:12:40Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/autorestTest.java", "diffHunk": "@@ -0,0 +1,364 @@\n+package com.azure.data.tables;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.TablesImpl;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.storage.common.StorageSharedKeyCredential;\n+import com.azure.storage.common.implementation.connectionstring.StorageAuthenticationSettings;\n+import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import com.azure.storage.common.policy.StorageSharedKeyCredentialPolicy;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import reactor.test.StepVerifier;\n+\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+public class autorestTest {\n+    final String tableA = \"tableA\";\n+    final String tableB = \"tableB\";\n+    final String tableZ = \"tableZ\";\n+    final AzureTableImpl azureTable = auth();\n+    final String pk = \"PartitionKey\";\n+    final String rk = \"RowKey\";\n+    Map<String, Object> propertiesB = new HashMap<>();\n+\n+\n+    void createAndUpdateTableFixed() {\n+        final String connectionString = System.getenv(\"azure_tables_connection_string\");\n+        final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        StorageConnectionString storageConnectionString\n+            = StorageConnectionString.create(connectionString, new ClientLogger(\"tables\"));\n+\n+        StorageAuthenticationSettings authSettings = storageConnectionString.getStorageAuthSettings();\n+        StorageSharedKeyCredential sharedKeyCredential = new StorageSharedKeyCredential(authSettings.getAccount().getName(),\n+            authSettings.getAccount().getAccessKey());\n+\n+        //storagesharedkey object and the storage auth object\n+        policies.add(new AddDatePolicy());\n+        policies.add(new StorageSharedKeyCredentialPolicy(sharedKeyCredential));\n+        //HttpLoggingPolicy()\n+\n+        final HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .httpClient(null)\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .build();\n+\n+        AzureTableImplBuilder azureTableImplBuilder = new AzureTableImplBuilder();\n+        AzureTableImpl azureTable = azureTableImplBuilder\n+            .pipeline(pipeline)\n+            .url(\"/https://telboytrial.table.core.windows.net\")\n+            .buildClient();\n+\n+        try {\n+            TablesImpl tables = azureTable.getTables();\n+\n+            StepVerifier.create(tables.deleteWithResponseAsync(\"ebTable\", \"ID23\", Context.NONE))\n+                .assertNext(response -> {\n+                    System.out.println(response);\n+                    Assertions.assertEquals(200, response.getStatusCode());\n+                })\n+                .expectComplete()\n+                .verify();\n+        } catch (Exception e) {\n+            System.out.print(e);\n+        }\n+\n+    }\n+\n+\n+    static AzureTableImpl auth() {\n+        final String connectionString = System.getenv(\"azure_tables_connection_string\");\n+\n+        StorageConnectionString storageConnectionString\n+            = StorageConnectionString.create(connectionString, new ClientLogger(\"tables\"));\n+\n+        StorageAuthenticationSettings authSettings = storageConnectionString.getStorageAuthSettings();\n+        TablesSharedKeyCredential sharedKeyCredential = new TablesSharedKeyCredential(authSettings.getAccount().getName(),\n+            authSettings.getAccount().getAccessKey());\n+\n+        final List<HttpPipelinePolicy> policies = Arrays.asList(\n+            new AddDatePolicy(),\n+            new AddHeadersPolicy(new HttpHeaders().put(\"Accept\", OdataMetadataFormat.APPLICATION_JSON_ODATA_MINIMALMETADATA.toString())),\n+            new TablesSharedKeyCredentialPolicy(sharedKeyCredential),\n+            new HttpLoggingPolicy(new HttpLogOptions()\n+                .setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n+        );\n+        final HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .build();\n+        AzureTableImpl azureTable = new AzureTableImplBuilder()\n+            .pipeline(pipeline)\n+            .version(\"2019-02-02\")\n+            .url(\"https://telboytrial.table.core.windows.net\")\n+            .buildClient();\n+        return azureTable;\n+    }\n+\n+\n+    @BeforeEach\n+    void beforeTests() {\n+        createTableHelper(tableA);\n+        createTableHelper(tableB);\n+\n+        propertiesB.put(\"PartitionKey\", \"Store\");\n+        propertiesB.put(\"RowKey\", \"Boston\");\n+        propertiesB.put(\"Employees\", \"200\");\n+        insertEntityHelper(tableA, propertiesB);\n+\n+        Map<String, Object> propertiesA = new HashMap<>();\n+        propertiesA.put(\"PartitionKey\", \"Store\");\n+        propertiesA.put(\"RowKey\", \"Atlanta\");\n+        propertiesA.put(\"Employees\", \"50\");\n+        insertEntityHelper(tableA, propertiesA);\n+\n+\n+    }\n+\n+    @AfterEach\n+    void afterTests() throws InterruptedException {\n+        deleteTableHelper(tableA);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5db0f1192bfa3a67ed2bc438c1f41750e96f55b"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0NjgwNQ==", "bodyText": "There's no need to sleep. The .block() call only moves to the next line when it is complete.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r445746805", "createdAt": "2020-06-25T18:13:09Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/autorestTest.java", "diffHunk": "@@ -0,0 +1,364 @@\n+package com.azure.data.tables;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.TablesImpl;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.storage.common.StorageSharedKeyCredential;\n+import com.azure.storage.common.implementation.connectionstring.StorageAuthenticationSettings;\n+import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import com.azure.storage.common.policy.StorageSharedKeyCredentialPolicy;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import reactor.test.StepVerifier;\n+\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+public class autorestTest {\n+    final String tableA = \"tableA\";\n+    final String tableB = \"tableB\";\n+    final String tableZ = \"tableZ\";\n+    final AzureTableImpl azureTable = auth();\n+    final String pk = \"PartitionKey\";\n+    final String rk = \"RowKey\";\n+    Map<String, Object> propertiesB = new HashMap<>();\n+\n+\n+    void createAndUpdateTableFixed() {\n+        final String connectionString = System.getenv(\"azure_tables_connection_string\");\n+        final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        StorageConnectionString storageConnectionString\n+            = StorageConnectionString.create(connectionString, new ClientLogger(\"tables\"));\n+\n+        StorageAuthenticationSettings authSettings = storageConnectionString.getStorageAuthSettings();\n+        StorageSharedKeyCredential sharedKeyCredential = new StorageSharedKeyCredential(authSettings.getAccount().getName(),\n+            authSettings.getAccount().getAccessKey());\n+\n+        //storagesharedkey object and the storage auth object\n+        policies.add(new AddDatePolicy());\n+        policies.add(new StorageSharedKeyCredentialPolicy(sharedKeyCredential));\n+        //HttpLoggingPolicy()\n+\n+        final HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .httpClient(null)\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .build();\n+\n+        AzureTableImplBuilder azureTableImplBuilder = new AzureTableImplBuilder();\n+        AzureTableImpl azureTable = azureTableImplBuilder\n+            .pipeline(pipeline)\n+            .url(\"/https://telboytrial.table.core.windows.net\")\n+            .buildClient();\n+\n+        try {\n+            TablesImpl tables = azureTable.getTables();\n+\n+            StepVerifier.create(tables.deleteWithResponseAsync(\"ebTable\", \"ID23\", Context.NONE))\n+                .assertNext(response -> {\n+                    System.out.println(response);\n+                    Assertions.assertEquals(200, response.getStatusCode());\n+                })\n+                .expectComplete()\n+                .verify();\n+        } catch (Exception e) {\n+            System.out.print(e);\n+        }\n+\n+    }\n+\n+\n+    static AzureTableImpl auth() {\n+        final String connectionString = System.getenv(\"azure_tables_connection_string\");\n+\n+        StorageConnectionString storageConnectionString\n+            = StorageConnectionString.create(connectionString, new ClientLogger(\"tables\"));\n+\n+        StorageAuthenticationSettings authSettings = storageConnectionString.getStorageAuthSettings();\n+        TablesSharedKeyCredential sharedKeyCredential = new TablesSharedKeyCredential(authSettings.getAccount().getName(),\n+            authSettings.getAccount().getAccessKey());\n+\n+        final List<HttpPipelinePolicy> policies = Arrays.asList(\n+            new AddDatePolicy(),\n+            new AddHeadersPolicy(new HttpHeaders().put(\"Accept\", OdataMetadataFormat.APPLICATION_JSON_ODATA_MINIMALMETADATA.toString())),\n+            new TablesSharedKeyCredentialPolicy(sharedKeyCredential),\n+            new HttpLoggingPolicy(new HttpLogOptions()\n+                .setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n+        );\n+        final HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .build();\n+        AzureTableImpl azureTable = new AzureTableImplBuilder()\n+            .pipeline(pipeline)\n+            .version(\"2019-02-02\")\n+            .url(\"https://telboytrial.table.core.windows.net\")\n+            .buildClient();\n+        return azureTable;\n+    }\n+\n+\n+    @BeforeEach\n+    void beforeTests() {\n+        createTableHelper(tableA);\n+        createTableHelper(tableB);\n+\n+        propertiesB.put(\"PartitionKey\", \"Store\");\n+        propertiesB.put(\"RowKey\", \"Boston\");\n+        propertiesB.put(\"Employees\", \"200\");\n+        insertEntityHelper(tableA, propertiesB);\n+\n+        Map<String, Object> propertiesA = new HashMap<>();\n+        propertiesA.put(\"PartitionKey\", \"Store\");\n+        propertiesA.put(\"RowKey\", \"Atlanta\");\n+        propertiesA.put(\"Employees\", \"50\");\n+        insertEntityHelper(tableA, propertiesA);\n+\n+\n+    }\n+\n+    @AfterEach\n+    void afterTests() throws InterruptedException {\n+        deleteTableHelper(tableA);\n+        deleteTableHelper(tableB);\n+\n+    }\n+\n+    void createTableHelper(String tableName) {\n+        AzureTableImpl azureTable = auth();\n+\n+        TableProperties tableProperties = new TableProperties().setTableName(tableName);\n+        String requestId = UUID.randomUUID().toString();\n+\n+        azureTable.getTables().createWithResponseAsync(tableProperties, requestId,\n+            ResponseFormat.RETURN_CONTENT, null, Context.NONE).block();\n+\n+    }\n+\n+    void deleteTableHelper(String tableName) throws InterruptedException {\n+\n+        AzureTableImpl azureTable = auth();\n+        String requestId = UUID.randomUUID().toString();\n+\n+\n+        azureTable.getTables().deleteWithResponseAsync(tableName, requestId,\n+            Context.NONE).block();\n+        TimeUnit.SECONDS.sleep(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5db0f1192bfa3a67ed2bc438c1f41750e96f55b"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0Njg5NQ==", "bodyText": "helper is unnecessary.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r445746895", "createdAt": "2020-06-25T18:13:19Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/autorestTest.java", "diffHunk": "@@ -0,0 +1,364 @@\n+package com.azure.data.tables;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.TablesImpl;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.storage.common.StorageSharedKeyCredential;\n+import com.azure.storage.common.implementation.connectionstring.StorageAuthenticationSettings;\n+import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import com.azure.storage.common.policy.StorageSharedKeyCredentialPolicy;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import reactor.test.StepVerifier;\n+\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+public class autorestTest {\n+    final String tableA = \"tableA\";\n+    final String tableB = \"tableB\";\n+    final String tableZ = \"tableZ\";\n+    final AzureTableImpl azureTable = auth();\n+    final String pk = \"PartitionKey\";\n+    final String rk = \"RowKey\";\n+    Map<String, Object> propertiesB = new HashMap<>();\n+\n+\n+    void createAndUpdateTableFixed() {\n+        final String connectionString = System.getenv(\"azure_tables_connection_string\");\n+        final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        StorageConnectionString storageConnectionString\n+            = StorageConnectionString.create(connectionString, new ClientLogger(\"tables\"));\n+\n+        StorageAuthenticationSettings authSettings = storageConnectionString.getStorageAuthSettings();\n+        StorageSharedKeyCredential sharedKeyCredential = new StorageSharedKeyCredential(authSettings.getAccount().getName(),\n+            authSettings.getAccount().getAccessKey());\n+\n+        //storagesharedkey object and the storage auth object\n+        policies.add(new AddDatePolicy());\n+        policies.add(new StorageSharedKeyCredentialPolicy(sharedKeyCredential));\n+        //HttpLoggingPolicy()\n+\n+        final HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .httpClient(null)\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .build();\n+\n+        AzureTableImplBuilder azureTableImplBuilder = new AzureTableImplBuilder();\n+        AzureTableImpl azureTable = azureTableImplBuilder\n+            .pipeline(pipeline)\n+            .url(\"/https://telboytrial.table.core.windows.net\")\n+            .buildClient();\n+\n+        try {\n+            TablesImpl tables = azureTable.getTables();\n+\n+            StepVerifier.create(tables.deleteWithResponseAsync(\"ebTable\", \"ID23\", Context.NONE))\n+                .assertNext(response -> {\n+                    System.out.println(response);\n+                    Assertions.assertEquals(200, response.getStatusCode());\n+                })\n+                .expectComplete()\n+                .verify();\n+        } catch (Exception e) {\n+            System.out.print(e);\n+        }\n+\n+    }\n+\n+\n+    static AzureTableImpl auth() {\n+        final String connectionString = System.getenv(\"azure_tables_connection_string\");\n+\n+        StorageConnectionString storageConnectionString\n+            = StorageConnectionString.create(connectionString, new ClientLogger(\"tables\"));\n+\n+        StorageAuthenticationSettings authSettings = storageConnectionString.getStorageAuthSettings();\n+        TablesSharedKeyCredential sharedKeyCredential = new TablesSharedKeyCredential(authSettings.getAccount().getName(),\n+            authSettings.getAccount().getAccessKey());\n+\n+        final List<HttpPipelinePolicy> policies = Arrays.asList(\n+            new AddDatePolicy(),\n+            new AddHeadersPolicy(new HttpHeaders().put(\"Accept\", OdataMetadataFormat.APPLICATION_JSON_ODATA_MINIMALMETADATA.toString())),\n+            new TablesSharedKeyCredentialPolicy(sharedKeyCredential),\n+            new HttpLoggingPolicy(new HttpLogOptions()\n+                .setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n+        );\n+        final HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .build();\n+        AzureTableImpl azureTable = new AzureTableImplBuilder()\n+            .pipeline(pipeline)\n+            .version(\"2019-02-02\")\n+            .url(\"https://telboytrial.table.core.windows.net\")\n+            .buildClient();\n+        return azureTable;\n+    }\n+\n+\n+    @BeforeEach\n+    void beforeTests() {\n+        createTableHelper(tableA);\n+        createTableHelper(tableB);\n+\n+        propertiesB.put(\"PartitionKey\", \"Store\");\n+        propertiesB.put(\"RowKey\", \"Boston\");\n+        propertiesB.put(\"Employees\", \"200\");\n+        insertEntityHelper(tableA, propertiesB);\n+\n+        Map<String, Object> propertiesA = new HashMap<>();\n+        propertiesA.put(\"PartitionKey\", \"Store\");\n+        propertiesA.put(\"RowKey\", \"Atlanta\");\n+        propertiesA.put(\"Employees\", \"50\");\n+        insertEntityHelper(tableA, propertiesA);\n+\n+\n+    }\n+\n+    @AfterEach\n+    void afterTests() throws InterruptedException {\n+        deleteTableHelper(tableA);\n+        deleteTableHelper(tableB);\n+\n+    }\n+\n+    void createTableHelper(String tableName) {\n+        AzureTableImpl azureTable = auth();\n+\n+        TableProperties tableProperties = new TableProperties().setTableName(tableName);\n+        String requestId = UUID.randomUUID().toString();\n+\n+        azureTable.getTables().createWithResponseAsync(tableProperties, requestId,\n+            ResponseFormat.RETURN_CONTENT, null, Context.NONE).block();\n+\n+    }\n+\n+    void deleteTableHelper(String tableName) throws InterruptedException {\n+\n+        AzureTableImpl azureTable = auth();\n+        String requestId = UUID.randomUUID().toString();\n+\n+\n+        azureTable.getTables().deleteWithResponseAsync(tableName, requestId,\n+            Context.NONE).block();\n+        TimeUnit.SECONDS.sleep(2);\n+\n+    }\n+\n+    void insertEntityHelper(String tableName, Map<String, Object> properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5db0f1192bfa3a67ed2bc438c1f41750e96f55b"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0ODEwOQ==", "bodyText": "These tests should follow arrange, act, and assert. All declarations should be done before your Act & Assert steps.\nhttps://docs.telerik.com/devtools/justmock/basic-usage/arrange-act-assert#verify-interaction\nAn example:\nhttps://github.com/Azure/azure-sdk-for-java/blob/master/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java#L165", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r445748109", "createdAt": "2020-06-25T18:15:22Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/autorestTest.java", "diffHunk": "@@ -0,0 +1,364 @@\n+package com.azure.data.tables;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.TablesImpl;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.storage.common.StorageSharedKeyCredential;\n+import com.azure.storage.common.implementation.connectionstring.StorageAuthenticationSettings;\n+import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import com.azure.storage.common.policy.StorageSharedKeyCredentialPolicy;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import reactor.test.StepVerifier;\n+\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+public class autorestTest {\n+    final String tableA = \"tableA\";\n+    final String tableB = \"tableB\";\n+    final String tableZ = \"tableZ\";\n+    final AzureTableImpl azureTable = auth();\n+    final String pk = \"PartitionKey\";\n+    final String rk = \"RowKey\";\n+    Map<String, Object> propertiesB = new HashMap<>();\n+\n+\n+    void createAndUpdateTableFixed() {\n+        final String connectionString = System.getenv(\"azure_tables_connection_string\");\n+        final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        StorageConnectionString storageConnectionString\n+            = StorageConnectionString.create(connectionString, new ClientLogger(\"tables\"));\n+\n+        StorageAuthenticationSettings authSettings = storageConnectionString.getStorageAuthSettings();\n+        StorageSharedKeyCredential sharedKeyCredential = new StorageSharedKeyCredential(authSettings.getAccount().getName(),\n+            authSettings.getAccount().getAccessKey());\n+\n+        //storagesharedkey object and the storage auth object\n+        policies.add(new AddDatePolicy());\n+        policies.add(new StorageSharedKeyCredentialPolicy(sharedKeyCredential));\n+        //HttpLoggingPolicy()\n+\n+        final HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .httpClient(null)\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .build();\n+\n+        AzureTableImplBuilder azureTableImplBuilder = new AzureTableImplBuilder();\n+        AzureTableImpl azureTable = azureTableImplBuilder\n+            .pipeline(pipeline)\n+            .url(\"/https://telboytrial.table.core.windows.net\")\n+            .buildClient();\n+\n+        try {\n+            TablesImpl tables = azureTable.getTables();\n+\n+            StepVerifier.create(tables.deleteWithResponseAsync(\"ebTable\", \"ID23\", Context.NONE))\n+                .assertNext(response -> {\n+                    System.out.println(response);\n+                    Assertions.assertEquals(200, response.getStatusCode());\n+                })\n+                .expectComplete()\n+                .verify();\n+        } catch (Exception e) {\n+            System.out.print(e);\n+        }\n+\n+    }\n+\n+\n+    static AzureTableImpl auth() {\n+        final String connectionString = System.getenv(\"azure_tables_connection_string\");\n+\n+        StorageConnectionString storageConnectionString\n+            = StorageConnectionString.create(connectionString, new ClientLogger(\"tables\"));\n+\n+        StorageAuthenticationSettings authSettings = storageConnectionString.getStorageAuthSettings();\n+        TablesSharedKeyCredential sharedKeyCredential = new TablesSharedKeyCredential(authSettings.getAccount().getName(),\n+            authSettings.getAccount().getAccessKey());\n+\n+        final List<HttpPipelinePolicy> policies = Arrays.asList(\n+            new AddDatePolicy(),\n+            new AddHeadersPolicy(new HttpHeaders().put(\"Accept\", OdataMetadataFormat.APPLICATION_JSON_ODATA_MINIMALMETADATA.toString())),\n+            new TablesSharedKeyCredentialPolicy(sharedKeyCredential),\n+            new HttpLoggingPolicy(new HttpLogOptions()\n+                .setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n+        );\n+        final HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .build();\n+        AzureTableImpl azureTable = new AzureTableImplBuilder()\n+            .pipeline(pipeline)\n+            .version(\"2019-02-02\")\n+            .url(\"https://telboytrial.table.core.windows.net\")\n+            .buildClient();\n+        return azureTable;\n+    }\n+\n+\n+    @BeforeEach\n+    void beforeTests() {\n+        createTableHelper(tableA);\n+        createTableHelper(tableB);\n+\n+        propertiesB.put(\"PartitionKey\", \"Store\");\n+        propertiesB.put(\"RowKey\", \"Boston\");\n+        propertiesB.put(\"Employees\", \"200\");\n+        insertEntityHelper(tableA, propertiesB);\n+\n+        Map<String, Object> propertiesA = new HashMap<>();\n+        propertiesA.put(\"PartitionKey\", \"Store\");\n+        propertiesA.put(\"RowKey\", \"Atlanta\");\n+        propertiesA.put(\"Employees\", \"50\");\n+        insertEntityHelper(tableA, propertiesA);\n+\n+\n+    }\n+\n+    @AfterEach\n+    void afterTests() throws InterruptedException {\n+        deleteTableHelper(tableA);\n+        deleteTableHelper(tableB);\n+\n+    }\n+\n+    void createTableHelper(String tableName) {\n+        AzureTableImpl azureTable = auth();\n+\n+        TableProperties tableProperties = new TableProperties().setTableName(tableName);\n+        String requestId = UUID.randomUUID().toString();\n+\n+        azureTable.getTables().createWithResponseAsync(tableProperties, requestId,\n+            ResponseFormat.RETURN_CONTENT, null, Context.NONE).block();\n+\n+    }\n+\n+    void deleteTableHelper(String tableName) throws InterruptedException {\n+\n+        AzureTableImpl azureTable = auth();\n+        String requestId = UUID.randomUUID().toString();\n+\n+\n+        azureTable.getTables().deleteWithResponseAsync(tableName, requestId,\n+            Context.NONE).block();\n+        TimeUnit.SECONDS.sleep(2);\n+\n+    }\n+\n+    void insertEntityHelper(String tableName, Map<String, Object> properties) {\n+        String requestId = UUID.randomUUID().toString();\n+\n+        azureTable.getTables().insertEntityWithResponseAsync(tableName, 500,\n+            requestId, ResponseFormat.RETURN_CONTENT, properties, null, Context.NONE).log().block();\n+    }\n+\n+    @Test\n+    void createTable() throws InterruptedException {\n+        TableProperties tableProperties = new TableProperties().setTableName(tableZ);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5db0f1192bfa3a67ed2bc438c1f41750e96f55b"}, "originalPosition": 170}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwOTA1NDc0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#pullrequestreview-440905474", "createdAt": "2020-07-01T14:09:47Z", "commit": {"oid": "515854928ea6c9404c79ead9eafc7fa09c2d2573"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDowOTo0OFrOGrnkQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDowOTo0OFrOGrnkQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5MDIwOA==", "bodyText": "I'm not trying to be a nag but this isn't setting a temporary value for coverage percentage, it's skipping the check altogether. Please either update the comment or the property to put them in sync.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r448390208", "createdAt": "2020-07-01T14:09:48Z", "author": {"login": "JimSuplizio"}, "path": "sdk/tables/azure-data-tables/pom.xml", "diffHunk": "@@ -31,7 +32,7 @@ Licensed under the MIT License.\n     <tag>HEAD</tag>\n   </scm>\n \n-  <!-- CosmosTableSkip - Needed temporary values to 10% not fail. -->\n+  <!-- CosmosTableSkip - Needed temporary values to 20% not fail. -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "515854928ea6c9404c79ead9eafc7fa09c2d2573"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b681a3b2189f2651fd13bddfb7008973a19b07b7", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b681a3b2189f2651fd13bddfb7008973a19b07b7", "committedDate": "2020-07-01T15:53:05Z", "message": "fixing version"}, "afterCommit": {"oid": "0ef4f1c2334a2249f003900014a7ac9634bb9b98", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0ef4f1c2334a2249f003900014a7ac9634bb9b98", "committedDate": "2020-07-01T18:15:15Z", "message": "fix impl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNDUwNzM4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#pullrequestreview-441450738", "createdAt": "2020-07-02T08:15:43Z", "commit": {"oid": "d95454542c0319d874e99fd45dec8191a108cd21"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwODoxNTo0NFrOGsCSqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwODoyODo0NVrOGsCvwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyODA3Mg==", "bodyText": "This can be simplified to. Same with the line below.\nthis.accountName = Objects.requireNonNull(accountName, \"'accountName' cannot be null.\");", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r448828072", "createdAt": "2020-07-02T08:15:44Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TablesSharedKeyCredential.java", "diffHunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.storage.common.implementation.StorageImplUtils;\n+\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * A Class which helps generate the shared key credentials for a given storage account to create a Http requests to\n+ * access Azure Tables\n+ */\n+public class TablesSharedKeyCredential {\n+    private static final String AUTHORIZATION_HEADER_FORMAT = \"SharedKeyLite %s:%s\";\n+    private final String accountName;\n+    private final String accountKey;\n+\n+    /**\n+     * Constructor for TableSharedKeyCredential Class\n+     *\n+     * @param accountName name of the storage account\n+     * @param accountKey key to the storage account\n+     */\n+    public TablesSharedKeyCredential(String accountName, String accountKey) {\n+        Objects.requireNonNull(accountName, \"'accountName' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95454542c0319d874e99fd45dec8191a108cd21"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyODQ2Mw==", "bodyText": "requestURL should be requestUrl as-per our naming guidelines.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r448828463", "createdAt": "2020-07-02T08:16:25Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TablesSharedKeyCredential.java", "diffHunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.storage.common.implementation.StorageImplUtils;\n+\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * A Class which helps generate the shared key credentials for a given storage account to create a Http requests to\n+ * access Azure Tables\n+ */\n+public class TablesSharedKeyCredential {\n+    private static final String AUTHORIZATION_HEADER_FORMAT = \"SharedKeyLite %s:%s\";\n+    private final String accountName;\n+    private final String accountKey;\n+\n+    /**\n+     * Constructor for TableSharedKeyCredential Class\n+     *\n+     * @param accountName name of the storage account\n+     * @param accountKey key to the storage account\n+     */\n+    public TablesSharedKeyCredential(String accountName, String accountKey) {\n+        Objects.requireNonNull(accountName, \"'accountName' cannot be null.\");\n+        Objects.requireNonNull(accountKey, \"'accountKey' cannot be null.\");\n+        this.accountName = accountName;\n+        this.accountKey = accountKey;\n+    }\n+\n+    /**\n+     * Generates the Auth Headers\n+     *\n+     * @param requestURL the URL which the request is going to\n+     * @param headers the headers of the request\n+     * @return the auth header\n+     */\n+    public String generateAuthorizationHeader(URL requestURL, Map<String, String> headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95454542c0319d874e99fd45dec8191a108cd21"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyODg1MA==", "bodyText": "It is not necessary to qualify this with this., there are no naming conflicts within this method. Same with the other usages.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r448828850", "createdAt": "2020-07-02T08:17:08Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TablesSharedKeyCredential.java", "diffHunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.storage.common.implementation.StorageImplUtils;\n+\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * A Class which helps generate the shared key credentials for a given storage account to create a Http requests to\n+ * access Azure Tables\n+ */\n+public class TablesSharedKeyCredential {\n+    private static final String AUTHORIZATION_HEADER_FORMAT = \"SharedKeyLite %s:%s\";\n+    private final String accountName;\n+    private final String accountKey;\n+\n+    /**\n+     * Constructor for TableSharedKeyCredential Class\n+     *\n+     * @param accountName name of the storage account\n+     * @param accountKey key to the storage account\n+     */\n+    public TablesSharedKeyCredential(String accountName, String accountKey) {\n+        Objects.requireNonNull(accountName, \"'accountName' cannot be null.\");\n+        Objects.requireNonNull(accountKey, \"'accountKey' cannot be null.\");\n+        this.accountName = accountName;\n+        this.accountKey = accountKey;\n+    }\n+\n+    /**\n+     * Generates the Auth Headers\n+     *\n+     * @param requestURL the URL which the request is going to\n+     * @param headers the headers of the request\n+     * @return the auth header\n+     */\n+    public String generateAuthorizationHeader(URL requestURL, Map<String, String> headers) {\n+        String signature = StorageImplUtils.computeHMac256(this.accountKey, this.buildStringToSign(requestURL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95454542c0319d874e99fd45dec8191a108cd21"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyOTE1OA==", "bodyText": "Remove this.. Same with the instance above.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r448829158", "createdAt": "2020-07-02T08:17:39Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TablesSharedKeyCredential.java", "diffHunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.storage.common.implementation.StorageImplUtils;\n+\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * A Class which helps generate the shared key credentials for a given storage account to create a Http requests to\n+ * access Azure Tables\n+ */\n+public class TablesSharedKeyCredential {\n+    private static final String AUTHORIZATION_HEADER_FORMAT = \"SharedKeyLite %s:%s\";\n+    private final String accountName;\n+    private final String accountKey;\n+\n+    /**\n+     * Constructor for TableSharedKeyCredential Class\n+     *\n+     * @param accountName name of the storage account\n+     * @param accountKey key to the storage account\n+     */\n+    public TablesSharedKeyCredential(String accountName, String accountKey) {\n+        Objects.requireNonNull(accountName, \"'accountName' cannot be null.\");\n+        Objects.requireNonNull(accountKey, \"'accountKey' cannot be null.\");\n+        this.accountName = accountName;\n+        this.accountKey = accountKey;\n+    }\n+\n+    /**\n+     * Generates the Auth Headers\n+     *\n+     * @param requestURL the URL which the request is going to\n+     * @param headers the headers of the request\n+     * @return the auth header\n+     */\n+    public String generateAuthorizationHeader(URL requestURL, Map<String, String> headers) {\n+        String signature = StorageImplUtils.computeHMac256(this.accountKey, this.buildStringToSign(requestURL,\n+            headers));\n+        return String.format(AUTHORIZATION_HEADER_FORMAT, this.accountName, signature);\n+    }\n+\n+    /**\n+     * creates the String to Sign\n+     *\n+     * @param requestURL the URL which the request is going to\n+     * @param headers the headers of the request\n+     * @return a string to sign for the request\n+     */\n+    private String buildStringToSign(URL requestURL, Map<String, String> headers) {\n+        String dateHeader = headers.containsKey(\"x-ms-date\") ? \"\" : this.getStandardHeaderValue(headers,\n+            \"Date\");\n+        return String.join(\"\\n\",\n+            dateHeader,  //date\n+            this.getCanonicalizedResource(requestURL)); //Canonicalized resource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95454542c0319d874e99fd45dec8191a108cd21"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyOTcxNQ==", "bodyText": "The ternary operator is easier to read when it is split like this:\nString dateHeader = headers.containsKey(\"x-ms-date\") \n    ? \"\" \n    : this.getStandardHeaderValue(headers, \"Date\");", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r448829715", "createdAt": "2020-07-02T08:18:41Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TablesSharedKeyCredential.java", "diffHunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.storage.common.implementation.StorageImplUtils;\n+\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * A Class which helps generate the shared key credentials for a given storage account to create a Http requests to\n+ * access Azure Tables\n+ */\n+public class TablesSharedKeyCredential {\n+    private static final String AUTHORIZATION_HEADER_FORMAT = \"SharedKeyLite %s:%s\";\n+    private final String accountName;\n+    private final String accountKey;\n+\n+    /**\n+     * Constructor for TableSharedKeyCredential Class\n+     *\n+     * @param accountName name of the storage account\n+     * @param accountKey key to the storage account\n+     */\n+    public TablesSharedKeyCredential(String accountName, String accountKey) {\n+        Objects.requireNonNull(accountName, \"'accountName' cannot be null.\");\n+        Objects.requireNonNull(accountKey, \"'accountKey' cannot be null.\");\n+        this.accountName = accountName;\n+        this.accountKey = accountKey;\n+    }\n+\n+    /**\n+     * Generates the Auth Headers\n+     *\n+     * @param requestURL the URL which the request is going to\n+     * @param headers the headers of the request\n+     * @return the auth header\n+     */\n+    public String generateAuthorizationHeader(URL requestURL, Map<String, String> headers) {\n+        String signature = StorageImplUtils.computeHMac256(this.accountKey, this.buildStringToSign(requestURL,\n+            headers));\n+        return String.format(AUTHORIZATION_HEADER_FORMAT, this.accountName, signature);\n+    }\n+\n+    /**\n+     * creates the String to Sign\n+     *\n+     * @param requestURL the URL which the request is going to\n+     * @param headers the headers of the request\n+     * @return a string to sign for the request\n+     */\n+    private String buildStringToSign(URL requestURL, Map<String, String> headers) {\n+        String dateHeader = headers.containsKey(\"x-ms-date\") ? \"\" : this.getStandardHeaderValue(headers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95454542c0319d874e99fd45dec8191a108cd21"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzMDQ0OQ==", "bodyText": "Does the case matter? If it does not, is equalsIgnoreCase() better to use than equals()?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r448830449", "createdAt": "2020-07-02T08:19:56Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TablesSharedKeyCredential.java", "diffHunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.storage.common.implementation.StorageImplUtils;\n+\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * A Class which helps generate the shared key credentials for a given storage account to create a Http requests to\n+ * access Azure Tables\n+ */\n+public class TablesSharedKeyCredential {\n+    private static final String AUTHORIZATION_HEADER_FORMAT = \"SharedKeyLite %s:%s\";\n+    private final String accountName;\n+    private final String accountKey;\n+\n+    /**\n+     * Constructor for TableSharedKeyCredential Class\n+     *\n+     * @param accountName name of the storage account\n+     * @param accountKey key to the storage account\n+     */\n+    public TablesSharedKeyCredential(String accountName, String accountKey) {\n+        Objects.requireNonNull(accountName, \"'accountName' cannot be null.\");\n+        Objects.requireNonNull(accountKey, \"'accountKey' cannot be null.\");\n+        this.accountName = accountName;\n+        this.accountKey = accountKey;\n+    }\n+\n+    /**\n+     * Generates the Auth Headers\n+     *\n+     * @param requestURL the URL which the request is going to\n+     * @param headers the headers of the request\n+     * @return the auth header\n+     */\n+    public String generateAuthorizationHeader(URL requestURL, Map<String, String> headers) {\n+        String signature = StorageImplUtils.computeHMac256(this.accountKey, this.buildStringToSign(requestURL,\n+            headers));\n+        return String.format(AUTHORIZATION_HEADER_FORMAT, this.accountName, signature);\n+    }\n+\n+    /**\n+     * creates the String to Sign\n+     *\n+     * @param requestURL the URL which the request is going to\n+     * @param headers the headers of the request\n+     * @return a string to sign for the request\n+     */\n+    private String buildStringToSign(URL requestURL, Map<String, String> headers) {\n+        String dateHeader = headers.containsKey(\"x-ms-date\") ? \"\" : this.getStandardHeaderValue(headers,\n+            \"Date\");\n+        return String.join(\"\\n\",\n+            dateHeader,  //date\n+            this.getCanonicalizedResource(requestURL)); //Canonicalized resource\n+    }\n+\n+    /**\n+     * gets necessary headers if the request does not already contain them\n+     *\n+     * @param headers a map of the headers which the request has\n+     * @param headerName the name of the header to get the standard header for\n+     * @return the standard header for the given name\n+     */\n+    private String getStandardHeaderValue(Map<String, String> headers, String headerName) {\n+        String headerValue = headers.get(headerName);\n+        return headerValue == null ? \"\" : headerValue;\n+    }\n+\n+\n+    /**\n+     * returns the canonicalized resource needed for a request\n+     *\n+     * @param requestURL the url of the request\n+     * @return the string that is the canonicalized resource\n+     */\n+    private String getCanonicalizedResource(URL requestURL) {\n+        StringBuilder canonicalizedResource = new StringBuilder(\"/\");\n+        canonicalizedResource.append(this.accountName);\n+        if (requestURL.getPath().length() > 0) {\n+            canonicalizedResource.append(requestURL.getPath());\n+        } else {\n+            canonicalizedResource.append('/');\n+        }\n+\n+        if (requestURL.getQuery() != null) {\n+            Map<String, String[]> queryParams = StorageImplUtils.parseQueryStringSplitValues(requestURL.getQuery());\n+            ArrayList<String> queryParamNames = new ArrayList<>(queryParams.keySet());\n+            Collections.sort(queryParamNames);\n+\n+            for (String queryParamName : queryParamNames) {\n+                String[] queryParamValues = queryParams.get(queryParamName);\n+                Arrays.sort(queryParamValues);\n+                String queryParamValuesStr = String.join(\",\", queryParamValues);\n+                if (queryParamName.equals(\"comp\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95454542c0319d874e99fd45dec8191a108cd21"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzMDc0OQ==", "bodyText": "null.? In correct replacement?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r448830749", "createdAt": "2020-07-02T08:20:26Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/package-info.java", "diffHunk": "@@ -0,0 +1,5 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+/** Package containing the inner classes for Azure Tables SDK. null. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95454542c0319d874e99fd45dec8191a108cd21"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzMDk1OA==", "bodyText": "Did you mean to format this class?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r448830958", "createdAt": "2020-07-02T08:20:49Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/implementation/TablesImpl.java", "diffHunk": "@@ -73,164 +73,164 @@\n         @ExpectedResponses({200})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95454542c0319d874e99fd45dec8191a108cd21"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzMTA4OA==", "bodyText": "nit: empty line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r448831088", "createdAt": "2020-07-02T08:21:07Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/AzureTableImplTest.java", "diffHunk": "@@ -0,0 +1,521 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.storage.common.implementation.connectionstring.StorageAuthenticationSettings;\n+import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95454542c0319d874e99fd45dec8191a108cd21"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzMzM5MQ==", "bodyText": "My personal rule of thumb is to add an empty line between all my variable creations and method invocations. I think it makes it easier to reason about as you're reading. In this case, it would look like:\nMap<String, String[]> queryParams = StorageImplUtils.parseQueryStringSplitValues(requestURL.getQuery());\nArrayList<String> queryParamNames = new ArrayList<>(queryParams.keySet());\n\nCollections.sort(queryParamNames);\n\nif (requestURL.getQuery() != null) {\n    for (String queryParamName : queryParamNames) {\n        String[] queryParamValues = queryParams.get(queryParamName);\n\n        Arrays.sort(queryParamValues);\n\n        String queryParamValuesStr = String.join(\",\", queryParamValues);\n\n        if (queryParamName.equals(\"comp\")) {\n            canonicalizedResource.append(\"?\").append(queryParamName.toLowerCase(Locale.ROOT))\n                .append(\"=\")\n                .append(queryParamValuesStr);\n        }\n    }\n}\n\nreturn canonicalizedResource.toString();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r448833391", "createdAt": "2020-07-02T08:25:06Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TablesSharedKeyCredential.java", "diffHunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.storage.common.implementation.StorageImplUtils;\n+\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * A Class which helps generate the shared key credentials for a given storage account to create a Http requests to\n+ * access Azure Tables\n+ */\n+public class TablesSharedKeyCredential {\n+    private static final String AUTHORIZATION_HEADER_FORMAT = \"SharedKeyLite %s:%s\";\n+    private final String accountName;\n+    private final String accountKey;\n+\n+    /**\n+     * Constructor for TableSharedKeyCredential Class\n+     *\n+     * @param accountName name of the storage account\n+     * @param accountKey key to the storage account\n+     */\n+    public TablesSharedKeyCredential(String accountName, String accountKey) {\n+        Objects.requireNonNull(accountName, \"'accountName' cannot be null.\");\n+        Objects.requireNonNull(accountKey, \"'accountKey' cannot be null.\");\n+        this.accountName = accountName;\n+        this.accountKey = accountKey;\n+    }\n+\n+    /**\n+     * Generates the Auth Headers\n+     *\n+     * @param requestURL the URL which the request is going to\n+     * @param headers the headers of the request\n+     * @return the auth header\n+     */\n+    public String generateAuthorizationHeader(URL requestURL, Map<String, String> headers) {\n+        String signature = StorageImplUtils.computeHMac256(this.accountKey, this.buildStringToSign(requestURL,\n+            headers));\n+        return String.format(AUTHORIZATION_HEADER_FORMAT, this.accountName, signature);\n+    }\n+\n+    /**\n+     * creates the String to Sign\n+     *\n+     * @param requestURL the URL which the request is going to\n+     * @param headers the headers of the request\n+     * @return a string to sign for the request\n+     */\n+    private String buildStringToSign(URL requestURL, Map<String, String> headers) {\n+        String dateHeader = headers.containsKey(\"x-ms-date\") ? \"\" : this.getStandardHeaderValue(headers,\n+            \"Date\");\n+        return String.join(\"\\n\",\n+            dateHeader,  //date\n+            this.getCanonicalizedResource(requestURL)); //Canonicalized resource\n+    }\n+\n+    /**\n+     * gets necessary headers if the request does not already contain them\n+     *\n+     * @param headers a map of the headers which the request has\n+     * @param headerName the name of the header to get the standard header for\n+     * @return the standard header for the given name\n+     */\n+    private String getStandardHeaderValue(Map<String, String> headers, String headerName) {\n+        String headerValue = headers.get(headerName);\n+        return headerValue == null ? \"\" : headerValue;\n+    }\n+\n+\n+    /**\n+     * returns the canonicalized resource needed for a request\n+     *\n+     * @param requestURL the url of the request\n+     * @return the string that is the canonicalized resource\n+     */\n+    private String getCanonicalizedResource(URL requestURL) {\n+        StringBuilder canonicalizedResource = new StringBuilder(\"/\");\n+        canonicalizedResource.append(this.accountName);\n+        if (requestURL.getPath().length() > 0) {\n+            canonicalizedResource.append(requestURL.getPath());\n+        } else {\n+            canonicalizedResource.append('/');\n+        }\n+\n+        if (requestURL.getQuery() != null) {\n+            Map<String, String[]> queryParams = StorageImplUtils.parseQueryStringSplitValues(requestURL.getQuery());\n+            ArrayList<String> queryParamNames = new ArrayList<>(queryParams.keySet());\n+            Collections.sort(queryParamNames);\n+\n+            for (String queryParamName : queryParamNames) {\n+                String[] queryParamValues = queryParams.get(queryParamName);\n+                Arrays.sort(queryParamValues);\n+                String queryParamValuesStr = String.join(\",\", queryParamValues);\n+                if (queryParamName.equals(\"comp\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95454542c0319d874e99fd45dec8191a108cd21"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzNDYxMw==", "bodyText": "This can be:\nStringBuilder canonicalizedResource = new StringBuilder(\"/\").append(accountName);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r448834613", "createdAt": "2020-07-02T08:27:08Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TablesSharedKeyCredential.java", "diffHunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.storage.common.implementation.StorageImplUtils;\n+\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * A Class which helps generate the shared key credentials for a given storage account to create a Http requests to\n+ * access Azure Tables\n+ */\n+public class TablesSharedKeyCredential {\n+    private static final String AUTHORIZATION_HEADER_FORMAT = \"SharedKeyLite %s:%s\";\n+    private final String accountName;\n+    private final String accountKey;\n+\n+    /**\n+     * Constructor for TableSharedKeyCredential Class\n+     *\n+     * @param accountName name of the storage account\n+     * @param accountKey key to the storage account\n+     */\n+    public TablesSharedKeyCredential(String accountName, String accountKey) {\n+        Objects.requireNonNull(accountName, \"'accountName' cannot be null.\");\n+        Objects.requireNonNull(accountKey, \"'accountKey' cannot be null.\");\n+        this.accountName = accountName;\n+        this.accountKey = accountKey;\n+    }\n+\n+    /**\n+     * Generates the Auth Headers\n+     *\n+     * @param requestURL the URL which the request is going to\n+     * @param headers the headers of the request\n+     * @return the auth header\n+     */\n+    public String generateAuthorizationHeader(URL requestURL, Map<String, String> headers) {\n+        String signature = StorageImplUtils.computeHMac256(this.accountKey, this.buildStringToSign(requestURL,\n+            headers));\n+        return String.format(AUTHORIZATION_HEADER_FORMAT, this.accountName, signature);\n+    }\n+\n+    /**\n+     * creates the String to Sign\n+     *\n+     * @param requestURL the URL which the request is going to\n+     * @param headers the headers of the request\n+     * @return a string to sign for the request\n+     */\n+    private String buildStringToSign(URL requestURL, Map<String, String> headers) {\n+        String dateHeader = headers.containsKey(\"x-ms-date\") ? \"\" : this.getStandardHeaderValue(headers,\n+            \"Date\");\n+        return String.join(\"\\n\",\n+            dateHeader,  //date\n+            this.getCanonicalizedResource(requestURL)); //Canonicalized resource\n+    }\n+\n+    /**\n+     * gets necessary headers if the request does not already contain them\n+     *\n+     * @param headers a map of the headers which the request has\n+     * @param headerName the name of the header to get the standard header for\n+     * @return the standard header for the given name\n+     */\n+    private String getStandardHeaderValue(Map<String, String> headers, String headerName) {\n+        String headerValue = headers.get(headerName);\n+        return headerValue == null ? \"\" : headerValue;\n+    }\n+\n+\n+    /**\n+     * returns the canonicalized resource needed for a request\n+     *\n+     * @param requestURL the url of the request\n+     * @return the string that is the canonicalized resource\n+     */\n+    private String getCanonicalizedResource(URL requestURL) {\n+        StringBuilder canonicalizedResource = new StringBuilder(\"/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95454542c0319d874e99fd45dec8191a108cd21"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzNDczNQ==", "bodyText": "nit:new line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r448834735", "createdAt": "2020-07-02T08:27:21Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TablesSharedKeyCredentialPolicy.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95454542c0319d874e99fd45dec8191a108cd21"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzNDkwNA==", "bodyText": "Remove this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r448834904", "createdAt": "2020-07-02T08:27:38Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TablesSharedKeyCredentialPolicy.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * This class helps authenticate an Http request for the Tables service\n+ */\n+public final class TablesSharedKeyCredentialPolicy implements HttpPipelinePolicy {\n+\n+    private final TablesSharedKeyCredential credential;\n+\n+    /**\n+     * constructor for the TablesSharedKeyCredentialPolicy class\n+     *\n+     * @param credential the credentials of the account\n+     */\n+    public TablesSharedKeyCredentialPolicy(TablesSharedKeyCredential credential) {\n+        this.credential = credential;\n+    }\n+\n+    /**\n+     * creates an Http response\n+     *\n+     * @param context the context of the http pipeline\n+     * @param next the next Http pipeline policy\n+     * @return an Http response\n+     */\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        String authorizationValue = this.credential.generateAuthorizationHeader(context.getHttpRequest().getUrl(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95454542c0319d874e99fd45dec8191a108cd21"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzNTEyMA==", "bodyText": "super.beforeTest() is an empty method, you can remove this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r448835120", "createdAt": "2020-07-02T08:28:00Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/AzureTableImplTest.java", "diffHunk": "@@ -0,0 +1,521 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.storage.common.implementation.connectionstring.StorageAuthenticationSettings;\n+import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+\n+/**\n+ * This class tests the Autorest code for the Tables track 2 SDK\n+ */\n+public class AzureTableImplTest extends TestBase {\n+    private static final String PARTITION_KEY = \"PartitionKey\";\n+    private static final String ROW_KEY = \"RowKey\";\n+    private static final int TIMEOUT = 5000;\n+    private AzureTableImpl azureTable;\n+\n+    @Override\n+    protected void beforeTest() {\n+        super.beforeTest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95454542c0319d874e99fd45dec8191a108cd21"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzNTUyMA==", "bodyText": "I'd be consistent about using final. If you use final here. I'd expect you to use it in all other cases in your code where you don't expect variables to be reassigned.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r448835520", "createdAt": "2020-07-02T08:28:45Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/AzureTableImplTest.java", "diffHunk": "@@ -0,0 +1,521 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.storage.common.implementation.connectionstring.StorageAuthenticationSettings;\n+import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+\n+/**\n+ * This class tests the Autorest code for the Tables track 2 SDK\n+ */\n+public class AzureTableImplTest extends TestBase {\n+    private static final String PARTITION_KEY = \"PartitionKey\";\n+    private static final String ROW_KEY = \"RowKey\";\n+    private static final int TIMEOUT = 5000;\n+    private AzureTableImpl azureTable;\n+\n+    @Override\n+    protected void beforeTest() {\n+        super.beforeTest();\n+        String connectionString = interceptorManager.isPlaybackMode()\n+            ? \"DefaultEndpointsProtocol=https;AccountName=dummyAccount;AccountKey=xyzDummy;EndpointSuffix=core.windows.net\"\n+            : System.getenv(\"AZURE_TABLES_CONNECTION_STRING\");\n+        StorageConnectionString storageConnectionString\n+            = StorageConnectionString.create(connectionString, new ClientLogger(AzureTableImplTest.class));\n+\n+        StorageAuthenticationSettings authSettings = storageConnectionString.getStorageAuthSettings();\n+        TablesSharedKeyCredential sharedKeyCredential = new TablesSharedKeyCredential(authSettings.getAccount().getName(),\n+            authSettings.getAccount().getAccessKey());\n+\n+        final List<HttpPipelinePolicy> policies = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95454542c0319d874e99fd45dec8191a108cd21"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxOTEyODgy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#pullrequestreview-441912882", "createdAt": "2020-07-02T17:58:17Z", "commit": {"oid": "ea32e09cd5702979314b2785c0fc96041edb1d16"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzo1ODoxN1rOGsX9TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODowMjoxMVrOGsYGEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MzA1Mg==", "bodyText": "nit: trailing new lines", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r449183052", "createdAt": "2020-07-02T17:58:17Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/AzureTableImplTest.java", "diffHunk": "@@ -0,0 +1,519 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.storage.common.implementation.connectionstring.StorageAuthenticationSettings;\n+import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+/**\n+ * This class tests the Autorest code for the Tables track 2 SDK\n+ */\n+public class AzureTableImplTest extends TestBase {\n+    private static final String PARTITION_KEY = \"PartitionKey\";\n+    private static final String ROW_KEY = \"RowKey\";\n+    private static final int TIMEOUT = 5000;\n+    private AzureTableImpl azureTable;\n+\n+    @Override\n+    protected void beforeTest() {\n+        String connectionString = interceptorManager.isPlaybackMode()\n+            ? \"DefaultEndpointsProtocol=https;AccountName=dummyAccount;AccountKey=xyzDummy;EndpointSuffix=core.windows.net\"\n+            : System.getenv(\"AZURE_TABLES_CONNECTION_STRING\");\n+        StorageConnectionString storageConnectionString\n+            = StorageConnectionString.create(connectionString, new ClientLogger(AzureTableImplTest.class));\n+\n+        StorageAuthenticationSettings authSettings = storageConnectionString.getStorageAuthSettings();\n+        TablesSharedKeyCredential sharedKeyCredential = new TablesSharedKeyCredential(authSettings.getAccount().getName(),\n+            authSettings.getAccount().getAccessKey());\n+\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+        policies.add(new AddDatePolicy());\n+        policies.add(new AddHeadersPolicy(new HttpHeaders().put(\"Accept\",\n+            OdataMetadataFormat.APPLICATION_JSON_ODATA_MINIMALMETADATA.toString())));\n+        policies.add(new TablesSharedKeyCredentialPolicy(sharedKeyCredential));\n+        policies.add(new HttpLoggingPolicy(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)));\n+\n+        HttpClient httpClientToUse;\n+        if (interceptorManager.isPlaybackMode()) {\n+            httpClientToUse = interceptorManager.getPlaybackClient();\n+        } else {\n+            httpClientToUse = HttpClient.createDefault();\n+            policies.add(interceptorManager.getRecordPolicy());\n+            policies.add(new RetryPolicy());\n+        }\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .httpClient(httpClientToUse)\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .build();\n+        azureTable = new AzureTableImplBuilder()\n+            .pipeline(pipeline)\n+            .version(\"2019-02-02\")\n+            .url(storageConnectionString.getTableEndpoint().getPrimaryUri())\n+            .buildClient();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        QueryOptions queryOptions = new QueryOptions()\n+            .setFormat(OdataMetadataFormat.APPLICATION_JSON_ODATA_MINIMALMETADATA);\n+\n+        Mono.when(azureTable.getTables().queryWithResponseAsync(testResourceNamer.randomUuid(), null,\n+            queryOptions, Context.NONE).flatMapMany(tablesQueryResponse -> {\n+                return Flux.fromIterable(tablesQueryResponse.getValue().getValue()).flatMap(tableResponseProperty -> {\n+                    return azureTable.getTables().deleteWithResponseAsync(tableResponseProperty.getTableName(),\n+                        testResourceNamer.randomUuid(), Context.NONE);\n+                });\n+            })).block();\n+    }\n+\n+    void createTable(String tableName) {\n+        TableProperties tableProperties = new TableProperties().setTableName(tableName);\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        azureTable.getTables().createWithResponseAsync(tableProperties, requestId,\n+            ResponseFormat.RETURN_CONTENT, null, Context.NONE).block();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea32e09cd5702979314b2785c0fc96041edb1d16"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MzcwNQ==", "bodyText": "If you import this, it won't need to be fully qualified.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r449183705", "createdAt": "2020-07-02T17:59:06Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/AzureTableImplTest.java", "diffHunk": "@@ -0,0 +1,519 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.storage.common.implementation.connectionstring.StorageAuthenticationSettings;\n+import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+/**\n+ * This class tests the Autorest code for the Tables track 2 SDK\n+ */\n+public class AzureTableImplTest extends TestBase {\n+    private static final String PARTITION_KEY = \"PartitionKey\";\n+    private static final String ROW_KEY = \"RowKey\";\n+    private static final int TIMEOUT = 5000;\n+    private AzureTableImpl azureTable;\n+\n+    @Override\n+    protected void beforeTest() {\n+        String connectionString = interceptorManager.isPlaybackMode()\n+            ? \"DefaultEndpointsProtocol=https;AccountName=dummyAccount;AccountKey=xyzDummy;EndpointSuffix=core.windows.net\"\n+            : System.getenv(\"AZURE_TABLES_CONNECTION_STRING\");\n+        StorageConnectionString storageConnectionString\n+            = StorageConnectionString.create(connectionString, new ClientLogger(AzureTableImplTest.class));\n+\n+        StorageAuthenticationSettings authSettings = storageConnectionString.getStorageAuthSettings();\n+        TablesSharedKeyCredential sharedKeyCredential = new TablesSharedKeyCredential(authSettings.getAccount().getName(),\n+            authSettings.getAccount().getAccessKey());\n+\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+        policies.add(new AddDatePolicy());\n+        policies.add(new AddHeadersPolicy(new HttpHeaders().put(\"Accept\",\n+            OdataMetadataFormat.APPLICATION_JSON_ODATA_MINIMALMETADATA.toString())));\n+        policies.add(new TablesSharedKeyCredentialPolicy(sharedKeyCredential));\n+        policies.add(new HttpLoggingPolicy(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)));\n+\n+        HttpClient httpClientToUse;\n+        if (interceptorManager.isPlaybackMode()) {\n+            httpClientToUse = interceptorManager.getPlaybackClient();\n+        } else {\n+            httpClientToUse = HttpClient.createDefault();\n+            policies.add(interceptorManager.getRecordPolicy());\n+            policies.add(new RetryPolicy());\n+        }\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .httpClient(httpClientToUse)\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .build();\n+        azureTable = new AzureTableImplBuilder()\n+            .pipeline(pipeline)\n+            .version(\"2019-02-02\")\n+            .url(storageConnectionString.getTableEndpoint().getPrimaryUri())\n+            .buildClient();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        QueryOptions queryOptions = new QueryOptions()\n+            .setFormat(OdataMetadataFormat.APPLICATION_JSON_ODATA_MINIMALMETADATA);\n+\n+        Mono.when(azureTable.getTables().queryWithResponseAsync(testResourceNamer.randomUuid(), null,\n+            queryOptions, Context.NONE).flatMapMany(tablesQueryResponse -> {\n+                return Flux.fromIterable(tablesQueryResponse.getValue().getValue()).flatMap(tableResponseProperty -> {\n+                    return azureTable.getTables().deleteWithResponseAsync(tableResponseProperty.getTableName(),\n+                        testResourceNamer.randomUuid(), Context.NONE);\n+                });\n+            })).block();\n+    }\n+\n+    void createTable(String tableName) {\n+        TableProperties tableProperties = new TableProperties().setTableName(tableName);\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        azureTable.getTables().createWithResponseAsync(tableProperties, requestId,\n+            ResponseFormat.RETURN_CONTENT, null, Context.NONE).block();\n+\n+\n+    }\n+\n+    void insertNoETag(String tableName, Map<String, Object> properties) {\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        azureTable.getTables().insertEntityWithResponseAsync(tableName, TIMEOUT,\n+            requestId, ResponseFormat.RETURN_CONTENT, properties, null, Context.NONE).log().block();\n+    }\n+\n+    @Test\n+    void createTable() {\n+        // Arrange\n+        String tableName = testResourceNamer.randomName(\"test\", 20);\n+        TableProperties tableProperties = new TableProperties().setTableName(tableName);\n+        int expectedStatusCode = 201;\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        // Act & Assert\n+        StepVerifier.create(azureTable.getTables().createWithResponseAsync(tableProperties,\n+            requestId, ResponseFormat.RETURN_CONTENT, null, Context.NONE))\n+            .assertNext(response -> {\n+                Assertions.assertEquals(expectedStatusCode, response.getStatusCode());\n+            })\n+            .expectComplete()\n+            .verify();\n+    }\n+\n+    @Test\n+    void createTableDuplicateName() {\n+        // Arrange\n+        String tableName = testResourceNamer.randomName(\"test\", 20);\n+        TableProperties tableProperties = new TableProperties().setTableName(tableName);\n+        createTable(tableName);\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        // Act & Assert\n+        StepVerifier.create(azureTable.getTables().createWithResponseAsync(tableProperties,\n+            requestId, ResponseFormat.RETURN_CONTENT, null, Context.NONE))\n+            .expectError(com.azure.data.tables.implementation.models.TableServiceErrorException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea32e09cd5702979314b2785c0fc96041edb1d16"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4NTA5MA==", "bodyText": "Adding a couple of assertions may prevent null pointer exceptions and out of bounds exceptions (if there are not 2 elements in the table).\nassertNotNull(response.getValue(), \"Expected there to be a result.\");\n\nvar results = response.getValue().getValue();\n\nassertNotNull(results, \"Expected there to be a set of items.\");\nassertEquals(2, results.getSize());\n\n//... your other assertions.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r449185090", "createdAt": "2020-07-02T18:01:44Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/AzureTableImplTest.java", "diffHunk": "@@ -0,0 +1,519 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.storage.common.implementation.connectionstring.StorageAuthenticationSettings;\n+import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+/**\n+ * This class tests the Autorest code for the Tables track 2 SDK\n+ */\n+public class AzureTableImplTest extends TestBase {\n+    private static final String PARTITION_KEY = \"PartitionKey\";\n+    private static final String ROW_KEY = \"RowKey\";\n+    private static final int TIMEOUT = 5000;\n+    private AzureTableImpl azureTable;\n+\n+    @Override\n+    protected void beforeTest() {\n+        String connectionString = interceptorManager.isPlaybackMode()\n+            ? \"DefaultEndpointsProtocol=https;AccountName=dummyAccount;AccountKey=xyzDummy;EndpointSuffix=core.windows.net\"\n+            : System.getenv(\"AZURE_TABLES_CONNECTION_STRING\");\n+        StorageConnectionString storageConnectionString\n+            = StorageConnectionString.create(connectionString, new ClientLogger(AzureTableImplTest.class));\n+\n+        StorageAuthenticationSettings authSettings = storageConnectionString.getStorageAuthSettings();\n+        TablesSharedKeyCredential sharedKeyCredential = new TablesSharedKeyCredential(authSettings.getAccount().getName(),\n+            authSettings.getAccount().getAccessKey());\n+\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+        policies.add(new AddDatePolicy());\n+        policies.add(new AddHeadersPolicy(new HttpHeaders().put(\"Accept\",\n+            OdataMetadataFormat.APPLICATION_JSON_ODATA_MINIMALMETADATA.toString())));\n+        policies.add(new TablesSharedKeyCredentialPolicy(sharedKeyCredential));\n+        policies.add(new HttpLoggingPolicy(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)));\n+\n+        HttpClient httpClientToUse;\n+        if (interceptorManager.isPlaybackMode()) {\n+            httpClientToUse = interceptorManager.getPlaybackClient();\n+        } else {\n+            httpClientToUse = HttpClient.createDefault();\n+            policies.add(interceptorManager.getRecordPolicy());\n+            policies.add(new RetryPolicy());\n+        }\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .httpClient(httpClientToUse)\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .build();\n+        azureTable = new AzureTableImplBuilder()\n+            .pipeline(pipeline)\n+            .version(\"2019-02-02\")\n+            .url(storageConnectionString.getTableEndpoint().getPrimaryUri())\n+            .buildClient();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        QueryOptions queryOptions = new QueryOptions()\n+            .setFormat(OdataMetadataFormat.APPLICATION_JSON_ODATA_MINIMALMETADATA);\n+\n+        Mono.when(azureTable.getTables().queryWithResponseAsync(testResourceNamer.randomUuid(), null,\n+            queryOptions, Context.NONE).flatMapMany(tablesQueryResponse -> {\n+                return Flux.fromIterable(tablesQueryResponse.getValue().getValue()).flatMap(tableResponseProperty -> {\n+                    return azureTable.getTables().deleteWithResponseAsync(tableResponseProperty.getTableName(),\n+                        testResourceNamer.randomUuid(), Context.NONE);\n+                });\n+            })).block();\n+    }\n+\n+    void createTable(String tableName) {\n+        TableProperties tableProperties = new TableProperties().setTableName(tableName);\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        azureTable.getTables().createWithResponseAsync(tableProperties, requestId,\n+            ResponseFormat.RETURN_CONTENT, null, Context.NONE).block();\n+\n+\n+    }\n+\n+    void insertNoETag(String tableName, Map<String, Object> properties) {\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        azureTable.getTables().insertEntityWithResponseAsync(tableName, TIMEOUT,\n+            requestId, ResponseFormat.RETURN_CONTENT, properties, null, Context.NONE).log().block();\n+    }\n+\n+    @Test\n+    void createTable() {\n+        // Arrange\n+        String tableName = testResourceNamer.randomName(\"test\", 20);\n+        TableProperties tableProperties = new TableProperties().setTableName(tableName);\n+        int expectedStatusCode = 201;\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        // Act & Assert\n+        StepVerifier.create(azureTable.getTables().createWithResponseAsync(tableProperties,\n+            requestId, ResponseFormat.RETURN_CONTENT, null, Context.NONE))\n+            .assertNext(response -> {\n+                Assertions.assertEquals(expectedStatusCode, response.getStatusCode());\n+            })\n+            .expectComplete()\n+            .verify();\n+    }\n+\n+    @Test\n+    void createTableDuplicateName() {\n+        // Arrange\n+        String tableName = testResourceNamer.randomName(\"test\", 20);\n+        TableProperties tableProperties = new TableProperties().setTableName(tableName);\n+        createTable(tableName);\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        // Act & Assert\n+        StepVerifier.create(azureTable.getTables().createWithResponseAsync(tableProperties,\n+            requestId, ResponseFormat.RETURN_CONTENT, null, Context.NONE))\n+            .expectError(com.azure.data.tables.implementation.models.TableServiceErrorException.class)\n+            .verify();\n+    }\n+\n+    @Test\n+    void deleteTable() {\n+        // Arrange\n+        String tableName = testResourceNamer.randomName(\"test\", 20);\n+        createTable(tableName);\n+        int expectedStatusCode = 204;\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        // Act & Assert\n+        StepVerifier.create(azureTable.getTables().deleteWithResponseAsync(tableName, requestId,\n+            Context.NONE))\n+            .assertNext(response -> {\n+                Assertions.assertEquals(expectedStatusCode, response.getStatusCode());\n+            })\n+            .expectComplete()\n+            .verify();\n+    }\n+\n+    @Test\n+    void deleteNonExistentTable() {\n+        // Arrange\n+        String tableName = testResourceNamer.randomName(\"test\", 20);\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        // Act & Assert\n+        StepVerifier.create(azureTable.getTables().deleteWithResponseAsync(tableName, requestId,\n+            Context.NONE))\n+            .expectError(com.azure.data.tables.implementation.models.TableServiceErrorException.class)\n+            .verify();\n+    }\n+\n+    @Test\n+    void queryTable() {\n+        // Arrange\n+        QueryOptions queryOptions = new QueryOptions()\n+            .setFormat(OdataMetadataFormat.APPLICATION_JSON_ODATA_MINIMALMETADATA);\n+        String tableA = testResourceNamer.randomName(\"AtestA\", 20);\n+        String tableB = testResourceNamer.randomName(\"BtestB\", 20);\n+        createTable(tableA);\n+        createTable(tableB);\n+        int expectedStatusCode = 200;\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        // Act & Assert\n+        StepVerifier.create(azureTable.getTables().queryWithResponseAsync(requestId, null,\n+            queryOptions, Context.NONE))\n+            .assertNext(response -> {\n+                Assertions.assertEquals(expectedStatusCode, response.getStatusCode());\n+                Assertions.assertEquals(response.getValue().getValue().get(0).getTableName(), tableA);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea32e09cd5702979314b2785c0fc96041edb1d16"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4NTI5OA==", "bodyText": "Same with any other instances where you do this .getValue().getValue().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r449185298", "createdAt": "2020-07-02T18:02:11Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/AzureTableImplTest.java", "diffHunk": "@@ -0,0 +1,519 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.storage.common.implementation.connectionstring.StorageAuthenticationSettings;\n+import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+/**\n+ * This class tests the Autorest code for the Tables track 2 SDK\n+ */\n+public class AzureTableImplTest extends TestBase {\n+    private static final String PARTITION_KEY = \"PartitionKey\";\n+    private static final String ROW_KEY = \"RowKey\";\n+    private static final int TIMEOUT = 5000;\n+    private AzureTableImpl azureTable;\n+\n+    @Override\n+    protected void beforeTest() {\n+        String connectionString = interceptorManager.isPlaybackMode()\n+            ? \"DefaultEndpointsProtocol=https;AccountName=dummyAccount;AccountKey=xyzDummy;EndpointSuffix=core.windows.net\"\n+            : System.getenv(\"AZURE_TABLES_CONNECTION_STRING\");\n+        StorageConnectionString storageConnectionString\n+            = StorageConnectionString.create(connectionString, new ClientLogger(AzureTableImplTest.class));\n+\n+        StorageAuthenticationSettings authSettings = storageConnectionString.getStorageAuthSettings();\n+        TablesSharedKeyCredential sharedKeyCredential = new TablesSharedKeyCredential(authSettings.getAccount().getName(),\n+            authSettings.getAccount().getAccessKey());\n+\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+        policies.add(new AddDatePolicy());\n+        policies.add(new AddHeadersPolicy(new HttpHeaders().put(\"Accept\",\n+            OdataMetadataFormat.APPLICATION_JSON_ODATA_MINIMALMETADATA.toString())));\n+        policies.add(new TablesSharedKeyCredentialPolicy(sharedKeyCredential));\n+        policies.add(new HttpLoggingPolicy(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)));\n+\n+        HttpClient httpClientToUse;\n+        if (interceptorManager.isPlaybackMode()) {\n+            httpClientToUse = interceptorManager.getPlaybackClient();\n+        } else {\n+            httpClientToUse = HttpClient.createDefault();\n+            policies.add(interceptorManager.getRecordPolicy());\n+            policies.add(new RetryPolicy());\n+        }\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .httpClient(httpClientToUse)\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .build();\n+        azureTable = new AzureTableImplBuilder()\n+            .pipeline(pipeline)\n+            .version(\"2019-02-02\")\n+            .url(storageConnectionString.getTableEndpoint().getPrimaryUri())\n+            .buildClient();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        QueryOptions queryOptions = new QueryOptions()\n+            .setFormat(OdataMetadataFormat.APPLICATION_JSON_ODATA_MINIMALMETADATA);\n+\n+        Mono.when(azureTable.getTables().queryWithResponseAsync(testResourceNamer.randomUuid(), null,\n+            queryOptions, Context.NONE).flatMapMany(tablesQueryResponse -> {\n+                return Flux.fromIterable(tablesQueryResponse.getValue().getValue()).flatMap(tableResponseProperty -> {\n+                    return azureTable.getTables().deleteWithResponseAsync(tableResponseProperty.getTableName(),\n+                        testResourceNamer.randomUuid(), Context.NONE);\n+                });\n+            })).block();\n+    }\n+\n+    void createTable(String tableName) {\n+        TableProperties tableProperties = new TableProperties().setTableName(tableName);\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        azureTable.getTables().createWithResponseAsync(tableProperties, requestId,\n+            ResponseFormat.RETURN_CONTENT, null, Context.NONE).block();\n+\n+\n+    }\n+\n+    void insertNoETag(String tableName, Map<String, Object> properties) {\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        azureTable.getTables().insertEntityWithResponseAsync(tableName, TIMEOUT,\n+            requestId, ResponseFormat.RETURN_CONTENT, properties, null, Context.NONE).log().block();\n+    }\n+\n+    @Test\n+    void createTable() {\n+        // Arrange\n+        String tableName = testResourceNamer.randomName(\"test\", 20);\n+        TableProperties tableProperties = new TableProperties().setTableName(tableName);\n+        int expectedStatusCode = 201;\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        // Act & Assert\n+        StepVerifier.create(azureTable.getTables().createWithResponseAsync(tableProperties,\n+            requestId, ResponseFormat.RETURN_CONTENT, null, Context.NONE))\n+            .assertNext(response -> {\n+                Assertions.assertEquals(expectedStatusCode, response.getStatusCode());\n+            })\n+            .expectComplete()\n+            .verify();\n+    }\n+\n+    @Test\n+    void createTableDuplicateName() {\n+        // Arrange\n+        String tableName = testResourceNamer.randomName(\"test\", 20);\n+        TableProperties tableProperties = new TableProperties().setTableName(tableName);\n+        createTable(tableName);\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        // Act & Assert\n+        StepVerifier.create(azureTable.getTables().createWithResponseAsync(tableProperties,\n+            requestId, ResponseFormat.RETURN_CONTENT, null, Context.NONE))\n+            .expectError(com.azure.data.tables.implementation.models.TableServiceErrorException.class)\n+            .verify();\n+    }\n+\n+    @Test\n+    void deleteTable() {\n+        // Arrange\n+        String tableName = testResourceNamer.randomName(\"test\", 20);\n+        createTable(tableName);\n+        int expectedStatusCode = 204;\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        // Act & Assert\n+        StepVerifier.create(azureTable.getTables().deleteWithResponseAsync(tableName, requestId,\n+            Context.NONE))\n+            .assertNext(response -> {\n+                Assertions.assertEquals(expectedStatusCode, response.getStatusCode());\n+            })\n+            .expectComplete()\n+            .verify();\n+    }\n+\n+    @Test\n+    void deleteNonExistentTable() {\n+        // Arrange\n+        String tableName = testResourceNamer.randomName(\"test\", 20);\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        // Act & Assert\n+        StepVerifier.create(azureTable.getTables().deleteWithResponseAsync(tableName, requestId,\n+            Context.NONE))\n+            .expectError(com.azure.data.tables.implementation.models.TableServiceErrorException.class)\n+            .verify();\n+    }\n+\n+    @Test\n+    void queryTable() {\n+        // Arrange\n+        QueryOptions queryOptions = new QueryOptions()\n+            .setFormat(OdataMetadataFormat.APPLICATION_JSON_ODATA_MINIMALMETADATA);\n+        String tableA = testResourceNamer.randomName(\"AtestA\", 20);\n+        String tableB = testResourceNamer.randomName(\"BtestB\", 20);\n+        createTable(tableA);\n+        createTable(tableB);\n+        int expectedStatusCode = 200;\n+        String requestId = testResourceNamer.randomUuid();\n+\n+        // Act & Assert\n+        StepVerifier.create(azureTable.getTables().queryWithResponseAsync(requestId, null,\n+            queryOptions, Context.NONE))\n+            .assertNext(response -> {\n+                Assertions.assertEquals(expectedStatusCode, response.getStatusCode());\n+                Assertions.assertEquals(response.getValue().getValue().get(0).getTableName(), tableA);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4NTA5MA=="}, "originalCommit": {"oid": "ea32e09cd5702979314b2785c0fc96041edb1d16"}, "originalPosition": 197}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxOTg2Nzg2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#pullrequestreview-441986786", "createdAt": "2020-07-02T20:05:37Z", "commit": {"oid": "d021dabc042d21ab4cd067e46374349a59620ed6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "576d2be4c20b40af506a25084bfa986a265af571", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/576d2be4c20b40af506a25084bfa986a265af571", "committedDate": "2020-07-06T16:13:57Z", "message": "apply old"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dea249813611e57055a83221b4d7e5a823b98433", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/dea249813611e57055a83221b4d7e5a823b98433", "committedDate": "2020-07-06T16:13:57Z", "message": "apply old"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "081200a0298e7c731f0166492c7bcf1da7e86dfa", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/081200a0298e7c731f0166492c7bcf1da7e86dfa", "committedDate": "2020-07-06T16:13:58Z", "message": "testing works on this commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6ea265119493a81cf996c6355a1af8b817ed97f", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f6ea265119493a81cf996c6355a1af8b817ed97f", "committedDate": "2020-07-06T16:13:58Z", "message": "stashing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e1efd8d6f6f398fb9690f84a5e6cc0d59406fa7", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1e1efd8d6f6f398fb9690f84a5e6cc0d59406fa7", "committedDate": "2020-07-06T16:13:59Z", "message": "additional testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2397b8810e7ff99fd5cd3372ed993903861178f9", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2397b8810e7ff99fd5cd3372ed993903861178f9", "committedDate": "2020-07-06T16:13:59Z", "message": "stashing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2e8eb76197132c777e93c39fa4b1b074f56c603", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c2e8eb76197132c777e93c39fa4b1b074f56c603", "committedDate": "2020-07-06T16:14:00Z", "message": "stashing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2ebec78d42b60b76636c62f583f27333a5d4eac", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b2ebec78d42b60b76636c62f583f27333a5d4eac", "committedDate": "2020-07-06T16:14:00Z", "message": "adding tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d54ae2589a45cb82c2924e3283390ac41416db60", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d54ae2589a45cb82c2924e3283390ac41416db60", "committedDate": "2020-07-06T16:14:01Z", "message": "fixing format and POM"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac21a3d8424c519f6625b942013ccd24be521419", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ac21a3d8424c519f6625b942013ccd24be521419", "committedDate": "2020-07-06T16:14:01Z", "message": "arrange-act-assert formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5086d4a027c554f6e92e70dea6826ab490eafef1", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5086d4a027c554f6e92e70dea6826ab490eafef1", "committedDate": "2020-07-06T16:14:02Z", "message": "stashing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68f0cea590c956daa39b7d872c4364f3eacdb23b", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/68f0cea590c956daa39b7d872c4364f3eacdb23b", "committedDate": "2020-07-06T16:14:02Z", "message": "adding tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f13cca62df7e45a2c50b3d4cd359be7f9f57ce8f", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f13cca62df7e45a2c50b3d4cd359be7f9f57ce8f", "committedDate": "2020-07-06T16:14:03Z", "message": "reformat"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4c187aa25bd34061ae38ae9e73e78d48452441d", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d4c187aa25bd34061ae38ae9e73e78d48452441d", "committedDate": "2020-07-06T16:14:03Z", "message": "remove system prints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "335d6466c22b1a4627c8421ae3dd755fc116d22b", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/335d6466c22b1a4627c8421ae3dd755fc116d22b", "committedDate": "2020-07-06T16:14:04Z", "message": "adding playback jsons"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7133df8f93b09eaf4516358afe576aaf4b0cafaa", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7133df8f93b09eaf4516358afe576aaf4b0cafaa", "committedDate": "2020-07-06T16:14:04Z", "message": "recent changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "228156326b252966c73e54c7a060c00919aedc1c", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/228156326b252966c73e54c7a060c00919aedc1c", "committedDate": "2020-07-06T16:14:04Z", "message": "fix pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba399fec3d59a5f153eaa686f55ee19b12669afb", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ba399fec3d59a5f153eaa686f55ee19b12669afb", "committedDate": "2020-07-06T16:14:05Z", "message": "playback mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca8b84cd7710bc99158f72f9638de6cdd6dbb1fc", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ca8b84cd7710bc99158f72f9638de6cdd6dbb1fc", "committedDate": "2020-07-06T16:14:05Z", "message": "fix incorrect changes in readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e849c5e99a39bc9f5689ade548c1ca571eaaeee6", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e849c5e99a39bc9f5689ade548c1ca571eaaeee6", "committedDate": "2020-07-06T16:14:06Z", "message": "fix pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0216fde8f8ff614a2c2f5e2e6bce830cc333d0bf", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0216fde8f8ff614a2c2f5e2e6bce830cc333d0bf", "committedDate": "2020-07-06T16:14:06Z", "message": "fixing pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b9e9061dfb93cab68e37eff4d7e1b0e89ae7acc", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b9e9061dfb93cab68e37eff4d7e1b0e89ae7acc", "committedDate": "2020-07-06T16:14:07Z", "message": "fixing version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3558d0ff128d30b2c1f2afcfc4904b867f548118", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3558d0ff128d30b2c1f2afcfc4904b867f548118", "committedDate": "2020-07-06T16:14:07Z", "message": "fix impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f24375c8497049fc28769cf423b744a64140c54", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5f24375c8497049fc28769cf423b744a64140c54", "committedDate": "2020-07-06T16:14:08Z", "message": "fixing checkstyles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "229116aaa26c607df3e10bfa61bbb5f9d5789e12", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/229116aaa26c607df3e10bfa61bbb5f9d5789e12", "committedDate": "2020-07-06T16:14:08Z", "message": "fixing checkstyles p2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06e255ae3fcb37d56b0412f67375ed574ee4315d", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/06e255ae3fcb37d56b0412f67375ed574ee4315d", "committedDate": "2020-07-06T16:14:09Z", "message": "connie edits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cb259d9e3e0ae67df1298859967542bb5f5d616", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8cb259d9e3e0ae67df1298859967542bb5f5d616", "committedDate": "2020-07-06T16:14:09Z", "message": "connie edits 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b19368ddc8c4a2d0502e08fd1d9308b0266f97e", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9b19368ddc8c4a2d0502e08fd1d9308b0266f97e", "committedDate": "2020-07-06T16:14:09Z", "message": "forgot in last commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cef982047a3933ea2dd07bce97f2431e7f3bd446", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cef982047a3933ea2dd07bce97f2431e7f3bd446", "committedDate": "2020-07-06T16:14:10Z", "message": "add changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1315b59085b02137cbff91dfafd4f157325aacc7", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1315b59085b02137cbff91dfafd4f157325aacc7", "committedDate": "2020-07-06T16:14:10Z", "message": "connie comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74c33b5ae8b9225a49a75a6f716ae0cc9db69553", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/74c33b5ae8b9225a49a75a6f716ae0cc9db69553", "committedDate": "2020-07-06T16:14:10Z", "message": "fixing pipeline issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMjc1Mzg5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#pullrequestreview-443275389", "createdAt": "2020-07-06T17:29:02Z", "commit": {"oid": "773e428175ff8253525b1a4501e321d535dedfc2"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzoyOTowMlrOGtgqfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzoyOTowMlrOGtgqfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDI3MA==", "bodyText": "I'd add an assertion here so we don't continue the test if the set-up was incorrect.\nAssertions.notNull(connectionString, \"Cannot continue test if connectionString is not set.\");", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12512#discussion_r450374270", "createdAt": "2020-07-06T17:29:02Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/AzureTableImplTest.java", "diffHunk": "@@ -0,0 +1,525 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.data.tables.implementation.models.TableResponseProperties;\n+import com.azure.data.tables.implementation.models.TableServiceErrorException;\n+import com.azure.storage.common.implementation.connectionstring.StorageAuthenticationSettings;\n+import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+/**\n+ * This class tests the Autorest code for the Tables track 2 SDK\n+ */\n+public class AzureTableImplTest extends TestBase {\n+    private static final String PARTITION_KEY = \"PartitionKey\";\n+    private static final String ROW_KEY = \"RowKey\";\n+    private static final int TIMEOUT = 5000;\n+    private AzureTableImpl azureTable;\n+\n+    @Override\n+    protected void beforeTest() {\n+        String connectionString = interceptorManager.isPlaybackMode()\n+            ? \"DefaultEndpointsProtocol=https;AccountName=dummyAccount;AccountKey=xyzDummy;EndpointSuffix=core.windows.net\"\n+            : System.getenv(\"AZURE_TABLES_CONNECTION_STRING\");\n+        StorageConnectionString storageConnectionString\n+            = StorageConnectionString.create(connectionString, new ClientLogger(AzureTableImplTest.class));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773e428175ff8253525b1a4501e321d535dedfc2"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1351fbe5d2be2cfc74fd392bc3a2700e3ef30429", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1351fbe5d2be2cfc74fd392bc3a2700e3ef30429", "committedDate": "2020-07-06T19:04:51Z", "message": "assertion for setup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7f84007ae445a0caabfac87b4a69ad9a81cec3c", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b7f84007ae445a0caabfac87b4a69ad9a81cec3c", "committedDate": "2020-07-06T19:08:03Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into testingAutorestTables"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "773e428175ff8253525b1a4501e321d535dedfc2", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/773e428175ff8253525b1a4501e321d535dedfc2", "committedDate": "2020-07-06T16:11:39Z", "message": "fixing pipeline issues"}, "afterCommit": {"oid": "b7f84007ae445a0caabfac87b4a69ad9a81cec3c", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b7f84007ae445a0caabfac87b4a69ad9a81cec3c", "committedDate": "2020-07-06T19:08:03Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into testingAutorestTables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "767bfdf1968d3f9122241ef5a0ac973102ed2aac", "author": {"user": {"login": "eboyd23", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/767bfdf1968d3f9122241ef5a0ac973102ed2aac", "committedDate": "2020-07-07T18:38:56Z", "message": "fix impl"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2930, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}