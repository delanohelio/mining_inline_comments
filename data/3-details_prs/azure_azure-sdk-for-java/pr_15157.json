{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MzM3NTgy", "number": 15157, "title": "Fix for RNTBDChannelPool task queue starvation", "bodyText": "Fixing a few different things we found that we think are suspicious through the marathon joint debugging session:\nJoint work:\n@xinlian12 Annie\n@mbhaskar Bhaskar\n@David-Noble-at-work David\n@FabianMeiswinkel Fabian\n@kirankumarkolli Kiran\n@kushagraThapar Kushagra\n@ealsur Matias\n@milismsft Milis\n@moderakh (myself) Mo\n@simplynaveen20 Naveen\n@ramrajprabu Ramraj\n\n\nFixed a race condition that resulted in too many connections being established because not all access to RntbdClientChannelPool.acquiredchannels and RntbdClientChannelPool.availableChannels and RntbdClientChannelPool.connecting was happening form the executor's event loop thread\n\n\nFixed a race condition that resulted in not resetting the RntbdClientChannelPool.connecting flag\n\n\nReduced the number of events being enqueued in the RntbdClientChannelPool.executor's event loop for pending acquisition requests\n\n\nFixed NPE in RntbdClientChannelPool.acquireChannel\n\n\nIsolate the execution of expired request in a separate executor", "createdAt": "2020-09-14T05:25:20Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157", "merged": true, "mergeCommit": {"oid": "5e3fa77e2721545e0a0a11f26093c635abe6bd34"}, "closed": true, "closedAt": "2020-09-15T18:21:01Z", "author": {"login": "moderakh"}, "timelineItems": {"totalCount": 56, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdIYsJJAH2gAyNDg2MzM3NTgyOjk2NmEyMDI0YTQ0YzUyY2IxMjZjNGI2M2E5YTQ3YTBjMTVjZjBjMDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJJp6qgFqTQ4ODgxNDU4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "966a2024a44c52cb126c4b63a9a47a0c15cf0c04", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/966a2024a44c52cb126c4b63a9a47a0c15cf0c04", "committedDate": "2020-09-13T06:34:34Z", "message": "rntbd improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2d586efd129b5b76a68766cc51c84727a93b4ec", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d2d586efd129b5b76a68766cc51c84727a93b4ec", "committedDate": "2020-09-13T18:43:51Z", "message": "fixed latency issue and a race condition on close"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c8ff08638ad0b705b4db2949fe4b0b87b9683c3", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9c8ff08638ad0b705b4db2949fe4b0b87b9683c3", "committedDate": "2020-09-14T01:54:23Z", "message": "fixed race condition in connection management resulting in creating more connections, fixed a infinite loop issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "beb5fef10c2a3489f5a4ed28359936703de12df6", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/beb5fef10c2a3489f5a4ed28359936703de12df6", "committedDate": "2020-09-14T01:58:21Z", "message": "fixed compilation warning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2330f9d09f994ac1f1612bbd1e69eefc1e047b7a", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2330f9d09f994ac1f1612bbd1e69eefc1e047b7a", "committedDate": "2020-09-14T02:37:30Z", "message": "ensure the channel is servicable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "065b4929f13b0f5f8ce61387faa68a1f29d2d54d", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/065b4929f13b0f5f8ce61387faa68a1f29d2d54d", "committedDate": "2020-09-14T02:39:30Z", "message": "increase monitoring period"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4385fa967c5886c126329563885a611d42f748de", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4385fa967c5886c126329563885a611d42f748de", "committedDate": "2020-09-14T02:43:53Z", "message": "removed info debug logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a23badb7a9f86f7d5f158053322203549674606", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6a23badb7a9f86f7d5f158053322203549674606", "committedDate": "2020-09-14T04:37:21Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "committedDate": "2020-09-14T05:00:15Z", "message": "update condition"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NTQ5NzI5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487549729", "createdAt": "2020-09-14T08:53:40Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo1Mzo0MFrOHRKKlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo1Mzo0MFrOHRKKlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc1NDM5MA==", "bodyText": "Both metrics below are not consistent right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487754390", "createdAt": "2020-09-14T08:53:40Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdServiceEndpoint.java", "diffHunk": "@@ -111,12 +111,12 @@ private RntbdServiceEndpoint(\n \n     @Override\n     public int channelsAcquired() {\n-        return this.channelPool.channelsAcquired();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NTUxNDA5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487551409", "createdAt": "2020-09-14T08:55:41Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo1NTo0MVrOHRKPmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo1NTo0MVrOHRKPmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc1NTY3NA==", "bodyText": "requestExpirator [](start = 39, length = 16)\n\nnaming: suffix executor", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487755674", "createdAt": "2020-09-14T08:55:41Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -81,6 +84,11 @@\n     private static final ClosedChannelException ON_DEREGISTER =\n         ThrowableUtil.unknownStackTrace(new ClosedChannelException(), RntbdRequestManager.class, \"deregister\");\n \n+    private static final EventExecutor requestExpirator = new DefaultEventExecutor(new RntbdThreadFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NTY2MTI3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487566127", "createdAt": "2020-09-14T09:14:37Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOToxNDozN1rOHRK7hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOToxNDozN1rOHRK7hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2NjkxOQ==", "bodyText": "New requestManager is created per channel. #ThreadFactorys ~ #channels.\nIs this intentional?\nFor large outbound channels (ex: 6K parttions, how does it manifest?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487766919", "createdAt": "2020-09-14T09:14:37Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -81,6 +84,11 @@\n     private static final ClosedChannelException ON_DEREGISTER =\n         ThrowableUtil.unknownStackTrace(new ClosedChannelException(), RntbdRequestManager.class, \"deregister\");\n \n+    private static final EventExecutor requestExpirator = new DefaultEventExecutor(new RntbdThreadFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NTg5NDc4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487589478", "createdAt": "2020-09-14T09:45:16Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0NToxNlrOHRMCLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0NToxNlrOHRMCLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NTAwNQ==", "bodyText": "Clarification: Scheduling is to unblock timer-wheel right?\nThought: Leaving the choice to consumers is error prone, is it possible to force timer wheel it-self own and schedule on them (Of-course follow-up)?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487785005", "createdAt": "2020-09-14T09:45:16Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -567,13 +575,7 @@ private RntbdRequestRecord addPendingRequestRecord(final ChannelHandlerContext c\n             final Timeout pendingRequestTimeout = record.newTimeout(timeout -> {\n \n                 // We don't wish to complete on the timeout thread, but rather on a thread doled out by our executor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NTk1NTQy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487595542", "createdAt": "2020-09-14T09:53:18Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1MzoxOFrOHRMVGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1MzoxOFrOHRMVGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4OTg0OA==", "bodyText": "BacklogItem: gate the validation and detect future regressions.\nIts a generic comments not just spcific to this change.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487789848", "createdAt": "2020-09-14T09:53:18Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -567,13 +575,7 @@ private RntbdRequestRecord addPendingRequestRecord(final ChannelHandlerContext c\n             final Timeout pendingRequestTimeout = record.newTimeout(timeout -> {\n \n                 // We don't wish to complete on the timeout thread, but rather on a thread doled out by our executor\n-                final EventExecutor executor = context.executor();\n-\n-                if (executor.inEventLoop()) {\n-                    record.expire();\n-                } else {\n-                    executor.next().execute(record::expire);\n-                }\n+                requestExpirator.execute(record::expire);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NjA1NDAx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487605401", "createdAt": "2020-09-14T10:05:44Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowNTo0NFrOHRMydg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowNTo0NFrOHRMydg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NzM2Ng==", "bodyText": "Is the move to do-while for readability?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487797366", "createdAt": "2020-09-14T10:05:44Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1108,7 +1206,7 @@ private void runTasksInPendingAcquisitionQueue() {\n \n             task.acquired(true);\n             this.acquire(task.promise);\n-        }\n+        } while (--channelsAvailable> 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 508}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NjA1NjI1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487605625", "createdAt": "2020-09-14T10:06:03Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowNjowM1rOHRMzJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowNjowM1rOHRMzJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NzU0Mg==", "bodyText": "nit: (style) space before >", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487797542", "createdAt": "2020-09-14T10:06:03Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1108,7 +1206,7 @@ private void runTasksInPendingAcquisitionQueue() {\n \n             task.acquired(true);\n             this.acquire(task.promise);\n-        }\n+        } while (--channelsAvailable> 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 508}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NjA3Mjkw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487607290", "createdAt": "2020-09-14T10:08:24Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowODoyNFrOHRM4QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowODoyNFrOHRM4QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5ODg0OQ==", "bodyText": "Is this same as above ensureInEventLoop?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487798849", "createdAt": "2020-09-14T10:08:24Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1088,14 +1180,20 @@ private void releaseChannel(final Channel channel, final Promise<Void> promise)\n      * {@link #acquire}.\n      */\n     private void runTasksInPendingAcquisitionQueue() {\n+        ensureInEventLoop();\n \n         this.ensureInEventLoop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 487}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NjA5MzYx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487609361", "createdAt": "2020-09-14T10:11:04Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDoxMTowNFrOHRM-XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDoxMTowNFrOHRM-XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMDQxMw==", "bodyText": "Its very easy to slip stream changes violating the assumptions.\nWe need a mechanism to guard/detect (in order of preference) for these critical aspects.\nHow about fail in our gates/CTL/perf runs at-least?\nHow about doing all our current validations with fail semantics?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487800413", "createdAt": "2020-09-14T10:11:04Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1088,14 +1180,20 @@ private void releaseChannel(final Channel channel, final Promise<Void> promise)\n      * {@link #acquire}.\n      */\n     private void runTasksInPendingAcquisitionQueue() {\n+        ensureInEventLoop();\n \n         this.ensureInEventLoop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 487}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NjExMjI4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487611228", "createdAt": "2020-09-14T10:13:33Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDoxMzozM1rOHRNEEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDoxMzozM1rOHRNEEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMTg3Mg==", "bodyText": "In my runs instrumented to include the remoteendpoint and it was super useful too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487801872", "createdAt": "2020-09-14T10:13:33Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1332,4 +1430,36 @@ public synchronized Throwable fillInStackTrace() {\n     }\n \n     // endregion\n+\n+    // TODO: remove when we are confident of RNTBD OOM bug\n+    @SuppressWarnings(\"unchecked\")\n+    private ScheduledFuture<?> startMonitoring() {\n+        return monitoringRntbdChannelPool.scheduleAtFixedRate(() -> {\n+            int i = getTaskCount();\n+            if (isInterestingEndpoint()) {\n+                logger.debug(\"{} total number of tasks on the executor [{}], connecting [{}], acquiredChannel [{}], availableChannel [{}], pending acquisition [{}]\",\n+                    this.hashCode(), i, connecting.get(), acquiredChannels.size(), availableChannels.size(), pendingAcquisitions.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 535}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NjEyMjgx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487612281", "createdAt": "2020-09-14T10:15:00Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDoxNTowMFrOHRNHZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDoxNTowMFrOHRNHZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMjcyNw==", "bodyText": "One more I found useful is to list the channels and their interesting states (specifically the pendingoperations on channel was super useful).\nIt can be filtered on some threshold.\nMay be isInterestingEndpoint() can even be based on that threshold.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487802727", "createdAt": "2020-09-14T10:15:00Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1332,4 +1430,36 @@ public synchronized Throwable fillInStackTrace() {\n     }\n \n     // endregion\n+\n+    // TODO: remove when we are confident of RNTBD OOM bug\n+    @SuppressWarnings(\"unchecked\")\n+    private ScheduledFuture<?> startMonitoring() {\n+        return monitoringRntbdChannelPool.scheduleAtFixedRate(() -> {\n+            int i = getTaskCount();\n+            if (isInterestingEndpoint()) {\n+                logger.debug(\"{} total number of tasks on the executor [{}], connecting [{}], acquiredChannel [{}], availableChannel [{}], pending acquisition [{}]\",\n+                    this.hashCode(), i, connecting.get(), acquiredChannels.size(), availableChannels.size(), pendingAcquisitions.size());\n+            }\n+        }, 0, 60, TimeUnit.SECONDS);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 538}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NjM0MTAw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487634100", "createdAt": "2020-09-14T10:47:47Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo0Nzo0N1rOHROLeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo0Nzo0N1rOHROLeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyMDE1NA==", "bodyText": "Clarification(non-blocking): Any idea if netty duplex channel support timeout OOB?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487820154", "createdAt": "2020-09-14T10:47:47Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -567,13 +575,7 @@ private RntbdRequestRecord addPendingRequestRecord(final ChannelHandlerContext c\n             final Timeout pendingRequestTimeout = record.newTimeout(timeout -> {\n \n                 // We don't wish to complete on the timeout thread, but rather on a thread doled out by our executor\n-                final EventExecutor executor = context.executor();\n-\n-                if (executor.inEventLoop()) {\n-                    record.expire();\n-                } else {\n-                    executor.next().execute(record::expire);\n-                }\n+                requestExpirator.execute(record::expire);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzI4NTA2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487728506", "createdAt": "2020-09-14T13:01:20Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMToyMFrOHRSpcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMToyMFrOHRSpcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MzM2Mg==", "bodyText": "RntbdClientChannelPool is a ChannelPool.\nSo far my understanding is its an abstraction facilitating the pooling mechanism. Haven't seen it coupled with the core netty Channels or handlers.\nThe attribute is a way of correlating it with the pool. Below mechanism is to purely ensure that release done on the same pool.\nelse case is interesting. Closing on this channel will only release the underlying channel but the associated pool state will be in-consistent.\nMi-targeting can happen if there are multiple ServcieEndpints for the same remote address, which means idle-time handling.\nLets not gate these fixes on it.\nPlease remove this comment.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487893362", "createdAt": "2020-09-14T13:01:20Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1044,9 +1136,9 @@ private void releaseAndOfferChannelIfHealthy(\n      * promise} completes with an {@link IllegalStateException}.\n      */\n     private void releaseChannel(final Channel channel, final Promise<Void> promise) {\n-\n         checkState(channel.eventLoop().inEventLoop());\n \n+        // TODO: moderakh what is ChannelPool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 477}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzQwMDQy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487740042", "createdAt": "2020-09-14T13:14:40Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxNDo0MFrOHRTLeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxNDo0MFrOHRTLeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMjA3Mw==", "bodyText": "Did it help in any scenario or is it a defensive programming?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487902073", "createdAt": "2020-09-14T13:14:40Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -980,6 +1069,9 @@ private Channel pollChannel() {\n     private void releaseAndOfferChannel(final Channel channel, final Promise<Void> promise) {\n         this.ensureInEventLoop();\n         try {\n+\n+            // TODO: moderakh is this right?!!!!!\n+            this.acquiredChannels.remove(channel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 466}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzQxNjMz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487741633", "createdAt": "2020-09-14T13:16:24Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxNjoyNFrOHRTQbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxNjoyNFrOHRTQbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMzM0MA==", "bodyText": "Please add comments on reason for \"false' choice.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487903340", "createdAt": "2020-09-14T13:16:24Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -947,19 +1038,17 @@ private Channel pollChannel() {\n             return first;  // because this.close -> this.close0 -> this.pollChannel\n         }\n \n-        if (this.isChannelServiceable(first)) {\n+        if (this.isChannelServiceable(first, false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 442}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzQyNTcy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487742572", "createdAt": "2020-09-14T13:17:31Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxNzozMVrOHRTTTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxNzozMVrOHRTTTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNDA3Nw==", "bodyText": "Clarification: Any idea on why the first channel short circuit has a different pre-condition (isClosed())?\nOr why can't it be a simple loop and pick the one which is available?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487904077", "createdAt": "2020-09-14T13:17:31Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -947,19 +1038,17 @@ private Channel pollChannel() {\n             return first;  // because this.close -> this.close0 -> this.pollChannel\n         }\n \n-        if (this.isChannelServiceable(first)) {\n+        if (this.isChannelServiceable(first, false)) {\n             return first;\n         }\n \n         this.availableChannels.offer(first);  // because we need a non-null sentinel to stop the search for a channel\n \n-        for (Channel next = this.availableChannels.pollLast(); next != first; next =\n-            this.availableChannels.pollLast()) {\n-\n+        for (Channel next = this.availableChannels.pollLast(); next != first; next = this.availableChannels.pollLast()) {\n             assert next != null : \"impossible\";\n \n             if (next.isActive()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 454}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzQ1MjQz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487745243", "createdAt": "2020-09-14T13:20:02Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoyMDowMlrOHRTZ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoyMDowMlrOHRTZ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNTc4OQ==", "bodyText": "pollChannel [](start = 20, length = 11)\n\nI like the 'safe' naming convention used for new code.\nWorth adding that prefix for the same for other existing safe methods as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487905789", "createdAt": "2020-09-14T13:20:02Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -936,6 +1026,7 @@ private boolean offerChannel(final Channel channel) {\n      * @see #acquire(Promise)\n      */\n     private Channel pollChannel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 432}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzQ5MzE2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487749316", "createdAt": "2020-09-14T13:21:48Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoyMTo0OFrOHRTe5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoyMTo0OFrOHRTe5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNzA0NA==", "bodyText": "nit: remove extra line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487907044", "createdAt": "2020-09-14T13:21:48Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -884,8 +974,8 @@ private void notifyChannelHealthCheck(\n                 try {\n                     channel.attr(POOL_KEY).set(this);\n                     this.poolHandler.channelAcquired(channel);\n-                    this.acquiredChannels.put(channel, channel);\n                     promise.setSuccess(channel);\n+\n                 } catch (Throwable cause) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 426}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzcxNTk4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487771598", "createdAt": "2020-09-14T13:32:17Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozMjoxN1rOHRUARA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozMjoxN1rOHRUARA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxNTU4OA==", "bodyText": "Why is it pulled out of EventLoop ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487915588", "createdAt": "2020-09-14T13:32:17Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -661,6 +707,7 @@ private double computeLoadFactor() {\n     }\n \n     private void doAcquireChannel(final Promise<Channel> promise, final Channel candidate) {\n+        acquiredChannels.put(candidate, candidate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 271}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzczODQ0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487773844", "createdAt": "2020-09-14T13:34:40Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozNDo0MFrOHRUKCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozNDo0MFrOHRUKCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxODA4OA==", "bodyText": "Can these be made fully deterministic (like do either in the EventLoop or !EventLoop)?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487918088", "createdAt": "2020-09-14T13:34:40Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -561,15 +608,15 @@ private void acquireChannel(final Promise<Channel> promise) {\n      */\n     private void addTaskToPendingAcquisitionQueue(Promise<Channel> promise) {\n \n-        this.ensureInEventLoop();\n+//        this.ensureInEventLoop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 216}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3Nzc1NDM3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487775437", "createdAt": "2020-09-14T13:36:22Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozNjoyMlrOHRURJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozNjoyMlrOHRURJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxOTkxMA==", "bodyText": "Much of troubleshooting/investigation context is fresh in minds but will have a high decay factor.\nThoughts on capturing that fully context in the code.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487919910", "createdAt": "2020-09-14T13:36:22Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -495,7 +531,7 @@ private void acquireChannel(final Promise<Channel> promise) {\n                 return;\n             }\n \n-            final int channelCount = this.channels();\n+            final int channelCount = this.channels(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 153}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzgxNzU3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487781757", "createdAt": "2020-09-14T13:43:03Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo0MzowM1rOHRUslQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo0MzowM1rOHRUslQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyNjkzMw==", "bodyText": "Tracing the remoteendpint of channel will be quite useful during troubleshooting.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487926933", "createdAt": "2020-09-14T13:43:03Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -525,20 +561,31 @@ private void acquireChannel(final Promise<Channel> promise) {\n                 for (Channel channel : this.availableChannels) {\n \n                     final RntbdRequestManager manager = channel.pipeline().get(RntbdRequestManager.class);\n-                    final long pendingRequestCount = manager.pendingRequestCount();\n \n-                    if (pendingRequestCount < pendingRequestCountMin) {\n-                        pendingRequestCountMin = pendingRequestCount;\n-                        candidate = channel;\n+                    if (manager == null) {\n+                        logger.warn(\"Channel({}) closed\", channel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 179}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3ODAxNjgy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487801682", "createdAt": "2020-09-14T14:03:24Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDowMzoyNFrOHRWAeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDowMzoyNFrOHRWAeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk0ODQwOA==", "bodyText": "Concurrent select of a channel is fine right?\nIf so will there be multple release calls for the channel as well?\nWill this looped over long time lead to un-intended overload of channels?\nMy assumption is the channel usage is guarded by the EvetnLoop so even the same channel is given back multiple timeback then it should be okey right?\nWith the same assumption and assuming that uneven load-balacing with-in limits is acceptable, then will a single queue and linear check of availability work?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487948408", "createdAt": "2020-09-14T14:03:24Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -525,20 +561,31 @@ private void acquireChannel(final Promise<Channel> promise) {\n                 for (Channel channel : this.availableChannels) {\n \n                     final RntbdRequestManager manager = channel.pipeline().get(RntbdRequestManager.class);\n-                    final long pendingRequestCount = manager.pendingRequestCount();\n \n-                    if (pendingRequestCount < pendingRequestCountMin) {\n-                        pendingRequestCountMin = pendingRequestCount;\n-                        candidate = channel;\n+                    if (manager == null) {\n+                        logger.warn(\"Channel({}) closed\", channel);\n+                    } else {\n+                        final long pendingRequestCount = manager.pendingRequestCount();\n+                        if (isChannelServiceable(channel, true) && pendingRequestCount < pendingRequestCountMin) {\n+                            pendingRequestCountMin = pendingRequestCount;\n+                            candidate = channel;\n+                        }\n                     }\n                 }\n \n-                assert candidate != null;\n-\n-                this.availableChannels.remove(candidate);\n-                doAcquireChannel(promise, candidate);\n-\n-                return;\n+                if (candidate != null && this.availableChannels.remove(candidate)) {\n+                    this.doAcquireChannel(promise, candidate);\n+                    return;\n+                }\n+            } else {\n+                for (Channel channel : this.availableChannels) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 200}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3ODE0MDYy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487814062", "createdAt": "2020-09-14T14:14:17Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoxNDoxN1rOHRW14A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoxNDoxN1rOHRW14A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk2MjA4MA==", "bodyText": "+1 to this pattern.\nearlier might look okey as poolHandler notification is very light weight and almost doesn't fail, but this is a pattern we should force in reviews.\nThanks,", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487962080", "createdAt": "2020-09-14T14:14:17Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -839,43 +902,70 @@ private void newTimeout(\n             }, requestTimerResolutionInNanos, TimeUnit.NANOSECONDS));\n     }\n \n+    private void safeNotifyChannelConnect(final ChannelFuture future, final Promise<Channel> promise) {\n+        if (this.executor.inEventLoop()) {\n+            notifyChannelConnect(future, promise);\n+        } else {\n+            this.executor.submit(() ->  notifyChannelConnect(future, promise));\n+        }\n+    }\n+\n     private void notifyChannelConnect(final ChannelFuture future, final Promise<Channel> promise) {\n+        ensureInEventLoop();\n \n         reportIssueUnless(logger, this.connecting.get(), this, \"connecting: false\");\n \n-        if (future.isSuccess()) {\n+        try {\n+            if (future.isSuccess()) {\n+                final Channel channel = future.channel();\n \n-            final Channel channel = future.channel();\n+                try {\n+                    this.poolHandler.channelAcquired(channel);\n+                } catch (Throwable error) {\n+                    this.closeChannelAndFail(channel, error, promise);\n+                    return;\n+                }\n \n-            try {\n-                this.poolHandler.channelAcquired(channel);\n-            } catch (Throwable error) {\n-                this.closeChannelAndFail(channel, error, promise);\n-                return;\n-            }\n+                if (promise.trySuccess(channel)) {\n+\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"established a channel local {}, remote {}\", channel.localAddress(), channel.remoteAddress());\n+                    }\n+                    this.acquiredChannels.compute(channel, (ignored, acquiredChannel) -> {\n+                        //                    reportIssueUnless(logger, v == null, this, \"expected null channel, not {}\", v);\n+\n+                        reportIssueUnless(logger, acquiredChannel == null, this,\n+                            \"Channel({}) to be acquired has already been acquired\",\n+                            channel);\n+                        reportIssueUnless(logger, !this.availableChannels.remove(channel), this,\n+                            \"Channel({}) to be acquired is still in the list of available channels\",\n+                            channel);\n+\n+                        return channel;\n+                    });\n+                } else {\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"notifyChannelConnect promise.trySuccess(channel)=false\");\n+                    }\n+                    // Promise was completed in the meantime (like cancelled), just close the channel\n+                    this.closeChannel(channel);\n+                }\n \n-            if (promise.trySuccess(channel)) {\n-                this.acquiredChannels.compute(channel, (k, v) -> {\n-                    reportIssueUnless(logger, v == null, this, \"expected null channel, not {}\", v);\n-                    this.connecting.set(false);\n-                    return channel;\n-                });\n             } else {\n-                // Promise was completed in the meantime (like cancelled), just close the channel\n-                this.closeChannel(channel);\n-                this.connecting.set(false);\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"notifyChannelConnect future was not successful\");\n+                }\n+                promise.tryFailure(future.cause());\n             }\n-\n-        } else {\n-            promise.tryFailure(future.cause());\n+        } finally {\n+            this.connecting.set(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 407}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3ODE1MjQw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-487815240", "createdAt": "2020-09-14T14:15:29Z", "commit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoxNToyOVrOHRW7Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoxNToyOVrOHRW7Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk2MzM5OQ==", "bodyText": "nit: new line before.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487963399", "createdAt": "2020-09-14T14:15:29Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -839,43 +902,70 @@ private void newTimeout(\n             }, requestTimerResolutionInNanos, TimeUnit.NANOSECONDS));\n     }\n \n+    private void safeNotifyChannelConnect(final ChannelFuture future, final Promise<Channel> promise) {\n+        if (this.executor.inEventLoop()) {\n+            notifyChannelConnect(future, promise);\n+        } else {\n+            this.executor.submit(() ->  notifyChannelConnect(future, promise));\n+        }\n+    }\n+\n     private void notifyChannelConnect(final ChannelFuture future, final Promise<Channel> promise) {\n+        ensureInEventLoop();\n \n         reportIssueUnless(logger, this.connecting.get(), this, \"connecting: false\");\n \n-        if (future.isSuccess()) {\n+        try {\n+            if (future.isSuccess()) {\n+                final Channel channel = future.channel();\n \n-            final Channel channel = future.channel();\n+                try {\n+                    this.poolHandler.channelAcquired(channel);\n+                } catch (Throwable error) {\n+                    this.closeChannelAndFail(channel, error, promise);\n+                    return;\n+                }\n \n-            try {\n-                this.poolHandler.channelAcquired(channel);\n-            } catch (Throwable error) {\n-                this.closeChannelAndFail(channel, error, promise);\n-                return;\n-            }\n+                if (promise.trySuccess(channel)) {\n+\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"established a channel local {}, remote {}\", channel.localAddress(), channel.remoteAddress());\n+                    }\n+                    this.acquiredChannels.compute(channel, (ignored, acquiredChannel) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8"}, "originalPosition": 368}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/05ac2e23020cffa4dcd9fc8a1b975084151e4842", "committedDate": "2020-09-14T14:45:08Z", "message": "Reacting to code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1757a02530c54281794416b121d26ad92f1d502b", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1757a02530c54281794416b121d26ad92f1d502b", "committedDate": "2020-09-14T15:01:38Z", "message": "Merge branch 'master' into users/moderakh/20200912T2019-rntbd-fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3d199264101350194f742c12ef632d044fff4e5", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d3d199264101350194f742c12ef632d044fff4e5", "committedDate": "2020-09-14T15:06:04Z", "message": "Merge branch 'users/moderakh/20200912T2019-rntbd-fixes' of https://github.com/moderakh/azure-sdk-for-java into users/fabianm/RntbdMetricsToDiagnostics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08879489d58638a7e4ca4cc4bb77184b8c16cdeb", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/08879489d58638a7e4ca4cc4bb77184b8c16cdeb", "committedDate": "2020-09-14T15:18:04Z", "message": "Merge pull request #1 from FabianMeiswinkel/users/fabianm/RntbdMetricsToDiagnostics\n\nUsers/fabianm/rntbd metrics to diagnostics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "342d085195ab2354aef241dfc07ea1ad1d47f863", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/342d085195ab2354aef241dfc07ea1ad1d47f863", "committedDate": "2020-09-14T16:14:42Z", "message": "improved queue pending task monitoring, fixed spotbug complain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04f020a2f70984e9fc520d09e450d63bf6c695c6", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/04f020a2f70984e9fc520d09e450d63bf6c695c6", "committedDate": "2020-09-14T18:24:55Z", "message": "Defense in-depth against releaseChannel race condition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d611df90c1a689865cd5f6e69579aeddff438adc", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d611df90c1a689865cd5f6e69579aeddff438adc", "committedDate": "2020-09-14T18:31:05Z", "message": "Merge pull request #3 from FabianMeiswinkel/users/fabianm/RntbdMetricsToDiagnostics\n\n Defense in-depth against race condition if releaseChannel would be called concurrently for the same channel instance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MDQwMjA4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-488040208", "createdAt": "2020-09-14T18:34:30Z", "commit": {"oid": "d611df90c1a689865cd5f6e69579aeddff438adc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MTkxNTA1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-488191505", "createdAt": "2020-09-14T22:12:19Z", "commit": {"oid": "d611df90c1a689865cd5f6e69579aeddff438adc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjoxMjoxOVrOHRotlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjoxMjoxOVrOHRotlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI1NDg3MA==", "bodyText": "Do we need to repeat finding channel if this.availableChannels.remove(candidate)  is false . The way we are going to next channel in else block ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r488254870", "createdAt": "2020-09-14T22:12:19Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -525,20 +560,38 @@ private void acquireChannel(final Promise<Channel> promise) {\n                 for (Channel channel : this.availableChannels) {\n \n                     final RntbdRequestManager manager = channel.pipeline().get(RntbdRequestManager.class);\n-                    final long pendingRequestCount = manager.pendingRequestCount();\n \n-                    if (pendingRequestCount < pendingRequestCountMin) {\n-                        pendingRequestCountMin = pendingRequestCount;\n-                        candidate = channel;\n+                    if (manager == null) {\n+                        logger.warn(\"Channel({} --> {}) closed\", channel, this.remoteAddress());\n+                    } else {\n+                        final long pendingRequestCount = manager.pendingRequestCount();\n+\n+                        // we accept the risk of reusing the channel even if more than maxPendingRequests are\n+                        // queued - by picking the channel with the least number of outstanding requests we load\n+                        // balance reasonably\n+                        if (isChannelServiceable(channel, true) && pendingRequestCount < pendingRequestCountMin) {\n+                            pendingRequestCountMin = pendingRequestCount;\n+                            candidate = channel;\n+                        }\n                     }\n                 }\n \n-                assert candidate != null;\n-\n-                this.availableChannels.remove(candidate);\n-                doAcquireChannel(promise, candidate);\n+                if (candidate != null && this.availableChannels.remove(candidate)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d611df90c1a689865cd5f6e69579aeddff438adc"}, "originalPosition": 203}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf2a6c297c6213555d3f898ac5bbdb71eaf6f9fd", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cf2a6c297c6213555d3f898ac5bbdb71eaf6f9fd", "committedDate": "2020-09-15T02:11:00Z", "message": "cancels pending acquisition tasks which are expired"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b251d07038e86ddb4f697eed8ef07d1a5b4b5f31", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b251d07038e86ddb4f697eed8ef07d1a5b4b5f31", "committedDate": "2020-09-15T02:12:09Z", "message": "cancels pending acquisition tasks which are expired"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fab1c4a3493e220e5a51c87fb891696813cd15b", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9fab1c4a3493e220e5a51c87fb891696813cd15b", "committedDate": "2020-09-15T02:30:57Z", "message": "Merge pull request #4 from moderakh/users/moderakh/20200913T1219-rntbd-fixes\n\nUsers/moderakh/20200913 t1219 rntbd fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0fc71c987acd3057f4de13ca7664404ef071d4e", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c0fc71c987acd3057f4de13ca7664404ef071d4e", "committedDate": "2020-09-15T03:20:06Z", "message": "Fixing compiler warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac6a984d77a66bd7c2033d096de8b28fe89a26e3", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ac6a984d77a66bd7c2033d096de8b28fe89a26e3", "committedDate": "2020-09-15T03:29:47Z", "message": "Merge pull request #6 from FabianMeiswinkel/users/fabianm/RntbdMetricsToDiagnostics\n\nFixing compiler warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa91cf47ef383a33b0f2df3d33b9ea54a702fdf2", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fa91cf47ef383a33b0f2df3d33b9ea54a702fdf2", "committedDate": "2020-09-15T04:40:46Z", "message": "Fixing SpotBug warning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c585e0649e0efd81b2fa0ba0d5df225424e245c", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8c585e0649e0efd81b2fa0ba0d5df225424e245c", "committedDate": "2020-09-15T04:42:58Z", "message": "Merge pull request #7 from FabianMeiswinkel/users/fabianm/RntbdMetricsToDiagnostics\n\nFixing SpotBug warning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90aeea4274006e7025684c2465fa5c0f156a2242", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/90aeea4274006e7025684c2465fa5c0f156a2242", "committedDate": "2020-09-15T05:14:50Z", "message": "Fixing build issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5d184bcf3752f6fc2fdbee94eacb88d9466ed4d", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b5d184bcf3752f6fc2fdbee94eacb88d9466ed4d", "committedDate": "2020-09-15T05:18:14Z", "message": "Merge pull request #8 from FabianMeiswinkel/users/fabianm/RntbdMetricsToDiagnostics\n\nFixing build issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee0696a9ae4b885bf115d602ca301a860637ddd0", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ee0696a9ae4b885bf115d602ca301a860637ddd0", "committedDate": "2020-09-15T05:42:02Z", "message": "Fixing SpotBug issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aaa7f208ea46b86e348cf11a032aa30b8eb88a7", "author": {"user": {"login": "FabianMeiswinkel", "name": "Fabian Meiswinkel"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0aaa7f208ea46b86e348cf11a032aa30b8eb88a7", "committedDate": "2020-09-15T05:44:54Z", "message": "Merge pull request #9 from FabianMeiswinkel/users/fabianm/RntbdMetricsToDiagnostics\n\nFixing SpotBug issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4ODA4NTYx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-488808561", "createdAt": "2020-09-15T15:31:00Z", "commit": {"oid": "0aaa7f208ea46b86e348cf11a032aa30b8eb88a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTozMTowMFrOHSHqHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTozMTowMFrOHSHqHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2MTg4NA==", "bodyText": "Can it be connectionTimeout?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r488761884", "createdAt": "2020-09-15T15:31:00Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -340,7 +340,7 @@ private Options(final Builder builder) {\n \n         private Options(final ConnectionPolicy connectionPolicy) {\n             this.bufferPageSize = 8192;\n-            this.connectionAcquisitionTimeout = Duration.ZERO;\n+            this.connectionAcquisitionTimeout = Duration.ofSeconds(5L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aaa7f208ea46b86e348cf11a032aa30b8eb88a7"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4ODE0NTgw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#pullrequestreview-488814580", "createdAt": "2020-09-15T15:37:29Z", "commit": {"oid": "0aaa7f208ea46b86e348cf11a032aa30b8eb88a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTozNzoyOVrOHSH8EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTozNzoyOVrOHSH8EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2NjQ4MA==", "bodyText": "Lets discuss the static executors thread-pooling impact.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r488766480", "createdAt": "2020-09-15T15:37:29Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -81,6 +84,11 @@\n     private static final ClosedChannelException ON_DEREGISTER =\n         ThrowableUtil.unknownStackTrace(new ClosedChannelException(), RntbdRequestManager.class, \"deregister\");\n \n+    private static final EventExecutor requestExpirationExecutor = new DefaultEventExecutor(new RntbdThreadFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aaa7f208ea46b86e348cf11a032aa30b8eb88a7"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3487, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}