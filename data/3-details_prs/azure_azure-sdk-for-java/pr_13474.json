{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MDcwOTM2", "number": 13474, "title": "[FR] Added the remaining test scenario coverage cases", "bodyText": "fixes:  #12523\nOverview:\nhttps://microsoft.sharepoint.com/:x:/r/teams/AzureDeveloperExperience/_layouts/15/guestaccess.aspx?share=ERwfsXEb42RJt1WPS1bBUwUBnvwdAtJPAGDhekRAxwoCIw", "createdAt": "2020-07-24T04:39:25Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13474", "merged": true, "mergeCommit": {"oid": "9e546e557c5ccee0efaf8a9805f2b5068ddc0cca"}, "closed": true, "closedAt": "2020-07-29T06:53:27Z", "author": {"login": "mssfang"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3kmaDgH2gAyNDU2MDcwOTM2OjBiNzJhY2IxYzEyNjQzNGIzMTRhMzZhYzQ5YTVhYjA4MTU5NDRiNDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5k6eUgH2gAyNDU2MDcwOTM2OmIxNzI5ZmFmMzRiZTVhZGRhNmEwZmNlOTMzM2MxYmM1MDM0ZjFiNWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0b72acb1c126434b314a36ac49a5ab0815944b47", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0b72acb1c126434b314a36ac49a5ab0815944b47", "committedDate": "2020-07-23T00:50:27Z", "message": "big-endian tiff header test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36ca9bb10c43f33dfd35e8d962c24420928ccec8", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/36ca9bb10c43f33dfd35e8d962c24420928ccec8", "committedDate": "2020-07-24T03:40:48Z", "message": "added remaining unsolved tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MDcyOTMy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13474#pullrequestreview-457072932", "createdAt": "2020-07-28T22:28:36Z", "commit": {"oid": "36ca9bb10c43f33dfd35e8d962c24420928ccec8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoyODozNlrOG4h7ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoyODozNlrOG4h7ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyOTMxNw==", "bodyText": "variable name formRecognizerException", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13474#discussion_r461929317", "createdAt": "2020-07-28T22:28:36Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -959,4 +1044,65 @@ public void recognizeCustomFormUrlMultiPageLabeled(HttpClient httpClient,\n                 validateMultiPageDataLabeled(syncPoller.getFinalResult());\n             }));\n     }\n+\n+    /**\n+     * Verifies encoded blank url must stay same when sent to service for a document using invalid source url with \\\n+     * encoded blank space as input data to recognize a custom form from url API.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormFromUrlWithEncodedBlankSpaceSourceUrl(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        encodedBlankSpaceSourceUrlRunner(sourceUrl -> {\n+            HttpResponseException errorResponseException = assertThrows(HttpResponseException.class,\n+                () -> client.beginRecognizeCustomFormsFromUrl(sourceUrl, NON_EXIST_MODEL_ID, new RecognizeOptions()\n+                    .setPollInterval(durationTestMode)).getSyncPoller().getFinalResult());\n+            assertEquals(ENCODED_EMPTY_SPACE,\n+                new String(errorResponseException.getResponse().getRequest().getBody().blockFirst().array(),\n+                    StandardCharsets.UTF_8));\n+        });\n+    }\n+\n+    /**\n+     * Verify that custom form with invalid model id.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormUrlNonExistModelId(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        urlRunner(fileUrl -> {\n+            HttpResponseException errorResponseException = assertThrows(HttpResponseException.class,\n+                () -> client.beginRecognizeCustomFormsFromUrl(fileUrl, NON_EXIST_MODEL_ID,\n+                    new RecognizeOptions().setPollInterval(durationTestMode)).getSyncPoller().getFinalResult());\n+            ErrorInformation errorInformation = (ErrorInformation) errorResponseException.getValue();\n+            assertEquals(EXPECTED_INVALID_MODEL_ID_ERROR_CODE, errorInformation.getCode());\n+            assertEquals(EXPECTED_INVALID_MODEL_ID_ERROR_MESSAGE, errorInformation.getMessage());\n+        }, FORM_JPG);\n+    }\n+\n+    /**\n+     * Verify that custom form with damaged PDF file.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormDamagedPdf(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        damagedPdfDataRunner((data, dataLength) ->\n+            beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+                SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n+                    getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n+                        useTrainingLabels, null, durationTestMode).getSyncPoller();\n+                trainingPoller.waitForCompletion();\n+\n+                FormRecognizerException errorResponseException = assertThrows(FormRecognizerException.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ca9bb10c43f33dfd35e8d962c24420928ccec8"}, "originalPosition": 202}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1729faf34be5adda6a0fce9333c1bc5034f1b5a", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b1729faf34be5adda6a0fce9333c1bc5034f1b5a", "committedDate": "2020-07-29T06:20:13Z", "message": "resolve conflict"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1103, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}