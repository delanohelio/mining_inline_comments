{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NTA0ODQ5", "number": 7589, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDowMzoyMlrODbAZmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjoyMDoyNlrODbCx0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjQ0Njk3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceVersionPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDowMzoyMlrOFiPwwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoxMzowN1rOFn6KhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1NDE0Ng==", "bodyText": "@alzimmermsft It might be worth considering a convenience method in azure-core that does this in a more readable and less error-prone fashion.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r371454146", "createdAt": "2020-01-27T20:03:22Z", "author": {"login": "JonathanGiles"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceVersionPolicy.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.storage.common.implementation.StorageImplUtils.throwIfContainsHeader;\n+\n+/**\n+ * This policy prevents headers and query parameters introduced in new service versions are not accidentally sent when\n+ * the intended service version is older.\n+ */\n+public class BlobServiceVersionPolicy implements HttpPipelinePolicy {\n+\n+    private static final String ANY_BLOB_API = \"any blob API\";\n+    private static final String CREATE_CONTAINER = \"create container\";\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        HttpHeaders requestHeaders = context.getHttpRequest().getHeaders();\n+        BlobServiceVersion serviceVersion = toServiceVersion(\n+            requestHeaders.getValue(Constants.HeaderConstants.SERVICE_VERSION));\n+\n+        if (serviceVersion.ordinal() == BlobServiceVersion.getLatest().ordinal()) {\n+            return next.process();\n+        }\n+\n+        // 2019_07_07 check\n+        if (serviceVersion.ordinal() < BlobServiceVersion.V2019_07_07.ordinal()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5MTc0OA==", "bodyText": "this has been removed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r377391748", "createdAt": "2020-02-11T00:13:07Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceVersionPolicy.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.storage.common.implementation.StorageImplUtils.throwIfContainsHeader;\n+\n+/**\n+ * This policy prevents headers and query parameters introduced in new service versions are not accidentally sent when\n+ * the intended service version is older.\n+ */\n+public class BlobServiceVersionPolicy implements HttpPipelinePolicy {\n+\n+    private static final String ANY_BLOB_API = \"any blob API\";\n+    private static final String CREATE_CONTAINER = \"create container\";\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        HttpHeaders requestHeaders = context.getHttpRequest().getHeaders();\n+        BlobServiceVersion serviceVersion = toServiceVersion(\n+            requestHeaders.getValue(Constants.HeaderConstants.SERVICE_VERSION));\n+\n+        if (serviceVersion.ordinal() == BlobServiceVersion.getLatest().ordinal()) {\n+            return next.process();\n+        }\n+\n+        // 2019_07_07 check\n+        if (serviceVersion.ordinal() < BlobServiceVersion.V2019_07_07.ordinal()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1NDE0Ng=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjQ3NTU5OnYy", "diffSide": "LEFT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/AzureBlobStorageImpl.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDoxMzowM1rOFiQB9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDoyNjozNlrOFpDPuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1ODU1MA==", "bodyText": "This change doesn't make sense to me - you're no longer calling this, so you're creating an HttpPipeline but not using it?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r371458550", "createdAt": "2020-01-27T20:13:03Z", "author": {"login": "JonathanGiles"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/AzureBlobStorageImpl.java", "diffHunk": "@@ -203,12 +203,7 @@ public BlockBlobsImpl blockBlobs() {\n      * Initializes an instance of AzureBlobStorage client.\n      */\n     public AzureBlobStorageImpl() {\n-        this(new HttpPipelineBuilder()\n-                 .policies(\n-                     new UserAgentPolicy(),\n-                     new RetryPolicy(),\n-                     new CookiePolicy())\n-                 .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzMTcxMQ==", "bodyText": "Good point. I'll try autogenerating again and see if it fixes itself.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r371531711", "createdAt": "2020-01-27T23:03:40Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/AzureBlobStorageImpl.java", "diffHunk": "@@ -203,12 +203,7 @@ public BlockBlobsImpl blockBlobs() {\n      * Initializes an instance of AzureBlobStorage client.\n      */\n     public AzureBlobStorageImpl() {\n-        this(new HttpPipelineBuilder()\n-                 .policies(\n-                     new UserAgentPolicy(),\n-                     new RetryPolicy(),\n-                     new CookiePolicy())\n-                 .build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1ODU1MA=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA3NDUzOQ==", "bodyText": "I tried regenerating and the issue still exists. In Intellij it looks like this constructor isnt actually used anywhere, so I don't think it affects the functionality. @jianghaolu, @alzimmermsft would it be possible to make the auto-generator not make this constructor?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r372074539", "createdAt": "2020-01-28T21:43:20Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/AzureBlobStorageImpl.java", "diffHunk": "@@ -203,12 +203,7 @@ public BlockBlobsImpl blockBlobs() {\n      * Initializes an instance of AzureBlobStorage client.\n      */\n     public AzureBlobStorageImpl() {\n-        this(new HttpPipelineBuilder()\n-                 .policies(\n-                     new UserAgentPolicy(),\n-                     new RetryPolicy(),\n-                     new CookiePolicy())\n-                 .build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1ODU1MA=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxNjY2NQ==", "bodyText": "Yeah it's a bug in the generator.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r377416665", "createdAt": "2020-02-11T01:56:37Z", "author": {"login": "jianghaolu"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/AzureBlobStorageImpl.java", "diffHunk": "@@ -203,12 +203,7 @@ public BlockBlobsImpl blockBlobs() {\n      * Initializes an instance of AzureBlobStorage client.\n      */\n     public AzureBlobStorageImpl() {\n-        this(new HttpPipelineBuilder()\n-                 .policies(\n-                     new UserAgentPolicy(),\n-                     new RetryPolicy(),\n-                     new CookiePolicy())\n-                 .build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1ODU1MA=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4OTExNQ==", "bodyText": "Fixed in 3.0.2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r378589115", "createdAt": "2020-02-13T00:26:36Z", "author": {"login": "jianghaolu"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/AzureBlobStorageImpl.java", "diffHunk": "@@ -203,12 +203,7 @@ public BlockBlobsImpl blockBlobs() {\n      * Initializes an instance of AzureBlobStorage client.\n      */\n     public AzureBlobStorageImpl() {\n-        this(new HttpPipelineBuilder()\n-                 .policies(\n-                     new UserAgentPolicy(),\n-                     new RetryPolicy(),\n-                     new CookiePolicy())\n-                 .build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1ODU1MA=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjQ4NDYzOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/BlockBlobsImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDoxNjoyMFrOFiQHlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMTo1NTo0OFrOFi2AWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1OTk4OQ==", "bodyText": "Because the argument into this method for encryptionScope is not final, I would rather see that being reused rather than create a new encryptionScope1, which feels like it could be potentially error-prone. Could something like this work: encryptionScope = encryptionScope == null ? null : encryptionScope.getEncryptionScope()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r371459989", "createdAt": "2020-01-27T20:16:20Z", "author": {"login": "JonathanGiles"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/BlockBlobsImpl.java", "diffHunk": "@@ -196,11 +199,15 @@ public BlockBlobsImpl(AzureBlobStorageImpl client) {\n         if (cpkInfo != null) {\n             encryptionAlgorithm = cpkInfo.getEncryptionAlgorithm();\n         }\n+        String encryptionScope1 = null;\n+        if (encryptionScope != null) {\n+            encryptionScope1 = encryptionScope.getEncryptionScope();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ2MDQxMg==", "bodyText": "Same comment applies in other cases below. I won't repeat myself.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r371460412", "createdAt": "2020-01-27T20:17:18Z", "author": {"login": "JonathanGiles"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/BlockBlobsImpl.java", "diffHunk": "@@ -196,11 +199,15 @@ public BlockBlobsImpl(AzureBlobStorageImpl client) {\n         if (cpkInfo != null) {\n             encryptionAlgorithm = cpkInfo.getEncryptionAlgorithm();\n         }\n+        String encryptionScope1 = null;\n+        if (encryptionScope != null) {\n+            encryptionScope1 = encryptionScope.getEncryptionScope();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1OTk4OQ=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA3Nzk4OA==", "bodyText": "@JonathanGiles, this code was generated with the latest version of the Java generator.  It might be best to bring these issues up with @jianghaolu.  I think issues with generated code are outside the scope of this PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r372077988", "createdAt": "2020-01-28T21:50:32Z", "author": {"login": "seanmcc-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/BlockBlobsImpl.java", "diffHunk": "@@ -196,11 +199,15 @@ public BlockBlobsImpl(AzureBlobStorageImpl client) {\n         if (cpkInfo != null) {\n             encryptionAlgorithm = cpkInfo.getEncryptionAlgorithm();\n         }\n+        String encryptionScope1 = null;\n+        if (encryptionScope != null) {\n+            encryptionScope1 = encryptionScope.getEncryptionScope();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1OTk4OQ=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MDczMA==", "bodyText": "Got it - I'll redirect this comment to @jianghaolu then. Thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r372080730", "createdAt": "2020-01-28T21:55:48Z", "author": {"login": "JonathanGiles"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/BlockBlobsImpl.java", "diffHunk": "@@ -196,11 +199,15 @@ public BlockBlobsImpl(AzureBlobStorageImpl client) {\n         if (cpkInfo != null) {\n             encryptionAlgorithm = cpkInfo.getEncryptionAlgorithm();\n         }\n+        String encryptionScope1 = null;\n+        if (encryptionScope != null) {\n+            encryptionScope1 = encryptionScope.getEncryptionScope();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1OTk4OQ=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjUxNTA2OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobContainerEncryptionScope.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDoyNzowMFrOFiQaHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMzoyMjo0MlrOFi4D1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ2NDczNQ==", "bodyText": "I understand this is auto-generated, but it is hard to read. Can it be improved at all?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r371464735", "createdAt": "2020-01-27T20:27:00Z", "author": {"login": "JonathanGiles"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobContainerEncryptionScope.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.storage.blob.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+/**\n+ * Additional parameters for create operation.\n+ */\n+@JacksonXmlRootElement(localName = \"blob-container-encryption-scope\")\n+@Fluent\n+public final class BlobContainerEncryptionScope {\n+    /*\n+     * Optional.  Version 2019-02-02 and later.  Specifies the default\n+     * encryption scope to set on the container and use for all future writes.\n+     */\n+    @JsonProperty(value = \"defaultEncryptionScope\")\n+    private String defaultEncryptionScope;\n+\n+    /*\n+     * Optional.  Version 2019-02-02 and newer.  If true, prevents any request\n+     * from specifying a different encryption scope than the scope set on the\n+     * container.\n+     */\n+    @JsonProperty(value = \"denyEncryptionScopeOverride\")\n+    private boolean denyEncryptionScopeOverride;\n+\n+    /**\n+     * Get the defaultEncryptionScope property: Optional.  Version 2019-02-02\n+     * and later.  Specifies the default encryption scope to set on the\n+     * container and use for all future writes.\n+     *\n+     * @return the defaultEncryptionScope value.\n+     */\n+    public String getDefaultEncryptionScope() {\n+        return this.defaultEncryptionScope;\n+    }\n+\n+    /**\n+     * Set the defaultEncryptionScope property: Optional.  Version 2019-02-02\n+     * and later.  Specifies the default encryption scope to set on the\n+     * container and use for all future writes.\n+     *\n+     * @param defaultEncryptionScope the defaultEncryptionScope value to set.\n+     * @return the BlobContainerEncryptionScope object itself.\n+     */\n+    public BlobContainerEncryptionScope setDefaultEncryptionScope(String defaultEncryptionScope) {\n+        this.defaultEncryptionScope = defaultEncryptionScope;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the denyEncryptionScopeOverride property: Optional.  Version\n+     * 2019-02-02 and newer.  If true, prevents any request from specifying a\n+     * different encryption scope than the scope set on the container.\n+     *\n+     * @return the denyEncryptionScopeOverride value.\n+     */\n+    public boolean isDenyEncryptionScopeOverride() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyMDkxMA==", "bodyText": "I think the plan is to rename this preventEncryptionScopeOverride", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r371520910", "createdAt": "2020-01-27T22:34:12Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobContainerEncryptionScope.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.storage.blob.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+/**\n+ * Additional parameters for create operation.\n+ */\n+@JacksonXmlRootElement(localName = \"blob-container-encryption-scope\")\n+@Fluent\n+public final class BlobContainerEncryptionScope {\n+    /*\n+     * Optional.  Version 2019-02-02 and later.  Specifies the default\n+     * encryption scope to set on the container and use for all future writes.\n+     */\n+    @JsonProperty(value = \"defaultEncryptionScope\")\n+    private String defaultEncryptionScope;\n+\n+    /*\n+     * Optional.  Version 2019-02-02 and newer.  If true, prevents any request\n+     * from specifying a different encryption scope than the scope set on the\n+     * container.\n+     */\n+    @JsonProperty(value = \"denyEncryptionScopeOverride\")\n+    private boolean denyEncryptionScopeOverride;\n+\n+    /**\n+     * Get the defaultEncryptionScope property: Optional.  Version 2019-02-02\n+     * and later.  Specifies the default encryption scope to set on the\n+     * container and use for all future writes.\n+     *\n+     * @return the defaultEncryptionScope value.\n+     */\n+    public String getDefaultEncryptionScope() {\n+        return this.defaultEncryptionScope;\n+    }\n+\n+    /**\n+     * Set the defaultEncryptionScope property: Optional.  Version 2019-02-02\n+     * and later.  Specifies the default encryption scope to set on the\n+     * container and use for all future writes.\n+     *\n+     * @param defaultEncryptionScope the defaultEncryptionScope value to set.\n+     * @return the BlobContainerEncryptionScope object itself.\n+     */\n+    public BlobContainerEncryptionScope setDefaultEncryptionScope(String defaultEncryptionScope) {\n+        this.defaultEncryptionScope = defaultEncryptionScope;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the denyEncryptionScopeOverride property: Optional.  Version\n+     * 2019-02-02 and newer.  If true, prevents any request from specifying a\n+     * different encryption scope than the scope set on the container.\n+     *\n+     * @return the denyEncryptionScopeOverride value.\n+     */\n+    public boolean isDenyEncryptionScopeOverride() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ2NDczNQ=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExNDM4OQ==", "bodyText": "#7793", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r372114389", "createdAt": "2020-01-28T23:22:42Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobContainerEncryptionScope.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.storage.blob.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+/**\n+ * Additional parameters for create operation.\n+ */\n+@JacksonXmlRootElement(localName = \"blob-container-encryption-scope\")\n+@Fluent\n+public final class BlobContainerEncryptionScope {\n+    /*\n+     * Optional.  Version 2019-02-02 and later.  Specifies the default\n+     * encryption scope to set on the container and use for all future writes.\n+     */\n+    @JsonProperty(value = \"defaultEncryptionScope\")\n+    private String defaultEncryptionScope;\n+\n+    /*\n+     * Optional.  Version 2019-02-02 and newer.  If true, prevents any request\n+     * from specifying a different encryption scope than the scope set on the\n+     * container.\n+     */\n+    @JsonProperty(value = \"denyEncryptionScopeOverride\")\n+    private boolean denyEncryptionScopeOverride;\n+\n+    /**\n+     * Get the defaultEncryptionScope property: Optional.  Version 2019-02-02\n+     * and later.  Specifies the default encryption scope to set on the\n+     * container and use for all future writes.\n+     *\n+     * @return the defaultEncryptionScope value.\n+     */\n+    public String getDefaultEncryptionScope() {\n+        return this.defaultEncryptionScope;\n+    }\n+\n+    /**\n+     * Set the defaultEncryptionScope property: Optional.  Version 2019-02-02\n+     * and later.  Specifies the default encryption scope to set on the\n+     * container and use for all future writes.\n+     *\n+     * @param defaultEncryptionScope the defaultEncryptionScope value to set.\n+     * @return the BlobContainerEncryptionScope object itself.\n+     */\n+    public BlobContainerEncryptionScope setDefaultEncryptionScope(String defaultEncryptionScope) {\n+        this.defaultEncryptionScope = defaultEncryptionScope;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the denyEncryptionScopeOverride property: Optional.  Version\n+     * 2019-02-02 and newer.  If true, prevents any request from specifying a\n+     * different encryption scope than the scope set on the container.\n+     *\n+     * @return the denyEncryptionScopeOverride value.\n+     */\n+    public boolean isDenyEncryptionScopeOverride() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ2NDczNQ=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjYwMjA3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobContainerProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDo1ODoxMFrOFiRPsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMzoyMjozOVrOFi4Dww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ3ODQ1MA==", "bodyText": "Elsewhere this method is called isDenyEncryptionScopeOverride. I commented elsewhere that I didn't much like that name, but at the least we should be consistent if possible.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r371478450", "createdAt": "2020-01-27T20:58:10Z", "author": {"login": "JonathanGiles"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobContainerProperties.java", "diffHunk": "@@ -114,4 +141,18 @@ public boolean hasImmutabilityPolicy() {\n     public boolean hasLegalHold() {\n         return hasLegalHold;\n     }\n+\n+    /**\n+     * @return the default encryption scope for the container\n+     */\n+    public String getDefaultEncryptionScope() {\n+        return defaultEncryptionScope;\n+    }\n+\n+    /**\n+     * @return Whether or not a container's default encryption scope can be overriden\n+     */\n+    public Boolean hasDenyEncryptionScopeOverride() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExNDM3MQ==", "bodyText": "#7793", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r372114371", "createdAt": "2020-01-28T23:22:39Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobContainerProperties.java", "diffHunk": "@@ -114,4 +141,18 @@ public boolean hasImmutabilityPolicy() {\n     public boolean hasLegalHold() {\n         return hasLegalHold;\n     }\n+\n+    /**\n+     * @return the default encryption scope for the container\n+     */\n+    public String getDefaultEncryptionScope() {\n+        return defaultEncryptionScope;\n+    }\n+\n+    /**\n+     * @return Whether or not a container's default encryption scope can be overriden\n+     */\n+    public Boolean hasDenyEncryptionScopeOverride() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ3ODQ1MA=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjYxNTI2OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/models/ContainerCpkScopeInfo.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTowMjozMlrOFiRXmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMzoyMjozNVrOFi4Dsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ4MDQ3Mw==", "bodyText": "Is this class used anywhere?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r371480473", "createdAt": "2020-01-27T21:02:32Z", "author": {"login": "JonathanGiles"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/models/ContainerCpkScopeInfo.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.storage.blob.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+/**\n+ * Additional parameters for create operation.\n+ */\n+@JacksonXmlRootElement(localName = \"container-cpk-scope-info\")\n+@Fluent\n+public final class ContainerCpkScopeInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MDI5MA==", "bodyText": "This is just an artifact of swagger README changes I was making. This should be deleted.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r372080290", "createdAt": "2020-01-28T21:55:00Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/models/ContainerCpkScopeInfo.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.storage.blob.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+/**\n+ * Additional parameters for create operation.\n+ */\n+@JacksonXmlRootElement(localName = \"container-cpk-scope-info\")\n+@Fluent\n+public final class ContainerCpkScopeInfo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ4MDQ3Mw=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExNDM1NA==", "bodyText": "#7793", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r372114354", "createdAt": "2020-01-28T23:22:35Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/models/ContainerCpkScopeInfo.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.storage.blob.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+/**\n+ * Additional parameters for create operation.\n+ */\n+@JacksonXmlRootElement(localName = \"container-cpk-scope-info\")\n+@Fluent\n+public final class ContainerCpkScopeInfo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ4MDQ3Mw=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjYxNjM2OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/CpkScopeInfo.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTowMjo1NlrOFiRYUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMzoyMjozM1rOFi4Dow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ4MDY1Nw==", "bodyText": "Is this class used anywhere?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r371480657", "createdAt": "2020-01-27T21:02:56Z", "author": {"login": "JonathanGiles"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/CpkScopeInfo.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.storage.blob.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+/**\n+ * Additional parameters for a set of operations.\n+ */\n+@JacksonXmlRootElement(localName = \"cpk-scope-info\")\n+@Fluent\n+public final class CpkScopeInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MDc3OA==", "bodyText": "Same as above. Will delete it", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r372080778", "createdAt": "2020-01-28T21:55:54Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/CpkScopeInfo.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.storage.blob.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+/**\n+ * Additional parameters for a set of operations.\n+ */\n+@JacksonXmlRootElement(localName = \"cpk-scope-info\")\n+@Fluent\n+public final class CpkScopeInfo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ4MDY1Nw=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExNDMzOQ==", "bodyText": "#7793", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r372114339", "createdAt": "2020-01-28T23:22:33Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/CpkScopeInfo.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.storage.blob.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+/**\n+ * Additional parameters for a set of operations.\n+ */\n+@JacksonXmlRootElement(localName = \"cpk-scope-info\")\n+@Fluent\n+public final class CpkScopeInfo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ4MDY1Nw=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjY1NjQ5OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/PageBlobItem.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMToxNzozM1rOFiRxSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOToxNDoxOFrOFjUX3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ4NzA1MQ==", "bodyText": "I'm unclear what determines if the API in this PR works with encryption scope as a String or as a EncryptionScope type. Can you clarify why these are used in a seemingly interchangeable way?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r371487051", "createdAt": "2020-01-27T21:17:33Z", "author": {"login": "JonathanGiles"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/PageBlobItem.java", "diffHunk": "@@ -32,11 +33,29 @@\n      */\n     public PageBlobItem(final String eTag, final OffsetDateTime lastModified, final byte[] contentMd5,\n         final Boolean isServerEncrypted, final String encryptionKeySha256, final Long blobSequenceNumber) {\n+        this(eTag, lastModified, contentMd5, isServerEncrypted, encryptionKeySha256, null, blobSequenceNumber);\n+    }\n+\n+    /**\n+     * Constructs a {@link PageBlobItem}.\n+     *\n+     * @param eTag ETag of the page blob.\n+     * @param lastModified Last modified time of the page blob.\n+     * @param contentMd5 Content MD5 of the page blob.\n+     * @param isServerEncrypted Flag indicating if the page blob is encrypted on the server.\n+     * @param encryptionKeySha256 The encryption key used to encrypt the page blob.\n+     * @param encryptionScope The encryption scope used to encrypt the page blob.\n+     * @param blobSequenceNumber The current sequence number for the page blob.\n+     */\n+    public PageBlobItem(final String eTag, final OffsetDateTime lastModified, final byte[] contentMd5,\n+        final Boolean isServerEncrypted, final String encryptionKeySha256, final String encryptionScope,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzMDY4MA==", "bodyText": "You're right, I'll change this to be the EncryptionScope type", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r371530680", "createdAt": "2020-01-27T23:00:41Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/PageBlobItem.java", "diffHunk": "@@ -32,11 +33,29 @@\n      */\n     public PageBlobItem(final String eTag, final OffsetDateTime lastModified, final byte[] contentMd5,\n         final Boolean isServerEncrypted, final String encryptionKeySha256, final Long blobSequenceNumber) {\n+        this(eTag, lastModified, contentMd5, isServerEncrypted, encryptionKeySha256, null, blobSequenceNumber);\n+    }\n+\n+    /**\n+     * Constructs a {@link PageBlobItem}.\n+     *\n+     * @param eTag ETag of the page blob.\n+     * @param lastModified Last modified time of the page blob.\n+     * @param contentMd5 Content MD5 of the page blob.\n+     * @param isServerEncrypted Flag indicating if the page blob is encrypted on the server.\n+     * @param encryptionKeySha256 The encryption key used to encrypt the page blob.\n+     * @param encryptionScope The encryption scope used to encrypt the page blob.\n+     * @param blobSequenceNumber The current sequence number for the page blob.\n+     */\n+    public PageBlobItem(final String eTag, final OffsetDateTime lastModified, final byte[] contentMd5,\n+        final Boolean isServerEncrypted, final String encryptionKeySha256, final String encryptionScope,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ4NzA1MQ=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3ODI2OQ==", "bodyText": "Actually, looking at this again, the reason we return a String is because it matches the way CustomerProvidedKey is given back to the user", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r372578269", "createdAt": "2020-01-29T19:14:18Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/PageBlobItem.java", "diffHunk": "@@ -32,11 +33,29 @@\n      */\n     public PageBlobItem(final String eTag, final OffsetDateTime lastModified, final byte[] contentMd5,\n         final Boolean isServerEncrypted, final String encryptionKeySha256, final Long blobSequenceNumber) {\n+        this(eTag, lastModified, contentMd5, isServerEncrypted, encryptionKeySha256, null, blobSequenceNumber);\n+    }\n+\n+    /**\n+     * Constructs a {@link PageBlobItem}.\n+     *\n+     * @param eTag ETag of the page blob.\n+     * @param lastModified Last modified time of the page blob.\n+     * @param contentMd5 Content MD5 of the page blob.\n+     * @param isServerEncrypted Flag indicating if the page blob is encrypted on the server.\n+     * @param encryptionKeySha256 The encryption key used to encrypt the page blob.\n+     * @param encryptionScope The encryption scope used to encrypt the page blob.\n+     * @param blobSequenceNumber The current sequence number for the page blob.\n+     */\n+    public PageBlobItem(final String eTag, final OffsetDateTime lastModified, final byte[] contentMd5,\n+        final Boolean isServerEncrypted, final String encryptionKeySha256, final String encryptionScope,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ4NzA1MQ=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjgxNjQ0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobAsyncClientBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjoxMzoxOFrOFiTT3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjoxMzoxOFrOFiTT3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxMjI4NQ==", "bodyText": "This is not package-private, the constructor is protected.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r371512285", "createdAt": "2020-01-27T22:13:18Z", "author": {"login": "JonathanGiles"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobAsyncClientBase.java", "diffHunk": "@@ -118,6 +120,27 @@\n      */\n     protected BlobAsyncClientBase(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion,\n         String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey) {\n+        this(pipeline, url, serviceVersion, accountName, containerName, blobName, snapshot, customerProvidedKey, null);\n+    }\n+\n+    /**\n+     * Package-private constructor for use by {@link SpecializedBlobClientBuilder}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjgyODg3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/PageBlobAsyncClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjoxNzozNFrOFiTbTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMTozNjoxMFrOFn7cvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxNDE4OA==", "bodyText": "I'd prefer to see a more descriptive first sentence for some of these new JavaDocs. The first sentence gets extra prominence in the generated JavaDoc, so it is important to give a useful first sentence.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r371514188", "createdAt": "2020-01-27T22:17:34Z", "author": {"login": "JonathanGiles"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/PageBlobAsyncClient.java", "diffHunk": "@@ -595,23 +602,88 @@ private static String pageRangeToString(PageRange pageRange) {\n         BlobRequestConditions requestConditions) {\n         try {\n             return withContext(context ->\n-                getPageRangesDiffWithResponse(blobRange, prevSnapshot, requestConditions, context));\n+                getPageRangesDiffWithResponse(blobRange, prevSnapshot, null, requestConditions, context));\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * This API only works for managed disk accounts.\n+     * <p>Gets the collection of page ranges that differ between a specified snapshot and this page blob. For more\n+     * information, see the <a href=\"https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\">Azure\n+     * Docs</a>.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskRangesDiff#BlobRange-String}\n+     *\n+     * @param blobRange {@link BlobRange}\n+     * @param prevSnapshotUrl Specifies the URL of a previous snapshot of the target blob. Specifies that the\n+     * response will contain only pages that were changed between target blob and previous snapshot. Changed pages\n+     * include both updated and cleared pages. The target blob may be a snapshot, as long as the snapshot specified by\n+     * prevsnapshot is the older of the two.\n+     *\n+     * @return A reactive response emitting all the different page ranges.\n+     */\n+    public Mono<PageList> getManagedDiskRangesDiff(BlobRange blobRange, String prevSnapshotUrl) {\n+        try {\n+            return getManagedDiskRangesDiffWithResponse(blobRange, prevSnapshotUrl, null).flatMap(FluxUtil::toMono);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * This API only works for managed disk accounts.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3OTk0Mw==", "bodyText": "This is by design.  We want the fact that this API only works with managed disk accounts to be prominently featured in the generated JavaDoc.  The vast majority of users shouldn't attempt to use this method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r372579943", "createdAt": "2020-01-29T19:17:46Z", "author": {"login": "seanmcc-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/PageBlobAsyncClient.java", "diffHunk": "@@ -595,23 +602,88 @@ private static String pageRangeToString(PageRange pageRange) {\n         BlobRequestConditions requestConditions) {\n         try {\n             return withContext(context ->\n-                getPageRangesDiffWithResponse(blobRange, prevSnapshot, requestConditions, context));\n+                getPageRangesDiffWithResponse(blobRange, prevSnapshot, null, requestConditions, context));\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * This API only works for managed disk accounts.\n+     * <p>Gets the collection of page ranges that differ between a specified snapshot and this page blob. For more\n+     * information, see the <a href=\"https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\">Azure\n+     * Docs</a>.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskRangesDiff#BlobRange-String}\n+     *\n+     * @param blobRange {@link BlobRange}\n+     * @param prevSnapshotUrl Specifies the URL of a previous snapshot of the target blob. Specifies that the\n+     * response will contain only pages that were changed between target blob and previous snapshot. Changed pages\n+     * include both updated and cleared pages. The target blob may be a snapshot, as long as the snapshot specified by\n+     * prevsnapshot is the older of the two.\n+     *\n+     * @return A reactive response emitting all the different page ranges.\n+     */\n+    public Mono<PageList> getManagedDiskRangesDiff(BlobRange blobRange, String prevSnapshotUrl) {\n+        try {\n+            return getManagedDiskRangesDiffWithResponse(blobRange, prevSnapshotUrl, null).flatMap(FluxUtil::toMono);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * This API only works for managed disk accounts.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxNDE4OA=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxMjc5OA==", "bodyText": "Even still, when you're only given the first-sentence description at the top of JavaDoc, I don't want to see one or potentially many methods with a description that only says this. I would rather it say something like \"This API, which only works for managed disk accounts, allows the user to ....\".", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r377412798", "createdAt": "2020-02-11T01:36:10Z", "author": {"login": "JonathanGiles"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/PageBlobAsyncClient.java", "diffHunk": "@@ -595,23 +602,88 @@ private static String pageRangeToString(PageRange pageRange) {\n         BlobRequestConditions requestConditions) {\n         try {\n             return withContext(context ->\n-                getPageRangesDiffWithResponse(blobRange, prevSnapshot, requestConditions, context));\n+                getPageRangesDiffWithResponse(blobRange, prevSnapshot, null, requestConditions, context));\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * This API only works for managed disk accounts.\n+     * <p>Gets the collection of page ranges that differ between a specified snapshot and this page blob. For more\n+     * information, see the <a href=\"https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\">Azure\n+     * Docs</a>.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.PageBlobAsyncClient.getManagedDiskRangesDiff#BlobRange-String}\n+     *\n+     * @param blobRange {@link BlobRange}\n+     * @param prevSnapshotUrl Specifies the URL of a previous snapshot of the target blob. Specifies that the\n+     * response will contain only pages that were changed between target blob and previous snapshot. Changed pages\n+     * include both updated and cleared pages. The target blob may be a snapshot, as long as the snapshot specified by\n+     * prevsnapshot is the older of the two.\n+     *\n+     * @return A reactive response emitting all the different page ranges.\n+     */\n+    public Mono<PageList> getManagedDiskRangesDiff(BlobRange blobRange, String prevSnapshotUrl) {\n+        try {\n+            return getManagedDiskRangesDiffWithResponse(blobRange, prevSnapshotUrl, null).flatMap(FluxUtil::toMono);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * This API only works for managed disk accounts.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxNDE4OA=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjgzNjY3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/APISpec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjoyMDoyNlrOFiTfsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo0NDoxN1rOFn2q4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxNTMxMg==", "bodyText": "Is this still necessary?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r371515312", "createdAt": "2020-01-27T22:20:26Z", "author": {"login": "JonathanGiles"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/APISpec.groovy", "diffHunk": "@@ -264,6 +270,10 @@ class APISpec extends Specification {\n     }\n \n     BlobServiceClient getServiceClient(StorageSharedKeyCredential credential) {\n+        // TODO : Remove this once its no longer preprod\n+        if (credential == managedDiskCredential) {\n+            return getServiceClient(credential, String.format(\"https://%s.blob.preprod.core.windows.net/\", credential.getAccountName()), null)\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzNDQ5Ng==", "bodyText": "just removed this", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7589#discussion_r377334496", "createdAt": "2020-02-10T21:44:17Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/APISpec.groovy", "diffHunk": "@@ -264,6 +270,10 @@ class APISpec extends Specification {\n     }\n \n     BlobServiceClient getServiceClient(StorageSharedKeyCredential credential) {\n+        // TODO : Remove this once its no longer preprod\n+        if (credential == managedDiskCredential) {\n+            return getServiceClient(credential, String.format(\"https://%s.blob.preprod.core.windows.net/\", credential.getAccountName()), null)\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxNTMxMg=="}, "originalCommit": {"oid": "05f7463edd79de11eeb5cd043235b3843c700aee"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 458, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}