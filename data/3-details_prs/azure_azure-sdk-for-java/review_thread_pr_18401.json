{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2OTQxNDM5", "number": 18401, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODo1NTozM1rOFKJl0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwMToxMjozOVrOFL9U7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTg3MjE2OnYy", "diffSide": "RIGHT", "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ServiceClientCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODo1NTozNFrOIMzS6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQyMjozNzozM1rOIM2fVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NDI0OA==", "bodyText": "In the future, for all of these types we check that aren't final, we'll want to use a more comprehensive validation to support sub-types (this is the current pain point with PagedFlux where sub-types get used in multiple locations)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r550294248", "createdAt": "2020-12-30T18:55:34Z", "author": {"login": "alzimmermsft"}, "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ServiceClientCheck.java", "diffHunk": "@@ -55,15 +56,20 @@\n     private static final String MONO_BRACKET = \"Mono<\";\n     private static final String MONO_RESPONSE_BRACKET = \"Mono<Response<\";\n     private static final String PAGED_FLUX_BRACKET = \"PagedFlux<\";\n+    private static final String POLLER_FLUX_BRACKET = \"PollerFlux<\";\n+    private static final String SYNC_POLLER_BRACKET = \"SyncPoller<\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6aa8318e487345f930e2ac7664be855beb93b6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM0NjU4Mw==", "bodyText": "I added a contains to allow PagedFlux subtypes and not report them as error.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r550346583", "createdAt": "2020-12-30T22:37:33Z", "author": {"login": "samvaity"}, "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ServiceClientCheck.java", "diffHunk": "@@ -55,15 +56,20 @@\n     private static final String MONO_BRACKET = \"Mono<\";\n     private static final String MONO_RESPONSE_BRACKET = \"Mono<Response<\";\n     private static final String PAGED_FLUX_BRACKET = \"PagedFlux<\";\n+    private static final String POLLER_FLUX_BRACKET = \"PollerFlux<\";\n+    private static final String SYNC_POLLER_BRACKET = \"SyncPoller<\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NDI0OA=="}, "originalCommit": {"oid": "7a6aa8318e487345f930e2ac7664be855beb93b6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTg3NTM2OnYy", "diffSide": "RIGHT", "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ThrowFromClientLoggerCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODo1Njo1MFrOIMzUnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODo1Njo1MFrOIMzUnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NDY4Nw==", "bodyText": "Could these be equalsIgnoreCase?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r550294687", "createdAt": "2020-12-30T18:56:50Z", "author": {"login": "alzimmermsft"}, "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ThrowFromClientLoggerCheck.java", "diffHunk": "@@ -108,10 +109,14 @@ public void visitToken(DetailAST token) {\n \n                 String methodCallName =\n                     FullIdent.createFullIdent(methodCallToken.findFirstToken(TokenTypes.DOT)).getText();\n-                if (!LOGGER_LOG_EXCEPTION_AS_ERROR.equals(methodCallName)\n-                    && !LOGGER_LOG_THROWABLE_AS_ERROR.equals(methodCallName)\n-                    && !LOGGER_LOG_EXCEPTION_AS_WARNING.equals(methodCallName)\n-                    && !LOGGER_LOG_THROWABLE_AS_WARNING.equals(methodCallName)) {\n+                if (!LOGGER_LOG_EXCEPTION_AS_ERROR.toLowerCase(Locale.ROOT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6aa8318e487345f930e2ac7664be855beb93b6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTg3ODk2OnYy", "diffSide": "RIGHT", "path": "eng/code-quality-reports/src/main/resources/checkstyle/checkstyle-suppressions.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODo1ODoxNlrOIMzWlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQyMTozMjo1N1rOIM1qgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NTE4OQ==", "bodyText": "Do we want to suppress Checkstyles for modules that use the client (Track 2) parent? The current POM configurations only apply Checkstyles to Track 2 libraries", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r550295189", "createdAt": "2020-12-30T18:58:16Z", "author": {"login": "alzimmermsft"}, "path": "eng/code-quality-reports/src/main/resources/checkstyle/checkstyle-suppressions.xml", "diffHunk": "@@ -11,17 +11,15 @@\n   <suppress checks=\"RedundantModifier\"\n             files=\"keyvault[/\\\\]microsoft-azure-.*[/\\\\].*[/\\\\](IKey|ISignatureTransform|KeyVaultClientBase|KeyVaultClientCustom)\\.java\"/>\n \n-  <!-- AutoRest generates with unused imports. Remove this suppression when:\n-  https://github.com/Azure/autorest.java/issues/330 is fixed. -->\n-  <suppress checks=\"UnusedImports\" files=\"batch[/\\\\]microsoft-azure-batch[/\\\\].*[/\\\\]batch[/\\\\]protocol[/\\\\].*\\.java\"/>\n-\n   <!-- Add Javadoc suppression for any test files (ie. ones that live under src/test/java). -->\n   <suppress checks=\"Javadoc\" files=\"src[/\\\\]test[/\\\\]java[/\\\\].*.java\"/>\n-\n   <suppress checks=\"Javadoc\" files=\".*CoverageReporter\\.java\"/>\n   <suppress checks=\"Javadoc\" files=\".*[/\\\\]implementation[/\\\\].*\\.java\"/>\n-  <suppress checks=\"Javadoc\" files=\".*[/\\\\]com[/\\\\]microsoft[/\\\\].*\"/>\n   <suppress checks=\"Header\" files=\".*package-info.java\"/>\n+  <!-- Suppress LineLength for Track 1/management libraries. -->\n+  <suppress checks=\"[a-zA-Z0-9]*\" files=\".*[/\\\\]com[/\\\\]microsoft[/\\\\].*\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6aa8318e487345f930e2ac7664be855beb93b6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMzMzA1OQ==", "bodyText": "There are some management plane libs and spring packages that still follow com.microsoft packaging. This suppresses those files.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r550333059", "createdAt": "2020-12-30T21:32:57Z", "author": {"login": "samvaity"}, "path": "eng/code-quality-reports/src/main/resources/checkstyle/checkstyle-suppressions.xml", "diffHunk": "@@ -11,17 +11,15 @@\n   <suppress checks=\"RedundantModifier\"\n             files=\"keyvault[/\\\\]microsoft-azure-.*[/\\\\].*[/\\\\](IKey|ISignatureTransform|KeyVaultClientBase|KeyVaultClientCustom)\\.java\"/>\n \n-  <!-- AutoRest generates with unused imports. Remove this suppression when:\n-  https://github.com/Azure/autorest.java/issues/330 is fixed. -->\n-  <suppress checks=\"UnusedImports\" files=\"batch[/\\\\]microsoft-azure-batch[/\\\\].*[/\\\\]batch[/\\\\]protocol[/\\\\].*\\.java\"/>\n-\n   <!-- Add Javadoc suppression for any test files (ie. ones that live under src/test/java). -->\n   <suppress checks=\"Javadoc\" files=\"src[/\\\\]test[/\\\\]java[/\\\\].*.java\"/>\n-\n   <suppress checks=\"Javadoc\" files=\".*CoverageReporter\\.java\"/>\n   <suppress checks=\"Javadoc\" files=\".*[/\\\\]implementation[/\\\\].*\\.java\"/>\n-  <suppress checks=\"Javadoc\" files=\".*[/\\\\]com[/\\\\]microsoft[/\\\\].*\"/>\n   <suppress checks=\"Header\" files=\".*package-info.java\"/>\n+  <!-- Suppress LineLength for Track 1/management libraries. -->\n+  <suppress checks=\"[a-zA-Z0-9]*\" files=\".*[/\\\\]com[/\\\\]microsoft[/\\\\].*\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NTE4OQ=="}, "originalCommit": {"oid": "7a6aa8318e487345f930e2ac7664be855beb93b6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTg3OTMzOnYy", "diffSide": "RIGHT", "path": "eng/code-quality-reports/src/main/resources/checkstyle/checkstyle-suppressions.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODo1ODozMVrOIMzWyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODo1ODozMVrOIMzWyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NTI0Mw==", "bodyText": "Could we modify the above to cover this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r550295243", "createdAt": "2020-12-30T18:58:31Z", "author": {"login": "alzimmermsft"}, "path": "eng/code-quality-reports/src/main/resources/checkstyle/checkstyle-suppressions.xml", "diffHunk": "@@ -11,17 +11,15 @@\n   <suppress checks=\"RedundantModifier\"\n             files=\"keyvault[/\\\\]microsoft-azure-.*[/\\\\].*[/\\\\](IKey|ISignatureTransform|KeyVaultClientBase|KeyVaultClientCustom)\\.java\"/>\n \n-  <!-- AutoRest generates with unused imports. Remove this suppression when:\n-  https://github.com/Azure/autorest.java/issues/330 is fixed. -->\n-  <suppress checks=\"UnusedImports\" files=\"batch[/\\\\]microsoft-azure-batch[/\\\\].*[/\\\\]batch[/\\\\]protocol[/\\\\].*\\.java\"/>\n-\n   <!-- Add Javadoc suppression for any test files (ie. ones that live under src/test/java). -->\n   <suppress checks=\"Javadoc\" files=\"src[/\\\\]test[/\\\\]java[/\\\\].*.java\"/>\n-\n   <suppress checks=\"Javadoc\" files=\".*CoverageReporter\\.java\"/>\n   <suppress checks=\"Javadoc\" files=\".*[/\\\\]implementation[/\\\\].*\\.java\"/>\n-  <suppress checks=\"Javadoc\" files=\".*[/\\\\]com[/\\\\]microsoft[/\\\\].*\"/>\n   <suppress checks=\"Header\" files=\".*package-info.java\"/>\n+  <!-- Suppress LineLength for Track 1/management libraries. -->\n+  <suppress checks=\"[a-zA-Z0-9]*\" files=\".*[/\\\\]com[/\\\\]microsoft[/\\\\].*\"/>\n+  <!-- Custom checkstyle rules only check track 2 libraries -->\n+  <suppress checks=\"com\\.azure\\.tools\\.checkstyle\\.checks\\..+\" files=\".*[/\\\\]com[/\\\\]microsoft[/\\\\].*\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6aa8318e487345f930e2ac7664be855beb93b6"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTg4NzU1OnYy", "diffSide": "RIGHT", "path": "sdk/storage/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTowMzo0MFrOIMzbnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTowMzo0MFrOIMzbnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NjQ3OQ==", "bodyText": "Why are these commented out?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r550296479", "createdAt": "2020-12-30T19:03:40Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/pom.xml", "diffHunk": "@@ -12,13 +12,13 @@\n     <profile>\n       <id>coverage</id>\n       <modules>\n-        <module>azure-storage-common</module>\n-        <module>azure-storage-blob</module>\n-        <module>azure-storage-blob-batch</module>\n-        <module>azure-storage-blob-changefeed</module>\n-        <module>azure-storage-blob-cryptography</module>\n-        <module>azure-storage-blob-nio</module>\n-        <module>azure-storage-file-share</module>\n+<!--        <module>azure-storage-common</module>-->\n+<!--        <module>azure-storage-blob</module>-->\n+<!--        <module>azure-storage-blob-batch</module>-->\n+<!--        <module>azure-storage-blob-changefeed</module>-->\n+<!--        <module>azure-storage-blob-cryptography</module>-->\n+<!--        <module>azure-storage-blob-nio</module>-->\n+<!--        <module>azure-storage-file-share</module>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6aa8318e487345f930e2ac7664be855beb93b6"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MjMwMTIxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQyMzoxODo0OFrOIM27sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQyMzoxODo0OFrOIM27sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM1Mzg0MQ==", "bodyText": "Is this diff created by mistake?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r550353841", "createdAt": "2020-12-30T23:18:48Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/pom.xml", "diffHunk": "@@ -20,7 +20,7 @@\n         <module>azure-spring-cloud-storage</module>\n         <module>azure-spring-cloud-telemetry</module>\n         <module>azure-spring-integration-core</module>\n-        <module>azure-spring-integration-eventhubs</module>\n+          <module>azure-spring-integration-eventhubs</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21df24dcbfe0a7cd105439be76d59ec12a74f7ff"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTA2Nzg3OnYy", "diffSide": "RIGHT", "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ServiceClientCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTo1MDozNlrOIN-1_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTo1MDozNlrOIN-1_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzMjAzMA==", "bodyText": "I wonder if this would be better named 'LONG_RUNNING_OPERATION'?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r551532030", "createdAt": "2021-01-04T19:50:36Z", "author": {"login": "JonathanGiles"}, "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ServiceClientCheck.java", "diffHunk": "@@ -55,15 +56,20 @@\n     private static final String MONO_BRACKET = \"Mono<\";\n     private static final String MONO_RESPONSE_BRACKET = \"Mono<Response<\";\n     private static final String PAGED_FLUX_BRACKET = \"PagedFlux<\";\n+    private static final String POLLER_FLUX_BRACKET = \"PollerFlux<\";\n+    private static final String SYNC_POLLER_BRACKET = \"SyncPoller<\";\n     private static final String PAGED_ITERABLE_BRACKET = \"PagedIterable<\";\n \n     private static final String WITH_RESPONSE = \"WithResponse\";\n \n     private static final String COLLECTION_RETURN_TYPE = \"ReturnType.COLLECTION\";\n     private static final String SINGLE_RETURN_TYPE = \"ReturnType.SINGLE\";\n+    private static final String POLLER_RETURN_TYPE = \"ReturnType.POLLER\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd64bc49e391ce750ac768890adbcd93bf278363"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTA5MTQ1OnYy", "diffSide": "RIGHT", "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ThrowFromClientLoggerCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTo1ODoxMlrOIN_E0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTo1ODoxMlrOIN_E0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzNTgyNA==", "bodyText": "remove", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r551535824", "createdAt": "2021-01-04T19:58:12Z", "author": {"login": "samvaity"}, "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ThrowFromClientLoggerCheck.java", "diffHunk": "@@ -10,6 +10,7 @@\n \n import java.util.ArrayDeque;\n import java.util.Collections;\n+import java.util.Locale;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd64bc49e391ce750ac768890adbcd93bf278363"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTA5MzIzOnYy", "diffSide": "RIGHT", "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ThrowFromClientLoggerCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTo1ODo0N1rOIN_F-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTo1ODo0N1rOIN_F-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzNjEyMA==", "bodyText": "This change is to allow static logger instances named LOGGER", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r551536120", "createdAt": "2021-01-04T19:58:47Z", "author": {"login": "samvaity"}, "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ThrowFromClientLoggerCheck.java", "diffHunk": "@@ -108,10 +109,10 @@ public void visitToken(DetailAST token) {\n \n                 String methodCallName =\n                     FullIdent.createFullIdent(methodCallToken.findFirstToken(TokenTypes.DOT)).getText();\n-                if (!LOGGER_LOG_EXCEPTION_AS_ERROR.equals(methodCallName)\n-                    && !LOGGER_LOG_THROWABLE_AS_ERROR.equals(methodCallName)\n-                    && !LOGGER_LOG_EXCEPTION_AS_WARNING.equals(methodCallName)\n-                    && !LOGGER_LOG_THROWABLE_AS_WARNING.equals(methodCallName)) {\n+                if (!LOGGER_LOG_EXCEPTION_AS_ERROR.equalsIgnoreCase(methodCallName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd64bc49e391ce750ac768890adbcd93bf278363"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTc3MTIwOnYy", "diffSide": "LEFT", "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/GoodLoggingCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMzo1OToyOFrOIOFbiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMzo1OToyOFrOIOFbiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzOTk0NA==", "bodyText": "I think this check should still be there but modified to allow static loggers only if the logger is used within static methods. Instance methods should not use static loggers.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r551639944", "createdAt": "2021-01-04T23:59:28Z", "author": {"login": "srnagar"}, "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/GoodLoggingCheck.java", "diffHunk": "@@ -174,14 +173,8 @@ private void checkLoggerNameMatch(DetailAST varToken) {\n         }\n         // Check if the Logger instance named as 'logger'.\n         final DetailAST identAST = varToken.findFirstToken(TokenTypes.IDENT);\n-        if (identAST != null && !identAST.getText().equals(LOGGER)) {\n+        if (identAST != null && !identAST.getText().equalsIgnoreCase(LOGGER)) {\n             log(varToken, String.format(LOGGER_NAME_ERROR, LOGGER, identAST.getText()));\n         }\n-        // Check if the Logger is static instance, log as error if it is static instance logger.\n-        if (TokenUtil.findFirstTokenByPredicate(varToken,\n-            node -> node.getType() == TokenTypes.MODIFIERS\n-                && node.branchContains(TokenTypes.LITERAL_STATIC)).isPresent()) {\n-            log(varToken, STATIC_LOGGER_ERROR);\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd64bc49e391ce750ac768890adbcd93bf278363"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTc4MDYwOnYy", "diffSide": "RIGHT", "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ServiceClientCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDowNDo1MFrOIOFhPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDowNDo1MFrOIOFhPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY0MTQwNQ==", "bodyText": "!returnType.contains(PAGED_FLUX)  is sufficient as it covers both conditions.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r551641405", "createdAt": "2021-01-05T00:04:50Z", "author": {"login": "srnagar"}, "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ServiceClientCheck.java", "diffHunk": "@@ -330,15 +322,22 @@ private void checkServiceClientMethodReturnType(DetailAST methodDefToken, Detail\n                 // If value of 'returns' is SINGLE, and then log error if the return type of the method is not start\n                 // with {@code Mono<T>}\n                 if (!returnType.startsWith(MONO_BRACKET)) {\n-                    log(methodDefToken, String.format(RETURN_TYPE_ERROR, \"Asynchronous\", SINGLE_RETURN_TYPE, MONO));\n+                    log(methodDefToken, String.format(RETURN_TYPE_ERROR, \"Asynchronous\", SINGLE_RETURN_TYPE,\n+                        MONO));\n                 }\n             } else if (COLLECTION_RETURN_TYPE.equals(returnsAnnotationMemberValue)) {\n                 // If value of 'returns' is COLLECTION, and then log error if the return type of the method is not\n-                // start with {@code PagedFlux<T>}\n-                if (!returnType.startsWith(PAGED_FLUX_BRACKET)) {\n+                // If value of 'returns' is COLLECTION, and then log error if the return type of the method is not\n+                // start with {@code PagedFlux<T>} or *PagedFlux\n+                if (!returnType.startsWith(PAGED_FLUX_BRACKET) && !returnType.contains(PAGED_FLUX)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd64bc49e391ce750ac768890adbcd93bf278363"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTc4MzQ5OnYy", "diffSide": "RIGHT", "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ServiceClientCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDowNjowOVrOIOFizw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDowNjowOVrOIOFizw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY0MTgwNw==", "bodyText": "Should this also have contains check instead?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r551641807", "createdAt": "2021-01-05T00:06:09Z", "author": {"login": "srnagar"}, "path": "eng/code-quality-reports/src/main/java/com/azure/tools/checkstyle/checks/ServiceClientCheck.java", "diffHunk": "@@ -351,11 +350,16 @@ private void checkServiceClientMethodReturnType(DetailAST methodDefToken, Detail\n                 }\n             } else if (COLLECTION_RETURN_TYPE.equals(returnsAnnotationMemberValue)) {\n                 // If value of 'returns' is COLLECTION, and then log error if the return type of the method is not\n-                // start with {@code PagedIterable<T>}\n-                if (!returnType.startsWith(PAGED_ITERABLE_BRACKET)) {\n+                // start with {@code PagedIterable<T>} or *PagedIterable\n+                if (!returnType.startsWith(PAGED_ITERABLE_BRACKET) && !returnType.contains(PAGED_ITERABLE)) {\n                     log(methodDefToken, String.format(RETURN_TYPE_ERROR, \"Synchronous\", COLLECTION_RETURN_TYPE,\n                         PAGED_ITERABLE));\n                 }\n+            } else if (POLLER_RETURN_TYPE.equals(returnsAnnotationMemberValue)) {\n+                if (!returnType.startsWith(SYNC_POLLER_BRACKET)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd64bc49e391ce750ac768890adbcd93bf278363"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDgzNDM2OnYy", "diffSide": "LEFT", "path": "eng/code-quality-reports/src/main/resources/checkstyle/checkstyle-suppressions.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwMToxMjozOVrOIPbuaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxODowMDo0MFrOIP2ePw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA1MzgwMA==", "bodyText": "Has the checkstyle issue flagging these vocabulary violations been fixed?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r553053800", "createdAt": "2021-01-07T01:12:39Z", "author": {"login": "vcolin7"}, "path": "eng/code-quality-reports/src/main/resources/checkstyle/checkstyle-suppressions.xml", "diffHunk": "@@ -299,108 +299,34 @@\n   <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\"\n             files=\"com.azure.identity.DeviceCodeCredentialBuilder.java\"/>\n \n-\n-  <!-- Use the logger in a Utility static method. -->\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.ai.formrecognizer.Transforms.java\"/>\n-  <suppress checks=\"com\\.azure\\.tools\\.checkstyle\\.checks\\.(ThrowFromClientLoggerCheck|GoodLoggingCheck)\" files=\"com.azure.ai.formrecognizer.training.models.CopyAuthorization\"/>\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.ai.formrecognizer.training.CustomModelTransforms.java\"/>\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.ai.formrecognizer.implementation.Utility.java\"/>\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.search.documents.implementation.util.FieldBuilder.java\"/>\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.search.documents.SearchFilter.java\"/>\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.ai.formrecognizer.implementation.PrivateFieldAccessHelper.java\"/>\n-\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.EnforceFinalFieldsCheck\" files=\"com.azure.ai.formrecognizer.models.FieldValue\"/>\n-\n-  <!-- Common vocabulary error for LRO methods starting with begin* https://github.com/Azure/azure-sdk-for-java/issues/10147 -->\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.ServiceClientCheck\" files=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient.java\"/>\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.ServiceClientCheck\" files=\"com.azure.ai.formrecognizer.FormRecognizerClient.java\"/>\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.ServiceClientCheck\" files=\"com.azure.ai.formrecognizer.training.FormTrainingClient.java\"/>\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.ServiceClientCheck\" files=\"com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.java\"/>\n-\n-  <!-- The variables are assigned by json creator annotation injection framework, cannot be made final. -->\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.EnforceFinalFieldsCheck\" files=\"com.azure.ai.formrecognizer.training.models.CopyAuthorization.java\"/>\n-\n-  <!-- Throws a non-runtime exception -->\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.ThrowFromClientLogger\"\n-            files=\"com.azure.core.http.netty.implementation.HttpProxyHandler.java\"/>\n-\n-  <!-- Event Hubs uses AMQP, which does not contain an HTTP response. Returning PagedResponse and Response does not apply. -->\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.ServiceClientCheck\"\n-            files=\"com.azure.messaging.eventhubs.EventHubClient.java\"/>\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.ServiceClientCheck\"\n-            files=\"com.azure.messaging.eventhubs.EventHubAsyncClient.java\"/>\n+  <!-- Not newing ClientLogger  -->\n+  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.core.util.logging.ClientLogger.java\"/>\n+  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.core.implementation.logging.DefaultLogger.java\"/>\n+  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.core.util.serializer.SerializerEncoding.java\"/>\n \n   <!-- TODO: Synapse access control API does not support PagedResponse and Response. -->\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.ServiceClientCheck\"\n-            files=\"com.azure.analytics.synapse.accesscontrol.AccessControlAsyncClient\"/>\n-\n-  <!-- Public API already exposed: Common vocabulary errors, refer to Java Spec: https://azure.github.io/azure-sdk/java_introduction.html,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd64bc49e391ce750ac768890adbcd93bf278363"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ5MjAzMQ==", "bodyText": "Yes, we removed the api naming restrictions altogether.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18401#discussion_r553492031", "createdAt": "2021-01-07T18:00:40Z", "author": {"login": "samvaity"}, "path": "eng/code-quality-reports/src/main/resources/checkstyle/checkstyle-suppressions.xml", "diffHunk": "@@ -299,108 +299,34 @@\n   <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\"\n             files=\"com.azure.identity.DeviceCodeCredentialBuilder.java\"/>\n \n-\n-  <!-- Use the logger in a Utility static method. -->\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.ai.formrecognizer.Transforms.java\"/>\n-  <suppress checks=\"com\\.azure\\.tools\\.checkstyle\\.checks\\.(ThrowFromClientLoggerCheck|GoodLoggingCheck)\" files=\"com.azure.ai.formrecognizer.training.models.CopyAuthorization\"/>\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.ai.formrecognizer.training.CustomModelTransforms.java\"/>\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.ai.formrecognizer.implementation.Utility.java\"/>\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.search.documents.implementation.util.FieldBuilder.java\"/>\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.search.documents.SearchFilter.java\"/>\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.ai.formrecognizer.implementation.PrivateFieldAccessHelper.java\"/>\n-\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.EnforceFinalFieldsCheck\" files=\"com.azure.ai.formrecognizer.models.FieldValue\"/>\n-\n-  <!-- Common vocabulary error for LRO methods starting with begin* https://github.com/Azure/azure-sdk-for-java/issues/10147 -->\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.ServiceClientCheck\" files=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient.java\"/>\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.ServiceClientCheck\" files=\"com.azure.ai.formrecognizer.FormRecognizerClient.java\"/>\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.ServiceClientCheck\" files=\"com.azure.ai.formrecognizer.training.FormTrainingClient.java\"/>\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.ServiceClientCheck\" files=\"com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.java\"/>\n-\n-  <!-- The variables are assigned by json creator annotation injection framework, cannot be made final. -->\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.EnforceFinalFieldsCheck\" files=\"com.azure.ai.formrecognizer.training.models.CopyAuthorization.java\"/>\n-\n-  <!-- Throws a non-runtime exception -->\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.ThrowFromClientLogger\"\n-            files=\"com.azure.core.http.netty.implementation.HttpProxyHandler.java\"/>\n-\n-  <!-- Event Hubs uses AMQP, which does not contain an HTTP response. Returning PagedResponse and Response does not apply. -->\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.ServiceClientCheck\"\n-            files=\"com.azure.messaging.eventhubs.EventHubClient.java\"/>\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.ServiceClientCheck\"\n-            files=\"com.azure.messaging.eventhubs.EventHubAsyncClient.java\"/>\n+  <!-- Not newing ClientLogger  -->\n+  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.core.util.logging.ClientLogger.java\"/>\n+  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.core.implementation.logging.DefaultLogger.java\"/>\n+  <suppress checks=\"com.azure.tools.checkstyle.checks.GoodLoggingCheck\" files=\"com.azure.core.util.serializer.SerializerEncoding.java\"/>\n \n   <!-- TODO: Synapse access control API does not support PagedResponse and Response. -->\n-  <suppress checks=\"com.azure.tools.checkstyle.checks.ServiceClientCheck\"\n-            files=\"com.azure.analytics.synapse.accesscontrol.AccessControlAsyncClient\"/>\n-\n-  <!-- Public API already exposed: Common vocabulary errors, refer to Java Spec: https://azure.github.io/azure-sdk/java_introduction.html,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA1MzgwMA=="}, "originalCommit": {"oid": "bd64bc49e391ce750ac768890adbcd93bf278363"}, "originalPosition": 267}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1774, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}