{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNTgyMTE3", "number": 10027, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo0NzoxNlrODwhkVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDowNTozM1rODwmxVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjA4MjE0OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JacksonAdapter.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo0NzoxNlrOGDlFxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDo1MzoxN1rOGDt-WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNjU5Nw==", "bodyText": "Do we need this BOM stripping on already stripped-and-decoded string anymore?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10027#discussion_r406406597", "createdAt": "2020-04-09T18:47:16Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JacksonAdapter.java", "diffHunk": "@@ -66,7 +65,7 @@\n      * BOM header from some response bodies. To be removed in deserialization.\n      */\n     private static final String BOM = \"\\uFEFF\";\n-    private static final String BOM_STRING = new String(BOM.getBytes(StandardCharsets.UTF_8), Charset.defaultCharset());\n+    private static final String BOM_STRING = new String(BOM.getBytes(StandardCharsets.UTF_8), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a3b8889a2b3c226555ff86987b368418606eb2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNzg0Mw==", "bodyText": "Shouldn't need it anymore, will add tests into the share RestProxyTests that will validate encoding handling for all clients.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10027#discussion_r406407843", "createdAt": "2020-04-09T18:49:24Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JacksonAdapter.java", "diffHunk": "@@ -66,7 +65,7 @@\n      * BOM header from some response bodies. To be removed in deserialization.\n      */\n     private static final String BOM = \"\\uFEFF\";\n-    private static final String BOM_STRING = new String(BOM.getBytes(StandardCharsets.UTF_8), Charset.defaultCharset());\n+    private static final String BOM_STRING = new String(BOM.getBytes(StandardCharsets.UTF_8), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNjU5Nw=="}, "originalCommit": {"oid": "98a3b8889a2b3c226555ff86987b368418606eb2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NDMwNw==", "bodyText": "Do we need to apply a similar BOM lookup here as well?\n\n  \n    \n      azure-sdk-for-java/sdk/core/azure-core/src/main/java/com/azure/core/implementation/http/BufferedHttpResponse.java\n    \n    \n         Line 63\n      in\n      88adf36\n    \n    \n    \n    \n\n        \n          \n           public Mono<String> getBodyAsString() {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10027#discussion_r406474307", "createdAt": "2020-04-09T21:00:01Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JacksonAdapter.java", "diffHunk": "@@ -66,7 +65,7 @@\n      * BOM header from some response bodies. To be removed in deserialization.\n      */\n     private static final String BOM = \"\\uFEFF\";\n-    private static final String BOM_STRING = new String(BOM.getBytes(StandardCharsets.UTF_8), Charset.defaultCharset());\n+    private static final String BOM_STRING = new String(BOM.getBytes(StandardCharsets.UTF_8), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNjU5Nw=="}, "originalCommit": {"oid": "98a3b8889a2b3c226555ff86987b368418606eb2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3OTg1OQ==", "bodyText": "If so, wondering whether it makes sense to move this to FluxUtils?  something like:\nMono<String> FluxUtils.toBomAwarePublisher(\n    Flux<ByteBuffer> stream,  \n    String contentEncoding)\nwhere contentEncoding is the value of Content-Encoding header, if no BOM prefix in-stream and if contentEncoding is null then method uses utf8 as default.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10027#discussion_r406479859", "createdAt": "2020-04-09T21:11:30Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JacksonAdapter.java", "diffHunk": "@@ -66,7 +65,7 @@\n      * BOM header from some response bodies. To be removed in deserialization.\n      */\n     private static final String BOM = \"\\uFEFF\";\n-    private static final String BOM_STRING = new String(BOM.getBytes(StandardCharsets.UTF_8), Charset.defaultCharset());\n+    private static final String BOM_STRING = new String(BOM.getBytes(StandardCharsets.UTF_8), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNjU5Nw=="}, "originalCommit": {"oid": "98a3b8889a2b3c226555ff86987b368418606eb2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1MjE1Mw==", "bodyText": "Added helper into CoreUtils", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10027#discussion_r406552153", "createdAt": "2020-04-10T00:53:17Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JacksonAdapter.java", "diffHunk": "@@ -66,7 +65,7 @@\n      * BOM header from some response bodies. To be removed in deserialization.\n      */\n     private static final String BOM = \"\\uFEFF\";\n-    private static final String BOM_STRING = new String(BOM.getBytes(StandardCharsets.UTF_8), Charset.defaultCharset());\n+    private static final String BOM_STRING = new String(BOM.getBytes(StandardCharsets.UTF_8), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNjU5Nw=="}, "originalCommit": {"oid": "98a3b8889a2b3c226555ff86987b368418606eb2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjEwMjUwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-http-jdk-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo1MzoyNVrOGDlS3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDo1Mjo0M1rOGDt9xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwOTk1MQ==", "bodyText": "Any reason why we look for only these 3 charsets and not others? Adding a comment here to explain that would be good.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10027#discussion_r406409951", "createdAt": "2020-04-09T18:53:25Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-jdk-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -216,14 +216,36 @@ public HttpHeaders getHeaders() {\n \n         @Override\n         public Mono<String> getBodyAsString() {\n-            return getBodyAsByteArray()\n-                .map(bytes -> new String(bytes, StandardCharsets.UTF_8));\n+            return getBodyAsByteArray().map(bytes -> {\n+                if (bytes.length >= 3 && bytes[0] == (byte) 239 && bytes[1] == (byte) 187 && bytes[2] == (byte) 191) {\n+                    return new String(bytes, 3, bytes.length - 3, StandardCharsets.UTF_8);\n+                } else if (bytes.length >= 2 && bytes[0] == (byte) 254 && bytes[1] == (byte) 255) {\n+                    return new String(bytes, 2, bytes.length - 2, StandardCharsets.UTF_16BE);\n+                } else if (bytes.length >= 2 && bytes[0] == (byte) 255 && bytes[1] == (byte) 254) {\n+                    return new String(bytes, 2, bytes.length - 2, StandardCharsets.UTF_16LE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a3b8889a2b3c226555ff86987b368418606eb2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1MjAwNg==", "bodyText": "Added support for UTF-32BE and UTF-32LE", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10027#discussion_r406552006", "createdAt": "2020-04-10T00:52:43Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-jdk-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -216,14 +216,36 @@ public HttpHeaders getHeaders() {\n \n         @Override\n         public Mono<String> getBodyAsString() {\n-            return getBodyAsByteArray()\n-                .map(bytes -> new String(bytes, StandardCharsets.UTF_8));\n+            return getBodyAsByteArray().map(bytes -> {\n+                if (bytes.length >= 3 && bytes[0] == (byte) 239 && bytes[1] == (byte) 187 && bytes[2] == (byte) 191) {\n+                    return new String(bytes, 3, bytes.length - 3, StandardCharsets.UTF_8);\n+                } else if (bytes.length >= 2 && bytes[0] == (byte) 254 && bytes[1] == (byte) 255) {\n+                    return new String(bytes, 2, bytes.length - 2, StandardCharsets.UTF_16BE);\n+                } else if (bytes.length >= 2 && bytes[0] == (byte) 255 && bytes[1] == (byte) 254) {\n+                    return new String(bytes, 2, bytes.length - 2, StandardCharsets.UTF_16LE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwOTk1MQ=="}, "originalCommit": {"oid": "98a3b8889a2b3c226555ff86987b368418606eb2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjkzNDYyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDowNTozM1rOGDtPoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDowNzo1MFrOGDtR1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0MDE5Mw==", "bodyText": "Both JDK client and Netty client have to do the same logic for converting response byte array to string. It would be better to put this in Core utils somewhere to reduce duplication and if there are any fixes or updates to this logic, we don't need to update in two places.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10027#discussion_r406540193", "createdAt": "2020-04-10T00:05:33Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClient.java", "diffHunk": "@@ -211,9 +214,31 @@ public HttpHeaders getHeaders() {\n \n         @Override\n         public Mono<String> getBodyAsString() {\n-            return bodyIntern().aggregate().asString().doFinally(s -> {\n-                if (!reactorNettyConnection.isDisposed()) {\n-                    reactorNettyConnection.channel().eventLoop().execute(reactorNettyConnection::dispose);\n+            return getBodyAsByteArray().map(bytes -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cbcaaf1e6f91939c5286b784c91bd3d365705b8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0MDc1Nw==", "bodyText": "Yeah I was thinking about that, also would give the opportunity to test is more directly and thoroughly.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10027#discussion_r406540757", "createdAt": "2020-04-10T00:07:50Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClient.java", "diffHunk": "@@ -211,9 +214,31 @@ public HttpHeaders getHeaders() {\n \n         @Override\n         public Mono<String> getBodyAsString() {\n-            return bodyIntern().aggregate().asString().doFinally(s -> {\n-                if (!reactorNettyConnection.isDisposed()) {\n-                    reactorNettyConnection.channel().eventLoop().execute(reactorNettyConnection::dispose);\n+            return getBodyAsByteArray().map(bytes -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0MDE5Mw=="}, "originalCommit": {"oid": "6cbcaaf1e6f91939c5286b784c91bd3d365705b8"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1934, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}