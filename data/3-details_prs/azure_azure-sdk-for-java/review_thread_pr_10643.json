{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNzgwNzIw", "number": 10643, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToxMzo0NVrOD4LDGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjo0MTowOFrOD4attQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjI3ODY3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/test/java/com/azure/storage/blob/nio/NioBlobInputStreamTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToxMzo0NVrOGO21wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTo1MzowNFrOGO4D_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMTc0Ng==", "bodyText": "Does our implementation of BlobInputStream always give back the user as much data as they requested? Cause isnt it possible for an InputStream to return less than expected?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r418231746", "createdAt": "2020-04-30T19:13:45Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/test/java/com/azure/storage/blob/nio/NioBlobInputStreamTest.groovy", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio\n+\n+import com.azure.storage.blob.BlobClient\n+import spock.lang.Unroll\n+\n+class NioBlobInputStreamTest extends APISpec {\n+\n+    File sourceFile\n+    BlobClient bc\n+    NioBlobInputStream nioStream\n+    FileInputStream fileStream\n+\n+    def setup() {\n+        sourceFile = getRandomFile(10 * 1024 * 1024)\n+        cc.create()\n+        bc = cc.getBlobClient(generateBlobName())\n+        bc.uploadFromFile(sourceFile.getPath())\n+        nioStream = new NioBlobInputStream(bc.openInputStream())\n+        fileStream = new FileInputStream(sourceFile)\n+    }\n+\n+    def cleanup() {\n+        sourceFile.delete()\n+        cc.delete()\n+    }\n+\n+    def \"Read whole file\"() {\n+        expect:\n+        compareInputStreams(nioStream, fileStream, sourceFile.size())\n+    }\n+\n+    def \"Read min\"() {\n+        expect:\n+        for (i in 1..100) {\n+            assert nioStream.read() == fileStream.read()\n+        }\n+    }\n+\n+    @Unroll\n+    def \"Read buff\"() {\n+        setup:\n+        def nioBytes = new byte[size]\n+        def fileBytes = new byte[size]\n+\n+        when:\n+        nioStream.read(nioBytes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1MTc3NA==", "bodyText": "You're right that the docs say it could return less, but our read method will always return the amount asked for unless there's an error or the end of the blob is hit.\nint chunks = (int) (Math.ceil((double) len / (double) this.chunkSize));\n        int numOfBytesRead = 0;\n        for (int i = 0; i < chunks; i++) {\n            int results = this.readInternal(b, off + numOfBytesRead, len);\n            if (results == -1) {\n                return -1;\n            }\n            numOfBytesRead += results;\n        }\n        return numOfBytesRead;", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r418251774", "createdAt": "2020-04-30T19:53:04Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/test/java/com/azure/storage/blob/nio/NioBlobInputStreamTest.groovy", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio\n+\n+import com.azure.storage.blob.BlobClient\n+import spock.lang.Unroll\n+\n+class NioBlobInputStreamTest extends APISpec {\n+\n+    File sourceFile\n+    BlobClient bc\n+    NioBlobInputStream nioStream\n+    FileInputStream fileStream\n+\n+    def setup() {\n+        sourceFile = getRandomFile(10 * 1024 * 1024)\n+        cc.create()\n+        bc = cc.getBlobClient(generateBlobName())\n+        bc.uploadFromFile(sourceFile.getPath())\n+        nioStream = new NioBlobInputStream(bc.openInputStream())\n+        fileStream = new FileInputStream(sourceFile)\n+    }\n+\n+    def cleanup() {\n+        sourceFile.delete()\n+        cc.delete()\n+    }\n+\n+    def \"Read whole file\"() {\n+        expect:\n+        compareInputStreams(nioStream, fileStream, sourceFile.size())\n+    }\n+\n+    def \"Read min\"() {\n+        expect:\n+        for (i in 1..100) {\n+            assert nioStream.read() == fileStream.read()\n+        }\n+    }\n+\n+    @Unroll\n+    def \"Read buff\"() {\n+        setup:\n+        def nioBytes = new byte[size]\n+        def fileBytes = new byte[size]\n+\n+        when:\n+        nioStream.read(nioBytes)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMTc0Ng=="}, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQzMDQ1OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/NioBlobInputStream.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowMjowNVrOGO4VcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNToxNDowMlrOGPMbhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NjI0MA==", "bodyText": "Are you wrapping each method since you want to log using the NioBlobInputStream class? Just wondering", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r418256240", "createdAt": "2020-04-30T20:02:05Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/NioBlobInputStream.java", "diffHunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.specialized.BlobInputStream;\n+import com.azure.storage.common.implementation.Constants;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Provides an InputStream to read a file stored as an Azure Blob.\n+ */\n+public class NioBlobInputStream extends InputStream {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTMyMw==", "bodyText": "+1 I wonder what additional functionality NioBlobInputStream provides over BlobInputStream.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r418265323", "createdAt": "2020-04-30T20:20:07Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/NioBlobInputStream.java", "diffHunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.specialized.BlobInputStream;\n+import com.azure.storage.common.implementation.Constants;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Provides an InputStream to read a file stored as an Azure Blob.\n+ */\n+public class NioBlobInputStream extends InputStream {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NjI0MA=="}, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyMDY3Mg==", "bodyText": "There's no additional functionality right now, but I can't say for sure that usage patterns will be the same between nio and the sdk, and they may require swapping out the implementation for different performance characteristics or adding features we don't want in the sdk. Because of that, I think it's safer to define a type specific to nio that we can update independent of the underlying BlobInputStream", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r418320672", "createdAt": "2020-04-30T22:18:17Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/NioBlobInputStream.java", "diffHunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.specialized.BlobInputStream;\n+import com.azure.storage.common.implementation.Constants;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Provides an InputStream to read a file stored as an Azure Blob.\n+ */\n+public class NioBlobInputStream extends InputStream {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NjI0MA=="}, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4NTQ3OQ==", "bodyText": "Hmm. Then the only reason this exist would be to reserve publicly available class name (+/- error translation depending on other discussion). Otherwise this could be YAGNI .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r418585479", "createdAt": "2020-05-01T15:14:02Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/NioBlobInputStream.java", "diffHunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.specialized.BlobInputStream;\n+import com.azure.storage.common.implementation.Constants;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Provides an InputStream to read a file stored as an Azure Blob.\n+ */\n+public class NioBlobInputStream extends InputStream {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NjI0MA=="}, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ4ODQ3OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/NioBlobInputStream.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyMDo0NVrOGO46Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjo1ODo1MlrOGPPT0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTY1NQ==", "bodyText": "Shoundn't this already happen inside BlobInputStream ? If not would it be possible to push it down there instead of creating new type ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r418265655", "createdAt": "2020-04-30T20:20:45Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/NioBlobInputStream.java", "diffHunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.specialized.BlobInputStream;\n+import com.azure.storage.common.implementation.Constants;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Provides an InputStream to read a file stored as an Azure Blob.\n+ */\n+public class NioBlobInputStream extends InputStream {\n+    private final ClientLogger logger = new ClientLogger(NioBlobInputStream.class);\n+\n+    private final BlobInputStream blobInputStream;\n+\n+    NioBlobInputStream(BlobInputStream blobInputStream) {\n+        this.blobInputStream = blobInputStream;\n+    }\n+\n+    /**\n+     * Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without\n+     * blocking by the next invocation of a method for this input stream. The next invocation might be the same thread\n+     * or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes.\n+     *\n+     * @return An <code>int</code> which represents an estimate of the number of bytes that can be read (or skipped\n+     * over) from this input stream without blocking, or 0 when it reaches the end of the input stream.\n+     */\n+    @Override\n+    public synchronized int available() {\n+        return this.blobInputStream.available();\n+    }\n+\n+    /**\n+     * Closes this input stream and releases any system resources associated with the stream.\n+     */\n+    @Override\n+    public synchronized void close() {\n+        this.blobInputStream.close();\n+    }\n+\n+    /**\n+     * Marks the current position in this input stream. A subsequent call to the reset method repositions this stream at\n+     * the last marked position so that subsequent reads re-read the same bytes.\n+     *\n+     * @param readlimit An <code>int</code> which represents the maximum limit of bytes that can be read before the mark\n+     * position becomes invalid.\n+     */\n+    @Override\n+    public synchronized void mark(final int readlimit) {\n+        this.blobInputStream.mark(readlimit);\n+    }\n+\n+    /**\n+     * Tests if this input stream supports the mark and reset methods.\n+     *\n+     * @return Returns {@code true}\n+     */\n+    @Override\n+    public boolean markSupported() {\n+        return this.blobInputStream.markSupported();\n+    }\n+\n+    /**\n+     * Reads the next byte of data from the input stream. The value byte is returned as an int in the range 0 to 255. If\n+     * no byte is available because the end of the stream has been reached, the value -1 is returned. This method blocks\n+     * until input data is available, the end of the stream is detected, or an exception is thrown.\n+     *\n+     * @return An <code>int</code> which represents the total number of bytes read into the buffer, or -1 if there is no\n+     * more data because the end of the stream has been reached.\n+     * @throws RuntimeException when no available bytes to read.\n+     * @throws IOException If an I/O error occurs.\n+     */\n+    @Override\n+    public int read() throws IOException {\n+        try {\n+            return this.blobInputStream.read();\n+        } catch (RuntimeException e) {\n+            if (e.getMessage().equals(Constants.STREAM_CLOSED)) {\n+                throw LoggingUtility.logError(logger, new IOException(e));\n+            }\n+            throw LoggingUtility.logError(logger, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyMTkyMg==", "bodyText": "BlobInputStream throws RuntimeExceptions, and the contract specifies that these methods are supposed to throw an IOException. I suspect that BlobInputStream was changed to throw RuntimeExceptions to work better with Reactor, but in an environment that isn't touched by async stuff, I think it's best to conform to the actual api conctract.\nI can look into skipping the double logging if you don't like that. It'll probably require a checkstyle suppression since CI doesn't usually let you use a raw throw statement without somehow passing it through a logger.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r418321922", "createdAt": "2020-04-30T22:21:18Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/NioBlobInputStream.java", "diffHunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.specialized.BlobInputStream;\n+import com.azure.storage.common.implementation.Constants;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Provides an InputStream to read a file stored as an Azure Blob.\n+ */\n+public class NioBlobInputStream extends InputStream {\n+    private final ClientLogger logger = new ClientLogger(NioBlobInputStream.class);\n+\n+    private final BlobInputStream blobInputStream;\n+\n+    NioBlobInputStream(BlobInputStream blobInputStream) {\n+        this.blobInputStream = blobInputStream;\n+    }\n+\n+    /**\n+     * Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without\n+     * blocking by the next invocation of a method for this input stream. The next invocation might be the same thread\n+     * or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes.\n+     *\n+     * @return An <code>int</code> which represents an estimate of the number of bytes that can be read (or skipped\n+     * over) from this input stream without blocking, or 0 when it reaches the end of the input stream.\n+     */\n+    @Override\n+    public synchronized int available() {\n+        return this.blobInputStream.available();\n+    }\n+\n+    /**\n+     * Closes this input stream and releases any system resources associated with the stream.\n+     */\n+    @Override\n+    public synchronized void close() {\n+        this.blobInputStream.close();\n+    }\n+\n+    /**\n+     * Marks the current position in this input stream. A subsequent call to the reset method repositions this stream at\n+     * the last marked position so that subsequent reads re-read the same bytes.\n+     *\n+     * @param readlimit An <code>int</code> which represents the maximum limit of bytes that can be read before the mark\n+     * position becomes invalid.\n+     */\n+    @Override\n+    public synchronized void mark(final int readlimit) {\n+        this.blobInputStream.mark(readlimit);\n+    }\n+\n+    /**\n+     * Tests if this input stream supports the mark and reset methods.\n+     *\n+     * @return Returns {@code true}\n+     */\n+    @Override\n+    public boolean markSupported() {\n+        return this.blobInputStream.markSupported();\n+    }\n+\n+    /**\n+     * Reads the next byte of data from the input stream. The value byte is returned as an int in the range 0 to 255. If\n+     * no byte is available because the end of the stream has been reached, the value -1 is returned. This method blocks\n+     * until input data is available, the end of the stream is detected, or an exception is thrown.\n+     *\n+     * @return An <code>int</code> which represents the total number of bytes read into the buffer, or -1 if there is no\n+     * more data because the end of the stream has been reached.\n+     * @throws RuntimeException when no available bytes to read.\n+     * @throws IOException If an I/O error occurs.\n+     */\n+    @Override\n+    public int read() throws IOException {\n+        try {\n+            return this.blobInputStream.read();\n+        } catch (RuntimeException e) {\n+            if (e.getMessage().equals(Constants.STREAM_CLOSED)) {\n+                throw LoggingUtility.logError(logger, new IOException(e));\n+            }\n+            throw LoggingUtility.logError(logger, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTY1NQ=="}, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4NDcwMg==", "bodyText": "I'm not sure if BlobInputStream throwin RuntimeException is/was intentional. As you said the InputStream contract forces caller to handle IOException, so reactive code we have that's calling it should be handling/convering IOExceptions (otherwise compiler wouldn't be happy) - if that's the case I think we could safely make underlying stream confirming to the contract instead (e.g. throw IOException on certain response codes).\nIf we keep error translation here then I think we have more to cover . I.e. underlying stream can throw new RuntimeException(UNEXPECTED_STREAM_READ_ERROR) . Then, if the list of messages indicating IOException grows then we'll have a challage of maintaining parity between this class and underlying infra (which would be another argument to push this responsibility to underlying stream).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r418584702", "createdAt": "2020-05-01T15:12:17Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/NioBlobInputStream.java", "diffHunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.specialized.BlobInputStream;\n+import com.azure.storage.common.implementation.Constants;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Provides an InputStream to read a file stored as an Azure Blob.\n+ */\n+public class NioBlobInputStream extends InputStream {\n+    private final ClientLogger logger = new ClientLogger(NioBlobInputStream.class);\n+\n+    private final BlobInputStream blobInputStream;\n+\n+    NioBlobInputStream(BlobInputStream blobInputStream) {\n+        this.blobInputStream = blobInputStream;\n+    }\n+\n+    /**\n+     * Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without\n+     * blocking by the next invocation of a method for this input stream. The next invocation might be the same thread\n+     * or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes.\n+     *\n+     * @return An <code>int</code> which represents an estimate of the number of bytes that can be read (or skipped\n+     * over) from this input stream without blocking, or 0 when it reaches the end of the input stream.\n+     */\n+    @Override\n+    public synchronized int available() {\n+        return this.blobInputStream.available();\n+    }\n+\n+    /**\n+     * Closes this input stream and releases any system resources associated with the stream.\n+     */\n+    @Override\n+    public synchronized void close() {\n+        this.blobInputStream.close();\n+    }\n+\n+    /**\n+     * Marks the current position in this input stream. A subsequent call to the reset method repositions this stream at\n+     * the last marked position so that subsequent reads re-read the same bytes.\n+     *\n+     * @param readlimit An <code>int</code> which represents the maximum limit of bytes that can be read before the mark\n+     * position becomes invalid.\n+     */\n+    @Override\n+    public synchronized void mark(final int readlimit) {\n+        this.blobInputStream.mark(readlimit);\n+    }\n+\n+    /**\n+     * Tests if this input stream supports the mark and reset methods.\n+     *\n+     * @return Returns {@code true}\n+     */\n+    @Override\n+    public boolean markSupported() {\n+        return this.blobInputStream.markSupported();\n+    }\n+\n+    /**\n+     * Reads the next byte of data from the input stream. The value byte is returned as an int in the range 0 to 255. If\n+     * no byte is available because the end of the stream has been reached, the value -1 is returned. This method blocks\n+     * until input data is available, the end of the stream is detected, or an exception is thrown.\n+     *\n+     * @return An <code>int</code> which represents the total number of bytes read into the buffer, or -1 if there is no\n+     * more data because the end of the stream has been reached.\n+     * @throws RuntimeException when no available bytes to read.\n+     * @throws IOException If an I/O error occurs.\n+     */\n+    @Override\n+    public int read() throws IOException {\n+        try {\n+            return this.blobInputStream.read();\n+        } catch (RuntimeException e) {\n+            if (e.getMessage().equals(Constants.STREAM_CLOSED)) {\n+                throw LoggingUtility.logError(logger, new IOException(e));\n+            }\n+            throw LoggingUtility.logError(logger, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTY1NQ=="}, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNjU3NA==", "bodyText": "I think changing the kinds of exceptions we throw is a breaking change, even if the customer theoretically should be handling it already, no?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r418626574", "createdAt": "2020-05-01T16:45:16Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/NioBlobInputStream.java", "diffHunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.specialized.BlobInputStream;\n+import com.azure.storage.common.implementation.Constants;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Provides an InputStream to read a file stored as an Azure Blob.\n+ */\n+public class NioBlobInputStream extends InputStream {\n+    private final ClientLogger logger = new ClientLogger(NioBlobInputStream.class);\n+\n+    private final BlobInputStream blobInputStream;\n+\n+    NioBlobInputStream(BlobInputStream blobInputStream) {\n+        this.blobInputStream = blobInputStream;\n+    }\n+\n+    /**\n+     * Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without\n+     * blocking by the next invocation of a method for this input stream. The next invocation might be the same thread\n+     * or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes.\n+     *\n+     * @return An <code>int</code> which represents an estimate of the number of bytes that can be read (or skipped\n+     * over) from this input stream without blocking, or 0 when it reaches the end of the input stream.\n+     */\n+    @Override\n+    public synchronized int available() {\n+        return this.blobInputStream.available();\n+    }\n+\n+    /**\n+     * Closes this input stream and releases any system resources associated with the stream.\n+     */\n+    @Override\n+    public synchronized void close() {\n+        this.blobInputStream.close();\n+    }\n+\n+    /**\n+     * Marks the current position in this input stream. A subsequent call to the reset method repositions this stream at\n+     * the last marked position so that subsequent reads re-read the same bytes.\n+     *\n+     * @param readlimit An <code>int</code> which represents the maximum limit of bytes that can be read before the mark\n+     * position becomes invalid.\n+     */\n+    @Override\n+    public synchronized void mark(final int readlimit) {\n+        this.blobInputStream.mark(readlimit);\n+    }\n+\n+    /**\n+     * Tests if this input stream supports the mark and reset methods.\n+     *\n+     * @return Returns {@code true}\n+     */\n+    @Override\n+    public boolean markSupported() {\n+        return this.blobInputStream.markSupported();\n+    }\n+\n+    /**\n+     * Reads the next byte of data from the input stream. The value byte is returned as an int in the range 0 to 255. If\n+     * no byte is available because the end of the stream has been reached, the value -1 is returned. This method blocks\n+     * until input data is available, the end of the stream is detected, or an exception is thrown.\n+     *\n+     * @return An <code>int</code> which represents the total number of bytes read into the buffer, or -1 if there is no\n+     * more data because the end of the stream has been reached.\n+     * @throws RuntimeException when no available bytes to read.\n+     * @throws IOException If an I/O error occurs.\n+     */\n+    @Override\n+    public int read() throws IOException {\n+        try {\n+            return this.blobInputStream.read();\n+        } catch (RuntimeException e) {\n+            if (e.getMessage().equals(Constants.STREAM_CLOSED)) {\n+                throw LoggingUtility.logError(logger, new IOException(e));\n+            }\n+            throw LoggingUtility.logError(logger, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTY1NQ=="}, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYzMjY1OQ==", "bodyText": "Since we're talking about RuntimeException vs IOException I think it all boils down to how did we document @throws in existing streams.\nFor example here or here the described contract is quite open. Moreover I'd say that if we throw RuntimeExceptions there on something that's \"I/O related\" then that should be bug (since we don't conform to our own documentation).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r418632659", "createdAt": "2020-05-01T16:58:52Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/NioBlobInputStream.java", "diffHunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.specialized.BlobInputStream;\n+import com.azure.storage.common.implementation.Constants;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Provides an InputStream to read a file stored as an Azure Blob.\n+ */\n+public class NioBlobInputStream extends InputStream {\n+    private final ClientLogger logger = new ClientLogger(NioBlobInputStream.class);\n+\n+    private final BlobInputStream blobInputStream;\n+\n+    NioBlobInputStream(BlobInputStream blobInputStream) {\n+        this.blobInputStream = blobInputStream;\n+    }\n+\n+    /**\n+     * Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without\n+     * blocking by the next invocation of a method for this input stream. The next invocation might be the same thread\n+     * or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes.\n+     *\n+     * @return An <code>int</code> which represents an estimate of the number of bytes that can be read (or skipped\n+     * over) from this input stream without blocking, or 0 when it reaches the end of the input stream.\n+     */\n+    @Override\n+    public synchronized int available() {\n+        return this.blobInputStream.available();\n+    }\n+\n+    /**\n+     * Closes this input stream and releases any system resources associated with the stream.\n+     */\n+    @Override\n+    public synchronized void close() {\n+        this.blobInputStream.close();\n+    }\n+\n+    /**\n+     * Marks the current position in this input stream. A subsequent call to the reset method repositions this stream at\n+     * the last marked position so that subsequent reads re-read the same bytes.\n+     *\n+     * @param readlimit An <code>int</code> which represents the maximum limit of bytes that can be read before the mark\n+     * position becomes invalid.\n+     */\n+    @Override\n+    public synchronized void mark(final int readlimit) {\n+        this.blobInputStream.mark(readlimit);\n+    }\n+\n+    /**\n+     * Tests if this input stream supports the mark and reset methods.\n+     *\n+     * @return Returns {@code true}\n+     */\n+    @Override\n+    public boolean markSupported() {\n+        return this.blobInputStream.markSupported();\n+    }\n+\n+    /**\n+     * Reads the next byte of data from the input stream. The value byte is returned as an int in the range 0 to 255. If\n+     * no byte is available because the end of the stream has been reached, the value -1 is returned. This method blocks\n+     * until input data is available, the end of the stream is detected, or an exception is thrown.\n+     *\n+     * @return An <code>int</code> which represents the total number of bytes read into the buffer, or -1 if there is no\n+     * more data because the end of the stream has been reached.\n+     * @throws RuntimeException when no available bytes to read.\n+     * @throws IOException If an I/O error occurs.\n+     */\n+    @Override\n+    public int read() throws IOException {\n+        try {\n+            return this.blobInputStream.read();\n+        } catch (RuntimeException e) {\n+            if (e.getMessage().equals(Constants.STREAM_CLOSED)) {\n+                throw LoggingUtility.logError(logger, new IOException(e));\n+            }\n+            throw LoggingUtility.logError(logger, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTY1NQ=="}, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDg0NTMzOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/StorageInputStream.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjo0MTowOFrOGPO1Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTowODoyMFrOGQ3qqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNDg1NA==", "bodyText": "nice catch!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r418624854", "createdAt": "2020-05-01T16:41:08Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/StorageInputStream.java", "diffHunk": "@@ -286,7 +286,7 @@ public int read(final byte[] b, final int off, final int len) throws IOException\n         int chunks = (int) (Math.ceil((double) len / (double) this.chunkSize));\n         int numOfBytesRead = 0;\n         for (int i = 0; i < chunks; i++) {\n-            int results = this.readInternal(b, off + numOfBytesRead, len);\n+            int results = this.readInternal(b, off + numOfBytesRead, len - numOfBytesRead);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNTA5NA==", "bodyText": "may not be relevant to this PR, but do we want to add tests for this fix?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r418625094", "createdAt": "2020-05-01T16:41:44Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/StorageInputStream.java", "diffHunk": "@@ -286,7 +286,7 @@ public int read(final byte[] b, final int off, final int len) throws IOException\n         int chunks = (int) (Math.ceil((double) len / (double) this.chunkSize));\n         int numOfBytesRead = 0;\n         for (int i = 0; i < chunks; i++) {\n-            int results = this.readInternal(b, off + numOfBytesRead, len);\n+            int results = this.readInternal(b, off + numOfBytesRead, len - numOfBytesRead);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNDg1NA=="}, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MjQ0Mg==", "bodyText": "I added one to NioBlobInputStream. It looks like that may get moved into regular BlobInputStream, though.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r420342442", "createdAt": "2020-05-05T19:08:20Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/StorageInputStream.java", "diffHunk": "@@ -286,7 +286,7 @@ public int read(final byte[] b, final int off, final int len) throws IOException\n         int chunks = (int) (Math.ceil((double) len / (double) this.chunkSize));\n         int numOfBytesRead = 0;\n         for (int i = 0; i < chunks; i++) {\n-            int results = this.readInternal(b, off + numOfBytesRead, len);\n+            int results = this.readInternal(b, off + numOfBytesRead, len - numOfBytesRead);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNDg1NA=="}, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4403, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}