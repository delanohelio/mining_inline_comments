{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0Mzc1NjM0", "number": 17075, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMzozNzozMFrOE0mT8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMzozODoxMlrOE0mUuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTg5MTA2OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ComponentsAsyncTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMzozNzozMFrOHsaj1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMzozNzozMFrOHsaj1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMzNDU1MA==", "bodyText": "formatting differences between this and the previous call on line 189 in terms of line breaks and tabbing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17075#discussion_r516334550", "createdAt": "2020-11-02T23:37:30Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ComponentsAsyncTests.java", "diffHunk": "@@ -89,4 +92,153 @@ public void componentLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVer\n             }\n         }\n     }\n+\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void patchComponentFailsIfETagDoesNotMatch(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) throws JsonProcessingException {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+\n+        String wifiComponentName = \"wifiAccessPoint\";\n+\n+        String roomWithWifiTwinId = UniqueIdHelper.getUniqueDigitalTwinId(TestAssetDefaults.ROOM_WITH_WIFI_TWIN_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String roomWithWifiModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.ROOM_WITH_WIFI_MODEL_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String wifiModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.WIFI_MODEL_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+\n+        String modelWifi = TestAssetsHelper.getWifiModelPayload(wifiModelId);\n+        String modelRoomWithWifi = TestAssetsHelper.getRoomWithWifiModelPayload(roomWithWifiModelId, wifiModelId, wifiComponentName);\n+        String roomWithWifiTwin = TestAssetsHelper.getRoomWithWifiTwinPayload(roomWithWifiModelId, wifiComponentName);\n+        List<String> modelsList = new ArrayList<>(Arrays.asList(modelWifi, modelRoomWithWifi));\n+\n+        try {\n+            // Create models and components to test the lifecycle.\n+            StepVerifier\n+                .create(asyncClient.createModels(modelsList))\n+                .assertNext(createResponseList -> logger.info(\"Created models successfully\"))\n+                .verifyComplete();\n+\n+            AtomicReference<String> etagBeforeUpdate = new AtomicReference<>();\n+            StepVerifier.create(asyncClient.createOrReplaceDigitalTwinWithResponse(\n+                roomWithWifiTwinId,\n+                deserializeJsonString(roomWithWifiTwin, BasicDigitalTwin.class),\n+                BasicDigitalTwin.class,\n+                null))\n+                .assertNext(createdTwinResponse -> {\n+                    etagBeforeUpdate.set(createdTwinResponse.getDeserializedHeaders().getETag());\n+                })\n+                .verifyComplete();\n+\n+            StepVerifier.create(asyncClient.updateComponentWithResponse(roomWithWifiTwinId, wifiComponentName, TestAssetsHelper.getWifiComponentUpdatePayload(), null))\n+                .assertNext(updateResponse -> {\n+                    logger.info(\"Updated the component successfully\");\n+                })\n+                .verifyComplete();\n+\n+            // Update the component again, but with the out of date etag\n+            StepVerifier.create(\n+                asyncClient.updateComponentWithResponse(\n+                    roomWithWifiTwinId,\n+                    wifiComponentName,\n+                    TestAssetsHelper.getWifiComponentSecondUpdatePayload(),\n+                    new UpdateComponentOptions().setIfMatch(etagBeforeUpdate.get())))\n+                .verifyErrorSatisfies(ex -> assertRestException(ex, HttpURLConnection.HTTP_PRECON_FAILED));\n+        }\n+        finally {\n+            try\n+            {\n+                if (roomWithWifiTwinId != null)\n+                {\n+                    asyncClient.deleteDigitalTwin(roomWithWifiTwinId).block();\n+                }\n+                if (roomWithWifiModelId != null)\n+                {\n+                    asyncClient.deleteModel(roomWithWifiModelId).block();\n+                }\n+                if (wifiModelId != null)\n+                {\n+                    asyncClient.deleteModel(wifiModelId).block();\n+                }\n+            }\n+            catch (Exception ex)\n+            {\n+                fail(\"Test cleanup failed\", ex);\n+            }\n+        }\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void patchComponentSucceedsIfETagMatches(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) throws JsonProcessingException {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+\n+        String wifiComponentName = \"wifiAccessPoint\";\n+\n+        String roomWithWifiTwinId = UniqueIdHelper.getUniqueDigitalTwinId(TestAssetDefaults.ROOM_WITH_WIFI_TWIN_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String roomWithWifiModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.ROOM_WITH_WIFI_MODEL_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String wifiModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.WIFI_MODEL_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+\n+        String modelWifi = TestAssetsHelper.getWifiModelPayload(wifiModelId);\n+        String modelRoomWithWifi = TestAssetsHelper.getRoomWithWifiModelPayload(roomWithWifiModelId, wifiModelId, wifiComponentName);\n+        String roomWithWifiTwin = TestAssetsHelper.getRoomWithWifiTwinPayload(roomWithWifiModelId, wifiComponentName);\n+        List<String> modelsList = new ArrayList<>(Arrays.asList(modelWifi, modelRoomWithWifi));\n+\n+        try {\n+            // Create models and components to test the lifecycle.\n+            StepVerifier\n+                .create(asyncClient.createModels(modelsList))\n+                .assertNext(createResponseList -> logger.info(\"Created models successfully\"))\n+                .verifyComplete();\n+\n+            StepVerifier.create(asyncClient.createOrReplaceDigitalTwinWithResponse(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bdabc9657d314abd2ed141eb98ce5542b2aa742"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTg5MzA3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ComponentsAsyncTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMzozODoxMlrOHsalQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMzozODoxMlrOHsalQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMzNDkxMg==", "bodyText": "in Java, shouldn't brace formatting be like } finally {, try {, and } catch {?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17075#discussion_r516334912", "createdAt": "2020-11-02T23:38:12Z", "author": {"login": "drwill-ms"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ComponentsAsyncTests.java", "diffHunk": "@@ -89,4 +92,153 @@ public void componentLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVer\n             }\n         }\n     }\n+\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void patchComponentFailsIfETagDoesNotMatch(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) throws JsonProcessingException {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+\n+        String wifiComponentName = \"wifiAccessPoint\";\n+\n+        String roomWithWifiTwinId = UniqueIdHelper.getUniqueDigitalTwinId(TestAssetDefaults.ROOM_WITH_WIFI_TWIN_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String roomWithWifiModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.ROOM_WITH_WIFI_MODEL_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String wifiModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.WIFI_MODEL_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+\n+        String modelWifi = TestAssetsHelper.getWifiModelPayload(wifiModelId);\n+        String modelRoomWithWifi = TestAssetsHelper.getRoomWithWifiModelPayload(roomWithWifiModelId, wifiModelId, wifiComponentName);\n+        String roomWithWifiTwin = TestAssetsHelper.getRoomWithWifiTwinPayload(roomWithWifiModelId, wifiComponentName);\n+        List<String> modelsList = new ArrayList<>(Arrays.asList(modelWifi, modelRoomWithWifi));\n+\n+        try {\n+            // Create models and components to test the lifecycle.\n+            StepVerifier\n+                .create(asyncClient.createModels(modelsList))\n+                .assertNext(createResponseList -> logger.info(\"Created models successfully\"))\n+                .verifyComplete();\n+\n+            AtomicReference<String> etagBeforeUpdate = new AtomicReference<>();\n+            StepVerifier.create(asyncClient.createOrReplaceDigitalTwinWithResponse(\n+                roomWithWifiTwinId,\n+                deserializeJsonString(roomWithWifiTwin, BasicDigitalTwin.class),\n+                BasicDigitalTwin.class,\n+                null))\n+                .assertNext(createdTwinResponse -> {\n+                    etagBeforeUpdate.set(createdTwinResponse.getDeserializedHeaders().getETag());\n+                })\n+                .verifyComplete();\n+\n+            StepVerifier.create(asyncClient.updateComponentWithResponse(roomWithWifiTwinId, wifiComponentName, TestAssetsHelper.getWifiComponentUpdatePayload(), null))\n+                .assertNext(updateResponse -> {\n+                    logger.info(\"Updated the component successfully\");\n+                })\n+                .verifyComplete();\n+\n+            // Update the component again, but with the out of date etag\n+            StepVerifier.create(\n+                asyncClient.updateComponentWithResponse(\n+                    roomWithWifiTwinId,\n+                    wifiComponentName,\n+                    TestAssetsHelper.getWifiComponentSecondUpdatePayload(),\n+                    new UpdateComponentOptions().setIfMatch(etagBeforeUpdate.get())))\n+                .verifyErrorSatisfies(ex -> assertRestException(ex, HttpURLConnection.HTTP_PRECON_FAILED));\n+        }\n+        finally {\n+            try\n+            {\n+                if (roomWithWifiTwinId != null)\n+                {\n+                    asyncClient.deleteDigitalTwin(roomWithWifiTwinId).block();\n+                }\n+                if (roomWithWifiModelId != null)\n+                {\n+                    asyncClient.deleteModel(roomWithWifiModelId).block();\n+                }\n+                if (wifiModelId != null)\n+                {\n+                    asyncClient.deleteModel(wifiModelId).block();\n+                }\n+            }\n+            catch (Exception ex)\n+            {\n+                fail(\"Test cleanup failed\", ex);\n+            }\n+        }\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void patchComponentSucceedsIfETagMatches(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) throws JsonProcessingException {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+\n+        String wifiComponentName = \"wifiAccessPoint\";\n+\n+        String roomWithWifiTwinId = UniqueIdHelper.getUniqueDigitalTwinId(TestAssetDefaults.ROOM_WITH_WIFI_TWIN_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String roomWithWifiModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.ROOM_WITH_WIFI_MODEL_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String wifiModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.WIFI_MODEL_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+\n+        String modelWifi = TestAssetsHelper.getWifiModelPayload(wifiModelId);\n+        String modelRoomWithWifi = TestAssetsHelper.getRoomWithWifiModelPayload(roomWithWifiModelId, wifiModelId, wifiComponentName);\n+        String roomWithWifiTwin = TestAssetsHelper.getRoomWithWifiTwinPayload(roomWithWifiModelId, wifiComponentName);\n+        List<String> modelsList = new ArrayList<>(Arrays.asList(modelWifi, modelRoomWithWifi));\n+\n+        try {\n+            // Create models and components to test the lifecycle.\n+            StepVerifier\n+                .create(asyncClient.createModels(modelsList))\n+                .assertNext(createResponseList -> logger.info(\"Created models successfully\"))\n+                .verifyComplete();\n+\n+            StepVerifier.create(asyncClient.createOrReplaceDigitalTwinWithResponse(\n+                roomWithWifiTwinId,\n+                deserializeJsonString(roomWithWifiTwin, BasicDigitalTwin.class),\n+                BasicDigitalTwin.class,\n+                null))\n+                .assertNext(createdTwinResponse -> {\n+                    logger.info(\"Updated the component successfully\");\n+                })\n+                .verifyComplete();\n+\n+            AtomicReference<String> upToDateETag = new AtomicReference<>();\n+            StepVerifier.create(asyncClient.updateComponentWithResponse(roomWithWifiTwinId, wifiComponentName, TestAssetsHelper.getWifiComponentUpdatePayload(), null))\n+                .assertNext(updateResponse -> {\n+                    upToDateETag.set(updateResponse.getDeserializedHeaders().getETag());\n+                    logger.info(\"Updated the component successfully\");\n+                })\n+                .verifyComplete();\n+\n+            // Update the component again, but with the out of date etag\n+            StepVerifier.create(\n+                asyncClient.updateComponentWithResponse(\n+                    roomWithWifiTwinId,\n+                    wifiComponentName,\n+                    TestAssetsHelper.getWifiComponentSecondUpdatePayload(),\n+                    new UpdateComponentOptions().setIfMatch(upToDateETag.get())))\n+                .assertNext(response -> { /* don't care as long as it is a success status code */ })\n+                .verifyComplete();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bdabc9657d314abd2ed141eb98ce5542b2aa742"}, "originalPosition": 148}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3065, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}