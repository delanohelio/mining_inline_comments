{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDE1OTgz", "number": 9920, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyNTowM1rODvr9Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyNTowM1rODvr9Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzI5ODExOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob-batch/src/test/java/com/azure/storage/blob/batch/BatchAPITest.groovy", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyNTowM1rOGCQiiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODozNjoyNVrOGCQ9Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyMTMyMA==", "bodyText": "If there is definitely one will fail, it is better to check fail at &.\n!assertExpectedOrException(response1, 200) && assertExpectedOrException(response2, 200)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9920#discussion_r405021320", "createdAt": "2020-04-07T18:25:03Z", "author": {"login": "sima-zhu"}, "path": "sdk/storage/azure-storage-blob-batch/src/test/java/com/azure/storage/blob/batch/BatchAPITest.groovy", "diffHunk": "@@ -128,14 +152,19 @@ class BatchAPITest extends APISpec {\n         batchClient.submitBatchWithResponse(batch, false, null, Context.NONE)\n \n         then:\n-        notThrown(BlobStorageException)\n-        response1.getStatusCode() == 200\n+        notThrown(BlobBatchStorageException)\n \n-        when:\n-        response2.getStatusCode()\n-\n-        then:\n-        thrown(BlobStorageException)\n+        // In PLAYBACK check responses in an order invariant fashion.\n+        if (testMode == TestMode.PLAYBACK) {\n+            assertExpectedOrException(response1, 200) || assertExpectedOrException(response2, 200)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6ef45be3fc0dbba52732802faefeaa4c363e0e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNTA4OA==", "bodyText": "The code would need to be the following, which is equivalent to what is already being used.\n!(assert... && assert...)\nTo be more pedantic on validation I could explicitly check each of these for being true and asserting the count of trues to be one. Another option is having these return 0 for failure and 1 for success and adding and checking it equals 1.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9920#discussion_r405025088", "createdAt": "2020-04-07T18:31:18Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob-batch/src/test/java/com/azure/storage/blob/batch/BatchAPITest.groovy", "diffHunk": "@@ -128,14 +152,19 @@ class BatchAPITest extends APISpec {\n         batchClient.submitBatchWithResponse(batch, false, null, Context.NONE)\n \n         then:\n-        notThrown(BlobStorageException)\n-        response1.getStatusCode() == 200\n+        notThrown(BlobBatchStorageException)\n \n-        when:\n-        response2.getStatusCode()\n-\n-        then:\n-        thrown(BlobStorageException)\n+        // In PLAYBACK check responses in an order invariant fashion.\n+        if (testMode == TestMode.PLAYBACK) {\n+            assertExpectedOrException(response1, 200) || assertExpectedOrException(response2, 200)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyMTMyMA=="}, "originalCommit": {"oid": "eb6ef45be3fc0dbba52732802faefeaa4c363e0e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyODE4Nw==", "bodyText": "Updated to doing a count validation on successful responses.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9920#discussion_r405028187", "createdAt": "2020-04-07T18:36:25Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob-batch/src/test/java/com/azure/storage/blob/batch/BatchAPITest.groovy", "diffHunk": "@@ -128,14 +152,19 @@ class BatchAPITest extends APISpec {\n         batchClient.submitBatchWithResponse(batch, false, null, Context.NONE)\n \n         then:\n-        notThrown(BlobStorageException)\n-        response1.getStatusCode() == 200\n+        notThrown(BlobBatchStorageException)\n \n-        when:\n-        response2.getStatusCode()\n-\n-        then:\n-        thrown(BlobStorageException)\n+        // In PLAYBACK check responses in an order invariant fashion.\n+        if (testMode == TestMode.PLAYBACK) {\n+            assertExpectedOrException(response1, 200) || assertExpectedOrException(response2, 200)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyMTMyMA=="}, "originalCommit": {"oid": "eb6ef45be3fc0dbba52732802faefeaa4c363e0e"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2020, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}