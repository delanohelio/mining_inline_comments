{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMzQzMTI4", "number": 11429, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODo0OTowMlrOD_zZYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODo1MDowNFrOD_za0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjI4OTYyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODo0OTowMlrOGartKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo0NzoyN1rOGat0sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzMjIzNA==", "bodyText": "We should hide / remove this API - as discussed in this ticket : #11191", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11429#discussion_r430632234", "createdAt": "2020-05-26T18:49:02Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContainer.java", "diffHunk": "@@ -46,134 +46,124 @@\n     }\n \n     /**\n-     * Id string.\n+     * Gets the current container id.\n      *\n-     * @return the string\n+     * @return the container id.\n      */\n     public String getId() {\n         return id;\n     }\n \n     /**\n-     * Read cosmos sync container response.\n+     * Reads the current container.\n      *\n-     * @return the cosmos sync container response\n+     * @return the Cosmos container response with the read container.\n      */\n     public CosmosContainerResponse read() {\n         return database.mapContainerResponseAndBlock(this.asyncContainer.read());\n     }\n \n     /**\n-     * Read cosmos sync container response.\n+     * Reads the current container while specifying additional options such as If-Match.\n      *\n-     * @param options the options\n-     * @return the cosmos sync container response\n+     * @param options the options.\n+     * @return the Cosmos sync container response.\n      */\n     public CosmosContainerResponse read(CosmosContainerRequestOptions options) {\n         return database.mapContainerResponseAndBlock(this.asyncContainer.read(options));\n     }\n \n     /**\n-     * Delete cosmos sync container response.\n+     * Deletes the current cosmos sync container response while specifying additional options such as If-Match.\n      *\n-     * @param options the options\n-     * @return the cosmos sync container response\n+     * @param options the options.\n+     * @return the cosmos sync container response.\n      */\n     public CosmosContainerResponse delete(CosmosContainerRequestOptions options) {\n         return database.mapContainerResponseAndBlock(this.asyncContainer.delete(options));\n     }\n \n     /**\n-     * Delete cosmos sync container response.\n+     * Deletes the current cosmos sync container response.\n      *\n-     * @return the cosmos sync container response\n+     * @return the cosmos sync container response.\n      */\n     public CosmosContainerResponse delete() {\n         return database.mapContainerResponseAndBlock(this.asyncContainer.delete());\n     }\n \n     /**\n-     * Replace cosmos sync container response.\n+     * Replaces the current container properties.\n      *\n-     * @param containerProperties the container properties\n-     * @return the cosmos sync container response\n+     * @param containerProperties the container properties.\n+     * @return the cosmos sync container response.\n      */\n     public CosmosContainerResponse replace(CosmosContainerProperties containerProperties) {\n         return database.mapContainerResponseAndBlock(this.asyncContainer.replace(containerProperties));\n     }\n \n     /**\n-     * Replace cosmos sync container response.\n+     * Replaces the current container properties while specifying additional options such as If-Match.\n      *\n-     * @param containerProperties the container properties\n-     * @param options the options\n-     * @return the cosmos sync container response\n+     * @param containerProperties the container properties.\n+     * @param options the options.\n+     * @return the cosmos sync container response.\n      */\n     public CosmosContainerResponse replace(CosmosContainerProperties containerProperties,\n                                            CosmosContainerRequestOptions options) {\n         return database.mapContainerResponseAndBlock(this.asyncContainer.replace(containerProperties, options));\n     }\n \n     /**\n-     * Read provisioned throughput integer.\n+     * Read provisioned throughput for the current container.\n      *\n-     * @return the integer. null response indicates database doesn't have any provisioned RUs\n+     * @return provisioned throughput for the current container or null response if doesn't have any provisioned RUs.\n      */\n     public Integer readProvisionedThroughput() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16141b9e5d122c21e18d81323d1ce287d079290b"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY2NjkyOQ==", "bodyText": "Fixed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11429#discussion_r430666929", "createdAt": "2020-05-26T19:47:27Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContainer.java", "diffHunk": "@@ -46,134 +46,124 @@\n     }\n \n     /**\n-     * Id string.\n+     * Gets the current container id.\n      *\n-     * @return the string\n+     * @return the container id.\n      */\n     public String getId() {\n         return id;\n     }\n \n     /**\n-     * Read cosmos sync container response.\n+     * Reads the current container.\n      *\n-     * @return the cosmos sync container response\n+     * @return the Cosmos container response with the read container.\n      */\n     public CosmosContainerResponse read() {\n         return database.mapContainerResponseAndBlock(this.asyncContainer.read());\n     }\n \n     /**\n-     * Read cosmos sync container response.\n+     * Reads the current container while specifying additional options such as If-Match.\n      *\n-     * @param options the options\n-     * @return the cosmos sync container response\n+     * @param options the options.\n+     * @return the Cosmos sync container response.\n      */\n     public CosmosContainerResponse read(CosmosContainerRequestOptions options) {\n         return database.mapContainerResponseAndBlock(this.asyncContainer.read(options));\n     }\n \n     /**\n-     * Delete cosmos sync container response.\n+     * Deletes the current cosmos sync container response while specifying additional options such as If-Match.\n      *\n-     * @param options the options\n-     * @return the cosmos sync container response\n+     * @param options the options.\n+     * @return the cosmos sync container response.\n      */\n     public CosmosContainerResponse delete(CosmosContainerRequestOptions options) {\n         return database.mapContainerResponseAndBlock(this.asyncContainer.delete(options));\n     }\n \n     /**\n-     * Delete cosmos sync container response.\n+     * Deletes the current cosmos sync container response.\n      *\n-     * @return the cosmos sync container response\n+     * @return the cosmos sync container response.\n      */\n     public CosmosContainerResponse delete() {\n         return database.mapContainerResponseAndBlock(this.asyncContainer.delete());\n     }\n \n     /**\n-     * Replace cosmos sync container response.\n+     * Replaces the current container properties.\n      *\n-     * @param containerProperties the container properties\n-     * @return the cosmos sync container response\n+     * @param containerProperties the container properties.\n+     * @return the cosmos sync container response.\n      */\n     public CosmosContainerResponse replace(CosmosContainerProperties containerProperties) {\n         return database.mapContainerResponseAndBlock(this.asyncContainer.replace(containerProperties));\n     }\n \n     /**\n-     * Replace cosmos sync container response.\n+     * Replaces the current container properties while specifying additional options such as If-Match.\n      *\n-     * @param containerProperties the container properties\n-     * @param options the options\n-     * @return the cosmos sync container response\n+     * @param containerProperties the container properties.\n+     * @param options the options.\n+     * @return the cosmos sync container response.\n      */\n     public CosmosContainerResponse replace(CosmosContainerProperties containerProperties,\n                                            CosmosContainerRequestOptions options) {\n         return database.mapContainerResponseAndBlock(this.asyncContainer.replace(containerProperties, options));\n     }\n \n     /**\n-     * Read provisioned throughput integer.\n+     * Read provisioned throughput for the current container.\n      *\n-     * @return the integer. null response indicates database doesn't have any provisioned RUs\n+     * @return provisioned throughput for the current container or null response if doesn't have any provisioned RUs.\n      */\n     public Integer readProvisionedThroughput() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzMjIzNA=="}, "originalCommit": {"oid": "16141b9e5d122c21e18d81323d1ce287d079290b"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjI5MTg0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODo0OTo0MVrOGarung==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo0Nzo0OFrOGat1lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzMjYwNg==", "bodyText": "Same here - hide / remove this API - #11191", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11429#discussion_r430632606", "createdAt": "2020-05-26T18:49:41Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosDatabase.java", "diffHunk": "@@ -458,7 +497,7 @@ private CosmosUserResponse convertUserResponse(CosmosAsyncUserResponse response)\n     /**\n      * Read provisioned throughput integer.\n      *\n-     * @return the integer. null response indicates database doesn't have any provisioned RUs\n+     * @return the integer. null response indicates database doesn't have any provisioned RUs.\n      */\n     public Integer readProvisionedThroughput() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16141b9e5d122c21e18d81323d1ce287d079290b"}, "originalPosition": 454}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY2NzE1OQ==", "bodyText": "Fixed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11429#discussion_r430667159", "createdAt": "2020-05-26T19:47:48Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosDatabase.java", "diffHunk": "@@ -458,7 +497,7 @@ private CosmosUserResponse convertUserResponse(CosmosAsyncUserResponse response)\n     /**\n      * Read provisioned throughput integer.\n      *\n-     * @return the integer. null response indicates database doesn't have any provisioned RUs\n+     * @return the integer. null response indicates database doesn't have any provisioned RUs.\n      */\n     public Integer readProvisionedThroughput() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzMjYwNg=="}, "originalCommit": {"oid": "16141b9e5d122c21e18d81323d1ce287d079290b"}, "originalPosition": 454}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjI5MzMwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosDatabase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODo1MDowNFrOGarveQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo0NzozN1rOGat1IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzMjgyNQ==", "bodyText": "Same here : hide / remove this API - #11191", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11429#discussion_r430632825", "createdAt": "2020-05-26T18:50:04Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosDatabase.java", "diffHunk": "@@ -467,8 +506,8 @@ public Integer readProvisionedThroughput() {\n     /**\n      * Replace provisioned throughput integer.\n      *\n-     * @param requestUnitsPerSecond the request units per second\n-     * @return the integer\n+     * @param requestUnitsPerSecond the request units per second.\n+     * @return the integer.\n      */\n     public Integer replaceProvisionedThroughput(int requestUnitsPerSecond) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16141b9e5d122c21e18d81323d1ce287d079290b"}, "originalPosition": 465}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY2NzA0MA==", "bodyText": "Fixed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11429#discussion_r430667040", "createdAt": "2020-05-26T19:47:37Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosDatabase.java", "diffHunk": "@@ -467,8 +506,8 @@ public Integer readProvisionedThroughput() {\n     /**\n      * Replace provisioned throughput integer.\n      *\n-     * @param requestUnitsPerSecond the request units per second\n-     * @return the integer\n+     * @param requestUnitsPerSecond the request units per second.\n+     * @return the integer.\n      */\n     public Integer replaceProvisionedThroughput(int requestUnitsPerSecond) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzMjgyNQ=="}, "originalCommit": {"oid": "16141b9e5d122c21e18d81323d1ce287d079290b"}, "originalPosition": 465}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4137, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}