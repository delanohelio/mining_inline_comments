{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNzY4MDMy", "number": 10734, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyOTowM1rOD5ngdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTo0OTo1M1rOD6Akaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQyNzExOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyOTowM1rOGQ_RkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozNTowNlrOGRAdiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2NzA4OQ==", "bodyText": "This isn't thread safe, in the time that you check for null, someone else could have set it. Or if it is null, and then you create it, it could possibly overwrite an existing EmitterProcessor that was set in this time.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r420467089", "createdAt": "2020-05-05T23:29:03Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -622,20 +628,56 @@ public void setSessionState(String sessionId, byte[] sessionState) {\n     @Override\n     public void close() {\n         asyncClient.close();\n+\n+        if (messageProcessor.get() != null) {\n+            messageProcessor.get().dispose();\n+        }\n+\n+        Disposable activeSubscription = messageProcessorSubscription.get();\n+        if (activeSubscription != null) {\n+            activeSubscription.dispose();\n+        }\n     }\n \n     /**\n-     * Given an {@code emitter}, queues that work in {@link SynchronousMessageSubscriber}. If the synchronous job has\n-     * not been created, will initialise it.\n+     * Given an {@code emitter}, creates a {@link EmitterProcessor} to receive messages from Service Bus. If the\n+     * message processor has not been created, will initialise it.\n      */\n     private void queueWork(int maximumMessageCount, Duration maxWaitTime,\n         FluxSink<ServiceBusReceivedMessageContext> emitter) {\n-        final long id = idGenerator.getAndIncrement();\n-        final SynchronousReceiveWork work = new SynchronousReceiveWork(id, maximumMessageCount, maxWaitTime,\n-            emitter);\n-        final SynchronousMessageSubscriber syncSubscriber = new SynchronousMessageSubscriber(work);\n \n-        logger.info(\"[{}]: Started synchronous message subscriber.\", id);\n-        asyncClient.receive(DEFAULT_RECEIVE_OPTIONS).subscribeWith(syncSubscriber);\n+        if (messageProcessor.get() != null && messageProcessor.get().isDisposed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a03f3bafa0769d3ca5c46c86987a5264fe5795"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjUzOQ==", "bodyText": "This should insure against it messageProcessor.compareAndSet(null, newProcessor)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r420486539", "createdAt": "2020-05-06T00:35:06Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -622,20 +628,56 @@ public void setSessionState(String sessionId, byte[] sessionState) {\n     @Override\n     public void close() {\n         asyncClient.close();\n+\n+        if (messageProcessor.get() != null) {\n+            messageProcessor.get().dispose();\n+        }\n+\n+        Disposable activeSubscription = messageProcessorSubscription.get();\n+        if (activeSubscription != null) {\n+            activeSubscription.dispose();\n+        }\n     }\n \n     /**\n-     * Given an {@code emitter}, queues that work in {@link SynchronousMessageSubscriber}. If the synchronous job has\n-     * not been created, will initialise it.\n+     * Given an {@code emitter}, creates a {@link EmitterProcessor} to receive messages from Service Bus. If the\n+     * message processor has not been created, will initialise it.\n      */\n     private void queueWork(int maximumMessageCount, Duration maxWaitTime,\n         FluxSink<ServiceBusReceivedMessageContext> emitter) {\n-        final long id = idGenerator.getAndIncrement();\n-        final SynchronousReceiveWork work = new SynchronousReceiveWork(id, maximumMessageCount, maxWaitTime,\n-            emitter);\n-        final SynchronousMessageSubscriber syncSubscriber = new SynchronousMessageSubscriber(work);\n \n-        logger.info(\"[{}]: Started synchronous message subscriber.\", id);\n-        asyncClient.receive(DEFAULT_RECEIVE_OPTIONS).subscribeWith(syncSubscriber);\n+        if (messageProcessor.get() != null && messageProcessor.get().isDisposed()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2NzA4OQ=="}, "originalCommit": {"oid": "54a03f3bafa0769d3ca5c46c86987a5264fe5795"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQyODUxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyOTozNVrOGQ_SSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyOTozNVrOGQ_SSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2NzI3NA==", "bodyText": "Will it throw if you call dispose twice?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r420467274", "createdAt": "2020-05-05T23:29:35Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -622,20 +628,56 @@ public void setSessionState(String sessionId, byte[] sessionState) {\n     @Override\n     public void close() {\n         asyncClient.close();\n+\n+        if (messageProcessor.get() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a03f3bafa0769d3ca5c46c86987a5264fe5795"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQyOTA1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyOTo0N1rOGQ_SmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozMDo1M1rOGQ_UCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2NzM1Mg==", "bodyText": "These are for side effects.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r420467352", "createdAt": "2020-05-05T23:29:47Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -622,20 +628,56 @@ public void setSessionState(String sessionId, byte[] sessionState) {\n     @Override\n     public void close() {\n         asyncClient.close();\n+\n+        if (messageProcessor.get() != null) {\n+            messageProcessor.get().dispose();\n+        }\n+\n+        Disposable activeSubscription = messageProcessorSubscription.get();\n+        if (activeSubscription != null) {\n+            activeSubscription.dispose();\n+        }\n     }\n \n     /**\n-     * Given an {@code emitter}, queues that work in {@link SynchronousMessageSubscriber}. If the synchronous job has\n-     * not been created, will initialise it.\n+     * Given an {@code emitter}, creates a {@link EmitterProcessor} to receive messages from Service Bus. If the\n+     * message processor has not been created, will initialise it.\n      */\n     private void queueWork(int maximumMessageCount, Duration maxWaitTime,\n         FluxSink<ServiceBusReceivedMessageContext> emitter) {\n-        final long id = idGenerator.getAndIncrement();\n-        final SynchronousReceiveWork work = new SynchronousReceiveWork(id, maximumMessageCount, maxWaitTime,\n-            emitter);\n-        final SynchronousMessageSubscriber syncSubscriber = new SynchronousMessageSubscriber(work);\n \n-        logger.info(\"[{}]: Started synchronous message subscriber.\", id);\n-        asyncClient.receive(DEFAULT_RECEIVE_OPTIONS).subscribeWith(syncSubscriber);\n+        if (messageProcessor.get() != null && messageProcessor.get().isDisposed()) {\n+            logger.error(\"[{}]: Can not receive messaged because client is closed.\", asyncClient.getEntityPath());\n+            return;\n+        }\n+\n+        if (messageProcessor.get() == null) {\n+            EmitterProcessor<ServiceBusReceivedMessageContext> processor = asyncClient.receive(DEFAULT_RECEIVE_OPTIONS)\n+                .subscribeWith(EmitterProcessor.create(false));\n+\n+            if (!messageProcessor.compareAndSet(null, processor)) {\n+                processor.dispose();\n+            }\n+\n+            logger.info(\"[{}]: Started ContinuesMessageSubscriber message subscriber for entity.\",\n+                asyncClient.getEntityPath());\n+        }\n+\n+        Disposable newSubscription = messageProcessor.get()\n+            .take(maximumMessageCount)\n+            .timeout(maxWaitTime)\n+            .doOnNext(messageContext -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a03f3bafa0769d3ca5c46c86987a5264fe5795"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2NzcyMg==", "bodyText": "doOnNext, doOnError, doOnComplete are for side effects like logging or monitoring. It shouldn't be used as part of the main chain of operations.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r420467722", "createdAt": "2020-05-05T23:30:53Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -622,20 +628,56 @@ public void setSessionState(String sessionId, byte[] sessionState) {\n     @Override\n     public void close() {\n         asyncClient.close();\n+\n+        if (messageProcessor.get() != null) {\n+            messageProcessor.get().dispose();\n+        }\n+\n+        Disposable activeSubscription = messageProcessorSubscription.get();\n+        if (activeSubscription != null) {\n+            activeSubscription.dispose();\n+        }\n     }\n \n     /**\n-     * Given an {@code emitter}, queues that work in {@link SynchronousMessageSubscriber}. If the synchronous job has\n-     * not been created, will initialise it.\n+     * Given an {@code emitter}, creates a {@link EmitterProcessor} to receive messages from Service Bus. If the\n+     * message processor has not been created, will initialise it.\n      */\n     private void queueWork(int maximumMessageCount, Duration maxWaitTime,\n         FluxSink<ServiceBusReceivedMessageContext> emitter) {\n-        final long id = idGenerator.getAndIncrement();\n-        final SynchronousReceiveWork work = new SynchronousReceiveWork(id, maximumMessageCount, maxWaitTime,\n-            emitter);\n-        final SynchronousMessageSubscriber syncSubscriber = new SynchronousMessageSubscriber(work);\n \n-        logger.info(\"[{}]: Started synchronous message subscriber.\", id);\n-        asyncClient.receive(DEFAULT_RECEIVE_OPTIONS).subscribeWith(syncSubscriber);\n+        if (messageProcessor.get() != null && messageProcessor.get().isDisposed()) {\n+            logger.error(\"[{}]: Can not receive messaged because client is closed.\", asyncClient.getEntityPath());\n+            return;\n+        }\n+\n+        if (messageProcessor.get() == null) {\n+            EmitterProcessor<ServiceBusReceivedMessageContext> processor = asyncClient.receive(DEFAULT_RECEIVE_OPTIONS)\n+                .subscribeWith(EmitterProcessor.create(false));\n+\n+            if (!messageProcessor.compareAndSet(null, processor)) {\n+                processor.dispose();\n+            }\n+\n+            logger.info(\"[{}]: Started ContinuesMessageSubscriber message subscriber for entity.\",\n+                asyncClient.getEntityPath());\n+        }\n+\n+        Disposable newSubscription = messageProcessor.get()\n+            .take(maximumMessageCount)\n+            .timeout(maxWaitTime)\n+            .doOnNext(messageContext -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2NzM1Mg=="}, "originalCommit": {"oid": "54a03f3bafa0769d3ca5c46c86987a5264fe5795"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU4NTQxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo1MTozNFrOGRAt0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo1MTozNFrOGRAt0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MDcwNQ==", "bodyText": "commented code should be removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r420490705", "createdAt": "2020-05-06T00:51:34Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -503,7 +509,8 @@ public ServiceBusReceivedMessage peekAt(long sequenceNumber, String sessionId) {\n \n         final Flux<ServiceBusReceivedMessageContext> messages = Flux.create(emitter -> queueWork(maxMessages,\n             maxWaitTime, emitter));\n-\n+        //queueWork(maxMessages, maxWaitTime, null);\n+        //return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a53d31c75349677e3fb8bc2322d2e1502f624b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU4ODM5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo1MzozMVrOGRAvew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo1MzozMVrOGRAvew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MTEzMQ==", "bodyText": "Between isDisposed() check and dispose() the processor might have changed state. This is not an atomic operation, if that's what you were trying to achieve using the AtomicReference.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r420491131", "createdAt": "2020-05-06T00:53:31Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -622,20 +629,63 @@ public void setSessionState(String sessionId, byte[] sessionState) {\n     @Override\n     public void close() {\n         asyncClient.close();\n+\n+        if (messageProcessor.get() != null && !messageProcessor.get().isDisposed()) {\n+            messageProcessor.get().dispose();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a53d31c75349677e3fb8bc2322d2e1502f624b"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU4ODgxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo1Mzo0N1rOGRAvug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo1Mzo0N1rOGRAvug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MTE5NA==", "bodyText": "Same here, this is not an atomic operation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r420491194", "createdAt": "2020-05-06T00:53:47Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -622,20 +629,63 @@ public void setSessionState(String sessionId, byte[] sessionState) {\n     @Override\n     public void close() {\n         asyncClient.close();\n+\n+        if (messageProcessor.get() != null && !messageProcessor.get().isDisposed()) {\n+            messageProcessor.get().dispose();\n+        }\n+\n+        Disposable activeSubscription = messageProcessorSubscription.get();\n+        if (activeSubscription != null && !activeSubscription.isDisposed()) {\n+            activeSubscription.dispose();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a53d31c75349677e3fb8bc2322d2e1502f624b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU5NTE4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SyncMessageSubscriber.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo1NzoxNVrOGRAzMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo1NzoxNVrOGRAzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MjA4MA==", "bodyText": "Missing javadoc. Do we need this class in public API surface? This should be in implementation package.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r420492080", "createdAt": "2020-05-06T00:57:15Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SyncMessageSubscriber.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.azure.messaging.servicebus;\n+\n+import org.reactivestreams.Subscription;\n+import reactor.core.publisher.BaseSubscriber;\n+\n+public class SyncMessageSubscriber extends BaseSubscriber<ServiceBusReceivedMessageContext> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a53d31c75349677e3fb8bc2322d2e1502f624b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU5ODYzOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SyncMessageSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo1OToxNVrOGRA1HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMzowNTo1NFrOGRCmkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MjU3Mg==", "bodyText": "Why do we need this class? This seems to be just printing some debug info to the console.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r420492572", "createdAt": "2020-05-06T00:59:15Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SyncMessageSubscriber.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.azure.messaging.servicebus;\n+\n+import org.reactivestreams.Subscription;\n+import reactor.core.publisher.BaseSubscriber;\n+\n+public class SyncMessageSubscriber extends BaseSubscriber<ServiceBusReceivedMessageContext> {\n+\n+    private Subscription subscription;\n+    @Override\n+    protected void hookOnSubscribe(Subscription subscription) {\n+        this.subscription = subscription;\n+        subscription.request(1);\n+    }\n+\n+    @Override\n+    protected void hookOnNext(ServiceBusReceivedMessageContext value) {\n+        System.out.println(Thread.currentThread().getName() + \" : \" + value);\n+        // Request for one more event\n+        subscription.request(1);\n+    }\n+\n+    @Override\n+    protected void hookOnComplete() {\n+        System.out.println(\"Complete\");\n+    }\n+\n+    @Override\n+    protected void hookOnError(Throwable throwable) {\n+        throwable.printStackTrace();\n+    }\n+\n+    @Override\n+    protected void hookOnCancel() {\n+        System.out.println(\"Cancelled\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a53d31c75349677e3fb8bc2322d2e1502f624b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyMTYxOQ==", "bodyText": "I should not have checked in, I was trying something else. So  removing it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r420521619", "createdAt": "2020-05-06T03:05:54Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SyncMessageSubscriber.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.azure.messaging.servicebus;\n+\n+import org.reactivestreams.Subscription;\n+import reactor.core.publisher.BaseSubscriber;\n+\n+public class SyncMessageSubscriber extends BaseSubscriber<ServiceBusReceivedMessageContext> {\n+\n+    private Subscription subscription;\n+    @Override\n+    protected void hookOnSubscribe(Subscription subscription) {\n+        this.subscription = subscription;\n+        subscription.request(1);\n+    }\n+\n+    @Override\n+    protected void hookOnNext(ServiceBusReceivedMessageContext value) {\n+        System.out.println(Thread.currentThread().getName() + \" : \" + value);\n+        // Request for one more event\n+        subscription.request(1);\n+    }\n+\n+    @Override\n+    protected void hookOnComplete() {\n+        System.out.println(\"Complete\");\n+    }\n+\n+    @Override\n+    protected void hookOnError(Throwable throwable) {\n+        throwable.printStackTrace();\n+    }\n+\n+    @Override\n+    protected void hookOnCancel() {\n+        System.out.println(\"Cancelled\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MjU3Mg=="}, "originalCommit": {"oid": "58a53d31c75349677e3fb8bc2322d2e1502f624b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzYyODU4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMToxNjozN1rOGRBFzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMToxNjozN1rOGRBFzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5Njg0Nw==", "bodyText": "timeout() is not the right operator here. The maxWaitTime param specifies the maximum time to wait before receiving all messages upto maximumMessageCount. timeout() operator will reset the timer after each message is received. Also, if there is a timeout, it will throw an exception which is not what should happen. Instead, it should return all messages until the timeout occurred.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r420496847", "createdAt": "2020-05-06T01:16:37Z", "author": {"login": "srnagar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -622,20 +629,63 @@ public void setSessionState(String sessionId, byte[] sessionState) {\n     @Override\n     public void close() {\n         asyncClient.close();\n+\n+        if (messageProcessor.get() != null && !messageProcessor.get().isDisposed()) {\n+            messageProcessor.get().dispose();\n+        }\n+\n+        Disposable activeSubscription = messageProcessorSubscription.get();\n+        if (activeSubscription != null && !activeSubscription.isDisposed()) {\n+            activeSubscription.dispose();\n+        }\n     }\n \n     /**\n-     * Given an {@code emitter}, queues that work in {@link SynchronousMessageSubscriber}. If the synchronous job has\n-     * not been created, will initialise it.\n+     * Given an {@code emitter}, creates a {@link EmitterProcessor} to receive messages from Service Bus. If the\n+     * message processor has not been created, will initialise it.\n      */\n     private void queueWork(int maximumMessageCount, Duration maxWaitTime,\n         FluxSink<ServiceBusReceivedMessageContext> emitter) {\n-        final long id = idGenerator.getAndIncrement();\n-        final SynchronousReceiveWork work = new SynchronousReceiveWork(id, maximumMessageCount, maxWaitTime,\n-            emitter);\n-        final SynchronousMessageSubscriber syncSubscriber = new SynchronousMessageSubscriber(work);\n \n-        logger.info(\"[{}]: Started synchronous message subscriber.\", id);\n-        asyncClient.receive(DEFAULT_RECEIVE_OPTIONS).subscribeWith(syncSubscriber);\n+        if (messageProcessor.get() != null && messageProcessor.get().isDisposed()) {\n+            logger.error(\"[{}]: Can not receive messaged because client is closed.\", asyncClient.getEntityPath());\n+            return;\n+        }\n+\n+        if (messageProcessor.get() == null) {\n+            logger.info(\"[{}]: Creating EmitterProcessor message processor for entity.\", asyncClient.getEntityPath());\n+\n+            EmitterProcessor<ServiceBusReceivedMessageContext> newProcessor = asyncClient.receive(DEFAULT_RECEIVE_OPTIONS)\n+                .subscribeWith(EmitterProcessor.create(false));\n+            // if some other thread have come in between, we will not reset new processor\n+            if (!messageProcessor.compareAndSet(null, newProcessor)) {\n+                newProcessor.dispose();\n+            }\n+\n+            logger.info(\"[{}]: Started EmitterProcessor message processor for entity.\",\n+                asyncClient.getEntityPath());\n+        }\n+\n+            logger.info(\"[{}]: Subscribing EmitterProcessor message processor for entity.\",\n+                asyncClient.getEntityPath());\n+\n+        Disposable newSubscription = messageProcessor.get()\n+            .take(maximumMessageCount)\n+            .timeout(maxWaitTime)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a53d31c75349677e3fb8bc2322d2e1502f624b"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzgxNTc2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMzoxNDozMFrOGRCtcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMzoxNDozMFrOGRCtcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyMzM3OQ==", "bodyText": "What if the existing subscription is still waiting for work? You're going to cancel it?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r420523379", "createdAt": "2020-05-06T03:14:30Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -622,20 +627,61 @@ public void setSessionState(String sessionId, byte[] sessionState) {\n     @Override\n     public void close() {\n         asyncClient.close();\n+\n+        if (messageProcessor.get() != null && !messageProcessor.get().isDisposed()) {\n+            messageProcessor.get().dispose();\n+        }\n+\n+        Disposable activeSubscription = messageProcessorSubscription.get();\n+        if (activeSubscription != null && !activeSubscription.isDisposed()) {\n+            activeSubscription.dispose();\n+        }\n     }\n \n     /**\n-     * Given an {@code emitter}, queues that work in {@link SynchronousMessageSubscriber}. If the synchronous job has\n-     * not been created, will initialise it.\n+     * Given an {@code emitter}, creates a {@link EmitterProcessor} to receive messages from Service Bus. If the\n+     * message processor has not been created, will initialise it.\n      */\n     private void queueWork(int maximumMessageCount, Duration maxWaitTime,\n         FluxSink<ServiceBusReceivedMessageContext> emitter) {\n-        final long id = idGenerator.getAndIncrement();\n-        final SynchronousReceiveWork work = new SynchronousReceiveWork(id, maximumMessageCount, maxWaitTime,\n-            emitter);\n-        final SynchronousMessageSubscriber syncSubscriber = new SynchronousMessageSubscriber(work);\n \n-        logger.info(\"[{}]: Started synchronous message subscriber.\", id);\n-        asyncClient.receive(DEFAULT_RECEIVE_OPTIONS).subscribeWith(syncSubscriber);\n+        if (messageProcessor.get() != null && messageProcessor.get().isDisposed()) {\n+            logger.error(\"[{}]: Can not receive messaged because client is closed.\", asyncClient.getEntityPath());\n+            return;\n+        }\n+\n+        if (messageProcessor.get() == null) {\n+            logger.info(\"[{}]: Creating EmitterProcessor message processor for entity.\", asyncClient.getEntityPath());\n+\n+            EmitterProcessor<ServiceBusReceivedMessageContext> newProcessor = asyncClient.receive(DEFAULT_RECEIVE_OPTIONS)\n+                .subscribeWith(EmitterProcessor.create(false));\n+\n+            // if some other thread have come in between, we will dispose new processor\n+            if (!messageProcessor.compareAndSet(null, newProcessor)) {\n+                newProcessor.dispose();\n+            }\n+\n+            logger.info(\"[{}]: Started EmitterProcessor message processor for entity.\",\n+                asyncClient.getEntityPath());\n+        }\n+\n+        Disposable newSubscription = messageProcessor.get()\n+            .take(maximumMessageCount)\n+            .timeout(maxWaitTime)\n+            .map(message -> {\n+                emitter.next(message);\n+                return message;\n+            })\n+            .subscribe(message -> {},\n+                error -> {\n+                    logger.error(\"Error occurred while receiving messages.\", error);\n+                    emitter.error(error);\n+                },\n+                () -> emitter.complete());\n+\n+        Disposable oldSubscription = messageProcessorSubscription.getAndSet(newSubscription);\n+        if (oldSubscription != null && !oldSubscription.isDisposed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52bb661dd924dc8f2aae5a141ab28698e8248eba"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTIzMjcwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDoxODo1NVrOGRj3fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjo0MDoyMlrOGRn8Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA2NjYyMw==", "bodyText": "synchronized : This is because if multiple client are calling receive, we need to ensure that short lived sync subscriber is thread safe.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r421066623", "createdAt": "2020-05-06T20:18:55Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -606,20 +609,28 @@ public void setSessionState(String sessionId, byte[] sessionState) {\n     @Override\n     public void close() {\n         asyncClient.close();\n+\n+        if (messageProcessor != null) {\n+            messageProcessor.onComplete();\n+        }\n     }\n \n     /**\n-     * Given an {@code emitter}, queues that work in {@link SynchronousMessageSubscriber}. If the synchronous job has\n-     * not been created, will initialise it.\n+     * Given an {@code emitter}, creates a {@link SynchronousMessageSubscriber} to receive messages from Service Bus.\n      */\n-    private void queueWork(int maximumMessageCount, Duration maxWaitTime,\n+    private synchronized void queueWork(int maximumMessageCount, Duration maxWaitTime,\n         FluxSink<ServiceBusReceivedMessageContext> emitter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baacc2e0078fff24323b63f0d5835fe003c79714"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNjE1NA==", "bodyText": "You don't need an atomic variable then.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r421106154", "createdAt": "2020-05-06T21:34:07Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -606,20 +609,28 @@ public void setSessionState(String sessionId, byte[] sessionState) {\n     @Override\n     public void close() {\n         asyncClient.close();\n+\n+        if (messageProcessor != null) {\n+            messageProcessor.onComplete();\n+        }\n     }\n \n     /**\n-     * Given an {@code emitter}, queues that work in {@link SynchronousMessageSubscriber}. If the synchronous job has\n-     * not been created, will initialise it.\n+     * Given an {@code emitter}, creates a {@link SynchronousMessageSubscriber} to receive messages from Service Bus.\n      */\n-    private void queueWork(int maximumMessageCount, Duration maxWaitTime,\n+    private synchronized void queueWork(int maximumMessageCount, Duration maxWaitTime,\n         FluxSink<ServiceBusReceivedMessageContext> emitter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA2NjYyMw=="}, "originalCommit": {"oid": "baacc2e0078fff24323b63f0d5835fe003c79714"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExMjEzOQ==", "bodyText": "You can also synchronize on a lock object rather than on an entire class to scope down how large this critical path is.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r421112139", "createdAt": "2020-05-06T21:47:32Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -606,20 +609,28 @@ public void setSessionState(String sessionId, byte[] sessionState) {\n     @Override\n     public void close() {\n         asyncClient.close();\n+\n+        if (messageProcessor != null) {\n+            messageProcessor.onComplete();\n+        }\n     }\n \n     /**\n-     * Given an {@code emitter}, queues that work in {@link SynchronousMessageSubscriber}. If the synchronous job has\n-     * not been created, will initialise it.\n+     * Given an {@code emitter}, creates a {@link SynchronousMessageSubscriber} to receive messages from Service Bus.\n      */\n-    private void queueWork(int maximumMessageCount, Duration maxWaitTime,\n+    private synchronized void queueWork(int maximumMessageCount, Duration maxWaitTime,\n         FluxSink<ServiceBusReceivedMessageContext> emitter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA2NjYyMw=="}, "originalCommit": {"oid": "baacc2e0078fff24323b63f0d5835fe003c79714"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzMzM4Mg==", "bodyText": "yes: atomic is not needed  but our Checks during build time complains about it or I had to supress the warning .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r421133382", "createdAt": "2020-05-06T22:40:22Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -606,20 +609,28 @@ public void setSessionState(String sessionId, byte[] sessionState) {\n     @Override\n     public void close() {\n         asyncClient.close();\n+\n+        if (messageProcessor != null) {\n+            messageProcessor.onComplete();\n+        }\n     }\n \n     /**\n-     * Given an {@code emitter}, queues that work in {@link SynchronousMessageSubscriber}. If the synchronous job has\n-     * not been created, will initialise it.\n+     * Given an {@code emitter}, creates a {@link SynchronousMessageSubscriber} to receive messages from Service Bus.\n      */\n-    private void queueWork(int maximumMessageCount, Duration maxWaitTime,\n+    private synchronized void queueWork(int maximumMessageCount, Duration maxWaitTime,\n         FluxSink<ServiceBusReceivedMessageContext> emitter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA2NjYyMw=="}, "originalCommit": {"oid": "baacc2e0078fff24323b63f0d5835fe003c79714"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTQ5Njk0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTozNzoxNlrOGRmXgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjo0Mjo1MFrOGRn_sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNzU4Nw==", "bodyText": "The operation should be cancel(), not onComplete(). onComplete and methods like that should be done through a sink.\nvar processor = messageProcessor.getAndSet(null);\nif (processor != null) {\n   processor.cancel()\n}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r421107587", "createdAt": "2020-05-06T21:37:16Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -606,20 +611,28 @@ public void setSessionState(String sessionId, byte[] sessionState) {\n     @Override\n     public void close() {\n         asyncClient.close();\n+\n+        if (messageProcessor.get() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99418e736e4bbba82faf76cb6850aa258784f6f2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNDI1Ng==", "bodyText": "discussed on teams and decided to not change it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r421134256", "createdAt": "2020-05-06T22:42:50Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -606,20 +611,28 @@ public void setSessionState(String sessionId, byte[] sessionState) {\n     @Override\n     public void close() {\n         asyncClient.close();\n+\n+        if (messageProcessor.get() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNzU4Nw=="}, "originalCommit": {"oid": "99418e736e4bbba82faf76cb6850aa258784f6f2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTUzMDg1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTo0OTowMVrOGRmr6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTo0OTowMVrOGRmr6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExMjgxMA==", "bodyText": "This overload fetches 256. I was hoping you'd use the overload that specifies the buffer size, so you don't accidentally consume more messages than the user wants to process. EmitterProcessor.create(prefetch, false);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r421112810", "createdAt": "2020-05-06T21:49:01Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -606,20 +611,28 @@ public void setSessionState(String sessionId, byte[] sessionState) {\n     @Override\n     public void close() {\n         asyncClient.close();\n+\n+        if (messageProcessor.get() != null) {\n+            messageProcessor.get().onComplete();\n+        }\n     }\n \n     /**\n-     * Given an {@code emitter}, queues that work in {@link SynchronousMessageSubscriber}. If the synchronous job has\n-     * not been created, will initialise it.\n+     * Given an {@code emitter}, creates a {@link SynchronousMessageSubscriber} to receive messages from Service Bus.\n      */\n-    private void queueWork(int maximumMessageCount, Duration maxWaitTime,\n+    private synchronized void queueWork(int maximumMessageCount, Duration maxWaitTime,\n         FluxSink<ServiceBusReceivedMessageContext> emitter) {\n         final long id = idGenerator.getAndIncrement();\n         final SynchronousReceiveWork work = new SynchronousReceiveWork(id, maximumMessageCount, maxWaitTime,\n             emitter);\n         final SynchronousMessageSubscriber syncSubscriber = new SynchronousMessageSubscriber(work);\n-\n         logger.info(\"[{}]: Started synchronous message subscriber.\", id);\n-        asyncClient.receive(DEFAULT_RECEIVE_OPTIONS).subscribeWith(syncSubscriber);\n+\n+        if (messageProcessor.get() ==  null) {\n+            messageProcessor.set(this.asyncClient.receive(DEFAULT_RECEIVE_OPTIONS)\n+                .subscribeWith(EmitterProcessor.create(false)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99418e736e4bbba82faf76cb6850aa258784f6f2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTUzMzIzOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTo0OTo1M1rOGRmtYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTo0OTo1M1rOGRmtYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExMzE4NA==", "bodyText": "The general trick is to store the value from your AtomicReference operation in a local variable so you don't keep accessing it. You had already fetched its value in line 631.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10734#discussion_r421113184", "createdAt": "2020-05-06T21:49:53Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -606,20 +611,28 @@ public void setSessionState(String sessionId, byte[] sessionState) {\n     @Override\n     public void close() {\n         asyncClient.close();\n+\n+        if (messageProcessor.get() != null) {\n+            messageProcessor.get().onComplete();\n+        }\n     }\n \n     /**\n-     * Given an {@code emitter}, queues that work in {@link SynchronousMessageSubscriber}. If the synchronous job has\n-     * not been created, will initialise it.\n+     * Given an {@code emitter}, creates a {@link SynchronousMessageSubscriber} to receive messages from Service Bus.\n      */\n-    private void queueWork(int maximumMessageCount, Duration maxWaitTime,\n+    private synchronized void queueWork(int maximumMessageCount, Duration maxWaitTime,\n         FluxSink<ServiceBusReceivedMessageContext> emitter) {\n         final long id = idGenerator.getAndIncrement();\n         final SynchronousReceiveWork work = new SynchronousReceiveWork(id, maximumMessageCount, maxWaitTime,\n             emitter);\n         final SynchronousMessageSubscriber syncSubscriber = new SynchronousMessageSubscriber(work);\n-\n         logger.info(\"[{}]: Started synchronous message subscriber.\", id);\n-        asyncClient.receive(DEFAULT_RECEIVE_OPTIONS).subscribeWith(syncSubscriber);\n+\n+        if (messageProcessor.get() ==  null) {\n+            messageProcessor.set(this.asyncClient.receive(DEFAULT_RECEIVE_OPTIONS)\n+                .subscribeWith(EmitterProcessor.create(false)));\n+        }\n+\n+        messageProcessor.get().subscribe(syncSubscriber);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99418e736e4bbba82faf76cb6850aa258784f6f2"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4458, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}