{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NDg3NjE5", "number": 14706, "title": "Add helpers for accessing sample resources", "bodyText": "Add helper classes for accessing sample resources.", "createdAt": "2020-09-02T01:08:55Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706", "merged": true, "mergeCommit": {"oid": "73a8ec370e99eb3e58ac97408dc4e043d64a762d"}, "closed": true, "closedAt": "2020-09-02T18:06:48Z", "author": {"login": "abhipsaMisra"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdExc8tAH2gAyNDc3NDg3NjE5OjYxMjFlYWZjNzk0Y2MxMDlkZTI1MTIxZjc2MmYzMDc0ZDkyMmQxYWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdE_vLcgFqTQ4MTA4MzQ3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6121eafc794cc109de25121f762f3074d922d1ac", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6121eafc794cc109de25121f762f3074d922d1ac", "committedDate": "2020-09-02T01:09:54Z", "message": "feat(adt): Add helpers for accessing sample's resources"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c772f10c9ce6d533d254ecb82800115b429a7bb", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1c772f10c9ce6d533d254ecb82800115b429a7bb", "committedDate": "2020-09-02T01:08:23Z", "message": "revert async sample"}, "afterCommit": {"oid": "6121eafc794cc109de25121f762f3074d922d1ac", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6121eafc794cc109de25121f762f3074d922d1ac", "committedDate": "2020-09-02T01:09:54Z", "message": "feat(adt): Add helpers for accessing sample's resources"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMjc0NzU1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#pullrequestreview-480274755", "createdAt": "2020-09-02T01:11:48Z", "commit": {"oid": "6121eafc794cc109de25121f762f3074d922d1ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMToxMTo0OVrOHLNrtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMToxMTo0OVrOHLNrtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyMDU2Ng==", "bodyText": "maven has inbuilt references to src/main/resources and src/test/resources. We need to add reference to src/samples/resources explicitly.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#discussion_r481520566", "createdAt": "2020-09-02T01:11:49Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "diffHunk": "@@ -78,6 +78,11 @@\n   </dependencies>\n \n   <build>\n+    <resources>\n+      <resource>\n+        <directory>src/samples/resources</directory>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121eafc794cc109de25121f762f3074d922d1ac"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMjc3MjI1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#pullrequestreview-480277225", "createdAt": "2020-09-02T01:13:06Z", "commit": {"oid": "6121eafc794cc109de25121f762f3074d922d1ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMToxMzowNlrOHLNs6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMToxMzowNlrOHLNs6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyMDg3NQ==", "bodyText": "TODO: Add a command line options helper similar to .NET", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#discussion_r481520875", "createdAt": "2020-09-02T01:13:06Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleSample.java", "diffHunk": "@@ -0,0 +1,112 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n+\n+public class DigitalTwinsLifecycleSample {\n+    private static final ClientLogger logger = new ClientLogger(DigitalTwinsLifecycleSample.class);\n+\n+    private static final String tenantId = System.getenv(\"TENANT_ID\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121eafc794cc109de25121f762f3074d922d1ac"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMjc4MzM3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#pullrequestreview-480278337", "createdAt": "2020-09-02T01:13:42Z", "commit": {"oid": "6121eafc794cc109de25121f762f3074d922d1ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMToxMzo0M1rOHLNtcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMToxMzo0M1rOHLNtcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyMTAwOA==", "bodyText": "This path to \"resources\" is returned as a URL", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#discussion_r481521008", "createdAt": "2020-09-02T01:13:43Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleSample.java", "diffHunk": "@@ -0,0 +1,112 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n+\n+public class DigitalTwinsLifecycleSample {\n+    private static final ClientLogger logger = new ClientLogger(DigitalTwinsLifecycleSample.class);\n+\n+    private static final String tenantId = System.getenv(\"TENANT_ID\");\n+    private static final String clientId = System.getenv(\"CLIENT_ID\");\n+    private static final String clientSecret = System.getenv(\"CLIENT_SECRET\");\n+    private static final String endpoint = System.getenv(\"DIGITAL_TWINS_ENDPOINT\");\n+\n+    private static final int MaxTimeForTwinOperationsInSeconds = 10;\n+\n+    private static final URL DtdlDirectoryUrl = DigitalTwinsLifecycleSample.class.getClassLoader().getResource(\"DTDL\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121eafc794cc109de25121f762f3074d922d1ac"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d894f41229232d4d1bd8ef9f6c755c792620567", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5d894f41229232d4d1bd8ef9f6c755c792620567", "committedDate": "2020-09-02T04:45:48Z", "message": "Files.readString not available in java 8"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNDgwNzQ0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#pullrequestreview-480480744", "createdAt": "2020-09-02T04:48:26Z", "commit": {"oid": "5d894f41229232d4d1bd8ef9f6c755c792620567"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNDo0ODoyN1rOHLXowQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNDo0ODoyN1rOHLXowQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY4MzY0OQ==", "bodyText": "How to access response status code? ErrorResponse.getValue().getError().getCode() is string.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#discussion_r481683649", "createdAt": "2020-09-02T04:48:27Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleSample.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n+\n+public class DigitalTwinsLifecycleSample {\n+    private static final ClientLogger logger = new ClientLogger(DigitalTwinsLifecycleSample.class);\n+\n+    private static final String tenantId = System.getenv(\"TENANT_ID\");\n+    private static final String clientId = System.getenv(\"CLIENT_ID\");\n+    private static final String clientSecret = System.getenv(\"CLIENT_SECRET\");\n+    private static final String endpoint = System.getenv(\"DIGITAL_TWINS_ENDPOINT\");\n+\n+    private static final int MaxTimeForTwinOperationsInSeconds = 10;\n+\n+    private static final URL DtdlDirectoryUrl = DigitalTwinsLifecycleSample.class.getClassLoader().getResource(\"DTDL\");\n+    private static final Path DtDlDirectoryPath;\n+    private static final Path TwinsPath;\n+    private static final Path ModelsPath;\n+    private static final Path RelationshipsPath;\n+\n+    private static final DigitalTwinsAsyncClient client;\n+\n+    static {\n+        try {\n+            assert DtdlDirectoryUrl != null;\n+            DtDlDirectoryPath = Paths.get(DtdlDirectoryUrl.toURI());\n+        } catch (URISyntaxException e) {\n+            logger.error(\"Unable to convert the DTDL directory URL to URI: \", e);\n+            throw new RuntimeException(e);\n+        }\n+        TwinsPath = Paths.get(DtDlDirectoryPath.toString(), \"DigitalTwins\");\n+        ModelsPath = Paths.get(DtDlDirectoryPath.toString(), \"Models\");\n+        RelationshipsPath = Paths.get(DtDlDirectoryPath.toString(), \"Relationships\");\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(tenantId)\n+                    .clientId(clientId)\n+                    .clientSecret(clientSecret)\n+                    .build()\n+            )\n+            .endpoint(endpoint)\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n+            .buildAsyncClient();\n+    }\n+\n+    public static void main(String[] args) throws IOException, InterruptedException {\n+        // Ensure existing twins with the same name are deleted first\n+        deleteTwins();\n+\n+        // Create twin counterparts for all the models\n+        createTwins();\n+    }\n+\n+    public static void deleteTwins() throws IOException, InterruptedException {\n+        System.out.println(\"DELETE DIGITAL TWINS\");\n+        Map<String, String> twins = FileHelper.loadAllFilesInPath(TwinsPath);\n+        final Semaphore deleteTwinsSemaphore = new Semaphore(0);\n+\n+        twins\n+            .forEach((twinId, twinContent) -> client.deleteDigitalTwin(twinId)\n+                .subscribe(\n+                    aVoid -> { },\n+                    throwable -> {\n+                        // If digital twin does not exist, ignore.\n+                        if (!(throwable instanceof ErrorResponseException) || !((ErrorResponseException) throwable).getValue().getError().getCode().equals(\"DigitalTwinNotFound\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d894f41229232d4d1bd8ef9f6c755c792620567"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMDAzMzUz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#pullrequestreview-481003353", "createdAt": "2020-09-02T16:38:16Z", "commit": {"oid": "5d894f41229232d4d1bd8ef9f6c755c792620567"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjozODoxN1rOHL3vtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjozOTozOVrOHL3ytg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwOTcxOQ==", "bodyText": "I will take care of this", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#discussion_r482209719", "createdAt": "2020-09-02T16:38:17Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleSample.java", "diffHunk": "@@ -0,0 +1,112 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n+\n+public class DigitalTwinsLifecycleSample {\n+    private static final ClientLogger logger = new ClientLogger(DigitalTwinsLifecycleSample.class);\n+\n+    private static final String tenantId = System.getenv(\"TENANT_ID\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyMDg3NQ=="}, "originalCommit": {"oid": "6121eafc794cc109de25121f762f3074d922d1ac"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIxMDQ4Ng==", "bodyText": "ModelPath and RelationshipsPath is not used here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#discussion_r482210486", "createdAt": "2020-09-02T16:39:39Z", "author": {"login": "azabbasi"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleSample.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n+\n+public class DigitalTwinsLifecycleSample {\n+    private static final ClientLogger logger = new ClientLogger(DigitalTwinsLifecycleSample.class);\n+\n+    private static final String tenantId = System.getenv(\"TENANT_ID\");\n+    private static final String clientId = System.getenv(\"CLIENT_ID\");\n+    private static final String clientSecret = System.getenv(\"CLIENT_SECRET\");\n+    private static final String endpoint = System.getenv(\"DIGITAL_TWINS_ENDPOINT\");\n+\n+    private static final int MaxTimeForTwinOperationsInSeconds = 10;\n+\n+    private static final URL DtdlDirectoryUrl = DigitalTwinsLifecycleSample.class.getClassLoader().getResource(\"DTDL\");\n+    private static final Path DtDlDirectoryPath;\n+    private static final Path TwinsPath;\n+    private static final Path ModelsPath;\n+    private static final Path RelationshipsPath;\n+\n+    private static final DigitalTwinsAsyncClient client;\n+\n+    static {\n+        try {\n+            assert DtdlDirectoryUrl != null;\n+            DtDlDirectoryPath = Paths.get(DtdlDirectoryUrl.toURI());\n+        } catch (URISyntaxException e) {\n+            logger.error(\"Unable to convert the DTDL directory URL to URI: \", e);\n+            throw new RuntimeException(e);\n+        }\n+        TwinsPath = Paths.get(DtDlDirectoryPath.toString(), \"DigitalTwins\");\n+        ModelsPath = Paths.get(DtDlDirectoryPath.toString(), \"Models\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d894f41229232d4d1bd8ef9f6c755c792620567"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "243fe60c10edf1ebd7a720c9809d59b982717b91", "author": {"user": {"login": "abhipsaMisra", "name": "Abhipsa Misra"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/243fe60c10edf1ebd7a720c9809d59b982717b91", "committedDate": "2020-09-02T16:42:53Z", "message": "some small modifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMDgzNDcw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14706#pullrequestreview-481083470", "createdAt": "2020-09-02T17:48:29Z", "commit": {"oid": "243fe60c10edf1ebd7a720c9809d59b982717b91"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 47, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}