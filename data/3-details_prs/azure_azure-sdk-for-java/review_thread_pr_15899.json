{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MTUyODU0", "number": 15899, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjo0Mzo1MFrOEp92Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyNjoxNVrOEp-maA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDQwMzUwOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjo0Mzo1MFrOHb9WFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjo0Mzo1MFrOHb9WFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3ODY3Nw==", "bodyText": "This can be simplified.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Iterable<Header> headers = clientOptions.getHeaders();\n          \n          \n            \n            \n          \n          \n            \n                        if (headers.iterator().hasNext()) {\n          \n          \n            \n                            List<HttpHeader> httpHeaderList = new ArrayList<>();\n          \n          \n            \n                            headers.forEach(header -> httpHeaderList.add(new HttpHeader(header.getName(), header.getValue())));\n          \n          \n            \n                            policies.add(new AddHeadersPolicy(new HttpHeaders(httpHeaderList)));\n          \n          \n            \n                        }\n          \n          \n            \n                       \n          \n          \n            \n                            List<HttpHeader> httpHeaderList = new ArrayList<>();\n          \n          \n            \n                            clientOptions.getHeaders().forEach(header -> httpHeaderList.add(new HttpHeader(header.getName(), header.getValue())));\n          \n          \n            \n                            policies.add(new AddHeadersPolicy(new HttpHeaders(httpHeaderList)));", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15899#discussion_r499078677", "createdAt": "2020-10-02T22:43:50Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClientBuilder.java", "diffHunk": "@@ -129,13 +135,25 @@ public KeyVaultAccessControlAsyncClient buildAsyncClient() {\n \n         String clientName = properties.getOrDefault(SDK_NAME, \"UnknownName\");\n         String clientVersion = properties.getOrDefault(SDK_VERSION, \"UnknownVersion\");\n+        String applicationId =\n+            clientOptions == null ? httpLogOptions.getApplicationId() : clientOptions.getApplicationId();\n \n-        policies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion,\n-            buildConfiguration));\n+        policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));\n         HttpPolicyProviders.addBeforeRetryPolicies(policies);\n         policies.add(retryPolicy == null ? new RetryPolicy() : retryPolicy);\n         this.policies.add(new KeyVaultCredentialPolicy(credential));\n         policies.addAll(this.policies);\n+\n+        if (clientOptions != null) {\n+            Iterable<Header> headers = clientOptions.getHeaders();\n+\n+            if (headers.iterator().hasNext()) {\n+                List<HttpHeader> httpHeaderList = new ArrayList<>();\n+                headers.forEach(header -> httpHeaderList.add(new HttpHeader(header.getName(), header.getValue())));\n+                policies.add(new AddHeadersPolicy(new HttpHeaders(httpHeaderList)));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc6dd1148407bb7418b366df388a40cb21f2c779"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDQwNTI1OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultBackupClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjo0NTowMlrOHb9XHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjo0NTowMlrOHb9XHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3ODk0Mw==", "bodyText": "Don't need this check.  forEach() will be executed only if there are elements in the list. Update this in other builders too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15899#discussion_r499078943", "createdAt": "2020-10-02T22:45:02Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultBackupClientBuilder.java", "diffHunk": "@@ -128,13 +134,25 @@ public KeyVaultBackupAsyncClient buildAsyncClient() {\n \n         String clientName = properties.getOrDefault(SDK_NAME, \"UnknownName\");\n         String clientVersion = properties.getOrDefault(SDK_VERSION, \"UnknownVersion\");\n+        String applicationId =\n+            clientOptions == null ? httpLogOptions.getApplicationId() : clientOptions.getApplicationId();\n \n-        policies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion,\n-            buildConfiguration));\n+        policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));\n         HttpPolicyProviders.addBeforeRetryPolicies(policies);\n         policies.add(retryPolicy == null ? new RetryPolicy() : retryPolicy);\n         this.policies.add(new KeyVaultCredentialPolicy(credential));\n         policies.addAll(this.policies);\n+\n+        if (clientOptions != null) {\n+            Iterable<Header> headers = clientOptions.getHeaders();\n+\n+            if (headers.iterator().hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc6dd1148407bb7418b366df388a40cb21f2c779"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDQ1MzI5OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultBackupClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMzoxODo0MVrOHb9y2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMzoxODo0MVrOHb9y2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4NjA0Mg==", "bodyText": "This reads a bit odd - Sets the various options to be set...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15899#discussion_r499086042", "createdAt": "2020-10-02T23:18:41Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultBackupClientBuilder.java", "diffHunk": "@@ -273,6 +291,17 @@ public KeyVaultBackupClientBuilder retryPolicy(RetryPolicy retryPolicy) {\n         return this;\n     }\n \n+    /**\n+     * Sets the various {@link ClientOptions options} to be set on this client.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc6dd1148407bb7418b366df388a40cb21f2c779"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDUyMzQwOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyMjoxNFrOHb-afg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyMjoxNFrOHb-afg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjE5MA==", "bodyText": "Since user might not know what ClientOptions is for , we can explain in java doc more about what user can set with this.\nHere is one example of java doc https://github.com/Azure/azure-sdk-for-java/pull/13697/files#diff-063fb5ef000495423cf8b8e2e66f8518R262", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15899#discussion_r499096190", "createdAt": "2020-10-03T00:22:14Z", "author": {"login": "hemanttanwar"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClientBuilder.java", "diffHunk": "@@ -273,6 +288,17 @@ public KeyVaultAccessControlClientBuilder retryPolicy(RetryPolicy retryPolicy) {\n         return this;\n     }\n \n+    /**\n+     * Sets various {@link ClientOptions options} on this client.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "010311587115c7d46adb291a37dae603a7215851"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDUyNDc3OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultBackupClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyMzozNFrOHb-bQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyMzozNFrOHb-bQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjM4Nw==", "bodyText": "same java doc comment like above.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15899#discussion_r499096387", "createdAt": "2020-10-03T00:23:34Z", "author": {"login": "hemanttanwar"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultBackupClientBuilder.java", "diffHunk": "@@ -273,6 +288,17 @@ public KeyVaultBackupClientBuilder retryPolicy(RetryPolicy retryPolicy) {\n         return this;\n     }\n \n+    /**\n+     * Sets various {@link ClientOptions options} on this client.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "010311587115c7d46adb291a37dae603a7215851"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDUyNTA4OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/main/java/com/azure/security/keyvault/certificates/CertificateClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyMzo1NlrOHb-bcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyMzo1NlrOHb-bcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjQzMw==", "bodyText": "java doc", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15899#discussion_r499096433", "createdAt": "2020-10-03T00:23:56Z", "author": {"login": "hemanttanwar"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/main/java/com/azure/security/keyvault/certificates/CertificateClientBuilder.java", "diffHunk": "@@ -286,6 +301,17 @@ public CertificateClientBuilder retryPolicy(RetryPolicy retryPolicy) {\n         return this;\n     }\n \n+    /**\n+     * Sets various {@link ClientOptions options} on this client.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "010311587115c7d46adb291a37dae603a7215851"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDUyNTcxOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyNDozNFrOHb-bxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyNDozNFrOHb-bxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjUxOA==", "bodyText": "Additional java doc here too", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15899#discussion_r499096518", "createdAt": "2020-10-03T00:24:34Z", "author": {"login": "hemanttanwar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClientBuilder.java", "diffHunk": "@@ -289,6 +305,17 @@ public KeyClientBuilder retryPolicy(RetryPolicy retryPolicy) {\n         return this;\n     }\n \n+    /**\n+     * Sets various {@link ClientOptions options} on this client.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "010311587115c7d46adb291a37dae603a7215851"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDUyNTkwOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyEncryptionKeyClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyNDo1MVrOHb-b5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyNDo1MVrOHb-b5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjU1MQ==", "bodyText": "java doc", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15899#discussion_r499096551", "createdAt": "2020-10-03T00:24:51Z", "author": {"login": "hemanttanwar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyEncryptionKeyClientBuilder.java", "diffHunk": "@@ -224,4 +225,15 @@ public KeyEncryptionKeyClientBuilder retryPolicy(RetryPolicy retryPolicy) {\n         builder.retryPolicy(retryPolicy);\n         return this;\n     }\n+\n+    /**\n+     * Sets various {@link ClientOptions options} on this client.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "010311587115c7d46adb291a37dae603a7215851"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDUyNzEyOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyNjoxNVrOHb-cmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMjo1NjoxOVrOHb_O2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjczMQ==", "bodyText": "Could we add one test where use set a Header and it gets added to HttpRequest ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15899#discussion_r499096731", "createdAt": "2020-10-03T00:26:15Z", "author": {"login": "hemanttanwar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientBuilder.java", "diffHunk": "@@ -154,12 +160,22 @@ HttpPipeline setupPipeline() {\n \n         String clientName = properties.getOrDefault(SDK_NAME, \"UnknownName\");\n         String clientVersion = properties.getOrDefault(SDK_VERSION, \"UnknownVersion\");\n-        policies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion,\n-            buildConfiguration));\n+        String applicationId =\n+            clientOptions == null ? httpLogOptions.getApplicationId() : clientOptions.getApplicationId();\n+\n+        policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));\n         HttpPolicyProviders.addBeforeRetryPolicies(policies);\n         policies.add(retryPolicy);\n         policies.add(new KeyVaultCredentialPolicy(credential));\n         policies.addAll(this.policies);\n+\n+        if (clientOptions != null) {\n+            List<HttpHeader> httpHeaderList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "010311587115c7d46adb291a37dae603a7215851"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5OTY1Nw==", "bodyText": "I think we should be able to, let me see what I can do with the given time.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15899#discussion_r499099657", "createdAt": "2020-10-03T00:48:54Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientBuilder.java", "diffHunk": "@@ -154,12 +160,22 @@ HttpPipeline setupPipeline() {\n \n         String clientName = properties.getOrDefault(SDK_NAME, \"UnknownName\");\n         String clientVersion = properties.getOrDefault(SDK_VERSION, \"UnknownVersion\");\n-        policies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion,\n-            buildConfiguration));\n+        String applicationId =\n+            clientOptions == null ? httpLogOptions.getApplicationId() : clientOptions.getApplicationId();\n+\n+        policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));\n         HttpPolicyProviders.addBeforeRetryPolicies(policies);\n         policies.add(retryPolicy);\n         policies.add(new KeyVaultCredentialPolicy(credential));\n         policies.addAll(this.policies);\n+\n+        if (clientOptions != null) {\n+            List<HttpHeader> httpHeaderList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjczMQ=="}, "originalCommit": {"oid": "010311587115c7d46adb291a37dae603a7215851"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwOTU5NQ==", "bodyText": "Will add these tests in a future iteration. Discussed it with @hemanttanwar in a side conversation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15899#discussion_r499109595", "createdAt": "2020-10-03T02:56:19Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientBuilder.java", "diffHunk": "@@ -154,12 +160,22 @@ HttpPipeline setupPipeline() {\n \n         String clientName = properties.getOrDefault(SDK_NAME, \"UnknownName\");\n         String clientVersion = properties.getOrDefault(SDK_VERSION, \"UnknownVersion\");\n-        policies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion,\n-            buildConfiguration));\n+        String applicationId =\n+            clientOptions == null ? httpLogOptions.getApplicationId() : clientOptions.getApplicationId();\n+\n+        policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));\n         HttpPolicyProviders.addBeforeRetryPolicies(policies);\n         policies.add(retryPolicy);\n         policies.add(new KeyVaultCredentialPolicy(credential));\n         policies.addAll(this.policies);\n+\n+        if (clientOptions != null) {\n+            List<HttpHeader> httpHeaderList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjczMQ=="}, "originalCommit": {"oid": "010311587115c7d46adb291a37dae603a7215851"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 765, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}