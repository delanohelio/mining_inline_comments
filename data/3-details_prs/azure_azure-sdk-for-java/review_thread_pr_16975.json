{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNjAxOTUx", "number": 16975, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjoyMToyNlrOEzgNMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzoyOToxM1rOEzhLuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDQwNDk4OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjoyMToyNlrOHqwwig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjoyMjoxOFrOHqwx7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwMTA5OA==", "bodyText": "The issue was that we used a different mapper in our convenience layer than we did in our generated layer. The generated layer one (from jacksonAdapter.serializer()) has a lot of useful modules registered already, including a module for parsing of date times. By simply using the generated layer's adapter in this layer as well, this issue is solved", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16975#discussion_r514601098", "createdAt": "2020-10-29T22:21:26Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -53,17 +54,18 @@\n @ServiceClient(builder = DigitalTwinsClientBuilder.class, isAsync = true)\n public final class DigitalTwinsAsyncClient {\n     private static final ClientLogger logger = new ClientLogger(DigitalTwinsAsyncClient.class);\n-    private static final ObjectMapper mapper = new ObjectMapper();\n+    private static ObjectMapper mapper;\n     private final DigitalTwinsServiceVersion serviceVersion;\n     private final AzureDigitalTwinsAPIImpl protocolLayer;\n     private static final Boolean includeModelDefinitionOnGet = true;\n     private final JsonSerializer serializer;\n \n     DigitalTwinsAsyncClient(String serviceEndpoint, HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, JsonSerializer jsonSerializer) {\n         final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n-        stringModule.addSerializer(new DigitalTwinsStringSerializer(String.class, mapper));\n \n         JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        mapper = jacksonAdapter.serializer(); // Use the same mapper in this layer that the generated layer will use\n+        stringModule.addSerializer(new DigitalTwinsStringSerializer(String.class, mapper));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8e5a644354913c8cbd89982a2511ffcf32ce75"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwMTQ1NA==", "bodyText": "Note that this mapper is not to be confused with the custom serializer that users can provide. If the user provides a custom serializer, then this mapper won't be used in the convenience layer", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16975#discussion_r514601454", "createdAt": "2020-10-29T22:22:18Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -53,17 +54,18 @@\n @ServiceClient(builder = DigitalTwinsClientBuilder.class, isAsync = true)\n public final class DigitalTwinsAsyncClient {\n     private static final ClientLogger logger = new ClientLogger(DigitalTwinsAsyncClient.class);\n-    private static final ObjectMapper mapper = new ObjectMapper();\n+    private static ObjectMapper mapper;\n     private final DigitalTwinsServiceVersion serviceVersion;\n     private final AzureDigitalTwinsAPIImpl protocolLayer;\n     private static final Boolean includeModelDefinitionOnGet = true;\n     private final JsonSerializer serializer;\n \n     DigitalTwinsAsyncClient(String serviceEndpoint, HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, JsonSerializer jsonSerializer) {\n         final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n-        stringModule.addSerializer(new DigitalTwinsStringSerializer(String.class, mapper));\n \n         JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        mapper = jacksonAdapter.serializer(); // Use the same mapper in this layer that the generated layer will use\n+        stringModule.addSerializer(new DigitalTwinsStringSerializer(String.class, mapper));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwMTA5OA=="}, "originalCommit": {"oid": "6d8e5a644354913c8cbd89982a2511ffcf32ce75"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDQxNDgwOnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjoyNToyMlrOHqw2SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjoyNToyMlrOHqw2SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwMjU2OA==", "bodyText": "This is the module that was missing from our default mapper in the digital twins client. We get this module for free when we construct the JacksonAdapter and call .serializer() on that jacksonAdapter. We need to explicitly use it here, though", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16975#discussion_r514602568", "createdAt": "2020-10-29T22:25:22Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java", "diffHunk": "@@ -46,6 +51,10 @@ public static void main(String[] args) throws IOException {\n                     .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n             .buildClient();\n \n+        // This mapper gets used to deserialize a digital twin that has a date time within a property metadata, so it\n+        // needs to have this module in order to correctly deserialize that date time\n+        mapper.registerModule(new JavaTimeModule());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8e5a644354913c8cbd89982a2511ffcf32ce75"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDU2NTA3OnYy", "diffSide": "RIGHT", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzoyOToxM1rOHqyNCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzozNDowOFrOHqyTEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNDc3OQ==", "bodyText": "Do we still need this string serializer? Are there any APIs that still operate on Strings? I thought we got rid of all those, and everything was objects now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16975#discussion_r514624779", "createdAt": "2020-10-29T23:29:13Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -53,17 +54,18 @@\n @ServiceClient(builder = DigitalTwinsClientBuilder.class, isAsync = true)\n public final class DigitalTwinsAsyncClient {\n     private static final ClientLogger logger = new ClientLogger(DigitalTwinsAsyncClient.class);\n-    private static final ObjectMapper mapper = new ObjectMapper();\n+    private ObjectMapper mapper;\n     private final DigitalTwinsServiceVersion serviceVersion;\n     private final AzureDigitalTwinsAPIImpl protocolLayer;\n     private static final Boolean includeModelDefinitionOnGet = true;\n     private final JsonSerializer serializer;\n \n     DigitalTwinsAsyncClient(String serviceEndpoint, HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, JsonSerializer jsonSerializer) {\n         final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n-        stringModule.addSerializer(new DigitalTwinsStringSerializer(String.class, mapper));\n \n         JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        mapper = jacksonAdapter.serializer(); // Use the same mapper in this layer that the generated layer will use\n+        stringModule.addSerializer(new DigitalTwinsStringSerializer(String.class, mapper));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdfdb832f6614e7b8e2d4c4eee041c5227df3b1e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNTc3Ng==", "bodyText": "That was the plan back when we were going to force APIs to take in a <T extends IDigitalTwin>, but those plans fell through, so we're back to supporting strings again. It would be more work to remove them at this point then I think it would be worth", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16975#discussion_r514625776", "createdAt": "2020-10-29T23:32:21Z", "author": {"login": "timtay-microsoft"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -53,17 +54,18 @@\n @ServiceClient(builder = DigitalTwinsClientBuilder.class, isAsync = true)\n public final class DigitalTwinsAsyncClient {\n     private static final ClientLogger logger = new ClientLogger(DigitalTwinsAsyncClient.class);\n-    private static final ObjectMapper mapper = new ObjectMapper();\n+    private ObjectMapper mapper;\n     private final DigitalTwinsServiceVersion serviceVersion;\n     private final AzureDigitalTwinsAPIImpl protocolLayer;\n     private static final Boolean includeModelDefinitionOnGet = true;\n     private final JsonSerializer serializer;\n \n     DigitalTwinsAsyncClient(String serviceEndpoint, HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, JsonSerializer jsonSerializer) {\n         final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n-        stringModule.addSerializer(new DigitalTwinsStringSerializer(String.class, mapper));\n \n         JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        mapper = jacksonAdapter.serializer(); // Use the same mapper in this layer that the generated layer will use\n+        stringModule.addSerializer(new DigitalTwinsStringSerializer(String.class, mapper));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNDc3OQ=="}, "originalCommit": {"oid": "fdfdb832f6614e7b8e2d4c4eee041c5227df3b1e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNjMyMg==", "bodyText": "Got it, so now we are back to the original state where we support <T> as String as input for these APIs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16975#discussion_r514626322", "createdAt": "2020-10-29T23:34:08Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -53,17 +54,18 @@\n @ServiceClient(builder = DigitalTwinsClientBuilder.class, isAsync = true)\n public final class DigitalTwinsAsyncClient {\n     private static final ClientLogger logger = new ClientLogger(DigitalTwinsAsyncClient.class);\n-    private static final ObjectMapper mapper = new ObjectMapper();\n+    private ObjectMapper mapper;\n     private final DigitalTwinsServiceVersion serviceVersion;\n     private final AzureDigitalTwinsAPIImpl protocolLayer;\n     private static final Boolean includeModelDefinitionOnGet = true;\n     private final JsonSerializer serializer;\n \n     DigitalTwinsAsyncClient(String serviceEndpoint, HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, JsonSerializer jsonSerializer) {\n         final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n-        stringModule.addSerializer(new DigitalTwinsStringSerializer(String.class, mapper));\n \n         JacksonAdapter jacksonAdapter = new JacksonAdapter();\n+        mapper = jacksonAdapter.serializer(); // Use the same mapper in this layer that the generated layer will use\n+        stringModule.addSerializer(new DigitalTwinsStringSerializer(String.class, mapper));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNDc3OQ=="}, "originalCommit": {"oid": "fdfdb832f6614e7b8e2d4c4eee041c5227df3b1e"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3791, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}