{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwODQ2NjUw", "number": 9222, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODowNTozOVrODpntNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDoxMToxNVrODpt6nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTY4NzU3OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODowNTozOVrOF46bnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxOToyM1rOF466TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyMTkxNg==", "bodyText": "does this need to be public ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9222#discussion_r395221916", "createdAt": "2020-03-19T18:05:39Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretAsyncClient.java", "diffHunk": "@@ -59,6 +62,10 @@\n     static final int DEFAULT_MAX_PAGE_RESULTS = 25;\n     static final String CONTENT_TYPE_HEADER_VALUE = \"application/json\";\n     static final String KEY_VAULT_SCOPE = \"https://vault.azure.net/.default\";\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    public static final Map<String, String> KEYVAULT_TRACING_PROPERTIES =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e53b0a340bc9f10f8111cf088843a90ac99b16ce"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyOTc3Mg==", "bodyText": "right, doesn't have to be public.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9222#discussion_r395229772", "createdAt": "2020-03-19T18:19:23Z", "author": {"login": "samvaity"}, "path": "sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretAsyncClient.java", "diffHunk": "@@ -59,6 +62,10 @@\n     static final int DEFAULT_MAX_PAGE_RESULTS = 25;\n     static final String CONTENT_TYPE_HEADER_VALUE = \"application/json\";\n     static final String KEY_VAULT_SCOPE = \"https://vault.azure.net/.default\";\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    public static final Map<String, String> KEYVAULT_TRACING_PROPERTIES =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyMTkxNg=="}, "originalCommit": {"oid": "e53b0a340bc9f10f8111cf088843a90ac99b16ce"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTcwMzkwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/FluxUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxMDoyM1rOF46mQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODoxNDozNVrOF46vcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNDY0Mw==", "bodyText": "Just curious, under what scenarios, we would expect this map to contain more than one value ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9222#discussion_r395224643", "createdAt": "2020-03-19T18:10:23Z", "author": {"login": "g2vinay"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/FluxUtil.java", "diffHunk": "@@ -98,8 +99,34 @@ private static void accept(ByteArrayOutputStream byteOutputStream, ByteBuffer by\n      * @return The response from service call\n      */\n     public static <T> Mono<T> withContext(Function<Context, Mono<T>> serviceCall) {\n+        return withContext(serviceCall, Collections.emptyMap());\n+    }\n+\n+    /**\n+     * This method converts the incoming {@code subscriberContext} from {@link reactor.util.context.Context Reactor\n+     * Context} to {@link Context Azure Context}, adds the specified context attributes and calls the given lambda\n+     * function with this context and returns a single entity of type {@code T}\n+     * <p>\n+     * If the reactor context is empty, {@link Context#NONE} will be used to call the lambda function\n+     * </p>\n+     *\n+     * @param serviceCall serviceCall The lambda function that makes the service call into which azure context\n+     * will be passed\n+     * @param contextAttributes The map of attributes sent by the calling method to be set on {@link Context}.\n+     * @param  <T> The type of response returned from the service call\n+     * @return The response from service call\n+     */\n+    public static <T> Mono<T> withContext(Function<Context, Mono<T>> serviceCall,\n+        Map<String, String> contextAttributes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e53b0a340bc9f10f8111cf088843a90ac99b16ce"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNjk5Mw==", "bodyText": "Yes, it is mostly for future-proofing. So that in future if there are more tracing attribute requirements its easily extendable that way.\nFor some more context- #7733. This effort was originally started with storage clients but the dependencies seem to be adding a lot of complexities for doing this in storage so to unblock it decided to continue doing this for other client libraries starting with KV this time :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9222#discussion_r395226993", "createdAt": "2020-03-19T18:14:35Z", "author": {"login": "samvaity"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/FluxUtil.java", "diffHunk": "@@ -98,8 +99,34 @@ private static void accept(ByteArrayOutputStream byteOutputStream, ByteBuffer by\n      * @return The response from service call\n      */\n     public static <T> Mono<T> withContext(Function<Context, Mono<T>> serviceCall) {\n+        return withContext(serviceCall, Collections.emptyMap());\n+    }\n+\n+    /**\n+     * This method converts the incoming {@code subscriberContext} from {@link reactor.util.context.Context Reactor\n+     * Context} to {@link Context Azure Context}, adds the specified context attributes and calls the given lambda\n+     * function with this context and returns a single entity of type {@code T}\n+     * <p>\n+     * If the reactor context is empty, {@link Context#NONE} will be used to call the lambda function\n+     * </p>\n+     *\n+     * @param serviceCall serviceCall The lambda function that makes the service call into which azure context\n+     * will be passed\n+     * @param contextAttributes The map of attributes sent by the calling method to be set on {@link Context}.\n+     * @param  <T> The type of response returned from the service call\n+     * @return The response from service call\n+     */\n+    public static <T> Mono<T> withContext(Function<Context, Mono<T>> serviceCall,\n+        Map<String, String> contextAttributes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNDY0Mw=="}, "originalCommit": {"oid": "e53b0a340bc9f10f8111cf088843a90ac99b16ce"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDcwNDkyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-tracing-opentelemetry/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDoxMToxNVrOF5EeDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDoyMDowMlrOF5EmMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NjM4MQ==", "bodyText": "Is this something good to mention in KV changelogs too ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9222#discussion_r395386381", "createdAt": "2020-03-20T00:11:15Z", "author": {"login": "g2vinay"}, "path": "sdk/core/azure-core-tracing-opentelemetry/CHANGELOG.md", "diffHunk": "@@ -1,6 +1,7 @@\n # Release History\n \n ## 1.0.0-beta.4 (Unreleased)\n+- Keyvault: add az namespace info attribute to all outgoing spans.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc32a3410af9c0ef31686207558dfe32a30b4082"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4ODQ2Nw==", "bodyText": "This would rather be a value add feature to tracing than to KV so we can skip KV changelogs for this one.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9222#discussion_r395388467", "createdAt": "2020-03-20T00:20:02Z", "author": {"login": "samvaity"}, "path": "sdk/core/azure-core-tracing-opentelemetry/CHANGELOG.md", "diffHunk": "@@ -1,6 +1,7 @@\n # Release History\n \n ## 1.0.0-beta.4 (Unreleased)\n+- Keyvault: add az namespace info attribute to all outgoing spans.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NjM4MQ=="}, "originalCommit": {"oid": "dc32a3410af9c0ef31686207558dfe32a30b4082"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 154, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}