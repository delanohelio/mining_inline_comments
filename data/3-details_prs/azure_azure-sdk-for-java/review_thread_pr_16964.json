{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMTkxMDM1", "number": 16964, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo0NzowN1rOEzabjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjoxMjowMlrOEzgEHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzQ1ODcxOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-administration/src/samples/java/com.azure.security.keyvault.administration/BackupAndRestoreHelloWorld.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo0NzowN1rOHqnnzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDozNjowN1rOHsUviw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1MTQwNA==", "bodyText": "Do we intend to change this to handle the Uri parsing internally? (.NET example)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16964#discussion_r514451404", "createdAt": "2020-10-29T17:47:07Z", "author": {"login": "christothes"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/samples/java/com.azure.security.keyvault.administration/BackupAndRestoreHelloWorld.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.util.polling.SyncPoller;\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.security.keyvault.administration.models.KeyVaultBackupOperation;\n+import com.azure.security.keyvault.administration.models.KeyVaultRestoreOperation;\n+\n+/**\n+ * This sample demonstrates how to fully backup and restore a key vault synchronously.\n+ */\n+public class BackupAndRestoreHelloWorld {\n+    /**\n+     * Authenticates with the key vault and shows how to fully backup and restore a key vault synchronously.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     * @throws IllegalArgumentException when an invalid key vault URL is passed.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate an KeyVaultBackupClient that will be used to call the service. Notice that the client is using\n+        // default Azure credentials. To make default credentials work, ensure that environment variables\n+        // 'AZURE_CLIENT_ID', 'AZURE_CLIENT_KEY' and 'AZURE_TENANT_ID' are set with the service principal credentials.\n+\n+        // To get started, you'll need a URI to an Azure Key Vault. See the README (https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Administration/README.md)\n+        // for links and instructions.\n+        KeyVaultBackupClient backupClient = new KeyVaultBackupClientBuilder()\n+            .vaultUrl(\"https://{YOUR_VAULT_NAME}.vault.azure.net\")\n+            .credential(new DefaultAzureCredentialBuilder().build())\n+            .buildClient();\n+\n+        // Using the KeyVaultBackupClient, you can back up your entire collection of keys. The backing store for full\n+        // key backups is a blob storage container using Shared Access Signature authentication. For more details on\n+        // creating a SAS token using the `BlobServiceClient`, see the Azure Storage Blobs client README (https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/storage/Azure.Storage.Blobs/README.md)\n+        // and the authentication samples(https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/storage/Azure.Storage.Blobs/samples/Sample02_Auth.cs).\n+        // Alternatively, it is possible to generate a SAS token in Storage Explorer (https://docs.microsoft.com/azure/vs-azure-tools-storage-manage-with-storage-explorer?tabs=windows#generate-a-shared-access-signature-in-storage-explorer).\n+\n+        // To ensure you have some keys for backup, you may want to first create a key using the KeyClient. To create a\n+        // new KeyClient to create a key, see the 'Creating a KeyClient' (https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample1_HelloWorld.md#creating-a-keyclientkeyvault) and [Creating a key](https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample1_HelloWorld.md#creating-a-key)\n+        // samples.\n+\n+        // In the sample below, you can set blobStorageUrl and sasToken based on environment variables, configuration\n+        // settings, or any way that works for your application.\n+        String blobStorageUrl = \"<blob-storage-url>\";\n+        String sasToken = \"<sas-token>\";\n+        SyncPoller<KeyVaultBackupOperation, String> backupPoller = backupClient.beginBackup(blobStorageUrl, sasToken);\n+\n+        backupPoller.waitForCompletion();\n+\n+        // Now let's restore the entire collection of keys from the backup. We will need the get the URI for the\n+        // location the backup, as well as Shared Access Signature for accessing it.\n+        String backupUri = backupPoller.getFinalResult();\n+        String[] segments = backupUri.split(\"/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b386b586af087ef78f2ce48fcca161207c305d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwMzIxMw==", "bodyText": "I think that's probably better for the user experience. I'll set up a separate PR with those changes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16964#discussion_r514903213", "createdAt": "2020-10-30T06:57:53Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/samples/java/com.azure.security.keyvault.administration/BackupAndRestoreHelloWorld.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.util.polling.SyncPoller;\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.security.keyvault.administration.models.KeyVaultBackupOperation;\n+import com.azure.security.keyvault.administration.models.KeyVaultRestoreOperation;\n+\n+/**\n+ * This sample demonstrates how to fully backup and restore a key vault synchronously.\n+ */\n+public class BackupAndRestoreHelloWorld {\n+    /**\n+     * Authenticates with the key vault and shows how to fully backup and restore a key vault synchronously.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     * @throws IllegalArgumentException when an invalid key vault URL is passed.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate an KeyVaultBackupClient that will be used to call the service. Notice that the client is using\n+        // default Azure credentials. To make default credentials work, ensure that environment variables\n+        // 'AZURE_CLIENT_ID', 'AZURE_CLIENT_KEY' and 'AZURE_TENANT_ID' are set with the service principal credentials.\n+\n+        // To get started, you'll need a URI to an Azure Key Vault. See the README (https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Administration/README.md)\n+        // for links and instructions.\n+        KeyVaultBackupClient backupClient = new KeyVaultBackupClientBuilder()\n+            .vaultUrl(\"https://{YOUR_VAULT_NAME}.vault.azure.net\")\n+            .credential(new DefaultAzureCredentialBuilder().build())\n+            .buildClient();\n+\n+        // Using the KeyVaultBackupClient, you can back up your entire collection of keys. The backing store for full\n+        // key backups is a blob storage container using Shared Access Signature authentication. For more details on\n+        // creating a SAS token using the `BlobServiceClient`, see the Azure Storage Blobs client README (https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/storage/Azure.Storage.Blobs/README.md)\n+        // and the authentication samples(https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/storage/Azure.Storage.Blobs/samples/Sample02_Auth.cs).\n+        // Alternatively, it is possible to generate a SAS token in Storage Explorer (https://docs.microsoft.com/azure/vs-azure-tools-storage-manage-with-storage-explorer?tabs=windows#generate-a-shared-access-signature-in-storage-explorer).\n+\n+        // To ensure you have some keys for backup, you may want to first create a key using the KeyClient. To create a\n+        // new KeyClient to create a key, see the 'Creating a KeyClient' (https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample1_HelloWorld.md#creating-a-keyclientkeyvault) and [Creating a key](https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample1_HelloWorld.md#creating-a-key)\n+        // samples.\n+\n+        // In the sample below, you can set blobStorageUrl and sasToken based on environment variables, configuration\n+        // settings, or any way that works for your application.\n+        String blobStorageUrl = \"<blob-storage-url>\";\n+        String sasToken = \"<sas-token>\";\n+        SyncPoller<KeyVaultBackupOperation, String> backupPoller = backupClient.beginBackup(blobStorageUrl, sasToken);\n+\n+        backupPoller.waitForCompletion();\n+\n+        // Now let's restore the entire collection of keys from the backup. We will need the get the URI for the\n+        // location the backup, as well as Shared Access Signature for accessing it.\n+        String backupUri = backupPoller.getFinalResult();\n+        String[] segments = backupUri.split(\"/\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1MTQwNA=="}, "originalCommit": {"oid": "c3b386b586af087ef78f2ce48fcca161207c305d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3Mzg2NQ==", "bodyText": "cc @sadasant and @chlowell for consistency.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16964#discussion_r515273865", "createdAt": "2020-10-30T17:43:43Z", "author": {"login": "christothes"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/samples/java/com.azure.security.keyvault.administration/BackupAndRestoreHelloWorld.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.util.polling.SyncPoller;\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.security.keyvault.administration.models.KeyVaultBackupOperation;\n+import com.azure.security.keyvault.administration.models.KeyVaultRestoreOperation;\n+\n+/**\n+ * This sample demonstrates how to fully backup and restore a key vault synchronously.\n+ */\n+public class BackupAndRestoreHelloWorld {\n+    /**\n+     * Authenticates with the key vault and shows how to fully backup and restore a key vault synchronously.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     * @throws IllegalArgumentException when an invalid key vault URL is passed.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate an KeyVaultBackupClient that will be used to call the service. Notice that the client is using\n+        // default Azure credentials. To make default credentials work, ensure that environment variables\n+        // 'AZURE_CLIENT_ID', 'AZURE_CLIENT_KEY' and 'AZURE_TENANT_ID' are set with the service principal credentials.\n+\n+        // To get started, you'll need a URI to an Azure Key Vault. See the README (https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Administration/README.md)\n+        // for links and instructions.\n+        KeyVaultBackupClient backupClient = new KeyVaultBackupClientBuilder()\n+            .vaultUrl(\"https://{YOUR_VAULT_NAME}.vault.azure.net\")\n+            .credential(new DefaultAzureCredentialBuilder().build())\n+            .buildClient();\n+\n+        // Using the KeyVaultBackupClient, you can back up your entire collection of keys. The backing store for full\n+        // key backups is a blob storage container using Shared Access Signature authentication. For more details on\n+        // creating a SAS token using the `BlobServiceClient`, see the Azure Storage Blobs client README (https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/storage/Azure.Storage.Blobs/README.md)\n+        // and the authentication samples(https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/storage/Azure.Storage.Blobs/samples/Sample02_Auth.cs).\n+        // Alternatively, it is possible to generate a SAS token in Storage Explorer (https://docs.microsoft.com/azure/vs-azure-tools-storage-manage-with-storage-explorer?tabs=windows#generate-a-shared-access-signature-in-storage-explorer).\n+\n+        // To ensure you have some keys for backup, you may want to first create a key using the KeyClient. To create a\n+        // new KeyClient to create a key, see the 'Creating a KeyClient' (https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample1_HelloWorld.md#creating-a-keyclientkeyvault) and [Creating a key](https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample1_HelloWorld.md#creating-a-key)\n+        // samples.\n+\n+        // In the sample below, you can set blobStorageUrl and sasToken based on environment variables, configuration\n+        // settings, or any way that works for your application.\n+        String blobStorageUrl = \"<blob-storage-url>\";\n+        String sasToken = \"<sas-token>\";\n+        SyncPoller<KeyVaultBackupOperation, String> backupPoller = backupClient.beginBackup(blobStorageUrl, sasToken);\n+\n+        backupPoller.waitForCompletion();\n+\n+        // Now let's restore the entire collection of keys from the backup. We will need the get the URI for the\n+        // location the backup, as well as Shared Access Signature for accessing it.\n+        String backupUri = backupPoller.getFinalResult();\n+        String[] segments = backupUri.split(\"/\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1MTQwNA=="}, "originalCommit": {"oid": "c3b386b586af087ef78f2ce48fcca161207c305d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMzczMQ==", "bodyText": "Created said PR: #17040.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16964#discussion_r515423731", "createdAt": "2020-10-30T23:34:31Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/samples/java/com.azure.security.keyvault.administration/BackupAndRestoreHelloWorld.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.util.polling.SyncPoller;\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.security.keyvault.administration.models.KeyVaultBackupOperation;\n+import com.azure.security.keyvault.administration.models.KeyVaultRestoreOperation;\n+\n+/**\n+ * This sample demonstrates how to fully backup and restore a key vault synchronously.\n+ */\n+public class BackupAndRestoreHelloWorld {\n+    /**\n+     * Authenticates with the key vault and shows how to fully backup and restore a key vault synchronously.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     * @throws IllegalArgumentException when an invalid key vault URL is passed.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate an KeyVaultBackupClient that will be used to call the service. Notice that the client is using\n+        // default Azure credentials. To make default credentials work, ensure that environment variables\n+        // 'AZURE_CLIENT_ID', 'AZURE_CLIENT_KEY' and 'AZURE_TENANT_ID' are set with the service principal credentials.\n+\n+        // To get started, you'll need a URI to an Azure Key Vault. See the README (https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Administration/README.md)\n+        // for links and instructions.\n+        KeyVaultBackupClient backupClient = new KeyVaultBackupClientBuilder()\n+            .vaultUrl(\"https://{YOUR_VAULT_NAME}.vault.azure.net\")\n+            .credential(new DefaultAzureCredentialBuilder().build())\n+            .buildClient();\n+\n+        // Using the KeyVaultBackupClient, you can back up your entire collection of keys. The backing store for full\n+        // key backups is a blob storage container using Shared Access Signature authentication. For more details on\n+        // creating a SAS token using the `BlobServiceClient`, see the Azure Storage Blobs client README (https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/storage/Azure.Storage.Blobs/README.md)\n+        // and the authentication samples(https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/storage/Azure.Storage.Blobs/samples/Sample02_Auth.cs).\n+        // Alternatively, it is possible to generate a SAS token in Storage Explorer (https://docs.microsoft.com/azure/vs-azure-tools-storage-manage-with-storage-explorer?tabs=windows#generate-a-shared-access-signature-in-storage-explorer).\n+\n+        // To ensure you have some keys for backup, you may want to first create a key using the KeyClient. To create a\n+        // new KeyClient to create a key, see the 'Creating a KeyClient' (https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample1_HelloWorld.md#creating-a-keyclientkeyvault) and [Creating a key](https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample1_HelloWorld.md#creating-a-key)\n+        // samples.\n+\n+        // In the sample below, you can set blobStorageUrl and sasToken based on environment variables, configuration\n+        // settings, or any way that works for your application.\n+        String blobStorageUrl = \"<blob-storage-url>\";\n+        String sasToken = \"<sas-token>\";\n+        SyncPoller<KeyVaultBackupOperation, String> backupPoller = backupClient.beginBackup(blobStorageUrl, sasToken);\n+\n+        backupPoller.waitForCompletion();\n+\n+        // Now let's restore the entire collection of keys from the backup. We will need the get the URI for the\n+        // location the backup, as well as Shared Access Signature for accessing it.\n+        String backupUri = backupPoller.getFinalResult();\n+        String[] segments = backupUri.split(\"/\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1MTQwNA=="}, "originalCommit": {"oid": "c3b386b586af087ef78f2ce48fcca161207c305d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzOTI0Mw==", "bodyText": "Merged.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16964#discussion_r516239243", "createdAt": "2020-11-02T20:36:07Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/samples/java/com.azure.security.keyvault.administration/BackupAndRestoreHelloWorld.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.util.polling.SyncPoller;\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.security.keyvault.administration.models.KeyVaultBackupOperation;\n+import com.azure.security.keyvault.administration.models.KeyVaultRestoreOperation;\n+\n+/**\n+ * This sample demonstrates how to fully backup and restore a key vault synchronously.\n+ */\n+public class BackupAndRestoreHelloWorld {\n+    /**\n+     * Authenticates with the key vault and shows how to fully backup and restore a key vault synchronously.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     * @throws IllegalArgumentException when an invalid key vault URL is passed.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate an KeyVaultBackupClient that will be used to call the service. Notice that the client is using\n+        // default Azure credentials. To make default credentials work, ensure that environment variables\n+        // 'AZURE_CLIENT_ID', 'AZURE_CLIENT_KEY' and 'AZURE_TENANT_ID' are set with the service principal credentials.\n+\n+        // To get started, you'll need a URI to an Azure Key Vault. See the README (https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Administration/README.md)\n+        // for links and instructions.\n+        KeyVaultBackupClient backupClient = new KeyVaultBackupClientBuilder()\n+            .vaultUrl(\"https://{YOUR_VAULT_NAME}.vault.azure.net\")\n+            .credential(new DefaultAzureCredentialBuilder().build())\n+            .buildClient();\n+\n+        // Using the KeyVaultBackupClient, you can back up your entire collection of keys. The backing store for full\n+        // key backups is a blob storage container using Shared Access Signature authentication. For more details on\n+        // creating a SAS token using the `BlobServiceClient`, see the Azure Storage Blobs client README (https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/storage/Azure.Storage.Blobs/README.md)\n+        // and the authentication samples(https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/storage/Azure.Storage.Blobs/samples/Sample02_Auth.cs).\n+        // Alternatively, it is possible to generate a SAS token in Storage Explorer (https://docs.microsoft.com/azure/vs-azure-tools-storage-manage-with-storage-explorer?tabs=windows#generate-a-shared-access-signature-in-storage-explorer).\n+\n+        // To ensure you have some keys for backup, you may want to first create a key using the KeyClient. To create a\n+        // new KeyClient to create a key, see the 'Creating a KeyClient' (https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample1_HelloWorld.md#creating-a-keyclientkeyvault) and [Creating a key](https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample1_HelloWorld.md#creating-a-key)\n+        // samples.\n+\n+        // In the sample below, you can set blobStorageUrl and sasToken based on environment variables, configuration\n+        // settings, or any way that works for your application.\n+        String blobStorageUrl = \"<blob-storage-url>\";\n+        String sasToken = \"<sas-token>\";\n+        SyncPoller<KeyVaultBackupOperation, String> backupPoller = backupClient.beginBackup(blobStorageUrl, sasToken);\n+\n+        backupPoller.waitForCompletion();\n+\n+        // Now let's restore the entire collection of keys from the backup. We will need the get the URI for the\n+        // location the backup, as well as Shared Access Signature for accessing it.\n+        String backupUri = backupPoller.getFinalResult();\n+        String[] segments = backupUri.split(\"/\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1MTQwNA=="}, "originalCommit": {"oid": "c3b386b586af087ef78f2ce48fcca161207c305d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDM3NjEyOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-administration/src/samples/java/com.azure.security.keyvault.administration/CreateRoleAssignmentsForDifferentScopes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjowOTo1MFrOHqwfJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjowOTo1MFrOHqwfJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5NjY0Ng==", "bodyText": "listRoleDefinitions. They can also get this with the azure CLI, which you've used before:\naz keyvault role definition list --hsm-name <name>", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16964#discussion_r514596646", "createdAt": "2020-10-29T22:09:50Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/samples/java/com.azure.security.keyvault.administration/CreateRoleAssignmentsForDifferentScopes.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.security.keyvault.administration.models.KeyVaultRoleAssignment;\n+import com.azure.security.keyvault.administration.models.KeyVaultRoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.models.KeyVaultRoleAssignmentScope;\n+\n+/**\n+ * This sample demonstrates how to create role assignments in the key vault for different scopes.\n+ */\n+public class CreateRoleAssignmentsForDifferentScopes {\n+    /**\n+     * Authenticates with the key vault and shows how to create role assignments in the key vault for different scopes.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     * @throws IllegalArgumentException when an invalid key vault URL is passed.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate an KeyVaultAccessControlClient that will be used to call the service. Notice that the client is\n+        // using default Azure credentials. To make default credentials work, ensure that environment variables\n+        // 'AZURE_CLIENT_ID', 'AZURE_CLIENT_KEY' and 'AZURE_TENANT_ID' are set with the service principal credentials.\n+        KeyVaultAccessControlClient accessControlClient = new KeyVaultAccessControlClientBuilder()\n+            .vaultUrl(\"https://{YOUR_VAULT_NAME}.vault.azure.net\")\n+            .credential(new DefaultAzureCredentialBuilder().build())\n+            .buildClient();\n+\n+        // By default role assignments apply to the global scope. It is also possible to be more specific by applying an\n+        // assignment to the all keys scope or a specific KeyVaultKey.\n+\n+        // Let's assign a role to a service principal so that it applies to all keys. To do this we'll need a service\n+        // principal object ID and a role definition ID. A role definition ID can be obtained from the 'id' property of\n+        // one of the role definitions returned from listRoleAssignments().", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b386b586af087ef78f2ce48fcca161207c305d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDM3ODg0OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-administration/src/samples/java/com.azure.security.keyvault.administration/CreateRoleAssignmentsForDifferentScopes.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjoxMDo1M1rOHqwgyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMTo0NjozNVrOHrkDHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5NzA2Ng==", "bodyText": "No async equivalent? Probably fine, but just calling it out since the other examples had an async version. Seems to be the case below as well. If you feel it has diminished returns at this point, that's understandable. A couple good ones should show the idea.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16964#discussion_r514597066", "createdAt": "2020-10-29T22:10:53Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/samples/java/com.azure.security.keyvault.administration/CreateRoleAssignmentsForDifferentScopes.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.security.keyvault.administration.models.KeyVaultRoleAssignment;\n+import com.azure.security.keyvault.administration.models.KeyVaultRoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.models.KeyVaultRoleAssignmentScope;\n+\n+/**\n+ * This sample demonstrates how to create role assignments in the key vault for different scopes.\n+ */\n+public class CreateRoleAssignmentsForDifferentScopes {\n+    /**\n+     * Authenticates with the key vault and shows how to create role assignments in the key vault for different scopes.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     * @throws IllegalArgumentException when an invalid key vault URL is passed.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate an KeyVaultAccessControlClient that will be used to call the service. Notice that the client is\n+        // using default Azure credentials. To make default credentials work, ensure that environment variables\n+        // 'AZURE_CLIENT_ID', 'AZURE_CLIENT_KEY' and 'AZURE_TENANT_ID' are set with the service principal credentials.\n+        KeyVaultAccessControlClient accessControlClient = new KeyVaultAccessControlClientBuilder()\n+            .vaultUrl(\"https://{YOUR_VAULT_NAME}.vault.azure.net\")\n+            .credential(new DefaultAzureCredentialBuilder().build())\n+            .buildClient();\n+\n+        // By default role assignments apply to the global scope. It is also possible to be more specific by applying an\n+        // assignment to the all keys scope or a specific KeyVaultKey.\n+\n+        // Let's assign a role to a service principal so that it applies to all keys. To do this we'll need a service\n+        // principal object ID and a role definition ID. A role definition ID can be obtained from the 'id' property of\n+        // one of the role definitions returned from listRoleAssignments().\n+        String roleDefinitionId = \"<role-definition-id>\";\n+        String servicePrincipalId = \"<service-principal-id>\";\n+\n+        KeyVaultRoleAssignmentProperties roleAssignmentProperties =\n+            new KeyVaultRoleAssignmentProperties(roleDefinitionId, servicePrincipalId);\n+\n+        KeyVaultRoleAssignment roleAssignmentForAllKeys =\n+            accessControlClient.createRoleAssignment(KeyVaultRoleAssignmentScope.GLOBAL, roleAssignmentProperties);\n+\n+        System.out.printf(\"Created role assignment with name: %s %n\", roleAssignmentForAllKeys.getName());\n+\n+        // Now let's assign a role to a service principal so that it applies to a specific KeyVaultKey. To do this we'll\n+        // use the role definition ID and a service principal object ID from the previous sample. We'll also need the\n+        // ID of an existing KeyVaultKey, which can be obtained from the service using a KeyClient.\n+        String keyId = \"<key-id>\";\n+\n+        KeyVaultRoleAssignment roleAssignmentForSingleKey =\n+            accessControlClient.createRoleAssignment(KeyVaultRoleAssignmentScope.fromString(keyId),\n+                roleAssignmentProperties);\n+\n+        System.out.printf(\"Created role assignment with name: %s %n\", roleAssignmentForSingleKey.getName());\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b386b586af087ef78f2ce48fcca161207c305d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwMzUwOA==", "bodyText": "It doesn't take much effort to add an async sample, I guess I thought it wasn't necessary since we have the hello worlds. I can add that it before we merge :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16964#discussion_r514903508", "createdAt": "2020-10-30T06:58:59Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/samples/java/com.azure.security.keyvault.administration/CreateRoleAssignmentsForDifferentScopes.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.security.keyvault.administration.models.KeyVaultRoleAssignment;\n+import com.azure.security.keyvault.administration.models.KeyVaultRoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.models.KeyVaultRoleAssignmentScope;\n+\n+/**\n+ * This sample demonstrates how to create role assignments in the key vault for different scopes.\n+ */\n+public class CreateRoleAssignmentsForDifferentScopes {\n+    /**\n+     * Authenticates with the key vault and shows how to create role assignments in the key vault for different scopes.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     * @throws IllegalArgumentException when an invalid key vault URL is passed.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate an KeyVaultAccessControlClient that will be used to call the service. Notice that the client is\n+        // using default Azure credentials. To make default credentials work, ensure that environment variables\n+        // 'AZURE_CLIENT_ID', 'AZURE_CLIENT_KEY' and 'AZURE_TENANT_ID' are set with the service principal credentials.\n+        KeyVaultAccessControlClient accessControlClient = new KeyVaultAccessControlClientBuilder()\n+            .vaultUrl(\"https://{YOUR_VAULT_NAME}.vault.azure.net\")\n+            .credential(new DefaultAzureCredentialBuilder().build())\n+            .buildClient();\n+\n+        // By default role assignments apply to the global scope. It is also possible to be more specific by applying an\n+        // assignment to the all keys scope or a specific KeyVaultKey.\n+\n+        // Let's assign a role to a service principal so that it applies to all keys. To do this we'll need a service\n+        // principal object ID and a role definition ID. A role definition ID can be obtained from the 'id' property of\n+        // one of the role definitions returned from listRoleAssignments().\n+        String roleDefinitionId = \"<role-definition-id>\";\n+        String servicePrincipalId = \"<service-principal-id>\";\n+\n+        KeyVaultRoleAssignmentProperties roleAssignmentProperties =\n+            new KeyVaultRoleAssignmentProperties(roleDefinitionId, servicePrincipalId);\n+\n+        KeyVaultRoleAssignment roleAssignmentForAllKeys =\n+            accessControlClient.createRoleAssignment(KeyVaultRoleAssignmentScope.GLOBAL, roleAssignmentProperties);\n+\n+        System.out.printf(\"Created role assignment with name: %s %n\", roleAssignmentForAllKeys.getName());\n+\n+        // Now let's assign a role to a service principal so that it applies to a specific KeyVaultKey. To do this we'll\n+        // use the role definition ID and a service principal object ID from the previous sample. We'll also need the\n+        // ID of an existing KeyVaultKey, which can be obtained from the service using a KeyClient.\n+        String keyId = \"<key-id>\";\n+\n+        KeyVaultRoleAssignment roleAssignmentForSingleKey =\n+            accessControlClient.createRoleAssignment(KeyVaultRoleAssignmentScope.fromString(keyId),\n+                roleAssignmentProperties);\n+\n+        System.out.printf(\"Created role assignment with name: %s %n\", roleAssignmentForSingleKey.getName());\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5NzA2Ng=="}, "originalCommit": {"oid": "c3b386b586af087ef78f2ce48fcca161207c305d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI2NDAxMQ==", "bodyText": "It's fine if you don't. I was just pointing it out in case it was a mistake. I agree that after a couple of samples, adding more for every sample is just dubious. Maybe you could \"split the diff\" and add a comment about seeing the \"hello world\" sample for how to do async with our SDKs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16964#discussion_r515264011", "createdAt": "2020-10-30T17:31:37Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/samples/java/com.azure.security.keyvault.administration/CreateRoleAssignmentsForDifferentScopes.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.security.keyvault.administration.models.KeyVaultRoleAssignment;\n+import com.azure.security.keyvault.administration.models.KeyVaultRoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.models.KeyVaultRoleAssignmentScope;\n+\n+/**\n+ * This sample demonstrates how to create role assignments in the key vault for different scopes.\n+ */\n+public class CreateRoleAssignmentsForDifferentScopes {\n+    /**\n+     * Authenticates with the key vault and shows how to create role assignments in the key vault for different scopes.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     * @throws IllegalArgumentException when an invalid key vault URL is passed.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate an KeyVaultAccessControlClient that will be used to call the service. Notice that the client is\n+        // using default Azure credentials. To make default credentials work, ensure that environment variables\n+        // 'AZURE_CLIENT_ID', 'AZURE_CLIENT_KEY' and 'AZURE_TENANT_ID' are set with the service principal credentials.\n+        KeyVaultAccessControlClient accessControlClient = new KeyVaultAccessControlClientBuilder()\n+            .vaultUrl(\"https://{YOUR_VAULT_NAME}.vault.azure.net\")\n+            .credential(new DefaultAzureCredentialBuilder().build())\n+            .buildClient();\n+\n+        // By default role assignments apply to the global scope. It is also possible to be more specific by applying an\n+        // assignment to the all keys scope or a specific KeyVaultKey.\n+\n+        // Let's assign a role to a service principal so that it applies to all keys. To do this we'll need a service\n+        // principal object ID and a role definition ID. A role definition ID can be obtained from the 'id' property of\n+        // one of the role definitions returned from listRoleAssignments().\n+        String roleDefinitionId = \"<role-definition-id>\";\n+        String servicePrincipalId = \"<service-principal-id>\";\n+\n+        KeyVaultRoleAssignmentProperties roleAssignmentProperties =\n+            new KeyVaultRoleAssignmentProperties(roleDefinitionId, servicePrincipalId);\n+\n+        KeyVaultRoleAssignment roleAssignmentForAllKeys =\n+            accessControlClient.createRoleAssignment(KeyVaultRoleAssignmentScope.GLOBAL, roleAssignmentProperties);\n+\n+        System.out.printf(\"Created role assignment with name: %s %n\", roleAssignmentForAllKeys.getName());\n+\n+        // Now let's assign a role to a service principal so that it applies to a specific KeyVaultKey. To do this we'll\n+        // use the role definition ID and a service principal object ID from the previous sample. We'll also need the\n+        // ID of an existing KeyVaultKey, which can be obtained from the service using a KeyClient.\n+        String keyId = \"<key-id>\";\n+\n+        KeyVaultRoleAssignment roleAssignmentForSingleKey =\n+            accessControlClient.createRoleAssignment(KeyVaultRoleAssignmentScope.fromString(keyId),\n+                roleAssignmentProperties);\n+\n+        System.out.printf(\"Created role assignment with name: %s %n\", roleAssignmentForSingleKey.getName());\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5NzA2Ng=="}, "originalCommit": {"oid": "c3b386b586af087ef78f2ce48fcca161207c305d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0MTQzOA==", "bodyText": "Ended expanding the samples for the scenario where we resume backup and restore operations and also added an async counterpart.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16964#discussion_r515441438", "createdAt": "2020-10-31T01:46:35Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/samples/java/com.azure.security.keyvault.administration/CreateRoleAssignmentsForDifferentScopes.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.security.keyvault.administration.models.KeyVaultRoleAssignment;\n+import com.azure.security.keyvault.administration.models.KeyVaultRoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.models.KeyVaultRoleAssignmentScope;\n+\n+/**\n+ * This sample demonstrates how to create role assignments in the key vault for different scopes.\n+ */\n+public class CreateRoleAssignmentsForDifferentScopes {\n+    /**\n+     * Authenticates with the key vault and shows how to create role assignments in the key vault for different scopes.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     * @throws IllegalArgumentException when an invalid key vault URL is passed.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate an KeyVaultAccessControlClient that will be used to call the service. Notice that the client is\n+        // using default Azure credentials. To make default credentials work, ensure that environment variables\n+        // 'AZURE_CLIENT_ID', 'AZURE_CLIENT_KEY' and 'AZURE_TENANT_ID' are set with the service principal credentials.\n+        KeyVaultAccessControlClient accessControlClient = new KeyVaultAccessControlClientBuilder()\n+            .vaultUrl(\"https://{YOUR_VAULT_NAME}.vault.azure.net\")\n+            .credential(new DefaultAzureCredentialBuilder().build())\n+            .buildClient();\n+\n+        // By default role assignments apply to the global scope. It is also possible to be more specific by applying an\n+        // assignment to the all keys scope or a specific KeyVaultKey.\n+\n+        // Let's assign a role to a service principal so that it applies to all keys. To do this we'll need a service\n+        // principal object ID and a role definition ID. A role definition ID can be obtained from the 'id' property of\n+        // one of the role definitions returned from listRoleAssignments().\n+        String roleDefinitionId = \"<role-definition-id>\";\n+        String servicePrincipalId = \"<service-principal-id>\";\n+\n+        KeyVaultRoleAssignmentProperties roleAssignmentProperties =\n+            new KeyVaultRoleAssignmentProperties(roleDefinitionId, servicePrincipalId);\n+\n+        KeyVaultRoleAssignment roleAssignmentForAllKeys =\n+            accessControlClient.createRoleAssignment(KeyVaultRoleAssignmentScope.GLOBAL, roleAssignmentProperties);\n+\n+        System.out.printf(\"Created role assignment with name: %s %n\", roleAssignmentForAllKeys.getName());\n+\n+        // Now let's assign a role to a service principal so that it applies to a specific KeyVaultKey. To do this we'll\n+        // use the role definition ID and a service principal object ID from the previous sample. We'll also need the\n+        // ID of an existing KeyVaultKey, which can be obtained from the service using a KeyClient.\n+        String keyId = \"<key-id>\";\n+\n+        KeyVaultRoleAssignment roleAssignmentForSingleKey =\n+            accessControlClient.createRoleAssignment(KeyVaultRoleAssignmentScope.fromString(keyId),\n+                roleAssignmentProperties);\n+\n+        System.out.printf(\"Created role assignment with name: %s %n\", roleAssignmentForSingleKey.getName());\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5NzA2Ng=="}, "originalCommit": {"oid": "c3b386b586af087ef78f2ce48fcca161207c305d"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDM4MTc0OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-administration/src/samples/java/com.azure.security.keyvault.administration/SelectiveRestore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjoxMjowMlrOHqwigA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNjo1OToxMFrOHrDOGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5NzUwNA==", "bodyText": "Shouldn't you wait for it, for consistency with other examples if nothing else?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16964#discussion_r514597504", "createdAt": "2020-10-29T22:12:02Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/samples/java/com.azure.security.keyvault.administration/SelectiveRestore.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.util.polling.SyncPoller;\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.security.keyvault.administration.models.KeyVaultRestoreOperation;\n+\n+/**\n+ * This sample demonstrates how to selectively restore a key from key vault backup.\n+ */\n+public class SelectiveRestore {\n+    /**\n+     * Authenticates with the key vault and shows how to selectively restore a key from key vault backup.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     * @throws IllegalArgumentException when an invalid key vault URL is passed.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate an KeyVaultBackupClient that will be used to call the service. Notice that the client is using\n+        // default Azure credentials. To make default credentials work, ensure that environment variables\n+        // 'AZURE_CLIENT_ID', 'AZURE_CLIENT_KEY' and 'AZURE_TENANT_ID' are set with the service principal credentials.\n+\n+        // To get started, you'll need a URI to an Azure Key Vault. See the README (https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Administration/README.md)\n+        // for links and instructions.\n+        KeyVaultBackupClient backupClient = new KeyVaultBackupClientBuilder()\n+            .vaultUrl(\"https://{YOUR_VAULT_NAME}.vault.azure.net\")\n+            .credential(new DefaultAzureCredentialBuilder().build())\n+            .buildClient();\n+\n+        // Using the KeyVaultBackupClient, you can restore a single key from backup by key name. The data source for a\n+        // selective key restore is a storage blob accessed using Shared Access Signature authentication.\n+        String keyName = \"<key-name>\";\n+        String blobStorageUrl = \"<blob-storage-url>\";\n+        String sasToken = \"<sas-token>\";\n+        String folderName = \"<folder-name>\";\n+\n+        SyncPoller<KeyVaultRestoreOperation, Void> restorePoller =\n+            backupClient.beginSelectiveRestore(keyName, blobStorageUrl, sasToken, folderName);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b386b586af087ef78f2ce48fcca161207c305d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwMzU3Ng==", "bodyText": "You are right, I must have missed it :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16964#discussion_r514903576", "createdAt": "2020-10-30T06:59:10Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/samples/java/com.azure.security.keyvault.administration/SelectiveRestore.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.util.polling.SyncPoller;\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.security.keyvault.administration.models.KeyVaultRestoreOperation;\n+\n+/**\n+ * This sample demonstrates how to selectively restore a key from key vault backup.\n+ */\n+public class SelectiveRestore {\n+    /**\n+     * Authenticates with the key vault and shows how to selectively restore a key from key vault backup.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     * @throws IllegalArgumentException when an invalid key vault URL is passed.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate an KeyVaultBackupClient that will be used to call the service. Notice that the client is using\n+        // default Azure credentials. To make default credentials work, ensure that environment variables\n+        // 'AZURE_CLIENT_ID', 'AZURE_CLIENT_KEY' and 'AZURE_TENANT_ID' are set with the service principal credentials.\n+\n+        // To get started, you'll need a URI to an Azure Key Vault. See the README (https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Administration/README.md)\n+        // for links and instructions.\n+        KeyVaultBackupClient backupClient = new KeyVaultBackupClientBuilder()\n+            .vaultUrl(\"https://{YOUR_VAULT_NAME}.vault.azure.net\")\n+            .credential(new DefaultAzureCredentialBuilder().build())\n+            .buildClient();\n+\n+        // Using the KeyVaultBackupClient, you can restore a single key from backup by key name. The data source for a\n+        // selective key restore is a storage blob accessed using Shared Access Signature authentication.\n+        String keyName = \"<key-name>\";\n+        String blobStorageUrl = \"<blob-storage-url>\";\n+        String sasToken = \"<sas-token>\";\n+        String folderName = \"<folder-name>\";\n+\n+        SyncPoller<KeyVaultRestoreOperation, Void> restorePoller =\n+            backupClient.beginSelectiveRestore(keyName, blobStorageUrl, sasToken, folderName);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5NzUwNA=="}, "originalCommit": {"oid": "c3b386b586af087ef78f2ce48fcca161207c305d"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3782, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}