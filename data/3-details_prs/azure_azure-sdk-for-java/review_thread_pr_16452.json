{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0ODUzMDUx", "number": 16452, "reviewThreads": {"totalCount": 89, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMTowNDo0OFrOEvjwVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMjozNjo1NVrOEwDHAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzA0MzQwOnYy", "diffSide": "RIGHT", "path": "eng/versioning/external_dependencies.txt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMTowNDo0OFrOHkm5Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjo0OTozOVrOHkon7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0Nzk3NA==", "bodyText": "It appears as if this dependency is being used in a shaded fashion, alongside other libraries. I would be happier if we didn't need these dependencies at all though. From a quick look through the code it doesn't appear to be baked in deeply, mainly showing up it seems in the LegacyRestClient.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508147974", "createdAt": "2020-10-20T01:04:48Z", "author": {"login": "JonathanGiles"}, "path": "eng/versioning/external_dependencies.txt", "diffHunk": "@@ -63,6 +63,7 @@ org.apache.avro:avro-maven-plugin;1.9.2\n org.apache.commons:commons-compress;1.20\n org.apache.commons:commons-lang3;3.10\n org.apache.httpcomponents:httpclient;4.5.12\n+org.apache.httpcomponents.client5:httpclient5;5.0.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22916a83b3adf58ca85e43fac5dabb01b489e1d2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE2Mzc2Ng==", "bodyText": "The dependencies of the JCA provider are shaded to make sure the provider is self-contained and can be used in any Java application", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508163766", "createdAt": "2020-10-20T02:02:46Z", "author": {"login": "mnriem"}, "path": "eng/versioning/external_dependencies.txt", "diffHunk": "@@ -63,6 +63,7 @@ org.apache.avro:avro-maven-plugin;1.9.2\n org.apache.commons:commons-compress;1.20\n org.apache.commons:commons-lang3;3.10\n org.apache.httpcomponents:httpclient;4.5.12\n+org.apache.httpcomponents.client5:httpclient5;5.0.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0Nzk3NA=="}, "originalCommit": {"oid": "22916a83b3adf58ca85e43fac5dabb01b489e1d2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3NjM2NQ==", "bodyText": "Yep, understood. My comment was mainly focused on whether the httpclient is necessary in the first place? It doesn't appear to be from a cursory glance.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508176365", "createdAt": "2020-10-20T02:49:39Z", "author": {"login": "JonathanGiles"}, "path": "eng/versioning/external_dependencies.txt", "diffHunk": "@@ -63,6 +63,7 @@ org.apache.avro:avro-maven-plugin;1.9.2\n org.apache.commons:commons-compress;1.20\n org.apache.commons:commons-lang3;3.10\n org.apache.httpcomponents:httpclient;4.5.12\n+org.apache.httpcomponents.client5:httpclient5;5.0.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0Nzk3NA=="}, "originalCommit": {"oid": "22916a83b3adf58ca85e43fac5dabb01b489e1d2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzA0NTg3OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMTowNTo1NVrOHkm6WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzo0NjoxOVrOHmtGWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0ODMxMw==", "bodyText": "Does this link need to be set to go somewhere?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508148313", "createdAt": "2020-10-20T01:05:55Z", "author": {"login": "JonathanGiles"}, "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "diffHunk": "@@ -0,0 +1,127 @@\n+# JCA Provider for Azure Key Vault\n+\n+The JCA Provider for Azure Key Vault is a JCA provider for certificates in \n+Azure Key Vault. It is built on four principles:\n+ \n+1. Must be extremely thin to run within a JVM\n+1. Must not introduce any library version conflicts with Java app code dependencies\n+1. Must not introduce any class loader hierarchy conflicts with Java app code dependencies\n+1. Must be ready for \"never trust, always verify and credential-free\" Zero Trust environments.\n+\n+## Testing the version under development\n+\n+If you want to test the current version under development you will have to\n+build and install it into your local Maven repository. To do so use the \n+following command line:\n+\n+```\n+  mvn clean install -DskipTests=true\n+```\n+\n+## Server side SSL\n+\n+If you are looking to integrate the JCA provider to create a SSLServerSocket\n+see the example below.\n+\n+```java\n+    KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n+    Security.addProvider(provider);\n+\n+    KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+    KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+        System.getProperty(\"azure.keyvault.uri\"), \n+        System.getProperty(\"azure.tenant.id\"), \n+        System.getProperty(\"azure.client.id\"),\n+        System.getProperty(\"azure.client.secret\"));\n+    ks.load(parameter);\n+\n+    KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+    kmf.init(ks, \"\".toCharArray());\n+\n+    SSLContext context = SSLContext.getInstance(\"TLS\");\n+    context.init(kmf.getKeyManagers(), null, null);\n+\n+    SSLServerSocketFactory factory = (SSLServerSocketFactory) context.getServerSocketFactory();\n+    SSLServerSocket serverSocket = (SSLServerSocket) factory.createServerSocket(8765);\n+```\n+\n+Note if you want to use Azure managed identity, you should set the value\n+of `azure.keyvault.uri`, and the rest of the parameters would be `null`.\n+\n+## Client side SSL\n+\n+If you are looking to integrate the JCA provider for client side socket \n+connections, see the Apache HTTP client example below.\n+\n+```java\n+    KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n+    Security.addProvider(provider);\n+\n+    KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+    KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+            System.getProperty(\"azure.keyvault.uri\"), \n+            System.getProperty(\"azure.tenant.id\"), \n+            System.getProperty(\"azure.client.id\"),\n+            System.getProperty(\"azure.client.secret\"));\n+    ks.load(parameter);\n+\n+    SSLContext sslContext = SSLContexts\n+            .custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+    SSLConnectionSocketFactory sslSocketFactory = SSLConnectionSocketFactoryBuilder\n+            .create()\n+            .setSslContext(sslContext)\n+            .setHostnameVerifier((hostname, session) -> {\n+                return true;\n+            })\n+            .build();\n+\n+    PoolingHttpClientConnectionManager cm = PoolingHttpClientConnectionManagerBuilder\n+            .create()\n+            .setSSLSocketFactory(sslSocketFactory)\n+            .build();\n+\n+    String result = null;\n+\n+    try ( CloseableHttpClient client = HttpClients.custom().setConnectionManager(cm).build()) {\n+        HttpGet httpGet = new HttpGet(\"https://localhost:8766\");\n+        HttpClientResponseHandler<String> responseHandler = (ClassicHttpResponse response) -> {\n+            int status = response.getCode();\n+            String result1 = \"Not success\";\n+            if (status == 204) {\n+                result1 = \"Success\";\n+            }\n+            return result1;\n+        };\n+        result = client.execute(httpGet, responseHandler);\n+    } catch (IOException ioe) {\n+        ioe.printStackTrace();\n+    }\n+```\n+\n+Note if you want to use Azure managed identity, you should set the value\n+of `azure.keyvault.uri`, and the rest of the parameters would be `null`.\n+\n+## Spring Boot\n+\n+For Spring Boot applications see our [Spring Boot starter]<!--(../../spring/azure-spring-boot-starter-keyvault-certificates/README.md)-->.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22916a83b3adf58ca85e43fac5dabb01b489e1d2"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE2MzkwMQ==", "bodyText": "This will be fixed in a subsequent PR as it is referring to a location that is currently not published", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508163901", "createdAt": "2020-10-20T02:03:23Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "diffHunk": "@@ -0,0 +1,127 @@\n+# JCA Provider for Azure Key Vault\n+\n+The JCA Provider for Azure Key Vault is a JCA provider for certificates in \n+Azure Key Vault. It is built on four principles:\n+ \n+1. Must be extremely thin to run within a JVM\n+1. Must not introduce any library version conflicts with Java app code dependencies\n+1. Must not introduce any class loader hierarchy conflicts with Java app code dependencies\n+1. Must be ready for \"never trust, always verify and credential-free\" Zero Trust environments.\n+\n+## Testing the version under development\n+\n+If you want to test the current version under development you will have to\n+build and install it into your local Maven repository. To do so use the \n+following command line:\n+\n+```\n+  mvn clean install -DskipTests=true\n+```\n+\n+## Server side SSL\n+\n+If you are looking to integrate the JCA provider to create a SSLServerSocket\n+see the example below.\n+\n+```java\n+    KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n+    Security.addProvider(provider);\n+\n+    KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+    KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+        System.getProperty(\"azure.keyvault.uri\"), \n+        System.getProperty(\"azure.tenant.id\"), \n+        System.getProperty(\"azure.client.id\"),\n+        System.getProperty(\"azure.client.secret\"));\n+    ks.load(parameter);\n+\n+    KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+    kmf.init(ks, \"\".toCharArray());\n+\n+    SSLContext context = SSLContext.getInstance(\"TLS\");\n+    context.init(kmf.getKeyManagers(), null, null);\n+\n+    SSLServerSocketFactory factory = (SSLServerSocketFactory) context.getServerSocketFactory();\n+    SSLServerSocket serverSocket = (SSLServerSocket) factory.createServerSocket(8765);\n+```\n+\n+Note if you want to use Azure managed identity, you should set the value\n+of `azure.keyvault.uri`, and the rest of the parameters would be `null`.\n+\n+## Client side SSL\n+\n+If you are looking to integrate the JCA provider for client side socket \n+connections, see the Apache HTTP client example below.\n+\n+```java\n+    KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n+    Security.addProvider(provider);\n+\n+    KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+    KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+            System.getProperty(\"azure.keyvault.uri\"), \n+            System.getProperty(\"azure.tenant.id\"), \n+            System.getProperty(\"azure.client.id\"),\n+            System.getProperty(\"azure.client.secret\"));\n+    ks.load(parameter);\n+\n+    SSLContext sslContext = SSLContexts\n+            .custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+    SSLConnectionSocketFactory sslSocketFactory = SSLConnectionSocketFactoryBuilder\n+            .create()\n+            .setSslContext(sslContext)\n+            .setHostnameVerifier((hostname, session) -> {\n+                return true;\n+            })\n+            .build();\n+\n+    PoolingHttpClientConnectionManager cm = PoolingHttpClientConnectionManagerBuilder\n+            .create()\n+            .setSSLSocketFactory(sslSocketFactory)\n+            .build();\n+\n+    String result = null;\n+\n+    try ( CloseableHttpClient client = HttpClients.custom().setConnectionManager(cm).build()) {\n+        HttpGet httpGet = new HttpGet(\"https://localhost:8766\");\n+        HttpClientResponseHandler<String> responseHandler = (ClassicHttpResponse response) -> {\n+            int status = response.getCode();\n+            String result1 = \"Not success\";\n+            if (status == 204) {\n+                result1 = \"Success\";\n+            }\n+            return result1;\n+        };\n+        result = client.execute(httpGet, responseHandler);\n+    } catch (IOException ioe) {\n+        ioe.printStackTrace();\n+    }\n+```\n+\n+Note if you want to use Azure managed identity, you should set the value\n+of `azure.keyvault.uri`, and the rest of the parameters would be `null`.\n+\n+## Spring Boot\n+\n+For Spring Boot applications see our [Spring Boot starter]<!--(../../spring/azure-spring-boot-starter-keyvault-certificates/README.md)-->.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0ODMxMw=="}, "originalCommit": {"oid": "22916a83b3adf58ca85e43fac5dabb01b489e1d2"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0Njg0MQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510346841", "createdAt": "2020-10-22T17:46:19Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "diffHunk": "@@ -0,0 +1,127 @@\n+# JCA Provider for Azure Key Vault\n+\n+The JCA Provider for Azure Key Vault is a JCA provider for certificates in \n+Azure Key Vault. It is built on four principles:\n+ \n+1. Must be extremely thin to run within a JVM\n+1. Must not introduce any library version conflicts with Java app code dependencies\n+1. Must not introduce any class loader hierarchy conflicts with Java app code dependencies\n+1. Must be ready for \"never trust, always verify and credential-free\" Zero Trust environments.\n+\n+## Testing the version under development\n+\n+If you want to test the current version under development you will have to\n+build and install it into your local Maven repository. To do so use the \n+following command line:\n+\n+```\n+  mvn clean install -DskipTests=true\n+```\n+\n+## Server side SSL\n+\n+If you are looking to integrate the JCA provider to create a SSLServerSocket\n+see the example below.\n+\n+```java\n+    KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n+    Security.addProvider(provider);\n+\n+    KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+    KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+        System.getProperty(\"azure.keyvault.uri\"), \n+        System.getProperty(\"azure.tenant.id\"), \n+        System.getProperty(\"azure.client.id\"),\n+        System.getProperty(\"azure.client.secret\"));\n+    ks.load(parameter);\n+\n+    KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+    kmf.init(ks, \"\".toCharArray());\n+\n+    SSLContext context = SSLContext.getInstance(\"TLS\");\n+    context.init(kmf.getKeyManagers(), null, null);\n+\n+    SSLServerSocketFactory factory = (SSLServerSocketFactory) context.getServerSocketFactory();\n+    SSLServerSocket serverSocket = (SSLServerSocket) factory.createServerSocket(8765);\n+```\n+\n+Note if you want to use Azure managed identity, you should set the value\n+of `azure.keyvault.uri`, and the rest of the parameters would be `null`.\n+\n+## Client side SSL\n+\n+If you are looking to integrate the JCA provider for client side socket \n+connections, see the Apache HTTP client example below.\n+\n+```java\n+    KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n+    Security.addProvider(provider);\n+\n+    KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+    KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+            System.getProperty(\"azure.keyvault.uri\"), \n+            System.getProperty(\"azure.tenant.id\"), \n+            System.getProperty(\"azure.client.id\"),\n+            System.getProperty(\"azure.client.secret\"));\n+    ks.load(parameter);\n+\n+    SSLContext sslContext = SSLContexts\n+            .custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+    SSLConnectionSocketFactory sslSocketFactory = SSLConnectionSocketFactoryBuilder\n+            .create()\n+            .setSslContext(sslContext)\n+            .setHostnameVerifier((hostname, session) -> {\n+                return true;\n+            })\n+            .build();\n+\n+    PoolingHttpClientConnectionManager cm = PoolingHttpClientConnectionManagerBuilder\n+            .create()\n+            .setSSLSocketFactory(sslSocketFactory)\n+            .build();\n+\n+    String result = null;\n+\n+    try ( CloseableHttpClient client = HttpClients.custom().setConnectionManager(cm).build()) {\n+        HttpGet httpGet = new HttpGet(\"https://localhost:8766\");\n+        HttpClientResponseHandler<String> responseHandler = (ClassicHttpResponse response) -> {\n+            int status = response.getCode();\n+            String result1 = \"Not success\";\n+            if (status == 204) {\n+                result1 = \"Success\";\n+            }\n+            return result1;\n+        };\n+        result = client.execute(httpGet, responseHandler);\n+    } catch (IOException ioe) {\n+        ioe.printStackTrace();\n+    }\n+```\n+\n+Note if you want to use Azure managed identity, you should set the value\n+of `azure.keyvault.uri`, and the rest of the parameters would be `null`.\n+\n+## Spring Boot\n+\n+For Spring Boot applications see our [Spring Boot starter]<!--(../../spring/azure-spring-boot-starter-keyvault-certificates/README.md)-->.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0ODMxMw=="}, "originalCommit": {"oid": "22916a83b3adf58ca85e43fac5dabb01b489e1d2"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzA1MTQxOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMTowOTowMFrOHkm9lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjowNDowN1rOHkn34w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTE0MA==", "bodyText": "I'm not sure what this is - can you please clarify?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508149140", "createdAt": "2020-10-20T01:09:00Z", "author": {"login": "JonathanGiles"}, "path": "sdk/keyvault/azure-security-keyvault-jca/pom.xml", "diffHunk": "@@ -0,0 +1,232 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>azure-client-sdk-parent</artifactId>\n+        <groupId>com.azure</groupId>\n+        <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+        <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+    </parent>\n+\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-security-keyvault-jca</artifactId>\n+    <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-security-keyvault-jca;current} -->\n+    <name>JCA Provider for Azure Key Vault</name>\n+    <description>The Java Crypto Architecture (JCA) Provider for Azure KeyVault</description>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.8.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-compiler-plugin;external_dependency} -->\n+                <configuration>\n+                    <source>1.8</source>\n+                    <target>1.8</target>\n+                    <encoding>${project.build.sourceEncoding}</encoding>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-resources-plugin</artifactId>\n+                <version>2.4.3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-resources-plugin;external_dependency} -->\n+                <configuration>\n+                    <encoding>${project.build.sourceEncoding}</encoding>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-shade-plugin</artifactId>\n+                <version>3.2.4</version> <!-- {x-version-update;org.apache.maven.plugins:maven-shade-plugin;external_dependency} -->\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>shade</goal>\n+                        </goals>\n+                        <configuration>\n+                            <relocations>\n+                                <relocation>\n+                                    <pattern>com.fasterxml.jackson</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.com.fasterxml.jackson</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>org.apache.commons</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.org.apache.commons</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>org.apache.hc</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.org.apache.hc</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>mozilla</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.mozilla</shadedPattern>\n+                                </relocation>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22916a83b3adf58ca85e43fac5dabb01b489e1d2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE2NDA2Nw==", "bodyText": "This package is part of one of the dependencies of the JCA provider and is shaded and relocated", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508164067", "createdAt": "2020-10-20T02:04:07Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/pom.xml", "diffHunk": "@@ -0,0 +1,232 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>azure-client-sdk-parent</artifactId>\n+        <groupId>com.azure</groupId>\n+        <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+        <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+    </parent>\n+\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-security-keyvault-jca</artifactId>\n+    <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-security-keyvault-jca;current} -->\n+    <name>JCA Provider for Azure Key Vault</name>\n+    <description>The Java Crypto Architecture (JCA) Provider for Azure KeyVault</description>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.8.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-compiler-plugin;external_dependency} -->\n+                <configuration>\n+                    <source>1.8</source>\n+                    <target>1.8</target>\n+                    <encoding>${project.build.sourceEncoding}</encoding>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-resources-plugin</artifactId>\n+                <version>2.4.3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-resources-plugin;external_dependency} -->\n+                <configuration>\n+                    <encoding>${project.build.sourceEncoding}</encoding>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-shade-plugin</artifactId>\n+                <version>3.2.4</version> <!-- {x-version-update;org.apache.maven.plugins:maven-shade-plugin;external_dependency} -->\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>shade</goal>\n+                        </goals>\n+                        <configuration>\n+                            <relocations>\n+                                <relocation>\n+                                    <pattern>com.fasterxml.jackson</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.com.fasterxml.jackson</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>org.apache.commons</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.org.apache.commons</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>org.apache.hc</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.org.apache.hc</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>mozilla</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.mozilla</shadedPattern>\n+                                </relocation>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTE0MA=="}, "originalCommit": {"oid": "22916a83b3adf58ca85e43fac5dabb01b489e1d2"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzA1MzAwOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMTowOTo1MlrOHkm-gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMTowOTo1MlrOHkm-gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTM3Nw==", "bodyText": "Not a huge fan of allowing this dependency - would love to see this removed if at all possible.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508149377", "createdAt": "2020-10-20T01:09:52Z", "author": {"login": "JonathanGiles"}, "path": "sdk/keyvault/azure-security-keyvault-jca/pom.xml", "diffHunk": "@@ -0,0 +1,232 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>azure-client-sdk-parent</artifactId>\n+        <groupId>com.azure</groupId>\n+        <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+        <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+    </parent>\n+\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-security-keyvault-jca</artifactId>\n+    <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-security-keyvault-jca;current} -->\n+    <name>JCA Provider for Azure Key Vault</name>\n+    <description>The Java Crypto Architecture (JCA) Provider for Azure KeyVault</description>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.8.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-compiler-plugin;external_dependency} -->\n+                <configuration>\n+                    <source>1.8</source>\n+                    <target>1.8</target>\n+                    <encoding>${project.build.sourceEncoding}</encoding>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-resources-plugin</artifactId>\n+                <version>2.4.3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-resources-plugin;external_dependency} -->\n+                <configuration>\n+                    <encoding>${project.build.sourceEncoding}</encoding>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-shade-plugin</artifactId>\n+                <version>3.2.4</version> <!-- {x-version-update;org.apache.maven.plugins:maven-shade-plugin;external_dependency} -->\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>shade</goal>\n+                        </goals>\n+                        <configuration>\n+                            <relocations>\n+                                <relocation>\n+                                    <pattern>com.fasterxml.jackson</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.com.fasterxml.jackson</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>org.apache.commons</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.org.apache.commons</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>org.apache.hc</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.org.apache.hc</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>mozilla</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.mozilla</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>org.slf4j</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.org.slf4j</shadedPattern>\n+                                </relocation>\n+                            </relocations>\n+                            <transformers>\n+                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\"/>\n+                            </transformers>\n+                            <createSourcesJar>true</createSourcesJar>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-surefire-plugin;external_dependency} -->\n+                <configuration>\n+                    <skip>true</skip>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.jacoco</groupId>\n+                <artifactId>jacoco-maven-plugin</artifactId>\n+                <version>0.8.5</version> <!-- {x-version-update;org.jacoco:jacoco-maven-plugin;external_dependency} -->\n+                <executions>\n+                    <execution>\n+                        <id>default-prepare-agent</id>\n+                        <goals>\n+                            <goal>prepare-agent</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-report</id>\n+                        <phase>prepare-package</phase>\n+                        <goals>\n+                            <goal>report</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-enforcer-plugin</artifactId>\n+                <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-enforcer-plugin;external_dependency} -->\n+                <configuration>\n+                    <rules>\n+                        <bannedDependencies>\n+                            <includes>\n+                                <include>org.apache.httpcomponents.client5:httpclient5:[5.0.1]</include> <!-- {x-include-update;org.apache.httpcomponents.client5:httpclient5;external_dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22916a83b3adf58ca85e43fac5dabb01b489e1d2"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzA1Mzc2OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDoxNlrOHkm-8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDoxNlrOHkm-8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTQ4OQ==", "bodyText": "Don't skip this check.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508149489", "createdAt": "2020-10-20T01:10:16Z", "author": {"login": "JonathanGiles"}, "path": "sdk/keyvault/azure-security-keyvault-jca/pom.xml", "diffHunk": "@@ -0,0 +1,232 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>azure-client-sdk-parent</artifactId>\n+        <groupId>com.azure</groupId>\n+        <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+        <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+    </parent>\n+\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-security-keyvault-jca</artifactId>\n+    <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-security-keyvault-jca;current} -->\n+    <name>JCA Provider for Azure Key Vault</name>\n+    <description>The Java Crypto Architecture (JCA) Provider for Azure KeyVault</description>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.8.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-compiler-plugin;external_dependency} -->\n+                <configuration>\n+                    <source>1.8</source>\n+                    <target>1.8</target>\n+                    <encoding>${project.build.sourceEncoding}</encoding>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-resources-plugin</artifactId>\n+                <version>2.4.3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-resources-plugin;external_dependency} -->\n+                <configuration>\n+                    <encoding>${project.build.sourceEncoding}</encoding>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-shade-plugin</artifactId>\n+                <version>3.2.4</version> <!-- {x-version-update;org.apache.maven.plugins:maven-shade-plugin;external_dependency} -->\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>shade</goal>\n+                        </goals>\n+                        <configuration>\n+                            <relocations>\n+                                <relocation>\n+                                    <pattern>com.fasterxml.jackson</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.com.fasterxml.jackson</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>org.apache.commons</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.org.apache.commons</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>org.apache.hc</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.org.apache.hc</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>mozilla</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.mozilla</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>org.slf4j</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.org.slf4j</shadedPattern>\n+                                </relocation>\n+                            </relocations>\n+                            <transformers>\n+                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\"/>\n+                            </transformers>\n+                            <createSourcesJar>true</createSourcesJar>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-surefire-plugin;external_dependency} -->\n+                <configuration>\n+                    <skip>true</skip>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.jacoco</groupId>\n+                <artifactId>jacoco-maven-plugin</artifactId>\n+                <version>0.8.5</version> <!-- {x-version-update;org.jacoco:jacoco-maven-plugin;external_dependency} -->\n+                <executions>\n+                    <execution>\n+                        <id>default-prepare-agent</id>\n+                        <goals>\n+                            <goal>prepare-agent</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-report</id>\n+                        <phase>prepare-package</phase>\n+                        <goals>\n+                            <goal>report</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-enforcer-plugin</artifactId>\n+                <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-enforcer-plugin;external_dependency} -->\n+                <configuration>\n+                    <rules>\n+                        <bannedDependencies>\n+                            <includes>\n+                                <include>org.apache.httpcomponents.client5:httpclient5:[5.0.1]</include> <!-- {x-include-update;org.apache.httpcomponents.client5:httpclient5;external_dependency} -->\n+                                <include>com.fasterxml.jackson.core:jackson-databind:[2.11.2]</include> <!-- {x-include-update;com.fasterxml.jackson.core:jackson-databind;external_dependency} -->\n+                                <include>org.slf4j:slf4j-nop:[1.7.30]</include> <!-- {x-include-update;org.slf4j:slf4j-nop;external_dependency} -->\n+                            </includes>\n+                        </bannedDependencies>\n+                    </rules>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-checkstyle-plugin</artifactId>\n+                <version>3.1.0</version> <!-- {x-version-update;org.apache.maven.plugins:maven-checkstyle-plugin;external_dependency} -->\n+                <configuration>\n+                    <skip>true</skip>\n+                </configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22916a83b3adf58ca85e43fac5dabb01b489e1d2"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzA1Mzg4OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDoyMVrOHkm_BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDoyMVrOHkm_BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTUwOQ==", "bodyText": "Don't skip this check.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508149509", "createdAt": "2020-10-20T01:10:21Z", "author": {"login": "JonathanGiles"}, "path": "sdk/keyvault/azure-security-keyvault-jca/pom.xml", "diffHunk": "@@ -0,0 +1,232 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>azure-client-sdk-parent</artifactId>\n+        <groupId>com.azure</groupId>\n+        <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+        <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+    </parent>\n+\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-security-keyvault-jca</artifactId>\n+    <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-security-keyvault-jca;current} -->\n+    <name>JCA Provider for Azure Key Vault</name>\n+    <description>The Java Crypto Architecture (JCA) Provider for Azure KeyVault</description>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.8.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-compiler-plugin;external_dependency} -->\n+                <configuration>\n+                    <source>1.8</source>\n+                    <target>1.8</target>\n+                    <encoding>${project.build.sourceEncoding}</encoding>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-resources-plugin</artifactId>\n+                <version>2.4.3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-resources-plugin;external_dependency} -->\n+                <configuration>\n+                    <encoding>${project.build.sourceEncoding}</encoding>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-shade-plugin</artifactId>\n+                <version>3.2.4</version> <!-- {x-version-update;org.apache.maven.plugins:maven-shade-plugin;external_dependency} -->\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>shade</goal>\n+                        </goals>\n+                        <configuration>\n+                            <relocations>\n+                                <relocation>\n+                                    <pattern>com.fasterxml.jackson</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.com.fasterxml.jackson</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>org.apache.commons</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.org.apache.commons</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>org.apache.hc</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.org.apache.hc</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>mozilla</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.mozilla</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>org.slf4j</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.org.slf4j</shadedPattern>\n+                                </relocation>\n+                            </relocations>\n+                            <transformers>\n+                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\"/>\n+                            </transformers>\n+                            <createSourcesJar>true</createSourcesJar>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-surefire-plugin;external_dependency} -->\n+                <configuration>\n+                    <skip>true</skip>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.jacoco</groupId>\n+                <artifactId>jacoco-maven-plugin</artifactId>\n+                <version>0.8.5</version> <!-- {x-version-update;org.jacoco:jacoco-maven-plugin;external_dependency} -->\n+                <executions>\n+                    <execution>\n+                        <id>default-prepare-agent</id>\n+                        <goals>\n+                            <goal>prepare-agent</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-report</id>\n+                        <phase>prepare-package</phase>\n+                        <goals>\n+                            <goal>report</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-enforcer-plugin</artifactId>\n+                <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-enforcer-plugin;external_dependency} -->\n+                <configuration>\n+                    <rules>\n+                        <bannedDependencies>\n+                            <includes>\n+                                <include>org.apache.httpcomponents.client5:httpclient5:[5.0.1]</include> <!-- {x-include-update;org.apache.httpcomponents.client5:httpclient5;external_dependency} -->\n+                                <include>com.fasterxml.jackson.core:jackson-databind:[2.11.2]</include> <!-- {x-include-update;com.fasterxml.jackson.core:jackson-databind;external_dependency} -->\n+                                <include>org.slf4j:slf4j-nop:[1.7.30]</include> <!-- {x-include-update;org.slf4j:slf4j-nop;external_dependency} -->\n+                            </includes>\n+                        </bannedDependencies>\n+                    </rules>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-checkstyle-plugin</artifactId>\n+                <version>3.1.0</version> <!-- {x-version-update;org.apache.maven.plugins:maven-checkstyle-plugin;external_dependency} -->\n+                <configuration>\n+                    <skip>true</skip>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>com.github.spotbugs</groupId>\n+                <artifactId>spotbugs-maven-plugin</artifactId>\n+                <version>3.1.12.2</version> <!-- {x-version-update;com.github.spotbugs:spotbugs-maven-plugin;external_dependency} -->\n+                <configuration>\n+                    <skip>true</skip>\n+                </configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22916a83b3adf58ca85e43fac5dabb01b489e1d2"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzA1NDEwOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDoyNlrOHkm_JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMDoyNlrOHkm_JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTU0MQ==", "bodyText": "Don't skip this check.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508149541", "createdAt": "2020-10-20T01:10:26Z", "author": {"login": "JonathanGiles"}, "path": "sdk/keyvault/azure-security-keyvault-jca/pom.xml", "diffHunk": "@@ -0,0 +1,232 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>azure-client-sdk-parent</artifactId>\n+        <groupId>com.azure</groupId>\n+        <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+        <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+    </parent>\n+\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-security-keyvault-jca</artifactId>\n+    <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-security-keyvault-jca;current} -->\n+    <name>JCA Provider for Azure Key Vault</name>\n+    <description>The Java Crypto Architecture (JCA) Provider for Azure KeyVault</description>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.8.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-compiler-plugin;external_dependency} -->\n+                <configuration>\n+                    <source>1.8</source>\n+                    <target>1.8</target>\n+                    <encoding>${project.build.sourceEncoding}</encoding>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-resources-plugin</artifactId>\n+                <version>2.4.3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-resources-plugin;external_dependency} -->\n+                <configuration>\n+                    <encoding>${project.build.sourceEncoding}</encoding>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-shade-plugin</artifactId>\n+                <version>3.2.4</version> <!-- {x-version-update;org.apache.maven.plugins:maven-shade-plugin;external_dependency} -->\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>shade</goal>\n+                        </goals>\n+                        <configuration>\n+                            <relocations>\n+                                <relocation>\n+                                    <pattern>com.fasterxml.jackson</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.com.fasterxml.jackson</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>org.apache.commons</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.org.apache.commons</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>org.apache.hc</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.org.apache.hc</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>mozilla</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.mozilla</shadedPattern>\n+                                </relocation>\n+                                <relocation>\n+                                    <pattern>org.slf4j</pattern>\n+                                    <shadedPattern>com.azure.keyvault.jca.org.slf4j</shadedPattern>\n+                                </relocation>\n+                            </relocations>\n+                            <transformers>\n+                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\"/>\n+                            </transformers>\n+                            <createSourcesJar>true</createSourcesJar>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-surefire-plugin;external_dependency} -->\n+                <configuration>\n+                    <skip>true</skip>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.jacoco</groupId>\n+                <artifactId>jacoco-maven-plugin</artifactId>\n+                <version>0.8.5</version> <!-- {x-version-update;org.jacoco:jacoco-maven-plugin;external_dependency} -->\n+                <executions>\n+                    <execution>\n+                        <id>default-prepare-agent</id>\n+                        <goals>\n+                            <goal>prepare-agent</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>default-report</id>\n+                        <phase>prepare-package</phase>\n+                        <goals>\n+                            <goal>report</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-enforcer-plugin</artifactId>\n+                <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-enforcer-plugin;external_dependency} -->\n+                <configuration>\n+                    <rules>\n+                        <bannedDependencies>\n+                            <includes>\n+                                <include>org.apache.httpcomponents.client5:httpclient5:[5.0.1]</include> <!-- {x-include-update;org.apache.httpcomponents.client5:httpclient5;external_dependency} -->\n+                                <include>com.fasterxml.jackson.core:jackson-databind:[2.11.2]</include> <!-- {x-include-update;com.fasterxml.jackson.core:jackson-databind;external_dependency} -->\n+                                <include>org.slf4j:slf4j-nop:[1.7.30]</include> <!-- {x-include-update;org.slf4j:slf4j-nop;external_dependency} -->\n+                            </includes>\n+                        </bannedDependencies>\n+                    </rules>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-checkstyle-plugin</artifactId>\n+                <version>3.1.0</version> <!-- {x-version-update;org.apache.maven.plugins:maven-checkstyle-plugin;external_dependency} -->\n+                <configuration>\n+                    <skip>true</skip>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>com.github.spotbugs</groupId>\n+                <artifactId>spotbugs-maven-plugin</artifactId>\n+                <version>3.1.12.2</version> <!-- {x-version-update;com.github.spotbugs:spotbugs-maven-plugin;external_dependency} -->\n+                <configuration>\n+                    <skip>true</skip>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.revapi</groupId>\n+                <artifactId>revapi-maven-plugin</artifactId>\n+                <version>0.11.2</version> <!-- {x-version-update;org.revapi:revapi-maven-plugin;external_dependency} -->\n+                <configuration>\n+                    <skip>true</skip>\n+                </configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22916a83b3adf58ca85e43fac5dabb01b489e1d2"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzA1NjA0OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMToyNFrOHknAOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjowNDo0NFrOHkn4fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTgxNg==", "bodyText": "We don't include author tags in our JavaDoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508149816", "createdAt": "2020-10-20T01:11:24Z", "author": {"login": "JonathanGiles"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,184 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22916a83b3adf58ca85e43fac5dabb01b489e1d2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE2NDIyMw==", "bodyText": "I will address this", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508164223", "createdAt": "2020-10-20T02:04:44Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,184 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0OTgxNg=="}, "originalCommit": {"oid": "22916a83b3adf58ca85e43fac5dabb01b489e1d2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzA2MDAzOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToxMzozNlrOHknCgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjowNjo1MlrOHkn7BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE1MDQwMQ==", "bodyText": "It looks like elsewhere you have a dependency on slf4j - it would be good to standardise on that (which is also what the azure SDKs have standardised on).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508150401", "createdAt": "2020-10-20T01:13:36Z", "author": {"login": "JonathanGiles"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,184 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22916a83b3adf58ca85e43fac5dabb01b489e1d2"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE2NDg2OQ==", "bodyText": "As the JAR is self-contained it is not relying on SLF4J for its logging. Even though Jackson is pulling it in as a dependency it is not used for logging by the JCA provider itself.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508164869", "createdAt": "2020-10-20T02:06:52Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,184 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE1MDQwMQ=="}, "originalCommit": {"oid": "22916a83b3adf58ca85e43fac5dabb01b489e1d2"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjcxMjA2OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzo1NDoxNVrOHlKLMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOToyNjozNFrOHmwk5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNjA2NQ==", "bodyText": "Just remember to add the changelog notes here before releasing :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508726065", "createdAt": "2020-10-20T17:54:15Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/CHANGELOG.md", "diffHunk": "@@ -0,0 +1,4 @@\n+# Release History\n+\n+## 1.0.0-beta.1 (Unreleased)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwMzgxNA==", "bodyText": "It is there ;)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510403814", "createdAt": "2020-10-22T19:26:34Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/CHANGELOG.md", "diffHunk": "@@ -0,0 +1,4 @@\n+# Release History\n+\n+## 1.0.0-beta.1 (Unreleased)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNjA2NQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjcxNTQxOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzo1NDo1OFrOHlKNTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzowMzo0M1rOHmgrZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNjYwNg==", "bodyText": "nit;\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Must be extremely thin to run within a JVM\n          \n          \n            \n            1. Must not introduce any library version conflicts with Java app code dependencies\n          \n          \n            \n            1. Must not introduce any class loader hierarchy conflicts with Java app code dependencies\n          \n          \n            \n            1. Must be extremely thin to run within a JVM.\n          \n          \n            \n            1. Must not introduce any library version conflicts with Java app code dependencies.\n          \n          \n            \n            1. Must not introduce any class loader hierarchy conflicts with Java app code dependencies.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508726606", "createdAt": "2020-10-20T17:54:58Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "diffHunk": "@@ -0,0 +1,127 @@\n+# JCA Provider for Azure Key Vault\n+\n+The JCA Provider for Azure Key Vault is a JCA provider for certificates in \n+Azure Key Vault. It is built on four principles:\n+ \n+1. Must be extremely thin to run within a JVM\n+1. Must not introduce any library version conflicts with Java app code dependencies\n+1. Must not introduce any class loader hierarchy conflicts with Java app code dependencies", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0MzMzMw==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510143333", "createdAt": "2020-10-22T13:03:43Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "diffHunk": "@@ -0,0 +1,127 @@\n+# JCA Provider for Azure Key Vault\n+\n+The JCA Provider for Azure Key Vault is a JCA provider for certificates in \n+Azure Key Vault. It is built on four principles:\n+ \n+1. Must be extremely thin to run within a JVM\n+1. Must not introduce any library version conflicts with Java app code dependencies\n+1. Must not introduce any class loader hierarchy conflicts with Java app code dependencies", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNjYwNg=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjcxODg5OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzo1NTo0MVrOHlKPSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzowMjoyNVrOHmgn_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNzExNQ==", "bodyText": "nit;\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you are looking to integrate the JCA provider to create a SSLServerSocket\n          \n          \n            \n            If you are looking to integrate the JCA provider to create an SSLServerSocket", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508727115", "createdAt": "2020-10-20T17:55:41Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "diffHunk": "@@ -0,0 +1,127 @@\n+# JCA Provider for Azure Key Vault\n+\n+The JCA Provider for Azure Key Vault is a JCA provider for certificates in \n+Azure Key Vault. It is built on four principles:\n+ \n+1. Must be extremely thin to run within a JVM\n+1. Must not introduce any library version conflicts with Java app code dependencies\n+1. Must not introduce any class loader hierarchy conflicts with Java app code dependencies\n+1. Must be ready for \"never trust, always verify and credential-free\" Zero Trust environments.\n+\n+## Testing the version under development\n+\n+If you want to test the current version under development you will have to\n+build and install it into your local Maven repository. To do so use the \n+following command line:\n+\n+```\n+  mvn clean install -DskipTests=true\n+```\n+\n+## Server side SSL\n+\n+If you are looking to integrate the JCA provider to create a SSLServerSocket", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0MjQ2Mw==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510142463", "createdAt": "2020-10-22T13:02:25Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "diffHunk": "@@ -0,0 +1,127 @@\n+# JCA Provider for Azure Key Vault\n+\n+The JCA Provider for Azure Key Vault is a JCA provider for certificates in \n+Azure Key Vault. It is built on four principles:\n+ \n+1. Must be extremely thin to run within a JVM\n+1. Must not introduce any library version conflicts with Java app code dependencies\n+1. Must not introduce any class loader hierarchy conflicts with Java app code dependencies\n+1. Must be ready for \"never trust, always verify and credential-free\" Zero Trust environments.\n+\n+## Testing the version under development\n+\n+If you want to test the current version under development you will have to\n+build and install it into your local Maven repository. To do so use the \n+following command line:\n+\n+```\n+  mvn clean install -DskipTests=true\n+```\n+\n+## Server side SSL\n+\n+If you are looking to integrate the JCA provider to create a SSLServerSocket", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNzExNQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjczNTM5OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzo1OTo0MlrOHlKZjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzo1OTo0MlrOHlKZjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyOTc0MQ==", "bodyText": "nit; Small details.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n          \n          \n            \n                Security.addProvider(provider);\n          \n          \n            \n            \n          \n          \n            \n                KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n          \n          \n            \n                KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n          \n          \n            \n                        System.getProperty(\"azure.keyvault.uri\"), \n          \n          \n            \n                        System.getProperty(\"azure.tenant.id\"), \n          \n          \n            \n                        System.getProperty(\"azure.client.id\"),\n          \n          \n            \n                        System.getProperty(\"azure.client.secret\"));\n          \n          \n            \n                ks.load(parameter);\n          \n          \n            \n            \n          \n          \n            \n                SSLContext sslContext = SSLContexts\n          \n          \n            \n                        .custom()\n          \n          \n            \n                        .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n          \n          \n            \n                        .build();\n          \n          \n            \n            \n          \n          \n            \n                SSLConnectionSocketFactory sslSocketFactory = SSLConnectionSocketFactoryBuilder\n          \n          \n            \n                        .create()\n          \n          \n            \n                        .setSslContext(sslContext)\n          \n          \n            \n                        .setHostnameVerifier((hostname, session) -> {\n          \n          \n            \n                            return true;\n          \n          \n            \n                        })\n          \n          \n            \n                        .build();\n          \n          \n            \n            \n          \n          \n            \n                PoolingHttpClientConnectionManager cm = PoolingHttpClientConnectionManagerBuilder\n          \n          \n            \n                        .create()\n          \n          \n            \n                        .setSSLSocketFactory(sslSocketFactory)\n          \n          \n            \n                        .build();\n          \n          \n            \n            \n          \n          \n            \n                String result = null;\n          \n          \n            \n            \n          \n          \n            \n                try ( CloseableHttpClient client = HttpClients.custom().setConnectionManager(cm).build()) {\n          \n          \n            \n                    HttpGet httpGet = new HttpGet(\"https://localhost:8766\");\n          \n          \n            \n                    HttpClientResponseHandler<String> responseHandler = (ClassicHttpResponse response) -> {\n          \n          \n            \n                        int status = response.getCode();\n          \n          \n            \n                        String result1 = \"Not success\";\n          \n          \n            \n                        if (status == 204) {\n          \n          \n            \n                            result1 = \"Success\";\n          \n          \n            \n                        }\n          \n          \n            \n                        return result1;\n          \n          \n            \n                    };\n          \n          \n            \n                    result = client.execute(httpGet, responseHandler);\n          \n          \n            \n                } catch (IOException ioe) {\n          \n          \n            \n                    ioe.printStackTrace();\n          \n          \n            \n                }\n          \n          \n            \n                KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n          \n          \n            \n                Security.addProvider(provider);\n          \n          \n            \n            \n          \n          \n            \n                KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n          \n          \n            \n                KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n          \n          \n            \n                    System.getProperty(\"azure.keyvault.uri\"), \n          \n          \n            \n                    System.getProperty(\"azure.tenant.id\"), \n          \n          \n            \n                    System.getProperty(\"azure.client.id\"),\n          \n          \n            \n                    System.getProperty(\"azure.client.secret\"));\n          \n          \n            \n                ks.load(parameter);\n          \n          \n            \n            \n          \n          \n            \n                SSLContext sslContext = SSLContexts\n          \n          \n            \n                    .custom()\n          \n          \n            \n                    .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n          \n          \n            \n                    .build();\n          \n          \n            \n            \n          \n          \n            \n                SSLConnectionSocketFactory sslSocketFactory = SSLConnectionSocketFactoryBuilder\n          \n          \n            \n                    .create()\n          \n          \n            \n                    .setSslContext(sslContext)\n          \n          \n            \n                    .setHostnameVerifier((hostname, session) -> {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    })\n          \n          \n            \n                    .build();\n          \n          \n            \n            \n          \n          \n            \n                PoolingHttpClientConnectionManager cm = PoolingHttpClientConnectionManagerBuilder\n          \n          \n            \n                    .create()\n          \n          \n            \n                    .setSSLSocketFactory(sslSocketFactory)\n          \n          \n            \n                    .build();\n          \n          \n            \n            \n          \n          \n            \n                String result = null;\n          \n          \n            \n            \n          \n          \n            \n                try (CloseableHttpClient client = HttpClients.custom().setConnectionManager(cm).build()) {\n          \n          \n            \n                    HttpGet httpGet = new HttpGet(\"https://localhost:8766\");\n          \n          \n            \n                    HttpClientResponseHandler<String> responseHandler = (ClassicHttpResponse response) -> {\n          \n          \n            \n                        int status = response.getCode();\n          \n          \n            \n                        String result1 = \"Not success\";\n          \n          \n            \n                        if (status == 204) {\n          \n          \n            \n                            result1 = \"Success\";\n          \n          \n            \n                        }\n          \n          \n            \n                        return result1;\n          \n          \n            \n                    };\n          \n          \n            \n                    result = client.execute(httpGet, responseHandler);\n          \n          \n            \n                } catch (IOException ioe) {\n          \n          \n            \n                    ioe.printStackTrace();\n          \n          \n            \n                }", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508729741", "createdAt": "2020-10-20T17:59:42Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "diffHunk": "@@ -0,0 +1,127 @@\n+# JCA Provider for Azure Key Vault\n+\n+The JCA Provider for Azure Key Vault is a JCA provider for certificates in \n+Azure Key Vault. It is built on four principles:\n+ \n+1. Must be extremely thin to run within a JVM\n+1. Must not introduce any library version conflicts with Java app code dependencies\n+1. Must not introduce any class loader hierarchy conflicts with Java app code dependencies\n+1. Must be ready for \"never trust, always verify and credential-free\" Zero Trust environments.\n+\n+## Testing the version under development\n+\n+If you want to test the current version under development you will have to\n+build and install it into your local Maven repository. To do so use the \n+following command line:\n+\n+```\n+  mvn clean install -DskipTests=true\n+```\n+\n+## Server side SSL\n+\n+If you are looking to integrate the JCA provider to create a SSLServerSocket\n+see the example below.\n+\n+```java\n+    KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n+    Security.addProvider(provider);\n+\n+    KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+    KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+        System.getProperty(\"azure.keyvault.uri\"), \n+        System.getProperty(\"azure.tenant.id\"), \n+        System.getProperty(\"azure.client.id\"),\n+        System.getProperty(\"azure.client.secret\"));\n+    ks.load(parameter);\n+\n+    KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+    kmf.init(ks, \"\".toCharArray());\n+\n+    SSLContext context = SSLContext.getInstance(\"TLS\");\n+    context.init(kmf.getKeyManagers(), null, null);\n+\n+    SSLServerSocketFactory factory = (SSLServerSocketFactory) context.getServerSocketFactory();\n+    SSLServerSocket serverSocket = (SSLServerSocket) factory.createServerSocket(8765);\n+```\n+\n+Note if you want to use Azure managed identity, you should set the value\n+of `azure.keyvault.uri`, and the rest of the parameters would be `null`.\n+\n+## Client side SSL\n+\n+If you are looking to integrate the JCA provider for client side socket \n+connections, see the Apache HTTP client example below.\n+\n+```java\n+    KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n+    Security.addProvider(provider);\n+\n+    KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+    KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+            System.getProperty(\"azure.keyvault.uri\"), \n+            System.getProperty(\"azure.tenant.id\"), \n+            System.getProperty(\"azure.client.id\"),\n+            System.getProperty(\"azure.client.secret\"));\n+    ks.load(parameter);\n+\n+    SSLContext sslContext = SSLContexts\n+            .custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+    SSLConnectionSocketFactory sslSocketFactory = SSLConnectionSocketFactoryBuilder\n+            .create()\n+            .setSslContext(sslContext)\n+            .setHostnameVerifier((hostname, session) -> {\n+                return true;\n+            })\n+            .build();\n+\n+    PoolingHttpClientConnectionManager cm = PoolingHttpClientConnectionManagerBuilder\n+            .create()\n+            .setSSLSocketFactory(sslSocketFactory)\n+            .build();\n+\n+    String result = null;\n+\n+    try ( CloseableHttpClient client = HttpClients.custom().setConnectionManager(cm).build()) {\n+        HttpGet httpGet = new HttpGet(\"https://localhost:8766\");\n+        HttpClientResponseHandler<String> responseHandler = (ClassicHttpResponse response) -> {\n+            int status = response.getCode();\n+            String result1 = \"Not success\";\n+            if (status == 204) {\n+                result1 = \"Success\";\n+            }\n+            return result1;\n+        };\n+        result = client.execute(httpGet, responseHandler);\n+    } catch (IOException ioe) {\n+        ioe.printStackTrace();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjczODQ4OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODowMDoyMlrOHlKbWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzowNDo1OFrOHmguxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczMDIwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Note if you want to use Azure managed identity, you should set the value\n          \n          \n            \n            Note if you want to use Azure Managed Identity, you should set the value", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508730202", "createdAt": "2020-10-20T18:00:22Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "diffHunk": "@@ -0,0 +1,127 @@\n+# JCA Provider for Azure Key Vault\n+\n+The JCA Provider for Azure Key Vault is a JCA provider for certificates in \n+Azure Key Vault. It is built on four principles:\n+ \n+1. Must be extremely thin to run within a JVM\n+1. Must not introduce any library version conflicts with Java app code dependencies\n+1. Must not introduce any class loader hierarchy conflicts with Java app code dependencies\n+1. Must be ready for \"never trust, always verify and credential-free\" Zero Trust environments.\n+\n+## Testing the version under development\n+\n+If you want to test the current version under development you will have to\n+build and install it into your local Maven repository. To do so use the \n+following command line:\n+\n+```\n+  mvn clean install -DskipTests=true\n+```\n+\n+## Server side SSL\n+\n+If you are looking to integrate the JCA provider to create a SSLServerSocket\n+see the example below.\n+\n+```java\n+    KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n+    Security.addProvider(provider);\n+\n+    KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+    KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+        System.getProperty(\"azure.keyvault.uri\"), \n+        System.getProperty(\"azure.tenant.id\"), \n+        System.getProperty(\"azure.client.id\"),\n+        System.getProperty(\"azure.client.secret\"));\n+    ks.load(parameter);\n+\n+    KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+    kmf.init(ks, \"\".toCharArray());\n+\n+    SSLContext context = SSLContext.getInstance(\"TLS\");\n+    context.init(kmf.getKeyManagers(), null, null);\n+\n+    SSLServerSocketFactory factory = (SSLServerSocketFactory) context.getServerSocketFactory();\n+    SSLServerSocket serverSocket = (SSLServerSocket) factory.createServerSocket(8765);\n+```\n+\n+Note if you want to use Azure managed identity, you should set the value\n+of `azure.keyvault.uri`, and the rest of the parameters would be `null`.\n+\n+## Client side SSL\n+\n+If you are looking to integrate the JCA provider for client side socket \n+connections, see the Apache HTTP client example below.\n+\n+```java\n+    KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n+    Security.addProvider(provider);\n+\n+    KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+    KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+            System.getProperty(\"azure.keyvault.uri\"), \n+            System.getProperty(\"azure.tenant.id\"), \n+            System.getProperty(\"azure.client.id\"),\n+            System.getProperty(\"azure.client.secret\"));\n+    ks.load(parameter);\n+\n+    SSLContext sslContext = SSLContexts\n+            .custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+    SSLConnectionSocketFactory sslSocketFactory = SSLConnectionSocketFactoryBuilder\n+            .create()\n+            .setSslContext(sslContext)\n+            .setHostnameVerifier((hostname, session) -> {\n+                return true;\n+            })\n+            .build();\n+\n+    PoolingHttpClientConnectionManager cm = PoolingHttpClientConnectionManagerBuilder\n+            .create()\n+            .setSSLSocketFactory(sslSocketFactory)\n+            .build();\n+\n+    String result = null;\n+\n+    try ( CloseableHttpClient client = HttpClients.custom().setConnectionManager(cm).build()) {\n+        HttpGet httpGet = new HttpGet(\"https://localhost:8766\");\n+        HttpClientResponseHandler<String> responseHandler = (ClassicHttpResponse response) -> {\n+            int status = response.getCode();\n+            String result1 = \"Not success\";\n+            if (status == 204) {\n+                result1 = \"Success\";\n+            }\n+            return result1;\n+        };\n+        result = client.execute(httpGet, responseHandler);\n+    } catch (IOException ioe) {\n+        ioe.printStackTrace();\n+    }\n+```\n+\n+Note if you want to use Azure managed identity, you should set the value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0NDE5OQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510144199", "createdAt": "2020-10-22T13:04:58Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "diffHunk": "@@ -0,0 +1,127 @@\n+# JCA Provider for Azure Key Vault\n+\n+The JCA Provider for Azure Key Vault is a JCA provider for certificates in \n+Azure Key Vault. It is built on four principles:\n+ \n+1. Must be extremely thin to run within a JVM\n+1. Must not introduce any library version conflicts with Java app code dependencies\n+1. Must not introduce any class loader hierarchy conflicts with Java app code dependencies\n+1. Must be ready for \"never trust, always verify and credential-free\" Zero Trust environments.\n+\n+## Testing the version under development\n+\n+If you want to test the current version under development you will have to\n+build and install it into your local Maven repository. To do so use the \n+following command line:\n+\n+```\n+  mvn clean install -DskipTests=true\n+```\n+\n+## Server side SSL\n+\n+If you are looking to integrate the JCA provider to create a SSLServerSocket\n+see the example below.\n+\n+```java\n+    KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n+    Security.addProvider(provider);\n+\n+    KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+    KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+        System.getProperty(\"azure.keyvault.uri\"), \n+        System.getProperty(\"azure.tenant.id\"), \n+        System.getProperty(\"azure.client.id\"),\n+        System.getProperty(\"azure.client.secret\"));\n+    ks.load(parameter);\n+\n+    KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+    kmf.init(ks, \"\".toCharArray());\n+\n+    SSLContext context = SSLContext.getInstance(\"TLS\");\n+    context.init(kmf.getKeyManagers(), null, null);\n+\n+    SSLServerSocketFactory factory = (SSLServerSocketFactory) context.getServerSocketFactory();\n+    SSLServerSocket serverSocket = (SSLServerSocket) factory.createServerSocket(8765);\n+```\n+\n+Note if you want to use Azure managed identity, you should set the value\n+of `azure.keyvault.uri`, and the rest of the parameters would be `null`.\n+\n+## Client side SSL\n+\n+If you are looking to integrate the JCA provider for client side socket \n+connections, see the Apache HTTP client example below.\n+\n+```java\n+    KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n+    Security.addProvider(provider);\n+\n+    KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+    KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+            System.getProperty(\"azure.keyvault.uri\"), \n+            System.getProperty(\"azure.tenant.id\"), \n+            System.getProperty(\"azure.client.id\"),\n+            System.getProperty(\"azure.client.secret\"));\n+    ks.load(parameter);\n+\n+    SSLContext sslContext = SSLContexts\n+            .custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+    SSLConnectionSocketFactory sslSocketFactory = SSLConnectionSocketFactoryBuilder\n+            .create()\n+            .setSslContext(sslContext)\n+            .setHostnameVerifier((hostname, session) -> {\n+                return true;\n+            })\n+            .build();\n+\n+    PoolingHttpClientConnectionManager cm = PoolingHttpClientConnectionManagerBuilder\n+            .create()\n+            .setSSLSocketFactory(sslSocketFactory)\n+            .build();\n+\n+    String result = null;\n+\n+    try ( CloseableHttpClient client = HttpClients.custom().setConnectionManager(cm).build()) {\n+        HttpGet httpGet = new HttpGet(\"https://localhost:8766\");\n+        HttpClientResponseHandler<String> responseHandler = (ClassicHttpResponse response) -> {\n+            int status = response.getCode();\n+            String result1 = \"Not success\";\n+            if (status == 204) {\n+                result1 = \"Success\";\n+            }\n+            return result1;\n+        };\n+        result = client.execute(httpGet, responseHandler);\n+    } catch (IOException ioe) {\n+        ioe.printStackTrace();\n+    }\n+```\n+\n+Note if you want to use Azure managed identity, you should set the value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczMDIwMg=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Njc0NzA1OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODowMjozOVrOHlKgyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozODoxM1rOHmy6iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczMTU5Mg==", "bodyText": "When are we looking to fill these sections?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508731592", "createdAt": "2020-10-20T18:02:39Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "diffHunk": "@@ -0,0 +1,127 @@\n+# JCA Provider for Azure Key Vault\n+\n+The JCA Provider for Azure Key Vault is a JCA provider for certificates in \n+Azure Key Vault. It is built on four principles:\n+ \n+1. Must be extremely thin to run within a JVM\n+1. Must not introduce any library version conflicts with Java app code dependencies\n+1. Must not introduce any class loader hierarchy conflicts with Java app code dependencies\n+1. Must be ready for \"never trust, always verify and credential-free\" Zero Trust environments.\n+\n+## Testing the version under development\n+\n+If you want to test the current version under development you will have to\n+build and install it into your local Maven repository. To do so use the \n+following command line:\n+\n+```\n+  mvn clean install -DskipTests=true\n+```\n+\n+## Server side SSL\n+\n+If you are looking to integrate the JCA provider to create a SSLServerSocket\n+see the example below.\n+\n+```java\n+    KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n+    Security.addProvider(provider);\n+\n+    KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+    KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+        System.getProperty(\"azure.keyvault.uri\"), \n+        System.getProperty(\"azure.tenant.id\"), \n+        System.getProperty(\"azure.client.id\"),\n+        System.getProperty(\"azure.client.secret\"));\n+    ks.load(parameter);\n+\n+    KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+    kmf.init(ks, \"\".toCharArray());\n+\n+    SSLContext context = SSLContext.getInstance(\"TLS\");\n+    context.init(kmf.getKeyManagers(), null, null);\n+\n+    SSLServerSocketFactory factory = (SSLServerSocketFactory) context.getServerSocketFactory();\n+    SSLServerSocket serverSocket = (SSLServerSocket) factory.createServerSocket(8765);\n+```\n+\n+Note if you want to use Azure managed identity, you should set the value\n+of `azure.keyvault.uri`, and the rest of the parameters would be `null`.\n+\n+## Client side SSL\n+\n+If you are looking to integrate the JCA provider for client side socket \n+connections, see the Apache HTTP client example below.\n+\n+```java\n+    KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n+    Security.addProvider(provider);\n+\n+    KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+    KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+            System.getProperty(\"azure.keyvault.uri\"), \n+            System.getProperty(\"azure.tenant.id\"), \n+            System.getProperty(\"azure.client.id\"),\n+            System.getProperty(\"azure.client.secret\"));\n+    ks.load(parameter);\n+\n+    SSLContext sslContext = SSLContexts\n+            .custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+    SSLConnectionSocketFactory sslSocketFactory = SSLConnectionSocketFactoryBuilder\n+            .create()\n+            .setSslContext(sslContext)\n+            .setHostnameVerifier((hostname, session) -> {\n+                return true;\n+            })\n+            .build();\n+\n+    PoolingHttpClientConnectionManager cm = PoolingHttpClientConnectionManagerBuilder\n+            .create()\n+            .setSSLSocketFactory(sslSocketFactory)\n+            .build();\n+\n+    String result = null;\n+\n+    try ( CloseableHttpClient client = HttpClients.custom().setConnectionManager(cm).build()) {\n+        HttpGet httpGet = new HttpGet(\"https://localhost:8766\");\n+        HttpClientResponseHandler<String> responseHandler = (ClassicHttpResponse response) -> {\n+            int status = response.getCode();\n+            String result1 = \"Not success\";\n+            if (status == 204) {\n+                result1 = \"Success\";\n+            }\n+            return result1;\n+        };\n+        result = client.execute(httpGet, responseHandler);\n+    } catch (IOException ioe) {\n+        ioe.printStackTrace();\n+    }\n+```\n+\n+Note if you want to use Azure managed identity, you should set the value\n+of `azure.keyvault.uri`, and the rest of the parameters would be `null`.\n+\n+## Spring Boot\n+\n+For Spring Boot applications see our [Spring Boot starter]<!--(../../spring/azure-spring-boot-starter-keyvault-certificates/README.md)-->.\n+\n+## Reference\n+\n+1. [Java Cryptography Architecture (JCA) Reference Guide](https://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html)\n+\n+# Azure KeyVault JCA client library for Java\n+\n+# Getting started\n+\n+# Key concepts\n+\n+# Examples\n+\n+# Troubleshooting\n+\n+# Next steps\n+\n+# Contributing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MjEyMQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510442121", "createdAt": "2020-10-22T20:38:13Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "diffHunk": "@@ -0,0 +1,127 @@\n+# JCA Provider for Azure Key Vault\n+\n+The JCA Provider for Azure Key Vault is a JCA provider for certificates in \n+Azure Key Vault. It is built on four principles:\n+ \n+1. Must be extremely thin to run within a JVM\n+1. Must not introduce any library version conflicts with Java app code dependencies\n+1. Must not introduce any class loader hierarchy conflicts with Java app code dependencies\n+1. Must be ready for \"never trust, always verify and credential-free\" Zero Trust environments.\n+\n+## Testing the version under development\n+\n+If you want to test the current version under development you will have to\n+build and install it into your local Maven repository. To do so use the \n+following command line:\n+\n+```\n+  mvn clean install -DskipTests=true\n+```\n+\n+## Server side SSL\n+\n+If you are looking to integrate the JCA provider to create a SSLServerSocket\n+see the example below.\n+\n+```java\n+    KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n+    Security.addProvider(provider);\n+\n+    KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+    KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+        System.getProperty(\"azure.keyvault.uri\"), \n+        System.getProperty(\"azure.tenant.id\"), \n+        System.getProperty(\"azure.client.id\"),\n+        System.getProperty(\"azure.client.secret\"));\n+    ks.load(parameter);\n+\n+    KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+    kmf.init(ks, \"\".toCharArray());\n+\n+    SSLContext context = SSLContext.getInstance(\"TLS\");\n+    context.init(kmf.getKeyManagers(), null, null);\n+\n+    SSLServerSocketFactory factory = (SSLServerSocketFactory) context.getServerSocketFactory();\n+    SSLServerSocket serverSocket = (SSLServerSocket) factory.createServerSocket(8765);\n+```\n+\n+Note if you want to use Azure managed identity, you should set the value\n+of `azure.keyvault.uri`, and the rest of the parameters would be `null`.\n+\n+## Client side SSL\n+\n+If you are looking to integrate the JCA provider for client side socket \n+connections, see the Apache HTTP client example below.\n+\n+```java\n+    KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n+    Security.addProvider(provider);\n+\n+    KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+    KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+            System.getProperty(\"azure.keyvault.uri\"), \n+            System.getProperty(\"azure.tenant.id\"), \n+            System.getProperty(\"azure.client.id\"),\n+            System.getProperty(\"azure.client.secret\"));\n+    ks.load(parameter);\n+\n+    SSLContext sslContext = SSLContexts\n+            .custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+    SSLConnectionSocketFactory sslSocketFactory = SSLConnectionSocketFactoryBuilder\n+            .create()\n+            .setSslContext(sslContext)\n+            .setHostnameVerifier((hostname, session) -> {\n+                return true;\n+            })\n+            .build();\n+\n+    PoolingHttpClientConnectionManager cm = PoolingHttpClientConnectionManagerBuilder\n+            .create()\n+            .setSSLSocketFactory(sslSocketFactory)\n+            .build();\n+\n+    String result = null;\n+\n+    try ( CloseableHttpClient client = HttpClients.custom().setConnectionManager(cm).build()) {\n+        HttpGet httpGet = new HttpGet(\"https://localhost:8766\");\n+        HttpClientResponseHandler<String> responseHandler = (ClassicHttpResponse response) -> {\n+            int status = response.getCode();\n+            String result1 = \"Not success\";\n+            if (status == 204) {\n+                result1 = \"Success\";\n+            }\n+            return result1;\n+        };\n+        result = client.execute(httpGet, responseHandler);\n+    } catch (IOException ioe) {\n+        ioe.printStackTrace();\n+    }\n+```\n+\n+Note if you want to use Azure managed identity, you should set the value\n+of `azure.keyvault.uri`, and the rest of the parameters would be `null`.\n+\n+## Spring Boot\n+\n+For Spring Boot applications see our [Spring Boot starter]<!--(../../spring/azure-spring-boot-starter-keyvault-certificates/README.md)-->.\n+\n+## Reference\n+\n+1. [Java Cryptography Architecture (JCA) Reference Guide](https://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html)\n+\n+# Azure KeyVault JCA client library for Java\n+\n+# Getting started\n+\n+# Key concepts\n+\n+# Examples\n+\n+# Troubleshooting\n+\n+# Next steps\n+\n+# Contributing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczMTU5Mg=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Njg4MjI0OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODozNzoyMFrOHlL1uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDo1Mjo0NVrOHml1Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1MzMzOQ==", "bodyText": "Are we making a simple REST call for getting credentials instead of using our Azure Identity library to avoid pulling more dependencies into this JAR?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508753339", "createdAt": "2020-10-20T18:37:20Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ */\n+class AuthClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the Client ID fragment.\n+     */\n+    private static final String CLIENT_ID_FRAGMENT = \"&client_id=\";\n+\n+    /**\n+     * Stores the Client Secret fragment.\n+     */\n+    private static final String CLIENT_SECRET_FRAGMENT = \"&client_secret=\";\n+\n+    /**\n+     * Stores the Grant Type fragment.\n+     */\n+    private static final String GRANT_TYPE_FRAGMENT = \"grant_type=client_credentials\";\n+\n+    /**\n+     * Stores the Resource fragment.\n+     */\n+    private static final String RESOURCE_FRAGMENT = \"&resource=\";\n+\n+    /**\n+     * Stores the OAuth2 token base URL.\n+     */\n+    private static final String OAUTH2_TOKEN_BASE_URL = \"https://login.microsoftonline.com/\";\n+\n+    /**\n+     * Stores the OAuth2 token postfix.\n+     */\n+    private static final String OAUTH2_TOKEN_POSTFIX = \"/oauth2/token\";\n+\n+    /**\n+     * Stores the OAuth2 managed identity URL.\n+     */\n+    private static final String OAUTH2_MANAGED_IDENTITY_TOKEN_URL\n+        = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01\";\n+\n+    /**\n+     * Stores our logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(AuthClient.class.getName());\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor creates a default RestClient.\n+     * </p>\n+     */\n+    AuthClient() {\n+        super(RestClientFactory.createClient());\n+    }\n+\n+    /**\n+     * Get an access token for a managed identity.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource) {\n+        String result;\n+\n+        if (System.getenv(\"WEBSITE_SITE_NAME\") != null\n+            && !System.getenv(\"WEBSITE_SITE_NAME\").isEmpty()) {\n+            result = getAccessTokenOnAppService(resource);\n+        } else {\n+            result = getAccessTokenOnOthers(resource);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get an access token.\n+     *\n+     * @param resource the resource.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource, String tenantId,\n+                                 String clientId, String clientSecret) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessToken\", new Object[] {\n+            resource, tenantId, clientId, clientSecret });\n+        LOGGER.info(\"Getting access token using client ID / client secret\");\n+        String result = null;\n+\n+        StringBuilder oauth2Url = new StringBuilder();\n+        oauth2Url.append(OAUTH2_TOKEN_BASE_URL)\n+                 .append(tenantId)\n+                 .append(OAUTH2_TOKEN_POSTFIX);\n+\n+        StringBuilder requestBody = new StringBuilder();\n+        requestBody.append(GRANT_TYPE_FRAGMENT)\n+                   .append(CLIENT_ID_FRAGMENT).append(clientId)\n+                   .append(CLIENT_SECRET_FRAGMENT).append(clientSecret)\n+                   .append(RESOURCE_FRAGMENT).append(resource);\n+\n+        String body = post(oauth2Url.toString(), requestBody.toString(), \"application/x-www-form-urlencoded\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyNzczMA==", "bodyText": "That is correct.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510227730", "createdAt": "2020-10-22T14:52:45Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ */\n+class AuthClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the Client ID fragment.\n+     */\n+    private static final String CLIENT_ID_FRAGMENT = \"&client_id=\";\n+\n+    /**\n+     * Stores the Client Secret fragment.\n+     */\n+    private static final String CLIENT_SECRET_FRAGMENT = \"&client_secret=\";\n+\n+    /**\n+     * Stores the Grant Type fragment.\n+     */\n+    private static final String GRANT_TYPE_FRAGMENT = \"grant_type=client_credentials\";\n+\n+    /**\n+     * Stores the Resource fragment.\n+     */\n+    private static final String RESOURCE_FRAGMENT = \"&resource=\";\n+\n+    /**\n+     * Stores the OAuth2 token base URL.\n+     */\n+    private static final String OAUTH2_TOKEN_BASE_URL = \"https://login.microsoftonline.com/\";\n+\n+    /**\n+     * Stores the OAuth2 token postfix.\n+     */\n+    private static final String OAUTH2_TOKEN_POSTFIX = \"/oauth2/token\";\n+\n+    /**\n+     * Stores the OAuth2 managed identity URL.\n+     */\n+    private static final String OAUTH2_MANAGED_IDENTITY_TOKEN_URL\n+        = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01\";\n+\n+    /**\n+     * Stores our logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(AuthClient.class.getName());\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor creates a default RestClient.\n+     * </p>\n+     */\n+    AuthClient() {\n+        super(RestClientFactory.createClient());\n+    }\n+\n+    /**\n+     * Get an access token for a managed identity.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource) {\n+        String result;\n+\n+        if (System.getenv(\"WEBSITE_SITE_NAME\") != null\n+            && !System.getenv(\"WEBSITE_SITE_NAME\").isEmpty()) {\n+            result = getAccessTokenOnAppService(resource);\n+        } else {\n+            result = getAccessTokenOnOthers(resource);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get an access token.\n+     *\n+     * @param resource the resource.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource, String tenantId,\n+                                 String clientId, String clientSecret) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessToken\", new Object[] {\n+            resource, tenantId, clientId, clientSecret });\n+        LOGGER.info(\"Getting access token using client ID / client secret\");\n+        String result = null;\n+\n+        StringBuilder oauth2Url = new StringBuilder();\n+        oauth2Url.append(OAUTH2_TOKEN_BASE_URL)\n+                 .append(tenantId)\n+                 .append(OAUTH2_TOKEN_POSTFIX);\n+\n+        StringBuilder requestBody = new StringBuilder();\n+        requestBody.append(GRANT_TYPE_FRAGMENT)\n+                   .append(CLIENT_ID_FRAGMENT).append(clientId)\n+                   .append(CLIENT_SECRET_FRAGMENT).append(clientSecret)\n+                   .append(RESOURCE_FRAGMENT).append(resource);\n+\n+        String body = post(oauth2Url.toString(), requestBody.toString(), \"application/x-www-form-urlencoded\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1MzMzOQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Njk3MzkzOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODo1ODoyMFrOHlMuHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTo0NjoxNVrOHnfT5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc2Nzc3Mg==", "bodyText": "Is this the only version that will be used for getting a token? If there are more versions available for this I would prefer us to use an expandable enum in future releases.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508767772", "createdAt": "2020-10-20T18:58:20Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ */\n+class AuthClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the Client ID fragment.\n+     */\n+    private static final String CLIENT_ID_FRAGMENT = \"&client_id=\";\n+\n+    /**\n+     * Stores the Client Secret fragment.\n+     */\n+    private static final String CLIENT_SECRET_FRAGMENT = \"&client_secret=\";\n+\n+    /**\n+     * Stores the Grant Type fragment.\n+     */\n+    private static final String GRANT_TYPE_FRAGMENT = \"grant_type=client_credentials\";\n+\n+    /**\n+     * Stores the Resource fragment.\n+     */\n+    private static final String RESOURCE_FRAGMENT = \"&resource=\";\n+\n+    /**\n+     * Stores the OAuth2 token base URL.\n+     */\n+    private static final String OAUTH2_TOKEN_BASE_URL = \"https://login.microsoftonline.com/\";\n+\n+    /**\n+     * Stores the OAuth2 token postfix.\n+     */\n+    private static final String OAUTH2_TOKEN_POSTFIX = \"/oauth2/token\";\n+\n+    /**\n+     * Stores the OAuth2 managed identity URL.\n+     */\n+    private static final String OAUTH2_MANAGED_IDENTITY_TOKEN_URL\n+        = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01\";\n+\n+    /**\n+     * Stores our logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(AuthClient.class.getName());\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor creates a default RestClient.\n+     * </p>\n+     */\n+    AuthClient() {\n+        super(RestClientFactory.createClient());\n+    }\n+\n+    /**\n+     * Get an access token for a managed identity.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource) {\n+        String result;\n+\n+        if (System.getenv(\"WEBSITE_SITE_NAME\") != null\n+            && !System.getenv(\"WEBSITE_SITE_NAME\").isEmpty()) {\n+            result = getAccessTokenOnAppService(resource);\n+        } else {\n+            result = getAccessTokenOnOthers(resource);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get an access token.\n+     *\n+     * @param resource the resource.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource, String tenantId,\n+                                 String clientId, String clientSecret) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessToken\", new Object[] {\n+            resource, tenantId, clientId, clientSecret });\n+        LOGGER.info(\"Getting access token using client ID / client secret\");\n+        String result = null;\n+\n+        StringBuilder oauth2Url = new StringBuilder();\n+        oauth2Url.append(OAUTH2_TOKEN_BASE_URL)\n+                 .append(tenantId)\n+                 .append(OAUTH2_TOKEN_POSTFIX);\n+\n+        StringBuilder requestBody = new StringBuilder();\n+        requestBody.append(GRANT_TYPE_FRAGMENT)\n+                   .append(CLIENT_ID_FRAGMENT).append(clientId)\n+                   .append(CLIENT_SECRET_FRAGMENT).append(clientSecret)\n+                   .append(RESOURCE_FRAGMENT).append(resource);\n+\n+        String body = post(oauth2Url.toString(), requestBody.toString(), \"application/x-www-form-urlencoded\");\n+        if (body != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            OAuthToken token = (OAuthToken) converter.fromJson(body, OAuthToken.class);\n+            result = token.getAccess_token();\n+        }\n+        LOGGER.log(FINER, \"Access token: {0}\", result);\n+        return result;\n+    }\n+\n+    /**\n+     * Get the access token on Azure App Service.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    private String getAccessTokenOnAppService(String resource) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessTokenOnAppService\", resource);\n+        LOGGER.info(\"Getting access token using managed identity based on MSI_SECRET\");\n+        String result = null;\n+\n+        StringBuilder url = new StringBuilder();\n+        url.append(System.getenv(\"MSI_ENDPOINT\"))\n+           .append(\"?api-version=2017-09-01\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE2OTUwOA==", "bodyText": "This will be indeed the only version as this code is not user configurable. This is by design so we eliminate user error.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511169508", "createdAt": "2020-10-23T21:46:15Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ */\n+class AuthClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the Client ID fragment.\n+     */\n+    private static final String CLIENT_ID_FRAGMENT = \"&client_id=\";\n+\n+    /**\n+     * Stores the Client Secret fragment.\n+     */\n+    private static final String CLIENT_SECRET_FRAGMENT = \"&client_secret=\";\n+\n+    /**\n+     * Stores the Grant Type fragment.\n+     */\n+    private static final String GRANT_TYPE_FRAGMENT = \"grant_type=client_credentials\";\n+\n+    /**\n+     * Stores the Resource fragment.\n+     */\n+    private static final String RESOURCE_FRAGMENT = \"&resource=\";\n+\n+    /**\n+     * Stores the OAuth2 token base URL.\n+     */\n+    private static final String OAUTH2_TOKEN_BASE_URL = \"https://login.microsoftonline.com/\";\n+\n+    /**\n+     * Stores the OAuth2 token postfix.\n+     */\n+    private static final String OAUTH2_TOKEN_POSTFIX = \"/oauth2/token\";\n+\n+    /**\n+     * Stores the OAuth2 managed identity URL.\n+     */\n+    private static final String OAUTH2_MANAGED_IDENTITY_TOKEN_URL\n+        = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01\";\n+\n+    /**\n+     * Stores our logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(AuthClient.class.getName());\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor creates a default RestClient.\n+     * </p>\n+     */\n+    AuthClient() {\n+        super(RestClientFactory.createClient());\n+    }\n+\n+    /**\n+     * Get an access token for a managed identity.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource) {\n+        String result;\n+\n+        if (System.getenv(\"WEBSITE_SITE_NAME\") != null\n+            && !System.getenv(\"WEBSITE_SITE_NAME\").isEmpty()) {\n+            result = getAccessTokenOnAppService(resource);\n+        } else {\n+            result = getAccessTokenOnOthers(resource);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get an access token.\n+     *\n+     * @param resource the resource.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource, String tenantId,\n+                                 String clientId, String clientSecret) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessToken\", new Object[] {\n+            resource, tenantId, clientId, clientSecret });\n+        LOGGER.info(\"Getting access token using client ID / client secret\");\n+        String result = null;\n+\n+        StringBuilder oauth2Url = new StringBuilder();\n+        oauth2Url.append(OAUTH2_TOKEN_BASE_URL)\n+                 .append(tenantId)\n+                 .append(OAUTH2_TOKEN_POSTFIX);\n+\n+        StringBuilder requestBody = new StringBuilder();\n+        requestBody.append(GRANT_TYPE_FRAGMENT)\n+                   .append(CLIENT_ID_FRAGMENT).append(clientId)\n+                   .append(CLIENT_SECRET_FRAGMENT).append(clientSecret)\n+                   .append(RESOURCE_FRAGMENT).append(resource);\n+\n+        String body = post(oauth2Url.toString(), requestBody.toString(), \"application/x-www-form-urlencoded\");\n+        if (body != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            OAuthToken token = (OAuthToken) converter.fromJson(body, OAuthToken.class);\n+            result = token.getAccess_token();\n+        }\n+        LOGGER.log(FINER, \"Access token: {0}\", result);\n+        return result;\n+    }\n+\n+    /**\n+     * Get the access token on Azure App Service.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    private String getAccessTokenOnAppService(String resource) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessTokenOnAppService\", resource);\n+        LOGGER.info(\"Getting access token using managed identity based on MSI_SECRET\");\n+        String result = null;\n+\n+        StringBuilder url = new StringBuilder();\n+        url.append(System.getenv(\"MSI_ENDPOINT\"))\n+           .append(\"?api-version=2017-09-01\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc2Nzc3Mg=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzAwNjk5OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTowNzoxNFrOHlNCQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTo0NDoxMVrOHnfQ4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3MjkzMQ==", "bodyText": "We should use a ServiceVersion enum like other SDKs do in future releases to support multiple versions.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508772931", "createdAt": "2020-10-20T19:07:14Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultClient.java", "diffHunk": "@@ -0,0 +1,244 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.CertificateBundle;\n+import com.azure.security.keyvault.jca.rest.CertificateItem;\n+import com.azure.security.keyvault.jca.rest.CertificateListResult;\n+import com.azure.security.keyvault.jca.rest.CertificatePolicy;\n+import com.azure.security.keyvault.jca.rest.KeyProperties;\n+import com.azure.security.keyvault.jca.rest.SecretBundle;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The REST client specific to Azure KeyVault.\n+ */\n+class KeyVaultClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultClient.class.getName());\n+\n+    /**\n+     * Stores the API version postfix.\n+     */\n+    private static final String API_VERSION_POSTFIX = \"?api-version=7.1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE2ODczNg==", "bodyText": "As this is completely hidden from the user and they can't configure it we do not need to support multiple versions. The project does need to be updated if the 7.1 would no longer be supported.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511168736", "createdAt": "2020-10-23T21:44:11Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultClient.java", "diffHunk": "@@ -0,0 +1,244 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.CertificateBundle;\n+import com.azure.security.keyvault.jca.rest.CertificateItem;\n+import com.azure.security.keyvault.jca.rest.CertificateListResult;\n+import com.azure.security.keyvault.jca.rest.CertificatePolicy;\n+import com.azure.security.keyvault.jca.rest.KeyProperties;\n+import com.azure.security.keyvault.jca.rest.SecretBundle;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The REST client specific to Azure KeyVault.\n+ */\n+class KeyVaultClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultClient.class.getName());\n+\n+    /**\n+     * Stores the API version postfix.\n+     */\n+    private static final String API_VERSION_POSTFIX = \"?api-version=7.1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3MjkzMQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzAxMTk1OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTowODo0MVrOHlNFaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDozOToxMVrOHnQvGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3MzczOQ==", "bodyText": "Even though it is technically a URI, in our Key Vault Java libraries we refer to this as a keyVaultUrl or vaultUrl, so I think we should be consistent to avoid confusing users.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 * Stores the KeyVault URI.\n          \n          \n            \n                 */\n          \n          \n            \n                private final String keyVaultUri;\n          \n          \n            \n                /**\n          \n          \n            \n                 * Stores the KeyVault URL.\n          \n          \n            \n                 */\n          \n          \n            \n                private final String keyVaultUrl;", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508773739", "createdAt": "2020-10-20T19:08:41Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultClient.java", "diffHunk": "@@ -0,0 +1,244 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.CertificateBundle;\n+import com.azure.security.keyvault.jca.rest.CertificateItem;\n+import com.azure.security.keyvault.jca.rest.CertificateListResult;\n+import com.azure.security.keyvault.jca.rest.CertificatePolicy;\n+import com.azure.security.keyvault.jca.rest.KeyProperties;\n+import com.azure.security.keyvault.jca.rest.SecretBundle;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The REST client specific to Azure KeyVault.\n+ */\n+class KeyVaultClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultClient.class.getName());\n+\n+    /**\n+     * Stores the API version postfix.\n+     */\n+    private static final String API_VERSION_POSTFIX = \"?api-version=7.1\";\n+\n+    /**\n+     * Stores the KeyVault URI.\n+     */\n+    private final String keyVaultUri;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkzMDcxNQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510930715", "createdAt": "2020-10-23T14:39:11Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultClient.java", "diffHunk": "@@ -0,0 +1,244 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.CertificateBundle;\n+import com.azure.security.keyvault.jca.rest.CertificateItem;\n+import com.azure.security.keyvault.jca.rest.CertificateListResult;\n+import com.azure.security.keyvault.jca.rest.CertificatePolicy;\n+import com.azure.security.keyvault.jca.rest.KeyProperties;\n+import com.azure.security.keyvault.jca.rest.SecretBundle;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The REST client specific to Azure KeyVault.\n+ */\n+class KeyVaultClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultClient.class.getName());\n+\n+    /**\n+     * Stores the API version postfix.\n+     */\n+    private static final String API_VERSION_POSTFIX = \"?api-version=7.1\";\n+\n+    /**\n+     * Stores the KeyVault URI.\n+     */\n+    private final String keyVaultUri;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3MzczOQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzEzNzgwOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTo0NDozNVrOHlORpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDo1MjowM1rOHnRSVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5MzI1NA==", "bodyText": "nit; If we already have the value of certificateBundle.getCer() in certificateString we can use the variable here.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    new ByteArrayInputStream(Base64.getDecoder().decode(certificateBundle.getCer()))\n          \n          \n            \n                                    new ByteArrayInputStream(Base64.getDecoder().decode(certificateString))", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508793254", "createdAt": "2020-10-20T19:44:35Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultClient.java", "diffHunk": "@@ -0,0 +1,244 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.CertificateBundle;\n+import com.azure.security.keyvault.jca.rest.CertificateItem;\n+import com.azure.security.keyvault.jca.rest.CertificateListResult;\n+import com.azure.security.keyvault.jca.rest.CertificatePolicy;\n+import com.azure.security.keyvault.jca.rest.KeyProperties;\n+import com.azure.security.keyvault.jca.rest.SecretBundle;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The REST client specific to Azure KeyVault.\n+ */\n+class KeyVaultClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultClient.class.getName());\n+\n+    /**\n+     * Stores the API version postfix.\n+     */\n+    private static final String API_VERSION_POSTFIX = \"?api-version=7.1\";\n+\n+    /**\n+     * Stores the KeyVault URI.\n+     */\n+    private final String keyVaultUri;\n+\n+    /**\n+     * Stores the tenant ID.\n+     */\n+    private String tenantId;\n+\n+    /**\n+     * Stores the client ID.\n+     */\n+    private String clientId;\n+\n+    /**\n+     * Stores the client secret.\n+     */\n+    private String clientSecret;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyVaultUri the KeyVault URI.\n+     */\n+    KeyVaultClient(String keyVaultUri) {\n+        super(RestClientFactory.createClient());\n+        LOGGER.log(INFO, \"Using KeyVault: {0}\", keyVaultUri);\n+        if (!keyVaultUri.endsWith(\"/\")) {\n+            keyVaultUri = keyVaultUri + \"/\";\n+        }\n+        this.keyVaultUri = keyVaultUri;\n+    }\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyVaultUri the KeyVault URI.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     */\n+    KeyVaultClient(final String keyVaultUri, final String tenantId, final String clientId, final String clientSecret) {\n+        this(keyVaultUri);\n+        this.tenantId = tenantId;\n+        this.clientId = clientId;\n+        this.clientSecret = clientSecret;\n+    }\n+\n+    /**\n+     * Get the access token.\n+     *\n+     * @return the access token.\n+     */\n+    private String getAccessToken() {\n+        LOGGER.entering(\"KeyVaultClient\", \"getAccessToken\");\n+        String accessToken = null;\n+        try {\n+            AuthClient authClient = new AuthClient();\n+            String resource = URLEncoder.encode(\"https://vault.azure.net\", \"UTF-8\");\n+            if (tenantId != null && clientId != null && clientSecret != null) {\n+                accessToken = authClient.getAccessToken(resource, tenantId, clientId, clientSecret);\n+            } else {\n+                accessToken = authClient.getAccessToken(resource);\n+            }\n+        } catch (UnsupportedEncodingException uee) {\n+            LOGGER.log(WARNING, \"Unsupported encoding\", uee);\n+        }\n+        LOGGER.exiting(\"KeyVaultClient\", \"getAccessToken\", accessToken);\n+        return accessToken;\n+    }\n+\n+    /**\n+     * Get the list of aliases.\n+     *\n+     * @return the list of aliases.\n+     */\n+    public List<String> getAliases() {\n+        ArrayList<String> result = new ArrayList<>();\n+        HashMap<String, String> headers = new HashMap<>();\n+        headers.put(\"Authorization\", \"Bearer \" + getAccessToken());\n+        String url = String.format(\"%scertificates%s\", keyVaultUri, API_VERSION_POSTFIX);\n+        String response = get(url, headers);\n+        CertificateListResult certificateListResult = null;\n+        if (response != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            certificateListResult = (CertificateListResult) converter.fromJson(response, CertificateListResult.class);\n+        }\n+        if (certificateListResult != null && certificateListResult.getValue().size() > 0) {\n+            for (CertificateItem certificateItem : certificateListResult.getValue()) {\n+                String id = certificateItem.getId();\n+                String alias = id.substring(id.indexOf(\"certificates\") + \"certificates\".length() + 1);\n+                result.add(alias);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get the certificate bundle.\n+     *\n+     * @param alias the alias.\n+     * @return the certificate bundle.\n+     */\n+    private CertificateBundle getCertificateBundle(String alias) {\n+        CertificateBundle result = null;\n+        HashMap<String, String> headers = new HashMap<>();\n+        headers.put(\"Authorization\", \"Bearer \" + getAccessToken());\n+        String url = String.format(\"%scertificates/%s%s\", keyVaultUri, alias, API_VERSION_POSTFIX);\n+        String response = get(url, headers);\n+        if (response != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            result = (CertificateBundle) converter.fromJson(response, CertificateBundle.class);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get the certificate.\n+     *\n+     * @param alias the alias.\n+     * @return the certificate, or null if not found.\n+     */\n+    public Certificate getCertificate(String alias) {\n+        LOGGER.entering(\"KeyVaultClient\", \"getCertificate\", alias);\n+        LOGGER.log(INFO, \"Getting certificate for alias: {0}\", alias);\n+        X509Certificate certificate = null;\n+        CertificateBundle certificateBundle = getCertificateBundle(alias);\n+        if (certificateBundle != null) {\n+            String certificateString = certificateBundle.getCer();\n+            if (certificateString != null) {\n+                try {\n+                    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+                    certificate = (X509Certificate) cf.generateCertificate(\n+                        new ByteArrayInputStream(Base64.getDecoder().decode(certificateBundle.getCer()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkzOTczNA==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510939734", "createdAt": "2020-10-23T14:52:03Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultClient.java", "diffHunk": "@@ -0,0 +1,244 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.CertificateBundle;\n+import com.azure.security.keyvault.jca.rest.CertificateItem;\n+import com.azure.security.keyvault.jca.rest.CertificateListResult;\n+import com.azure.security.keyvault.jca.rest.CertificatePolicy;\n+import com.azure.security.keyvault.jca.rest.KeyProperties;\n+import com.azure.security.keyvault.jca.rest.SecretBundle;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The REST client specific to Azure KeyVault.\n+ */\n+class KeyVaultClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultClient.class.getName());\n+\n+    /**\n+     * Stores the API version postfix.\n+     */\n+    private static final String API_VERSION_POSTFIX = \"?api-version=7.1\";\n+\n+    /**\n+     * Stores the KeyVault URI.\n+     */\n+    private final String keyVaultUri;\n+\n+    /**\n+     * Stores the tenant ID.\n+     */\n+    private String tenantId;\n+\n+    /**\n+     * Stores the client ID.\n+     */\n+    private String clientId;\n+\n+    /**\n+     * Stores the client secret.\n+     */\n+    private String clientSecret;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyVaultUri the KeyVault URI.\n+     */\n+    KeyVaultClient(String keyVaultUri) {\n+        super(RestClientFactory.createClient());\n+        LOGGER.log(INFO, \"Using KeyVault: {0}\", keyVaultUri);\n+        if (!keyVaultUri.endsWith(\"/\")) {\n+            keyVaultUri = keyVaultUri + \"/\";\n+        }\n+        this.keyVaultUri = keyVaultUri;\n+    }\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyVaultUri the KeyVault URI.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     */\n+    KeyVaultClient(final String keyVaultUri, final String tenantId, final String clientId, final String clientSecret) {\n+        this(keyVaultUri);\n+        this.tenantId = tenantId;\n+        this.clientId = clientId;\n+        this.clientSecret = clientSecret;\n+    }\n+\n+    /**\n+     * Get the access token.\n+     *\n+     * @return the access token.\n+     */\n+    private String getAccessToken() {\n+        LOGGER.entering(\"KeyVaultClient\", \"getAccessToken\");\n+        String accessToken = null;\n+        try {\n+            AuthClient authClient = new AuthClient();\n+            String resource = URLEncoder.encode(\"https://vault.azure.net\", \"UTF-8\");\n+            if (tenantId != null && clientId != null && clientSecret != null) {\n+                accessToken = authClient.getAccessToken(resource, tenantId, clientId, clientSecret);\n+            } else {\n+                accessToken = authClient.getAccessToken(resource);\n+            }\n+        } catch (UnsupportedEncodingException uee) {\n+            LOGGER.log(WARNING, \"Unsupported encoding\", uee);\n+        }\n+        LOGGER.exiting(\"KeyVaultClient\", \"getAccessToken\", accessToken);\n+        return accessToken;\n+    }\n+\n+    /**\n+     * Get the list of aliases.\n+     *\n+     * @return the list of aliases.\n+     */\n+    public List<String> getAliases() {\n+        ArrayList<String> result = new ArrayList<>();\n+        HashMap<String, String> headers = new HashMap<>();\n+        headers.put(\"Authorization\", \"Bearer \" + getAccessToken());\n+        String url = String.format(\"%scertificates%s\", keyVaultUri, API_VERSION_POSTFIX);\n+        String response = get(url, headers);\n+        CertificateListResult certificateListResult = null;\n+        if (response != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            certificateListResult = (CertificateListResult) converter.fromJson(response, CertificateListResult.class);\n+        }\n+        if (certificateListResult != null && certificateListResult.getValue().size() > 0) {\n+            for (CertificateItem certificateItem : certificateListResult.getValue()) {\n+                String id = certificateItem.getId();\n+                String alias = id.substring(id.indexOf(\"certificates\") + \"certificates\".length() + 1);\n+                result.add(alias);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get the certificate bundle.\n+     *\n+     * @param alias the alias.\n+     * @return the certificate bundle.\n+     */\n+    private CertificateBundle getCertificateBundle(String alias) {\n+        CertificateBundle result = null;\n+        HashMap<String, String> headers = new HashMap<>();\n+        headers.put(\"Authorization\", \"Bearer \" + getAccessToken());\n+        String url = String.format(\"%scertificates/%s%s\", keyVaultUri, alias, API_VERSION_POSTFIX);\n+        String response = get(url, headers);\n+        if (response != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            result = (CertificateBundle) converter.fromJson(response, CertificateBundle.class);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get the certificate.\n+     *\n+     * @param alias the alias.\n+     * @return the certificate, or null if not found.\n+     */\n+    public Certificate getCertificate(String alias) {\n+        LOGGER.entering(\"KeyVaultClient\", \"getCertificate\", alias);\n+        LOGGER.log(INFO, \"Getting certificate for alias: {0}\", alias);\n+        X509Certificate certificate = null;\n+        CertificateBundle certificateBundle = getCertificateBundle(alias);\n+        if (certificateBundle != null) {\n+            String certificateString = certificateBundle.getCer();\n+            if (certificateString != null) {\n+                try {\n+                    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+                    certificate = (X509Certificate) cf.generateCertificate(\n+                        new ByteArrayInputStream(Base64.getDecoder().decode(certificateBundle.getCer()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5MzI1NA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzE1MDgzOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTo0ODoxNFrOHlOZvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo0OTowOFrOHmzQ0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5NTMyNg==", "bodyText": "I'm not entirely familiar with the KeyStore class, is it possible this can throw a NoSuchElementException in this case?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508795326", "createdAt": "2020-10-20T19:48:14Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultClient.java", "diffHunk": "@@ -0,0 +1,244 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.CertificateBundle;\n+import com.azure.security.keyvault.jca.rest.CertificateItem;\n+import com.azure.security.keyvault.jca.rest.CertificateListResult;\n+import com.azure.security.keyvault.jca.rest.CertificatePolicy;\n+import com.azure.security.keyvault.jca.rest.KeyProperties;\n+import com.azure.security.keyvault.jca.rest.SecretBundle;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The REST client specific to Azure KeyVault.\n+ */\n+class KeyVaultClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultClient.class.getName());\n+\n+    /**\n+     * Stores the API version postfix.\n+     */\n+    private static final String API_VERSION_POSTFIX = \"?api-version=7.1\";\n+\n+    /**\n+     * Stores the KeyVault URI.\n+     */\n+    private final String keyVaultUri;\n+\n+    /**\n+     * Stores the tenant ID.\n+     */\n+    private String tenantId;\n+\n+    /**\n+     * Stores the client ID.\n+     */\n+    private String clientId;\n+\n+    /**\n+     * Stores the client secret.\n+     */\n+    private String clientSecret;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyVaultUri the KeyVault URI.\n+     */\n+    KeyVaultClient(String keyVaultUri) {\n+        super(RestClientFactory.createClient());\n+        LOGGER.log(INFO, \"Using KeyVault: {0}\", keyVaultUri);\n+        if (!keyVaultUri.endsWith(\"/\")) {\n+            keyVaultUri = keyVaultUri + \"/\";\n+        }\n+        this.keyVaultUri = keyVaultUri;\n+    }\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyVaultUri the KeyVault URI.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     */\n+    KeyVaultClient(final String keyVaultUri, final String tenantId, final String clientId, final String clientSecret) {\n+        this(keyVaultUri);\n+        this.tenantId = tenantId;\n+        this.clientId = clientId;\n+        this.clientSecret = clientSecret;\n+    }\n+\n+    /**\n+     * Get the access token.\n+     *\n+     * @return the access token.\n+     */\n+    private String getAccessToken() {\n+        LOGGER.entering(\"KeyVaultClient\", \"getAccessToken\");\n+        String accessToken = null;\n+        try {\n+            AuthClient authClient = new AuthClient();\n+            String resource = URLEncoder.encode(\"https://vault.azure.net\", \"UTF-8\");\n+            if (tenantId != null && clientId != null && clientSecret != null) {\n+                accessToken = authClient.getAccessToken(resource, tenantId, clientId, clientSecret);\n+            } else {\n+                accessToken = authClient.getAccessToken(resource);\n+            }\n+        } catch (UnsupportedEncodingException uee) {\n+            LOGGER.log(WARNING, \"Unsupported encoding\", uee);\n+        }\n+        LOGGER.exiting(\"KeyVaultClient\", \"getAccessToken\", accessToken);\n+        return accessToken;\n+    }\n+\n+    /**\n+     * Get the list of aliases.\n+     *\n+     * @return the list of aliases.\n+     */\n+    public List<String> getAliases() {\n+        ArrayList<String> result = new ArrayList<>();\n+        HashMap<String, String> headers = new HashMap<>();\n+        headers.put(\"Authorization\", \"Bearer \" + getAccessToken());\n+        String url = String.format(\"%scertificates%s\", keyVaultUri, API_VERSION_POSTFIX);\n+        String response = get(url, headers);\n+        CertificateListResult certificateListResult = null;\n+        if (response != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            certificateListResult = (CertificateListResult) converter.fromJson(response, CertificateListResult.class);\n+        }\n+        if (certificateListResult != null && certificateListResult.getValue().size() > 0) {\n+            for (CertificateItem certificateItem : certificateListResult.getValue()) {\n+                String id = certificateItem.getId();\n+                String alias = id.substring(id.indexOf(\"certificates\") + \"certificates\".length() + 1);\n+                result.add(alias);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get the certificate bundle.\n+     *\n+     * @param alias the alias.\n+     * @return the certificate bundle.\n+     */\n+    private CertificateBundle getCertificateBundle(String alias) {\n+        CertificateBundle result = null;\n+        HashMap<String, String> headers = new HashMap<>();\n+        headers.put(\"Authorization\", \"Bearer \" + getAccessToken());\n+        String url = String.format(\"%scertificates/%s%s\", keyVaultUri, alias, API_VERSION_POSTFIX);\n+        String response = get(url, headers);\n+        if (response != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            result = (CertificateBundle) converter.fromJson(response, CertificateBundle.class);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get the certificate.\n+     *\n+     * @param alias the alias.\n+     * @return the certificate, or null if not found.\n+     */\n+    public Certificate getCertificate(String alias) {\n+        LOGGER.entering(\"KeyVaultClient\", \"getCertificate\", alias);\n+        LOGGER.log(INFO, \"Getting certificate for alias: {0}\", alias);\n+        X509Certificate certificate = null;\n+        CertificateBundle certificateBundle = getCertificateBundle(alias);\n+        if (certificateBundle != null) {\n+            String certificateString = certificateBundle.getCer();\n+            if (certificateString != null) {\n+                try {\n+                    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+                    certificate = (X509Certificate) cf.generateCertificate(\n+                        new ByteArrayInputStream(Base64.getDecoder().decode(certificateBundle.getCer()))\n+                    );\n+                } catch (CertificateException ce) {\n+                    LOGGER.log(WARNING, \"Certificate error\", ce);\n+                }\n+            }\n+        }\n+        LOGGER.exiting(\"KeyVaultClient\", \"getCertificate\", certificate);\n+        return certificate;\n+    }\n+\n+    /**\n+     * Get the key.\n+     *\n+     * @param alias the alias.\n+     * @param password the password.\n+     * @return the key.\n+     */\n+    public Key getKey(String alias, char[] password) {\n+        LOGGER.entering(\"KeyVaultClient\", \"getKey\", new Object[] { alias, password });\n+        LOGGER.log(INFO, \"Getting key for alias: {0}\", alias);\n+        Key key = null;\n+        CertificateBundle certificateBundle = getCertificateBundle(alias);\n+        boolean isExportable = Optional.ofNullable(certificateBundle)\n+                                       .map(CertificateBundle::getPolicy)\n+                                       .map(CertificatePolicy::getKey_props)\n+                                       .map(KeyProperties::isExportable)\n+                                       .orElse(false);\n+        if (isExportable) {\n+            // Because the certificate is exportable the private key is\n+            // available. So we'll use the KeyVault Secrets API to get the \n+            // private key.\n+            String certificateSecretUri = certificateBundle.getSid();\n+            HashMap<String, String> headers = new HashMap<>();\n+            headers.put(\"Authorization\", \"Bearer \" + getAccessToken());\n+            String body = get(certificateSecretUri + API_VERSION_POSTFIX, headers);\n+            if (body != null) {\n+                JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+                SecretBundle secretBundle = (SecretBundle) converter.fromJson(body, SecretBundle.class);\n+                try {\n+                    KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n+                    keyStore.load(\n+                        new ByteArrayInputStream(Base64.getDecoder().decode(secretBundle.getValue())),\n+                        \"\".toCharArray()\n+                    );\n+                    alias = keyStore.aliases().nextElement();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NzgyNA==", "bodyText": "In this particular case because we create a new Keystore and we load a specifically with just one certificate `NoSuchElementException' would not be thrown, because if loading failed it would have triggered the catch block.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510447824", "createdAt": "2020-10-22T20:49:08Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultClient.java", "diffHunk": "@@ -0,0 +1,244 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.CertificateBundle;\n+import com.azure.security.keyvault.jca.rest.CertificateItem;\n+import com.azure.security.keyvault.jca.rest.CertificateListResult;\n+import com.azure.security.keyvault.jca.rest.CertificatePolicy;\n+import com.azure.security.keyvault.jca.rest.KeyProperties;\n+import com.azure.security.keyvault.jca.rest.SecretBundle;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The REST client specific to Azure KeyVault.\n+ */\n+class KeyVaultClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultClient.class.getName());\n+\n+    /**\n+     * Stores the API version postfix.\n+     */\n+    private static final String API_VERSION_POSTFIX = \"?api-version=7.1\";\n+\n+    /**\n+     * Stores the KeyVault URI.\n+     */\n+    private final String keyVaultUri;\n+\n+    /**\n+     * Stores the tenant ID.\n+     */\n+    private String tenantId;\n+\n+    /**\n+     * Stores the client ID.\n+     */\n+    private String clientId;\n+\n+    /**\n+     * Stores the client secret.\n+     */\n+    private String clientSecret;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyVaultUri the KeyVault URI.\n+     */\n+    KeyVaultClient(String keyVaultUri) {\n+        super(RestClientFactory.createClient());\n+        LOGGER.log(INFO, \"Using KeyVault: {0}\", keyVaultUri);\n+        if (!keyVaultUri.endsWith(\"/\")) {\n+            keyVaultUri = keyVaultUri + \"/\";\n+        }\n+        this.keyVaultUri = keyVaultUri;\n+    }\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyVaultUri the KeyVault URI.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     */\n+    KeyVaultClient(final String keyVaultUri, final String tenantId, final String clientId, final String clientSecret) {\n+        this(keyVaultUri);\n+        this.tenantId = tenantId;\n+        this.clientId = clientId;\n+        this.clientSecret = clientSecret;\n+    }\n+\n+    /**\n+     * Get the access token.\n+     *\n+     * @return the access token.\n+     */\n+    private String getAccessToken() {\n+        LOGGER.entering(\"KeyVaultClient\", \"getAccessToken\");\n+        String accessToken = null;\n+        try {\n+            AuthClient authClient = new AuthClient();\n+            String resource = URLEncoder.encode(\"https://vault.azure.net\", \"UTF-8\");\n+            if (tenantId != null && clientId != null && clientSecret != null) {\n+                accessToken = authClient.getAccessToken(resource, tenantId, clientId, clientSecret);\n+            } else {\n+                accessToken = authClient.getAccessToken(resource);\n+            }\n+        } catch (UnsupportedEncodingException uee) {\n+            LOGGER.log(WARNING, \"Unsupported encoding\", uee);\n+        }\n+        LOGGER.exiting(\"KeyVaultClient\", \"getAccessToken\", accessToken);\n+        return accessToken;\n+    }\n+\n+    /**\n+     * Get the list of aliases.\n+     *\n+     * @return the list of aliases.\n+     */\n+    public List<String> getAliases() {\n+        ArrayList<String> result = new ArrayList<>();\n+        HashMap<String, String> headers = new HashMap<>();\n+        headers.put(\"Authorization\", \"Bearer \" + getAccessToken());\n+        String url = String.format(\"%scertificates%s\", keyVaultUri, API_VERSION_POSTFIX);\n+        String response = get(url, headers);\n+        CertificateListResult certificateListResult = null;\n+        if (response != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            certificateListResult = (CertificateListResult) converter.fromJson(response, CertificateListResult.class);\n+        }\n+        if (certificateListResult != null && certificateListResult.getValue().size() > 0) {\n+            for (CertificateItem certificateItem : certificateListResult.getValue()) {\n+                String id = certificateItem.getId();\n+                String alias = id.substring(id.indexOf(\"certificates\") + \"certificates\".length() + 1);\n+                result.add(alias);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get the certificate bundle.\n+     *\n+     * @param alias the alias.\n+     * @return the certificate bundle.\n+     */\n+    private CertificateBundle getCertificateBundle(String alias) {\n+        CertificateBundle result = null;\n+        HashMap<String, String> headers = new HashMap<>();\n+        headers.put(\"Authorization\", \"Bearer \" + getAccessToken());\n+        String url = String.format(\"%scertificates/%s%s\", keyVaultUri, alias, API_VERSION_POSTFIX);\n+        String response = get(url, headers);\n+        if (response != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            result = (CertificateBundle) converter.fromJson(response, CertificateBundle.class);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get the certificate.\n+     *\n+     * @param alias the alias.\n+     * @return the certificate, or null if not found.\n+     */\n+    public Certificate getCertificate(String alias) {\n+        LOGGER.entering(\"KeyVaultClient\", \"getCertificate\", alias);\n+        LOGGER.log(INFO, \"Getting certificate for alias: {0}\", alias);\n+        X509Certificate certificate = null;\n+        CertificateBundle certificateBundle = getCertificateBundle(alias);\n+        if (certificateBundle != null) {\n+            String certificateString = certificateBundle.getCer();\n+            if (certificateString != null) {\n+                try {\n+                    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+                    certificate = (X509Certificate) cf.generateCertificate(\n+                        new ByteArrayInputStream(Base64.getDecoder().decode(certificateBundle.getCer()))\n+                    );\n+                } catch (CertificateException ce) {\n+                    LOGGER.log(WARNING, \"Certificate error\", ce);\n+                }\n+            }\n+        }\n+        LOGGER.exiting(\"KeyVaultClient\", \"getCertificate\", certificate);\n+        return certificate;\n+    }\n+\n+    /**\n+     * Get the key.\n+     *\n+     * @param alias the alias.\n+     * @param password the password.\n+     * @return the key.\n+     */\n+    public Key getKey(String alias, char[] password) {\n+        LOGGER.entering(\"KeyVaultClient\", \"getKey\", new Object[] { alias, password });\n+        LOGGER.log(INFO, \"Getting key for alias: {0}\", alias);\n+        Key key = null;\n+        CertificateBundle certificateBundle = getCertificateBundle(alias);\n+        boolean isExportable = Optional.ofNullable(certificateBundle)\n+                                       .map(CertificateBundle::getPolicy)\n+                                       .map(CertificatePolicy::getKey_props)\n+                                       .map(KeyProperties::isExportable)\n+                                       .orElse(false);\n+        if (isExportable) {\n+            // Because the certificate is exportable the private key is\n+            // available. So we'll use the KeyVault Secrets API to get the \n+            // private key.\n+            String certificateSecretUri = certificateBundle.getSid();\n+            HashMap<String, String> headers = new HashMap<>();\n+            headers.put(\"Authorization\", \"Bearer \" + getAccessToken());\n+            String body = get(certificateSecretUri + API_VERSION_POSTFIX, headers);\n+            if (body != null) {\n+                JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+                SecretBundle secretBundle = (SecretBundle) converter.fromJson(body, SecretBundle.class);\n+                try {\n+                    KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n+                    keyStore.load(\n+                        new ByteArrayInputStream(Base64.getDecoder().decode(secretBundle.getValue())),\n+                        \"\".toCharArray()\n+                    );\n+                    alias = keyStore.aliases().nextElement();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5NTMyNg=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzIyNjM3OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDowOTozOVrOHlPIdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDowOTozOVrOHlPIdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwNzI4Ng==", "bodyText": "Is this intended to work against clouds other than Azure Public Cloud? If so this would need to be configurable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508807286", "createdAt": "2020-10-20T20:09:39Z", "author": {"login": "schaabs"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ */\n+class AuthClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the Client ID fragment.\n+     */\n+    private static final String CLIENT_ID_FRAGMENT = \"&client_id=\";\n+\n+    /**\n+     * Stores the Client Secret fragment.\n+     */\n+    private static final String CLIENT_SECRET_FRAGMENT = \"&client_secret=\";\n+\n+    /**\n+     * Stores the Grant Type fragment.\n+     */\n+    private static final String GRANT_TYPE_FRAGMENT = \"grant_type=client_credentials\";\n+\n+    /**\n+     * Stores the Resource fragment.\n+     */\n+    private static final String RESOURCE_FRAGMENT = \"&resource=\";\n+\n+    /**\n+     * Stores the OAuth2 token base URL.\n+     */\n+    private static final String OAUTH2_TOKEN_BASE_URL = \"https://login.microsoftonline.com/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzI2MzQxOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDoyMDoyOVrOHlPe2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDoyMDoyOVrOHlPe2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxMzAxNw==", "bodyText": "Certificates downloaded from Key Vault through the get secret API might be in PKCS12 or PEM format. These can be differentiated by the by the contentType of the secret bundle.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508813017", "createdAt": "2020-10-20T20:20:29Z", "author": {"login": "schaabs"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultClient.java", "diffHunk": "@@ -0,0 +1,244 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.CertificateBundle;\n+import com.azure.security.keyvault.jca.rest.CertificateItem;\n+import com.azure.security.keyvault.jca.rest.CertificateListResult;\n+import com.azure.security.keyvault.jca.rest.CertificatePolicy;\n+import com.azure.security.keyvault.jca.rest.KeyProperties;\n+import com.azure.security.keyvault.jca.rest.SecretBundle;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The REST client specific to Azure KeyVault.\n+ */\n+class KeyVaultClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultClient.class.getName());\n+\n+    /**\n+     * Stores the API version postfix.\n+     */\n+    private static final String API_VERSION_POSTFIX = \"?api-version=7.1\";\n+\n+    /**\n+     * Stores the KeyVault URI.\n+     */\n+    private final String keyVaultUri;\n+\n+    /**\n+     * Stores the tenant ID.\n+     */\n+    private String tenantId;\n+\n+    /**\n+     * Stores the client ID.\n+     */\n+    private String clientId;\n+\n+    /**\n+     * Stores the client secret.\n+     */\n+    private String clientSecret;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyVaultUri the KeyVault URI.\n+     */\n+    KeyVaultClient(String keyVaultUri) {\n+        super(RestClientFactory.createClient());\n+        LOGGER.log(INFO, \"Using KeyVault: {0}\", keyVaultUri);\n+        if (!keyVaultUri.endsWith(\"/\")) {\n+            keyVaultUri = keyVaultUri + \"/\";\n+        }\n+        this.keyVaultUri = keyVaultUri;\n+    }\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyVaultUri the KeyVault URI.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     */\n+    KeyVaultClient(final String keyVaultUri, final String tenantId, final String clientId, final String clientSecret) {\n+        this(keyVaultUri);\n+        this.tenantId = tenantId;\n+        this.clientId = clientId;\n+        this.clientSecret = clientSecret;\n+    }\n+\n+    /**\n+     * Get the access token.\n+     *\n+     * @return the access token.\n+     */\n+    private String getAccessToken() {\n+        LOGGER.entering(\"KeyVaultClient\", \"getAccessToken\");\n+        String accessToken = null;\n+        try {\n+            AuthClient authClient = new AuthClient();\n+            String resource = URLEncoder.encode(\"https://vault.azure.net\", \"UTF-8\");\n+            if (tenantId != null && clientId != null && clientSecret != null) {\n+                accessToken = authClient.getAccessToken(resource, tenantId, clientId, clientSecret);\n+            } else {\n+                accessToken = authClient.getAccessToken(resource);\n+            }\n+        } catch (UnsupportedEncodingException uee) {\n+            LOGGER.log(WARNING, \"Unsupported encoding\", uee);\n+        }\n+        LOGGER.exiting(\"KeyVaultClient\", \"getAccessToken\", accessToken);\n+        return accessToken;\n+    }\n+\n+    /**\n+     * Get the list of aliases.\n+     *\n+     * @return the list of aliases.\n+     */\n+    public List<String> getAliases() {\n+        ArrayList<String> result = new ArrayList<>();\n+        HashMap<String, String> headers = new HashMap<>();\n+        headers.put(\"Authorization\", \"Bearer \" + getAccessToken());\n+        String url = String.format(\"%scertificates%s\", keyVaultUri, API_VERSION_POSTFIX);\n+        String response = get(url, headers);\n+        CertificateListResult certificateListResult = null;\n+        if (response != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            certificateListResult = (CertificateListResult) converter.fromJson(response, CertificateListResult.class);\n+        }\n+        if (certificateListResult != null && certificateListResult.getValue().size() > 0) {\n+            for (CertificateItem certificateItem : certificateListResult.getValue()) {\n+                String id = certificateItem.getId();\n+                String alias = id.substring(id.indexOf(\"certificates\") + \"certificates\".length() + 1);\n+                result.add(alias);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get the certificate bundle.\n+     *\n+     * @param alias the alias.\n+     * @return the certificate bundle.\n+     */\n+    private CertificateBundle getCertificateBundle(String alias) {\n+        CertificateBundle result = null;\n+        HashMap<String, String> headers = new HashMap<>();\n+        headers.put(\"Authorization\", \"Bearer \" + getAccessToken());\n+        String url = String.format(\"%scertificates/%s%s\", keyVaultUri, alias, API_VERSION_POSTFIX);\n+        String response = get(url, headers);\n+        if (response != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            result = (CertificateBundle) converter.fromJson(response, CertificateBundle.class);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get the certificate.\n+     *\n+     * @param alias the alias.\n+     * @return the certificate, or null if not found.\n+     */\n+    public Certificate getCertificate(String alias) {\n+        LOGGER.entering(\"KeyVaultClient\", \"getCertificate\", alias);\n+        LOGGER.log(INFO, \"Getting certificate for alias: {0}\", alias);\n+        X509Certificate certificate = null;\n+        CertificateBundle certificateBundle = getCertificateBundle(alias);\n+        if (certificateBundle != null) {\n+            String certificateString = certificateBundle.getCer();\n+            if (certificateString != null) {\n+                try {\n+                    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+                    certificate = (X509Certificate) cf.generateCertificate(\n+                        new ByteArrayInputStream(Base64.getDecoder().decode(certificateBundle.getCer()))\n+                    );\n+                } catch (CertificateException ce) {\n+                    LOGGER.log(WARNING, \"Certificate error\", ce);\n+                }\n+            }\n+        }\n+        LOGGER.exiting(\"KeyVaultClient\", \"getCertificate\", certificate);\n+        return certificate;\n+    }\n+\n+    /**\n+     * Get the key.\n+     *\n+     * @param alias the alias.\n+     * @param password the password.\n+     * @return the key.\n+     */\n+    public Key getKey(String alias, char[] password) {\n+        LOGGER.entering(\"KeyVaultClient\", \"getKey\", new Object[] { alias, password });\n+        LOGGER.log(INFO, \"Getting key for alias: {0}\", alias);\n+        Key key = null;\n+        CertificateBundle certificateBundle = getCertificateBundle(alias);\n+        boolean isExportable = Optional.ofNullable(certificateBundle)\n+                                       .map(CertificateBundle::getPolicy)\n+                                       .map(CertificatePolicy::getKey_props)\n+                                       .map(KeyProperties::isExportable)\n+                                       .orElse(false);\n+        if (isExportable) {\n+            // Because the certificate is exportable the private key is\n+            // available. So we'll use the KeyVault Secrets API to get the \n+            // private key.\n+            String certificateSecretUri = certificateBundle.getSid();\n+            HashMap<String, String> headers = new HashMap<>();\n+            headers.put(\"Authorization\", \"Bearer \" + getAccessToken());\n+            String body = get(certificateSecretUri + API_VERSION_POSTFIX, headers);\n+            if (body != null) {\n+                JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+                SecretBundle secretBundle = (SecretBundle) converter.fromJson(body, SecretBundle.class);\n+                try {\n+                    KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzI5NjM2OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDoyODoxM1rOHlPy8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODo1MTo0MFrOHmvY6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxODE2Mg==", "bodyText": "I believe the resource string will need to be url encoded no?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508818162", "createdAt": "2020-10-20T20:28:13Z", "author": {"login": "schaabs"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ */\n+class AuthClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the Client ID fragment.\n+     */\n+    private static final String CLIENT_ID_FRAGMENT = \"&client_id=\";\n+\n+    /**\n+     * Stores the Client Secret fragment.\n+     */\n+    private static final String CLIENT_SECRET_FRAGMENT = \"&client_secret=\";\n+\n+    /**\n+     * Stores the Grant Type fragment.\n+     */\n+    private static final String GRANT_TYPE_FRAGMENT = \"grant_type=client_credentials\";\n+\n+    /**\n+     * Stores the Resource fragment.\n+     */\n+    private static final String RESOURCE_FRAGMENT = \"&resource=\";\n+\n+    /**\n+     * Stores the OAuth2 token base URL.\n+     */\n+    private static final String OAUTH2_TOKEN_BASE_URL = \"https://login.microsoftonline.com/\";\n+\n+    /**\n+     * Stores the OAuth2 token postfix.\n+     */\n+    private static final String OAUTH2_TOKEN_POSTFIX = \"/oauth2/token\";\n+\n+    /**\n+     * Stores the OAuth2 managed identity URL.\n+     */\n+    private static final String OAUTH2_MANAGED_IDENTITY_TOKEN_URL\n+        = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01\";\n+\n+    /**\n+     * Stores our logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(AuthClient.class.getName());\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor creates a default RestClient.\n+     * </p>\n+     */\n+    AuthClient() {\n+        super(RestClientFactory.createClient());\n+    }\n+\n+    /**\n+     * Get an access token for a managed identity.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource) {\n+        String result;\n+\n+        if (System.getenv(\"WEBSITE_SITE_NAME\") != null\n+            && !System.getenv(\"WEBSITE_SITE_NAME\").isEmpty()) {\n+            result = getAccessTokenOnAppService(resource);\n+        } else {\n+            result = getAccessTokenOnOthers(resource);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get an access token.\n+     *\n+     * @param resource the resource.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource, String tenantId,\n+                                 String clientId, String clientSecret) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessToken\", new Object[] {\n+            resource, tenantId, clientId, clientSecret });\n+        LOGGER.info(\"Getting access token using client ID / client secret\");\n+        String result = null;\n+\n+        StringBuilder oauth2Url = new StringBuilder();\n+        oauth2Url.append(OAUTH2_TOKEN_BASE_URL)\n+                 .append(tenantId)\n+                 .append(OAUTH2_TOKEN_POSTFIX);\n+\n+        StringBuilder requestBody = new StringBuilder();\n+        requestBody.append(GRANT_TYPE_FRAGMENT)\n+                   .append(CLIENT_ID_FRAGMENT).append(clientId)\n+                   .append(CLIENT_SECRET_FRAGMENT).append(clientSecret)\n+                   .append(RESOURCE_FRAGMENT).append(resource);\n+\n+        String body = post(oauth2Url.toString(), requestBody.toString(), \"application/x-www-form-urlencoded\");\n+        if (body != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            OAuthToken token = (OAuthToken) converter.fromJson(body, OAuthToken.class);\n+            result = token.getAccess_token();\n+        }\n+        LOGGER.log(FINER, \"Access token: {0}\", result);\n+        return result;\n+    }\n+\n+    /**\n+     * Get the access token on Azure App Service.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    private String getAccessTokenOnAppService(String resource) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessTokenOnAppService\", resource);\n+        LOGGER.info(\"Getting access token using managed identity based on MSI_SECRET\");\n+        String result = null;\n+\n+        StringBuilder url = new StringBuilder();\n+        url.append(System.getenv(\"MSI_ENDPOINT\"))\n+           .append(\"?api-version=2017-09-01\")\n+           .append(RESOURCE_FRAGMENT).append(resource);\n+\n+        HashMap<String, String> headers = new HashMap<>();\n+        headers.put(\"Metadata\", \"true\");\n+        headers.put(\"Secret\", System.getenv(\"MSI_SECRET\"));\n+        String body = get(url.toString(), headers);\n+\n+        if (body != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            OAuthToken token = (OAuthToken) converter.fromJson(body, OAuthToken.class);\n+            result = token.getAccess_token();\n+        }\n+        LOGGER.exiting(\"AuthClient\", \"getAccessTokenOnAppService\", result);\n+        return result;\n+    }\n+\n+    /**\n+     * Get the authorization token on everything else but Azure App Service.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    private String getAccessTokenOnOthers(String resource) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessTokenOnOthers\", resource);\n+        LOGGER.info(\"Getting access token using managed identity\");\n+        String result = null;\n+\n+        StringBuilder url = new StringBuilder();\n+        url.append(OAUTH2_MANAGED_IDENTITY_TOKEN_URL)\n+           .append(RESOURCE_FRAGMENT).append(resource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4NDM2Mw==", "bodyText": "The KeyVaultClient code passes in a url encoded version so nothing further needs to be done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510384363", "createdAt": "2020-10-22T18:51:40Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ */\n+class AuthClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the Client ID fragment.\n+     */\n+    private static final String CLIENT_ID_FRAGMENT = \"&client_id=\";\n+\n+    /**\n+     * Stores the Client Secret fragment.\n+     */\n+    private static final String CLIENT_SECRET_FRAGMENT = \"&client_secret=\";\n+\n+    /**\n+     * Stores the Grant Type fragment.\n+     */\n+    private static final String GRANT_TYPE_FRAGMENT = \"grant_type=client_credentials\";\n+\n+    /**\n+     * Stores the Resource fragment.\n+     */\n+    private static final String RESOURCE_FRAGMENT = \"&resource=\";\n+\n+    /**\n+     * Stores the OAuth2 token base URL.\n+     */\n+    private static final String OAUTH2_TOKEN_BASE_URL = \"https://login.microsoftonline.com/\";\n+\n+    /**\n+     * Stores the OAuth2 token postfix.\n+     */\n+    private static final String OAUTH2_TOKEN_POSTFIX = \"/oauth2/token\";\n+\n+    /**\n+     * Stores the OAuth2 managed identity URL.\n+     */\n+    private static final String OAUTH2_MANAGED_IDENTITY_TOKEN_URL\n+        = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01\";\n+\n+    /**\n+     * Stores our logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(AuthClient.class.getName());\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor creates a default RestClient.\n+     * </p>\n+     */\n+    AuthClient() {\n+        super(RestClientFactory.createClient());\n+    }\n+\n+    /**\n+     * Get an access token for a managed identity.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource) {\n+        String result;\n+\n+        if (System.getenv(\"WEBSITE_SITE_NAME\") != null\n+            && !System.getenv(\"WEBSITE_SITE_NAME\").isEmpty()) {\n+            result = getAccessTokenOnAppService(resource);\n+        } else {\n+            result = getAccessTokenOnOthers(resource);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get an access token.\n+     *\n+     * @param resource the resource.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource, String tenantId,\n+                                 String clientId, String clientSecret) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessToken\", new Object[] {\n+            resource, tenantId, clientId, clientSecret });\n+        LOGGER.info(\"Getting access token using client ID / client secret\");\n+        String result = null;\n+\n+        StringBuilder oauth2Url = new StringBuilder();\n+        oauth2Url.append(OAUTH2_TOKEN_BASE_URL)\n+                 .append(tenantId)\n+                 .append(OAUTH2_TOKEN_POSTFIX);\n+\n+        StringBuilder requestBody = new StringBuilder();\n+        requestBody.append(GRANT_TYPE_FRAGMENT)\n+                   .append(CLIENT_ID_FRAGMENT).append(clientId)\n+                   .append(CLIENT_SECRET_FRAGMENT).append(clientSecret)\n+                   .append(RESOURCE_FRAGMENT).append(resource);\n+\n+        String body = post(oauth2Url.toString(), requestBody.toString(), \"application/x-www-form-urlencoded\");\n+        if (body != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            OAuthToken token = (OAuthToken) converter.fromJson(body, OAuthToken.class);\n+            result = token.getAccess_token();\n+        }\n+        LOGGER.log(FINER, \"Access token: {0}\", result);\n+        return result;\n+    }\n+\n+    /**\n+     * Get the access token on Azure App Service.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    private String getAccessTokenOnAppService(String resource) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessTokenOnAppService\", resource);\n+        LOGGER.info(\"Getting access token using managed identity based on MSI_SECRET\");\n+        String result = null;\n+\n+        StringBuilder url = new StringBuilder();\n+        url.append(System.getenv(\"MSI_ENDPOINT\"))\n+           .append(\"?api-version=2017-09-01\")\n+           .append(RESOURCE_FRAGMENT).append(resource);\n+\n+        HashMap<String, String> headers = new HashMap<>();\n+        headers.put(\"Metadata\", \"true\");\n+        headers.put(\"Secret\", System.getenv(\"MSI_SECRET\"));\n+        String body = get(url.toString(), headers);\n+\n+        if (body != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            OAuthToken token = (OAuthToken) converter.fromJson(body, OAuthToken.class);\n+            result = token.getAccess_token();\n+        }\n+        LOGGER.exiting(\"AuthClient\", \"getAccessTokenOnAppService\", result);\n+        return result;\n+    }\n+\n+    /**\n+     * Get the authorization token on everything else but Azure App Service.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    private String getAccessTokenOnOthers(String resource) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessTokenOnOthers\", resource);\n+        LOGGER.info(\"Getting access token using managed identity\");\n+        String result = null;\n+\n+        StringBuilder url = new StringBuilder();\n+        url.append(OAUTH2_MANAGED_IDENTITY_TOKEN_URL)\n+           .append(RESOURCE_FRAGMENT).append(resource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxODE2Mg=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzI5NjcyOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDoyODoyMlrOHlPzMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoyMToxNFrOHmyYXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxODIyNg==", "bodyText": "This section can be placed under Contributing Section.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508818226", "createdAt": "2020-10-20T20:28:22Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "diffHunk": "@@ -0,0 +1,127 @@\n+# JCA Provider for Azure Key Vault\n+\n+The JCA Provider for Azure Key Vault is a JCA provider for certificates in \n+Azure Key Vault. It is built on four principles:\n+ \n+1. Must be extremely thin to run within a JVM\n+1. Must not introduce any library version conflicts with Java app code dependencies\n+1. Must not introduce any class loader hierarchy conflicts with Java app code dependencies\n+1. Must be ready for \"never trust, always verify and credential-free\" Zero Trust environments.\n+\n+## Testing the version under development", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzMzM3NA==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510433374", "createdAt": "2020-10-22T20:21:14Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/README.md", "diffHunk": "@@ -0,0 +1,127 @@\n+# JCA Provider for Azure Key Vault\n+\n+The JCA Provider for Azure Key Vault is a JCA provider for certificates in \n+Azure Key Vault. It is built on four principles:\n+ \n+1. Must be extremely thin to run within a JVM\n+1. Must not introduce any library version conflicts with Java app code dependencies\n+1. Must not introduce any class loader hierarchy conflicts with Java app code dependencies\n+1. Must be ready for \"never trust, always verify and credential-free\" Zero Trust environments.\n+\n+## Testing the version under development", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxODIyNg=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzI5ODQyOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDoyODo1MlrOHlP0NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTowNToyNlrOHmv4Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxODQ4NA==", "bodyText": "I believe the resource string will need to be url encoded no?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508818484", "createdAt": "2020-10-20T20:28:52Z", "author": {"login": "schaabs"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ */\n+class AuthClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the Client ID fragment.\n+     */\n+    private static final String CLIENT_ID_FRAGMENT = \"&client_id=\";\n+\n+    /**\n+     * Stores the Client Secret fragment.\n+     */\n+    private static final String CLIENT_SECRET_FRAGMENT = \"&client_secret=\";\n+\n+    /**\n+     * Stores the Grant Type fragment.\n+     */\n+    private static final String GRANT_TYPE_FRAGMENT = \"grant_type=client_credentials\";\n+\n+    /**\n+     * Stores the Resource fragment.\n+     */\n+    private static final String RESOURCE_FRAGMENT = \"&resource=\";\n+\n+    /**\n+     * Stores the OAuth2 token base URL.\n+     */\n+    private static final String OAUTH2_TOKEN_BASE_URL = \"https://login.microsoftonline.com/\";\n+\n+    /**\n+     * Stores the OAuth2 token postfix.\n+     */\n+    private static final String OAUTH2_TOKEN_POSTFIX = \"/oauth2/token\";\n+\n+    /**\n+     * Stores the OAuth2 managed identity URL.\n+     */\n+    private static final String OAUTH2_MANAGED_IDENTITY_TOKEN_URL\n+        = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01\";\n+\n+    /**\n+     * Stores our logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(AuthClient.class.getName());\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor creates a default RestClient.\n+     * </p>\n+     */\n+    AuthClient() {\n+        super(RestClientFactory.createClient());\n+    }\n+\n+    /**\n+     * Get an access token for a managed identity.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource) {\n+        String result;\n+\n+        if (System.getenv(\"WEBSITE_SITE_NAME\") != null\n+            && !System.getenv(\"WEBSITE_SITE_NAME\").isEmpty()) {\n+            result = getAccessTokenOnAppService(resource);\n+        } else {\n+            result = getAccessTokenOnOthers(resource);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get an access token.\n+     *\n+     * @param resource the resource.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource, String tenantId,\n+                                 String clientId, String clientSecret) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessToken\", new Object[] {\n+            resource, tenantId, clientId, clientSecret });\n+        LOGGER.info(\"Getting access token using client ID / client secret\");\n+        String result = null;\n+\n+        StringBuilder oauth2Url = new StringBuilder();\n+        oauth2Url.append(OAUTH2_TOKEN_BASE_URL)\n+                 .append(tenantId)\n+                 .append(OAUTH2_TOKEN_POSTFIX);\n+\n+        StringBuilder requestBody = new StringBuilder();\n+        requestBody.append(GRANT_TYPE_FRAGMENT)\n+                   .append(CLIENT_ID_FRAGMENT).append(clientId)\n+                   .append(CLIENT_SECRET_FRAGMENT).append(clientSecret)\n+                   .append(RESOURCE_FRAGMENT).append(resource);\n+\n+        String body = post(oauth2Url.toString(), requestBody.toString(), \"application/x-www-form-urlencoded\");\n+        if (body != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            OAuthToken token = (OAuthToken) converter.fromJson(body, OAuthToken.class);\n+            result = token.getAccess_token();\n+        }\n+        LOGGER.log(FINER, \"Access token: {0}\", result);\n+        return result;\n+    }\n+\n+    /**\n+     * Get the access token on Azure App Service.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    private String getAccessTokenOnAppService(String resource) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessTokenOnAppService\", resource);\n+        LOGGER.info(\"Getting access token using managed identity based on MSI_SECRET\");\n+        String result = null;\n+\n+        StringBuilder url = new StringBuilder();\n+        url.append(System.getenv(\"MSI_ENDPOINT\"))\n+           .append(\"?api-version=2017-09-01\")\n+           .append(RESOURCE_FRAGMENT).append(resource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5MjQwNg==", "bodyText": "The KeyVaultClient code passes in a url encoded version so nothing further needs to be done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510392406", "createdAt": "2020-10-22T19:05:26Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ */\n+class AuthClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the Client ID fragment.\n+     */\n+    private static final String CLIENT_ID_FRAGMENT = \"&client_id=\";\n+\n+    /**\n+     * Stores the Client Secret fragment.\n+     */\n+    private static final String CLIENT_SECRET_FRAGMENT = \"&client_secret=\";\n+\n+    /**\n+     * Stores the Grant Type fragment.\n+     */\n+    private static final String GRANT_TYPE_FRAGMENT = \"grant_type=client_credentials\";\n+\n+    /**\n+     * Stores the Resource fragment.\n+     */\n+    private static final String RESOURCE_FRAGMENT = \"&resource=\";\n+\n+    /**\n+     * Stores the OAuth2 token base URL.\n+     */\n+    private static final String OAUTH2_TOKEN_BASE_URL = \"https://login.microsoftonline.com/\";\n+\n+    /**\n+     * Stores the OAuth2 token postfix.\n+     */\n+    private static final String OAUTH2_TOKEN_POSTFIX = \"/oauth2/token\";\n+\n+    /**\n+     * Stores the OAuth2 managed identity URL.\n+     */\n+    private static final String OAUTH2_MANAGED_IDENTITY_TOKEN_URL\n+        = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01\";\n+\n+    /**\n+     * Stores our logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(AuthClient.class.getName());\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor creates a default RestClient.\n+     * </p>\n+     */\n+    AuthClient() {\n+        super(RestClientFactory.createClient());\n+    }\n+\n+    /**\n+     * Get an access token for a managed identity.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource) {\n+        String result;\n+\n+        if (System.getenv(\"WEBSITE_SITE_NAME\") != null\n+            && !System.getenv(\"WEBSITE_SITE_NAME\").isEmpty()) {\n+            result = getAccessTokenOnAppService(resource);\n+        } else {\n+            result = getAccessTokenOnOthers(resource);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get an access token.\n+     *\n+     * @param resource the resource.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource, String tenantId,\n+                                 String clientId, String clientSecret) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessToken\", new Object[] {\n+            resource, tenantId, clientId, clientSecret });\n+        LOGGER.info(\"Getting access token using client ID / client secret\");\n+        String result = null;\n+\n+        StringBuilder oauth2Url = new StringBuilder();\n+        oauth2Url.append(OAUTH2_TOKEN_BASE_URL)\n+                 .append(tenantId)\n+                 .append(OAUTH2_TOKEN_POSTFIX);\n+\n+        StringBuilder requestBody = new StringBuilder();\n+        requestBody.append(GRANT_TYPE_FRAGMENT)\n+                   .append(CLIENT_ID_FRAGMENT).append(clientId)\n+                   .append(CLIENT_SECRET_FRAGMENT).append(clientSecret)\n+                   .append(RESOURCE_FRAGMENT).append(resource);\n+\n+        String body = post(oauth2Url.toString(), requestBody.toString(), \"application/x-www-form-urlencoded\");\n+        if (body != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            OAuthToken token = (OAuthToken) converter.fromJson(body, OAuthToken.class);\n+            result = token.getAccess_token();\n+        }\n+        LOGGER.log(FINER, \"Access token: {0}\", result);\n+        return result;\n+    }\n+\n+    /**\n+     * Get the access token on Azure App Service.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    private String getAccessTokenOnAppService(String resource) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessTokenOnAppService\", resource);\n+        LOGGER.info(\"Getting access token using managed identity based on MSI_SECRET\");\n+        String result = null;\n+\n+        StringBuilder url = new StringBuilder();\n+        url.append(System.getenv(\"MSI_ENDPOINT\"))\n+           .append(\"?api-version=2017-09-01\")\n+           .append(RESOURCE_FRAGMENT).append(resource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxODQ4NA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzMxNTc3OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDozMzo0NlrOHlP-zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzowMToxM1rOHnWHlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyMTE5Ng==", "bodyText": "Should we also log a warning if the alias turns out to be null in the end?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508821196", "createdAt": "2020-10-20T20:33:46Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyManager.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import javax.net.ssl.X509ExtendedKeyManager;\n+import java.net.Socket;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Principal;\n+import java.security.PrivateKey;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The KeyVault variant of the X509ExtendedKeyManager.\n+ */\n+public class KeyVaultKeyManager extends X509ExtendedKeyManager {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyManager.class.getName());\n+\n+    /**\n+     * Stores the keystore.\n+     */\n+    private final KeyStore keystore;\n+\n+    /**\n+     * Stores the password.\n+     */\n+    private final char[] password;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keystore the keystore.\n+     * @param password the password.\n+     */\n+    public KeyVaultKeyManager(KeyStore keystore, char[] password) {\n+        LOGGER.entering(\"KeyVaultKeyManager\", \"<init>\", new Object[] { keystore, password });\n+        this.keystore = keystore;\n+        this.password = password;\n+    }\n+\n+    @Override\n+    public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\n+        LOGGER.entering(\n+            \"KeyVaultKeyManager\",\n+            \"chooseClientAlias\",\n+            new Object[] { keyType, issuers, socket }\n+        );\n+        String alias = null;\n+        try {\n+            /*\n+             * If we only have one alias and the keystore type is not 'AzureKeyVault'\n+             * return that alias as a match.\n+             */\n+            if (!keystore.getProvider().getName().equals(\"AzureKeyVault\")\n+                && keystore.size() == 1) {\n+                alias = keystore.aliases().nextElement();\n+            }\n+        } catch (KeyStoreException kse) {\n+            LOGGER.log(WARNING, \"Unable to choose client alias\", kse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxODkwMQ==", "bodyText": "No as that would cause the application potentially to be very chatty. If the customer would need to know if it is indeed returning null they can change the logging level.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511018901", "createdAt": "2020-10-23T17:01:13Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyManager.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import javax.net.ssl.X509ExtendedKeyManager;\n+import java.net.Socket;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Principal;\n+import java.security.PrivateKey;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The KeyVault variant of the X509ExtendedKeyManager.\n+ */\n+public class KeyVaultKeyManager extends X509ExtendedKeyManager {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyManager.class.getName());\n+\n+    /**\n+     * Stores the keystore.\n+     */\n+    private final KeyStore keystore;\n+\n+    /**\n+     * Stores the password.\n+     */\n+    private final char[] password;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keystore the keystore.\n+     * @param password the password.\n+     */\n+    public KeyVaultKeyManager(KeyStore keystore, char[] password) {\n+        LOGGER.entering(\"KeyVaultKeyManager\", \"<init>\", new Object[] { keystore, password });\n+        this.keystore = keystore;\n+        this.password = password;\n+    }\n+\n+    @Override\n+    public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\n+        LOGGER.entering(\n+            \"KeyVaultKeyManager\",\n+            \"chooseClientAlias\",\n+            new Object[] { keyType, issuers, socket }\n+        );\n+        String alias = null;\n+        try {\n+            /*\n+             * If we only have one alias and the keystore type is not 'AzureKeyVault'\n+             * return that alias as a match.\n+             */\n+            if (!keystore.getProvider().getName().equals(\"AzureKeyVault\")\n+                && keystore.size() == 1) {\n+                alias = keystore.aliases().nextElement();\n+            }\n+        } catch (KeyStoreException kse) {\n+            LOGGER.log(WARNING, \"Unable to choose client alias\", kse);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyMTE5Ng=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzMzMDI5OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDozNzo0MVrOHlQHeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTowMjo1M1rOHnRvlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyMzQxNw==", "bodyText": "We don't need to check if keystoreChain is not empty if we are using a foreach loop.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508823417", "createdAt": "2020-10-20T20:37:41Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyManager.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import javax.net.ssl.X509ExtendedKeyManager;\n+import java.net.Socket;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Principal;\n+import java.security.PrivateKey;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The KeyVault variant of the X509ExtendedKeyManager.\n+ */\n+public class KeyVaultKeyManager extends X509ExtendedKeyManager {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyManager.class.getName());\n+\n+    /**\n+     * Stores the keystore.\n+     */\n+    private final KeyStore keystore;\n+\n+    /**\n+     * Stores the password.\n+     */\n+    private final char[] password;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keystore the keystore.\n+     * @param password the password.\n+     */\n+    public KeyVaultKeyManager(KeyStore keystore, char[] password) {\n+        LOGGER.entering(\"KeyVaultKeyManager\", \"<init>\", new Object[] { keystore, password });\n+        this.keystore = keystore;\n+        this.password = password;\n+    }\n+\n+    @Override\n+    public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\n+        LOGGER.entering(\n+            \"KeyVaultKeyManager\",\n+            \"chooseClientAlias\",\n+            new Object[] { keyType, issuers, socket }\n+        );\n+        String alias = null;\n+        try {\n+            /*\n+             * If we only have one alias and the keystore type is not 'AzureKeyVault'\n+             * return that alias as a match.\n+             */\n+            if (!keystore.getProvider().getName().equals(\"AzureKeyVault\")\n+                && keystore.size() == 1) {\n+                alias = keystore.aliases().nextElement();\n+            }\n+        } catch (KeyStoreException kse) {\n+            LOGGER.log(WARNING, \"Unable to choose client alias\", kse);\n+        }\n+        LOGGER.exiting(\"KeyVaultKeyManager\", \"chooseClientAlias\", alias);\n+        return alias;\n+    }\n+\n+    @Override\n+    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\n+        LOGGER.entering(\n+            \"KeyVaultKeyManager\",\n+            \"chooseServerAlias\",\n+            new Object[] { keyType, issuers, socket }\n+        );\n+        String alias = null;\n+        try {\n+            /*\n+             * If we only have one alias and the keystore type is not 'AzureKeyVault'\n+             * return that alias as a match.\n+             */\n+            if (!keystore.getProvider().getName().equals(\"AzureKeyVault\")\n+                && keystore.size() == 1) {\n+                alias = keystore.aliases().nextElement();\n+            }\n+        } catch (KeyStoreException kse) {\n+            LOGGER.log(WARNING, \"Unable to choose server alias\", kse);\n+        }\n+        LOGGER.exiting(\"KeyVaultKeyManager\", \"chooseServerAlias\", alias);\n+        return alias;\n+    }\n+\n+    @Override\n+    public String[] getClientAliases(String keyType, Principal[] issuers) {\n+        LOGGER.log(INFO, \"KeyVaultKeyManager.getClientAliases: {0}, {1}\",\n+            new Object[] { keyType, issuers });\n+        String[] aliases = null;\n+        try {\n+            aliases = Collections.list(keystore.aliases()).toArray(new String[0]);\n+        } catch (KeyStoreException kse) {\n+            LOGGER.log(WARNING, \"Unable to get client aliases\", kse);\n+        }\n+        LOGGER.log(INFO, \"KeyVaultKeyManager.getClientAliases: {0}\", aliases);\n+        return aliases;\n+    }\n+\n+    @Override\n+    public X509Certificate[] getCertificateChain(String alias) {\n+        LOGGER.entering(\"KeyVaultKeyManager\", \"getCertificateChain\", alias);\n+        List<X509Certificate> chain = new ArrayList<>();\n+        try {\n+            Certificate[] keystoreChain = keystore.getCertificateChain(alias);\n+            if (keystoreChain.length > 0) {\n+                for (Certificate certificate : keystoreChain) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0NzIyMQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510947221", "createdAt": "2020-10-23T15:02:53Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyManager.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import javax.net.ssl.X509ExtendedKeyManager;\n+import java.net.Socket;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Principal;\n+import java.security.PrivateKey;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The KeyVault variant of the X509ExtendedKeyManager.\n+ */\n+public class KeyVaultKeyManager extends X509ExtendedKeyManager {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyManager.class.getName());\n+\n+    /**\n+     * Stores the keystore.\n+     */\n+    private final KeyStore keystore;\n+\n+    /**\n+     * Stores the password.\n+     */\n+    private final char[] password;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keystore the keystore.\n+     * @param password the password.\n+     */\n+    public KeyVaultKeyManager(KeyStore keystore, char[] password) {\n+        LOGGER.entering(\"KeyVaultKeyManager\", \"<init>\", new Object[] { keystore, password });\n+        this.keystore = keystore;\n+        this.password = password;\n+    }\n+\n+    @Override\n+    public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\n+        LOGGER.entering(\n+            \"KeyVaultKeyManager\",\n+            \"chooseClientAlias\",\n+            new Object[] { keyType, issuers, socket }\n+        );\n+        String alias = null;\n+        try {\n+            /*\n+             * If we only have one alias and the keystore type is not 'AzureKeyVault'\n+             * return that alias as a match.\n+             */\n+            if (!keystore.getProvider().getName().equals(\"AzureKeyVault\")\n+                && keystore.size() == 1) {\n+                alias = keystore.aliases().nextElement();\n+            }\n+        } catch (KeyStoreException kse) {\n+            LOGGER.log(WARNING, \"Unable to choose client alias\", kse);\n+        }\n+        LOGGER.exiting(\"KeyVaultKeyManager\", \"chooseClientAlias\", alias);\n+        return alias;\n+    }\n+\n+    @Override\n+    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\n+        LOGGER.entering(\n+            \"KeyVaultKeyManager\",\n+            \"chooseServerAlias\",\n+            new Object[] { keyType, issuers, socket }\n+        );\n+        String alias = null;\n+        try {\n+            /*\n+             * If we only have one alias and the keystore type is not 'AzureKeyVault'\n+             * return that alias as a match.\n+             */\n+            if (!keystore.getProvider().getName().equals(\"AzureKeyVault\")\n+                && keystore.size() == 1) {\n+                alias = keystore.aliases().nextElement();\n+            }\n+        } catch (KeyStoreException kse) {\n+            LOGGER.log(WARNING, \"Unable to choose server alias\", kse);\n+        }\n+        LOGGER.exiting(\"KeyVaultKeyManager\", \"chooseServerAlias\", alias);\n+        return alias;\n+    }\n+\n+    @Override\n+    public String[] getClientAliases(String keyType, Principal[] issuers) {\n+        LOGGER.log(INFO, \"KeyVaultKeyManager.getClientAliases: {0}, {1}\",\n+            new Object[] { keyType, issuers });\n+        String[] aliases = null;\n+        try {\n+            aliases = Collections.list(keystore.aliases()).toArray(new String[0]);\n+        } catch (KeyStoreException kse) {\n+            LOGGER.log(WARNING, \"Unable to get client aliases\", kse);\n+        }\n+        LOGGER.log(INFO, \"KeyVaultKeyManager.getClientAliases: {0}\", aliases);\n+        return aliases;\n+    }\n+\n+    @Override\n+    public X509Certificate[] getCertificateChain(String alias) {\n+        LOGGER.entering(\"KeyVaultKeyManager\", \"getCertificateChain\", alias);\n+        List<X509Certificate> chain = new ArrayList<>();\n+        try {\n+            Certificate[] keystoreChain = keystore.getCertificateChain(alias);\n+            if (keystoreChain.length > 0) {\n+                for (Certificate certificate : keystoreChain) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyMzQxNw=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzMzNjQyOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDozOToyMVrOHlQLHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzozMzoxMlrOHlY-Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNDM1MA==", "bodyText": "Why are we locking the config to 1.8 ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508824350", "createdAt": "2020-10-20T20:39:21Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-jca/pom.xml", "diffHunk": "@@ -0,0 +1,232 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>azure-client-sdk-parent</artifactId>\n+        <groupId>com.azure</groupId>\n+        <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+        <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+    </parent>\n+\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-security-keyvault-jca</artifactId>\n+    <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-security-keyvault-jca;current} -->\n+    <name>JCA Provider for Azure Key Vault</name>\n+    <description>The Java Crypto Architecture (JCA) Provider for Azure KeyVault</description>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.8.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-compiler-plugin;external_dependency} -->\n+                <configuration>\n+                    <source>1.8</source>\n+                    <target>1.8</target>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2NDIzMQ==", "bodyText": "Because we want this library to work on Java 8.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508964231", "createdAt": "2020-10-21T03:17:57Z", "author": {"login": "JonathanGiles"}, "path": "sdk/keyvault/azure-security-keyvault-jca/pom.xml", "diffHunk": "@@ -0,0 +1,232 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>azure-client-sdk-parent</artifactId>\n+        <groupId>com.azure</groupId>\n+        <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+        <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+    </parent>\n+\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-security-keyvault-jca</artifactId>\n+    <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-security-keyvault-jca;current} -->\n+    <name>JCA Provider for Azure Key Vault</name>\n+    <description>The Java Crypto Architecture (JCA) Provider for Azure KeyVault</description>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.8.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-compiler-plugin;external_dependency} -->\n+                <configuration>\n+                    <source>1.8</source>\n+                    <target>1.8</target>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNDM1MA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2NzQ4OQ==", "bodyText": "okay,\nbut we don't lock the target version here in our client sdk parent pom.\nThis can be cleaned up using profiles.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508967489", "createdAt": "2020-10-21T03:29:32Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-jca/pom.xml", "diffHunk": "@@ -0,0 +1,232 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>azure-client-sdk-parent</artifactId>\n+        <groupId>com.azure</groupId>\n+        <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+        <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+    </parent>\n+\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-security-keyvault-jca</artifactId>\n+    <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-security-keyvault-jca;current} -->\n+    <name>JCA Provider for Azure Key Vault</name>\n+    <description>The Java Crypto Architecture (JCA) Provider for Azure KeyVault</description>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.8.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-compiler-plugin;external_dependency} -->\n+                <configuration>\n+                    <source>1.8</source>\n+                    <target>1.8</target>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNDM1MA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2ODUzOQ==", "bodyText": "Yes we do", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508968539", "createdAt": "2020-10-21T03:33:12Z", "author": {"login": "JonathanGiles"}, "path": "sdk/keyvault/azure-security-keyvault-jca/pom.xml", "diffHunk": "@@ -0,0 +1,232 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>azure-client-sdk-parent</artifactId>\n+        <groupId>com.azure</groupId>\n+        <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+        <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+    </parent>\n+\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-security-keyvault-jca</artifactId>\n+    <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-security-keyvault-jca;current} -->\n+    <name>JCA Provider for Azure Key Vault</name>\n+    <description>The Java Crypto Architecture (JCA) Provider for Azure KeyVault</description>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.8.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-compiler-plugin;external_dependency} -->\n+                <configuration>\n+                    <source>1.8</source>\n+                    <target>1.8</target>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNDM1MA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzM0NDY2OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDo0MTozM1rOHlQP7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wNlQwMjowMzo1MVrOJDTBiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNTU4MQ==", "bodyText": "This will work on IMDS supported Azure Platforms only.\nFor e.g This won't work in App Service.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508825581", "createdAt": "2020-10-20T20:41:33Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ */\n+class AuthClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the Client ID fragment.\n+     */\n+    private static final String CLIENT_ID_FRAGMENT = \"&client_id=\";\n+\n+    /**\n+     * Stores the Client Secret fragment.\n+     */\n+    private static final String CLIENT_SECRET_FRAGMENT = \"&client_secret=\";\n+\n+    /**\n+     * Stores the Grant Type fragment.\n+     */\n+    private static final String GRANT_TYPE_FRAGMENT = \"grant_type=client_credentials\";\n+\n+    /**\n+     * Stores the Resource fragment.\n+     */\n+    private static final String RESOURCE_FRAGMENT = \"&resource=\";\n+\n+    /**\n+     * Stores the OAuth2 token base URL.\n+     */\n+    private static final String OAUTH2_TOKEN_BASE_URL = \"https://login.microsoftonline.com/\";\n+\n+    /**\n+     * Stores the OAuth2 token postfix.\n+     */\n+    private static final String OAUTH2_TOKEN_POSTFIX = \"/oauth2/token\";\n+\n+    /**\n+     * Stores the OAuth2 managed identity URL.\n+     */\n+    private static final String OAUTH2_MANAGED_IDENTITY_TOKEN_URL\n+        = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzQzNzE5Mg==", "bodyText": "Hi, the case of App Service has been handled separately. And according to this doc, requesting access tokens via Azure resources VM Extension Endpoint is also not encouraged. Thus are there any other cases that are not covered? Thanks", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r607437192", "createdAt": "2021-04-06T02:03:51Z", "author": {"login": "yiliuTo"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ */\n+class AuthClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the Client ID fragment.\n+     */\n+    private static final String CLIENT_ID_FRAGMENT = \"&client_id=\";\n+\n+    /**\n+     * Stores the Client Secret fragment.\n+     */\n+    private static final String CLIENT_SECRET_FRAGMENT = \"&client_secret=\";\n+\n+    /**\n+     * Stores the Grant Type fragment.\n+     */\n+    private static final String GRANT_TYPE_FRAGMENT = \"grant_type=client_credentials\";\n+\n+    /**\n+     * Stores the Resource fragment.\n+     */\n+    private static final String RESOURCE_FRAGMENT = \"&resource=\";\n+\n+    /**\n+     * Stores the OAuth2 token base URL.\n+     */\n+    private static final String OAUTH2_TOKEN_BASE_URL = \"https://login.microsoftonline.com/\";\n+\n+    /**\n+     * Stores the OAuth2 token postfix.\n+     */\n+    private static final String OAUTH2_TOKEN_POSTFIX = \"/oauth2/token\";\n+\n+    /**\n+     * Stores the OAuth2 managed identity URL.\n+     */\n+    private static final String OAUTH2_MANAGED_IDENTITY_TOKEN_URL\n+        = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNTU4MQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzM0NzQ4OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDo0MjoyNFrOHlQRsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNToxODowNlrOHnSV0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNjAzNA==", "bodyText": "We might want to rename this to keyVaultClient.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508826034", "createdAt": "2020-10-20T20:42:24Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.KeyStoreSpi;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableEntryException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The Azure KeyVault implementation of the KeyStoreSpi.\n+ */\n+public class KeyVaultKeyStore extends KeyStoreSpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyStore.class.getName());\n+\n+    /**\n+     * Stores the list of aliases.\n+     */\n+    private List<String> aliases;\n+\n+    /**\n+     * Stores the certificates by alias.\n+     */\n+    private final HashMap<String, Certificate> certificates = new HashMap<>();\n+\n+    /**\n+     * Stores the certificate keys by alias.\n+     */\n+    private final HashMap<String, Key> certificateKeys = new HashMap<>();\n+\n+    /**\n+     * Stores the creation date.\n+     */\n+    private final Date creationDate;\n+\n+    /**\n+     * Stores the key vault client.\n+     */\n+    private KeyVaultClient keyVault;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1NzAxMA==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510957010", "createdAt": "2020-10-23T15:18:06Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.KeyStoreSpi;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableEntryException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The Azure KeyVault implementation of the KeyStoreSpi.\n+ */\n+public class KeyVaultKeyStore extends KeyStoreSpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyStore.class.getName());\n+\n+    /**\n+     * Stores the list of aliases.\n+     */\n+    private List<String> aliases;\n+\n+    /**\n+     * Stores the certificates by alias.\n+     */\n+    private final HashMap<String, Certificate> certificates = new HashMap<>();\n+\n+    /**\n+     * Stores the certificate keys by alias.\n+     */\n+    private final HashMap<String, Key> certificateKeys = new HashMap<>();\n+\n+    /**\n+     * Stores the creation date.\n+     */\n+    private final Date creationDate;\n+\n+    /**\n+     * Stores the key vault client.\n+     */\n+    private KeyVaultClient keyVault;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNjAzNA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzM1MDE0OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDo0MzoxMVrOHlQTYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzo0MTo1MFrOHmiYSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNjQ2NQ==", "bodyText": "Why do we need to build the custom Auth Client ?\nMSAL offers this support, can we directly use MSAL here ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508826465", "createdAt": "2020-10-20T20:43:11Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ */\n+class AuthClient extends DelegateRestClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE3MTIxMA==", "bodyText": "MSAL would only be usable in this particular case if a) it is self-contained as a JAR and b) it can be properly shaded and relocated so customers are not impacted by versioning. As far as I can tell that is not the case hence it using its own client.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510171210", "createdAt": "2020-10-22T13:41:50Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ */\n+class AuthClient extends DelegateRestClient {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNjQ2NQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzM2MTY5OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDo0NjoxOFrOHlQaXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOVQwNzo1MDozN1rOI5yewA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyODI1NA==", "bodyText": "There's a newer 2019 API version available, which uses IDENTITY_ENDPOINT and IDENTITY_HEADER env vars.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508828254", "createdAt": "2020-10-20T20:46:18Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ */\n+class AuthClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the Client ID fragment.\n+     */\n+    private static final String CLIENT_ID_FRAGMENT = \"&client_id=\";\n+\n+    /**\n+     * Stores the Client Secret fragment.\n+     */\n+    private static final String CLIENT_SECRET_FRAGMENT = \"&client_secret=\";\n+\n+    /**\n+     * Stores the Grant Type fragment.\n+     */\n+    private static final String GRANT_TYPE_FRAGMENT = \"grant_type=client_credentials\";\n+\n+    /**\n+     * Stores the Resource fragment.\n+     */\n+    private static final String RESOURCE_FRAGMENT = \"&resource=\";\n+\n+    /**\n+     * Stores the OAuth2 token base URL.\n+     */\n+    private static final String OAUTH2_TOKEN_BASE_URL = \"https://login.microsoftonline.com/\";\n+\n+    /**\n+     * Stores the OAuth2 token postfix.\n+     */\n+    private static final String OAUTH2_TOKEN_POSTFIX = \"/oauth2/token\";\n+\n+    /**\n+     * Stores the OAuth2 managed identity URL.\n+     */\n+    private static final String OAUTH2_MANAGED_IDENTITY_TOKEN_URL\n+        = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01\";\n+\n+    /**\n+     * Stores our logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(AuthClient.class.getName());\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor creates a default RestClient.\n+     * </p>\n+     */\n+    AuthClient() {\n+        super(RestClientFactory.createClient());\n+    }\n+\n+    /**\n+     * Get an access token for a managed identity.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource) {\n+        String result;\n+\n+        if (System.getenv(\"WEBSITE_SITE_NAME\") != null\n+            && !System.getenv(\"WEBSITE_SITE_NAME\").isEmpty()) {\n+            result = getAccessTokenOnAppService(resource);\n+        } else {\n+            result = getAccessTokenOnOthers(resource);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get an access token.\n+     *\n+     * @param resource the resource.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource, String tenantId,\n+                                 String clientId, String clientSecret) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessToken\", new Object[] {\n+            resource, tenantId, clientId, clientSecret });\n+        LOGGER.info(\"Getting access token using client ID / client secret\");\n+        String result = null;\n+\n+        StringBuilder oauth2Url = new StringBuilder();\n+        oauth2Url.append(OAUTH2_TOKEN_BASE_URL)\n+                 .append(tenantId)\n+                 .append(OAUTH2_TOKEN_POSTFIX);\n+\n+        StringBuilder requestBody = new StringBuilder();\n+        requestBody.append(GRANT_TYPE_FRAGMENT)\n+                   .append(CLIENT_ID_FRAGMENT).append(clientId)\n+                   .append(CLIENT_SECRET_FRAGMENT).append(clientSecret)\n+                   .append(RESOURCE_FRAGMENT).append(resource);\n+\n+        String body = post(oauth2Url.toString(), requestBody.toString(), \"application/x-www-form-urlencoded\");\n+        if (body != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            OAuthToken token = (OAuthToken) converter.fromJson(body, OAuthToken.class);\n+            result = token.getAccess_token();\n+        }\n+        LOGGER.log(FINER, \"Access token: {0}\", result);\n+        return result;\n+    }\n+\n+    /**\n+     * Get the access token on Azure App Service.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    private String getAccessTokenOnAppService(String resource) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessTokenOnAppService\", resource);\n+        LOGGER.info(\"Getting access token using managed identity based on MSI_SECRET\");\n+        String result = null;\n+\n+        StringBuilder url = new StringBuilder();\n+        url.append(System.getenv(\"MSI_ENDPOINT\"))\n+           .append(\"?api-version=2017-09-01\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzQ2NjgxNg==", "bodyText": "Hi @g2vinay , I found the following information that when using Linux Consumption, 2017 API version is required. Thus is it a better choice that we remain use of 2017 API version to support more cases?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r597466816", "createdAt": "2021-03-19T07:50:37Z", "author": {"login": "yiliuTo"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ */\n+class AuthClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the Client ID fragment.\n+     */\n+    private static final String CLIENT_ID_FRAGMENT = \"&client_id=\";\n+\n+    /**\n+     * Stores the Client Secret fragment.\n+     */\n+    private static final String CLIENT_SECRET_FRAGMENT = \"&client_secret=\";\n+\n+    /**\n+     * Stores the Grant Type fragment.\n+     */\n+    private static final String GRANT_TYPE_FRAGMENT = \"grant_type=client_credentials\";\n+\n+    /**\n+     * Stores the Resource fragment.\n+     */\n+    private static final String RESOURCE_FRAGMENT = \"&resource=\";\n+\n+    /**\n+     * Stores the OAuth2 token base URL.\n+     */\n+    private static final String OAUTH2_TOKEN_BASE_URL = \"https://login.microsoftonline.com/\";\n+\n+    /**\n+     * Stores the OAuth2 token postfix.\n+     */\n+    private static final String OAUTH2_TOKEN_POSTFIX = \"/oauth2/token\";\n+\n+    /**\n+     * Stores the OAuth2 managed identity URL.\n+     */\n+    private static final String OAUTH2_MANAGED_IDENTITY_TOKEN_URL\n+        = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01\";\n+\n+    /**\n+     * Stores our logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(AuthClient.class.getName());\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor creates a default RestClient.\n+     * </p>\n+     */\n+    AuthClient() {\n+        super(RestClientFactory.createClient());\n+    }\n+\n+    /**\n+     * Get an access token for a managed identity.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource) {\n+        String result;\n+\n+        if (System.getenv(\"WEBSITE_SITE_NAME\") != null\n+            && !System.getenv(\"WEBSITE_SITE_NAME\").isEmpty()) {\n+            result = getAccessTokenOnAppService(resource);\n+        } else {\n+            result = getAccessTokenOnOthers(resource);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get an access token.\n+     *\n+     * @param resource the resource.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource, String tenantId,\n+                                 String clientId, String clientSecret) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessToken\", new Object[] {\n+            resource, tenantId, clientId, clientSecret });\n+        LOGGER.info(\"Getting access token using client ID / client secret\");\n+        String result = null;\n+\n+        StringBuilder oauth2Url = new StringBuilder();\n+        oauth2Url.append(OAUTH2_TOKEN_BASE_URL)\n+                 .append(tenantId)\n+                 .append(OAUTH2_TOKEN_POSTFIX);\n+\n+        StringBuilder requestBody = new StringBuilder();\n+        requestBody.append(GRANT_TYPE_FRAGMENT)\n+                   .append(CLIENT_ID_FRAGMENT).append(clientId)\n+                   .append(CLIENT_SECRET_FRAGMENT).append(clientSecret)\n+                   .append(RESOURCE_FRAGMENT).append(resource);\n+\n+        String body = post(oauth2Url.toString(), requestBody.toString(), \"application/x-www-form-urlencoded\");\n+        if (body != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            OAuthToken token = (OAuthToken) converter.fromJson(body, OAuthToken.class);\n+            result = token.getAccess_token();\n+        }\n+        LOGGER.log(FINER, \"Access token: {0}\", result);\n+        return result;\n+    }\n+\n+    /**\n+     * Get the access token on Azure App Service.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    private String getAccessTokenOnAppService(String resource) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessTokenOnAppService\", resource);\n+        LOGGER.info(\"Getting access token using managed identity based on MSI_SECRET\");\n+        String result = null;\n+\n+        StringBuilder url = new StringBuilder();\n+        url.append(System.getenv(\"MSI_ENDPOINT\"))\n+           .append(\"?api-version=2017-09-01\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyODI1NA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzM2NTU0OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDo0NzoyN1rOHlQcyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDo0NzoyN1rOHlQcyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyODg3Mg==", "bodyText": "with 2017 API version, I believe the expiry time comes in different formats on Windows and Linux based App Services,\nis that being handled here ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508828872", "createdAt": "2020-10-20T20:47:27Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ */\n+class AuthClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the Client ID fragment.\n+     */\n+    private static final String CLIENT_ID_FRAGMENT = \"&client_id=\";\n+\n+    /**\n+     * Stores the Client Secret fragment.\n+     */\n+    private static final String CLIENT_SECRET_FRAGMENT = \"&client_secret=\";\n+\n+    /**\n+     * Stores the Grant Type fragment.\n+     */\n+    private static final String GRANT_TYPE_FRAGMENT = \"grant_type=client_credentials\";\n+\n+    /**\n+     * Stores the Resource fragment.\n+     */\n+    private static final String RESOURCE_FRAGMENT = \"&resource=\";\n+\n+    /**\n+     * Stores the OAuth2 token base URL.\n+     */\n+    private static final String OAUTH2_TOKEN_BASE_URL = \"https://login.microsoftonline.com/\";\n+\n+    /**\n+     * Stores the OAuth2 token postfix.\n+     */\n+    private static final String OAUTH2_TOKEN_POSTFIX = \"/oauth2/token\";\n+\n+    /**\n+     * Stores the OAuth2 managed identity URL.\n+     */\n+    private static final String OAUTH2_MANAGED_IDENTITY_TOKEN_URL\n+        = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01\";\n+\n+    /**\n+     * Stores our logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(AuthClient.class.getName());\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor creates a default RestClient.\n+     * </p>\n+     */\n+    AuthClient() {\n+        super(RestClientFactory.createClient());\n+    }\n+\n+    /**\n+     * Get an access token for a managed identity.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource) {\n+        String result;\n+\n+        if (System.getenv(\"WEBSITE_SITE_NAME\") != null\n+            && !System.getenv(\"WEBSITE_SITE_NAME\").isEmpty()) {\n+            result = getAccessTokenOnAppService(resource);\n+        } else {\n+            result = getAccessTokenOnOthers(resource);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get an access token.\n+     *\n+     * @param resource the resource.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource, String tenantId,\n+                                 String clientId, String clientSecret) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessToken\", new Object[] {\n+            resource, tenantId, clientId, clientSecret });\n+        LOGGER.info(\"Getting access token using client ID / client secret\");\n+        String result = null;\n+\n+        StringBuilder oauth2Url = new StringBuilder();\n+        oauth2Url.append(OAUTH2_TOKEN_BASE_URL)\n+                 .append(tenantId)\n+                 .append(OAUTH2_TOKEN_POSTFIX);\n+\n+        StringBuilder requestBody = new StringBuilder();\n+        requestBody.append(GRANT_TYPE_FRAGMENT)\n+                   .append(CLIENT_ID_FRAGMENT).append(clientId)\n+                   .append(CLIENT_SECRET_FRAGMENT).append(clientSecret)\n+                   .append(RESOURCE_FRAGMENT).append(resource);\n+\n+        String body = post(oauth2Url.toString(), requestBody.toString(), \"application/x-www-form-urlencoded\");\n+        if (body != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            OAuthToken token = (OAuthToken) converter.fromJson(body, OAuthToken.class);\n+            result = token.getAccess_token();\n+        }\n+        LOGGER.log(FINER, \"Access token: {0}\", result);\n+        return result;\n+    }\n+\n+    /**\n+     * Get the access token on Azure App Service.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    private String getAccessTokenOnAppService(String resource) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessTokenOnAppService\", resource);\n+        LOGGER.info(\"Getting access token using managed identity based on MSI_SECRET\");\n+        String result = null;\n+\n+        StringBuilder url = new StringBuilder();\n+        url.append(System.getenv(\"MSI_ENDPOINT\"))\n+           .append(\"?api-version=2017-09-01\")\n+           .append(RESOURCE_FRAGMENT).append(resource);\n+\n+        HashMap<String, String> headers = new HashMap<>();\n+        headers.put(\"Metadata\", \"true\");\n+        headers.put(\"Secret\", System.getenv(\"MSI_SECRET\"));\n+        String body = get(url.toString(), headers);\n+\n+        if (body != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            OAuthToken token = (OAuthToken) converter.fromJson(body, OAuthToken.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzM2NzM4OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDo0Nzo1OFrOHlQd4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTozOTo1MVrOHnTSmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyOTE1Mg==", "bodyText": "Is there a scenario where a certificate could have different contents to what's already cached and it needs to be set? If that's the case, it wouldn't be possible with this logic.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508829152", "createdAt": "2020-10-20T20:47:58Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.KeyStoreSpi;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableEntryException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The Azure KeyVault implementation of the KeyStoreSpi.\n+ */\n+public class KeyVaultKeyStore extends KeyStoreSpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyStore.class.getName());\n+\n+    /**\n+     * Stores the list of aliases.\n+     */\n+    private List<String> aliases;\n+\n+    /**\n+     * Stores the certificates by alias.\n+     */\n+    private final HashMap<String, Certificate> certificates = new HashMap<>();\n+\n+    /**\n+     * Stores the certificate keys by alias.\n+     */\n+    private final HashMap<String, Key> certificateKeys = new HashMap<>();\n+\n+    /**\n+     * Stores the creation date.\n+     */\n+    private final Date creationDate;\n+\n+    /**\n+     * Stores the key vault client.\n+     */\n+    private KeyVaultClient keyVault;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor uses System.getProperty for\n+     * <code>azure.keyvault.uri</code>, <code>azure.keyvault.tenantId</code>,\n+     * <code>azure.keyvault.clientId</code>,\n+     * <code>azure.keyvault.clientSecret</code> to initialize the keyvault\n+     * client.\n+     * </p>\n+     */\n+    public KeyVaultKeyStore() {\n+        creationDate = new Date();\n+        String keyVaultUri = System.getProperty(\"azure.keyvault.uri\");\n+        String tenantId = System.getProperty(\"azure.keyvault.tenantId\");\n+        String clientId = System.getProperty(\"azure.keyvault.clientId\");\n+        String clientSecret = System.getProperty(\"azure.keyvault.clientSecret\");\n+        keyVault = new KeyVaultClient(keyVaultUri, tenantId, clientId, clientSecret);\n+    }\n+\n+    @Override\n+    public Enumeration<String> engineAliases() {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return Collections.enumeration(aliases);\n+    }\n+\n+    @Override\n+    public boolean engineContainsAlias(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineDeleteEntry(String alias) {\n+    }\n+\n+    @Override\n+    public boolean engineEntryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass) {\n+        return super.engineEntryInstanceOf(alias, entryClass);\n+    }\n+\n+    @Override\n+    public Certificate engineGetCertificate(String alias) {\n+        Certificate certificate;\n+        if (certificates.containsKey(alias)) {\n+            certificate = certificates.get(alias);\n+        } else {\n+            certificate = keyVault.getCertificate(alias);\n+            if (certificate != null) {\n+                certificates.put(alias, certificate);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return certificate;\n+    }\n+\n+    @Override\n+    public String engineGetCertificateAlias(Certificate cert) {\n+        String alias = null;\n+        if (cert != null) {\n+            if (aliases == null) {\n+                aliases = keyVault.getAliases();\n+            }\n+            for (String candidateAlias : aliases) {\n+                Certificate certificate = engineGetCertificate(candidateAlias);\n+                if (certificate.equals(cert)) {\n+                    alias = candidateAlias;\n+                    break;\n+                }\n+            }\n+        }\n+        return alias;\n+    }\n+\n+    @Override\n+    public Certificate[] engineGetCertificateChain(String alias) {\n+        Certificate[] chain = null;\n+        Certificate certificate = engineGetCertificate(alias);\n+        if (certificate != null) {\n+            chain = new Certificate[1];\n+            chain[0] = certificate;\n+        }\n+        return chain;\n+    }\n+\n+    @Override\n+    public Date engineGetCreationDate(String alias) {\n+        return creationDate;\n+    }\n+\n+    @Override\n+    public KeyStore.Entry engineGetEntry(String alias, KeyStore.ProtectionParameter protParam) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException {\n+        return super.engineGetEntry(alias, protParam);\n+    }\n+\n+    @Override\n+    public Key engineGetKey(String alias, char[] password) {\n+        Key key;\n+        if (certificateKeys.containsKey(alias)) {\n+            key = certificateKeys.get(alias);\n+        } else {\n+            key = keyVault.getKey(alias, password);\n+            if (key != null) {\n+                certificateKeys.put(alias, key);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return key;\n+    }\n+\n+    @Override\n+    public boolean engineIsCertificateEntry(String alias) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return aliases.contains(alias);\n+    }\n+\n+    @Override\n+    public boolean engineIsKeyEntry(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineLoad(KeyStore.LoadStoreParameter param) {\n+        if (param instanceof KeyVaultLoadStoreParameter) {\n+            KeyVaultLoadStoreParameter parameter = (KeyVaultLoadStoreParameter) param;\n+            keyVault = new KeyVaultClient(\n+                parameter.getUri(),\n+                parameter.getTenantId(),\n+                parameter.getClientId(),\n+                parameter.getClientSecret());\n+        }\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineLoad(InputStream stream, char[] password) {\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineSetCertificateEntry(String alias, Certificate certificate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk3MjU3MQ==", "bodyText": "Correct. The Azure Key Vault is a read-only KeyStore from the perspective of the user with the one exception that it does side-loading for certificates from the classpath. Which is why this method is implemented the way it is.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510972571", "createdAt": "2020-10-23T15:39:51Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.KeyStoreSpi;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableEntryException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The Azure KeyVault implementation of the KeyStoreSpi.\n+ */\n+public class KeyVaultKeyStore extends KeyStoreSpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyStore.class.getName());\n+\n+    /**\n+     * Stores the list of aliases.\n+     */\n+    private List<String> aliases;\n+\n+    /**\n+     * Stores the certificates by alias.\n+     */\n+    private final HashMap<String, Certificate> certificates = new HashMap<>();\n+\n+    /**\n+     * Stores the certificate keys by alias.\n+     */\n+    private final HashMap<String, Key> certificateKeys = new HashMap<>();\n+\n+    /**\n+     * Stores the creation date.\n+     */\n+    private final Date creationDate;\n+\n+    /**\n+     * Stores the key vault client.\n+     */\n+    private KeyVaultClient keyVault;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor uses System.getProperty for\n+     * <code>azure.keyvault.uri</code>, <code>azure.keyvault.tenantId</code>,\n+     * <code>azure.keyvault.clientId</code>,\n+     * <code>azure.keyvault.clientSecret</code> to initialize the keyvault\n+     * client.\n+     * </p>\n+     */\n+    public KeyVaultKeyStore() {\n+        creationDate = new Date();\n+        String keyVaultUri = System.getProperty(\"azure.keyvault.uri\");\n+        String tenantId = System.getProperty(\"azure.keyvault.tenantId\");\n+        String clientId = System.getProperty(\"azure.keyvault.clientId\");\n+        String clientSecret = System.getProperty(\"azure.keyvault.clientSecret\");\n+        keyVault = new KeyVaultClient(keyVaultUri, tenantId, clientId, clientSecret);\n+    }\n+\n+    @Override\n+    public Enumeration<String> engineAliases() {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return Collections.enumeration(aliases);\n+    }\n+\n+    @Override\n+    public boolean engineContainsAlias(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineDeleteEntry(String alias) {\n+    }\n+\n+    @Override\n+    public boolean engineEntryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass) {\n+        return super.engineEntryInstanceOf(alias, entryClass);\n+    }\n+\n+    @Override\n+    public Certificate engineGetCertificate(String alias) {\n+        Certificate certificate;\n+        if (certificates.containsKey(alias)) {\n+            certificate = certificates.get(alias);\n+        } else {\n+            certificate = keyVault.getCertificate(alias);\n+            if (certificate != null) {\n+                certificates.put(alias, certificate);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return certificate;\n+    }\n+\n+    @Override\n+    public String engineGetCertificateAlias(Certificate cert) {\n+        String alias = null;\n+        if (cert != null) {\n+            if (aliases == null) {\n+                aliases = keyVault.getAliases();\n+            }\n+            for (String candidateAlias : aliases) {\n+                Certificate certificate = engineGetCertificate(candidateAlias);\n+                if (certificate.equals(cert)) {\n+                    alias = candidateAlias;\n+                    break;\n+                }\n+            }\n+        }\n+        return alias;\n+    }\n+\n+    @Override\n+    public Certificate[] engineGetCertificateChain(String alias) {\n+        Certificate[] chain = null;\n+        Certificate certificate = engineGetCertificate(alias);\n+        if (certificate != null) {\n+            chain = new Certificate[1];\n+            chain[0] = certificate;\n+        }\n+        return chain;\n+    }\n+\n+    @Override\n+    public Date engineGetCreationDate(String alias) {\n+        return creationDate;\n+    }\n+\n+    @Override\n+    public KeyStore.Entry engineGetEntry(String alias, KeyStore.ProtectionParameter protParam) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException {\n+        return super.engineGetEntry(alias, protParam);\n+    }\n+\n+    @Override\n+    public Key engineGetKey(String alias, char[] password) {\n+        Key key;\n+        if (certificateKeys.containsKey(alias)) {\n+            key = certificateKeys.get(alias);\n+        } else {\n+            key = keyVault.getKey(alias, password);\n+            if (key != null) {\n+                certificateKeys.put(alias, key);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return key;\n+    }\n+\n+    @Override\n+    public boolean engineIsCertificateEntry(String alias) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return aliases.contains(alias);\n+    }\n+\n+    @Override\n+    public boolean engineIsKeyEntry(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineLoad(KeyStore.LoadStoreParameter param) {\n+        if (param instanceof KeyVaultLoadStoreParameter) {\n+            KeyVaultLoadStoreParameter parameter = (KeyVaultLoadStoreParameter) param;\n+            keyVault = new KeyVaultClient(\n+                parameter.getUri(),\n+                parameter.getTenantId(),\n+                parameter.getClientId(),\n+                parameter.getClientSecret());\n+        }\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineLoad(InputStream stream, char[] password) {\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineSetCertificateEntry(String alias, Certificate certificate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyOTE1Mg=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzM3NzczOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDo1MDo0N1rOHlQkBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDo1MDo0N1rOHlQkBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzMDcyNg==", "bodyText": "This URL won't work on all of the other Azure Platforms, for e.g. Azure Service Fabric", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508830726", "createdAt": "2020-10-20T20:50:47Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/AuthClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.OAuthToken;\n+\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINER;\n+\n+/**\n+ * The REST client specific to getting an access token for Azure REST APIs.\n+ */\n+class AuthClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the Client ID fragment.\n+     */\n+    private static final String CLIENT_ID_FRAGMENT = \"&client_id=\";\n+\n+    /**\n+     * Stores the Client Secret fragment.\n+     */\n+    private static final String CLIENT_SECRET_FRAGMENT = \"&client_secret=\";\n+\n+    /**\n+     * Stores the Grant Type fragment.\n+     */\n+    private static final String GRANT_TYPE_FRAGMENT = \"grant_type=client_credentials\";\n+\n+    /**\n+     * Stores the Resource fragment.\n+     */\n+    private static final String RESOURCE_FRAGMENT = \"&resource=\";\n+\n+    /**\n+     * Stores the OAuth2 token base URL.\n+     */\n+    private static final String OAUTH2_TOKEN_BASE_URL = \"https://login.microsoftonline.com/\";\n+\n+    /**\n+     * Stores the OAuth2 token postfix.\n+     */\n+    private static final String OAUTH2_TOKEN_POSTFIX = \"/oauth2/token\";\n+\n+    /**\n+     * Stores the OAuth2 managed identity URL.\n+     */\n+    private static final String OAUTH2_MANAGED_IDENTITY_TOKEN_URL\n+        = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01\";\n+\n+    /**\n+     * Stores our logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(AuthClient.class.getName());\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor creates a default RestClient.\n+     * </p>\n+     */\n+    AuthClient() {\n+        super(RestClientFactory.createClient());\n+    }\n+\n+    /**\n+     * Get an access token for a managed identity.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource) {\n+        String result;\n+\n+        if (System.getenv(\"WEBSITE_SITE_NAME\") != null\n+            && !System.getenv(\"WEBSITE_SITE_NAME\").isEmpty()) {\n+            result = getAccessTokenOnAppService(resource);\n+        } else {\n+            result = getAccessTokenOnOthers(resource);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Get an access token.\n+     *\n+     * @param resource the resource.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     * @return the authorization token.\n+     */\n+    public String getAccessToken(String resource, String tenantId,\n+                                 String clientId, String clientSecret) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessToken\", new Object[] {\n+            resource, tenantId, clientId, clientSecret });\n+        LOGGER.info(\"Getting access token using client ID / client secret\");\n+        String result = null;\n+\n+        StringBuilder oauth2Url = new StringBuilder();\n+        oauth2Url.append(OAUTH2_TOKEN_BASE_URL)\n+                 .append(tenantId)\n+                 .append(OAUTH2_TOKEN_POSTFIX);\n+\n+        StringBuilder requestBody = new StringBuilder();\n+        requestBody.append(GRANT_TYPE_FRAGMENT)\n+                   .append(CLIENT_ID_FRAGMENT).append(clientId)\n+                   .append(CLIENT_SECRET_FRAGMENT).append(clientSecret)\n+                   .append(RESOURCE_FRAGMENT).append(resource);\n+\n+        String body = post(oauth2Url.toString(), requestBody.toString(), \"application/x-www-form-urlencoded\");\n+        if (body != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            OAuthToken token = (OAuthToken) converter.fromJson(body, OAuthToken.class);\n+            result = token.getAccess_token();\n+        }\n+        LOGGER.log(FINER, \"Access token: {0}\", result);\n+        return result;\n+    }\n+\n+    /**\n+     * Get the access token on Azure App Service.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    private String getAccessTokenOnAppService(String resource) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessTokenOnAppService\", resource);\n+        LOGGER.info(\"Getting access token using managed identity based on MSI_SECRET\");\n+        String result = null;\n+\n+        StringBuilder url = new StringBuilder();\n+        url.append(System.getenv(\"MSI_ENDPOINT\"))\n+           .append(\"?api-version=2017-09-01\")\n+           .append(RESOURCE_FRAGMENT).append(resource);\n+\n+        HashMap<String, String> headers = new HashMap<>();\n+        headers.put(\"Metadata\", \"true\");\n+        headers.put(\"Secret\", System.getenv(\"MSI_SECRET\"));\n+        String body = get(url.toString(), headers);\n+\n+        if (body != null) {\n+            JsonConverter converter = JsonConverterFactory.createJsonConverter();\n+            OAuthToken token = (OAuthToken) converter.fromJson(body, OAuthToken.class);\n+            result = token.getAccess_token();\n+        }\n+        LOGGER.exiting(\"AuthClient\", \"getAccessTokenOnAppService\", result);\n+        return result;\n+    }\n+\n+    /**\n+     * Get the authorization token on everything else but Azure App Service.\n+     *\n+     * @param resource the resource.\n+     * @return the authorization token.\n+     */\n+    private String getAccessTokenOnOthers(String resource) {\n+        LOGGER.entering(\"AuthClient\", \"getAccessTokenOnOthers\", resource);\n+        LOGGER.info(\"Getting access token using managed identity\");\n+        String result = null;\n+\n+        StringBuilder url = new StringBuilder();\n+        url.append(OAUTH2_MANAGED_IDENTITY_TOKEN_URL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzM3OTU1OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDo1MToxMFrOHlQlFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjozNzowOVrOHnVVKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzMDk5OQ==", "bodyText": "I'm not familiar with JCA but I wonder why these methods for keys are empty but we have things like engineIsKeyEntry where we call engineIsCertificateEntry inside. How is engineIsKeyEntry different that it needs an implementation, is it 100% expected to be used and the other methods are not? Are there scenarios where things like engineSetKeyEntry might need an implementation?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508830999", "createdAt": "2020-10-20T20:51:10Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.KeyStoreSpi;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableEntryException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The Azure KeyVault implementation of the KeyStoreSpi.\n+ */\n+public class KeyVaultKeyStore extends KeyStoreSpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyStore.class.getName());\n+\n+    /**\n+     * Stores the list of aliases.\n+     */\n+    private List<String> aliases;\n+\n+    /**\n+     * Stores the certificates by alias.\n+     */\n+    private final HashMap<String, Certificate> certificates = new HashMap<>();\n+\n+    /**\n+     * Stores the certificate keys by alias.\n+     */\n+    private final HashMap<String, Key> certificateKeys = new HashMap<>();\n+\n+    /**\n+     * Stores the creation date.\n+     */\n+    private final Date creationDate;\n+\n+    /**\n+     * Stores the key vault client.\n+     */\n+    private KeyVaultClient keyVault;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor uses System.getProperty for\n+     * <code>azure.keyvault.uri</code>, <code>azure.keyvault.tenantId</code>,\n+     * <code>azure.keyvault.clientId</code>,\n+     * <code>azure.keyvault.clientSecret</code> to initialize the keyvault\n+     * client.\n+     * </p>\n+     */\n+    public KeyVaultKeyStore() {\n+        creationDate = new Date();\n+        String keyVaultUri = System.getProperty(\"azure.keyvault.uri\");\n+        String tenantId = System.getProperty(\"azure.keyvault.tenantId\");\n+        String clientId = System.getProperty(\"azure.keyvault.clientId\");\n+        String clientSecret = System.getProperty(\"azure.keyvault.clientSecret\");\n+        keyVault = new KeyVaultClient(keyVaultUri, tenantId, clientId, clientSecret);\n+    }\n+\n+    @Override\n+    public Enumeration<String> engineAliases() {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return Collections.enumeration(aliases);\n+    }\n+\n+    @Override\n+    public boolean engineContainsAlias(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineDeleteEntry(String alias) {\n+    }\n+\n+    @Override\n+    public boolean engineEntryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass) {\n+        return super.engineEntryInstanceOf(alias, entryClass);\n+    }\n+\n+    @Override\n+    public Certificate engineGetCertificate(String alias) {\n+        Certificate certificate;\n+        if (certificates.containsKey(alias)) {\n+            certificate = certificates.get(alias);\n+        } else {\n+            certificate = keyVault.getCertificate(alias);\n+            if (certificate != null) {\n+                certificates.put(alias, certificate);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return certificate;\n+    }\n+\n+    @Override\n+    public String engineGetCertificateAlias(Certificate cert) {\n+        String alias = null;\n+        if (cert != null) {\n+            if (aliases == null) {\n+                aliases = keyVault.getAliases();\n+            }\n+            for (String candidateAlias : aliases) {\n+                Certificate certificate = engineGetCertificate(candidateAlias);\n+                if (certificate.equals(cert)) {\n+                    alias = candidateAlias;\n+                    break;\n+                }\n+            }\n+        }\n+        return alias;\n+    }\n+\n+    @Override\n+    public Certificate[] engineGetCertificateChain(String alias) {\n+        Certificate[] chain = null;\n+        Certificate certificate = engineGetCertificate(alias);\n+        if (certificate != null) {\n+            chain = new Certificate[1];\n+            chain[0] = certificate;\n+        }\n+        return chain;\n+    }\n+\n+    @Override\n+    public Date engineGetCreationDate(String alias) {\n+        return creationDate;\n+    }\n+\n+    @Override\n+    public KeyStore.Entry engineGetEntry(String alias, KeyStore.ProtectionParameter protParam) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException {\n+        return super.engineGetEntry(alias, protParam);\n+    }\n+\n+    @Override\n+    public Key engineGetKey(String alias, char[] password) {\n+        Key key;\n+        if (certificateKeys.containsKey(alias)) {\n+            key = certificateKeys.get(alias);\n+        } else {\n+            key = keyVault.getKey(alias, password);\n+            if (key != null) {\n+                certificateKeys.put(alias, key);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return key;\n+    }\n+\n+    @Override\n+    public boolean engineIsCertificateEntry(String alias) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return aliases.contains(alias);\n+    }\n+\n+    @Override\n+    public boolean engineIsKeyEntry(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineLoad(KeyStore.LoadStoreParameter param) {\n+        if (param instanceof KeyVaultLoadStoreParameter) {\n+            KeyVaultLoadStoreParameter parameter = (KeyVaultLoadStoreParameter) param;\n+            keyVault = new KeyVaultClient(\n+                parameter.getUri(),\n+                parameter.getTenantId(),\n+                parameter.getClientId(),\n+                parameter.getClientSecret());\n+        }\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineLoad(InputStream stream, char[] password) {\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineSetCertificateEntry(String alias, Certificate certificate) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        if (!aliases.contains(alias)) {\n+            aliases.add(alias);\n+            certificates.put(alias, certificate);\n+        }\n+    }\n+\n+    @Override\n+    public void engineSetEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam) throws KeyStoreException {\n+        super.engineSetEntry(alias, entry, protParam);\n+    }\n+\n+    @Override\n+    public void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) {\n+    }\n+\n+    @Override\n+    public void engineSetKeyEntry(String alias, byte[] key, Certificate[] chain) {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwNTk5Mg==", "bodyText": "Set engineSet methods do not get an implementation here because the Azure Key Vault KeyStore is a read-only KeyStore", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511005992", "createdAt": "2020-10-23T16:37:09Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.KeyStoreSpi;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableEntryException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The Azure KeyVault implementation of the KeyStoreSpi.\n+ */\n+public class KeyVaultKeyStore extends KeyStoreSpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyStore.class.getName());\n+\n+    /**\n+     * Stores the list of aliases.\n+     */\n+    private List<String> aliases;\n+\n+    /**\n+     * Stores the certificates by alias.\n+     */\n+    private final HashMap<String, Certificate> certificates = new HashMap<>();\n+\n+    /**\n+     * Stores the certificate keys by alias.\n+     */\n+    private final HashMap<String, Key> certificateKeys = new HashMap<>();\n+\n+    /**\n+     * Stores the creation date.\n+     */\n+    private final Date creationDate;\n+\n+    /**\n+     * Stores the key vault client.\n+     */\n+    private KeyVaultClient keyVault;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor uses System.getProperty for\n+     * <code>azure.keyvault.uri</code>, <code>azure.keyvault.tenantId</code>,\n+     * <code>azure.keyvault.clientId</code>,\n+     * <code>azure.keyvault.clientSecret</code> to initialize the keyvault\n+     * client.\n+     * </p>\n+     */\n+    public KeyVaultKeyStore() {\n+        creationDate = new Date();\n+        String keyVaultUri = System.getProperty(\"azure.keyvault.uri\");\n+        String tenantId = System.getProperty(\"azure.keyvault.tenantId\");\n+        String clientId = System.getProperty(\"azure.keyvault.clientId\");\n+        String clientSecret = System.getProperty(\"azure.keyvault.clientSecret\");\n+        keyVault = new KeyVaultClient(keyVaultUri, tenantId, clientId, clientSecret);\n+    }\n+\n+    @Override\n+    public Enumeration<String> engineAliases() {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return Collections.enumeration(aliases);\n+    }\n+\n+    @Override\n+    public boolean engineContainsAlias(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineDeleteEntry(String alias) {\n+    }\n+\n+    @Override\n+    public boolean engineEntryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass) {\n+        return super.engineEntryInstanceOf(alias, entryClass);\n+    }\n+\n+    @Override\n+    public Certificate engineGetCertificate(String alias) {\n+        Certificate certificate;\n+        if (certificates.containsKey(alias)) {\n+            certificate = certificates.get(alias);\n+        } else {\n+            certificate = keyVault.getCertificate(alias);\n+            if (certificate != null) {\n+                certificates.put(alias, certificate);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return certificate;\n+    }\n+\n+    @Override\n+    public String engineGetCertificateAlias(Certificate cert) {\n+        String alias = null;\n+        if (cert != null) {\n+            if (aliases == null) {\n+                aliases = keyVault.getAliases();\n+            }\n+            for (String candidateAlias : aliases) {\n+                Certificate certificate = engineGetCertificate(candidateAlias);\n+                if (certificate.equals(cert)) {\n+                    alias = candidateAlias;\n+                    break;\n+                }\n+            }\n+        }\n+        return alias;\n+    }\n+\n+    @Override\n+    public Certificate[] engineGetCertificateChain(String alias) {\n+        Certificate[] chain = null;\n+        Certificate certificate = engineGetCertificate(alias);\n+        if (certificate != null) {\n+            chain = new Certificate[1];\n+            chain[0] = certificate;\n+        }\n+        return chain;\n+    }\n+\n+    @Override\n+    public Date engineGetCreationDate(String alias) {\n+        return creationDate;\n+    }\n+\n+    @Override\n+    public KeyStore.Entry engineGetEntry(String alias, KeyStore.ProtectionParameter protParam) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException {\n+        return super.engineGetEntry(alias, protParam);\n+    }\n+\n+    @Override\n+    public Key engineGetKey(String alias, char[] password) {\n+        Key key;\n+        if (certificateKeys.containsKey(alias)) {\n+            key = certificateKeys.get(alias);\n+        } else {\n+            key = keyVault.getKey(alias, password);\n+            if (key != null) {\n+                certificateKeys.put(alias, key);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return key;\n+    }\n+\n+    @Override\n+    public boolean engineIsCertificateEntry(String alias) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return aliases.contains(alias);\n+    }\n+\n+    @Override\n+    public boolean engineIsKeyEntry(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineLoad(KeyStore.LoadStoreParameter param) {\n+        if (param instanceof KeyVaultLoadStoreParameter) {\n+            KeyVaultLoadStoreParameter parameter = (KeyVaultLoadStoreParameter) param;\n+            keyVault = new KeyVaultClient(\n+                parameter.getUri(),\n+                parameter.getTenantId(),\n+                parameter.getClientId(),\n+                parameter.getClientSecret());\n+        }\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineLoad(InputStream stream, char[] password) {\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineSetCertificateEntry(String alias, Certificate certificate) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        if (!aliases.contains(alias)) {\n+            aliases.add(alias);\n+            certificates.put(alias, certificate);\n+        }\n+    }\n+\n+    @Override\n+    public void engineSetEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam) throws KeyStoreException {\n+        super.engineSetEntry(alias, entry, protParam);\n+    }\n+\n+    @Override\n+    public void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) {\n+    }\n+\n+    @Override\n+    public void engineSetKeyEntry(String alias, byte[] key, Certificate[] chain) {\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzMDk5OQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 237}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzM5Nzk3OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDo1NjozNFrOHlQw6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzo0NjowN1rOHnXjKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzNDAyNg==", "bodyText": "InputStream and BufferedReader must be closed after use in a finally block to avoid leaks. It is even more convenient to use try-with-resources statements.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    InputStream in = getClass().getResourceAsStream(path);\n          \n          \n            \n                    if (in != null) {\n          \n          \n            \n                        BufferedReader br = new BufferedReader(new InputStreamReader(in));\n          \n          \n            \n                        String resource;\n          \n          \n            \n                        while ((resource = br.readLine()) != null) {\n          \n          \n            \n                            filenames.add(resource);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return filenames.toArray(new String[0]);\n          \n          \n            \n                    try (InputStream in = getClass().getResourceAsStream(path)) {\n          \n          \n            \n                        if (in != null) {\n          \n          \n            \n                            try (BufferedReader br = new BufferedReader(new InputStreamReader(in))) {\n          \n          \n            \n                                String resource;\n          \n          \n            \n                                while ((resource = br.readLine()) != null) {\n          \n          \n            \n                                    filenames.add(resource);\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return filenames.toArray(new String[0]);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508834026", "createdAt": "2020-10-20T20:56:34Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.KeyStoreSpi;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableEntryException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The Azure KeyVault implementation of the KeyStoreSpi.\n+ */\n+public class KeyVaultKeyStore extends KeyStoreSpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyStore.class.getName());\n+\n+    /**\n+     * Stores the list of aliases.\n+     */\n+    private List<String> aliases;\n+\n+    /**\n+     * Stores the certificates by alias.\n+     */\n+    private final HashMap<String, Certificate> certificates = new HashMap<>();\n+\n+    /**\n+     * Stores the certificate keys by alias.\n+     */\n+    private final HashMap<String, Key> certificateKeys = new HashMap<>();\n+\n+    /**\n+     * Stores the creation date.\n+     */\n+    private final Date creationDate;\n+\n+    /**\n+     * Stores the key vault client.\n+     */\n+    private KeyVaultClient keyVault;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor uses System.getProperty for\n+     * <code>azure.keyvault.uri</code>, <code>azure.keyvault.tenantId</code>,\n+     * <code>azure.keyvault.clientId</code>,\n+     * <code>azure.keyvault.clientSecret</code> to initialize the keyvault\n+     * client.\n+     * </p>\n+     */\n+    public KeyVaultKeyStore() {\n+        creationDate = new Date();\n+        String keyVaultUri = System.getProperty(\"azure.keyvault.uri\");\n+        String tenantId = System.getProperty(\"azure.keyvault.tenantId\");\n+        String clientId = System.getProperty(\"azure.keyvault.clientId\");\n+        String clientSecret = System.getProperty(\"azure.keyvault.clientSecret\");\n+        keyVault = new KeyVaultClient(keyVaultUri, tenantId, clientId, clientSecret);\n+    }\n+\n+    @Override\n+    public Enumeration<String> engineAliases() {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return Collections.enumeration(aliases);\n+    }\n+\n+    @Override\n+    public boolean engineContainsAlias(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineDeleteEntry(String alias) {\n+    }\n+\n+    @Override\n+    public boolean engineEntryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass) {\n+        return super.engineEntryInstanceOf(alias, entryClass);\n+    }\n+\n+    @Override\n+    public Certificate engineGetCertificate(String alias) {\n+        Certificate certificate;\n+        if (certificates.containsKey(alias)) {\n+            certificate = certificates.get(alias);\n+        } else {\n+            certificate = keyVault.getCertificate(alias);\n+            if (certificate != null) {\n+                certificates.put(alias, certificate);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return certificate;\n+    }\n+\n+    @Override\n+    public String engineGetCertificateAlias(Certificate cert) {\n+        String alias = null;\n+        if (cert != null) {\n+            if (aliases == null) {\n+                aliases = keyVault.getAliases();\n+            }\n+            for (String candidateAlias : aliases) {\n+                Certificate certificate = engineGetCertificate(candidateAlias);\n+                if (certificate.equals(cert)) {\n+                    alias = candidateAlias;\n+                    break;\n+                }\n+            }\n+        }\n+        return alias;\n+    }\n+\n+    @Override\n+    public Certificate[] engineGetCertificateChain(String alias) {\n+        Certificate[] chain = null;\n+        Certificate certificate = engineGetCertificate(alias);\n+        if (certificate != null) {\n+            chain = new Certificate[1];\n+            chain[0] = certificate;\n+        }\n+        return chain;\n+    }\n+\n+    @Override\n+    public Date engineGetCreationDate(String alias) {\n+        return creationDate;\n+    }\n+\n+    @Override\n+    public KeyStore.Entry engineGetEntry(String alias, KeyStore.ProtectionParameter protParam) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException {\n+        return super.engineGetEntry(alias, protParam);\n+    }\n+\n+    @Override\n+    public Key engineGetKey(String alias, char[] password) {\n+        Key key;\n+        if (certificateKeys.containsKey(alias)) {\n+            key = certificateKeys.get(alias);\n+        } else {\n+            key = keyVault.getKey(alias, password);\n+            if (key != null) {\n+                certificateKeys.put(alias, key);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return key;\n+    }\n+\n+    @Override\n+    public boolean engineIsCertificateEntry(String alias) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return aliases.contains(alias);\n+    }\n+\n+    @Override\n+    public boolean engineIsKeyEntry(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineLoad(KeyStore.LoadStoreParameter param) {\n+        if (param instanceof KeyVaultLoadStoreParameter) {\n+            KeyVaultLoadStoreParameter parameter = (KeyVaultLoadStoreParameter) param;\n+            keyVault = new KeyVaultClient(\n+                parameter.getUri(),\n+                parameter.getTenantId(),\n+                parameter.getClientId(),\n+                parameter.getClientSecret());\n+        }\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineLoad(InputStream stream, char[] password) {\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineSetCertificateEntry(String alias, Certificate certificate) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        if (!aliases.contains(alias)) {\n+            aliases.add(alias);\n+            certificates.put(alias, certificate);\n+        }\n+    }\n+\n+    @Override\n+    public void engineSetEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam) throws KeyStoreException {\n+        super.engineSetEntry(alias, entry, protParam);\n+    }\n+\n+    @Override\n+    public void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) {\n+    }\n+\n+    @Override\n+    public void engineSetKeyEntry(String alias, byte[] key, Certificate[] chain) {\n+    }\n+\n+    @Override\n+    public int engineSize() {\n+        return aliases != null ? aliases.size() : 0;\n+    }\n+\n+    @Override\n+    public void engineStore(OutputStream stream, char[] password) {\n+    }\n+\n+    @Override\n+    public void engineStore(KeyStore.LoadStoreParameter param) {\n+    }\n+\n+    /**\n+     * Get the filenames.\n+     *\n+     * @param path the path.\n+     * @return the filenames.\n+     * @throws IOException when an I/O error occurs.\n+     */\n+    private String[] getFilenames(String path) throws IOException {\n+        List<String> filenames = new ArrayList<>();\n+        InputStream in = getClass().getResourceAsStream(path);\n+        if (in != null) {\n+            BufferedReader br = new BufferedReader(new InputStreamReader(in));\n+            String resource;\n+            while ((resource = br.readLine()) != null) {\n+                filenames.add(resource);\n+            }\n+        }\n+        return filenames.toArray(new String[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA0MjM0NA==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511042344", "createdAt": "2020-10-23T17:46:07Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.KeyStoreSpi;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableEntryException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The Azure KeyVault implementation of the KeyStoreSpi.\n+ */\n+public class KeyVaultKeyStore extends KeyStoreSpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyStore.class.getName());\n+\n+    /**\n+     * Stores the list of aliases.\n+     */\n+    private List<String> aliases;\n+\n+    /**\n+     * Stores the certificates by alias.\n+     */\n+    private final HashMap<String, Certificate> certificates = new HashMap<>();\n+\n+    /**\n+     * Stores the certificate keys by alias.\n+     */\n+    private final HashMap<String, Key> certificateKeys = new HashMap<>();\n+\n+    /**\n+     * Stores the creation date.\n+     */\n+    private final Date creationDate;\n+\n+    /**\n+     * Stores the key vault client.\n+     */\n+    private KeyVaultClient keyVault;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor uses System.getProperty for\n+     * <code>azure.keyvault.uri</code>, <code>azure.keyvault.tenantId</code>,\n+     * <code>azure.keyvault.clientId</code>,\n+     * <code>azure.keyvault.clientSecret</code> to initialize the keyvault\n+     * client.\n+     * </p>\n+     */\n+    public KeyVaultKeyStore() {\n+        creationDate = new Date();\n+        String keyVaultUri = System.getProperty(\"azure.keyvault.uri\");\n+        String tenantId = System.getProperty(\"azure.keyvault.tenantId\");\n+        String clientId = System.getProperty(\"azure.keyvault.clientId\");\n+        String clientSecret = System.getProperty(\"azure.keyvault.clientSecret\");\n+        keyVault = new KeyVaultClient(keyVaultUri, tenantId, clientId, clientSecret);\n+    }\n+\n+    @Override\n+    public Enumeration<String> engineAliases() {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return Collections.enumeration(aliases);\n+    }\n+\n+    @Override\n+    public boolean engineContainsAlias(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineDeleteEntry(String alias) {\n+    }\n+\n+    @Override\n+    public boolean engineEntryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass) {\n+        return super.engineEntryInstanceOf(alias, entryClass);\n+    }\n+\n+    @Override\n+    public Certificate engineGetCertificate(String alias) {\n+        Certificate certificate;\n+        if (certificates.containsKey(alias)) {\n+            certificate = certificates.get(alias);\n+        } else {\n+            certificate = keyVault.getCertificate(alias);\n+            if (certificate != null) {\n+                certificates.put(alias, certificate);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return certificate;\n+    }\n+\n+    @Override\n+    public String engineGetCertificateAlias(Certificate cert) {\n+        String alias = null;\n+        if (cert != null) {\n+            if (aliases == null) {\n+                aliases = keyVault.getAliases();\n+            }\n+            for (String candidateAlias : aliases) {\n+                Certificate certificate = engineGetCertificate(candidateAlias);\n+                if (certificate.equals(cert)) {\n+                    alias = candidateAlias;\n+                    break;\n+                }\n+            }\n+        }\n+        return alias;\n+    }\n+\n+    @Override\n+    public Certificate[] engineGetCertificateChain(String alias) {\n+        Certificate[] chain = null;\n+        Certificate certificate = engineGetCertificate(alias);\n+        if (certificate != null) {\n+            chain = new Certificate[1];\n+            chain[0] = certificate;\n+        }\n+        return chain;\n+    }\n+\n+    @Override\n+    public Date engineGetCreationDate(String alias) {\n+        return creationDate;\n+    }\n+\n+    @Override\n+    public KeyStore.Entry engineGetEntry(String alias, KeyStore.ProtectionParameter protParam) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException {\n+        return super.engineGetEntry(alias, protParam);\n+    }\n+\n+    @Override\n+    public Key engineGetKey(String alias, char[] password) {\n+        Key key;\n+        if (certificateKeys.containsKey(alias)) {\n+            key = certificateKeys.get(alias);\n+        } else {\n+            key = keyVault.getKey(alias, password);\n+            if (key != null) {\n+                certificateKeys.put(alias, key);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return key;\n+    }\n+\n+    @Override\n+    public boolean engineIsCertificateEntry(String alias) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return aliases.contains(alias);\n+    }\n+\n+    @Override\n+    public boolean engineIsKeyEntry(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineLoad(KeyStore.LoadStoreParameter param) {\n+        if (param instanceof KeyVaultLoadStoreParameter) {\n+            KeyVaultLoadStoreParameter parameter = (KeyVaultLoadStoreParameter) param;\n+            keyVault = new KeyVaultClient(\n+                parameter.getUri(),\n+                parameter.getTenantId(),\n+                parameter.getClientId(),\n+                parameter.getClientSecret());\n+        }\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineLoad(InputStream stream, char[] password) {\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineSetCertificateEntry(String alias, Certificate certificate) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        if (!aliases.contains(alias)) {\n+            aliases.add(alias);\n+            certificates.put(alias, certificate);\n+        }\n+    }\n+\n+    @Override\n+    public void engineSetEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam) throws KeyStoreException {\n+        super.engineSetEntry(alias, entry, protParam);\n+    }\n+\n+    @Override\n+    public void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) {\n+    }\n+\n+    @Override\n+    public void engineSetKeyEntry(String alias, byte[] key, Certificate[] chain) {\n+    }\n+\n+    @Override\n+    public int engineSize() {\n+        return aliases != null ? aliases.size() : 0;\n+    }\n+\n+    @Override\n+    public void engineStore(OutputStream stream, char[] password) {\n+    }\n+\n+    @Override\n+    public void engineStore(KeyStore.LoadStoreParameter param) {\n+    }\n+\n+    /**\n+     * Get the filenames.\n+     *\n+     * @param path the path.\n+     * @return the filenames.\n+     * @throws IOException when an I/O error occurs.\n+     */\n+    private String[] getFilenames(String path) throws IOException {\n+        List<String> filenames = new ArrayList<>();\n+        InputStream in = getClass().getResourceAsStream(path);\n+        if (in != null) {\n+            BufferedReader br = new BufferedReader(new InputStreamReader(in));\n+            String resource;\n+            while ((resource = br.readLine()) != null) {\n+                filenames.add(resource);\n+            }\n+        }\n+        return filenames.toArray(new String[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzNDAyNg=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 269}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQwNjEzOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDo1OTowM1rOHlQ2Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOTozMjozNFrOHnbsLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzNTM1OQ==", "bodyText": "Use a try-with-resources block to ensure this is closed after use.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ByteArrayOutputStream byteOutput = new ByteArrayOutputStream();\n          \n          \n            \n                    byte[] buffer = new byte[1024];\n          \n          \n            \n                    while (true) {\n          \n          \n            \n                        int r = inputStream.read(buffer);\n          \n          \n            \n                        if (r == -1) {\n          \n          \n            \n                            break;\n          \n          \n            \n                        }\n          \n          \n            \n                        byteOutput.write(buffer, 0, r);\n          \n          \n            \n                    }\n          \n          \n            \n                    return byteOutput.toByteArray();\n          \n          \n            \n                    byte[] bytes;\n          \n          \n            \n                    try (ByteArrayOutputStream byteOutput = new ByteArrayOutputStream()) {\n          \n          \n            \n                        byte[] buffer = new byte[1024];\n          \n          \n            \n                        while (true) {\n          \n          \n            \n                            int r = inputStream.read(buffer);\n          \n          \n            \n                            if (r == -1) {\n          \n          \n            \n                                break;\n          \n          \n            \n                            }\n          \n          \n            \n                            byteOutput.write(buffer, 0, r);\n          \n          \n            \n                        }\n          \n          \n            \n                        bytes = byteOutput.toByteArray();\n          \n          \n            \n                    }\n          \n          \n            \n                    return bytes;", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508835359", "createdAt": "2020-10-20T20:59:03Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.KeyStoreSpi;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableEntryException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The Azure KeyVault implementation of the KeyStoreSpi.\n+ */\n+public class KeyVaultKeyStore extends KeyStoreSpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyStore.class.getName());\n+\n+    /**\n+     * Stores the list of aliases.\n+     */\n+    private List<String> aliases;\n+\n+    /**\n+     * Stores the certificates by alias.\n+     */\n+    private final HashMap<String, Certificate> certificates = new HashMap<>();\n+\n+    /**\n+     * Stores the certificate keys by alias.\n+     */\n+    private final HashMap<String, Key> certificateKeys = new HashMap<>();\n+\n+    /**\n+     * Stores the creation date.\n+     */\n+    private final Date creationDate;\n+\n+    /**\n+     * Stores the key vault client.\n+     */\n+    private KeyVaultClient keyVault;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor uses System.getProperty for\n+     * <code>azure.keyvault.uri</code>, <code>azure.keyvault.tenantId</code>,\n+     * <code>azure.keyvault.clientId</code>,\n+     * <code>azure.keyvault.clientSecret</code> to initialize the keyvault\n+     * client.\n+     * </p>\n+     */\n+    public KeyVaultKeyStore() {\n+        creationDate = new Date();\n+        String keyVaultUri = System.getProperty(\"azure.keyvault.uri\");\n+        String tenantId = System.getProperty(\"azure.keyvault.tenantId\");\n+        String clientId = System.getProperty(\"azure.keyvault.clientId\");\n+        String clientSecret = System.getProperty(\"azure.keyvault.clientSecret\");\n+        keyVault = new KeyVaultClient(keyVaultUri, tenantId, clientId, clientSecret);\n+    }\n+\n+    @Override\n+    public Enumeration<String> engineAliases() {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return Collections.enumeration(aliases);\n+    }\n+\n+    @Override\n+    public boolean engineContainsAlias(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineDeleteEntry(String alias) {\n+    }\n+\n+    @Override\n+    public boolean engineEntryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass) {\n+        return super.engineEntryInstanceOf(alias, entryClass);\n+    }\n+\n+    @Override\n+    public Certificate engineGetCertificate(String alias) {\n+        Certificate certificate;\n+        if (certificates.containsKey(alias)) {\n+            certificate = certificates.get(alias);\n+        } else {\n+            certificate = keyVault.getCertificate(alias);\n+            if (certificate != null) {\n+                certificates.put(alias, certificate);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return certificate;\n+    }\n+\n+    @Override\n+    public String engineGetCertificateAlias(Certificate cert) {\n+        String alias = null;\n+        if (cert != null) {\n+            if (aliases == null) {\n+                aliases = keyVault.getAliases();\n+            }\n+            for (String candidateAlias : aliases) {\n+                Certificate certificate = engineGetCertificate(candidateAlias);\n+                if (certificate.equals(cert)) {\n+                    alias = candidateAlias;\n+                    break;\n+                }\n+            }\n+        }\n+        return alias;\n+    }\n+\n+    @Override\n+    public Certificate[] engineGetCertificateChain(String alias) {\n+        Certificate[] chain = null;\n+        Certificate certificate = engineGetCertificate(alias);\n+        if (certificate != null) {\n+            chain = new Certificate[1];\n+            chain[0] = certificate;\n+        }\n+        return chain;\n+    }\n+\n+    @Override\n+    public Date engineGetCreationDate(String alias) {\n+        return creationDate;\n+    }\n+\n+    @Override\n+    public KeyStore.Entry engineGetEntry(String alias, KeyStore.ProtectionParameter protParam) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException {\n+        return super.engineGetEntry(alias, protParam);\n+    }\n+\n+    @Override\n+    public Key engineGetKey(String alias, char[] password) {\n+        Key key;\n+        if (certificateKeys.containsKey(alias)) {\n+            key = certificateKeys.get(alias);\n+        } else {\n+            key = keyVault.getKey(alias, password);\n+            if (key != null) {\n+                certificateKeys.put(alias, key);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return key;\n+    }\n+\n+    @Override\n+    public boolean engineIsCertificateEntry(String alias) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return aliases.contains(alias);\n+    }\n+\n+    @Override\n+    public boolean engineIsKeyEntry(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineLoad(KeyStore.LoadStoreParameter param) {\n+        if (param instanceof KeyVaultLoadStoreParameter) {\n+            KeyVaultLoadStoreParameter parameter = (KeyVaultLoadStoreParameter) param;\n+            keyVault = new KeyVaultClient(\n+                parameter.getUri(),\n+                parameter.getTenantId(),\n+                parameter.getClientId(),\n+                parameter.getClientSecret());\n+        }\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineLoad(InputStream stream, char[] password) {\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineSetCertificateEntry(String alias, Certificate certificate) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        if (!aliases.contains(alias)) {\n+            aliases.add(alias);\n+            certificates.put(alias, certificate);\n+        }\n+    }\n+\n+    @Override\n+    public void engineSetEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam) throws KeyStoreException {\n+        super.engineSetEntry(alias, entry, protParam);\n+    }\n+\n+    @Override\n+    public void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) {\n+    }\n+\n+    @Override\n+    public void engineSetKeyEntry(String alias, byte[] key, Certificate[] chain) {\n+    }\n+\n+    @Override\n+    public int engineSize() {\n+        return aliases != null ? aliases.size() : 0;\n+    }\n+\n+    @Override\n+    public void engineStore(OutputStream stream, char[] password) {\n+    }\n+\n+    @Override\n+    public void engineStore(KeyStore.LoadStoreParameter param) {\n+    }\n+\n+    /**\n+     * Get the filenames.\n+     *\n+     * @param path the path.\n+     * @return the filenames.\n+     * @throws IOException when an I/O error occurs.\n+     */\n+    private String[] getFilenames(String path) throws IOException {\n+        List<String> filenames = new ArrayList<>();\n+        InputStream in = getClass().getResourceAsStream(path);\n+        if (in != null) {\n+            BufferedReader br = new BufferedReader(new InputStreamReader(in));\n+            String resource;\n+            while ((resource = br.readLine()) != null) {\n+                filenames.add(resource);\n+            }\n+        }\n+        return filenames.toArray(new String[0]);\n+    }\n+\n+    /**\n+     * Read all the bytes for a given input stream.\n+     *\n+     * @param inputStream the input stream.\n+     * @return the byte-array.\n+     * @throws IOException when an I/O error occurs.\n+     */\n+    private byte[] readAllBytes(InputStream inputStream) throws IOException {\n+        ByteArrayOutputStream byteOutput = new ByteArrayOutputStream();\n+        byte[] buffer = new byte[1024];\n+        while (true) {\n+            int r = inputStream.read(buffer);\n+            if (r == -1) {\n+                break;\n+            }\n+            byteOutput.write(buffer, 0, r);\n+        }\n+        return byteOutput.toByteArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 289}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTExMDE4OQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511110189", "createdAt": "2020-10-23T19:32:34Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.KeyStoreSpi;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableEntryException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The Azure KeyVault implementation of the KeyStoreSpi.\n+ */\n+public class KeyVaultKeyStore extends KeyStoreSpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyStore.class.getName());\n+\n+    /**\n+     * Stores the list of aliases.\n+     */\n+    private List<String> aliases;\n+\n+    /**\n+     * Stores the certificates by alias.\n+     */\n+    private final HashMap<String, Certificate> certificates = new HashMap<>();\n+\n+    /**\n+     * Stores the certificate keys by alias.\n+     */\n+    private final HashMap<String, Key> certificateKeys = new HashMap<>();\n+\n+    /**\n+     * Stores the creation date.\n+     */\n+    private final Date creationDate;\n+\n+    /**\n+     * Stores the key vault client.\n+     */\n+    private KeyVaultClient keyVault;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor uses System.getProperty for\n+     * <code>azure.keyvault.uri</code>, <code>azure.keyvault.tenantId</code>,\n+     * <code>azure.keyvault.clientId</code>,\n+     * <code>azure.keyvault.clientSecret</code> to initialize the keyvault\n+     * client.\n+     * </p>\n+     */\n+    public KeyVaultKeyStore() {\n+        creationDate = new Date();\n+        String keyVaultUri = System.getProperty(\"azure.keyvault.uri\");\n+        String tenantId = System.getProperty(\"azure.keyvault.tenantId\");\n+        String clientId = System.getProperty(\"azure.keyvault.clientId\");\n+        String clientSecret = System.getProperty(\"azure.keyvault.clientSecret\");\n+        keyVault = new KeyVaultClient(keyVaultUri, tenantId, clientId, clientSecret);\n+    }\n+\n+    @Override\n+    public Enumeration<String> engineAliases() {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return Collections.enumeration(aliases);\n+    }\n+\n+    @Override\n+    public boolean engineContainsAlias(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineDeleteEntry(String alias) {\n+    }\n+\n+    @Override\n+    public boolean engineEntryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass) {\n+        return super.engineEntryInstanceOf(alias, entryClass);\n+    }\n+\n+    @Override\n+    public Certificate engineGetCertificate(String alias) {\n+        Certificate certificate;\n+        if (certificates.containsKey(alias)) {\n+            certificate = certificates.get(alias);\n+        } else {\n+            certificate = keyVault.getCertificate(alias);\n+            if (certificate != null) {\n+                certificates.put(alias, certificate);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return certificate;\n+    }\n+\n+    @Override\n+    public String engineGetCertificateAlias(Certificate cert) {\n+        String alias = null;\n+        if (cert != null) {\n+            if (aliases == null) {\n+                aliases = keyVault.getAliases();\n+            }\n+            for (String candidateAlias : aliases) {\n+                Certificate certificate = engineGetCertificate(candidateAlias);\n+                if (certificate.equals(cert)) {\n+                    alias = candidateAlias;\n+                    break;\n+                }\n+            }\n+        }\n+        return alias;\n+    }\n+\n+    @Override\n+    public Certificate[] engineGetCertificateChain(String alias) {\n+        Certificate[] chain = null;\n+        Certificate certificate = engineGetCertificate(alias);\n+        if (certificate != null) {\n+            chain = new Certificate[1];\n+            chain[0] = certificate;\n+        }\n+        return chain;\n+    }\n+\n+    @Override\n+    public Date engineGetCreationDate(String alias) {\n+        return creationDate;\n+    }\n+\n+    @Override\n+    public KeyStore.Entry engineGetEntry(String alias, KeyStore.ProtectionParameter protParam) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException {\n+        return super.engineGetEntry(alias, protParam);\n+    }\n+\n+    @Override\n+    public Key engineGetKey(String alias, char[] password) {\n+        Key key;\n+        if (certificateKeys.containsKey(alias)) {\n+            key = certificateKeys.get(alias);\n+        } else {\n+            key = keyVault.getKey(alias, password);\n+            if (key != null) {\n+                certificateKeys.put(alias, key);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return key;\n+    }\n+\n+    @Override\n+    public boolean engineIsCertificateEntry(String alias) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return aliases.contains(alias);\n+    }\n+\n+    @Override\n+    public boolean engineIsKeyEntry(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineLoad(KeyStore.LoadStoreParameter param) {\n+        if (param instanceof KeyVaultLoadStoreParameter) {\n+            KeyVaultLoadStoreParameter parameter = (KeyVaultLoadStoreParameter) param;\n+            keyVault = new KeyVaultClient(\n+                parameter.getUri(),\n+                parameter.getTenantId(),\n+                parameter.getClientId(),\n+                parameter.getClientSecret());\n+        }\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineLoad(InputStream stream, char[] password) {\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineSetCertificateEntry(String alias, Certificate certificate) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        if (!aliases.contains(alias)) {\n+            aliases.add(alias);\n+            certificates.put(alias, certificate);\n+        }\n+    }\n+\n+    @Override\n+    public void engineSetEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam) throws KeyStoreException {\n+        super.engineSetEntry(alias, entry, protParam);\n+    }\n+\n+    @Override\n+    public void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) {\n+    }\n+\n+    @Override\n+    public void engineSetKeyEntry(String alias, byte[] key, Certificate[] chain) {\n+    }\n+\n+    @Override\n+    public int engineSize() {\n+        return aliases != null ? aliases.size() : 0;\n+    }\n+\n+    @Override\n+    public void engineStore(OutputStream stream, char[] password) {\n+    }\n+\n+    @Override\n+    public void engineStore(KeyStore.LoadStoreParameter param) {\n+    }\n+\n+    /**\n+     * Get the filenames.\n+     *\n+     * @param path the path.\n+     * @return the filenames.\n+     * @throws IOException when an I/O error occurs.\n+     */\n+    private String[] getFilenames(String path) throws IOException {\n+        List<String> filenames = new ArrayList<>();\n+        InputStream in = getClass().getResourceAsStream(path);\n+        if (in != null) {\n+            BufferedReader br = new BufferedReader(new InputStreamReader(in));\n+            String resource;\n+            while ((resource = br.readLine()) != null) {\n+                filenames.add(resource);\n+            }\n+        }\n+        return filenames.toArray(new String[0]);\n+    }\n+\n+    /**\n+     * Read all the bytes for a given input stream.\n+     *\n+     * @param inputStream the input stream.\n+     * @return the byte-array.\n+     * @throws IOException when an I/O error occurs.\n+     */\n+    private byte[] readAllBytes(InputStream inputStream) throws IOException {\n+        ByteArrayOutputStream byteOutput = new ByteArrayOutputStream();\n+        byte[] buffer = new byte[1024];\n+        while (true) {\n+            int r = inputStream.read(buffer);\n+            if (r == -1) {\n+                break;\n+            }\n+            byteOutput.write(buffer, 0, r);\n+        }\n+        return byteOutput.toByteArray();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzNTM1OQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 289}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQxNTg5OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTowMTo0NFrOHlQ8Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOTo0OTo1NVrOHncbAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzNjkxOA==", "bodyText": "Adding null check in case bytes could not be read considering my previous comment.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        byte[] bytes = readAllBytes(inputStream);\n          \n          \n            \n                                        try {\n          \n          \n            \n                                            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n          \n          \n            \n                                            X509Certificate certificate = (X509Certificate) cf.generateCertificate(\n          \n          \n            \n                                                new ByteArrayInputStream(bytes));\n          \n          \n            \n                                            engineSetCertificateEntry(alias, certificate);\n          \n          \n            \n                                            LOGGER.log(INFO, \"Side loaded certificate: {0} from: {1}\",\n          \n          \n            \n                                                new Object[] { alias, filename });\n          \n          \n            \n                                        } catch (CertificateException e) {\n          \n          \n            \n                                            LOGGER.log(WARNING, \"Unable to side-load certificate\", e);\n          \n          \n            \n                                        }\n          \n          \n            \n                                        byte[] bytes = readAllBytes(inputStream);\n          \n          \n            \n                                        if (bytes != null) {\n          \n          \n            \n                                            try {\n          \n          \n            \n                                                CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n          \n          \n            \n                                                X509Certificate certificate = (X509Certificate) cf.generateCertificate(\n          \n          \n            \n                                                    new ByteArrayInputStream(bytes));\n          \n          \n            \n                                                engineSetCertificateEntry(alias, certificate);\n          \n          \n            \n                                                LOGGER.log(INFO, \"Side loaded certificate: {0} from: {1}\",\n          \n          \n            \n                                                    new Object[]{alias, filename});\n          \n          \n            \n                                            } catch (CertificateException e) {\n          \n          \n            \n                                                LOGGER.log(WARNING, \"Unable to side-load certificate\", e);\n          \n          \n            \n                                            }\n          \n          \n            \n                                        } else {\n          \n          \n            \n                                            LOGGER.log(WARNING, \"Unable to side-load certificate\");\n          \n          \n            \n                                        }", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508836918", "createdAt": "2020-10-20T21:01:44Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.KeyStoreSpi;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableEntryException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The Azure KeyVault implementation of the KeyStoreSpi.\n+ */\n+public class KeyVaultKeyStore extends KeyStoreSpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyStore.class.getName());\n+\n+    /**\n+     * Stores the list of aliases.\n+     */\n+    private List<String> aliases;\n+\n+    /**\n+     * Stores the certificates by alias.\n+     */\n+    private final HashMap<String, Certificate> certificates = new HashMap<>();\n+\n+    /**\n+     * Stores the certificate keys by alias.\n+     */\n+    private final HashMap<String, Key> certificateKeys = new HashMap<>();\n+\n+    /**\n+     * Stores the creation date.\n+     */\n+    private final Date creationDate;\n+\n+    /**\n+     * Stores the key vault client.\n+     */\n+    private KeyVaultClient keyVault;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor uses System.getProperty for\n+     * <code>azure.keyvault.uri</code>, <code>azure.keyvault.tenantId</code>,\n+     * <code>azure.keyvault.clientId</code>,\n+     * <code>azure.keyvault.clientSecret</code> to initialize the keyvault\n+     * client.\n+     * </p>\n+     */\n+    public KeyVaultKeyStore() {\n+        creationDate = new Date();\n+        String keyVaultUri = System.getProperty(\"azure.keyvault.uri\");\n+        String tenantId = System.getProperty(\"azure.keyvault.tenantId\");\n+        String clientId = System.getProperty(\"azure.keyvault.clientId\");\n+        String clientSecret = System.getProperty(\"azure.keyvault.clientSecret\");\n+        keyVault = new KeyVaultClient(keyVaultUri, tenantId, clientId, clientSecret);\n+    }\n+\n+    @Override\n+    public Enumeration<String> engineAliases() {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return Collections.enumeration(aliases);\n+    }\n+\n+    @Override\n+    public boolean engineContainsAlias(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineDeleteEntry(String alias) {\n+    }\n+\n+    @Override\n+    public boolean engineEntryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass) {\n+        return super.engineEntryInstanceOf(alias, entryClass);\n+    }\n+\n+    @Override\n+    public Certificate engineGetCertificate(String alias) {\n+        Certificate certificate;\n+        if (certificates.containsKey(alias)) {\n+            certificate = certificates.get(alias);\n+        } else {\n+            certificate = keyVault.getCertificate(alias);\n+            if (certificate != null) {\n+                certificates.put(alias, certificate);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return certificate;\n+    }\n+\n+    @Override\n+    public String engineGetCertificateAlias(Certificate cert) {\n+        String alias = null;\n+        if (cert != null) {\n+            if (aliases == null) {\n+                aliases = keyVault.getAliases();\n+            }\n+            for (String candidateAlias : aliases) {\n+                Certificate certificate = engineGetCertificate(candidateAlias);\n+                if (certificate.equals(cert)) {\n+                    alias = candidateAlias;\n+                    break;\n+                }\n+            }\n+        }\n+        return alias;\n+    }\n+\n+    @Override\n+    public Certificate[] engineGetCertificateChain(String alias) {\n+        Certificate[] chain = null;\n+        Certificate certificate = engineGetCertificate(alias);\n+        if (certificate != null) {\n+            chain = new Certificate[1];\n+            chain[0] = certificate;\n+        }\n+        return chain;\n+    }\n+\n+    @Override\n+    public Date engineGetCreationDate(String alias) {\n+        return creationDate;\n+    }\n+\n+    @Override\n+    public KeyStore.Entry engineGetEntry(String alias, KeyStore.ProtectionParameter protParam) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException {\n+        return super.engineGetEntry(alias, protParam);\n+    }\n+\n+    @Override\n+    public Key engineGetKey(String alias, char[] password) {\n+        Key key;\n+        if (certificateKeys.containsKey(alias)) {\n+            key = certificateKeys.get(alias);\n+        } else {\n+            key = keyVault.getKey(alias, password);\n+            if (key != null) {\n+                certificateKeys.put(alias, key);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return key;\n+    }\n+\n+    @Override\n+    public boolean engineIsCertificateEntry(String alias) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return aliases.contains(alias);\n+    }\n+\n+    @Override\n+    public boolean engineIsKeyEntry(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineLoad(KeyStore.LoadStoreParameter param) {\n+        if (param instanceof KeyVaultLoadStoreParameter) {\n+            KeyVaultLoadStoreParameter parameter = (KeyVaultLoadStoreParameter) param;\n+            keyVault = new KeyVaultClient(\n+                parameter.getUri(),\n+                parameter.getTenantId(),\n+                parameter.getClientId(),\n+                parameter.getClientSecret());\n+        }\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineLoad(InputStream stream, char[] password) {\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineSetCertificateEntry(String alias, Certificate certificate) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        if (!aliases.contains(alias)) {\n+            aliases.add(alias);\n+            certificates.put(alias, certificate);\n+        }\n+    }\n+\n+    @Override\n+    public void engineSetEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam) throws KeyStoreException {\n+        super.engineSetEntry(alias, entry, protParam);\n+    }\n+\n+    @Override\n+    public void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) {\n+    }\n+\n+    @Override\n+    public void engineSetKeyEntry(String alias, byte[] key, Certificate[] chain) {\n+    }\n+\n+    @Override\n+    public int engineSize() {\n+        return aliases != null ? aliases.size() : 0;\n+    }\n+\n+    @Override\n+    public void engineStore(OutputStream stream, char[] password) {\n+    }\n+\n+    @Override\n+    public void engineStore(KeyStore.LoadStoreParameter param) {\n+    }\n+\n+    /**\n+     * Get the filenames.\n+     *\n+     * @param path the path.\n+     * @return the filenames.\n+     * @throws IOException when an I/O error occurs.\n+     */\n+    private String[] getFilenames(String path) throws IOException {\n+        List<String> filenames = new ArrayList<>();\n+        InputStream in = getClass().getResourceAsStream(path);\n+        if (in != null) {\n+            BufferedReader br = new BufferedReader(new InputStreamReader(in));\n+            String resource;\n+            while ((resource = br.readLine()) != null) {\n+                filenames.add(resource);\n+            }\n+        }\n+        return filenames.toArray(new String[0]);\n+    }\n+\n+    /**\n+     * Read all the bytes for a given input stream.\n+     *\n+     * @param inputStream the input stream.\n+     * @return the byte-array.\n+     * @throws IOException when an I/O error occurs.\n+     */\n+    private byte[] readAllBytes(InputStream inputStream) throws IOException {\n+        ByteArrayOutputStream byteOutput = new ByteArrayOutputStream();\n+        byte[] buffer = new byte[1024];\n+        while (true) {\n+            int r = inputStream.read(buffer);\n+            if (r == -1) {\n+                break;\n+            }\n+            byteOutput.write(buffer, 0, r);\n+        }\n+        return byteOutput.toByteArray();\n+    }\n+\n+    /**\n+     * Side-load certificate from classpath.\n+     */\n+    private void sideLoad() {\n+        try {\n+            String[] filenames = getFilenames(\"/keyvault\");\n+            if (filenames.length > 0) {\n+                for (String filename : filenames) {\n+                    try (InputStream inputStream = getClass().getResourceAsStream(\"/keyvault/\" + filename)) {\n+                        String alias = filename;\n+                        if (alias != null) {\n+                            if (alias.lastIndexOf('.') != -1) {\n+                                alias = alias.substring(0, alias.lastIndexOf('.'));\n+                            }\n+                            byte[] bytes = readAllBytes(inputStream);\n+                            try {\n+                                CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+                                X509Certificate certificate = (X509Certificate) cf.generateCertificate(\n+                                    new ByteArrayInputStream(bytes));\n+                                engineSetCertificateEntry(alias, certificate);\n+                                LOGGER.log(INFO, \"Side loaded certificate: {0} from: {1}\",\n+                                    new Object[] { alias, filename });\n+                            } catch (CertificateException e) {\n+                                LOGGER.log(WARNING, \"Unable to side-load certificate\", e);\n+                            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 316}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEyMjE3OQ==", "bodyText": "Not needed as it will either return a byte-array (potentially empty) or throw an IOException", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511122179", "createdAt": "2020-10-23T19:49:55Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.KeyStoreSpi;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableEntryException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The Azure KeyVault implementation of the KeyStoreSpi.\n+ */\n+public class KeyVaultKeyStore extends KeyStoreSpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyStore.class.getName());\n+\n+    /**\n+     * Stores the list of aliases.\n+     */\n+    private List<String> aliases;\n+\n+    /**\n+     * Stores the certificates by alias.\n+     */\n+    private final HashMap<String, Certificate> certificates = new HashMap<>();\n+\n+    /**\n+     * Stores the certificate keys by alias.\n+     */\n+    private final HashMap<String, Key> certificateKeys = new HashMap<>();\n+\n+    /**\n+     * Stores the creation date.\n+     */\n+    private final Date creationDate;\n+\n+    /**\n+     * Stores the key vault client.\n+     */\n+    private KeyVaultClient keyVault;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor uses System.getProperty for\n+     * <code>azure.keyvault.uri</code>, <code>azure.keyvault.tenantId</code>,\n+     * <code>azure.keyvault.clientId</code>,\n+     * <code>azure.keyvault.clientSecret</code> to initialize the keyvault\n+     * client.\n+     * </p>\n+     */\n+    public KeyVaultKeyStore() {\n+        creationDate = new Date();\n+        String keyVaultUri = System.getProperty(\"azure.keyvault.uri\");\n+        String tenantId = System.getProperty(\"azure.keyvault.tenantId\");\n+        String clientId = System.getProperty(\"azure.keyvault.clientId\");\n+        String clientSecret = System.getProperty(\"azure.keyvault.clientSecret\");\n+        keyVault = new KeyVaultClient(keyVaultUri, tenantId, clientId, clientSecret);\n+    }\n+\n+    @Override\n+    public Enumeration<String> engineAliases() {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return Collections.enumeration(aliases);\n+    }\n+\n+    @Override\n+    public boolean engineContainsAlias(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineDeleteEntry(String alias) {\n+    }\n+\n+    @Override\n+    public boolean engineEntryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass) {\n+        return super.engineEntryInstanceOf(alias, entryClass);\n+    }\n+\n+    @Override\n+    public Certificate engineGetCertificate(String alias) {\n+        Certificate certificate;\n+        if (certificates.containsKey(alias)) {\n+            certificate = certificates.get(alias);\n+        } else {\n+            certificate = keyVault.getCertificate(alias);\n+            if (certificate != null) {\n+                certificates.put(alias, certificate);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return certificate;\n+    }\n+\n+    @Override\n+    public String engineGetCertificateAlias(Certificate cert) {\n+        String alias = null;\n+        if (cert != null) {\n+            if (aliases == null) {\n+                aliases = keyVault.getAliases();\n+            }\n+            for (String candidateAlias : aliases) {\n+                Certificate certificate = engineGetCertificate(candidateAlias);\n+                if (certificate.equals(cert)) {\n+                    alias = candidateAlias;\n+                    break;\n+                }\n+            }\n+        }\n+        return alias;\n+    }\n+\n+    @Override\n+    public Certificate[] engineGetCertificateChain(String alias) {\n+        Certificate[] chain = null;\n+        Certificate certificate = engineGetCertificate(alias);\n+        if (certificate != null) {\n+            chain = new Certificate[1];\n+            chain[0] = certificate;\n+        }\n+        return chain;\n+    }\n+\n+    @Override\n+    public Date engineGetCreationDate(String alias) {\n+        return creationDate;\n+    }\n+\n+    @Override\n+    public KeyStore.Entry engineGetEntry(String alias, KeyStore.ProtectionParameter protParam) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException {\n+        return super.engineGetEntry(alias, protParam);\n+    }\n+\n+    @Override\n+    public Key engineGetKey(String alias, char[] password) {\n+        Key key;\n+        if (certificateKeys.containsKey(alias)) {\n+            key = certificateKeys.get(alias);\n+        } else {\n+            key = keyVault.getKey(alias, password);\n+            if (key != null) {\n+                certificateKeys.put(alias, key);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return key;\n+    }\n+\n+    @Override\n+    public boolean engineIsCertificateEntry(String alias) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return aliases.contains(alias);\n+    }\n+\n+    @Override\n+    public boolean engineIsKeyEntry(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineLoad(KeyStore.LoadStoreParameter param) {\n+        if (param instanceof KeyVaultLoadStoreParameter) {\n+            KeyVaultLoadStoreParameter parameter = (KeyVaultLoadStoreParameter) param;\n+            keyVault = new KeyVaultClient(\n+                parameter.getUri(),\n+                parameter.getTenantId(),\n+                parameter.getClientId(),\n+                parameter.getClientSecret());\n+        }\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineLoad(InputStream stream, char[] password) {\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineSetCertificateEntry(String alias, Certificate certificate) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        if (!aliases.contains(alias)) {\n+            aliases.add(alias);\n+            certificates.put(alias, certificate);\n+        }\n+    }\n+\n+    @Override\n+    public void engineSetEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam) throws KeyStoreException {\n+        super.engineSetEntry(alias, entry, protParam);\n+    }\n+\n+    @Override\n+    public void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) {\n+    }\n+\n+    @Override\n+    public void engineSetKeyEntry(String alias, byte[] key, Certificate[] chain) {\n+    }\n+\n+    @Override\n+    public int engineSize() {\n+        return aliases != null ? aliases.size() : 0;\n+    }\n+\n+    @Override\n+    public void engineStore(OutputStream stream, char[] password) {\n+    }\n+\n+    @Override\n+    public void engineStore(KeyStore.LoadStoreParameter param) {\n+    }\n+\n+    /**\n+     * Get the filenames.\n+     *\n+     * @param path the path.\n+     * @return the filenames.\n+     * @throws IOException when an I/O error occurs.\n+     */\n+    private String[] getFilenames(String path) throws IOException {\n+        List<String> filenames = new ArrayList<>();\n+        InputStream in = getClass().getResourceAsStream(path);\n+        if (in != null) {\n+            BufferedReader br = new BufferedReader(new InputStreamReader(in));\n+            String resource;\n+            while ((resource = br.readLine()) != null) {\n+                filenames.add(resource);\n+            }\n+        }\n+        return filenames.toArray(new String[0]);\n+    }\n+\n+    /**\n+     * Read all the bytes for a given input stream.\n+     *\n+     * @param inputStream the input stream.\n+     * @return the byte-array.\n+     * @throws IOException when an I/O error occurs.\n+     */\n+    private byte[] readAllBytes(InputStream inputStream) throws IOException {\n+        ByteArrayOutputStream byteOutput = new ByteArrayOutputStream();\n+        byte[] buffer = new byte[1024];\n+        while (true) {\n+            int r = inputStream.read(buffer);\n+            if (r == -1) {\n+                break;\n+            }\n+            byteOutput.write(buffer, 0, r);\n+        }\n+        return byteOutput.toByteArray();\n+    }\n+\n+    /**\n+     * Side-load certificate from classpath.\n+     */\n+    private void sideLoad() {\n+        try {\n+            String[] filenames = getFilenames(\"/keyvault\");\n+            if (filenames.length > 0) {\n+                for (String filename : filenames) {\n+                    try (InputStream inputStream = getClass().getResourceAsStream(\"/keyvault/\" + filename)) {\n+                        String alias = filename;\n+                        if (alias != null) {\n+                            if (alias.lastIndexOf('.') != -1) {\n+                                alias = alias.substring(0, alias.lastIndexOf('.'));\n+                            }\n+                            byte[] bytes = readAllBytes(inputStream);\n+                            try {\n+                                CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+                                X509Certificate certificate = (X509Certificate) cf.generateCertificate(\n+                                    new ByteArrayInputStream(bytes));\n+                                engineSetCertificateEntry(alias, certificate);\n+                                LOGGER.log(INFO, \"Side loaded certificate: {0} from: {1}\",\n+                                    new Object[] { alias, filename });\n+                            } catch (CertificateException e) {\n+                                LOGGER.log(WARNING, \"Unable to side-load certificate\", e);\n+                            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzNjkxOA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 316}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQyNTczOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultTrustManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTowNDo0N1rOHlRClg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDowOTowOVrOHndDGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzODU1MA==", "bodyText": "X509ExtendedTrustManager already implements X509TrustManager.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class KeyVaultTrustManager extends X509ExtendedTrustManager implements X509TrustManager {\n          \n          \n            \n            public class KeyVaultTrustManager extends X509ExtendedTrustManager {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508838550", "createdAt": "2020-10-20T21:04:47Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultTrustManager.java", "diffHunk": "@@ -0,0 +1,153 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+/**\n+ * The KeyVault variant of the X509TrustManager.\n+ */\n+public class KeyVaultTrustManager extends X509ExtendedTrustManager implements X509TrustManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzMjQ0Mg==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511132442", "createdAt": "2020-10-23T20:09:09Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultTrustManager.java", "diffHunk": "@@ -0,0 +1,153 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+/**\n+ * The KeyVault variant of the X509TrustManager.\n+ */\n+public class KeyVaultTrustManager extends X509ExtendedTrustManager implements X509TrustManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzODU1MA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQzMTUxOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultTrustManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTowNjoyN1rOHlRGFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTowNjoyN1rOHlRGFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzOTQ0NQ==", "bodyText": "Can we use a logger in instances like these like in the rest of the classes in this package?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508839445", "createdAt": "2020-10-20T21:06:27Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultTrustManager.java", "diffHunk": "@@ -0,0 +1,153 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+/**\n+ * The KeyVault variant of the X509TrustManager.\n+ */\n+public class KeyVaultTrustManager extends X509ExtendedTrustManager implements X509TrustManager {\n+\n+    /**\n+     * Stores the default trust manager.\n+     */\n+    private X509TrustManager defaultTrustManager;\n+\n+    /**\n+     * Stores the keystore.\n+     */\n+    private KeyStore keyStore;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyStore the keystore.\n+     */\n+    public KeyVaultTrustManager(KeyStore keyStore) {\n+        this.keyStore = keyStore;\n+        if (this.keyStore == null) {\n+            try {\n+                this.keyStore = KeyStore.getInstance(\"AzureKeyVault\");\n+                this.keyStore.load(null, null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException ex) {\n+                ex.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQ0MDM0OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultTrustManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTowODo0N1rOHlRLVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDoyNTo1MlrOHndd6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0MDc5MA==", "bodyText": "Would returning an empty array cause any bugs down the line?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508840790", "createdAt": "2020-10-20T21:08:47Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultTrustManager.java", "diffHunk": "@@ -0,0 +1,153 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+/**\n+ * The KeyVault variant of the X509TrustManager.\n+ */\n+public class KeyVaultTrustManager extends X509ExtendedTrustManager implements X509TrustManager {\n+\n+    /**\n+     * Stores the default trust manager.\n+     */\n+    private X509TrustManager defaultTrustManager;\n+\n+    /**\n+     * Stores the keystore.\n+     */\n+    private KeyStore keyStore;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyStore the keystore.\n+     */\n+    public KeyVaultTrustManager(KeyStore keyStore) {\n+        this.keyStore = keyStore;\n+        if (this.keyStore == null) {\n+            try {\n+                this.keyStore = KeyStore.getInstance(\"AzureKeyVault\");\n+                this.keyStore.load(null, null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException ex) {\n+                ex.printStackTrace();\n+            }\n+        }\n+        try {\n+            TrustManagerFactory factory = TrustManagerFactory.getInstance(\"PKIX\", \"SunJSSE\");\n+            factory.init(keyStore);\n+            defaultTrustManager = (X509TrustManager) factory.getTrustManagers()[0];\n+        } catch (NoSuchAlgorithmException | NoSuchProviderException | KeyStoreException ex) {\n+            ex.printStackTrace();\n+        }\n+        if (defaultTrustManager == null) {\n+            try {\n+                TrustManagerFactory factory = TrustManagerFactory.getInstance(\"PKIX\", \"IbmJSSE\");\n+                factory.init(keyStore);\n+                defaultTrustManager = (X509TrustManager) factory.getTrustManagers()[0];\n+            } catch (NoSuchAlgorithmException | NoSuchProviderException | KeyStoreException ex) {\n+                ex.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void checkClientTrusted(X509Certificate[] chain, String authType)\n+        throws CertificateException {\n+\n+        boolean pass = true;\n+\n+        /*\n+         * Step 1 - see if the default trust manager passes.\n+         */\n+        try {\n+            defaultTrustManager.checkClientTrusted(chain, authType);\n+        } catch (CertificateException ce) {\n+            pass = false;\n+        }\n+\n+        /*\n+         * Step 2 - see if the certificate exists in the keystore.\n+         */\n+        if (!pass) {\n+            String alias = null;\n+            try {\n+                alias = keyStore.getCertificateAlias(chain[0]);\n+            } catch (KeyStoreException kse) {\n+                kse.printStackTrace();\n+            }\n+            if (alias == null) {\n+                throw new CertificateException(\"Unable to verify in keystore\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void checkServerTrusted(X509Certificate[] chain, String authType)\n+        throws CertificateException {\n+\n+        boolean pass = true;\n+\n+        /*\n+         * Step 1 - see if the default trust manager passes.\n+         */\n+        try {\n+            defaultTrustManager.checkServerTrusted(chain, authType);\n+        } catch (CertificateException ce) {\n+            pass = false;\n+        }\n+\n+        /*\n+         * Step 2 - see if the certificate exists in the keystore.\n+         */\n+        if (!pass) {\n+            String alias = null;\n+            try {\n+                alias = keyStore.getCertificateAlias(chain[0]);\n+            } catch (KeyStoreException kse) {\n+                kse.printStackTrace();\n+            }\n+            if (alias == null) {\n+                throw new CertificateException(\"Unable to verify in keystore\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public X509Certificate[] getAcceptedIssuers() {\n+        return new X509Certificate[0];\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzOTMwNA==", "bodyText": "For the current use cases this is enough. This might change when we implement support for mTLS.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511139304", "createdAt": "2020-10-23T20:25:52Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultTrustManager.java", "diffHunk": "@@ -0,0 +1,153 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+/**\n+ * The KeyVault variant of the X509TrustManager.\n+ */\n+public class KeyVaultTrustManager extends X509ExtendedTrustManager implements X509TrustManager {\n+\n+    /**\n+     * Stores the default trust manager.\n+     */\n+    private X509TrustManager defaultTrustManager;\n+\n+    /**\n+     * Stores the keystore.\n+     */\n+    private KeyStore keyStore;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyStore the keystore.\n+     */\n+    public KeyVaultTrustManager(KeyStore keyStore) {\n+        this.keyStore = keyStore;\n+        if (this.keyStore == null) {\n+            try {\n+                this.keyStore = KeyStore.getInstance(\"AzureKeyVault\");\n+                this.keyStore.load(null, null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException ex) {\n+                ex.printStackTrace();\n+            }\n+        }\n+        try {\n+            TrustManagerFactory factory = TrustManagerFactory.getInstance(\"PKIX\", \"SunJSSE\");\n+            factory.init(keyStore);\n+            defaultTrustManager = (X509TrustManager) factory.getTrustManagers()[0];\n+        } catch (NoSuchAlgorithmException | NoSuchProviderException | KeyStoreException ex) {\n+            ex.printStackTrace();\n+        }\n+        if (defaultTrustManager == null) {\n+            try {\n+                TrustManagerFactory factory = TrustManagerFactory.getInstance(\"PKIX\", \"IbmJSSE\");\n+                factory.init(keyStore);\n+                defaultTrustManager = (X509TrustManager) factory.getTrustManagers()[0];\n+            } catch (NoSuchAlgorithmException | NoSuchProviderException | KeyStoreException ex) {\n+                ex.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void checkClientTrusted(X509Certificate[] chain, String authType)\n+        throws CertificateException {\n+\n+        boolean pass = true;\n+\n+        /*\n+         * Step 1 - see if the default trust manager passes.\n+         */\n+        try {\n+            defaultTrustManager.checkClientTrusted(chain, authType);\n+        } catch (CertificateException ce) {\n+            pass = false;\n+        }\n+\n+        /*\n+         * Step 2 - see if the certificate exists in the keystore.\n+         */\n+        if (!pass) {\n+            String alias = null;\n+            try {\n+                alias = keyStore.getCertificateAlias(chain[0]);\n+            } catch (KeyStoreException kse) {\n+                kse.printStackTrace();\n+            }\n+            if (alias == null) {\n+                throw new CertificateException(\"Unable to verify in keystore\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void checkServerTrusted(X509Certificate[] chain, String authType)\n+        throws CertificateException {\n+\n+        boolean pass = true;\n+\n+        /*\n+         * Step 1 - see if the default trust manager passes.\n+         */\n+        try {\n+            defaultTrustManager.checkServerTrusted(chain, authType);\n+        } catch (CertificateException ce) {\n+            pass = false;\n+        }\n+\n+        /*\n+         * Step 2 - see if the certificate exists in the keystore.\n+         */\n+        if (!pass) {\n+            String alias = null;\n+            try {\n+                alias = keyStore.getCertificateAlias(chain[0]);\n+            } catch (KeyStoreException kse) {\n+                kse.printStackTrace();\n+            }\n+            if (alias == null) {\n+                throw new CertificateException(\"Unable to verify in keystore\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public X509Certificate[] getAcceptedIssuers() {\n+        return new X509Certificate[0];\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0MDc5MA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQ0Nzc1OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/rest/CertificatePolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToxMDo1NVrOHlRPrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDozNzozOFrOHndweQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0MTkwMg==", "bodyText": "Can we name these getKeyProperties and setKeyProperties?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508841902", "createdAt": "2020-10-20T21:10:55Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/rest/CertificatePolicy.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca.rest;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * The CertificatePolicy REST model.\n+ */\n+public class CertificatePolicy implements Serializable {\n+\n+    /**\n+     * Stores the key properties.\n+     */\n+    private KeyProperties keyProperties;\n+\n+    /**\n+     * Get the key properties.\n+     *\n+     * @return the key properties.\n+     */\n+    public KeyProperties getKey_props() {\n+        return keyProperties;\n+    }\n+\n+    /**\n+     * Set the key properties.\n+     *\n+     * @param keyProperties the key properties.\n+     */\n+    public void setKey_props(KeyProperties keyProperties) {\n+        this.keyProperties = keyProperties;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0NDA1Nw==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511144057", "createdAt": "2020-10-23T20:37:38Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/rest/CertificatePolicy.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca.rest;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * The CertificatePolicy REST model.\n+ */\n+public class CertificatePolicy implements Serializable {\n+\n+    /**\n+     * Stores the key properties.\n+     */\n+    private KeyProperties keyProperties;\n+\n+    /**\n+     * Get the key properties.\n+     *\n+     * @return the key properties.\n+     */\n+    public KeyProperties getKey_props() {\n+        return keyProperties;\n+    }\n+\n+    /**\n+     * Set the key properties.\n+     *\n+     * @param keyProperties the key properties.\n+     */\n+    public void setKey_props(KeyProperties keyProperties) {\n+        this.keyProperties = keyProperties;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0MTkwMg=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQ0OTYzOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/rest/OAuthToken.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToxMTozMFrOHlRQ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTo1MjowMlrOHnfbFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0MjIwMA==", "bodyText": "Can we name these getAccessToken and setAccessToken?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public String getAccess_token() {\n          \n          \n            \n                    return access_token;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                /**\n          \n          \n            \n                 * Set the access token.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param accessToken the access token.\n          \n          \n            \n                 */\n          \n          \n            \n                public void setAccess_token(String accessToken) {\n          \n          \n            \n                    this.access_token = accessToken;\n          \n          \n            \n                }\n          \n          \n            \n                public String getAccessToken() {\n          \n          \n            \n                    return accessToken;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                /**\n          \n          \n            \n                 * Set the access token.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param accessToken the access token.\n          \n          \n            \n                 */\n          \n          \n            \n                public void setAccessToken(String accessToken) {\n          \n          \n            \n                    this.accessToken = accessToken;\n          \n          \n            \n                }", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508842200", "createdAt": "2020-10-20T21:11:30Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/rest/OAuthToken.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.security.keyvault.jca.rest;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * An OAuth2 token.\n+ */\n+public class OAuthToken implements Serializable {\n+\n+    /**\n+     * Stores the access token.\n+     */\n+    private String access_token;\n+\n+    /**\n+     * Get the access token.\n+     *\n+     * @return the access token.\n+     */\n+    public String getAccess_token() {\n+        return access_token;\n+    }\n+\n+    /**\n+     * Set the access token.\n+     *\n+     * @param accessToken the access token.\n+     */\n+    public void setAccess_token(String accessToken) {\n+        this.access_token = accessToken;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3MTM1MA==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511171350", "createdAt": "2020-10-23T21:52:02Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/rest/OAuthToken.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.security.keyvault.jca.rest;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * An OAuth2 token.\n+ */\n+public class OAuthToken implements Serializable {\n+\n+    /**\n+     * Stores the access token.\n+     */\n+    private String access_token;\n+\n+    /**\n+     * Get the access token.\n+     *\n+     * @return the access token.\n+     */\n+    public String getAccess_token() {\n+        return access_token;\n+    }\n+\n+    /**\n+     * Set the access token.\n+     *\n+     * @param accessToken the access token.\n+     */\n+    public void setAccess_token(String accessToken) {\n+        this.access_token = accessToken;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0MjIwMA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQ1MjI2OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/rest/OAuthToken.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToxMjoxOFrOHlRSag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTo1MjoyM1rOHnfbbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0MjYwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String access_token;\n          \n          \n            \n                private String accessToken;", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508842602", "createdAt": "2020-10-20T21:12:18Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/rest/OAuthToken.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.security.keyvault.jca.rest;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * An OAuth2 token.\n+ */\n+public class OAuthToken implements Serializable {\n+\n+    /**\n+     * Stores the access token.\n+     */\n+    private String access_token;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3MTQzOA==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511171438", "createdAt": "2020-10-23T21:52:23Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/rest/OAuthToken.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.security.keyvault.jca.rest;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * An OAuth2 token.\n+ */\n+public class OAuthToken implements Serializable {\n+\n+    /**\n+     * Stores the access token.\n+     */\n+    private String access_token;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0MjYwMg=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQ1NjgwOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/DelegateRestClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToxMzo0NlrOHlRVMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo1MToyNVrOHmoi-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0MzMxMg==", "bodyText": "Let's remove the author tag from our Javadoc :)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /**\n          \n          \n            \n             * The JUnit tests for the DelegateRestClient class.\n          \n          \n            \n             *\n          \n          \n            \n             * @author Manfred Riem (manfred.riem@microsoft.com)\n          \n          \n            \n             */\n          \n          \n            \n            /**\n          \n          \n            \n             * The JUnit tests for the DelegateRestClient class.\n          \n          \n            \n             */", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508843312", "createdAt": "2020-10-20T21:13:46Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/DelegateRestClientTest.java", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+/**\n+ * The JUnit tests for the DelegateRestClient class.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjI1MA==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510272250", "createdAt": "2020-10-22T15:51:25Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/DelegateRestClientTest.java", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+/**\n+ * The JUnit tests for the DelegateRestClient class.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0MzMxMg=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQ1ODQ4OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/JacksonJsonConverterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToxNDoxNFrOHlRWIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo1MToxMVrOHmoiTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0MzU1NA==", "bodyText": "Author tag.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /**\n          \n          \n            \n             * The JUnit tests for the JsonbJsonConverter class.\n          \n          \n            \n             *\n          \n          \n            \n             * @author Manfred Riem (manfred.riem@microsoft.com)\n          \n          \n            \n             */\n          \n          \n            \n            /**\n          \n          \n            \n             * The JUnit tests for the JsonbJsonConverter class.\n          \n          \n            \n             */", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508843554", "createdAt": "2020-10-20T21:14:14Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/JacksonJsonConverterTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.CertificateBundle;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * The JUnit tests for the JsonbJsonConverter class.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MjA3OQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510272079", "createdAt": "2020-10-22T15:51:11Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/JacksonJsonConverterTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.CertificateBundle;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * The JUnit tests for the JsonbJsonConverter class.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0MzU1NA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQ1OTkyOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/KeyVaultCertificateTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToxNDozNlrOHlRW6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo1MTowMlrOHmoh6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0Mzc1NA==", "bodyText": "Author tag.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /**\n          \n          \n            \n             * The JUnit tests for the KeyVaultCertificate class.\n          \n          \n            \n             *\n          \n          \n            \n             * @author Manfred Riem (manfred.riem@microsoft.com)\n          \n          \n            \n             */\n          \n          \n            \n            /**\n          \n          \n            \n             * The JUnit tests for the KeyVaultCertificate class.\n          \n          \n            \n             */", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508843754", "createdAt": "2020-10-20T21:14:36Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/KeyVaultCertificateTest.java", "diffHunk": "@@ -0,0 +1,369 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.ProviderException;\n+import java.security.PublicKey;\n+import java.security.SignatureException;\n+import java.security.cert.CertificateEncodingException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateExpiredException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.CertificateNotYetValidException;\n+import java.security.cert.X509Certificate;\n+import java.util.Base64;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * The JUnit tests for the KeyVaultCertificate class.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTk3OA==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510271978", "createdAt": "2020-10-22T15:51:02Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/KeyVaultCertificateTest.java", "diffHunk": "@@ -0,0 +1,369 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.ProviderException;\n+import java.security.PublicKey;\n+import java.security.SignatureException;\n+import java.security.cert.CertificateEncodingException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateExpiredException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.CertificateNotYetValidException;\n+import java.security.cert.X509Certificate;\n+import java.util.Base64;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * The JUnit tests for the KeyVaultCertificate class.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0Mzc1NA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQ3MjA1OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/KeyVaultCertificateTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToxODowN1rOHlRePw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToxODowN1rOHlRePw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0NTYzMQ==", "bodyText": "JUnit 5 allows to expect exceptions to be thrown via the following. Let's keep this in mind for future iterations.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try {\n          \n          \n            \n                        KeyVaultCertificate certificate = new KeyVaultCertificate(x509Certificate);\n          \n          \n            \n                        certificate.checkValidity(new Date(100, Calendar.FEBRUARY, 1));\n          \n          \n            \n                        fail();\n          \n          \n            \n                    } catch (CertificateExpiredException ex) {\n          \n          \n            \n                        fail();\n          \n          \n            \n                    } catch (CertificateNotYetValidException exception) {\n          \n          \n            \n                        // expecting this as the TEST_CERTIFICATE is not valid against given date.\n          \n          \n            \n                    }\n          \n          \n            \n                    Assertions.assertThrows(CertificateNotYetValidException.class, () -> {\n          \n          \n            \n                        KeyVaultCertificate certificate = new KeyVaultCertificate(x509Certificate);\n          \n          \n            \n                        certificate.checkValidity(new Date(100, Calendar.FEBRUARY, 1));\n          \n          \n            \n                    });", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508845631", "createdAt": "2020-10-20T21:18:07Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/KeyVaultCertificateTest.java", "diffHunk": "@@ -0,0 +1,369 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.ProviderException;\n+import java.security.PublicKey;\n+import java.security.SignatureException;\n+import java.security.cert.CertificateEncodingException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateExpiredException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.CertificateNotYetValidException;\n+import java.security.cert.X509Certificate;\n+import java.util.Base64;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * The JUnit tests for the KeyVaultCertificate class.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */\n+public class KeyVaultCertificateTest {\n+\n+    /**\n+     * Stores the CER test certificate (which is valid til 2120).\n+     */\n+    private static final String TEST_CERTIFICATE\n+        = \"MIIDeDCCAmCgAwIBAgIQGghBu97rQJKNnUHPWU7xjDANBgkqhkiG9w0BAQsFADAk\"\n+        + \"MSIwIAYDVQQDExlodW5kcmVkLXllYXJzLmV4YW1wbGUuY29tMCAXDTIwMDkwMjE3\"\n+        + \"NDUyNFoYDzIxMjAwOTAyMTc1NTI0WjAkMSIwIAYDVQQDExlodW5kcmVkLXllYXJz\"\n+        + \"LmV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuU14\"\n+        + \"btkN5wmcO2WKXqm1NUKXzi79EtqiFFkrLgPAwj5NNwMw2Akm3GpdEpwkJ8/q3l7d\"\n+        + \"frDEVOO9gwZbz7xppyqutjxjllw8CCgjFdfK02btz56CGgh3X25ZZtzPbuMZJM0j\"\n+        + \"o4mVEdaFNJ0eUeMppS0DcbbuTWCF7Jf1gvr8GVqx+E0IJUFkE+D4kdTbnJSaeK0A\"\n+        + \"KEt94z88MPX18h8ud14uRVmUCYVZrZeswdE2tO1BpazrXELHuXCtrjGxsDDjDzeP\"\n+        + \"98aFI9kblkqoJS4TsmloLEjwZLm80cyJDEmpXXMtR7C0FFXFI1BAtIa4mxSgBLsT\"\n+        + \"L4GVPEGNANR8COYkHQIDAQABo4GjMIGgMA4GA1UdDwEB/wQEAwIFoDAJBgNVHRME\"\n+        + \"AjAAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAkBgNVHREEHTAbghlo\"\n+        + \"dW5kcmVkLXllYXJzLmV4YW1wbGUuY29tMB8GA1UdIwQYMBaAFOGTt4H3ho30O4e+\"\n+        + \"hebwJjm2VMvIMB0GA1UdDgQWBBThk7eB94aN9DuHvoXm8CY5tlTLyDANBgkqhkiG\"\n+        + \"9w0BAQsFAAOCAQEAGp8mCioVCmM+kZv6r+K2j2uog1k4HBwN1NfRoSsibDB8+QXF\"\n+        + \"bmNf3M0imiuR/KJgODyuROwaa/AalxNFMOP8XTL2YmP7XsddBs9ONHHQXKjY/Ojl\"\n+        + \"PsIPR7vZjwYPfEB+XEKl2fOIxDQQ921POBV7M6DdTC49T5X+FsLR1AIIfinVetT9\"\n+        + \"QmNuvzulBX0T0rea/qpcPK4HTj7ToyImOaf8sXRv2s2ODLUrKWu5hhTNH2l6RIkQ\"\n+        + \"U/aIAdQRfDaSE9jhtcVu5d5kCgBs7nz5AzeCisDPo5zIt4Mxej3iVaAJ79oEbHOE\"\n+        + \"p192KLXLV/pscA4Wgb+PJ8AAEa5B6xq8p9JO+Q==\";\n+\n+    /**\n+     * Stores the X.509 certificate.\n+     */\n+    private X509Certificate x509Certificate;\n+\n+    /**\n+     * Setup before each test.\n+     *\n+     */\n+    @BeforeEach\n+    public void setUp() {\n+        try {\n+            byte[] certificateBytes = Base64.getDecoder().decode(TEST_CERTIFICATE);\n+            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+            x509Certificate = (X509Certificate) cf.generateCertificate(new ByteArrayInputStream(certificateBytes));\n+        } catch (CertificateException e) {\n+            throw new ProviderException(e);\n+        }\n+    }\n+\n+    /**\n+     * Test checkValidity method.\n+     */\n+    @Test\n+    public void testCheckValidity() {\n+        try {\n+            KeyVaultCertificate certificate = new KeyVaultCertificate(x509Certificate);\n+            certificate.checkValidity();\n+        } catch (CertificateExpiredException | CertificateNotYetValidException cnyve) {\n+            fail();\n+        }\n+    }\n+\n+    /**\n+     * Test checkValidity method.\n+     */\n+    @Test\n+    public void testCheckValidity2() {\n+        try {\n+            KeyVaultCertificate certificate = new KeyVaultCertificate(x509Certificate);\n+            certificate.checkValidity(new Date(100, Calendar.FEBRUARY, 1));\n+            fail();\n+        } catch (CertificateExpiredException ex) {\n+            fail();\n+        } catch (CertificateNotYetValidException exception) {\n+            // expecting this as the TEST_CERTIFICATE is not valid against given date.\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQ3Njg2OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/KeyVaultJcaProviderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToxOToyN1rOHlRhGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo1MDo0MlrOHmog-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0NjM2Mg==", "bodyText": "Author tag.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /**\n          \n          \n            \n             * The JUnit tests for the KeyVaultProvider class.\n          \n          \n            \n             *\n          \n          \n            \n             * @author Manfred Riem (manfred.riem@microsoft.com)\n          \n          \n            \n             */\n          \n          \n            \n            /**\n          \n          \n            \n             * The JUnit tests for the KeyVaultProvider class.\n          \n          \n            \n             */", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508846362", "createdAt": "2020-10-20T21:19:27Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/KeyVaultJcaProviderTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.security.KeyStore;\n+import java.security.Security;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+/**\n+ * The JUnit tests for the KeyVaultProvider class.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTczNg==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510271736", "createdAt": "2020-10-22T15:50:42Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/KeyVaultJcaProviderTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.security.KeyStore;\n+import java.security.Security;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+/**\n+ * The JUnit tests for the KeyVaultProvider class.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0NjM2Mg=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQ3ODAzOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/KeyVaultKeyStoreTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToxOTo1MVrOHlRh1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo1MDozMlrOHmogdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0NjU1MQ==", "bodyText": "Author tag.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /**\n          \n          \n            \n             * The JUnit tests for the KeyVaultKeyStore class.\n          \n          \n            \n             *\n          \n          \n            \n             * @author Manfred Riem (manfred.riem@microsoft.com)\n          \n          \n            \n             */\n          \n          \n            \n            /**\n          \n          \n            \n             * The JUnit tests for the KeyVaultKeyStore class.\n          \n          \n            \n             */", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508846551", "createdAt": "2020-10-20T21:19:51Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/KeyVaultKeyStoreTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.security.ProviderException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.Base64;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * The JUnit tests for the KeyVaultKeyStore class.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MTYwNg==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510271606", "createdAt": "2020-10-22T15:50:32Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/KeyVaultKeyStoreTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.security.ProviderException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.Base64;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * The JUnit tests for the KeyVaultKeyStore class.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0NjU1MQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQ4MDk5OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/KeyVaultKeyStoreTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToyMDozOVrOHlRjhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToyMDozOVrOHlRjhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0Njk4Mg==", "bodyText": "Why do we catch exceptions and use fail() in most places and we throw an exception here? I don't think it's a bad idea to just let things throw if they don't follow the happy path. Is there a specific reason you decided to use fail() in some catch blocks?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508846982", "createdAt": "2020-10-20T21:20:39Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/KeyVaultKeyStoreTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.security.ProviderException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.Base64;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * The JUnit tests for the KeyVaultKeyStore class.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */\n+public class KeyVaultKeyStoreTest {\n+\n+    /**\n+     * Stores the CER test certificate (which is valid til 2120).\n+     */\n+    private static final String TEST_CERTIFICATE\n+        = \"MIIDeDCCAmCgAwIBAgIQGghBu97rQJKNnUHPWU7xjDANBgkqhkiG9w0BAQsFADAk\"\n+        + \"MSIwIAYDVQQDExlodW5kcmVkLXllYXJzLmV4YW1wbGUuY29tMCAXDTIwMDkwMjE3\"\n+        + \"NDUyNFoYDzIxMjAwOTAyMTc1NTI0WjAkMSIwIAYDVQQDExlodW5kcmVkLXllYXJz\"\n+        + \"LmV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuU14\"\n+        + \"btkN5wmcO2WKXqm1NUKXzi79EtqiFFkrLgPAwj5NNwMw2Akm3GpdEpwkJ8/q3l7d\"\n+        + \"frDEVOO9gwZbz7xppyqutjxjllw8CCgjFdfK02btz56CGgh3X25ZZtzPbuMZJM0j\"\n+        + \"o4mVEdaFNJ0eUeMppS0DcbbuTWCF7Jf1gvr8GVqx+E0IJUFkE+D4kdTbnJSaeK0A\"\n+        + \"KEt94z88MPX18h8ud14uRVmUCYVZrZeswdE2tO1BpazrXELHuXCtrjGxsDDjDzeP\"\n+        + \"98aFI9kblkqoJS4TsmloLEjwZLm80cyJDEmpXXMtR7C0FFXFI1BAtIa4mxSgBLsT\"\n+        + \"L4GVPEGNANR8COYkHQIDAQABo4GjMIGgMA4GA1UdDwEB/wQEAwIFoDAJBgNVHRME\"\n+        + \"AjAAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAkBgNVHREEHTAbghlo\"\n+        + \"dW5kcmVkLXllYXJzLmV4YW1wbGUuY29tMB8GA1UdIwQYMBaAFOGTt4H3ho30O4e+\"\n+        + \"hebwJjm2VMvIMB0GA1UdDgQWBBThk7eB94aN9DuHvoXm8CY5tlTLyDANBgkqhkiG\"\n+        + \"9w0BAQsFAAOCAQEAGp8mCioVCmM+kZv6r+K2j2uog1k4HBwN1NfRoSsibDB8+QXF\"\n+        + \"bmNf3M0imiuR/KJgODyuROwaa/AalxNFMOP8XTL2YmP7XsddBs9ONHHQXKjY/Ojl\"\n+        + \"PsIPR7vZjwYPfEB+XEKl2fOIxDQQ921POBV7M6DdTC49T5X+FsLR1AIIfinVetT9\"\n+        + \"QmNuvzulBX0T0rea/qpcPK4HTj7ToyImOaf8sXRv2s2ODLUrKWu5hhTNH2l6RIkQ\"\n+        + \"U/aIAdQRfDaSE9jhtcVu5d5kCgBs7nz5AzeCisDPo5zIt4Mxej3iVaAJ79oEbHOE\"\n+        + \"p192KLXLV/pscA4Wgb+PJ8AAEa5B6xq8p9JO+Q==\";\n+\n+    @Test\n+    public void testEngineGetCertificate() {\n+        KeyVaultKeyStore keystore = new KeyVaultKeyStore();\n+        KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+            System.getProperty(\"azure.keyvault.uri\"),\n+            System.getProperty(\"azure.tenant.id\"),\n+            System.getProperty(\"azure.client.id\"),\n+            System.getProperty(\"azure.client.secret\"));\n+        keystore.engineLoad(parameter);\n+        assertNull(keystore.engineGetCertificate(\"myalias\"));\n+    }\n+\n+    @Test\n+    public void testEngineGetCertificateAlias() {\n+        KeyVaultKeyStore keystore = new KeyVaultKeyStore();\n+        KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+            System.getProperty(\"azure.keyvault.uri\"),\n+            System.getProperty(\"azure.tenant.id\"),\n+            System.getProperty(\"azure.client.id\"),\n+            System.getProperty(\"azure.client.secret\"));\n+        keystore.engineLoad(parameter);\n+        assertNull(keystore.engineGetCertificateAlias(null));\n+    }\n+\n+    @Test\n+    public void testEngineGetCertificateChain() {\n+        KeyVaultKeyStore keystore = new KeyVaultKeyStore();\n+        KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+            System.getProperty(\"azure.keyvault.uri\"),\n+            System.getProperty(\"azure.tenant.id\"),\n+            System.getProperty(\"azure.client.id\"),\n+            System.getProperty(\"azure.client.secret\"));\n+        keystore.engineLoad(parameter);\n+        assertNull(keystore.engineGetCertificateChain(\"myalias\"));\n+    }\n+\n+    @Test\n+    public void testEngineIsCertificateEntry() {\n+        KeyVaultKeyStore keystore = new KeyVaultKeyStore();\n+        KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+            System.getProperty(\"azure.keyvault.uri\"),\n+            System.getProperty(\"azure.tenant.id\"),\n+            System.getProperty(\"azure.client.id\"),\n+            System.getProperty(\"azure.client.secret\"));\n+        keystore.engineLoad(parameter);\n+        assertFalse(keystore.engineIsCertificateEntry(\"myalias\"));\n+    }\n+\n+    @Test\n+    public void testEngineSetCertificateEntry() {\n+        KeyVaultKeyStore keystore = new KeyVaultKeyStore();\n+        KeyVaultLoadStoreParameter parameter = new KeyVaultLoadStoreParameter(\n+            System.getProperty(\"azure.keyvault.uri\"),\n+            System.getProperty(\"azure.tenant.id\"),\n+            System.getProperty(\"azure.client.id\"),\n+            System.getProperty(\"azure.client.secret\"));\n+        keystore.engineLoad(parameter);\n+\n+        X509Certificate certificate;\n+\n+        try {\n+            byte[] certificateBytes = Base64.getDecoder().decode(TEST_CERTIFICATE);\n+            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+            certificate = (X509Certificate) cf.generateCertificate(new ByteArrayInputStream(certificateBytes));\n+        } catch (CertificateException e) {\n+            throw new ProviderException(e);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQ4MjI1OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/KeyVaultLoadStoreParameterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToyMTowM1rOHlRkRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0OToxM1rOHmocbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0NzE3Mg==", "bodyText": "Author tag.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /**\n          \n          \n            \n             * The JUnit tests for the KeyVaultLoadStoreParameter class.\n          \n          \n            \n             *\n          \n          \n            \n             * @author Manfred Riem (manfred.riem@microsoft.com)\n          \n          \n            \n             */\n          \n          \n            \n            /**\n          \n          \n            \n             * The JUnit tests for the KeyVaultLoadStoreParameter class.\n          \n          \n            \n             */", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508847172", "createdAt": "2020-10-20T21:21:03Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/KeyVaultLoadStoreParameterTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+/**\n+ * The JUnit tests for the KeyVaultLoadStoreParameter class.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MDU3NQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510270575", "createdAt": "2020-10-22T15:49:13Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/KeyVaultLoadStoreParameterTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+/**\n+ * The JUnit tests for the KeyVaultLoadStoreParameter class.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0NzE3Mg=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQ4MzE4OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/LegacyRestClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToyMToyMFrOHlRk0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0OTowMVrOHmob1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0NzMxMw==", "bodyText": "Author tag.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /**\n          \n          \n            \n             * The JUnit tests for the LegacyRestClient class.\n          \n          \n            \n             *\n          \n          \n            \n             * @author Manfred Riem (manfred.riem@microsoft.com)\n          \n          \n            \n             */\n          \n          \n            \n            /**\n          \n          \n            \n             * The JUnit tests for the LegacyRestClient class.\n          \n          \n            \n             */", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508847313", "createdAt": "2020-10-20T21:21:20Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/LegacyRestClientTest.java", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+/**\n+ * The JUnit tests for the LegacyRestClient class.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MDQyMA==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510270420", "createdAt": "2020-10-22T15:49:01Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/LegacyRestClientTest.java", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+/**\n+ * The JUnit tests for the LegacyRestClient class.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0NzMxMw=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQ4MzkwOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/RestClientFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToyMTozNVrOHlRlRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0ODo1MVrOHmobVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0NzQyOQ==", "bodyText": "Author tag.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /**\n          \n          \n            \n             * The JUnit tests for the RestClientFactory class.\n          \n          \n            \n             *\n          \n          \n            \n             * @author Manfred Riem (manfred.riem@microsoft.com)\n          \n          \n            \n             */\n          \n          \n            \n            /**\n          \n          \n            \n             * The JUnit tests for the RestClientFactory class.\n          \n          \n            \n             */", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508847429", "createdAt": "2020-10-20T21:21:35Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/RestClientFactoryTest.java", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+/**\n+ * The JUnit tests for the RestClientFactory class.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MDI5Mg==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510270292", "createdAt": "2020-10-22T15:48:51Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/RestClientFactoryTest.java", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+/**\n+ * The JUnit tests for the RestClientFactory class.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0NzQyOQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzQ4NDg4OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/ServerSocketTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToyMTo1M1rOHlRl5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzoxOToyOVrOHmhXOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0NzU4OA==", "bodyText": "Author tag.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /**\n          \n          \n            \n             * The unit test validating the ServerSocket is created using a certificate from Azure KeyVault.\n          \n          \n            \n             *\n          \n          \n            \n             * @author Manfred Riem (manfred.riem@microsoft.com)\n          \n          \n            \n             */\n          \n          \n            \n            /**\n          \n          \n            \n             * The unit test validating the ServerSocket is created using a certificate from Azure KeyVault.\n          \n          \n            \n             */", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508847588", "createdAt": "2020-10-20T21:21:53Z", "author": {"login": "vcolin7"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/ServerSocketTest.java", "diffHunk": "@@ -0,0 +1,248 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.HttpClients;\n+import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager;\n+import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManagerBuilder;\n+import org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory;\n+import org.apache.hc.client5.http.ssl.SSLConnectionSocketFactoryBuilder;\n+import org.apache.hc.client5.http.ssl.TrustSelfSignedStrategy;\n+import org.apache.hc.core5.http.ClassicHttpResponse;\n+import org.apache.hc.core5.http.io.HttpClientResponseHandler;\n+import org.apache.hc.core5.ssl.SSLContexts;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLServerSocket;\n+import javax.net.ssl.SSLServerSocketFactory;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Socket;\n+import java.security.KeyStore;\n+import java.security.Security;\n+import java.security.cert.X509Certificate;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * The unit test validating the ServerSocket is created using a certificate from Azure KeyVault.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1NDU1Mg==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510154552", "createdAt": "2020-10-22T13:19:29Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/test/java/com/azure/security/keyvault/jca/ServerSocketTest.java", "diffHunk": "@@ -0,0 +1,248 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.HttpClients;\n+import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager;\n+import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManagerBuilder;\n+import org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory;\n+import org.apache.hc.client5.http.ssl.SSLConnectionSocketFactoryBuilder;\n+import org.apache.hc.client5.http.ssl.TrustSelfSignedStrategy;\n+import org.apache.hc.core5.http.ClassicHttpResponse;\n+import org.apache.hc.core5.http.io.HttpClientResponseHandler;\n+import org.apache.hc.core5.ssl.SSLContexts;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLServerSocket;\n+import javax.net.ssl.SSLServerSocketFactory;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Socket;\n+import java.security.KeyStore;\n+import java.security.Security;\n+import java.security.cert.X509Certificate;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * The unit test validating the ServerSocket is created using a certificate from Azure KeyVault.\n+ *\n+ * @author Manfred Riem (manfred.riem@microsoft.com)\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0NzU4OA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUwNzE1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMToyODozN1rOHlRzcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTozNzoyOVrOHmw7cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MTA1Ng==", "bodyText": "Just remember to add the changelog notes here before releasing :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508851056", "createdAt": "2020-10-20T21:28:37Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/CHANGELOG.md", "diffHunk": "@@ -0,0 +1,3 @@\n+# Release History\n+\n+## 3.0.0-beta.1 (Unreleased)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwOTU4NQ==", "bodyText": "That was taken care of", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510409585", "createdAt": "2020-10-22T19:37:29Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/CHANGELOG.md", "diffHunk": "@@ -0,0 +1,3 @@\n+# Release History\n+\n+## 3.0.0-beta.1 (Unreleased)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MTA1Ng=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUxMjc4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozMDoxNVrOHlR2wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzoxOTo0NFrOHmhX-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MTkwNA==", "bodyText": "We use Key Vault all accross our documentation.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n          \n          \n            \n            server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n          \n          \n            \n            server.ssl.key-store-type=AzureKeyVault\n          \n          \n            \n            ```\n          \n          \n            \n            azure.keyvault.uri=<the URI of the Azure Key Vault to use>\n          \n          \n            \n            server.ssl.key-alias=<the name of the certificate in Azure Key Vault to use>\n          \n          \n            \n            server.ssl.key-store-type=AzureKeyVault", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508851904", "createdAt": "2020-10-20T21:30:15Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1NDc0NA==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510154744", "createdAt": "2020-10-22T13:19:44Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MTkwNA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUxNTQwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozMTowMlrOHlR4Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0ODozN1rOHmoaoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MjI4Ng==", "bodyText": "nit; Adding some visual help for readers.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To use the starter for server side SSL, you will need to add the following to\n          \n          \n            \n            your application.properties (if the application is using Spring Cloud Config \n          \n          \n            \n            Server for its configuration add it to the bootstrap.yml of the application)\n          \n          \n            \n            To use the starter for server side SSL, you will need to add the following to\n          \n          \n            \n            your `application.properties` (if the application is using Spring Cloud Config \n          \n          \n            \n            Server for its configuration add it to the `bootstrap.yml` of the application)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508852286", "createdAt": "2020-10-20T21:31:02Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MDExMg==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510270112", "createdAt": "2020-10-22T15:48:37Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MjI4Ng=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUxNjI4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozMToxNlrOHlR4vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzoxOTo1NFrOHmhYkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MjQxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Note: make sure the managed identity has access to the Azure KeyVault to access\n          \n          \n            \n            Note: make sure the managed identity has access to the Azure Key Vault to access", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508852412", "createdAt": "2020-10-20T21:31:16Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1NDg5OA==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510154898", "createdAt": "2020-10-22T13:19:54Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MjQxMg=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUxNzAxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozMTozM1rOHlR5PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0Nzo1NVrOHmoYsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MjU0MA==", "bodyText": "nit; Adding some visual help for readers.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To use the starter for server side SSL, you will need to add the following to\n          \n          \n            \n            your application.properties (if the application is using Spring Cloud Config \n          \n          \n            \n            Server for its configuration add it to the bootstrap.yml of the application)\n          \n          \n            \n            To use the starter for server side SSL, you will need to add the following to\n          \n          \n            \n            your `application.properties` (if the application is using Spring Cloud Config \n          \n          \n            \n            Server for its configuration add it to the `bootstrap.yml` of the application)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508852540", "createdAt": "2020-10-20T21:31:33Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2OTYxNg==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510269616", "createdAt": "2020-10-22T15:47:55Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MjU0MA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUxODAxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozMTo1MVrOHlR5zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzoyMDoxM1rOHmhZgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MjY4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n          \n          \n            \n            azure.keyvault.tenantId=<the ID of your Azure tenant>\n          \n          \n            \n            azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n          \n          \n            \n            azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n          \n          \n            \n            server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n          \n          \n            \n            server.ssl.key-store-type=AzureKeyVault\n          \n          \n            \n            azure.keyvault.uri=<the URI of the Azure Key Vault to use>\n          \n          \n            \n            azure.keyvault.tenantId=<the ID of your Azure tenant>\n          \n          \n            \n            azure.keyvault.clientId=<the client ID with access to Azure Key Vault>\n          \n          \n            \n            azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n          \n          \n            \n            server.ssl.key-alias=<the name of the certificate in Azure Key Vault to use>\n          \n          \n            \n            server.ssl.key-store-type=AzureKeyVault", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508852687", "createdAt": "2020-10-20T21:31:51Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1NTEzNw==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510155137", "createdAt": "2020-10-22T13:20:13Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MjY4Nw=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUxODYxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozMjowMVrOHlR6Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzoyMjoxOVrOHmhfwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1Mjc3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Note: make sure the client ID has access to the Azure KeyVault to access\n          \n          \n            \n            Note: make sure the client ID has access to the Azure Key Vault to access", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508852775", "createdAt": "2020-10-20T21:32:01Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1NjczOA==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510156738", "createdAt": "2020-10-22T13:22:19Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1Mjc3NQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUxOTU3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozMjoyMVrOHlR6zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0Nzo0M1rOHmoYBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1Mjk0MQ==", "bodyText": "nit; Adding some visual help for readers.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To use the starter for client side SSL, you will need to add the following to\n          \n          \n            \n            your application.properties (if the application is using Spring Cloud Config \n          \n          \n            \n            Server for its configuration add it to the bootstrap.yml of the application)\n          \n          \n            \n            To use the starter for client side SSL, you will need to add the following to\n          \n          \n            \n            your `application.properties` (if the application is using Spring Cloud Config \n          \n          \n            \n            Server for its configuration add it to the `bootstrap.yml` of the application)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508852941", "createdAt": "2020-10-20T21:32:21Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2OTQ0NQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510269445", "createdAt": "2020-10-22T15:47:43Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1Mjk0MQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUxOTkyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozMjoyOVrOHlR7BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzoyMDoyM1rOHmhaGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1Mjk5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n          \n          \n            \n            azure.keyvault.uri=<the URI of the Azure Key Vault to use>", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508852996", "createdAt": "2020-10-20T21:32:29Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1NTI4OA==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510155288", "createdAt": "2020-10-22T13:20:23Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1Mjk5Ng=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUyMDUwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozMjozOFrOHlR7XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzoyMDozNVrOHmharQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MzA4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Note: make sure the managed identity has access to the Azure KeyVault to access\n          \n          \n            \n            Note: make sure the managed identity has access to the Azure Key Vault to access", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508853084", "createdAt": "2020-10-20T21:32:38Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1NTQzNw==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510155437", "createdAt": "2020-10-22T13:20:35Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MzA4NA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUyMTM3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozMjo1M1rOHlR74A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTozODo0NFrOHmn97g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MzIxNg==", "bodyText": "nit; Adding some visual help for readers.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you are using RestTemplate use code similar to the example below.\n          \n          \n            \n            If you are using `RestTemplate` use code similar to the example below.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508853216", "createdAt": "2020-10-20T21:32:53Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2Mjc2Ng==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510262766", "createdAt": "2020-10-22T15:38:44Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MzIxNg=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUyNDA1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozMzo0MFrOHlR9aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozMzo0MFrOHlR9aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MzYwOQ==", "bodyText": "nit; Indentation.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    HttpComponentsClientHttpRequestFactory requestFactory =\n          \n          \n            \n                                    new HttpComponentsClientHttpRequestFactory();\n          \n          \n            \n                    HttpComponentsClientHttpRequestFactory requestFactory =\n          \n          \n            \n                        new HttpComponentsClientHttpRequestFactory();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508853609", "createdAt": "2020-10-20T21:33:40Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUyNTU2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozNDowOVrOHlR-bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDowMzo1NVrOHmxz3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1Mzg2OA==", "bodyText": "nit; Adding some visual help for readers.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To use the starter for client side SSL, you will need to add the following to\n          \n          \n            \n            your application.properties (if the application is using Spring Cloud Config \n          \n          \n            \n            Server for its configuration add it to the bootstrap.yml of the application)\n          \n          \n            \n            To use the starter for client side SSL, you will need to add the following to\n          \n          \n            \n            your `application.properties` (if the application is using Spring Cloud Config \n          \n          \n            \n            Server for its configuration add it to the `bootstrap.yml` of the application)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508853868", "createdAt": "2020-10-20T21:34:09Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyNDAzMQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510424031", "createdAt": "2020-10-22T20:03:55Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1Mzg2OA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUyNzA1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozNDo0NVrOHlR_bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzoyMDo1M1rOHmhbfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NDEyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n          \n          \n            \n            azure.keyvault.tenantId=<the ID of your Azure tenant>\n          \n          \n            \n            azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n          \n          \n            \n            azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n          \n          \n            \n            ```\n          \n          \n            \n            \n          \n          \n            \n            Note: make sure the client ID has access to the Azure KeyVault to access\n          \n          \n            \n            keys, secrets and certificates.\n          \n          \n            \n            azure.keyvault.uri=<the URI of the Azure Key Vault to use>\n          \n          \n            \n            azure.keyvault.tenantId=<the ID of your Azure tenant>\n          \n          \n            \n            azure.keyvault.clientId=<the client ID with access to Azure Key Vault>\n          \n          \n            \n            azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n          \n      \n    \n    \n  \n\nNote: make sure the client ID has access to the Azure Key Vault to access\nkeys, secrets and certificates.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508854125", "createdAt": "2020-10-20T21:34:45Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1NTY0NQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510155645", "createdAt": "2020-10-22T13:20:53Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NDEyNQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUyNzU0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozNDo1NlrOHlR_xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTozODoyOVrOHmn9NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NDIxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Then if you are using RestTemplate use the code below as a starting\n          \n          \n            \n            Then if you are using `RestTemplate` use the code below as a starting", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508854214", "createdAt": "2020-10-20T21:34:56Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+Then if you are using RestTemplate use the code below as a starting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2MjU4MQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510262581", "createdAt": "2020-10-22T15:38:29Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+Then if you are using RestTemplate use the code below as a starting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NDIxNA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUzMDE1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozNTozOFrOHlSBRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozNTozOFrOHlSBRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NDU5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    HttpComponentsClientHttpRequestFactory requestFactory =\n          \n          \n            \n                                    new HttpComponentsClientHttpRequestFactory();\n          \n          \n            \n                    HttpComponentsClientHttpRequestFactory requestFactory =\n          \n          \n            \n                        new HttpComponentsClientHttpRequestFactory();", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508854598", "createdAt": "2020-10-20T21:35:38Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+Then if you are using RestTemplate use the code below as a starting\n+point:\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        HostnameVerifier allowAll = (String hostName, SSLSession session) -> true;\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext, allowAll);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUzMjA1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozNjoxOFrOHlSCfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTowMjowNFrOHmmRzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NDkxMQ==", "bodyText": "We could avoid repeating some sections in this README like the Maven dependency part and the one for RestTemplate.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508854911", "createdAt": "2020-10-20T21:36:18Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzNTA4NQ==", "bodyText": "I wrote it this way so the customer does not have to figure out what is relevant for them. They just look for the section applicable to their use case and all the information is there.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510235085", "createdAt": "2020-10-22T15:02:04Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NDkxMQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUzMjUwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozNjozM1rOHlSCzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzoyMToyNVrOHmhdJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NDk5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                uri: <the URI of the Azure KeyVault to use>\n          \n          \n            \n                uri: <the URI of the Azure Key Vault to use>", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508854991", "createdAt": "2020-10-20T21:36:33Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+Then if you are using RestTemplate use the code below as a starting\n+point:\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        HostnameVerifier allowAll = (String hostName, SSLSession session) -> true;\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext, allowAll);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+## Configuring Spring Cloud Gateway\n+\n+To configure Spring Cloud Gateway for outbound SSL you will need\n+to add the following configuration:\n+\n+```yaml\n+azure:\n+  keyvault:\n+    uri: <the URI of the Azure KeyVault to use>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1NjA2OA==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510156068", "createdAt": "2020-10-22T13:21:25Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+Then if you are using RestTemplate use the code below as a starting\n+point:\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        HostnameVerifier allowAll = (String hostName, SSLSession session) -> true;\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext, allowAll);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+## Configuring Spring Cloud Gateway\n+\n+To configure Spring Cloud Gateway for outbound SSL you will need\n+to add the following configuration:\n+\n+```yaml\n+azure:\n+  keyvault:\n+    uri: <the URI of the Azure KeyVault to use>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NDk5MQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUzNDg3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozNzowNFrOHlSEIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNToyNDo1MVrOHmnUrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NTMzMQ==", "bodyText": "nit; Adding some visual help for readers.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you are developing you can completely disable the certificate and hostname\n          \n          \n            \n            validation altogether by using the configuration below. Note this is NOT \n          \n          \n            \n            recommended for production!\n          \n          \n            \n            If you are developing you can completely disable the certificate and hostname\n          \n          \n            \n            validation altogether by using the configuration below. **Note this is NOT \n          \n          \n            \n            recommended for production!**", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508855331", "createdAt": "2020-10-20T21:37:04Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+Then if you are using RestTemplate use the code below as a starting\n+point:\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        HostnameVerifier allowAll = (String hostName, SSLSession session) -> true;\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext, allowAll);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+## Configuring Spring Cloud Gateway\n+\n+To configure Spring Cloud Gateway for outbound SSL you will need\n+to add the following configuration:\n+\n+```yaml\n+azure:\n+  keyvault:\n+    uri: <the URI of the Azure KeyVault to use>\n+    jca: \n+      overrideTrustManagerFactory: true\n+```\n+\n+Note: if any of your routes point to a service where the FQDN does not match the\n+issued certificate you will need to disable hostname verification. This will\n+be the case if your service is dynamically assigned a hostname by the hosting\n+platform you use. In this particular case add the configuration below to disable\n+hostname verification:\n+\n+```yaml\n+azure:\n+  keyvault:\n+    jca:\n+      disableHostnameVerification: true\n+```\n+\n+If you are developing you can completely disable the certificate and hostname\n+validation altogether by using the configuration below. Note this is NOT \n+recommended for production!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1MjIwNQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510252205", "createdAt": "2020-10-22T15:24:51Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+Then if you are using RestTemplate use the code below as a starting\n+point:\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        HostnameVerifier allowAll = (String hostName, SSLSession session) -> true;\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext, allowAll);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+## Configuring Spring Cloud Gateway\n+\n+To configure Spring Cloud Gateway for outbound SSL you will need\n+to add the following configuration:\n+\n+```yaml\n+azure:\n+  keyvault:\n+    uri: <the URI of the Azure KeyVault to use>\n+    jca: \n+      overrideTrustManagerFactory: true\n+```\n+\n+Note: if any of your routes point to a service where the FQDN does not match the\n+issued certificate you will need to disable hostname verification. This will\n+be the case if your service is dynamically assigned a hostname by the hosting\n+platform you use. In this particular case add the configuration below to disable\n+hostname verification:\n+\n+```yaml\n+azure:\n+  keyvault:\n+    jca:\n+      disableHostnameVerification: true\n+```\n+\n+If you are developing you can completely disable the certificate and hostname\n+validation altogether by using the configuration below. Note this is NOT \n+recommended for production!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NTMzMQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUzNjA5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozNzozMFrOHlSE7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzoyMTozNlrOHmhdrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NTUzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To create an Azure KeyVault use the command line below:\n          \n          \n            \n            To create an Azure Key Vault use the command line below:", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508855533", "createdAt": "2020-10-20T21:37:30Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+Then if you are using RestTemplate use the code below as a starting\n+point:\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        HostnameVerifier allowAll = (String hostName, SSLSession session) -> true;\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext, allowAll);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+## Configuring Spring Cloud Gateway\n+\n+To configure Spring Cloud Gateway for outbound SSL you will need\n+to add the following configuration:\n+\n+```yaml\n+azure:\n+  keyvault:\n+    uri: <the URI of the Azure KeyVault to use>\n+    jca: \n+      overrideTrustManagerFactory: true\n+```\n+\n+Note: if any of your routes point to a service where the FQDN does not match the\n+issued certificate you will need to disable hostname verification. This will\n+be the case if your service is dynamically assigned a hostname by the hosting\n+platform you use. In this particular case add the configuration below to disable\n+hostname verification:\n+\n+```yaml\n+azure:\n+  keyvault:\n+    jca:\n+      disableHostnameVerification: true\n+```\n+\n+If you are developing you can completely disable the certificate and hostname\n+validation altogether by using the configuration below. Note this is NOT \n+recommended for production!\n+\n+```yaml\n+spring:\n+  cloud:\n+    gateway:\n+      httpclient:\n+        ssl:\n+          useInsecureTrustManager: true\n+```\n+\n+## Creating an Azure Key Vault\n+\n+To create an Azure KeyVault use the command line below:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1NjIwNg==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510156206", "createdAt": "2020-10-22T13:21:36Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+Then if you are using RestTemplate use the code below as a starting\n+point:\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        HostnameVerifier allowAll = (String hostName, SSLSession session) -> true;\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext, allowAll);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+## Configuring Spring Cloud Gateway\n+\n+To configure Spring Cloud Gateway for outbound SSL you will need\n+to add the following configuration:\n+\n+```yaml\n+azure:\n+  keyvault:\n+    uri: <the URI of the Azure KeyVault to use>\n+    jca: \n+      overrideTrustManagerFactory: true\n+```\n+\n+Note: if any of your routes point to a service where the FQDN does not match the\n+issued certificate you will need to disable hostname verification. This will\n+be the case if your service is dynamically assigned a hostname by the hosting\n+platform you use. In this particular case add the configuration below to disable\n+hostname verification:\n+\n+```yaml\n+azure:\n+  keyvault:\n+    jca:\n+      disableHostnameVerification: true\n+```\n+\n+If you are developing you can completely disable the certificate and hostname\n+validation altogether by using the configuration below. Note this is NOT \n+recommended for production!\n+\n+```yaml\n+spring:\n+  cloud:\n+    gateway:\n+      httpclient:\n+        ssl:\n+          useInsecureTrustManager: true\n+```\n+\n+## Creating an Azure Key Vault\n+\n+To create an Azure KeyVault use the command line below:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NTUzMw=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUzNzM3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozNzo1N1rOHlSFwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzoyMTo0OFrOHmheMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NTc0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. Certificates coming from Azure KeyVault take precedence over \n          \n          \n            \n            2. Certificates coming from Azure Key Vault take precedence over", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508855744", "createdAt": "2020-10-20T21:37:57Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+Then if you are using RestTemplate use the code below as a starting\n+point:\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        HostnameVerifier allowAll = (String hostName, SSLSession session) -> true;\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext, allowAll);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+## Configuring Spring Cloud Gateway\n+\n+To configure Spring Cloud Gateway for outbound SSL you will need\n+to add the following configuration:\n+\n+```yaml\n+azure:\n+  keyvault:\n+    uri: <the URI of the Azure KeyVault to use>\n+    jca: \n+      overrideTrustManagerFactory: true\n+```\n+\n+Note: if any of your routes point to a service where the FQDN does not match the\n+issued certificate you will need to disable hostname verification. This will\n+be the case if your service is dynamically assigned a hostname by the hosting\n+platform you use. In this particular case add the configuration below to disable\n+hostname verification:\n+\n+```yaml\n+azure:\n+  keyvault:\n+    jca:\n+      disableHostnameVerification: true\n+```\n+\n+If you are developing you can completely disable the certificate and hostname\n+validation altogether by using the configuration below. Note this is NOT \n+recommended for production!\n+\n+```yaml\n+spring:\n+  cloud:\n+    gateway:\n+      httpclient:\n+        ssl:\n+          useInsecureTrustManager: true\n+```\n+\n+## Creating an Azure Key Vault\n+\n+To create an Azure KeyVault use the command line below:\n+\n+```shell\n+  export KEY_VAULT=mykeyvault\n+  export RESOURCE_GROUP=myresourcegroup\n+  az keyvault create --name ${KEY_VAULT} -g ${RESOURCE_GROUP}\n+```\n+\n+## Create a self-signed certificate\n+\n+To create a self-signed certificate use the command line below:\n+\n+```shell\n+  export CERTIFICATE_ALIAS=self-signed\n+  az keyvault certificate create --vault-name ${KEY_VAULT} \\\n+    -n ${CERTIFICATE_ALIAS} -p \"$(az keyvault certificate get-default-policy)\"\n+```\n+\n+## Assign a managed identity (to an Azure Spring Cloud application)\n+\n+To assign a managed identity use the command line below:\n+\n+```shell\n+  export SPRING_CLOUD_APP=myspringcloudapp\n+  az spring-cloud app identity assign --name ${SPRING_CLOUD_APP}\n+  export MANAGED_IDENTITY=$(az spring-cloud app show \\\n+    --name ${SPRING_CLOUD_APP} --query identity.principalId --output tsv)\n+```\n+\n+## Grant a managed identity with access to Azure Key Vault\n+\n+To grant access use the command line below:\n+\n+```shell\n+  az keyvault set-policy --name ${KEY_VAULT} \\\n+        --object-id ${MANAGED_IDENTITY} \\\n+        --key-permisssions get list \\\n+        --secret-permissions get list \\\n+        --certificate-permissions get list\n+```\n+\n+## Side-loading certificates\n+\n+This starter allows you to side-load certificates by supplying them as part of\n+the application. \n+\n+To side-load add your certificates to the `src/main/resources/keyvault` folder.\n+\n+Notes: \n+1. The alias (certificate name) is constructed from the filename of the \n+certificate (minus the extension). So if your filename is `mycert.x509` the\n+certificate will be added with the alias of `mycert`. \n+2. Certificates coming from Azure KeyVault take precedence over ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1NjMzOA==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510156338", "createdAt": "2020-10-22T13:21:48Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+Then if you are using RestTemplate use the code below as a starting\n+point:\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        HostnameVerifier allowAll = (String hostName, SSLSession session) -> true;\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext, allowAll);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+## Configuring Spring Cloud Gateway\n+\n+To configure Spring Cloud Gateway for outbound SSL you will need\n+to add the following configuration:\n+\n+```yaml\n+azure:\n+  keyvault:\n+    uri: <the URI of the Azure KeyVault to use>\n+    jca: \n+      overrideTrustManagerFactory: true\n+```\n+\n+Note: if any of your routes point to a service where the FQDN does not match the\n+issued certificate you will need to disable hostname verification. This will\n+be the case if your service is dynamically assigned a hostname by the hosting\n+platform you use. In this particular case add the configuration below to disable\n+hostname verification:\n+\n+```yaml\n+azure:\n+  keyvault:\n+    jca:\n+      disableHostnameVerification: true\n+```\n+\n+If you are developing you can completely disable the certificate and hostname\n+validation altogether by using the configuration below. Note this is NOT \n+recommended for production!\n+\n+```yaml\n+spring:\n+  cloud:\n+    gateway:\n+      httpclient:\n+        ssl:\n+          useInsecureTrustManager: true\n+```\n+\n+## Creating an Azure Key Vault\n+\n+To create an Azure KeyVault use the command line below:\n+\n+```shell\n+  export KEY_VAULT=mykeyvault\n+  export RESOURCE_GROUP=myresourcegroup\n+  az keyvault create --name ${KEY_VAULT} -g ${RESOURCE_GROUP}\n+```\n+\n+## Create a self-signed certificate\n+\n+To create a self-signed certificate use the command line below:\n+\n+```shell\n+  export CERTIFICATE_ALIAS=self-signed\n+  az keyvault certificate create --vault-name ${KEY_VAULT} \\\n+    -n ${CERTIFICATE_ALIAS} -p \"$(az keyvault certificate get-default-policy)\"\n+```\n+\n+## Assign a managed identity (to an Azure Spring Cloud application)\n+\n+To assign a managed identity use the command line below:\n+\n+```shell\n+  export SPRING_CLOUD_APP=myspringcloudapp\n+  az spring-cloud app identity assign --name ${SPRING_CLOUD_APP}\n+  export MANAGED_IDENTITY=$(az spring-cloud app show \\\n+    --name ${SPRING_CLOUD_APP} --query identity.principalId --output tsv)\n+```\n+\n+## Grant a managed identity with access to Azure Key Vault\n+\n+To grant access use the command line below:\n+\n+```shell\n+  az keyvault set-policy --name ${KEY_VAULT} \\\n+        --object-id ${MANAGED_IDENTITY} \\\n+        --key-permisssions get list \\\n+        --secret-permissions get list \\\n+        --certificate-permissions get list\n+```\n+\n+## Side-loading certificates\n+\n+This starter allows you to side-load certificates by supplying them as part of\n+the application. \n+\n+To side-load add your certificates to the `src/main/resources/keyvault` folder.\n+\n+Notes: \n+1. The alias (certificate name) is constructed from the filename of the \n+certificate (minus the extension). So if your filename is `mycert.x509` the\n+certificate will be added with the alias of `mycert`. \n+2. Certificates coming from Azure KeyVault take precedence over ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NTc0NA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzUzODgxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozODoyOFrOHlSGoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozODoyOFrOHlSGoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NTk2OQ==", "bodyText": "Let's try to fill these sections out for the next release.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508855969", "createdAt": "2020-10-20T21:38:28Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/README.md", "diffHunk": "@@ -0,0 +1,278 @@\n+# Azure Key Vault Certificates Spring Boot starter \n+\n+## Server side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for server side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+server.ssl.key-alias=<the name of the certificate in Azure KeyVault to use>\n+server.ssl.key-store-type=AzureKeyVault\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+## Client side SSL\n+\n+### Using a managed identity\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+```\n+Note: make sure the managed identity has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+If you are using RestTemplate use code similar to the example below.\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+### Using a client ID and client secret\n+\n+To use the starter for client side SSL, you will need to add the following to\n+your application.properties (if the application is using Spring Cloud Config \n+Server for its configuration add it to the bootstrap.yml of the application)\n+\n+```\n+azure.keyvault.uri=<the URI of the Azure KeyVault to use>\n+azure.keyvault.tenantId=<the ID of your Azure tenant>\n+azure.keyvault.clientId=<the client ID with access to Azure KeyVault>\n+azure.keyvault.clientSecret=<the client secret associated wit the client ID>\n+```\n+\n+Note: make sure the client ID has access to the Azure KeyVault to access\n+keys, secrets and certificates.\n+\n+Add then add the following Maven dependency to your POM file.\n+\n+```xml\n+    <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    </dependency>\n+```\n+\n+Then if you are using RestTemplate use the code below as a starting\n+point:\n+\n+```java\n+    @Bean\n+    public RestTemplate restTemplate() throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"AzureKeyVault\");\n+        SSLContext sslContext = SSLContexts.custom()\n+            .loadTrustMaterial(ks, new TrustSelfSignedStrategy())\n+            .build();\n+\n+        HostnameVerifier allowAll = (String hostName, SSLSession session) -> true;\n+        SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext, allowAll);\n+\n+        CloseableHttpClient httpClient = HttpClients.custom()\n+            .setSSLSocketFactory(csf)\n+            .build();\n+\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                        new HttpComponentsClientHttpRequestFactory();\n+\n+        requestFactory.setHttpClient(httpClient);\n+        RestTemplate restTemplate = new RestTemplate(requestFactory);\n+        return restTemplate;\n+    }\n+```\n+\n+## Configuring Spring Cloud Gateway\n+\n+To configure Spring Cloud Gateway for outbound SSL you will need\n+to add the following configuration:\n+\n+```yaml\n+azure:\n+  keyvault:\n+    uri: <the URI of the Azure KeyVault to use>\n+    jca: \n+      overrideTrustManagerFactory: true\n+```\n+\n+Note: if any of your routes point to a service where the FQDN does not match the\n+issued certificate you will need to disable hostname verification. This will\n+be the case if your service is dynamically assigned a hostname by the hosting\n+platform you use. In this particular case add the configuration below to disable\n+hostname verification:\n+\n+```yaml\n+azure:\n+  keyvault:\n+    jca:\n+      disableHostnameVerification: true\n+```\n+\n+If you are developing you can completely disable the certificate and hostname\n+validation altogether by using the configuration below. Note this is NOT \n+recommended for production!\n+\n+```yaml\n+spring:\n+  cloud:\n+    gateway:\n+      httpclient:\n+        ssl:\n+          useInsecureTrustManager: true\n+```\n+\n+## Creating an Azure Key Vault\n+\n+To create an Azure KeyVault use the command line below:\n+\n+```shell\n+  export KEY_VAULT=mykeyvault\n+  export RESOURCE_GROUP=myresourcegroup\n+  az keyvault create --name ${KEY_VAULT} -g ${RESOURCE_GROUP}\n+```\n+\n+## Create a self-signed certificate\n+\n+To create a self-signed certificate use the command line below:\n+\n+```shell\n+  export CERTIFICATE_ALIAS=self-signed\n+  az keyvault certificate create --vault-name ${KEY_VAULT} \\\n+    -n ${CERTIFICATE_ALIAS} -p \"$(az keyvault certificate get-default-policy)\"\n+```\n+\n+## Assign a managed identity (to an Azure Spring Cloud application)\n+\n+To assign a managed identity use the command line below:\n+\n+```shell\n+  export SPRING_CLOUD_APP=myspringcloudapp\n+  az spring-cloud app identity assign --name ${SPRING_CLOUD_APP}\n+  export MANAGED_IDENTITY=$(az spring-cloud app show \\\n+    --name ${SPRING_CLOUD_APP} --query identity.principalId --output tsv)\n+```\n+\n+## Grant a managed identity with access to Azure Key Vault\n+\n+To grant access use the command line below:\n+\n+```shell\n+  az keyvault set-policy --name ${KEY_VAULT} \\\n+        --object-id ${MANAGED_IDENTITY} \\\n+        --key-permisssions get list \\\n+        --secret-permissions get list \\\n+        --certificate-permissions get list\n+```\n+\n+## Side-loading certificates\n+\n+This starter allows you to side-load certificates by supplying them as part of\n+the application. \n+\n+To side-load add your certificates to the `src/main/resources/keyvault` folder.\n+\n+Notes: \n+1. The alias (certificate name) is constructed from the filename of the \n+certificate (minus the extension). So if your filename is `mycert.x509` the\n+certificate will be added with the alias of `mycert`. \n+2. Certificates coming from Azure KeyVault take precedence over \n+side-loaded certificates.\n+\n+## Testing the current version under development \n+\n+If you want to test the current version under development you will have to\n+\n+1. Build and install the [Microsoft Azure JCA Provider]<!--(../../keyvault/azure-security-keyvault-jca/README.md)--> for KeyVault\n+1. Build and install this starter.\n+\n+To build and install the starter use the following command line:\n+\n+```\n+  mvn clean install -DskipTests=true\n+```\n+\n+\n+# Azure KeyVault Certificates client library for Java\n+\n+# Getting started\n+\n+# Key concepts\n+\n+# Examples\n+\n+# Troubleshooting\n+\n+# Next steps\n+\n+# Contributing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 278}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzU0NzcxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTo0MToyM1rOHlSMGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTo0MToyM1rOHlSMGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NzM2OA==", "bodyText": "I noticed the Key Vault Secrets Spring Boot Starter does not make use of the Revapi plugin. Should we consider adding it there?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508857368", "createdAt": "2020-10-20T21:41:23Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/pom.xml", "diffHunk": "@@ -0,0 +1,185 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+  \n+    <parent>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-client-sdk-parent</artifactId>\n+        <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+        <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+    </parent>\n+    \n+    <groupId>com.azure.spring</groupId>\n+    <artifactId>azure-spring-boot-starter-keyvault-certificates</artifactId>\n+    <version>3.0.0-beta.1</version> <!-- {x-version-update;com.azure.spring:azure-spring-boot-starter-keyvault-certificates;current} -->\n+\n+    <name>Azure Key Vault Certificates Spring Boot Starter</name>\n+    <description>Spring Boot Starter supporting Azure Key Vault Certificates</description>\n+    <url>https://github.com/Azure/azure-sdk-for-java</url>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter</artifactId>\n+            <version>2.3.3.RELEASE</version> <!-- {x-version-update;org.springframework.boot:spring-boot-starter;external_dependency} -->\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-validation</artifactId>\n+            <version>2.3.3.RELEASE</version> <!-- {x-version-update;org.springframework.boot:spring-boot-starter-validation;external_dependency} -->\n+        </dependency>\n+        <dependency>\n+            <groupId>com.azure</groupId>\n+            <artifactId>azure-security-keyvault-jca</artifactId>\n+            <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure:azure-security-keyvault-jca;current} -->\n+        </dependency>\n+    </dependencies>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-enforcer-plugin</artifactId>\n+                <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-enforcer-plugin;external_dependency} -->\n+                <configuration>\n+                    <rules>\n+                        <bannedDependencies>\n+                            <includes>\n+                                <include>org.springframework.boot:spring-boot-starter:[2.3.3.RELEASE]</include> <!-- {x-include-update;org.springframework.boot:spring-boot-starter;external_dependency} -->\n+                                <include>org.springframework.boot:spring-boot-starter-validation:[2.3.3.RELEASE]</include> <!-- {x-include-update;org.springframework.boot:spring-boot-starter-validation;external_dependency} -->\n+                            </includes>\n+                        </bannedDependencies>\n+                    </rules>\n+                </configuration>\n+            </plugin>\n+            <!-- BEGIN: Empty Java Doc & Sources -->\n+            <!-- The following code will generate an empty javadoc with just a README.md. This is necessary\n+                 to pass the required checks on Maven. The way this works is by setting the classesDirectory\n+                 to a directory that only contains the README.md, which we need to copy. If the classesDirectory\n+                 is set to the root, where the README.md lives, it still won't have javadocs but the jar file\n+                 will contain a bunch of files that shouldn't be there. The faux sources directory is deleted\n+                 and recreated with the README.md being copied every time to guarantee that, when building locally,\n+                 it'll have the latest copy of the README.md file.\n+            -->\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-javadoc-plugin</artifactId>\n+                <version>3.1.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-javadoc-plugin;external_dependency} -->\n+                <executions>\n+                    <execution>\n+                        <id>attach-javadocs</id>\n+                        <goals>\n+                            <goal>jar</goal>\n+                        </goals>\n+                        <configuration>\n+                            <skip>true</skip>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <version>3.1.2</version> <!-- {x-version-update;org.apache.maven.plugins:maven-jar-plugin;external_dependency} -->\n+                <executions>\n+                    <!-- BEGIN: Empty Java Doc -->\n+                    <execution>\n+                        <id>empty-javadoc-jar-with-readme</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>jar</goal>\n+                        </goals>\n+                        <configuration>\n+                            <classifier>javadoc</classifier>\n+                            <classesDirectory>${project.basedir}/javadocTemp</classesDirectory>\n+                        </configuration>\n+                    </execution>\n+                    <!-- END: Empty Java Doc -->\n+                    <!-- BEGIN: Empty Sources -->\n+                    <execution>\n+                        <id>empty-sources-jar-with-readme</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>jar</goal>\n+                        </goals>\n+                        <configuration>\n+                            <classifier>sources</classifier>\n+                            <classesDirectory>${project.basedir}/sourceTemp</classesDirectory>\n+                        </configuration>\n+                    </execution>\n+                    <!-- END: Empty Sources -->\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-antrun-plugin</artifactId>\n+                <version>1.8</version> <!-- {x-version-update;org.apache.maven.plugins:maven-antrun-plugin;external_dependency} -->\n+                <executions>\n+                    <execution>\n+                        <id>copy-readme-to-javadocTemp</id>\n+                        <phase>prepare-package</phase>\n+                        <configuration>\n+                            <target>\n+                                <echo>Deleting existing ${project.basedir}/javadocTemp</echo>\n+                                <delete includeEmptyDirs=\"true\" quiet=\"true\">\n+                                    <fileset dir=\"${project.basedir}/javadocTemp\"/>\n+                                </delete>\n+                                <echo>Copying ${project.basedir}/README.md to\n+                                    ${project.basedir}/javadocTemp/README.md\n+                                </echo>\n+                                <copy file=\"${project.basedir}/README.md\" tofile=\"${project.basedir}/javadocTemp/README.md\"/>\n+                            </target>\n+                        </configuration>\n+                        <goals>\n+                            <goal>run</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>copy-readme-to-sourceTemp</id>\n+                        <phase>prepare-package</phase>\n+                        <configuration>\n+                            <target>\n+                                <echo>Deleting existing ${project.basedir}/sourceTemp</echo>\n+                                <delete includeEmptyDirs=\"true\" quiet=\"true\">\n+                                    <fileset dir=\"${project.basedir}/sourceTemp\"/>\n+                                </delete>\n+                                <echo>Copying ${project.basedir}/README.md to\n+                                    ${project.basedir}/sourceTemp/README.md\n+                                </echo>\n+                                <copy file=\"${project.basedir}/README.md\" tofile=\"${project.basedir}/sourceTemp/README.md\"/>\n+                            </target>\n+                        </configuration>\n+                        <goals>\n+                            <goal>run</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-source-plugin</artifactId>\n+                <version>3.0.1</version> <!-- {x-version-update;org.apache.maven.plugins:maven-source-plugin;external_dependency} -->\n+                <executions>\n+                    <execution>\n+                        <id>attach-sources</id>\n+                        <phase>none</phase> <!-- The way to skip the sources attach is to set the phase to none, the skip config doesn't work for sources -->\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <!-- END: Empty Java Doc & Sources -->\n+            <plugin>\n+                <groupId>org.revapi</groupId>\n+                <artifactId>revapi-maven-plugin</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzU1MDM3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/src/main/java/com/azure/spring/security/keyvault/certificates/starter/KeyVaultCertificatesEnvironmentPostProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTo0MjoxMlrOHlSNow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMToyODozMVrOHne7gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1Nzc2Mw==", "bodyText": "This logger is not used in the class at all.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508857763", "createdAt": "2020-10-20T21:42:12Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/src/main/java/com/azure/spring/security/keyvault/certificates/starter/KeyVaultCertificatesEnvironmentPostProcessor.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.security.keyvault.certificates.starter;\n+\n+import com.azure.security.keyvault.jca.KeyVaultJcaProvider;\n+import com.azure.security.keyvault.jca.KeyVaultTrustManagerFactoryProvider;\n+\n+import java.security.Security;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+import javax.net.ssl.HttpsURLConnection;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.env.EnvironmentPostProcessor;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.MutablePropertySources;\n+import org.springframework.core.env.PropertiesPropertySource;\n+\n+import static org.springframework.core.Ordered.LOWEST_PRECEDENCE;\n+\n+@Order(LOWEST_PRECEDENCE)\n+public class KeyVaultCertificatesEnvironmentPostProcessor implements EnvironmentPostProcessor {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultCertificatesEnvironmentPostProcessor.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE2MzI2NA==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511163264", "createdAt": "2020-10-23T21:28:31Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/src/main/java/com/azure/spring/security/keyvault/certificates/starter/KeyVaultCertificatesEnvironmentPostProcessor.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.security.keyvault.certificates.starter;\n+\n+import com.azure.security.keyvault.jca.KeyVaultJcaProvider;\n+import com.azure.security.keyvault.jca.KeyVaultTrustManagerFactoryProvider;\n+\n+import java.security.Security;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+import javax.net.ssl.HttpsURLConnection;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.env.EnvironmentPostProcessor;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.MutablePropertySources;\n+import org.springframework.core.env.PropertiesPropertySource;\n+\n+import static org.springframework.core.Ordered.LOWEST_PRECEDENCE;\n+\n+@Order(LOWEST_PRECEDENCE)\n+public class KeyVaultCertificatesEnvironmentPostProcessor implements EnvironmentPostProcessor {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultCertificatesEnvironmentPostProcessor.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1Nzc2Mw=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzU1ODg3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/src/main/java/com/azure/spring/security/keyvault/certificates/starter/KeyVaultCertificatesEnvironmentPostProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTo0NToxMlrOHlSTBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo1MzowOFrOHneJFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1OTE0MA==", "bodyText": "nit; Making things prettier.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            HttpsURLConnection.setDefaultHostnameVerifier((hostname, session) -> {\n          \n          \n            \n                                return true;\n          \n          \n            \n                            });\n          \n          \n            \n                            HttpsURLConnection.setDefaultHostnameVerifier((hostname, session) -> true);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508859140", "createdAt": "2020-10-20T21:45:12Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/src/main/java/com/azure/spring/security/keyvault/certificates/starter/KeyVaultCertificatesEnvironmentPostProcessor.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.security.keyvault.certificates.starter;\n+\n+import com.azure.security.keyvault.jca.KeyVaultJcaProvider;\n+import com.azure.security.keyvault.jca.KeyVaultTrustManagerFactoryProvider;\n+\n+import java.security.Security;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+import javax.net.ssl.HttpsURLConnection;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.env.EnvironmentPostProcessor;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.MutablePropertySources;\n+import org.springframework.core.env.PropertiesPropertySource;\n+\n+import static org.springframework.core.Ordered.LOWEST_PRECEDENCE;\n+\n+@Order(LOWEST_PRECEDENCE)\n+public class KeyVaultCertificatesEnvironmentPostProcessor implements EnvironmentPostProcessor {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultCertificatesEnvironmentPostProcessor.class.getName());\n+\n+    @Override\n+    public void postProcessEnvironment(ConfigurableEnvironment environment,\n+                                       SpringApplication application) {\n+\n+        Properties systemProperties = System.getProperties();\n+\n+        String uri = environment.getProperty(\"azure.keyvault.uri\");\n+        if (uri != null) {\n+            systemProperties.put(\"azure.keyvault.uri\", uri);\n+\n+            String tenantId = environment.getProperty(\"azure.keyvault.tenantId\");\n+            if (tenantId != null) {\n+                systemProperties.put(\"azure.keyvault.tenantId\", tenantId);\n+            }\n+\n+            String clientId = environment.getProperty(\"azure.keyvault.clientId\");\n+            if (clientId != null) {\n+                systemProperties.put(\"azure.keyvault.clientId\", clientId);\n+            }\n+\n+            String clientSecret = environment.getProperty(\"azure.keyvault.clientSecret\");\n+            if (clientSecret != null) {\n+                systemProperties.put(\"azure.keyvault.clientSecret\", clientSecret);\n+            }\n+\n+            String keyStoreType = environment.getProperty(\"server.ssl.key-store-type\");\n+\n+            if (keyStoreType != null && keyStoreType.equals(\"AzureKeyVault\")) {\n+                MutablePropertySources sources = environment.getPropertySources();\n+                Properties properties = new Properties();\n+                properties.put(\"server.ssl.key-store\", \"classpath:keyvault.dummy\");\n+\n+                try {\n+                    Class.forName(\"org.apache.tomcat.InstanceManager\");\n+                    properties.put(\"server.ssl.key-store-type\", \"DKS\");\n+                } catch (ClassNotFoundException ex) {\n+                }\n+\n+                PropertiesPropertySource propertySource =\n+                        new PropertiesPropertySource(\"KeyStorePropertySource\", properties);\n+                sources.addFirst(propertySource);\n+            }\n+\n+            String trustStoreType = environment.getProperty(\"server.ssl.trust-store-type\");\n+\n+            if (trustStoreType != null && trustStoreType.equals(\"AzureKeyVault\")) {\n+                MutablePropertySources sources = environment.getPropertySources();\n+                Properties properties = new Properties();\n+                properties.put(\"server.ssl.trust-store\", \"classpath:keyvault.dummy\");\n+\n+                try {\n+                    Class.forName(\"org.apache.tomcat.InstanceManager\");\n+                    properties.put(\"server.ssl.trust-store-type\", \"DKS\");\n+                } catch (ClassNotFoundException ex) {\n+                }\n+\n+                PropertiesPropertySource propertySource = \n+                        new PropertiesPropertySource(\"TrustStorePropertySource\", properties);\n+                sources.addFirst(propertySource);\n+            }\n+\n+            KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n+            Security.insertProviderAt(provider, 1);\n+\n+            String enabled = environment.getProperty(\"azure.keyvault.jca.overrideTrustManagerFactory\");\n+            if (Boolean.parseBoolean(enabled)) {\n+                KeyVaultTrustManagerFactoryProvider factoryProvider =\n+                    new KeyVaultTrustManagerFactoryProvider();\n+                Security.insertProviderAt(factoryProvider, 1);\n+            }\n+\n+            enabled = environment.getProperty(\"azure.keyvault.jca.disableHostnameVerification\");\n+            if (Boolean.parseBoolean(enabled)) {\n+                HttpsURLConnection.setDefaultHostnameVerifier((hostname, session) -> {\n+                    return true;\n+                });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MDM1OQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511150359", "createdAt": "2020-10-23T20:53:08Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/src/main/java/com/azure/spring/security/keyvault/certificates/starter/KeyVaultCertificatesEnvironmentPostProcessor.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.security.keyvault.certificates.starter;\n+\n+import com.azure.security.keyvault.jca.KeyVaultJcaProvider;\n+import com.azure.security.keyvault.jca.KeyVaultTrustManagerFactoryProvider;\n+\n+import java.security.Security;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+import javax.net.ssl.HttpsURLConnection;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.env.EnvironmentPostProcessor;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.MutablePropertySources;\n+import org.springframework.core.env.PropertiesPropertySource;\n+\n+import static org.springframework.core.Ordered.LOWEST_PRECEDENCE;\n+\n+@Order(LOWEST_PRECEDENCE)\n+public class KeyVaultCertificatesEnvironmentPostProcessor implements EnvironmentPostProcessor {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultCertificatesEnvironmentPostProcessor.class.getName());\n+\n+    @Override\n+    public void postProcessEnvironment(ConfigurableEnvironment environment,\n+                                       SpringApplication application) {\n+\n+        Properties systemProperties = System.getProperties();\n+\n+        String uri = environment.getProperty(\"azure.keyvault.uri\");\n+        if (uri != null) {\n+            systemProperties.put(\"azure.keyvault.uri\", uri);\n+\n+            String tenantId = environment.getProperty(\"azure.keyvault.tenantId\");\n+            if (tenantId != null) {\n+                systemProperties.put(\"azure.keyvault.tenantId\", tenantId);\n+            }\n+\n+            String clientId = environment.getProperty(\"azure.keyvault.clientId\");\n+            if (clientId != null) {\n+                systemProperties.put(\"azure.keyvault.clientId\", clientId);\n+            }\n+\n+            String clientSecret = environment.getProperty(\"azure.keyvault.clientSecret\");\n+            if (clientSecret != null) {\n+                systemProperties.put(\"azure.keyvault.clientSecret\", clientSecret);\n+            }\n+\n+            String keyStoreType = environment.getProperty(\"server.ssl.key-store-type\");\n+\n+            if (keyStoreType != null && keyStoreType.equals(\"AzureKeyVault\")) {\n+                MutablePropertySources sources = environment.getPropertySources();\n+                Properties properties = new Properties();\n+                properties.put(\"server.ssl.key-store\", \"classpath:keyvault.dummy\");\n+\n+                try {\n+                    Class.forName(\"org.apache.tomcat.InstanceManager\");\n+                    properties.put(\"server.ssl.key-store-type\", \"DKS\");\n+                } catch (ClassNotFoundException ex) {\n+                }\n+\n+                PropertiesPropertySource propertySource =\n+                        new PropertiesPropertySource(\"KeyStorePropertySource\", properties);\n+                sources.addFirst(propertySource);\n+            }\n+\n+            String trustStoreType = environment.getProperty(\"server.ssl.trust-store-type\");\n+\n+            if (trustStoreType != null && trustStoreType.equals(\"AzureKeyVault\")) {\n+                MutablePropertySources sources = environment.getPropertySources();\n+                Properties properties = new Properties();\n+                properties.put(\"server.ssl.trust-store\", \"classpath:keyvault.dummy\");\n+\n+                try {\n+                    Class.forName(\"org.apache.tomcat.InstanceManager\");\n+                    properties.put(\"server.ssl.trust-store-type\", \"DKS\");\n+                } catch (ClassNotFoundException ex) {\n+                }\n+\n+                PropertiesPropertySource propertySource = \n+                        new PropertiesPropertySource(\"TrustStorePropertySource\", properties);\n+                sources.addFirst(propertySource);\n+            }\n+\n+            KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n+            Security.insertProviderAt(provider, 1);\n+\n+            String enabled = environment.getProperty(\"azure.keyvault.jca.overrideTrustManagerFactory\");\n+            if (Boolean.parseBoolean(enabled)) {\n+                KeyVaultTrustManagerFactoryProvider factoryProvider =\n+                    new KeyVaultTrustManagerFactoryProvider();\n+                Security.insertProviderAt(factoryProvider, 1);\n+            }\n+\n+            enabled = environment.getProperty(\"azure.keyvault.jca.disableHostnameVerification\");\n+            if (Boolean.parseBoolean(enabled)) {\n+                HttpsURLConnection.setDefaultHostnameVerifier((hostname, session) -> {\n+                    return true;\n+                });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1OTE0MA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzU3MzMyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/src/main/java/com/azure/spring/security/keyvault/certificates/starter/KeyVaultCertificatesEnvironmentPostProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTo0OTo0NFrOHlSbsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo1Njo1NFrOHneOsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTM2MA==", "bodyText": "I noticed that the all classes that are part of the Key Vault Secrets Spring Boot Starter live in the azure-spring-boot folder under the package com.azure.spring.keyvault, should this be there as well?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508861360", "createdAt": "2020-10-20T21:49:44Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/src/main/java/com/azure/spring/security/keyvault/certificates/starter/KeyVaultCertificatesEnvironmentPostProcessor.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.security.keyvault.certificates.starter;\n+\n+import com.azure.security.keyvault.jca.KeyVaultJcaProvider;\n+import com.azure.security.keyvault.jca.KeyVaultTrustManagerFactoryProvider;\n+\n+import java.security.Security;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+import javax.net.ssl.HttpsURLConnection;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.env.EnvironmentPostProcessor;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.MutablePropertySources;\n+import org.springframework.core.env.PropertiesPropertySource;\n+\n+import static org.springframework.core.Ordered.LOWEST_PRECEDENCE;\n+\n+@Order(LOWEST_PRECEDENCE)\n+public class KeyVaultCertificatesEnvironmentPostProcessor implements EnvironmentPostProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MTc5Mw==", "bodyText": "@chenrujun @saragluna Can you answer this question?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511151793", "createdAt": "2020-10-23T20:56:54Z", "author": {"login": "mnriem"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/src/main/java/com/azure/spring/security/keyvault/certificates/starter/KeyVaultCertificatesEnvironmentPostProcessor.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.security.keyvault.certificates.starter;\n+\n+import com.azure.security.keyvault.jca.KeyVaultJcaProvider;\n+import com.azure.security.keyvault.jca.KeyVaultTrustManagerFactoryProvider;\n+\n+import java.security.Security;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+import javax.net.ssl.HttpsURLConnection;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.env.EnvironmentPostProcessor;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.MutablePropertySources;\n+import org.springframework.core.env.PropertiesPropertySource;\n+\n+import static org.springframework.core.Ordered.LOWEST_PRECEDENCE;\n+\n+@Order(LOWEST_PRECEDENCE)\n+public class KeyVaultCertificatesEnvironmentPostProcessor implements EnvironmentPostProcessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTM2MA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzU4MzI5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/src/main/resources/config/application.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTo1Mjo1OFrOHlShwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTo1Mjo1OFrOHlShwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MjkxMw==", "bodyText": "Maybe we can use dummy-value or something else instead (I don't have a better suggestion at the moment). As it stands right now, it is a little ambiguous if what does not matter is the value or the property at all.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            server.ssl.key-store-password=doesnotmatter\n          \n          \n            \n            server.ssl.key-password=doesnotmatter\n          \n          \n            \n            server.ssl.trust-store-password=doesnotmatter\n          \n          \n            \n            server.ssl.key-store-password=dummy-value\n          \n          \n            \n            server.ssl.key-password=dummy-value\n          \n          \n            \n            server.ssl.trust-store-password=dummy-value", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508862913", "createdAt": "2020-10-20T21:52:58Z", "author": {"login": "vcolin7"}, "path": "sdk/spring/azure-spring-boot-starter-keyvault-certificates/src/main/resources/config/application.properties", "diffHunk": "@@ -0,0 +1,3 @@\n+server.ssl.key-store-password=doesnotmatter\n+server.ssl.key-password=doesnotmatter\n+server.ssl.trust-store-password=doesnotmatter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODE3MTU0OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMjozMTozOVrOHlX9zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTozMDoxMlrOHne9vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MjAxNQ==", "bodyText": "Don't need to have public methods on a package private class", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508952015", "createdAt": "2020-10-21T02:31:39Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultClient.java", "diffHunk": "@@ -0,0 +1,244 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.CertificateBundle;\n+import com.azure.security.keyvault.jca.rest.CertificateItem;\n+import com.azure.security.keyvault.jca.rest.CertificateListResult;\n+import com.azure.security.keyvault.jca.rest.CertificatePolicy;\n+import com.azure.security.keyvault.jca.rest.KeyProperties;\n+import com.azure.security.keyvault.jca.rest.SecretBundle;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The REST client specific to Azure KeyVault.\n+ */\n+class KeyVaultClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultClient.class.getName());\n+\n+    /**\n+     * Stores the API version postfix.\n+     */\n+    private static final String API_VERSION_POSTFIX = \"?api-version=7.1\";\n+\n+    /**\n+     * Stores the KeyVault URI.\n+     */\n+    private final String keyVaultUri;\n+\n+    /**\n+     * Stores the tenant ID.\n+     */\n+    private String tenantId;\n+\n+    /**\n+     * Stores the client ID.\n+     */\n+    private String clientId;\n+\n+    /**\n+     * Stores the client secret.\n+     */\n+    private String clientSecret;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyVaultUri the KeyVault URI.\n+     */\n+    KeyVaultClient(String keyVaultUri) {\n+        super(RestClientFactory.createClient());\n+        LOGGER.log(INFO, \"Using KeyVault: {0}\", keyVaultUri);\n+        if (!keyVaultUri.endsWith(\"/\")) {\n+            keyVaultUri = keyVaultUri + \"/\";\n+        }\n+        this.keyVaultUri = keyVaultUri;\n+    }\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyVaultUri the KeyVault URI.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     */\n+    KeyVaultClient(final String keyVaultUri, final String tenantId, final String clientId, final String clientSecret) {\n+        this(keyVaultUri);\n+        this.tenantId = tenantId;\n+        this.clientId = clientId;\n+        this.clientSecret = clientSecret;\n+    }\n+\n+    /**\n+     * Get the access token.\n+     *\n+     * @return the access token.\n+     */\n+    private String getAccessToken() {\n+        LOGGER.entering(\"KeyVaultClient\", \"getAccessToken\");\n+        String accessToken = null;\n+        try {\n+            AuthClient authClient = new AuthClient();\n+            String resource = URLEncoder.encode(\"https://vault.azure.net\", \"UTF-8\");\n+            if (tenantId != null && clientId != null && clientSecret != null) {\n+                accessToken = authClient.getAccessToken(resource, tenantId, clientId, clientSecret);\n+            } else {\n+                accessToken = authClient.getAccessToken(resource);\n+            }\n+        } catch (UnsupportedEncodingException uee) {\n+            LOGGER.log(WARNING, \"Unsupported encoding\", uee);\n+        }\n+        LOGGER.exiting(\"KeyVaultClient\", \"getAccessToken\", accessToken);\n+        return accessToken;\n+    }\n+\n+    /**\n+     * Get the list of aliases.\n+     *\n+     * @return the list of aliases.\n+     */\n+    public List<String> getAliases() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1NDcxNA==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511154714", "createdAt": "2020-10-23T21:04:31Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultClient.java", "diffHunk": "@@ -0,0 +1,244 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.CertificateBundle;\n+import com.azure.security.keyvault.jca.rest.CertificateItem;\n+import com.azure.security.keyvault.jca.rest.CertificateListResult;\n+import com.azure.security.keyvault.jca.rest.CertificatePolicy;\n+import com.azure.security.keyvault.jca.rest.KeyProperties;\n+import com.azure.security.keyvault.jca.rest.SecretBundle;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The REST client specific to Azure KeyVault.\n+ */\n+class KeyVaultClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultClient.class.getName());\n+\n+    /**\n+     * Stores the API version postfix.\n+     */\n+    private static final String API_VERSION_POSTFIX = \"?api-version=7.1\";\n+\n+    /**\n+     * Stores the KeyVault URI.\n+     */\n+    private final String keyVaultUri;\n+\n+    /**\n+     * Stores the tenant ID.\n+     */\n+    private String tenantId;\n+\n+    /**\n+     * Stores the client ID.\n+     */\n+    private String clientId;\n+\n+    /**\n+     * Stores the client secret.\n+     */\n+    private String clientSecret;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyVaultUri the KeyVault URI.\n+     */\n+    KeyVaultClient(String keyVaultUri) {\n+        super(RestClientFactory.createClient());\n+        LOGGER.log(INFO, \"Using KeyVault: {0}\", keyVaultUri);\n+        if (!keyVaultUri.endsWith(\"/\")) {\n+            keyVaultUri = keyVaultUri + \"/\";\n+        }\n+        this.keyVaultUri = keyVaultUri;\n+    }\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyVaultUri the KeyVault URI.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     */\n+    KeyVaultClient(final String keyVaultUri, final String tenantId, final String clientId, final String clientSecret) {\n+        this(keyVaultUri);\n+        this.tenantId = tenantId;\n+        this.clientId = clientId;\n+        this.clientSecret = clientSecret;\n+    }\n+\n+    /**\n+     * Get the access token.\n+     *\n+     * @return the access token.\n+     */\n+    private String getAccessToken() {\n+        LOGGER.entering(\"KeyVaultClient\", \"getAccessToken\");\n+        String accessToken = null;\n+        try {\n+            AuthClient authClient = new AuthClient();\n+            String resource = URLEncoder.encode(\"https://vault.azure.net\", \"UTF-8\");\n+            if (tenantId != null && clientId != null && clientSecret != null) {\n+                accessToken = authClient.getAccessToken(resource, tenantId, clientId, clientSecret);\n+            } else {\n+                accessToken = authClient.getAccessToken(resource);\n+            }\n+        } catch (UnsupportedEncodingException uee) {\n+            LOGGER.log(WARNING, \"Unsupported encoding\", uee);\n+        }\n+        LOGGER.exiting(\"KeyVaultClient\", \"getAccessToken\", accessToken);\n+        return accessToken;\n+    }\n+\n+    /**\n+     * Get the list of aliases.\n+     *\n+     * @return the list of aliases.\n+     */\n+    public List<String> getAliases() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MjAxNQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE2MzgzOQ==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511163839", "createdAt": "2020-10-23T21:30:12Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultClient.java", "diffHunk": "@@ -0,0 +1,244 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import com.azure.security.keyvault.jca.rest.CertificateBundle;\n+import com.azure.security.keyvault.jca.rest.CertificateItem;\n+import com.azure.security.keyvault.jca.rest.CertificateListResult;\n+import com.azure.security.keyvault.jca.rest.CertificatePolicy;\n+import com.azure.security.keyvault.jca.rest.KeyProperties;\n+import com.azure.security.keyvault.jca.rest.SecretBundle;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The REST client specific to Azure KeyVault.\n+ */\n+class KeyVaultClient extends DelegateRestClient {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultClient.class.getName());\n+\n+    /**\n+     * Stores the API version postfix.\n+     */\n+    private static final String API_VERSION_POSTFIX = \"?api-version=7.1\";\n+\n+    /**\n+     * Stores the KeyVault URI.\n+     */\n+    private final String keyVaultUri;\n+\n+    /**\n+     * Stores the tenant ID.\n+     */\n+    private String tenantId;\n+\n+    /**\n+     * Stores the client ID.\n+     */\n+    private String clientId;\n+\n+    /**\n+     * Stores the client secret.\n+     */\n+    private String clientSecret;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyVaultUri the KeyVault URI.\n+     */\n+    KeyVaultClient(String keyVaultUri) {\n+        super(RestClientFactory.createClient());\n+        LOGGER.log(INFO, \"Using KeyVault: {0}\", keyVaultUri);\n+        if (!keyVaultUri.endsWith(\"/\")) {\n+            keyVaultUri = keyVaultUri + \"/\";\n+        }\n+        this.keyVaultUri = keyVaultUri;\n+    }\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param keyVaultUri the KeyVault URI.\n+     * @param tenantId the tenant ID.\n+     * @param clientId the client ID.\n+     * @param clientSecret the client secret.\n+     */\n+    KeyVaultClient(final String keyVaultUri, final String tenantId, final String clientId, final String clientSecret) {\n+        this(keyVaultUri);\n+        this.tenantId = tenantId;\n+        this.clientId = clientId;\n+        this.clientSecret = clientSecret;\n+    }\n+\n+    /**\n+     * Get the access token.\n+     *\n+     * @return the access token.\n+     */\n+    private String getAccessToken() {\n+        LOGGER.entering(\"KeyVaultClient\", \"getAccessToken\");\n+        String accessToken = null;\n+        try {\n+            AuthClient authClient = new AuthClient();\n+            String resource = URLEncoder.encode(\"https://vault.azure.net\", \"UTF-8\");\n+            if (tenantId != null && clientId != null && clientSecret != null) {\n+                accessToken = authClient.getAccessToken(resource, tenantId, clientId, clientSecret);\n+            } else {\n+                accessToken = authClient.getAccessToken(resource);\n+            }\n+        } catch (UnsupportedEncodingException uee) {\n+            LOGGER.log(WARNING, \"Unsupported encoding\", uee);\n+        }\n+        LOGGER.exiting(\"KeyVaultClient\", \"getAccessToken\", accessToken);\n+        return accessToken;\n+    }\n+\n+    /**\n+     * Get the list of aliases.\n+     *\n+     * @return the list of aliases.\n+     */\n+    public List<String> getAliases() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MjAxNQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODE3Mzg1OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyManagerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMjozMjo1M1rOHlX_Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoxOTo0MVrOHmkMhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MjM0Mw==", "bodyText": "why protected and not public ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508952343", "createdAt": "2020-10-21T02:32:53Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyManagerFactory.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactorySpi;\n+import javax.net.ssl.ManagerFactoryParameters;\n+import java.security.KeyStore;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+/**\n+ * The KeyVault variant of the KeyManagerFactory.\n+ */\n+public class KeyVaultKeyManagerFactory extends KeyManagerFactorySpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyManagerFactory.class.getName());\n+\n+    /**\n+     * Stores the key managers.\n+     */\n+    private final List<KeyManager> keyManagers = new ArrayList<>();\n+\n+    @Override\n+    protected void engineInit(KeyStore keystore, char[] password) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIwMDk2Nw==", "bodyText": "Not my choice this is part of the KeyManagerFactory delivered as part of JCA", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510200967", "createdAt": "2020-10-22T14:19:41Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyManagerFactory.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactorySpi;\n+import javax.net.ssl.ManagerFactoryParameters;\n+import java.security.KeyStore;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+/**\n+ * The KeyVault variant of the KeyManagerFactory.\n+ */\n+public class KeyVaultKeyManagerFactory extends KeyManagerFactorySpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyManagerFactory.class.getName());\n+\n+    /**\n+     * Stores the key managers.\n+     */\n+    private final List<KeyManager> keyManagers = new ArrayList<>();\n+\n+    @Override\n+    protected void engineInit(KeyStore keystore, char[] password) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MjM0Mw=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODE3NTY3OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyManagerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMjozNDowOVrOHlYALQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToxNTowMVrOHm0HKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MjYyMQ==", "bodyText": "is this method meant to not do anything ?\nBetter to throw an UnsupportedOperationException, to let user know,", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508952621", "createdAt": "2020-10-21T02:34:09Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyManagerFactory.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactorySpi;\n+import javax.net.ssl.ManagerFactoryParameters;\n+import java.security.KeyStore;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+/**\n+ * The KeyVault variant of the KeyManagerFactory.\n+ */\n+public class KeyVaultKeyManagerFactory extends KeyManagerFactorySpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyManagerFactory.class.getName());\n+\n+    /**\n+     * Stores the key managers.\n+     */\n+    private final List<KeyManager> keyManagers = new ArrayList<>();\n+\n+    @Override\n+    protected void engineInit(KeyStore keystore, char[] password) {\n+        LOGGER.entering(\n+            \"KeyVaultKeyManagerFactory\",\n+            \"engineInit\",\n+            new Object[] { keystore, new String(password) }\n+        );\n+        KeyVaultKeyManager manager = new KeyVaultKeyManager(keystore, password);\n+        keyManagers.add(manager);\n+    }\n+\n+    @Override\n+    protected void engineInit(ManagerFactoryParameters spec) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2MTczOQ==", "bodyText": "Yes it is meant to do nothing. And the API is defined and it does not state UnsupportedOperationException can be thrown.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510461739", "createdAt": "2020-10-22T21:15:01Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyManagerFactory.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactorySpi;\n+import javax.net.ssl.ManagerFactoryParameters;\n+import java.security.KeyStore;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+/**\n+ * The KeyVault variant of the KeyManagerFactory.\n+ */\n+public class KeyVaultKeyManagerFactory extends KeyManagerFactorySpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyManagerFactory.class.getName());\n+\n+    /**\n+     * Stores the key managers.\n+     */\n+    private final List<KeyManager> keyManagers = new ArrayList<>();\n+\n+    @Override\n+    protected void engineInit(KeyStore keystore, char[] password) {\n+        LOGGER.entering(\n+            \"KeyVaultKeyManagerFactory\",\n+            \"engineInit\",\n+            new Object[] { keystore, new String(password) }\n+        );\n+        KeyVaultKeyManager manager = new KeyVaultKeyManager(keystore, password);\n+        keyManagers.add(manager);\n+    }\n+\n+    @Override\n+    protected void engineInit(ManagerFactoryParameters spec) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MjYyMQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODE3ODcwOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMjozNTo0NFrOHlYByw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToyNzoyNVrOHm0fhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MzAzNQ==", "bodyText": "Consider adding code snippets in Javadocs for public API.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508953035", "createdAt": "2020-10-21T02:35:44Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.KeyStoreSpi;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableEntryException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The Azure KeyVault implementation of the KeyStoreSpi.\n+ */\n+public class KeyVaultKeyStore extends KeyStoreSpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyStore.class.getName());\n+\n+    /**\n+     * Stores the list of aliases.\n+     */\n+    private List<String> aliases;\n+\n+    /**\n+     * Stores the certificates by alias.\n+     */\n+    private final HashMap<String, Certificate> certificates = new HashMap<>();\n+\n+    /**\n+     * Stores the certificate keys by alias.\n+     */\n+    private final HashMap<String, Key> certificateKeys = new HashMap<>();\n+\n+    /**\n+     * Stores the creation date.\n+     */\n+    private final Date creationDate;\n+\n+    /**\n+     * Stores the key vault client.\n+     */\n+    private KeyVaultClient keyVault;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor uses System.getProperty for\n+     * <code>azure.keyvault.uri</code>, <code>azure.keyvault.tenantId</code>,\n+     * <code>azure.keyvault.clientId</code>,\n+     * <code>azure.keyvault.clientSecret</code> to initialize the keyvault\n+     * client.\n+     * </p>\n+     */\n+    public KeyVaultKeyStore() {\n+        creationDate = new Date();\n+        String keyVaultUri = System.getProperty(\"azure.keyvault.uri\");\n+        String tenantId = System.getProperty(\"azure.keyvault.tenantId\");\n+        String clientId = System.getProperty(\"azure.keyvault.clientId\");\n+        String clientSecret = System.getProperty(\"azure.keyvault.clientSecret\");\n+        keyVault = new KeyVaultClient(keyVaultUri, tenantId, clientId, clientSecret);\n+    }\n+\n+    @Override\n+    public Enumeration<String> engineAliases() {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return Collections.enumeration(aliases);\n+    }\n+\n+    @Override\n+    public boolean engineContainsAlias(String alias) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2Nzk3Mw==", "bodyText": "This is an API that has been part of Java for a long time and as such has its own documentation so no need to add code snippets here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r510467973", "createdAt": "2020-10-22T21:27:25Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.KeyStoreSpi;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableEntryException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The Azure KeyVault implementation of the KeyStoreSpi.\n+ */\n+public class KeyVaultKeyStore extends KeyStoreSpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyStore.class.getName());\n+\n+    /**\n+     * Stores the list of aliases.\n+     */\n+    private List<String> aliases;\n+\n+    /**\n+     * Stores the certificates by alias.\n+     */\n+    private final HashMap<String, Certificate> certificates = new HashMap<>();\n+\n+    /**\n+     * Stores the certificate keys by alias.\n+     */\n+    private final HashMap<String, Key> certificateKeys = new HashMap<>();\n+\n+    /**\n+     * Stores the creation date.\n+     */\n+    private final Date creationDate;\n+\n+    /**\n+     * Stores the key vault client.\n+     */\n+    private KeyVaultClient keyVault;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor uses System.getProperty for\n+     * <code>azure.keyvault.uri</code>, <code>azure.keyvault.tenantId</code>,\n+     * <code>azure.keyvault.clientId</code>,\n+     * <code>azure.keyvault.clientSecret</code> to initialize the keyvault\n+     * client.\n+     * </p>\n+     */\n+    public KeyVaultKeyStore() {\n+        creationDate = new Date();\n+        String keyVaultUri = System.getProperty(\"azure.keyvault.uri\");\n+        String tenantId = System.getProperty(\"azure.keyvault.tenantId\");\n+        String clientId = System.getProperty(\"azure.keyvault.clientId\");\n+        String clientSecret = System.getProperty(\"azure.keyvault.clientSecret\");\n+        keyVault = new KeyVaultClient(keyVaultUri, tenantId, clientId, clientSecret);\n+    }\n+\n+    @Override\n+    public Enumeration<String> engineAliases() {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return Collections.enumeration(aliases);\n+    }\n+\n+    @Override\n+    public boolean engineContainsAlias(String alias) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MzAzNQ=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODE4MDUwOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMjozNjo1NVrOHlYC4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMToyMDoxOVrOHnewhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MzMxNA==", "bodyText": "Consider throwing UnsupportedOperationException to offer a better User experience, in all the methods that do not have any logic in them.\nCurrently, user will just wonder if the operation executed successfully or not.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r508953314", "createdAt": "2020-10-21T02:36:55Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.KeyStoreSpi;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableEntryException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The Azure KeyVault implementation of the KeyStoreSpi.\n+ */\n+public class KeyVaultKeyStore extends KeyStoreSpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyStore.class.getName());\n+\n+    /**\n+     * Stores the list of aliases.\n+     */\n+    private List<String> aliases;\n+\n+    /**\n+     * Stores the certificates by alias.\n+     */\n+    private final HashMap<String, Certificate> certificates = new HashMap<>();\n+\n+    /**\n+     * Stores the certificate keys by alias.\n+     */\n+    private final HashMap<String, Key> certificateKeys = new HashMap<>();\n+\n+    /**\n+     * Stores the creation date.\n+     */\n+    private final Date creationDate;\n+\n+    /**\n+     * Stores the key vault client.\n+     */\n+    private KeyVaultClient keyVault;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor uses System.getProperty for\n+     * <code>azure.keyvault.uri</code>, <code>azure.keyvault.tenantId</code>,\n+     * <code>azure.keyvault.clientId</code>,\n+     * <code>azure.keyvault.clientSecret</code> to initialize the keyvault\n+     * client.\n+     * </p>\n+     */\n+    public KeyVaultKeyStore() {\n+        creationDate = new Date();\n+        String keyVaultUri = System.getProperty(\"azure.keyvault.uri\");\n+        String tenantId = System.getProperty(\"azure.keyvault.tenantId\");\n+        String clientId = System.getProperty(\"azure.keyvault.clientId\");\n+        String clientSecret = System.getProperty(\"azure.keyvault.clientSecret\");\n+        keyVault = new KeyVaultClient(keyVaultUri, tenantId, clientId, clientSecret);\n+    }\n+\n+    @Override\n+    public Enumeration<String> engineAliases() {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return Collections.enumeration(aliases);\n+    }\n+\n+    @Override\n+    public boolean engineContainsAlias(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineDeleteEntry(String alias) {\n+    }\n+\n+    @Override\n+    public boolean engineEntryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass) {\n+        return super.engineEntryInstanceOf(alias, entryClass);\n+    }\n+\n+    @Override\n+    public Certificate engineGetCertificate(String alias) {\n+        Certificate certificate;\n+        if (certificates.containsKey(alias)) {\n+            certificate = certificates.get(alias);\n+        } else {\n+            certificate = keyVault.getCertificate(alias);\n+            if (certificate != null) {\n+                certificates.put(alias, certificate);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return certificate;\n+    }\n+\n+    @Override\n+    public String engineGetCertificateAlias(Certificate cert) {\n+        String alias = null;\n+        if (cert != null) {\n+            if (aliases == null) {\n+                aliases = keyVault.getAliases();\n+            }\n+            for (String candidateAlias : aliases) {\n+                Certificate certificate = engineGetCertificate(candidateAlias);\n+                if (certificate.equals(cert)) {\n+                    alias = candidateAlias;\n+                    break;\n+                }\n+            }\n+        }\n+        return alias;\n+    }\n+\n+    @Override\n+    public Certificate[] engineGetCertificateChain(String alias) {\n+        Certificate[] chain = null;\n+        Certificate certificate = engineGetCertificate(alias);\n+        if (certificate != null) {\n+            chain = new Certificate[1];\n+            chain[0] = certificate;\n+        }\n+        return chain;\n+    }\n+\n+    @Override\n+    public Date engineGetCreationDate(String alias) {\n+        return creationDate;\n+    }\n+\n+    @Override\n+    public KeyStore.Entry engineGetEntry(String alias, KeyStore.ProtectionParameter protParam) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException {\n+        return super.engineGetEntry(alias, protParam);\n+    }\n+\n+    @Override\n+    public Key engineGetKey(String alias, char[] password) {\n+        Key key;\n+        if (certificateKeys.containsKey(alias)) {\n+            key = certificateKeys.get(alias);\n+        } else {\n+            key = keyVault.getKey(alias, password);\n+            if (key != null) {\n+                certificateKeys.put(alias, key);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return key;\n+    }\n+\n+    @Override\n+    public boolean engineIsCertificateEntry(String alias) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return aliases.contains(alias);\n+    }\n+\n+    @Override\n+    public boolean engineIsKeyEntry(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineLoad(KeyStore.LoadStoreParameter param) {\n+        if (param instanceof KeyVaultLoadStoreParameter) {\n+            KeyVaultLoadStoreParameter parameter = (KeyVaultLoadStoreParameter) param;\n+            keyVault = new KeyVaultClient(\n+                parameter.getUri(),\n+                parameter.getTenantId(),\n+                parameter.getClientId(),\n+                parameter.getClientSecret());\n+        }\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineLoad(InputStream stream, char[] password) {\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineSetCertificateEntry(String alias, Certificate certificate) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        if (!aliases.contains(alias)) {\n+            aliases.add(alias);\n+            certificates.put(alias, certificate);\n+        }\n+    }\n+\n+    @Override\n+    public void engineSetEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam) throws KeyStoreException {\n+        super.engineSetEntry(alias, entry, protParam);\n+    }\n+\n+    @Override\n+    public void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE2MDQ1Mg==", "bodyText": "The API contract is defined by the JCA specification / JavaDoc and it does not state UnsupportedOperationException can be thrown.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511160452", "createdAt": "2020-10-23T21:20:19Z", "author": {"login": "mnriem"}, "path": "sdk/keyvault/azure-security-keyvault-jca/src/main/java/com/azure/security/keyvault/jca/KeyVaultKeyStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.jca;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.KeyStoreSpi;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableEntryException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+/**\n+ * The Azure KeyVault implementation of the KeyStoreSpi.\n+ */\n+public class KeyVaultKeyStore extends KeyStoreSpi {\n+\n+    /**\n+     * Stores the logger.\n+     */\n+    private static final Logger LOGGER = Logger.getLogger(KeyVaultKeyStore.class.getName());\n+\n+    /**\n+     * Stores the list of aliases.\n+     */\n+    private List<String> aliases;\n+\n+    /**\n+     * Stores the certificates by alias.\n+     */\n+    private final HashMap<String, Certificate> certificates = new HashMap<>();\n+\n+    /**\n+     * Stores the certificate keys by alias.\n+     */\n+    private final HashMap<String, Key> certificateKeys = new HashMap<>();\n+\n+    /**\n+     * Stores the creation date.\n+     */\n+    private final Date creationDate;\n+\n+    /**\n+     * Stores the key vault client.\n+     */\n+    private KeyVaultClient keyVault;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * <p>\n+     * The constructor uses System.getProperty for\n+     * <code>azure.keyvault.uri</code>, <code>azure.keyvault.tenantId</code>,\n+     * <code>azure.keyvault.clientId</code>,\n+     * <code>azure.keyvault.clientSecret</code> to initialize the keyvault\n+     * client.\n+     * </p>\n+     */\n+    public KeyVaultKeyStore() {\n+        creationDate = new Date();\n+        String keyVaultUri = System.getProperty(\"azure.keyvault.uri\");\n+        String tenantId = System.getProperty(\"azure.keyvault.tenantId\");\n+        String clientId = System.getProperty(\"azure.keyvault.clientId\");\n+        String clientSecret = System.getProperty(\"azure.keyvault.clientSecret\");\n+        keyVault = new KeyVaultClient(keyVaultUri, tenantId, clientId, clientSecret);\n+    }\n+\n+    @Override\n+    public Enumeration<String> engineAliases() {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return Collections.enumeration(aliases);\n+    }\n+\n+    @Override\n+    public boolean engineContainsAlias(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineDeleteEntry(String alias) {\n+    }\n+\n+    @Override\n+    public boolean engineEntryInstanceOf(String alias, Class<? extends KeyStore.Entry> entryClass) {\n+        return super.engineEntryInstanceOf(alias, entryClass);\n+    }\n+\n+    @Override\n+    public Certificate engineGetCertificate(String alias) {\n+        Certificate certificate;\n+        if (certificates.containsKey(alias)) {\n+            certificate = certificates.get(alias);\n+        } else {\n+            certificate = keyVault.getCertificate(alias);\n+            if (certificate != null) {\n+                certificates.put(alias, certificate);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return certificate;\n+    }\n+\n+    @Override\n+    public String engineGetCertificateAlias(Certificate cert) {\n+        String alias = null;\n+        if (cert != null) {\n+            if (aliases == null) {\n+                aliases = keyVault.getAliases();\n+            }\n+            for (String candidateAlias : aliases) {\n+                Certificate certificate = engineGetCertificate(candidateAlias);\n+                if (certificate.equals(cert)) {\n+                    alias = candidateAlias;\n+                    break;\n+                }\n+            }\n+        }\n+        return alias;\n+    }\n+\n+    @Override\n+    public Certificate[] engineGetCertificateChain(String alias) {\n+        Certificate[] chain = null;\n+        Certificate certificate = engineGetCertificate(alias);\n+        if (certificate != null) {\n+            chain = new Certificate[1];\n+            chain[0] = certificate;\n+        }\n+        return chain;\n+    }\n+\n+    @Override\n+    public Date engineGetCreationDate(String alias) {\n+        return creationDate;\n+    }\n+\n+    @Override\n+    public KeyStore.Entry engineGetEntry(String alias, KeyStore.ProtectionParameter protParam) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException {\n+        return super.engineGetEntry(alias, protParam);\n+    }\n+\n+    @Override\n+    public Key engineGetKey(String alias, char[] password) {\n+        Key key;\n+        if (certificateKeys.containsKey(alias)) {\n+            key = certificateKeys.get(alias);\n+        } else {\n+            key = keyVault.getKey(alias, password);\n+            if (key != null) {\n+                certificateKeys.put(alias, key);\n+                if (!aliases.contains(alias)) {\n+                    aliases.add(alias);\n+                }\n+            }\n+        }\n+        return key;\n+    }\n+\n+    @Override\n+    public boolean engineIsCertificateEntry(String alias) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        return aliases.contains(alias);\n+    }\n+\n+    @Override\n+    public boolean engineIsKeyEntry(String alias) {\n+        return engineIsCertificateEntry(alias);\n+    }\n+\n+    @Override\n+    public void engineLoad(KeyStore.LoadStoreParameter param) {\n+        if (param instanceof KeyVaultLoadStoreParameter) {\n+            KeyVaultLoadStoreParameter parameter = (KeyVaultLoadStoreParameter) param;\n+            keyVault = new KeyVaultClient(\n+                parameter.getUri(),\n+                parameter.getTenantId(),\n+                parameter.getClientId(),\n+                parameter.getClientSecret());\n+        }\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineLoad(InputStream stream, char[] password) {\n+        sideLoad();\n+    }\n+\n+    @Override\n+    public void engineSetCertificateEntry(String alias, Certificate certificate) {\n+        if (aliases == null) {\n+            aliases = keyVault.getAliases();\n+        }\n+        if (!aliases.contains(alias)) {\n+            aliases.add(alias);\n+            certificates.put(alias, certificate);\n+        }\n+    }\n+\n+    @Override\n+    public void engineSetEntry(String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam) throws KeyStoreException {\n+        super.engineSetEntry(alias, entry, protParam);\n+    }\n+\n+    @Override\n+    public void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MzMxNA=="}, "originalCommit": {"oid": "59b9585bd9ca4de1246d417961916376e3bf226f"}, "originalPosition": 232}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4084, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}