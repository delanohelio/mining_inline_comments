{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NzU4NzE2", "number": 7162, "title": "Text Analytics doc snippets async client", "bodyText": "Fixes Async #6874, part 1 #6728", "createdAt": "2020-01-06T23:35:47Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162", "merged": true, "mergeCommit": {"oid": "11cceb06a5c3ca8bf20cd95a42fcf6af5beb8fdd"}, "closed": true, "closedAt": "2020-01-08T19:23:59Z", "author": {"login": "samvaity"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb301kGAH2gAyMzU5NzU4NzE2OjMyZGQ2NWVmMjUzNTQ2MjkwYzIwOWYxNTc3NmRmODdmYTJjNzNkZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4KqhXgH2gAyMzU5NzU4NzE2OmRmNWZhYWI1NjNhMzRmZDRiZTIzMDNlYWQwMmYxOWJkMGY1MDU2Y2U=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "32dd65ef253546290c209f15776df87fa2c73def", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/32dd65ef253546290c209f15776df87fa2c73def", "committedDate": "2020-01-06T23:34:20Z", "message": "adding code snippets for async methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a2b8aa7c41f4d5741cf82f5a01d14d199368f10", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7a2b8aa7c41f4d5741cf82f5a01d14d199368f10", "committedDate": "2020-01-06T23:34:20Z", "message": "remove javadoc suppression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4918160ab6116dd217ff63d8faf6bbee7569071", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d4918160ab6116dd217ff63d8faf6bbee7569071", "committedDate": "2020-01-06T23:49:06Z", "message": "make snippets shorter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "291d721ee1eb04ccd68fb5bc424db7e3c2a78af6", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/291d721ee1eb04ccd68fb5bc424db7e3c2a78af6", "committedDate": "2020-01-06T23:48:27Z", "message": "make snippets shorter"}, "afterCommit": {"oid": "d4918160ab6116dd217ff63d8faf6bbee7569071", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d4918160ab6116dd217ff63d8faf6bbee7569071", "committedDate": "2020-01-06T23:49:06Z", "message": "make snippets shorter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "912a658c8e26af675d11a34faff78d835810fdc1", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/912a658c8e26af675d11a34faff78d835810fdc1", "committedDate": "2020-01-06T23:52:47Z", "message": "extra lines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/690f4f215b87cfd0daee58bbb9638e198fde94b2", "committedDate": "2020-01-07T00:19:40Z", "message": "skip logging pii"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MDExNjk2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#pullrequestreview-339011696", "createdAt": "2020-01-07T03:13:00Z", "commit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxMzowMVrOFau7Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxMzowMVrOFau7Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjE1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                System.out.printf(\"Another detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n          \n          \n            \n                                System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363576155", "createdAt": "2020-01-07T03:13:01Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Another detected language: %s, ISO 6391 name: %s, score: %s.%n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MDExNzYx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#pullrequestreview-339011761", "createdAt": "2020-01-07T03:13:21Z", "commit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxMzoyMVrOFau7kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxMzoyMVrOFau7kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjIxMQ==", "bodyText": "System.out.printf(\"Document ID: %s%n\", detectLanguageResult.getId());", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363576211", "createdAt": "2020-01-07T03:13:21Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MDEyMjc4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#pullrequestreview-339012278", "createdAt": "2020-01-07T03:15:47Z", "commit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxNTo0N1rOFau9BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxNTo0N1rOFau9BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjU4MA==", "bodyText": "since it only shows detectLangues list, the message should need to update as well.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n          \n          \n            \n                        System.out.printf(\"Batch statistics, document count: %s,\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363576580", "createdAt": "2020-01-07T03:15:47Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MDEyMzMx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#pullrequestreview-339012331", "createdAt": "2020-01-07T03:16:05Z", "commit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxNjowNVrOFau9MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxNjowNVrOFau9MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjYyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            batchStatistics.getTransactionCount(),\n          \n          \n            \n                            batchStatistics.getDocumentCount(),", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363576624", "createdAt": "2020-01-07T03:16:05Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MDE4ODQx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#pullrequestreview-339018841", "createdAt": "2020-01-07T03:50:43Z", "commit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzo1MDo0M1rOFavRrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzo1MDo0M1rOFavRrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4MTg3MA==", "bodyText": "entity.getSubtype() == null || entity.getSubtype().isEmpty() ? \"N/A\" : entity.getSubtype(),", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363581870", "createdAt": "2020-01-07T03:50:43Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Another detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+        final List<String> listInputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguagesWithResponse(listInputs, \"US\").subscribe(response -> {\n+            DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+        List<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+        textAnalyticsAsyncClient.detectBatchLanguages(detectLanguageInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+        List<DetectLanguageInput> detectLanguageInputs1 = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        // Request options: show statistics and model version\n+        final TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setShowStatistics(true);\n+\n+        textAnalyticsAsyncClient.detectBatchLanguagesWithResponse(detectLanguageInputs1, requestOptions)\n+            .subscribe(response -> {\n+                final DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+                System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+                // Batch statistics\n+                final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(),\n+                    batchStatistics.getValidDocumentCount());\n+\n+                for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                    for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                        System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                            detectedLanguage.getName(),\n+                            detectedLanguage.getIso6391Name(),\n+                            detectedLanguage.getScore());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+    }\n+\n+    // Entity\n+    /**\n+     * Code snippet for recognizing entities\n+     */\n+    public void recognizeEntitiesCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+        String inputText = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntities(inputText).subscribe(recognizeEntitiesResult -> {\n+            for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                System.out.printf(\n+                    \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                    entity.getText(),\n+                    entity.getType(),\n+                    entity.getSubtype(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 184}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MDIxODY2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#pullrequestreview-339021866", "createdAt": "2020-01-07T04:07:17Z", "commit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwNDowNzoxN1rOFavbMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwNDowNzoxN1rOFavbMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4NDMwNA==", "bodyText": "inputs would be too general, textInputs could be a better one", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363584304", "createdAt": "2020-01-07T04:07:17Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Another detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+        final List<String> listInputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguagesWithResponse(listInputs, \"US\").subscribe(response -> {\n+            DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+        List<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+        textAnalyticsAsyncClient.detectBatchLanguages(detectLanguageInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+        List<DetectLanguageInput> detectLanguageInputs1 = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        // Request options: show statistics and model version\n+        final TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setShowStatistics(true);\n+\n+        textAnalyticsAsyncClient.detectBatchLanguagesWithResponse(detectLanguageInputs1, requestOptions)\n+            .subscribe(response -> {\n+                final DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+                System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+                // Batch statistics\n+                final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(),\n+                    batchStatistics.getValidDocumentCount());\n+\n+                for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                    for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                        System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                            detectedLanguage.getName(),\n+                            detectedLanguage.getIso6391Name(),\n+                            detectedLanguage.getScore());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+    }\n+\n+    // Entity\n+    /**\n+     * Code snippet for recognizing entities\n+     */\n+    public void recognizeEntitiesCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+        String inputText = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntities(inputText).subscribe(recognizeEntitiesResult -> {\n+            for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                System.out.printf(\n+                    \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                    entity.getText(),\n+                    entity.getType(),\n+                    entity.getSubtype(),\n+                    entity.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+        String inputText1 = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntitiesWithResponse(inputText1, \"en\")\n+            .subscribe(recognizeEntitiesResult -> {\n+                for (NamedEntity entity : recognizeEntitiesResult.getValue().getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getSubtype(),\n+                        entity.getScore());\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#List\n+        List<String> inputs = Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 206}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MDI1Njkx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#pullrequestreview-339025691", "createdAt": "2020-01-07T04:29:18Z", "commit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwNDoyOToxOFrOFavnNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwNDoyOToxOFrOFavnNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4NzM4MQ==", "bodyText": "input text is not PII related", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363587381", "createdAt": "2020-01-07T04:29:18Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Another detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+        final List<String> listInputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguagesWithResponse(listInputs, \"US\").subscribe(response -> {\n+            DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+        List<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+        textAnalyticsAsyncClient.detectBatchLanguages(detectLanguageInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+        List<DetectLanguageInput> detectLanguageInputs1 = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        // Request options: show statistics and model version\n+        final TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setShowStatistics(true);\n+\n+        textAnalyticsAsyncClient.detectBatchLanguagesWithResponse(detectLanguageInputs1, requestOptions)\n+            .subscribe(response -> {\n+                final DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+                System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+                // Batch statistics\n+                final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(),\n+                    batchStatistics.getValidDocumentCount());\n+\n+                for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                    for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                        System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                            detectedLanguage.getName(),\n+                            detectedLanguage.getIso6391Name(),\n+                            detectedLanguage.getScore());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+    }\n+\n+    // Entity\n+    /**\n+     * Code snippet for recognizing entities\n+     */\n+    public void recognizeEntitiesCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+        String inputText = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntities(inputText).subscribe(recognizeEntitiesResult -> {\n+            for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                System.out.printf(\n+                    \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                    entity.getText(),\n+                    entity.getType(),\n+                    entity.getSubtype(),\n+                    entity.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+        String inputText1 = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntitiesWithResponse(inputText1, \"en\")\n+            .subscribe(recognizeEntitiesResult -> {\n+                for (NamedEntity entity : recognizeEntitiesResult.getValue().getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getSubtype(),\n+                        entity.getScore());\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#List\n+        List<String> inputs = Arrays.asList(\n+            \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");\n+\n+        textAnalyticsAsyncClient.recognizeEntities(inputs).subscribe(recognizeEntitiesResults -> {\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getSubtype(),\n+                        entity.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#List-String\n+        List<String> inputs1 = Arrays.asList(\n+            \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");\n+\n+        textAnalyticsAsyncClient.recognizeEntitiesWithResponse(inputs1, \"en\").subscribe(response -> {\n+            DocumentResultCollection<RecognizeEntitiesResult> recognizeEntitiesResults = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getSubtype(),\n+                        entity.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#List-String\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeBatchEntities#List\n+        List<TextDocumentInput> textDocumentInputs = Arrays.asList(\n+            new TextDocumentInput(\"0\", \"I had a wonderful trip to Seattle last week.\"),\n+            new TextDocumentInput(\"1\", \"I work at Microsoft.\"));\n+\n+        textAnalyticsAsyncClient.recognizeBatchEntities(textDocumentInputs).subscribe(recognizeEntitiesResults -> {\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getSubtype(),\n+                        entity.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeBatchEntities#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeBatchEntitiesWithResponse#List-TextAnalyticsRequestOptions\n+        List<TextDocumentInput> textDocumentInputs1 = Arrays.asList(\n+            new TextDocumentInput(\"0\", \"I had a wonderful trip to Seattle last week.\"),\n+            new TextDocumentInput(\"1\", \"I work at Microsoft.\"));\n+\n+        // Request options: show statistics and model version\n+        final TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setShowStatistics(true);\n+\n+        textAnalyticsAsyncClient.recognizeBatchEntitiesWithResponse(textDocumentInputs1, requestOptions)\n+            .subscribe(response -> {\n+                final DocumentResultCollection<RecognizeEntitiesResult> recognizeEntitiesResults = response.getValue();\n+                System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+                // Batch statistics\n+                final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(),\n+                    batchStatistics.getValidDocumentCount());\n+\n+                for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                    for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                        System.out.printf(\n+                            \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                            entity.getText(),\n+                            entity.getType(),\n+                            entity.getSubtype(),\n+                            entity.getScore());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeBatchEntitiesWithResponse#List-TextAnalyticsRequestOptions\n+    }\n+\n+    // Pii Entity\n+    /**\n+     * Code snippet for recognizing entities\n+     */\n+    public void recognizePiiEntitiesCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntities#string\n+        String inputText = \"My SSN is 555-55-5555\";\n+        textAnalyticsAsyncClient.recognizePiiEntities(inputText).subscribe(recognizeEntitiesResult -> {\n+            for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                System.out.printf(\n+                    \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                    entity.getText(),\n+                    entity.getType(),\n+                    entity.getSubtype(),\n+                    entity.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntities#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntitiesWithResponse#string-string\n+        String inputText1 = \"My SSN is 555-55-5555\";\n+        textAnalyticsAsyncClient.recognizePiiEntitiesWithResponse(inputText1, \"en\")\n+            .subscribe(recognizeEntitiesResult -> {\n+                for (NamedEntity entity : recognizeEntitiesResult.getValue().getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getSubtype(),\n+                        entity.getScore());\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntitiesWithResponse#string-string\n+\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntities#list-string\n+        List<String> inputs = Arrays.asList(\n+            \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 357}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NDU0NjIw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#pullrequestreview-339454620", "createdAt": "2020-01-07T19:27:32Z", "commit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOToyNzozMlrOFbDYxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOToyNzozMlrOFbDYxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxMTM2NA==", "bodyText": "let's exclude the data. What do you think?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363911364", "createdAt": "2020-01-07T19:27:32Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "201698c063761925a34241bc9e366b90b20f49a1", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/201698c063761925a34241bc9e366b90b20f49a1", "committedDate": "2020-01-07T21:43:09Z", "message": "update feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77fd4ab0e1f55a250b95e1fb4b62b166ba21778e", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/77fd4ab0e1f55a250b95e1fb4b62b166ba21778e", "committedDate": "2020-01-07T21:37:07Z", "message": "update feedback"}, "afterCommit": {"oid": "201698c063761925a34241bc9e366b90b20f49a1", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/201698c063761925a34241bc9e366b90b20f49a1", "committedDate": "2020-01-07T21:43:09Z", "message": "update feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NTU1ODg1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#pullrequestreview-339555885", "createdAt": "2020-01-07T22:45:39Z", "commit": {"oid": "201698c063761925a34241bc9e366b90b20f49a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMjo0NTo0MFrOFbIHOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMjo0NTo0MFrOFbIHOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4ODc5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Code snippet for detecting Language\n          \n          \n            \n                 * Code snippet for {@link TextAnalyticsAsyncClient #detectLanguage(String)}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363988795", "createdAt": "2020-01-07T22:45:40Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,868 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+\n+    /**\n+     * Code snippet for detecting Language", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "201698c063761925a34241bc9e366b90b20f49a1"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a96ca2e759c87f870c0401bcc10b331cbc7f6cef", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a96ca2e759c87f870c0401bcc10b331cbc7f6cef", "committedDate": "2020-01-08T00:02:38Z", "message": "refactor methods to seperate snippets"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea08ee38bea0988fc822e3833bbcea06ef5c1407", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ea08ee38bea0988fc822e3833bbcea06ef5c1407", "committedDate": "2020-01-08T00:00:45Z", "message": "refactor methods to seperate snippets"}, "afterCommit": {"oid": "a96ca2e759c87f870c0401bcc10b331cbc7f6cef", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a96ca2e759c87f870c0401bcc10b331cbc7f6cef", "committedDate": "2020-01-08T00:02:38Z", "message": "refactor methods to seperate snippets"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NTgzNzY3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#pullrequestreview-339583767", "createdAt": "2020-01-08T00:07:50Z", "commit": {"oid": "a96ca2e759c87f870c0401bcc10b331cbc7f6cef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwMDowNzo1MVrOFbJfhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwMDowNzo1MVrOFbJfhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxMTM5OA==", "bodyText": "should we also remove the Model version log? Let us keep the codesnippet focus on the more valuable infor.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r364011398", "createdAt": "2020-01-08T00:07:51Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +44,1014 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectLanguage(String)}\n+     */\n+    public void detectLanguages() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectLanguageWithResponse(String, String)}\n+     */\n+    public void detectLanguageWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectLanguages(List)}\n+     */\n+    public void detectLanguagesStringList() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> textInputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(textInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectLanguagesWithResponse(List, String)}\n+     */\n+    public void detectLanguagesWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+        final List<String> textInputs1 = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguagesWithResponse(textInputs1, \"US\").subscribe(response -> {\n+            DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectBatchLanguages(List)} )}\n+     */\n+    public void detectLanguagesBatch() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+        List<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"ES\")\n+        );\n+        textAnalyticsAsyncClient.detectBatchLanguages(detectLanguageInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectBatchLanguagesWithResponse(List,\n+     * TextAnalyticsRequestOptions)}\n+     */\n+    public void detectBatchLanguagesWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+        List<DetectLanguageInput> detectLanguageInputs1 = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        // Request options: show statistics and model version\n+        final TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setShowStatistics(true);\n+\n+        textAnalyticsAsyncClient.detectBatchLanguagesWithResponse(detectLanguageInputs1, requestOptions)\n+            .subscribe(response -> {\n+                final DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+                System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+                // Batch statistics\n+                final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(),\n+                    batchStatistics.getValidDocumentCount());\n+\n+                for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                    for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                        System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                            detectedLanguage.getName(),\n+                            detectedLanguage.getIso6391Name(),\n+                            detectedLanguage.getScore());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+    }\n+\n+    // Entity\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeEntities(String)}\n+     */\n+    public void recognizeEntities() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+        String inputText = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntities(inputText).subscribe(recognizeEntitiesResult -> {\n+            for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                System.out.printf(\n+                    \"Recognized Named Entity: %s, Type: %s, Score: %s.%n\",\n+                    entity.getText(),\n+                    entity.getType(),\n+                    entity.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeEntitiesWithResponse(String, String)}\n+     */\n+    public void recognizeEntitiesWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+        String inputText1 = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntitiesWithResponse(inputText1, \"en\")\n+            .subscribe(recognizeEntitiesResult -> {\n+                for (NamedEntity entity : recognizeEntitiesResult.getValue().getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getScore());\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeEntities(List)}\n+     */\n+    public void recognizeEntitiesStringList() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#List\n+        List<String> textInputs = Arrays.asList(\n+            \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");\n+\n+        textAnalyticsAsyncClient.recognizeEntities(textInputs).subscribe(recognizeEntitiesResults -> {\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#List\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeEntitiesWithResponse(List, String)}\n+     */\n+    public void recognizeEntitiesWithResponseStringList() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#List-String\n+        List<String> textInputs1 = Arrays.asList(\n+            \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");\n+\n+        textAnalyticsAsyncClient.recognizeEntitiesWithResponse(textInputs1, \"en\").subscribe(response -> {\n+            DocumentResultCollection<RecognizeEntitiesResult> recognizeEntitiesResults = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#List-String\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeBatchEntities(List)}\n+     */\n+    public void recognizeBatchEntities() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeBatchEntities#List\n+        List<TextDocumentInput> textDocumentInputs = Arrays.asList(\n+            new TextDocumentInput(\"0\", \"I had a wonderful trip to Seattle last week.\"),\n+            new TextDocumentInput(\"1\", \"I work at Microsoft.\"));\n+\n+        textAnalyticsAsyncClient.recognizeBatchEntities(textDocumentInputs).subscribe(recognizeEntitiesResults -> {\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96ca2e759c87f870c0401bcc10b331cbc7f6cef"}, "originalPosition": 307}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b62a177204d968e603be30d88980fdf36fd34a4", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b62a177204d968e603be30d88980fdf36fd34a4", "committedDate": "2020-01-08T00:11:00Z", "message": "remove model versions sysout"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NTk3MTA1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#pullrequestreview-339597105", "createdAt": "2020-01-08T00:57:16Z", "commit": {"oid": "8b62a177204d968e603be30d88980fdf36fd34a4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df5faab563a34fd4be2303ead02f19bd0f5056ce", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/df5faab563a34fd4be2303ead02f19bd0f5056ce", "committedDate": "2020-01-08T01:00:11Z", "message": "pii -> PII"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 683, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}