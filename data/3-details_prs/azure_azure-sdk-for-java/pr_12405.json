{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MjM5ODI2", "number": 12405, "title": "Initial KeyVaultAccessControlClient for Java", "bodyText": "Tests and samples are still pending and the README is a work in progress.\nBased on issue: #8007.", "createdAt": "2020-06-23T00:11:35Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405", "merged": true, "mergeCommit": {"oid": "5eb479879edb8d96570d2265ed11e7cfac5cbe1c"}, "closed": true, "closedAt": "2020-09-04T10:21:19Z", "author": {"login": "vcolin7"}, "timelineItems": {"totalCount": 62, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrlhHWgH2gAyNDM4MjM5ODI2OmY5OWY4MjVhNWI5NjEzYzI1YWZlZDFmNTZkNDhiMjBjMTM0MmVjMGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFhRNJgH2gAyNDM4MjM5ODI2OjQzY2FhNjY0MDY1ZjMyYjlkNzk4NTJmMDZiYTk2NTQzOTAxNGM3ZGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f99f825a5b9613c25afed1f56d48b20c1342ec0a", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f99f825a5b9613c25afed1f56d48b20c1342ec0a", "committedDate": "2020-06-15T19:07:29Z", "message": "Created azure-security-keyvault-administration module including its POM, README and CHANGELOG files."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08f62648e8f9784f1b13b8f48286fa29474209e4", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/08f62648e8f9784f1b13b8f48286fa29474209e4", "committedDate": "2020-06-15T21:16:24Z", "message": "Created AutoRest README and generated artifacts."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c351f1754a61243dcbb52c1f8d744648d2a5f28c", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c351f1754a61243dcbb52c1f8d744648d2a5f28c", "committedDate": "2020-06-15T21:35:57Z", "message": "Added sync methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b627b580140017d8d6d8482e8135b60b0357812", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3b627b580140017d8d6d8482e8135b60b0357812", "committedDate": "2020-06-18T20:50:47Z", "message": "Modified the AutoRest specification to generate async methods only. Renamed the generated AccessControl client and builder."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4917eb7a8f2457a4da3674844fdb02fd1e88a82", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e4917eb7a8f2457a4da3674844fdb02fd1e88a82", "committedDate": "2020-06-18T20:52:36Z", "message": "Created the AccessControl builder and clients (sync + async), public API for getting Role Definitions and some helper classes and resources."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9eebad72ea6bb3b52ad012fbbb554640d2d33cf", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f9eebad72ea6bb3b52ad012fbbb554640d2d33cf", "committedDate": "2020-06-18T22:41:23Z", "message": "Regenerated classes with AutoRest v4 instead of v3."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b69e738858cd091fd1d9f350714fb0bbf1c26435", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b69e738858cd091fd1d9f350714fb0bbf1c26435", "committedDate": "2020-06-18T22:46:41Z", "message": "Added the 'KeyVault' prefix to all access control clients, implementation classes and their builders."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42a7cba66c165f33e89dd45d407579459a155533", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/42a7cba66c165f33e89dd45d407579459a155533", "committedDate": "2020-06-19T05:17:17Z", "message": "Added an API for listing role definitions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c75941c31a888b65a0f2b82898ca5a151fce083", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0c75941c31a888b65a0f2b82898ca5a151fce083", "committedDate": "2020-06-19T05:17:35Z", "message": "Added APIs for creating, getting, deleting and listing role assignments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d003dd7ebcbcdb89714eb98aabe93fd4f82eebc", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9d003dd7ebcbcdb89714eb98aabe93fd4f82eebc", "committedDate": "2020-06-23T00:16:21Z", "message": "Polished README."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b1fd318bbcabf5f898bceae57ec47fe8d7f2d94", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0b1fd318bbcabf5f898bceae57ec47fe8d7f2d94", "committedDate": "2020-06-24T20:58:46Z", "message": "Added the an entry for Key Vault Administration in version_client.txt"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0635bc69c7d4e0075a81b068cdcb45af175f5a0", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b0635bc69c7d4e0075a81b068cdcb45af175f5a0", "committedDate": "2020-06-24T20:38:16Z", "message": "Added the an entry for Key Vault Administration in version_client.txt"}, "afterCommit": {"oid": "0b1fd318bbcabf5f898bceae57ec47fe8d7f2d94", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0b1fd318bbcabf5f898bceae57ec47fe8d7f2d94", "committedDate": "2020-06-24T20:58:46Z", "message": "Added the an entry for Key Vault Administration in version_client.txt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "590045a6fa30346f7fa73562b93fdd956ce2a8e6", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/590045a6fa30346f7fa73562b93fdd956ce2a8e6", "committedDate": "2020-06-24T22:13:41Z", "message": "Renamed to not break the CI build."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d556d46764bce208a8e38a9a3da7009030ac139", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8d556d46764bce208a8e38a9a3da7009030ac139", "committedDate": "2020-06-25T05:39:27Z", "message": "Fixed copy/paste error on autorest.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NzQ2Mzk5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#pullrequestreview-437746399", "createdAt": "2020-06-25T18:19:45Z", "commit": {"oid": "8d556d46764bce208a8e38a9a3da7009030ac139"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODoxOTo0NlrOGpGclg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODoxOTo0NlrOGpGclg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MDQyMg==", "bodyText": "You've got the wrong artifact name (right version thought!). This should be azure-security-keyvault-administration instead of azure-security-keyvault-keys", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r445750422", "createdAt": "2020-06-25T18:19:46Z", "author": {"login": "JimSuplizio"}, "path": "sdk/keyvault/azure-security-keyvault-administration/README.md", "diffHunk": "@@ -0,0 +1,127 @@\n+# Azure Key Vault Administration client library for Java\n+\n+## Getting started\n+### Adding the package to your project\n+Maven dependency for the Azure Key Vault Administration client library. Add it to your project's POM file.\n+\n+[//]: # ({x-version-update-start;com.azure:azure-security-keyvault-keys;current})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d556d46764bce208a8e38a9a3da7009030ac139"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/614cf26a47f15beae2d34d52afc4cd7b0e4759ff", "committedDate": "2020-06-25T18:58:55Z", "message": "Changed README references (keys -> administration)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODg3OTI5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#pullrequestreview-437887929", "createdAt": "2020-06-25T21:57:50Z", "commit": {"oid": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTo1Nzo1MFrOGpNPZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTo1Nzo1MFrOGpNPZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2MTczNA==", "bodyText": "Suggestion: For .net we added a helper extensible enum to make it easier for to choose between the possible valid scopes ( /, /keys, and /keys/<someKeyId>. You may want to implement something for all the string scope parameters.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r445861734", "createdAt": "2020-06-25T21:57:50Z", "author": {"login": "christothes"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+\n+/**\n+ * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment}.\n+ * Additionally, the client supports listing {@link RoleDefinition}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n+public class KeyVaultAccessControlClient {\n+    private final KeyVaultAccessControlAsyncClient asyncClient;\n+\n+    /**\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@code pipeline} to service requests\n+     *\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that the client routes its request through.\n+     */\n+    KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+    }\n+\n+    /**\n+     * Get the vault endpoint URL.\n+     *\n+     * @return The vault endpoint URL.\n+     */\n+    public String getVaultUrl() {\n+        return asyncClient.getVaultUrl();\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODg5Mjky", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#pullrequestreview-437889292", "createdAt": "2020-06-25T22:00:24Z", "commit": {"oid": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjowMDoyNVrOGpNTjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjowMDoyNVrOGpNTjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2Mjc5Nw==", "bodyText": "In discussions with the service team we determined that filter is not really used and we decided to omit it from the public api for now in .NET.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r445862797", "createdAt": "2020-06-25T22:00:25Z", "author": {"login": "christothes"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+\n+/**\n+ * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment}.\n+ * Additionally, the client supports listing {@link RoleDefinition}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n+public class KeyVaultAccessControlClient {\n+    private final KeyVaultAccessControlAsyncClient asyncClient;\n+\n+    /**\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@code pipeline} to service requests\n+     *\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that the client routes its request through.\n+     */\n+    KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+    }\n+\n+    /**\n+     * Get the vault endpoint URL.\n+     *\n+     * @return The vault endpoint URL.\n+     */\n+    public String getVaultUrl() {\n+        return asyncClient.getVaultUrl();\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, Context context) {\n+        return listRoleDefinitions(scope, null, context);\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n+     *                scope as well.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, String filter, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODkwNzI1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#pullrequestreview-437890725", "createdAt": "2020-06-25T22:03:17Z", "commit": {"oid": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjowMzoxN1rOGpNYBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjowMzoxN1rOGpNYBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2Mzk0MQ==", "bodyText": "did you intend to name this method createRoleAssignment?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r445863941", "createdAt": "2020-06-25T22:03:17Z", "author": {"login": "christothes"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+\n+/**\n+ * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment}.\n+ * Additionally, the client supports listing {@link RoleDefinition}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n+public class KeyVaultAccessControlClient {\n+    private final KeyVaultAccessControlAsyncClient asyncClient;\n+\n+    /**\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@code pipeline} to service requests\n+     *\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that the client routes its request through.\n+     */\n+    KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+    }\n+\n+    /**\n+     * Get the vault endpoint URL.\n+     *\n+     * @return The vault endpoint URL.\n+     */\n+    public String getVaultUrl() {\n+        return asyncClient.getVaultUrl();\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, Context context) {\n+        return listRoleDefinitions(scope, null, context);\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n+     *                scope as well.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, String filter, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, filter, context));\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, Context context) {\n+        return listRoleAssignments(scope, null, context);\n+    }\n+\n+    /**\n+     * Get all role assignments that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role assignment.\n+     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n+     *                scope as well.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleAssignment role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, String filter, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, filter, context));\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The scope of the role assignment to create.\n+     * @param name       The name used to create the role assignment.\n+     * @param properties Properties for the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment createRoleAssignment(String scope, String name, RoleAssignmentProperties properties) {\n+        return createKeyWithResponse(scope, name, properties, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The scope of the role assignment to create.\n+     * @param name       The name used to create the role assignment.\n+     * @param properties Properties for the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     */\n+    public Response<RoleAssignment> createKeyWithResponse(String scope, String name,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff"}, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODkzMjAw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#pullrequestreview-437893200", "createdAt": "2020-06-25T22:08:40Z", "commit": {"oid": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjowODo0MFrOGpNf8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjowODo0MFrOGpNf8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NTk3MA==", "bodyText": "The service expects a GUID /  UUID for this arg even though it's a string in the swagger. Perhaps we could type constrain it as a hint? We could also consider creating a method that accepts no arg for name and generates a new UUID on behalf of the developer.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r445865970", "createdAt": "2020-06-25T22:08:40Z", "author": {"login": "christothes"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+\n+/**\n+ * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment}.\n+ * Additionally, the client supports listing {@link RoleDefinition}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n+public class KeyVaultAccessControlClient {\n+    private final KeyVaultAccessControlAsyncClient asyncClient;\n+\n+    /**\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@code pipeline} to service requests\n+     *\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that the client routes its request through.\n+     */\n+    KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+    }\n+\n+    /**\n+     * Get the vault endpoint URL.\n+     *\n+     * @return The vault endpoint URL.\n+     */\n+    public String getVaultUrl() {\n+        return asyncClient.getVaultUrl();\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, Context context) {\n+        return listRoleDefinitions(scope, null, context);\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n+     *                scope as well.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, String filter, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, filter, context));\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, Context context) {\n+        return listRoleAssignments(scope, null, context);\n+    }\n+\n+    /**\n+     * Get all role assignments that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role assignment.\n+     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n+     *                scope as well.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleAssignment role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, String filter, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, filter, context));\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The scope of the role assignment to create.\n+     * @param name       The name used to create the role assignment.\n+     * @param properties Properties for the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment createRoleAssignment(String scope, String name, RoleAssignmentProperties properties) {\n+        return createKeyWithResponse(scope, name, properties, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The scope of the role assignment to create.\n+     * @param name       The name used to create the role assignment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODk0MTA0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#pullrequestreview-437894104", "createdAt": "2020-06-25T22:10:34Z", "commit": {"oid": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjoxMDozNFrOGpNi0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjoxMDozNFrOGpNi0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NjcwNA==", "bodyText": "getRoleAssignment", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r445866704", "createdAt": "2020-06-25T22:10:34Z", "author": {"login": "christothes"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+\n+/**\n+ * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment}.\n+ * Additionally, the client supports listing {@link RoleDefinition}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n+public class KeyVaultAccessControlClient {\n+    private final KeyVaultAccessControlAsyncClient asyncClient;\n+\n+    /**\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@code pipeline} to service requests\n+     *\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that the client routes its request through.\n+     */\n+    KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+    }\n+\n+    /**\n+     * Get the vault endpoint URL.\n+     *\n+     * @return The vault endpoint URL.\n+     */\n+    public String getVaultUrl() {\n+        return asyncClient.getVaultUrl();\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, Context context) {\n+        return listRoleDefinitions(scope, null, context);\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n+     *                scope as well.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, String filter, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, filter, context));\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, Context context) {\n+        return listRoleAssignments(scope, null, context);\n+    }\n+\n+    /**\n+     * Get all role assignments that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role assignment.\n+     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n+     *                scope as well.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleAssignment role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, String filter, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, filter, context));\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The scope of the role assignment to create.\n+     * @param name       The name used to create the role assignment.\n+     * @param properties Properties for the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment createRoleAssignment(String scope, String name, RoleAssignmentProperties properties) {\n+        return createKeyWithResponse(scope, name, properties, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The scope of the role assignment to create.\n+     * @param name       The name used to create the role assignment.\n+     * @param properties Properties for the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     */\n+    public Response<RoleAssignment> createKeyWithResponse(String scope, String name,\n+                                                          RoleAssignmentProperties properties, Context context) {\n+        return asyncClient.createRoleAssignmentWithResponse(scope, name, properties, context).block();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope The scope of the role assignment to create.\n+     * @param name  The name used to create the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment getRoleAssignment(String scope, String name) {\n+        return getKeyWithResponse(scope, name, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope The scope of the role assignment to create.\n+     * @param name  The name used to create the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     */\n+    public Response<RoleAssignment> getKeyWithResponse(String scope, String name, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff"}, "originalPosition": 150}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODk0Mzcy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#pullrequestreview-437894372", "createdAt": "2020-06-25T22:11:05Z", "commit": {"oid": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjoxMTowNVrOGpNjvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjoxMTowNVrOGpNjvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2Njk0MQ==", "bodyText": "deleteRoleAssignment", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r445866941", "createdAt": "2020-06-25T22:11:05Z", "author": {"login": "christothes"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+\n+/**\n+ * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment}.\n+ * Additionally, the client supports listing {@link RoleDefinition}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n+public class KeyVaultAccessControlClient {\n+    private final KeyVaultAccessControlAsyncClient asyncClient;\n+\n+    /**\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@code pipeline} to service requests\n+     *\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that the client routes its request through.\n+     */\n+    KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+    }\n+\n+    /**\n+     * Get the vault endpoint URL.\n+     *\n+     * @return The vault endpoint URL.\n+     */\n+    public String getVaultUrl() {\n+        return asyncClient.getVaultUrl();\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, Context context) {\n+        return listRoleDefinitions(scope, null, context);\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n+     *                scope as well.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, String filter, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, filter, context));\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, Context context) {\n+        return listRoleAssignments(scope, null, context);\n+    }\n+\n+    /**\n+     * Get all role assignments that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role assignment.\n+     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n+     *                scope as well.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleAssignment role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, String filter, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, filter, context));\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The scope of the role assignment to create.\n+     * @param name       The name used to create the role assignment.\n+     * @param properties Properties for the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment createRoleAssignment(String scope, String name, RoleAssignmentProperties properties) {\n+        return createKeyWithResponse(scope, name, properties, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The scope of the role assignment to create.\n+     * @param name       The name used to create the role assignment.\n+     * @param properties Properties for the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     */\n+    public Response<RoleAssignment> createKeyWithResponse(String scope, String name,\n+                                                          RoleAssignmentProperties properties, Context context) {\n+        return asyncClient.createRoleAssignmentWithResponse(scope, name, properties, context).block();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope The scope of the role assignment to create.\n+     * @param name  The name used to create the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment getRoleAssignment(String scope, String name) {\n+        return getKeyWithResponse(scope, name, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope The scope of the role assignment to create.\n+     * @param name  The name used to create the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     */\n+    public Response<RoleAssignment> getKeyWithResponse(String scope, String name, Context context) {\n+        return asyncClient.getRoleAssignmentWithResponse(scope, name, context).block();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope The scope of the role assignment to create.\n+     * @param name  The name used to create the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment deleteRoleAssignment(String scope, String name) {\n+        return deleteKeyWithResponse(scope, name, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope The scope of the role assignment to create.\n+     * @param name  The name used to create the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     */\n+    public Response<RoleAssignment> deleteKeyWithResponse(String scope, String name, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff"}, "originalPosition": 177}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6273df0f12bc99fbc0b827cffba0b3f3237b8b93", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6273df0f12bc99fbc0b827cffba0b3f3237b8b93", "committedDate": "2020-06-27T04:26:23Z", "message": "Addressed PR comments. Added a new ExpandableStringEnum: RoleScope. Corrected some of the Javadoc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d69de48129a53cfa92c7a38f05bf089e5ef231c3", "committedDate": "2020-06-28T01:53:40Z", "message": "Merge branch 'master' into users/vicolina/keyvault-rbac"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTQ0NTU3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#pullrequestreview-439544557", "createdAt": "2020-06-29T22:27:04Z", "commit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "state": "COMMENTED", "comments": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjoyNzowNFrOGqkpQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDowNDowMFrOGqmuNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5Mzc2MQ==", "bodyText": "Maybe this is boilerplate, but there will be multiple \"clients\" so maybe just drop \"client\" from the H1?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447293761", "createdAt": "2020-06-29T22:27:04Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/README.md", "diffHunk": "@@ -0,0 +1,127 @@\n+# Azure Key Vault Administration client library for Java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5ODQzMw==", "bodyText": "We use RoleAssignmentScope in .NET. I think it's more relatable to RoleAssignment that way. We also call this parameter roleScope, but I think scope is succinct. FYI @christothes", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447298433", "createdAt": "2020-06-29T22:36:37Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+import com.azure.security.keyvault.administration.models.RoleScope;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n+\n+/**\n+ * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment role\n+ * assignments}. Additionally, the client supports listing {@link RoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n+public class KeyVaultAccessControlClient {\n+    private final KeyVaultAccessControlAsyncClient asyncClient;\n+\n+    /**\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@link com.azure.core.http.HttpPipeline pipeline}\n+     * to service requests.\n+     *\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that this client routes its request through.\n+     */\n+    KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return asyncClient.getVaultUrl();\n+    }\n+\n+    /**\n+     * Get all {@link RoleDefinition role definitions} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n+     *\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleDefinition role definitions}.\n+     * @param context Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} containing the {@link RoleDefinition role definitions} for the given\n+     * {@link RoleScope scope}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(RoleScope scope, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5OTU4Mw==", "bodyText": "In .NET, we actually auto-generate the name and, thus, have to put it after properties since it's an optional parameter. Could you do that here as well? It's probably rare people will want to pass in their own UUID and could just generate instead. Perhaps that needs to be through overloads for Java, but would simplify the normal call case of just scope and (or roleScope) and properties.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447299583", "createdAt": "2020-06-29T22:39:12Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+import com.azure.security.keyvault.administration.models.RoleScope;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n+\n+/**\n+ * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment role\n+ * assignments}. Additionally, the client supports listing {@link RoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n+public class KeyVaultAccessControlClient {\n+    private final KeyVaultAccessControlAsyncClient asyncClient;\n+\n+    /**\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@link com.azure.core.http.HttpPipeline pipeline}\n+     * to service requests.\n+     *\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that this client routes its request through.\n+     */\n+    KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return asyncClient.getVaultUrl();\n+    }\n+\n+    /**\n+     * Get all {@link RoleDefinition role definitions} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n+     *\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleDefinition role definitions}.\n+     * @param context Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} containing the {@link RoleDefinition role definitions} for the given\n+     * {@link RoleScope scope}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, context));\n+    }\n+\n+    /**\n+     * Get all {@link RoleAssignment role assignments} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n+     *\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} containing the {@link RoleAssignment role assignments} for the given\n+     * {@link RoleScope scope}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, context));\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The {@link RoleScope scope} of the {@link RoleAssignment} to create.\n+     * @param name       The name used to create the {@link RoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link RoleAssignment}.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the request is rejected by the server.\n+     * @throws NullPointerException   if the {@link RoleScope scope}, {@link UUID name} or\n+     * {@link RoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment createRoleAssignment(RoleScope scope, UUID name,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwMDM4Nw==", "bodyText": "We called name instead roleAssignmentName, but I'd be in favor of shortening these since parameters normally don't have to be so specific when it's obvious. That is the case before with Key Vault libraries. We can always settle on parameter names later, too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447300387", "createdAt": "2020-06-29T22:41:36Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+import com.azure.security.keyvault.administration.models.RoleScope;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n+\n+/**\n+ * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment role\n+ * assignments}. Additionally, the client supports listing {@link RoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n+public class KeyVaultAccessControlClient {\n+    private final KeyVaultAccessControlAsyncClient asyncClient;\n+\n+    /**\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@link com.azure.core.http.HttpPipeline pipeline}\n+     * to service requests.\n+     *\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that this client routes its request through.\n+     */\n+    KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return asyncClient.getVaultUrl();\n+    }\n+\n+    /**\n+     * Get all {@link RoleDefinition role definitions} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n+     *\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleDefinition role definitions}.\n+     * @param context Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} containing the {@link RoleDefinition role definitions} for the given\n+     * {@link RoleScope scope}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, context));\n+    }\n+\n+    /**\n+     * Get all {@link RoleAssignment role assignments} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n+     *\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} containing the {@link RoleAssignment role assignments} for the given\n+     * {@link RoleScope scope}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, context));\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The {@link RoleScope scope} of the {@link RoleAssignment} to create.\n+     * @param name       The name used to create the {@link RoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link RoleAssignment}.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the request is rejected by the server.\n+     * @throws NullPointerException   if the {@link RoleScope scope}, {@link UUID name} or\n+     * {@link RoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment createRoleAssignment(RoleScope scope, UUID name,\n+                                               RoleAssignmentProperties properties) {\n+        return createRoleAssignmentWithResponse(scope, name, properties, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The {@link RoleScope scope} of the {@link RoleAssignment} to create.\n+     * @param name       The name used to create the {@link RoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link RoleAssignment}.\n+     * @param context    Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} contains the created\n+     * {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the request is rejected by the server.\n+     * @throws NullPointerException   if the {@link RoleScope scope}, {@link UUID name} or\n+     * {@link RoleAssignmentProperties properties} are {@code null}.\n+     */\n+    public Response<RoleAssignment> createRoleAssignmentWithResponse(RoleScope scope, UUID name,\n+                                                                     RoleAssignmentProperties properties,\n+                                                                     Context context) {\n+        return asyncClient.createRoleAssignmentWithResponse(scope, name, properties, context).block();\n+    }\n+\n+    /**\n+     * Gets a {@link RoleAssignment}.\n+     *\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment getRoleAssignment(RoleScope scope, String name) {\n+        return getRoleAssignmentWithResponse(scope, name, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a {@link RoleAssignment}.\n+     *\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n+     */\n+    public Response<RoleAssignment> getRoleAssignmentWithResponse(RoleScope scope, String name, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwNTE5OQ==", "bodyText": "I reviewed the sync client first, so my comments there would apply here (and on all other relevant methods).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447305199", "createdAt": "2020-06-29T22:55:41Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,475 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.RoleScope;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URL;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment role\n+ * assignments}. Additionally, the client supports listing {@link RoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link RoleDefinition role definitions} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n+     *\n+     * @param scope The {@link RoleScope scope} of the {@link RoleDefinition role definitions}.\n+     * @return A {@link PagedFlux} containing the {@link RoleDefinition role definitions} for the given\n+     * {@link RoleScope scope}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public PagedFlux<RoleDefinition> listRoleDefinitions(RoleScope scope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxMTkyNw==", "bodyText": "Nit: wouldn't it be safer to check that it's not equal to \"https\"? No other protocol would/should work, so maybe it really doesn't matter in the grand scope of things but it fits the error message better.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447311927", "createdAt": "2020-06-29T23:16:06Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/KeyVaultCredentialPolicy.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.security.keyvault.administration.implementation;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * A policy that authenticates requests with Azure Key Vault service. The content added by this policy\n+ * is leveraged in {@link TokenCredential} to get and set the correct \"Authorization\" header value.\n+ *\n+ * @see TokenCredential\n+ */\n+public final class KeyVaultCredentialPolicy implements HttpPipelinePolicy {\n+    private final ClientLogger logger = new ClientLogger(KeyVaultCredentialPolicy.class);\n+    private static final String WWW_AUTHENTICATE = \"WWW-Authenticate\";\n+    private static final String BEARER_TOKEN_PREFIX = \"Bearer \";\n+    private static final String AUTHORIZATION = \"Authorization\";\n+    private final ScopeTokenCache cache;\n+\n+    /**\n+     * Creates KeyVaultCredentialPolicy.\n+     *\n+     * @param credential the token credential to authenticate the request\n+     */\n+    public KeyVaultCredentialPolicy(TokenCredential credential) {\n+        Objects.requireNonNull(credential);\n+        this.cache = new ScopeTokenCache((request) -> credential.getToken(request));\n+    }\n+\n+    /**\n+     * Adds the required header to authenticate a request to Azure Key Vault service.\n+     *\n+     * @param context The request context\n+     * @param next The next HTTP pipeline policy to process the {@code context's} request after this policy completes.\n+     * @return A {@link Mono} representing the HTTP response that will arrive asynchronously.\n+     */\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        if (\"http\".equals(context.getHttpRequest().getUrl().getProtocol())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxOTk2MA==", "bodyText": "Is it common to expose this? In .NET, we expose the members in a RequestFailedException? If so, please ignore.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447319960", "createdAt": "2020-06-29T23:40:13Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/Error.java", "diffHunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Immutable;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The Error model. */\n+@Immutable\n+public final class Error {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMTA2Nw==", "bodyText": "Too generic. Use KeyVaultPermission.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447321067", "createdAt": "2020-06-29T23:43:56Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/Permission.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+\n+/** The Permission model. */\n+@Fluent\n+public final class Permission {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMTI4NA==", "bodyText": "These properties come from the service and should all be read-only.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447321284", "createdAt": "2020-06-29T23:44:43Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/Permission.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+\n+/** The Permission model. */\n+@Fluent\n+public final class Permission {\n+    /*\n+     * Allowed actions.\n+     */\n+    @JsonProperty(value = \"actions\")\n+    private List<String> actions;\n+\n+    /*\n+     * Denied actions.\n+     */\n+    @JsonProperty(value = \"notActions\")\n+    private List<String> notActions;\n+\n+    /*\n+     * Allowed Data actions.\n+     */\n+    @JsonProperty(value = \"dataActions\")\n+    private List<String> dataActions;\n+\n+    /*\n+     * Denied Data actions.\n+     */\n+    @JsonProperty(value = \"notDataActions\")\n+    private List<String> notDataActions;\n+\n+    /**\n+     * Get the actions property: Allowed actions.\n+     *\n+     * @return the actions value.\n+     */\n+    public List<String> getActions() {\n+        return this.actions;\n+    }\n+\n+    /**\n+     * Set the actions property: Allowed actions.\n+     *\n+     * @param actions the actions value to set.\n+     * @return the Permission object itself.\n+     */\n+    public Permission setActions(List<String> actions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMzc3Nw==", "bodyText": "Why publicly settable? What happens if the user passes null. IIRC, this is required - it's read-only in .NET, but we also provide a default instance of RoleAssignmentPropertiesWithScope.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447323777", "createdAt": "2020-06-29T23:51:52Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignment.java", "diffHunk": "@@ -0,0 +1,83 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The RoleAssignment model. */\n+@Fluent\n+public final class RoleAssignment {\n+    /*\n+     * The role assignment ID.\n+     */\n+    @JsonProperty(value = \"id\", access = JsonProperty.Access.WRITE_ONLY)\n+    private String id;\n+\n+    /*\n+     * The role assignment name.\n+     */\n+    @JsonProperty(value = \"name\", access = JsonProperty.Access.WRITE_ONLY)\n+    private String name;\n+\n+    /*\n+     * The role assignment type.\n+     */\n+    @JsonProperty(value = \"type\", access = JsonProperty.Access.WRITE_ONLY)\n+    private String type;\n+\n+    /*\n+     * Role assignment properties.\n+     */\n+    @JsonProperty(value = \"properties\")\n+    private RoleAssignmentPropertiesWithScope properties;\n+\n+    /**\n+     * Get the id property: The role assignment ID.\n+     *\n+     * @return the id value.\n+     */\n+    public String getId() {\n+        return this.id;\n+    }\n+\n+    /**\n+     * Get the name property: The role assignment name.\n+     *\n+     * @return the name value.\n+     */\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    /**\n+     * Get the type property: The role assignment type.\n+     *\n+     * @return the type value.\n+     */\n+    public String getType() {\n+        return this.type;\n+    }\n+\n+    /**\n+     * Get the properties property: Role assignment properties.\n+     *\n+     * @return the properties value.\n+     */\n+    public RoleAssignmentPropertiesWithScope getProperties() {\n+        return this.properties;\n+    }\n+\n+    /**\n+     * Set the properties property: Role assignment properties.\n+     *\n+     * @param properties the properties value to set.\n+     * @return the RoleAssignment object itself.\n+     */\n+    public RoleAssignment setProperties(RoleAssignmentPropertiesWithScope properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMzk1MQ==", "bodyText": "This shouldn't be public.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447323951", "createdAt": "2020-06-29T23:52:24Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentCreateParameters.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The RoleAssignmentCreateParameters model. */\n+@Fluent\n+public final class RoleAssignmentCreateParameters {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNDMzOA==", "bodyText": "This shouldn't be public. For Key Vault, we're not exposing this at this time since it serves no practical value. If we later expose similar APIs for ARM RBAC and other data-plane RBAC, we will within that implementation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447324338", "createdAt": "2020-06-29T23:53:48Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentFilter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The RoleAssignmentFilter model. */\n+@Fluent\n+public final class RoleAssignmentFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNDU4MA==", "bodyText": "This shouldn't be public. Just return its this.value from the method that would otherwise deserialize this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447324580", "createdAt": "2020-06-29T23:54:34Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentListResult.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+\n+/** The RoleAssignmentListResult model. */\n+@Fluent\n+public final class RoleAssignmentListResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNTQwNw==", "bodyText": "I just noticed this, but this should be in ...administration.models, and classes in ...administration.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447325407", "createdAt": "2020-06-29T23:57:16Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentProperties.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNTc1MA==", "bodyText": "As both properties in this model are required, they should be in the constructor.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447325750", "createdAt": "2020-06-29T23:57:50Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentProperties.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The RoleAssignmentProperties model. */\n+@Fluent\n+public final class RoleAssignmentProperties {\n+    /*\n+     * The role definition ID used in the role assignment.\n+     */\n+    @JsonProperty(value = \"roleDefinitionId\", required = true)\n+    private String roleDefinitionId;\n+\n+    /*\n+     * The principal ID assigned to the role. This maps to the ID inside the\n+     * Active Directory. It can point to a user, service principal, or security\n+     * group.\n+     */\n+    @JsonProperty(value = \"principalId\", required = true)\n+    private String principalId;\n+\n+    /**\n+     * Get the roleDefinitionId property: The role definition ID used in the role assignment.\n+     *\n+     * @return the roleDefinitionId value.\n+     */\n+    public String getRoleDefinitionId() {\n+        return this.roleDefinitionId;\n+    }\n+\n+    /**\n+     * Set the roleDefinitionId property: The role definition ID used in the role assignment.\n+     *\n+     * @param roleDefinitionId the roleDefinitionId value to set.\n+     * @return the RoleAssignmentProperties object itself.\n+     */\n+    public RoleAssignmentProperties setRoleDefinitionId(String roleDefinitionId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNTk2Mg==", "bodyText": "All 3 properties are required and should be settable in the constructor only.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447325962", "createdAt": "2020-06-29T23:58:34Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentPropertiesWithScope.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The RoleAssignmentPropertiesWithScope model. */\n+@Fluent\n+public final class RoleAssignmentPropertiesWithScope {\n+    /*\n+     * The role assignment scope.\n+     */\n+    @JsonProperty(value = \"scope\")\n+    private String scope;\n+\n+    /*\n+     * The role definition ID.\n+     */\n+    @JsonProperty(value = \"roleDefinitionId\")\n+    private String roleDefinitionId;\n+\n+    /*\n+     * The principal ID.\n+     */\n+    @JsonProperty(value = \"principalId\")\n+    private String principalId;\n+\n+    /**\n+     * Get the scope property: The role assignment scope.\n+     *\n+     * @return the scope value.\n+     */\n+    public String getScope() {\n+        return this.scope;\n+    }\n+\n+    /**\n+     * Set the scope property: The role assignment scope.\n+     *\n+     * @param scope the scope value to set.\n+     * @return the RoleAssignmentPropertiesWithScope object itself.\n+     */\n+    public RoleAssignmentPropertiesWithScope setScope(String scope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNjI2MA==", "bodyText": "This model should be read-only. It cannot be modified or created by the user for Key Vault.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447326260", "createdAt": "2020-06-29T23:59:28Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleDefinition.java", "diffHunk": "@@ -0,0 +1,190 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.annotation.JsonFlatten;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+\n+/** The RoleDefinition model. */\n+@JsonFlatten\n+@Fluent\n+public class RoleDefinition {\n+    /*\n+     * The role definition ID.\n+     */\n+    @JsonProperty(value = \"id\", access = JsonProperty.Access.WRITE_ONLY)\n+    private String id;\n+\n+    /*\n+     * The role definition name.\n+     */\n+    @JsonProperty(value = \"name\", access = JsonProperty.Access.WRITE_ONLY)\n+    private String name;\n+\n+    /*\n+     * The role definition type.\n+     */\n+    @JsonProperty(value = \"type\", access = JsonProperty.Access.WRITE_ONLY)\n+    private String type;\n+\n+    /*\n+     * The role name.\n+     */\n+    @JsonProperty(value = \"properties.roleName\")\n+    private String roleName;\n+\n+    /*\n+     * The role definition description.\n+     */\n+    @JsonProperty(value = \"properties.description\")\n+    private String description;\n+\n+    /*\n+     * The role type.\n+     */\n+    @JsonProperty(value = \"properties.type\")\n+    private String roleType;\n+\n+    /*\n+     * Role definition permissions.\n+     */\n+    @JsonProperty(value = \"properties.permissions\")\n+    private List<Permission> permissions;\n+\n+    /*\n+     * Role definition assignable scopes.\n+     */\n+    @JsonProperty(value = \"properties.assignableScopes\")\n+    private List<String> assignableScopes;\n+\n+    /**\n+     * Get the id property: The role definition ID.\n+     *\n+     * @return the id value.\n+     */\n+    public String getId() {\n+        return this.id;\n+    }\n+\n+    /**\n+     * Get the name property: The role definition name.\n+     *\n+     * @return the name value.\n+     */\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    /**\n+     * Get the type property: The role definition type.\n+     *\n+     * @return the type value.\n+     */\n+    public String getType() {\n+        return this.type;\n+    }\n+\n+    /**\n+     * Get the roleName property: The role name.\n+     *\n+     * @return the roleName value.\n+     */\n+    public String getRoleName() {\n+        return this.roleName;\n+    }\n+\n+    /**\n+     * Set the roleName property: The role name.\n+     *\n+     * @param roleName the roleName value to set.\n+     * @return the RoleDefinition object itself.\n+     */\n+    public RoleDefinition setRoleName(String roleName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNjQ1OQ==", "bodyText": "This should not be public. See my comments on the other \"*Filter\" class for details.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447326459", "createdAt": "2020-06-30T00:00:00Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleDefinitionFilter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The RoleDefinitionFilter model. */\n+@Fluent\n+public final class RoleDefinitionFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNjU4NA==", "bodyText": "This should not be public. See my comments on the other \"*ListResult\" class for details.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447326584", "createdAt": "2020-06-30T00:00:22Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleDefinitionListResult.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+\n+/** The RoleDefinitionListResult model. */\n+@Fluent\n+public final class RoleDefinitionListResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNjc3NA==", "bodyText": "There shouldn't be an \"implementation\" in there, should there?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447326774", "createdAt": "2020-06-30T00:00:50Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/package-info.java", "diffHunk": "@@ -0,0 +1,9 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+/**\n+ * Package containing the data models for KeyVaultAccessControlClient. The key vault client performs cryptographic key\n+ * operations and vault operations against the Key Vault service.\n+ */\n+package com.azure.security.keyvault.administration.implementation.models;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNjgzNw==", "bodyText": "There shouldn't be an \"implementation\" in there, should there?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447326837", "createdAt": "2020-06-30T00:01:01Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/package-info.java", "diffHunk": "@@ -0,0 +1,9 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+/**\n+ * Package containing the implementations and inner classes for KeyVaultAccessControlClient. The key vault client\n+ * performs cryptographic key operations and vault operations against the Key Vault service.\n+ */\n+package com.azure.security.keyvault.administration.implementation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNzA1NA==", "bodyText": "Should be RoleAssignmentScope.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447327054", "createdAt": "2020-06-30T00:01:34Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/models/RoleScope.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.azure.security.keyvault.administration.models;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+\n+import java.net.URI;\n+\n+public final class RoleScope extends ExpandableStringEnum<RoleScope> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNzc5OQ==", "bodyText": "How will you handle other clients?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447327799", "createdAt": "2020-06-30T00:04:00Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/swagger/autorest.md", "diffHunk": "@@ -0,0 +1,52 @@\n+# Azure Key Vault Administration for Java\n+> see https://aka.ms/autorest\n+\n+### Setup\n+Increase max memory if you're using Autorest older than 3. Set the environment variable `NODE_OPTIONS` to `--max-old-space-size=8192`.\n+\n+This is the AutoRest configuration file for KeyVaultAccessControlClient.\n+---\n+## Getting Started \n+To build the SDK for KeyVaultAccessControlClient, simply [Install AutoRest](https://aka.ms/autorest/install) and in this folder, run:\n+\n+> `autorest`\n+\n+To see additional help and options, run:\n+\n+> `autorest --help`\n+\n+### Generation\n+There is one swagger for KeyVault Administration: rbac. It uses the following tag: `--tag=rbac-preview`.\n+\n+```ps\n+cd <swagger-folder>\n+autorest --use=@microsoft.azure/autorest.java@4.0.0 --tag=${package} \n+```\n+\n+e.g.\n+```ps\n+cd <swagger-folder>\n+autorest --use=@microsoft.azure/autorest.java@4.0.0 --tag=rbac-preview  \n+```\n+\n+## Code generation settings\n+``` yaml\n+java: true\n+output-folder: ../\n+namespace: com.azure.security.keyvault.administration\n+license-header: MICROSOFT_MIT_SMALL\n+models-subpackage: implementation.models\n+custom-types-subpackage: models\n+generate-client-as-impl: true\n+sync-methods: none\n+add-context-parameter: true\n+context-client-method-parameter: true\n+```\n+\n+### Tag: rbac-preview\n+These settings apply only when `--tag=rbac-preview` is specified on the command line.\n+\n+``` yaml $(tag) == 'rbac-preview'\n+input-file: https://github.com/Azure/azure-rest-api-specs/blob/master/specification/keyvault/data-plane/Microsoft.KeyVault/preview/7.2-preview/rbac.json\n+title: KeyVaultAccessControlClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTgxNDU1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#pullrequestreview-439581455", "createdAt": "2020-06-30T00:05:20Z", "commit": {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d966d810af554de953ff29560ea477421f9798c4", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d966d810af554de953ff29560ea477421f9798c4", "committedDate": "2020-08-27T10:02:54Z", "message": "Merge remote-tracking branch 'upstream/master' into users/vicolina/keyvault-rbac\n\n# Conflicts:\n#\teng/versioning/version_client.txt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "346b768f18d9d887ef686c78cc7f0dcdb24cd944", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/346b768f18d9d887ef686c78cc7f0dcdb24cd944", "committedDate": "2020-08-27T10:05:08Z", "message": "Addressed more PR feedback."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46d2f80ccebc9efa94995441b52de6600dbd34a0", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/46d2f80ccebc9efa94995441b52de6600dbd34a0", "committedDate": "2020-08-27T10:03:45Z", "message": "Addressed more PR feedback."}, "afterCommit": {"oid": "346b768f18d9d887ef686c78cc7f0dcdb24cd944", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/346b768f18d9d887ef686c78cc7f0dcdb24cd944", "committedDate": "2020-08-27T10:05:08Z", "message": "Addressed more PR feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32084ad544aeff4626ce8a62a157334b6db7897d", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/32084ad544aeff4626ce8a62a157334b6db7897d", "committedDate": "2020-08-27T10:06:08Z", "message": "Added the new Key Vault Administration library to eng/jacoco-test-coverage/pom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14266a098b6b7cf6684ed8dd7fa9f70ea4764f87", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/14266a098b6b7cf6684ed8dd7fa9f70ea4764f87", "committedDate": "2020-08-27T10:25:28Z", "message": "Re-generated code from the Swagger specification."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2ODg0MzAw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#pullrequestreview-476884300", "createdAt": "2020-08-27T16:22:07Z", "commit": {"oid": "32084ad544aeff4626ce8a62a157334b6db7897d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjoyMjowN1rOHIX46g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjoyMjowN1rOHIX46g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU0MjA1OA==", "bodyText": "Any reason why the client is beginning with version 4.1.0 instead of 4.0.0? There's never been a clear champion scenario for how to handle adding a new module into a group later and determining which base version to use. In Storage we being with 12.0.0 instead of trying to match on 12.x.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r478542058", "createdAt": "2020-08-27T16:22:07Z", "author": {"login": "alzimmermsft"}, "path": "eng/versioning/version_client.txt", "diffHunk": "@@ -35,6 +35,7 @@ com.azure:azure-messaging-eventhubs;5.1.2;5.2.0-beta.3\n com.azure:azure-messaging-eventhubs-checkpointstore-blob;1.1.2;1.2.0-beta.3\n com.azure:azure-messaging-servicebus;7.0.0-beta.5;7.0.0-beta.6\n com.azure:azure-search-documents;11.0.0;11.1.0-beta.2\n+com.azure:azure-security-keyvault-administration;4.1.0-beta.1;4.1.0-beta.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32084ad544aeff4626ce8a62a157334b6db7897d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2ODg1NDYy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#pullrequestreview-476885462", "createdAt": "2020-08-27T16:23:34Z", "commit": {"oid": "32084ad544aeff4626ce8a62a157334b6db7897d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjoyMzozNFrOHIX8Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjoyNDoxNVrOHIX96w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU0MjkzNQ==", "bodyText": "We should be looking to remove these rerun on failing configurations. This may mask actual code issues, it is better to investigate flaky tests than to mask them.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r478542935", "createdAt": "2020-08-27T16:23:34Z", "author": {"login": "alzimmermsft"}, "path": "sdk/keyvault/azure-security-keyvault-administration/pom.xml", "diffHunk": "@@ -0,0 +1,109 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+  </parent>\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>com.azure</groupId>\n+  <artifactId>azure-security-keyvault-administration</artifactId>\n+  <version>4.1.0-beta.1</version> <!-- {x-version-update;com.azure:azure-security-keyvault-administration;current} -->\n+\n+  <name>Microsoft Azure client library for KeyVault Administration</name>\n+  <description>This module contains client library for Microsoft Azure KeyVault Administration.</description>\n+  <url>https://github.com/Azure/azure-sdk-for-java</url>\n+\n+  <distributionManagement>\n+    <site>\n+      <id>azure-java-build-docs</id>\n+      <url>${site.url}/site/${project.artifactId}</url>\n+    </site>\n+  </distributionManagement>\n+\n+  <scm>\n+    <url>scm:git:https://github.com/Azure/azure-sdk-for-java</url>\n+    <connection>scm:git:git@github.com:Azure/azure-sdk-for-java.git</connection>\n+    <tag>HEAD</tag>\n+  </scm>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-surefire-plugin;external_dependency} -->\n+        <configuration>\n+          <rerunFailingTestsCount>3</rerunFailingTestsCount>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32084ad544aeff4626ce8a62a157334b6db7897d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU0MzMzOQ==", "bodyText": "Will need to update dependency versions as they are very out of date.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r478543339", "createdAt": "2020-08-27T16:24:15Z", "author": {"login": "alzimmermsft"}, "path": "sdk/keyvault/azure-security-keyvault-administration/pom.xml", "diffHunk": "@@ -0,0 +1,109 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+  </parent>\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>com.azure</groupId>\n+  <artifactId>azure-security-keyvault-administration</artifactId>\n+  <version>4.1.0-beta.1</version> <!-- {x-version-update;com.azure:azure-security-keyvault-administration;current} -->\n+\n+  <name>Microsoft Azure client library for KeyVault Administration</name>\n+  <description>This module contains client library for Microsoft Azure KeyVault Administration.</description>\n+  <url>https://github.com/Azure/azure-sdk-for-java</url>\n+\n+  <distributionManagement>\n+    <site>\n+      <id>azure-java-build-docs</id>\n+      <url>${site.url}/site/${project.artifactId}</url>\n+    </site>\n+  </distributionManagement>\n+\n+  <scm>\n+    <url>scm:git:https://github.com/Azure/azure-sdk-for-java</url>\n+    <connection>scm:git:git@github.com:Azure/azure-sdk-for-java.git</connection>\n+    <tag>HEAD</tag>\n+  </scm>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-surefire-plugin;external_dependency} -->\n+        <configuration>\n+          <rerunFailingTestsCount>3</rerunFailingTestsCount>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core</artifactId>\n+      <version>1.5.1</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32084ad544aeff4626ce8a62a157334b6db7897d"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "563f00de09a4888872e3b0b6341b8bc48ae0f850", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/563f00de09a4888872e3b0b6341b8bc48ae0f850", "committedDate": "2020-08-28T19:48:21Z", "message": "Renamed many of the implementation models."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6915b21182175696faea7a6dd7238df325f59c7", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c6915b21182175696faea7a6dd7238df325f59c7", "committedDate": "2020-08-28T20:01:25Z", "message": "Added additional null checks for members in public methods that accept KeyVaultRoleAssignmentProperties."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37b6be0fd19fb9de56c326d93e69d22fa7d68b23", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/37b6be0fd19fb9de56c326d93e69d22fa7d68b23", "committedDate": "2020-08-28T21:19:56Z", "message": "Added a module-info file."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea4a103e1fa2e378b72772b1cad8512c8ec61b75", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ea4a103e1fa2e378b72772b1cad8512c8ec61b75", "committedDate": "2020-08-29T00:20:48Z", "message": "Made small formatting corrections."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19ed63bca34c36ec73bd3d846e185d7af49810ba", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/19ed63bca34c36ec73bd3d846e185d7af49810ba", "committedDate": "2020-08-29T00:34:23Z", "message": "Removed an entry from module-info.java. Modified how KeyVaultAccessControlAsyncClient get error messages for parameter validation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e5389269da35262ed36b43a7dcf9418b4741a4f", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5e5389269da35262ed36b43a7dcf9418b4741a4f", "committedDate": "2020-08-29T00:48:29Z", "message": "Added missing package-info.java files."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e57a0fe827d2a0ba2978779adade3842d8807bb9", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e57a0fe827d2a0ba2978779adade3842d8807bb9", "committedDate": "2020-08-29T01:25:17Z", "message": "Corrected errors highlighted by APIView."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "427ffdcac08e3ac2ba72c7abac3f6305fa9ff6a3", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/427ffdcac08e3ac2ba72c7abac3f6305fa9ff6a3", "committedDate": "2020-09-01T03:34:26Z", "message": "Reverted implementation classes to their original names and hid them from public API signatures. Added convenience layer models to be exposed as public API."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d75b43e84ca148f8c82948d758cfdbbdf405bd3", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0d75b43e84ca148f8c82948d758cfdbbdf405bd3", "committedDate": "2020-09-01T03:41:11Z", "message": "Renamed KeyVaultRoleScope to KeyVaultRoleAssignmentScope."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e42b1a82d904df89f45a3fba62584025c16b54a", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0e42b1a82d904df89f45a3fba62584025c16b54a", "committedDate": "2020-09-01T18:30:22Z", "message": "Fixed build issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3dcfc7c6ad9325526ff0e68970a15a77b60d4d4", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b3dcfc7c6ad9325526ff0e68970a15a77b60d4d4", "committedDate": "2020-09-01T18:32:03Z", "message": "Made model classes final."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4546a8c54e8c36c6e9616a079e609227bcf94b1c", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4546a8c54e8c36c6e9616a079e609227bcf94b1c", "committedDate": "2020-09-01T18:43:05Z", "message": "Updated module-info.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMTU2MjI0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#pullrequestreview-480156224", "createdAt": "2020-09-01T22:18:44Z", "commit": {"oid": "4546a8c54e8c36c6e9616a079e609227bcf94b1c"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjoxODo0NlrOHLKNjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzowMDo0OFrOHLLGXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2MzY5NQ==", "bodyText": "This should ship as 4.0.0-beta.1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r481463695", "createdAt": "2020-09-01T22:18:46Z", "author": {"login": "heaths"}, "path": "eng/jacoco-test-coverage/pom.xml", "diffHunk": "@@ -161,6 +161,11 @@\n       <artifactId>azure-search-documents</artifactId>\n       <version>11.1.0-beta.2</version> <!-- {x-version-update;com.azure:azure-search-documents;current} -->\n     </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-security-keyvault-administration</artifactId>\n+      <version>4.1.0-beta.1</version> <!-- {x-version-update;com.azure:azure-security-keyvault-administration;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4546a8c54e8c36c6e9616a079e609227bcf94b1c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2OTQ1Mw==", "bodyText": "Should be roleScope, but don't let it hold up the PR. We can unify on parameter names and such in a subsequent preview.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r481469453", "createdAt": "2020-09-01T22:34:43Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -75,401 +85,552 @@ public String getVaultUrl() {\n     }\n \n     /**\n-     * Get all {@link RoleDefinition role definitions} that are applicable at the given {@link RoleScope\n-     * scope} and above.\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope scope} and above.\n      *\n-     * @param scope The {@link RoleScope scope} of the {@link RoleDefinition role definitions}.\n-     * @return A {@link PagedFlux} containing the {@link RoleDefinition role definitions} for the given\n-     * {@link RoleScope scope}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n+     * @param scope The {@link KeyVaultRoleAssignmentScope scope} of the {@link KeyVaultRoleDefinition role definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope scope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope scope} is {@code null}.\n      */\n-    @ServiceMethod(returns = ReturnType.SINGLE)\n-    public PagedFlux<RoleDefinition> listRoleDefinitions(RoleScope scope) {\n-        try {\n-            return new PagedFlux<>(\n-                () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, scope, context)),\n-                continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n-        } catch (RuntimeException e) {\n-            return new PagedFlux<>(() -> monoError(logger, e));\n-        }\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope scope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4546a8c54e8c36c6e9616a079e609227bcf94b1c"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3NzYwMQ==", "bodyText": "Other languages are keeping the \"not\" prefix. You could leave these for beta 1, but we should standardize on naming for beta 2. These sound better, certainly, but I worry about straying too far from what swagger defines for properties (types in swagger don't really have names anyway).\n/cc @christothes @sadasant", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r481477601", "createdAt": "2020-09-01T22:58:58Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/models/KeyVaultPermission.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration.models;\n+\n+import java.util.List;\n+\n+/**\n+ * A class describing allowed and denied actions and data actions of a {@link KeyVaultRoleDefinition}.\n+ */\n+public final class KeyVaultPermission {\n+    private List<String> actions;\n+    private List<String> deniedActions;\n+    private List<String> dataActions;\n+    private List<String> deniedDataActions;\n+\n+    /**\n+     * Creates a new {@link KeyVaultPermission} with the specified allowed and denied actions and data actions.\n+     *\n+     * @param actions           The actions this {@link KeyVaultPermission permission} allows.\n+     * @param deniedActions     The actions this {@link KeyVaultPermission permission} denies.\n+     * @param dataActions       The data actions this {@link KeyVaultPermission permission} allows.\n+     * @param deniedDataActions The data actions this {@link KeyVaultPermission permission} denies.\n+     */\n+    public KeyVaultPermission(List<String> actions, List<String> deniedActions, List<String> dataActions,\n+                              List<String> deniedDataActions) {\n+        this.actions = actions;\n+        this.deniedActions = deniedActions;\n+        this.dataActions = dataActions;\n+        this.deniedDataActions = deniedDataActions;\n+    }\n+\n+    /**\n+     * Get the actions this {@link KeyVaultPermission permission} allows.\n+     *\n+     * @return The allowed actions.\n+     */\n+    public List<String> getActions() {\n+        return actions;\n+    }\n+\n+    /**\n+     * Get the actions this {@link KeyVaultPermission permission} denies.\n+     *\n+     * @return The denied actions.\n+     */\n+    public List<String> getDeniedActions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4546a8c54e8c36c6e9616a079e609227bcf94b1c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3ODIzNg==", "bodyText": "These are required parameters for create methods. Are they being passed to those methods directly as well?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r481478236", "createdAt": "2020-09-01T23:00:48Z", "author": {"login": "heaths"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/models/KeyVaultRoleAssignmentProperties.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration.models;\n+\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A class that defines a role assignment's properties.\n+ */\n+public final class KeyVaultRoleAssignmentProperties {\n+    private String roleDefinitionId;\n+    private String principalId;\n+\n+    /**\n+     * Creates a new {@link KeyVaultRoleAssignmentProperties role assignment properties} object with the specified\n+     * details.\n+     *\n+     * @param roleDefinitionId The {@link KeyVaultRoleDefinition role definition} ID used in the\n+     *                         {@link KeyVaultRoleAssignment role assignment}.\n+     * @param principalId      The principal ID assigned to the role. This maps to the ID inside the Active Directory.\n+     *                         It can point to a user, service principal, or security group.\n+     */\n+    public KeyVaultRoleAssignmentProperties(String roleDefinitionId, String principalId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4546a8c54e8c36c6e9616a079e609227bcf94b1c"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbc29236ea2027deec8f7f87cc8273a014d2a4b6", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cbc29236ea2027deec8f7f87cc8273a014d2a4b6", "committedDate": "2020-09-02T05:46:37Z", "message": "Renamed input parameter \"scope\" to \"roleScope\" in a multitude of public APIs. Corrected version number in files inside /eng."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a742681ef54ced96ad1e672839b20d56f773b8a", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8a742681ef54ced96ad1e672839b20d56f773b8a", "committedDate": "2020-09-02T05:59:30Z", "message": "Fixed package-info.java Javadoc."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMDQ3NTYz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#pullrequestreview-482047563", "createdAt": "2020-09-03T17:17:47Z", "commit": {"oid": "8a742681ef54ced96ad1e672839b20d56f773b8a"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzoxNzo0OFrOHMwSUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzozODozNFrOHMw-mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzNjA4MA==", "bodyText": "Samples need to be added, they're important for the users.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483136080", "createdAt": "2020-09-03T17:17:48Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-administration/README.md", "diffHunk": "@@ -0,0 +1,127 @@\n+# Azure Key Vault Administration library for Java\n+\n+## Getting started\n+### Adding the package to your project\n+Maven dependency for the Azure Key Vault Administration library. Add it to your project's POM file.\n+\n+[//]: # ({x-version-update-start;com.azure:azure-security-keyvault-administration;current})\n+```xml\n+<dependency>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-security-keyvault-administration</artifactId>\n+    <version>4.0.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+### Prerequisites\n+- Java Development Kit (JDK) with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+- An existing [Azure Key Vault][azure_keyvault]. If you need to create a Key Vault, you can use the [Azure Cloud Shell](https://shell.azure.com/bash) to create one with this Azure CLI command. Replace `<your-resource-group-name>` and `<your-key-vault-name>` with your own, unique names:\n+\n+    ```Bash\n+    az keyvault create --resource-group <your-resource-group-name> --name <your-key-vault-name>\n+    ```\n+\n+### Authenticate the client\n+In order to interact with the Azure Key Vault service, you'll need to create an instance of the [KeyClient](#create-key-client) class. You would need a **vault url** and **client secret credentials (client id, client secret, tenant id)** to instantiate a client object using the default `DefaultAzureCredential` examples shown in this document.\n+\n+The `DefaultAzureCredential` way of authentication by providing client secret credentials is being used in this getting started section but you can find more ways to authenticate with [azure-identity][azure_identity].\n+\n+#### Create/Get credentials\n+To create/get client secret credentials you can use the [Azure Portal][azure_create_application_in_portal], [Azure CLI][azure_keyvault_cli_full] or [Azure Cloud Shell](https://shell.azure.com/bash)\n+\n+Here is an [Azure Cloud Shell](https://shell.azure.com/bash) snippet below to\n+\n+ * Create a service principal and configure its access to Azure resources:\n+\n+    ```Bash\n+    az ad sp create-for-rbac -n <your-application-name> --skip-assignment\n+    ```\n+\n+    Output:\n+\n+    ```json\n+    {\n+        \"appId\": \"generated-app-ID\",\n+        \"displayName\": \"dummy-app-name\",\n+        \"name\": \"http://dummy-app-name\",\n+        \"password\": \"random-password\",\n+        \"tenant\": \"tenant-ID\"\n+    }\n+    ```\n+\n+* Use the above returned credentials information to set the **AZURE_CLIENT_ID** (appId), **AZURE_CLIENT_SECRET** (password), and **AZURE_TENANT_ID** (tenantId) environment variables. The following example shows a way to do this in Bash:\n+\n+    ```Bash\n+    export AZURE_CLIENT_ID=\"generated-app-ID\"\n+    export AZURE_CLIENT_SECRET=\"random-password\"\n+    export AZURE_TENANT_ID=\"tenant-ID\"\n+    ```\n+\n+* Use the aforementioned Key Vault name to retrieve details of your Key Vault, which also contain your Key Vault URL:\n+\n+    ```Bash\n+    az keyvault show --name <your-key-vault-name>\n+    ```\n+\n+#### Create Access Control client\n+\n+## Key concepts\n+To be added.\n+\n+## Examples\n+### Sync API\n+To be added.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a742681ef54ced96ad1e672839b20d56f773b8a"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzODA5OA==", "bodyText": "List all", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483138098", "createdAt": "2020-09-03T17:21:25Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a742681ef54ced96ad1e672839b20d56f773b8a"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzODY5OA==", "bodyText": "List all", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483138698", "createdAt": "2020-09-03T17:22:27Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a742681ef54ced96ad1e672839b20d56f773b8a"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NDA5MQ==", "bodyText": "List all, everywehre", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483144091", "createdAt": "2020-09-03T17:32:05Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a742681ef54ced96ad1e672839b20d56f773b8a"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NDg2Ng==", "bodyText": "extra space after context", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483144866", "createdAt": "2020-09-03T17:33:44Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleAssignmentsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a742681ef54ced96ad1e672839b20d56f773b8a"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NTIzOA==", "bodyText": "too much indentation, sentence should start on the next line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483145238", "createdAt": "2020-09-03T17:34:27Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleAssignmentsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleAssignmentsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} in the first page that are applicable at\n+     * the given {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * in the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role assignments for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role assignments for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role assignments for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleAssignment role assignments} given by the {@code nextPageLink} that was\n+     * retrieved from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleAssignments(KeyVaultRoleAssignmentScope)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleAssignments} operations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a742681ef54ced96ad1e672839b20d56f773b8a"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NTQxNQ==", "bodyText": "extra space after context", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483145415", "createdAt": "2020-09-03T17:34:47Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleAssignmentsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleAssignmentsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} in the first page that are applicable at\n+     * the given {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * in the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role assignments for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role assignments for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role assignments for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleAssignment role assignments} given by the {@code nextPageLink} that was\n+     * retrieved from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleAssignments(KeyVaultRoleAssignmentScope)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleAssignments} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a742681ef54ced96ad1e672839b20d56f773b8a"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NTk0OA==", "bodyText": "too much extra space, sentence should start on next line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483145948", "createdAt": "2020-09-03T17:35:48Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleAssignmentsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleAssignmentsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} in the first page that are applicable at\n+     * the given {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * in the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role assignments for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role assignments for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role assignments for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleAssignment role assignments} given by the {@code nextPageLink} that was\n+     * retrieved from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleAssignments(KeyVaultRoleAssignmentScope)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleAssignments} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role assignments page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role assignments page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role assignments page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated {@link UUID name}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a742681ef54ced96ad1e672839b20d56f773b8a"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NjA3Nw==", "bodyText": "extra space afte name.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483146077", "createdAt": "2020-09-03T17:36:01Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleAssignmentsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleAssignmentsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} in the first page that are applicable at\n+     * the given {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * in the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role assignments for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role assignments for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role assignments for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleAssignment role assignments} given by the {@code nextPageLink} that was\n+     * retrieved from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleAssignments(KeyVaultRoleAssignmentScope)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleAssignments} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role assignments page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role assignments page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role assignments page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated {@link UUID name}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing the created {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<KeyVaultRoleAssignment> createRoleAssignment(KeyVaultRoleAssignmentScope roleScope,\n+                                                             KeyVaultRoleAssignmentProperties properties) {\n+        return createRoleAssignment(roleScope, UUID.randomUUID(), properties);\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param name       The name used to create the {@link KeyVaultRoleAssignment}. It can be any valid UUID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a742681ef54ced96ad1e672839b20d56f773b8a"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NjE3NQ==", "bodyText": "too much indentation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483146175", "createdAt": "2020-09-03T17:36:13Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleAssignmentsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleAssignmentsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} in the first page that are applicable at\n+     * the given {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * in the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role assignments for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role assignments for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role assignments for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleAssignment role assignments} given by the {@code nextPageLink} that was\n+     * retrieved from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleAssignments(KeyVaultRoleAssignmentScope)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleAssignments} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role assignments page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role assignments page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role assignments page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated {@link UUID name}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing the created {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<KeyVaultRoleAssignment> createRoleAssignment(KeyVaultRoleAssignmentScope roleScope,\n+                                                             KeyVaultRoleAssignmentProperties properties) {\n+        return createRoleAssignment(roleScope, UUID.randomUUID(), properties);\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a742681ef54ced96ad1e672839b20d56f773b8a"}, "originalPosition": 289}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NjM3Ng==", "bodyText": "sentence should start on next line.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483146376", "createdAt": "2020-09-03T17:36:34Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleAssignmentsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleAssignmentsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} in the first page that are applicable at\n+     * the given {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * in the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role assignments for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role assignments for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role assignments for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleAssignment role assignments} given by the {@code nextPageLink} that was\n+     * retrieved from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleAssignments(KeyVaultRoleAssignmentScope)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleAssignments} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role assignments page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role assignments page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role assignments page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated {@link UUID name}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing the created {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<KeyVaultRoleAssignment> createRoleAssignment(KeyVaultRoleAssignmentScope roleScope,\n+                                                             KeyVaultRoleAssignmentProperties properties) {\n+        return createRoleAssignment(roleScope, UUID.randomUUID(), properties);\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param name       The name used to create the {@link KeyVaultRoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing the created {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope}, {@link UUID name} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a742681ef54ced96ad1e672839b20d56f773b8a"}, "originalPosition": 294}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NjY4Mw==", "bodyText": "extra space after name,\nFix docs spacing issues everywhere.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483146683", "createdAt": "2020-09-03T17:37:12Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleAssignmentsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleAssignmentsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} in the first page that are applicable at\n+     * the given {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * in the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role assignments for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role assignments for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role assignments for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleAssignment role assignments} given by the {@code nextPageLink} that was\n+     * retrieved from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleAssignments(KeyVaultRoleAssignmentScope)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleAssignments} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role assignments page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role assignments page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role assignments page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated {@link UUID name}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing the created {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<KeyVaultRoleAssignment> createRoleAssignment(KeyVaultRoleAssignmentScope roleScope,\n+                                                             KeyVaultRoleAssignmentProperties properties) {\n+        return createRoleAssignment(roleScope, UUID.randomUUID(), properties);\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param name       The name used to create the {@link KeyVaultRoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing the created {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope}, {@link UUID name} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<KeyVaultRoleAssignment> createRoleAssignment(KeyVaultRoleAssignmentScope roleScope, UUID name,\n+                                                             KeyVaultRoleAssignmentProperties properties) {\n+        return createRoleAssignmentWithResponse(roleScope, name, properties).flatMap(FluxUtil::toMono);\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated {@link UUID name}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} contains the created\n+     * {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<KeyVaultRoleAssignment>> createRoleAssignmentWithResponse(KeyVaultRoleAssignmentScope roleScope,\n+                                                                                   KeyVaultRoleAssignmentProperties properties) {\n+        return createRoleAssignmentWithResponse(roleScope, UUID.randomUUID(), properties);\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param name       The name used to create the {@link KeyVaultRoleAssignment}. It can be any valid UUID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a742681ef54ced96ad1e672839b20d56f773b8a"}, "originalPosition": 324}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NzQxOQ==", "bodyText": "Why is UUID being used here and not a String ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483147419", "createdAt": "2020-09-03T17:38:34Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleAssignmentsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleAssignmentsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} in the first page that are applicable at\n+     * the given {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * in the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role assignments for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role assignments for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role assignments for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleAssignment role assignments} given by the {@code nextPageLink} that was\n+     * retrieved from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleAssignments(KeyVaultRoleAssignmentScope)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleAssignments} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role assignments page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role assignments page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role assignments page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated {@link UUID name}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing the created {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<KeyVaultRoleAssignment> createRoleAssignment(KeyVaultRoleAssignmentScope roleScope,\n+                                                             KeyVaultRoleAssignmentProperties properties) {\n+        return createRoleAssignment(roleScope, UUID.randomUUID(), properties);\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param name       The name used to create the {@link KeyVaultRoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing the created {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope}, {@link UUID name} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<KeyVaultRoleAssignment> createRoleAssignment(KeyVaultRoleAssignmentScope roleScope, UUID name,\n+                                                             KeyVaultRoleAssignmentProperties properties) {\n+        return createRoleAssignmentWithResponse(roleScope, name, properties).flatMap(FluxUtil::toMono);\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated {@link UUID name}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} contains the created\n+     * {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<KeyVaultRoleAssignment>> createRoleAssignmentWithResponse(KeyVaultRoleAssignmentScope roleScope,\n+                                                                                   KeyVaultRoleAssignmentProperties properties) {\n+        return createRoleAssignmentWithResponse(roleScope, UUID.randomUUID(), properties);\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param name       The name used to create the {@link KeyVaultRoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} contains the created\n+     * {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope}, {@link UUID name} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<KeyVaultRoleAssignment>> createRoleAssignmentWithResponse(KeyVaultRoleAssignmentScope roleScope,\n+                                                                                   UUID name,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a742681ef54ced96ad1e672839b20d56f773b8a"}, "originalPosition": 333}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01e3e7641b80127033b0a2046476b637e549e9c8", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/01e3e7641b80127033b0a2046476b637e549e9c8", "committedDate": "2020-09-03T18:07:54Z", "message": "Fixed some strings used for logging."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ee7459c1104d373ec41c0414bf146fb33bf02dd", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2ee7459c1104d373ec41c0414bf146fb33bf02dd", "committedDate": "2020-09-03T20:46:33Z", "message": "Fixed JavaDoc formatting issues pointed out by @g2vinay."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0907fcb7121377ba9fbb49b688063a0a70ec4f57", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0907fcb7121377ba9fbb49b688063a0a70ec4f57", "committedDate": "2020-09-03T20:46:52Z", "message": "Added samples to README.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "583d989a2947caba2cb9628e452d294e4daeda69", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/583d989a2947caba2cb9628e452d294e4daeda69", "committedDate": "2020-09-03T20:50:27Z", "message": "Merge branch 'master' into users/vicolina/keyvault-rbac"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjI5NzA5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#pullrequestreview-482229709", "createdAt": "2020-09-03T21:56:09Z", "commit": {"oid": "583d989a2947caba2cb9628e452d294e4daeda69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMTo1NjoxMFrOHM4xlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMTo1NjoxMFrOHM4xlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI3NTE1Ng==", "bodyText": "Need to add groupId", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483275156", "createdAt": "2020-09-03T21:56:10Z", "author": {"login": "weshaggard"}, "path": "sdk/keyvault/azure-security-keyvault-administration/pom.xml", "diffHunk": "@@ -0,0 +1,105 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+  </parent>\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>azure-security-keyvault-administration</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "583d989a2947caba2cb9628e452d294e4daeda69"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a208bfbcbce629d7d0a0d1517fe1bf537c77210", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5a208bfbcbce629d7d0a0d1517fe1bf537c77210", "committedDate": "2020-09-03T22:09:19Z", "message": "Fixed build analysis issues with the module's POM."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ed0f6ff65435385cf90fe40560ff06181406a46", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9ed0f6ff65435385cf90fe40560ff06181406a46", "committedDate": "2020-09-03T22:07:19Z", "message": "Fixed build analysis issues with the module's POM."}, "afterCommit": {"oid": "5a208bfbcbce629d7d0a0d1517fe1bf537c77210", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5a208bfbcbce629d7d0a0d1517fe1bf537c77210", "committedDate": "2020-09-03T22:09:19Z", "message": "Fixed build analysis issues with the module's POM."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "016964397330777487187204dc4b032c6eaf59aa", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/016964397330777487187204dc4b032c6eaf59aa", "committedDate": "2020-09-04T04:03:32Z", "message": "Fixed Build analysis issue related to README."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ede7988e89afaa03375336809eeb6045bd52172", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8ede7988e89afaa03375336809eeb6045bd52172", "committedDate": "2020-09-04T06:57:43Z", "message": "Fixed broken link in autorest.md"}, "afterCommit": {"oid": "ca96cc718617d8e4d9a8d3bd3353778510bcf450", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ca96cc718617d8e4d9a8d3bd3353778510bcf450", "committedDate": "2020-09-04T06:59:05Z", "message": "Fixed broken links in autorest.md and README.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a47601088f1bea5ef104ac4c181bf5281a1f292c", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a47601088f1bea5ef104ac4c181bf5281a1f292c", "committedDate": "2020-09-04T07:03:44Z", "message": "Fixed broken links in autorest.md and README.md"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca96cc718617d8e4d9a8d3bd3353778510bcf450", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ca96cc718617d8e4d9a8d3bd3353778510bcf450", "committedDate": "2020-09-04T06:59:05Z", "message": "Fixed broken links in autorest.md and README.md"}, "afterCommit": {"oid": "a47601088f1bea5ef104ac4c181bf5281a1f292c", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a47601088f1bea5ef104ac4c181bf5281a1f292c", "committedDate": "2020-09-04T07:03:44Z", "message": "Fixed broken links in autorest.md and README.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43a5fee092eea1aae382da47a8bdbc313b30a73b", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/43a5fee092eea1aae382da47a8bdbc313b30a73b", "committedDate": "2020-09-04T08:45:04Z", "message": "Fixed a bug in `KeyVaultAccessControlAsyncClient.createRoleAssignmentWithResponse()`. Made fixes for tests cases."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43caa664065f32b9d79852f06ba965439014c7dc", "author": {"user": {"login": "vcolin7", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/43caa664065f32b9d79852f06ba965439014c7dc", "committedDate": "2020-09-04T08:52:31Z", "message": "Updated azure-core versions."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3013, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}