{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzODQwMDU1", "number": 13340, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzoyOToyN1rOERJanQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzoyOToyN1rOERJanQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDE1NTE3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/DateTimeDeserializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzoyOToyN1rOG1s09g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo0Mzo0MlrOG1tW3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk2MjE2Ng==", "bodyText": "Do we need to expose this? It's only used once in this class so I can see it being rolled into the method above. I don't think it would change testing strategy either.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13340#discussion_r458962166", "createdAt": "2020-07-22T17:29:27Z", "author": {"login": "conniey"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/DateTimeDeserializer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import java.io.IOException;\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.temporal.TemporalAccessor;\n+import java.time.temporal.TemporalQueries;\n+\n+/**\n+ * Custom deserializer that handles converting ISO8601 dates into {@link OffsetDateTime} objects.\n+ */\n+class DateTimeDeserializer extends JsonDeserializer<OffsetDateTime> {\n+    private static final SimpleModule MODULE;\n+\n+    static {\n+        MODULE = new SimpleModule().addDeserializer(OffsetDateTime.class, new DateTimeDeserializer());\n+    }\n+\n+    /**\n+     * Gets a module wrapping this deserializer as an adapter for the Jackson ObjectMapper.\n+     *\n+     * @return A {@link SimpleModule} to be plugged onto Jackson ObjectMapper.\n+     */\n+    public static SimpleModule getModule() {\n+        return MODULE;\n+    }\n+\n+    @Override\n+    public OffsetDateTime deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)\n+        throws IOException {\n+        return deserialize(jsonParser.getValueAsString());\n+    }\n+\n+    static OffsetDateTime deserialize(String offsetDateTimeString) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da12174e042924b7fe9b046cf06a028ba93ab605"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDg0Nw==", "bodyText": "Removed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13340#discussion_r458970847", "createdAt": "2020-07-22T17:43:42Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/DateTimeDeserializer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n+import java.io.IOException;\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.temporal.TemporalAccessor;\n+import java.time.temporal.TemporalQueries;\n+\n+/**\n+ * Custom deserializer that handles converting ISO8601 dates into {@link OffsetDateTime} objects.\n+ */\n+class DateTimeDeserializer extends JsonDeserializer<OffsetDateTime> {\n+    private static final SimpleModule MODULE;\n+\n+    static {\n+        MODULE = new SimpleModule().addDeserializer(OffsetDateTime.class, new DateTimeDeserializer());\n+    }\n+\n+    /**\n+     * Gets a module wrapping this deserializer as an adapter for the Jackson ObjectMapper.\n+     *\n+     * @return A {@link SimpleModule} to be plugged onto Jackson ObjectMapper.\n+     */\n+    public static SimpleModule getModule() {\n+        return MODULE;\n+    }\n+\n+    @Override\n+    public OffsetDateTime deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)\n+        throws IOException {\n+        return deserialize(jsonParser.getValueAsString());\n+    }\n+\n+    static OffsetDateTime deserialize(String offsetDateTimeString) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk2MjE2Ng=="}, "originalCommit": {"oid": "da12174e042924b7fe9b046cf06a028ba93ab605"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4914, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}