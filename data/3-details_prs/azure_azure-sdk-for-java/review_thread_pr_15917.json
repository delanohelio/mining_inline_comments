{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MTkxNDM4", "number": 15917, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMToxMjozOVrOEp-1cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODozODo0NlrOEuIADg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDU2NTYwOnYy", "diffSide": "RIGHT", "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/PhoneNumberClientBuilderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMToxMjozOVrOHb-xNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMToxMjozOVrOHb-xNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMjAwNA==", "bodyText": "setAccessKeyNull", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r499102004", "createdAt": "2020-10-03T01:12:39Z", "author": {"login": "RezaJooyandeh"}, "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/PhoneNumberClientBuilderTest.java", "diffHunk": "@@ -295,7 +294,7 @@ public void setHttpClientNull() {\n     @Test()\n     public void setCredentialNull() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9579a1dc3de8e96726d5494e4ecf5858013ac15"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDU2NTc2OnYy", "diffSide": "RIGHT", "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/PhoneNumberIntegrationTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMToxMjo1NFrOHb-xSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMToxMjo1NFrOHb-xSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMjAyNA==", "bodyText": "nit: extra indent. Also CONNECTION_STRING", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r499102024", "createdAt": "2020-10-03T01:12:54Z", "author": {"login": "RezaJooyandeh"}, "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/PhoneNumberIntegrationTestBase.java", "diffHunk": "@@ -21,6 +21,8 @@\n         Configuration.getGlobalConfiguration().get(\"COMMUNICATION_SERVICE_ACCESS_KEY\");\n     private static final String ENV_ENDPOINT =\n         Configuration.getGlobalConfiguration().get(\"COMMUNICATION_SERVICE_ENDPOINT\");\n+        protected static final String CONNECTIONSTRING = Configuration.getGlobalConfiguration()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9579a1dc3de8e96726d5494e4ecf5858013ac15"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDU3MDg2OnYy", "diffSide": "RIGHT", "path": "sdk/communication/azure-communication-common/src/main/java/com/azure/communication/common/CommunicationClientCredential.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMToyMTowMFrOHb-z9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToxMDozNFrOHcqLog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMjcxMA==", "bodyText": "Let's talk about this a bit more. I wonder if somehow sha256HMAC instantiation and init should be moved to a builder mechanism to avoid throwing exceptions or maybe the first time that we call appendAuthorizationHeaders we set it up. @srnagar what do you think?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r499102710", "createdAt": "2020-10-03T01:21:00Z", "author": {"login": "RezaJooyandeh"}, "path": "sdk/communication/azure-communication-common/src/main/java/com/azure/communication/common/CommunicationClientCredential.java", "diffHunk": "@@ -53,14 +53,20 @@\n     /**\n      * Requires resource access key to create the credential\n      * @param accessKey resource access key as provided by Azure in Base64 format\n-     * @throws NoSuchAlgorithmException if HmacSHA256 is not available\n-     * @throws InvalidKeyException if accessKey provided is not valid\n      */\n-    public CommunicationClientCredential(String accessKey) throws NoSuchAlgorithmException, InvalidKeyException {\n+    public CommunicationClientCredential(String accessKey) {\n         Objects.requireNonNull(accessKey, \"'accessKey' cannot be null\");\n         byte[] key = Base64.getDecoder().decode(accessKey);\n-        sha256HMAC = Mac.getInstance(\"HmacSHA256\");\n-        sha256HMAC.init(new SecretKeySpec(key, \"HmacSHA256\"));\n+        Mac sha256HMAC = null;\n+        try {\n+            sha256HMAC = Mac.getInstance(\"HmacSHA256\");\n+            sha256HMAC.init(new SecretKeySpec(key, \"HmacSHA256\"));\n+        } catch (NoSuchAlgorithmException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9579a1dc3de8e96726d5494e4ecf5858013ac15"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgwNzM0MA==", "bodyText": "We do use builders for creating credentials in azure-identity.\nWe also use constructors as well for creating some credentials. So, both patterns are acceptable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r499807340", "createdAt": "2020-10-05T18:59:33Z", "author": {"login": "srnagar"}, "path": "sdk/communication/azure-communication-common/src/main/java/com/azure/communication/common/CommunicationClientCredential.java", "diffHunk": "@@ -53,14 +53,20 @@\n     /**\n      * Requires resource access key to create the credential\n      * @param accessKey resource access key as provided by Azure in Base64 format\n-     * @throws NoSuchAlgorithmException if HmacSHA256 is not available\n-     * @throws InvalidKeyException if accessKey provided is not valid\n      */\n-    public CommunicationClientCredential(String accessKey) throws NoSuchAlgorithmException, InvalidKeyException {\n+    public CommunicationClientCredential(String accessKey) {\n         Objects.requireNonNull(accessKey, \"'accessKey' cannot be null\");\n         byte[] key = Base64.getDecoder().decode(accessKey);\n-        sha256HMAC = Mac.getInstance(\"HmacSHA256\");\n-        sha256HMAC.init(new SecretKeySpec(key, \"HmacSHA256\"));\n+        Mac sha256HMAC = null;\n+        try {\n+            sha256HMAC = Mac.getInstance(\"HmacSHA256\");\n+            sha256HMAC.init(new SecretKeySpec(key, \"HmacSHA256\"));\n+        } catch (NoSuchAlgorithmException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMjcxMA=="}, "originalCommit": {"oid": "c9579a1dc3de8e96726d5494e4ecf5858013ac15"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgwODI3Nw==", "bodyText": "Regarding the exception handling itself, if the sha256HMAC cannot be instantiated, we should throw this error but it should be a RuntimeException instead of a checked exception. Also, we should not use e.printStackTrace(). Log the and throw the exception instead using ClientLogger.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r499808277", "createdAt": "2020-10-05T19:01:09Z", "author": {"login": "srnagar"}, "path": "sdk/communication/azure-communication-common/src/main/java/com/azure/communication/common/CommunicationClientCredential.java", "diffHunk": "@@ -53,14 +53,20 @@\n     /**\n      * Requires resource access key to create the credential\n      * @param accessKey resource access key as provided by Azure in Base64 format\n-     * @throws NoSuchAlgorithmException if HmacSHA256 is not available\n-     * @throws InvalidKeyException if accessKey provided is not valid\n      */\n-    public CommunicationClientCredential(String accessKey) throws NoSuchAlgorithmException, InvalidKeyException {\n+    public CommunicationClientCredential(String accessKey) {\n         Objects.requireNonNull(accessKey, \"'accessKey' cannot be null\");\n         byte[] key = Base64.getDecoder().decode(accessKey);\n-        sha256HMAC = Mac.getInstance(\"HmacSHA256\");\n-        sha256HMAC.init(new SecretKeySpec(key, \"HmacSHA256\"));\n+        Mac sha256HMAC = null;\n+        try {\n+            sha256HMAC = Mac.getInstance(\"HmacSHA256\");\n+            sha256HMAC.init(new SecretKeySpec(key, \"HmacSHA256\"));\n+        } catch (NoSuchAlgorithmException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMjcxMA=="}, "originalCommit": {"oid": "c9579a1dc3de8e96726d5494e4ecf5858013ac15"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxMzI4Mg==", "bodyText": "Done, thanks Srikanta!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r499813282", "createdAt": "2020-10-05T19:10:34Z", "author": {"login": "minnieliu"}, "path": "sdk/communication/azure-communication-common/src/main/java/com/azure/communication/common/CommunicationClientCredential.java", "diffHunk": "@@ -53,14 +53,20 @@\n     /**\n      * Requires resource access key to create the credential\n      * @param accessKey resource access key as provided by Azure in Base64 format\n-     * @throws NoSuchAlgorithmException if HmacSHA256 is not available\n-     * @throws InvalidKeyException if accessKey provided is not valid\n      */\n-    public CommunicationClientCredential(String accessKey) throws NoSuchAlgorithmException, InvalidKeyException {\n+    public CommunicationClientCredential(String accessKey) {\n         Objects.requireNonNull(accessKey, \"'accessKey' cannot be null\");\n         byte[] key = Base64.getDecoder().decode(accessKey);\n-        sha256HMAC = Mac.getInstance(\"HmacSHA256\");\n-        sha256HMAC.init(new SecretKeySpec(key, \"HmacSHA256\"));\n+        Mac sha256HMAC = null;\n+        try {\n+            sha256HMAC = Mac.getInstance(\"HmacSHA256\");\n+            sha256HMAC.init(new SecretKeySpec(key, \"HmacSHA256\"));\n+        } catch (NoSuchAlgorithmException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMjcxMA=="}, "originalCommit": {"oid": "c9579a1dc3de8e96726d5494e4ecf5858013ac15"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDU3MjIyOnYy", "diffSide": "RIGHT", "path": "sdk/communication/azure-communication-common/src/main/java/com/azure/communication/common/ConnectionString.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMToyMzoxOVrOHb-0ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMTo0NjowMlrOHb-8HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMjg4Mw==", "bodyText": "Does not azure core already have an implementation of this that we can use?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r499102883", "createdAt": "2020-10-03T01:23:19Z", "author": {"login": "RezaJooyandeh"}, "path": "sdk/communication/azure-communication-common/src/main/java/com/azure/communication/common/ConnectionString.java", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.communication.common;\n+\n+import java.util.Objects;\n+\n+public class ConnectionString {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9579a1dc3de8e96726d5494e4ecf5858013ac15"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwNDc5Ng==", "bodyText": "I checked Azure Core because I saw for C# there is existing implementation, but nothing there for Java unfortunately", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r499104796", "createdAt": "2020-10-03T01:46:02Z", "author": {"login": "minnieliu"}, "path": "sdk/communication/azure-communication-common/src/main/java/com/azure/communication/common/ConnectionString.java", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.communication.common;\n+\n+import java.util.Objects;\n+\n+public class ConnectionString {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMjg4Mw=="}, "originalCommit": {"oid": "c9579a1dc3de8e96726d5494e4ecf5858013ac15"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDU3MjcyOnYy", "diffSide": "RIGHT", "path": "sdk/communication/azure-communication-sms/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMToyMzo1MFrOHb-03Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMToyMzo1MFrOHb-03Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMjk0MQ==", "bodyText": "CommunicationIdentityClientBuilder \ud83d\udc49\ud83c\udffb SmsClientBuilder", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r499102941", "createdAt": "2020-10-03T01:23:50Z", "author": {"login": "RezaJooyandeh"}, "path": "sdk/communication/azure-communication-sms/CHANGELOG.md", "diffHunk": "@@ -2,6 +2,12 @@\n \n ## 1.0.0-beta.2 (Unreleased)\n \n+### Added", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9579a1dc3de8e96726d5494e4ecf5858013ac15"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDU3Mzg1OnYy", "diffSide": "RIGHT", "path": "sdk/communication/azure-communication-sms/src/test/java/com/azure/communication/sms/SmsLiveTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMToyNTo0NlrOHb-1dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMToyNTo0NlrOHb-1dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMzA5NA==", "bodyText": "Do you mind replacing this fake url with a sanitized one?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r499103094", "createdAt": "2020-10-03T01:25:46Z", "author": {"login": "RezaJooyandeh"}, "path": "sdk/communication/azure-communication-sms/src/test/java/com/azure/communication/sms/SmsLiveTestBase.java", "diffHunk": "@@ -35,25 +30,34 @@\n     static final String ENDPOINT = Configuration.getGlobalConfiguration()\n         .get(\"SMS_SERVICE_ENDPOINT\", \"https://playback.sms.azurefd.net\");\n \n-    CommunicationClientCredential credential;\n-\n-    public SmsLiveTestBase() {\n-        try {\n-            credential = new CommunicationClientCredential(ACCESSKEY);\n-        } catch (InvalidKeyException e) {\n-            credential = null;\n-            fail(e.getMessage());\n-        } catch (NoSuchAlgorithmException e) {\n-            credential = null;\n-            fail(e.getMessage());\n-        }\n-    }\n+    static final String CONNECTIONSTRING = Configuration.getGlobalConfiguration()\n+        .get(\"COMMUNICATION_CONNECTION_STRING\", \"endpoint=https://playback.sms.azurefd.net/;accesskey=VGhpcyBpcyBhIHRlc3Q=\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9579a1dc3de8e96726d5494e4ecf5858013ac15"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDU3NjI3OnYy", "diffSide": "RIGHT", "path": "sdk/communication/azure-communication-sms/src/test/java/com/azure/communication/sms/SmsLiveTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMToyOTo0MVrOHb-2uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMToyOTo0MVrOHb-2uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMzQxNg==", "bodyText": "CONNECTION_STRING", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r499103416", "createdAt": "2020-10-03T01:29:41Z", "author": {"login": "RezaJooyandeh"}, "path": "sdk/communication/azure-communication-sms/src/test/java/com/azure/communication/sms/SmsLiveTestBase.java", "diffHunk": "@@ -35,25 +30,34 @@\n     static final String ENDPOINT = Configuration.getGlobalConfiguration()\n         .get(\"SMS_SERVICE_ENDPOINT\", \"https://playback.sms.azurefd.net\");\n \n-    CommunicationClientCredential credential;\n-\n-    public SmsLiveTestBase() {\n-        try {\n-            credential = new CommunicationClientCredential(ACCESSKEY);\n-        } catch (InvalidKeyException e) {\n-            credential = null;\n-            fail(e.getMessage());\n-        } catch (NoSuchAlgorithmException e) {\n-            credential = null;\n-            fail(e.getMessage());\n-        }\n-    }\n+    static final String CONNECTIONSTRING = Configuration.getGlobalConfiguration()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9579a1dc3de8e96726d5494e4ecf5858013ac15"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzk4NzMyOnYy", "diffSide": "RIGHT", "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityAsyncTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo1NzozMlrOHdVwrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTozOTowMVrOHdXIUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyNzI3OQ==", "bodyText": "Move the annotation to new line above the test case.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r500527279", "createdAt": "2020-10-06T18:57:32Z", "author": {"login": "srnagar"}, "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityAsyncTests.java", "diffHunk": "@@ -29,6 +29,16 @@ protected void beforeTest() {\n         asyncClient = getCommunicationIdentityClient().buildAsyncClient();\n     }\n \n+    @Test void createAsyncIdentityClientUsingConnectionString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f51e6aae0a3a9ea3374559e72dd6a9554267d37a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0OTcxMg==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r500549712", "createdAt": "2020-10-06T19:39:01Z", "author": {"login": "minnieliu"}, "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityAsyncTests.java", "diffHunk": "@@ -29,6 +29,16 @@ protected void beforeTest() {\n         asyncClient = getCommunicationIdentityClient().buildAsyncClient();\n     }\n \n+    @Test void createAsyncIdentityClientUsingConnectionString() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyNzI3OQ=="}, "originalCommit": {"oid": "f51e6aae0a3a9ea3374559e72dd6a9554267d37a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzk5MDU2OnYy", "diffSide": "RIGHT", "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityBuilderTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo1ODoyMlrOHdVyqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTozOToxMFrOHdXIlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyNzc4NA==", "bodyText": "nit: Use underscores to split multiple words - MOCK_ACCESS_KEY, MOCK_CONNECTION_STRING", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r500527784", "createdAt": "2020-10-06T18:58:22Z", "author": {"login": "srnagar"}, "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityBuilderTests.java", "diffHunk": "@@ -24,7 +22,8 @@\n \n public class CommunicationIdentityBuilderTests {\n     static final String MOCKURL = \"https://chitchat.dev.communication.azure.net/\";\n-    static final String MOCKTOKEN = \"HuZVBcRKEA+TW30GBzdsmRyqitKk1dHj2OBtTsgRe2mzlxWUHGh06CdOVJwp07JKuss1k+/YeXL4dYXPF5El4Q==\";\n+    static final String MOCKACCESSKEY = \"HuZVBcRKEA+TW30GBzdsmRyqitKk1dHj2OBtTsgRe2mzlxWUHGh06CdOVJwp07JKuss1k+/YeXL4dYXPF5El4Q==\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f51e6aae0a3a9ea3374559e72dd6a9554267d37a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0OTc4MA==", "bodyText": "Done, thank you.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r500549780", "createdAt": "2020-10-06T19:39:10Z", "author": {"login": "minnieliu"}, "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityBuilderTests.java", "diffHunk": "@@ -24,7 +22,8 @@\n \n public class CommunicationIdentityBuilderTests {\n     static final String MOCKURL = \"https://chitchat.dev.communication.azure.net/\";\n-    static final String MOCKTOKEN = \"HuZVBcRKEA+TW30GBzdsmRyqitKk1dHj2OBtTsgRe2mzlxWUHGh06CdOVJwp07JKuss1k+/YeXL4dYXPF5El4Q==\";\n+    static final String MOCKACCESSKEY = \"HuZVBcRKEA+TW30GBzdsmRyqitKk1dHj2OBtTsgRe2mzlxWUHGh06CdOVJwp07JKuss1k+/YeXL4dYXPF5El4Q==\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyNzc4NA=="}, "originalCommit": {"oid": "f51e6aae0a3a9ea3374559e72dd6a9554267d37a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Nzk4MDYxOnYy", "diffSide": "RIGHT", "path": "sdk/communication/azure-communication-common/src/main/java/com/azure/communication/common/ConnectionString.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODoyOTo1NlrOHiU4TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMTowMDoyNlrOHiguwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc1NTcyNA==", "bodyText": "Make this class final and also add @Immutable annotation. Also, the user doesn't directly create this type, so, it can be moved to implementation package.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r505755724", "createdAt": "2020-10-15T18:29:56Z", "author": {"login": "srnagar"}, "path": "sdk/communication/azure-communication-common/src/main/java/com/azure/communication/common/ConnectionString.java", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.communication.common;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Parse and store Connection String values\n+ */\n+public class ConnectionString {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc072382d081b07941295ea298a59b1b59d80a34"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk0OTg5MA==", "bodyText": "@srnagar The Connection String is also used in other packages like administration and SMS. Given this, we won't be able to put it into implementation folder right? Unless we also export the implementation folder which we probably do not want?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r505949890", "createdAt": "2020-10-16T01:00:26Z", "author": {"login": "minnieliu"}, "path": "sdk/communication/azure-communication-common/src/main/java/com/azure/communication/common/ConnectionString.java", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.communication.common;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Parse and store Connection String values\n+ */\n+public class ConnectionString {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc1NTcyNA=="}, "originalCommit": {"oid": "bc072382d081b07941295ea298a59b1b59d80a34"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODAwNTUyOnYy", "diffSide": "RIGHT", "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityClientTestBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODozNzoxMFrOHiVIDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMDowMzo1NlrOHifi2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc1OTc1OQ==", "bodyText": "TestBase class has a method called getHttpClients() which returns a list of all available HTTP clients. You can use that method instead. That will allow you to test your service with multiple HTTP clients.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r505759759", "createdAt": "2020-10-15T18:37:10Z", "author": {"login": "srnagar"}, "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityClientTestBase.java", "diffHunk": "@@ -19,41 +15,54 @@\n \n public class CommunicationIdentityClientTestBase extends TestBase {\n     protected static final TestMode TEST_MODE = initializeTestMode();\n-\n     protected static final String ENDPOINT = Configuration.getGlobalConfiguration()\n-        .get(\"ADMINISTRATION_SERVICE_ENDPOINT\", \"https://yourresource.communication.azure.com\");\n+        .get(\"ADMINISTRATION_SERVICE_ENDPOINT\", \"https://REDACTED.communication.azure.com\");\n+\n+    protected static final String ACCESSKEYRAW = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\";\n+    protected static final String ACCESSKEYENCODED = Base64.getEncoder().encodeToString(ACCESSKEYRAW.getBytes());\n+    protected static final String ACCESSKEY = Configuration.getGlobalConfiguration()\n+        .get(\"ADMINISTRATION_SERVICE_ACCESS_TOKEN\", ACCESSKEYENCODED);\n \n-    protected static final String MOCKACCESSTOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\";\n-    protected static final String MOCKACCESSTOKENENCODED = Base64.getEncoder().encodeToString(MOCKACCESSTOKEN.getBytes());\n-    protected static final String ACCESSTOKEN = Configuration.getGlobalConfiguration()\n-        .get(\"ADMINISTRATION_SERVICE_ACCESS_TOKEN\", MOCKACCESSTOKENENCODED);\n+    protected static final String CONNECTION_STRING = Configuration.getGlobalConfiguration()\n+        .get(\"COMMUNICATION_CONNECTION_STRING\", \"endpoint=https://REDACTED.communication.azure.com/;accesskey=\" + ACCESSKEYENCODED);\n     \n     protected CommunicationIdentityClientBuilder getCommunicationIdentityClient() {\n-        try {\n-            CommunicationClientCredential credential = new CommunicationClientCredential(ACCESSTOKEN);\n-            CommunicationIdentityClientBuilder builder = new CommunicationIdentityClientBuilder();\n-            builder.endpoint(ENDPOINT)\n-                .credential(credential);\n-    \n-            if (interceptorManager.isPlaybackMode()) {\n-                builder.httpClient(interceptorManager.getPlaybackClient());\n-                return builder;\n-            } else {\n-                HttpClient client = new NettyAsyncHttpClientBuilder().build();\n-                builder.httpClient(client);\n-            }\n-    \n-            if (!interceptorManager.isLiveMode()) {\n-                builder.addPolicy(interceptorManager.getRecordPolicy());\n-            }\n-    \n+        CommunicationIdentityClientBuilder builder = new CommunicationIdentityClientBuilder();\n+        builder.endpoint(ENDPOINT)\n+            .accessKey(ACCESSKEY);\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(interceptorManager.getPlaybackClient());\n+            return builder;\n+        } else {\n+            HttpClient client = new NettyAsyncHttpClientBuilder().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc072382d081b07941295ea298a59b1b59d80a34"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkzMDQ1Nw==", "bodyText": "How would this work since builder.httpClient(client); only takes in one client?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r505930457", "createdAt": "2020-10-16T00:03:56Z", "author": {"login": "minnieliu"}, "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/CommunicationIdentityClientTestBase.java", "diffHunk": "@@ -19,41 +15,54 @@\n \n public class CommunicationIdentityClientTestBase extends TestBase {\n     protected static final TestMode TEST_MODE = initializeTestMode();\n-\n     protected static final String ENDPOINT = Configuration.getGlobalConfiguration()\n-        .get(\"ADMINISTRATION_SERVICE_ENDPOINT\", \"https://yourresource.communication.azure.com\");\n+        .get(\"ADMINISTRATION_SERVICE_ENDPOINT\", \"https://REDACTED.communication.azure.com\");\n+\n+    protected static final String ACCESSKEYRAW = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\";\n+    protected static final String ACCESSKEYENCODED = Base64.getEncoder().encodeToString(ACCESSKEYRAW.getBytes());\n+    protected static final String ACCESSKEY = Configuration.getGlobalConfiguration()\n+        .get(\"ADMINISTRATION_SERVICE_ACCESS_TOKEN\", ACCESSKEYENCODED);\n \n-    protected static final String MOCKACCESSTOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\";\n-    protected static final String MOCKACCESSTOKENENCODED = Base64.getEncoder().encodeToString(MOCKACCESSTOKEN.getBytes());\n-    protected static final String ACCESSTOKEN = Configuration.getGlobalConfiguration()\n-        .get(\"ADMINISTRATION_SERVICE_ACCESS_TOKEN\", MOCKACCESSTOKENENCODED);\n+    protected static final String CONNECTION_STRING = Configuration.getGlobalConfiguration()\n+        .get(\"COMMUNICATION_CONNECTION_STRING\", \"endpoint=https://REDACTED.communication.azure.com/;accesskey=\" + ACCESSKEYENCODED);\n     \n     protected CommunicationIdentityClientBuilder getCommunicationIdentityClient() {\n-        try {\n-            CommunicationClientCredential credential = new CommunicationClientCredential(ACCESSTOKEN);\n-            CommunicationIdentityClientBuilder builder = new CommunicationIdentityClientBuilder();\n-            builder.endpoint(ENDPOINT)\n-                .credential(credential);\n-    \n-            if (interceptorManager.isPlaybackMode()) {\n-                builder.httpClient(interceptorManager.getPlaybackClient());\n-                return builder;\n-            } else {\n-                HttpClient client = new NettyAsyncHttpClientBuilder().build();\n-                builder.httpClient(client);\n-            }\n-    \n-            if (!interceptorManager.isLiveMode()) {\n-                builder.addPolicy(interceptorManager.getRecordPolicy());\n-            }\n-    \n+        CommunicationIdentityClientBuilder builder = new CommunicationIdentityClientBuilder();\n+        builder.endpoint(ENDPOINT)\n+            .accessKey(ACCESSKEY);\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(interceptorManager.getPlaybackClient());\n+            return builder;\n+        } else {\n+            HttpClient client = new NettyAsyncHttpClientBuilder().build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc1OTc1OQ=="}, "originalCommit": {"oid": "bc072382d081b07941295ea298a59b1b59d80a34"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODAxMDM4OnYy", "diffSide": "RIGHT", "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/CommunicationIdentityClientBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODozODo0NlrOHiVLPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMTowMTowN1rOHigv0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2MDU3Mg==", "bodyText": "If the user doesn't have to create the CommunicationClientCredential instance directly, can that type be moved to implementation package?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r505760572", "createdAt": "2020-10-15T18:38:46Z", "author": {"login": "srnagar"}, "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/CommunicationIdentityClientBuilder.java", "diffHunk": "@@ -70,12 +71,29 @@ public CommunicationIdentityClientBuilder pipeline(HttpPipeline pipeline) {\n     /**\n      * Set credential to use\n      *\n-     * @param credential credential for signing, overridden by the\n-     * pipeline field.\n+     * @param accessKey access key for initalizing CommunicationClientCredential\n      * @return CommunicationIdentityClientBuilder\n      */\n-    public CommunicationIdentityClientBuilder credential(CommunicationClientCredential credential) {\n-        this.credential = Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n+    public CommunicationIdentityClientBuilder accessKey(String accessKey) {\n+        Objects.requireNonNull(accessKey, \"'accessKey' cannot be null.\");\n+        this.credential = new CommunicationClientCredential(accessKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc072382d081b07941295ea298a59b1b59d80a34"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk1MDE2Mg==", "bodyText": "@srnagar Same as the ConnectionString comment, the CommunicationClientCredential is used in other packages as well. Let me know what your thoughts are on this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15917#discussion_r505950162", "createdAt": "2020-10-16T01:01:07Z", "author": {"login": "minnieliu"}, "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/CommunicationIdentityClientBuilder.java", "diffHunk": "@@ -70,12 +71,29 @@ public CommunicationIdentityClientBuilder pipeline(HttpPipeline pipeline) {\n     /**\n      * Set credential to use\n      *\n-     * @param credential credential for signing, overridden by the\n-     * pipeline field.\n+     * @param accessKey access key for initalizing CommunicationClientCredential\n      * @return CommunicationIdentityClientBuilder\n      */\n-    public CommunicationIdentityClientBuilder credential(CommunicationClientCredential credential) {\n-        this.credential = Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n+    public CommunicationIdentityClientBuilder accessKey(String accessKey) {\n+        Objects.requireNonNull(accessKey, \"'accessKey' cannot be null.\");\n+        this.credential = new CommunicationClientCredential(accessKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2MDU3Mg=="}, "originalCommit": {"oid": "bc072382d081b07941295ea298a59b1b59d80a34"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 770, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}