{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTIyMDcy", "number": 13585, "title": "Fixed redundant source was empty reactor errors on calling single()", "bodyText": "Fixed redundant source was empty reactor errors on unnecessary single() operator use\n\n\nThis PR fixes issue : #12809\n\n\nWe have unnecessary .single() operators in the chain, which causes reactor streams to blow up when backend throws errors like not found, etc.\n\n\nThis behavior causes errors in reactor streams chain, because having .single() operator makes sure that reactor chain must have only one and only one element in the stream, whereas there are certain cases where this doesn't hold true.\n\n\nNormally this error will not happen, but in case user tries to use operators like onErrorContinue -> upstream needs to handle consecutive requests, which then blows up the whole stream.\n\n\nThis PR fixes the above issue by removing unnecessary .single() operators from the reactive chain.\n\n\nMore information on .single() -> https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html#single--\n\n\nMore information on .onErrorContinue() -> https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html#onErrorContinue-java.util.function.BiConsumer-\n\n\nSample stack trace with .single() operator in place ->\n\n\n2020-07-12 05:39:05.932 DEBUG 31050 --- [nio-8080-exec-1] c.a.c.i.RxDocumentClientImpl : Reading a Document. documentLink: [/dbs/xxxx/colls/xxxx/docs/987D9D0A379BEA8799F66B844EE5009370EE00E499B3BB4C5D79604E34705C9F]\n2020-07-12 05:39:05.942 DEBUG 31050 --- [nio-8080-exec-1] c.a.c.implementation.caches.AsyncCache : cache[dbs/xxxx/colls/xxxx] doesn't exist, computing new value\n2020-07-12 05:39:05.944 DEBUG 31050 --- [nio-8080-exec-1] c.a.c.implementation.caches.AsyncLazy : constructor\n2020-07-12 05:39:05.949 DEBUG 31050 --- [nio-8080-exec-1] c.a.c.implementation.caches.AsyncLazy : using Function<Mono> com.azure.cosmos.implementation.caches.RxCollectionCache$$Lambda$888/77697127@68a3501b\n2020-07-12 05:39:07.500 DEBUG 31050 --- [or-http-epoll-3] c.a.c.implementation.caches.AsyncCache : set cache[U7N-AMLYxTE=]={\"id\":\"dev_rrs2\",\"indexingPolicy\":{\"indexingMode\":\"consistent\",\"automatic\":true,\"includedPaths\":[{\"path\":\"/*\"}],\"excludedPaths\":[{\"path\":\"/\"_etag\"/?\"}]},\"partitionKey\":{\"paths\":[\"/pkey\"],\"kind\":\"Hash\"},\"defaultTtl\":15768000,\"uniqueKeyPolicy\":{\"uniqueKeys\":[]},\"conflictResolutionPolicy\":{\"mode\":\"LastWriterWins\",\"conflictResolutionPath\":\"/_ts\",\"conflictResolutionProcedure\":\"\"},\"geospatialConfig\":{\"type\":\"Geography\"},\"_rid\":\"U7N-AMLYxTE=\",\"_ts\":1591870911,\"_self\":\"dbs/U7N-AA==/colls/U7N-AMLYxTE=/\",\"_etag\":\"\"00000a00-0000-0100-0000-5ee205bf0000\"\",\"_docs\":\"docs/\",\"_sprocs\":\"sprocs/\",\"_triggers\":\"triggers/\",\"_udfs\":\"udfs/\",\"_conflicts\":\"conflicts/\"}\n2020-07-12 05:39:08.846 ERROR 31050 --- [or-http-epoll-3] c.n.s.d.ShastaCosmosAsyncReactorDatabase : Cosmos error in getAllReputation with details Entity with the specified id does not exist in the system.,\nRequestStartTime: 2020-07-12T05:39:08.7550525Z, RequestEndTime: 2020-07-12T05:39:08.7750218Z, Number of regions attempted:1\nResponseTime: 2020-07-12T05:39:08.7750218Z, StoreResult: StorePhysicalAddress: rntbd://cdb-ms-prod-eastus1-fd25.documents.azure.com:14387/apps/a04b47e5-fda2-42d3-8618-c1c07375b03c/services/78437eb2-bb1a-41e7-9794-99c478425bfa/partitions/cc91d841-9093-40a9-8e3a-c16a05d5ee14/replicas/132384375699834544s/, LSN: 295, GlobalCommittedLsn: 294, PartitionKeyRangeId: 0, IsValid: True, StatusCode: 404, SubStatusCode: 0, RequestCharge: 1, ItemLSN: -1, SessionToken: -1#295, UsingLocalLSN: True, TransportException: null, ResourceType: Document, OperationType: Read\n, Microsoft.Azure.Documents.Common/2.11.0, StatusCode: NotFound\n2020-07-12 05:39:08.894 ERROR 31050 --- [or-http-epoll-3] c.a.c.i.RxGatewayStoreModel : Network failure\n\njava.util.NoSuchElementException: Source was empty\nat reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:165) ~[reactor-core-3.3.6.RELEASE.jar:3.3.6.RELEASE]\nat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136) ~[reactor-core-3.3.6.RELEASE.jar:3.3.6.RELEASE]\nat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78) ~[reactor-core-3.3.6.RELEASE.jar:3.3.6.RELEASE]\nat reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:206) ~[reactor-core-3.3.6.RELEASE.jar:3.3.6.RELEASE]\nat reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:262) ~[reactor-core-3.3.6.RELEASE.jar:3.3.6.RELEASE]\nat reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onComplete(FluxDoFinally.java:138) ~[reactor-core-3.3.6.RELEASE.jar:3.3.6.RELEASE]\nat reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onComplete(FluxHandleFuseable.java:223) ~[reactor-core-3.3.6.RELEASE.jar:3.3.6.RELEASE]\nat reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onComplete(FluxContextStart.java:115) ~[reactor-core-3.3.6.RELEASE.jar:3.3.6.RELEASE]\nat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1783) ~[reactor-core-3.3.6.RELEASE.jar:3.3.6.RELEASE]\nat reactor.core.publisher.MonoCollectList$MonoCollectListSubscriber.onComplete(MonoCollectList.java:121) ~[reactor-core-3.3.6.RELEASE.jar:3.3.6.RELEASE]\nat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252) ~[reactor-core-3.3.6.RELEASE.jar:3.3.6.RELEASE]\nat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136) ~[reactor-core-3.3.6.RELEASE.jar:3.3.6.RELEASE]\nat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:365) ~[reactor-netty-0.9.8.RELEASE.jar:0.9.8.RELEASE]\nat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:368) ~[reactor-netty-0.9.8.RELEASE.jar:0.9.8.RELEASE]\nat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:424) ~[reactor-netty-0.9.8.RELEASE.jar:0.9.8.RELEASE]\nat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:613) ~[reactor-netty-0.9.8.RELEASE.jar:0.9.8.RELEASE]\nat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:96) ~[reactor-netty-0.9.8.RELEASE.jar:0.9.8.RELEASE]\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) ~[netty-transport-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) ~[netty-transport-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357) ~[netty-transport-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436) ~[netty-transport-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:324) ~[netty-codec-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:296) ~[netty-codec-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251) ~[netty-transport-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) ~[netty-transport-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) ~[netty-transport-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357) ~[netty-transport-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:1518) ~[netty-handler-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.handler.ssl.SslHandler.decodeNonJdkCompatible(SslHandler.java:1279) ~[netty-handler-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.handler.ssl.SslHandler.decode(SslHandler.java:1316) ~[netty-handler-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:501) ~[netty-codec-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:440) ~[netty-codec-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276) ~[netty-codec-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) ~[netty-transport-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) ~[netty-transport-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357) ~[netty-transport-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410) ~[netty-transport-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) ~[netty-transport-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) ~[netty-transport-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919) ~[netty-transport-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:792) ~[netty-transport-native-epoll-4.1.50.Final-linux-x86_64.jar:4.1.50.Final]\nat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:475) ~[netty-transport-native-epoll-4.1.50.Final-linux-x86_64.jar:4.1.50.Final]\nat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:378) ~[netty-transport-native-epoll-4.1.50.Final-linux-x86_64.jar:4.1.50.Final]\nat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989) ~[netty-common-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) ~[netty-common-4.1.50.Final.jar:4.1.50.Final]\nat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) ~[netty-common-4.1.50.Final.jar:4.1.50.Final]\nat java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_191]\n\n2020-07-12 05:39:08.903 ERROR 31050 --- [or-http-epoll-3] c.n.s.d.ShastaCosmosAsyncReactorDatabase : Cosmos error in getAllReputation with details null\n\nNotice how it has 2 errors, 1 for not found document, which is a valid one, while other error is just in the reactor chain because of .single() use.\nThis PR fixes the above issue and makes sure there is only one error in the stack.", "createdAt": "2020-07-29T00:15:02Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13585", "merged": true, "mergeCommit": {"oid": "f75647f52e374a008223f64abd9f4b3e11f76cde"}, "closed": true, "closedAt": "2020-07-29T05:26:22Z", "author": {"login": "kushagraThapar"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5foBMAH2gAyNDU4MTIyMDcyOjdmZDkwNzZmNGE0YmIyNmRkNmE0NDRmMTA5MDU5MTNkY2FlNGE1N2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5l8OVAFqTQ1NzI2Mzk4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7fd9076f4a4bb26dd6a444f10905913dcae4a57a", "author": {"user": {"login": "kushagraThapar", "name": "Kushagra Thapar"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7fd9076f4a4bb26dd6a444f10905913dcae4a57a", "committedDate": "2020-07-29T00:10:32Z", "message": "Fixed redundant source was empty reactor errors on calling single()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTE3NjI1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13585#pullrequestreview-457117625", "createdAt": "2020-07-29T00:31:42Z", "commit": {"oid": "7fd9076f4a4bb26dd6a444f10905913dcae4a57a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTIxMTI1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13585#pullrequestreview-457121125", "createdAt": "2020-07-29T00:43:37Z", "commit": {"oid": "7fd9076f4a4bb26dd6a444f10905913dcae4a57a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MjYzOTg0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13585#pullrequestreview-457263984", "createdAt": "2020-07-29T07:32:02Z", "commit": {"oid": "7fd9076f4a4bb26dd6a444f10905913dcae4a57a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzozMjowMlrOG4sIig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzozMjowMlrOG4sIig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5NjUyMg==", "bodyText": "What are empty scenarios for create?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13585#discussion_r462096522", "createdAt": "2020-07-29T07:32:02Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -500,8 +500,7 @@ TracerProvider getTracerProvider(){\n                                                              Context context) {\n         String spanName = \"createDatabase.\" + database.getId();\n         Mono<CosmosDatabaseResponse> responseMono = asyncDocumentClient.createDatabase(database, ModelBridgeInternal.toRequestOptions(options))\n-            .map(databaseResourceResponse -> ModelBridgeInternal.createCosmosDatabaseResponse(databaseResourceResponse))\n-            .single();\n+            .map(databaseResourceResponse -> ModelBridgeInternal.createCosmosDatabaseResponse(databaseResourceResponse));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd9076f4a4bb26dd6a444f10905913dcae4a57a"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 995, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}