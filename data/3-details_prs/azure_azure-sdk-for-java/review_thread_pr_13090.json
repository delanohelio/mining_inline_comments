{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4Mzg2MDM1", "number": 13090, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToxMjowN1rOEN9AzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjozNDoxMFrOEOVlaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDY2NTcyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/options/BlobChangeLeaseOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToxMjowN1rOGw2Juw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjo1OTowOVrOGw9nZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MjA1OQ==", "bodyText": "Is this a valid check here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13090#discussion_r453872059", "createdAt": "2020-07-13T19:12:07Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/options/BlobChangeLeaseOptions.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.options;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.storage.blob.models.BlobLeaseRequestConditions;\n+import com.azure.storage.common.implementation.StorageImplUtils;\n+\n+/**\n+ * Extended options that may be passed when changing a lease to a blob or container.\n+ */\n+@Fluent\n+public class BlobChangeLeaseOptions {\n+\n+    private final String proposedId;\n+    private BlobLeaseRequestConditions requestConditions;\n+\n+    /**\n+     * @param proposedId A new lease ID in a valid GUID format.\n+     */\n+    public BlobChangeLeaseOptions(String proposedId) {\n+        StorageImplUtils.assertNotNull(\"proposedId\", proposedId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59ec0f47500ba8e66c2b92d7ad39c2d9c226ea41"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5NDM0MQ==", "bodyText": "I think so. We probably want to be doing this on all the constructor values.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13090#discussion_r453994341", "createdAt": "2020-07-13T22:59:09Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/options/BlobChangeLeaseOptions.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.options;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.storage.blob.models.BlobLeaseRequestConditions;\n+import com.azure.storage.common.implementation.StorageImplUtils;\n+\n+/**\n+ * Extended options that may be passed when changing a lease to a blob or container.\n+ */\n+@Fluent\n+public class BlobChangeLeaseOptions {\n+\n+    private final String proposedId;\n+    private BlobLeaseRequestConditions requestConditions;\n+\n+    /**\n+     * @param proposedId A new lease ID in a valid GUID format.\n+     */\n+    public BlobChangeLeaseOptions(String proposedId) {\n+        StorageImplUtils.assertNotNull(\"proposedId\", proposedId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MjA1OQ=="}, "originalCommit": {"oid": "59ec0f47500ba8e66c2b92d7ad39c2d9c226ea41"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDY2NzMyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/options/BlobReleaseLeaseOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToxMjozMlrOGw2KnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToxMjozMlrOGw2KnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MjI4NQ==", "bodyText": "Change doc", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13090#discussion_r453872285", "createdAt": "2020-07-13T19:12:32Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/options/BlobReleaseLeaseOptions.java", "diffHunk": "@@ -0,0 +1,32 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.options;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.storage.blob.models.BlobLeaseRequestConditions;\n+\n+/**\n+ * Extended options that may be passed when renewing a lease to a blob or container.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59ec0f47500ba8e66c2b92d7ad39c2d9c226ea41"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDkyNjg0OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/AppendBlobRequestConditions.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDoyNzo0NVrOGw4msw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToxMjoxMVrOGy4y1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMjI0Mw==", "bodyText": "Maybe we should call the parameter ifTagsMatch or something? ifTags reads to me like it's just checking if there are tags present", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13090#discussion_r453912243", "createdAt": "2020-07-13T20:27:45Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/AppendBlobRequestConditions.java", "diffHunk": "@@ -82,6 +82,18 @@ public AppendBlobRequestConditions setLeaseId(String leaseId) {\n         return this;\n     }\n \n+    /**\n+     * Optionally applies the SQL statement to the tags of the blob.\n+     *\n+     * @param ifTags The SQL statement that apply to the tags of the blob.\n+     * @return The updated BlobRequestConditions object.\n+     */\n+    @Override\n+    public AppendBlobRequestConditions setIfTags(String ifTags) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3304a036aad9d1e12520522d34469d038556c8e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxNTI0MQ==", "bodyText": "I like that idea", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13090#discussion_r453915241", "createdAt": "2020-07-13T20:33:21Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/AppendBlobRequestConditions.java", "diffHunk": "@@ -82,6 +82,18 @@ public AppendBlobRequestConditions setLeaseId(String leaseId) {\n         return this;\n     }\n \n+    /**\n+     * Optionally applies the SQL statement to the tags of the blob.\n+     *\n+     * @param ifTags The SQL statement that apply to the tags of the blob.\n+     * @return The updated BlobRequestConditions object.\n+     */\n+    @Override\n+    public AppendBlobRequestConditions setIfTags(String ifTags) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMjI0Mw=="}, "originalCommit": {"oid": "f3304a036aad9d1e12520522d34469d038556c8e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzOTI2MQ==", "bodyText": "There's a lot of over conditions that can be checked related to tags.  In .NET, we went with TagConditions", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13090#discussion_r455939261", "createdAt": "2020-07-16T17:07:10Z", "author": {"login": "seanmcc-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/AppendBlobRequestConditions.java", "diffHunk": "@@ -82,6 +82,18 @@ public AppendBlobRequestConditions setLeaseId(String leaseId) {\n         return this;\n     }\n \n+    /**\n+     * Optionally applies the SQL statement to the tags of the blob.\n+     *\n+     * @param ifTags The SQL statement that apply to the tags of the blob.\n+     * @return The updated BlobRequestConditions object.\n+     */\n+    @Override\n+    public AppendBlobRequestConditions setIfTags(String ifTags) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMjI0Mw=="}, "originalCommit": {"oid": "f3304a036aad9d1e12520522d34469d038556c8e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxMjUwMg==", "bodyText": "Changed to tagsConditions", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13090#discussion_r456012502", "createdAt": "2020-07-16T19:12:11Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/AppendBlobRequestConditions.java", "diffHunk": "@@ -82,6 +82,18 @@ public AppendBlobRequestConditions setLeaseId(String leaseId) {\n         return this;\n     }\n \n+    /**\n+     * Optionally applies the SQL statement to the tags of the blob.\n+     *\n+     * @param ifTags The SQL statement that apply to the tags of the blob.\n+     * @return The updated BlobRequestConditions object.\n+     */\n+    @Override\n+    public AppendBlobRequestConditions setIfTags(String ifTags) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMjI0Mw=="}, "originalCommit": {"oid": "f3304a036aad9d1e12520522d34469d038556c8e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDY1NDYyOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobLeaseAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoyNDo1NVrOGxbZOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoyNDo1NVrOGxbZOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4MjIzMw==", "bodyText": "I think options can be null here, right?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13090#discussion_r454482233", "createdAt": "2020-07-14T16:24:55Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobLeaseAsyncClient.java", "diffHunk": "@@ -181,26 +213,47 @@ public String getLeaseId() {\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Response<String>> renewLeaseWithResponse(RequestConditions modifiedRequestConditions) {\n         try {\n-            return withContext(context -> renewLeaseWithResponse(modifiedRequestConditions,\n+            return withContext(context -> renewLeaseWithResponse(new BlobRenewLeaseOptions()\n+                    .setRequestConditions(ModelHelper.populateBlobLeaseRequestConditions(modifiedRequestConditions)),\n                 context));\n         } catch (RuntimeException ex) {\n             return monoError(logger, ex);\n         }\n     }\n \n-    Mono<Response<String>> renewLeaseWithResponse(RequestConditions modifiedRequestConditions, Context context) {\n-        modifiedRequestConditions = (modifiedRequestConditions == null)\n-            ? new RequestConditions() : modifiedRequestConditions;\n+    /**\n+     * Renews the previously acquired lease.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.BlobLeaseAsyncClient.renewLeaseWithResponse#BlobRenewLeaseOptions}\n+     *\n+     * @param options {@link BlobRenewLeaseOptions}\n+     * @return A reactive response containing the renewed lease ID.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<String>> renewLeaseWithResponse(BlobRenewLeaseOptions options) {\n+        try {\n+            return withContext(context -> renewLeaseWithResponse(options, context));\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    Mono<Response<String>> renewLeaseWithResponse(BlobRenewLeaseOptions options, Context context) {\n+        StorageImplUtils.assertNotNull(\"options\", options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c656c34e1c6dc12a3130a362ba33e458c51764a2"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDY5MTYwOnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/BlobAPITest.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjozNDoxMFrOGxbwyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODoxMToxNFrOGyKAgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4ODI2NQ==", "bodyText": "Why didn't you use the same data table as get/set tags?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13090#discussion_r454488265", "createdAt": "2020-07-14T16:34:10Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/BlobAPITest.groovy", "diffHunk": "@@ -2232,6 +2357,38 @@ class BlobAPITest extends APISpec {\n         thrown(BlobStorageException)\n     }\n \n+    def \"Set tier tags\"() {\n+        setup:\n+        def cc = blobServiceClient.createBlobContainer(generateContainerName())\n+        def bc = cc.getBlobClient(generateBlobName()).getBlockBlobClient()\n+        bc.upload(defaultInputStream.get(), defaultDataSize)\n+        def t = new HashMap<String, String>()\n+        t.put(\"foo\", \"bar\")\n+        bc.setTags(t)\n+\n+        when:\n+        bc.setAccessTierWithResponse(new BlobSetAccessTierOptions(AccessTier.HOT).setIfTags(\"\\\"foo\\\" = 'bar'\"), null, null)\n+\n+        then:\n+        notThrown(BlobStorageException)\n+\n+        cleanup:\n+        cc.delete()\n+    }\n+\n+    def \"Set tier tags fail\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c656c34e1c6dc12a3130a362ba33e458c51764a2"}, "originalPosition": 660}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI0NTk1NQ==", "bodyText": "This one already had a set tier lease and set tier lease fail. I could combine those 2 into one if you prefer but it was easier for me just to add these tests like this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13090#discussion_r455245955", "createdAt": "2020-07-15T18:11:14Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/BlobAPITest.groovy", "diffHunk": "@@ -2232,6 +2357,38 @@ class BlobAPITest extends APISpec {\n         thrown(BlobStorageException)\n     }\n \n+    def \"Set tier tags\"() {\n+        setup:\n+        def cc = blobServiceClient.createBlobContainer(generateContainerName())\n+        def bc = cc.getBlobClient(generateBlobName()).getBlockBlobClient()\n+        bc.upload(defaultInputStream.get(), defaultDataSize)\n+        def t = new HashMap<String, String>()\n+        t.put(\"foo\", \"bar\")\n+        bc.setTags(t)\n+\n+        when:\n+        bc.setAccessTierWithResponse(new BlobSetAccessTierOptions(AccessTier.HOT).setIfTags(\"\\\"foo\\\" = 'bar'\"), null, null)\n+\n+        then:\n+        notThrown(BlobStorageException)\n+\n+        cleanup:\n+        cc.delete()\n+    }\n+\n+    def \"Set tier tags fail\"() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4ODI2NQ=="}, "originalCommit": {"oid": "c656c34e1c6dc12a3130a362ba33e458c51764a2"}, "originalPosition": 660}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4998, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}