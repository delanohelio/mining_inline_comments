{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1ODg4ODYx", "number": 15851, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDozMToyMlrOEp-oTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMTo1NTo0MlrOEp_ANA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDUzMTk4OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/main/java/com/azure/security/keyvault/certificates/models/KeyVaultCertificateIdentifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDozMToyMlrOHb-fOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDozMToyMlrOHb-fOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NzQwMQ==", "bodyText": "It is better to catch the MalformedURLException and wrap it with IllegalArgumentException with a custom message and attach the MalformedURLException as a cause.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15851#discussion_r499097401", "createdAt": "2020-10-03T00:31:22Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/main/java/com/azure/security/keyvault/certificates/models/KeyVaultCertificateIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.certificates.models;\n+\n+import com.azure.security.keyvault.certificates.CertificateAsyncClient;\n+import com.azure.security.keyvault.certificates.CertificateClient;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+/**\n+ * Information about a {@link KeyVaultCertificate} parsed from the certificate URL. You can use this information when\n+ * calling methods of {@link CertificateClient} or {@link CertificateAsyncClient}.\n+ */\n+public final class KeyVaultCertificateIdentifier {\n+    private final String certificateId, vaultUrl, name, version;\n+\n+    private KeyVaultCertificateIdentifier(String certificateId, String vaultUrl, String name, String version) {\n+        this.certificateId = certificateId;\n+        this.vaultUrl = vaultUrl;\n+        this.name = name;\n+        this.version = version;\n+    }\n+\n+    /**\n+     * Gets the key identifier used to create this object\n+     *\n+     * @return The certificate identifier.\n+     */\n+    public String getCertificateId() {\n+        return certificateId;\n+    }\n+\n+    /**\n+     * Gets the URL of the Key Vault.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Gets the name of the certificate.\n+     *\n+     * @return The certificate name.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the optional version of the certificate.\n+     *\n+     * @return The certificate version.\n+     */\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    /**\n+     * Create a new {@link KeyVaultCertificateIdentifier} from a given certificate identifier.\n+     *\n+     * <p>Valid examples are:\n+     *\n+     * <ul>\n+     *     <li>https://{key-vault-name}.vault.azure.net/certificates/{certificate-name}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/certificates/{certificate-name}/pending</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/certificates/{certificate-name}/{unique-version-id}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/deletedcertificates/{deleted-certificate-name}</li>\n+     * </ul>\n+     *\n+     * @param certificateId The certificate identifier to extract information from.\n+     * @return a new instance of {@link KeyVaultCertificateIdentifier}.\n+     * @throws IllegalArgumentException if the given identifier is {@code null}.\n+     * @throws MalformedURLException if the given identifier is not a valid Key Vault Certificate identifier\n+     */\n+    public static KeyVaultCertificateIdentifier parse(String certificateId) throws IllegalArgumentException, MalformedURLException {\n+        if (certificateId == null) {\n+            throw new IllegalArgumentException(\"certificateId cannot be null\");\n+        }\n+\n+        URL url = new URL(certificateId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb4b28f2788eb64ff1b7f385b46ef3debb809c0"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDUzMzk1OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/main/java/com/azure/security/keyvault/certificates/models/KeyVaultCertificateIdentifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDozMzoyM1rOHb-gLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDozMzoyM1rOHb-gLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NzY0Nw==", "bodyText": "this can be refactored and made readable with String.format command.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15851#discussion_r499097647", "createdAt": "2020-10-03T00:33:23Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/main/java/com/azure/security/keyvault/certificates/models/KeyVaultCertificateIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.certificates.models;\n+\n+import com.azure.security.keyvault.certificates.CertificateAsyncClient;\n+import com.azure.security.keyvault.certificates.CertificateClient;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+/**\n+ * Information about a {@link KeyVaultCertificate} parsed from the certificate URL. You can use this information when\n+ * calling methods of {@link CertificateClient} or {@link CertificateAsyncClient}.\n+ */\n+public final class KeyVaultCertificateIdentifier {\n+    private final String certificateId, vaultUrl, name, version;\n+\n+    private KeyVaultCertificateIdentifier(String certificateId, String vaultUrl, String name, String version) {\n+        this.certificateId = certificateId;\n+        this.vaultUrl = vaultUrl;\n+        this.name = name;\n+        this.version = version;\n+    }\n+\n+    /**\n+     * Gets the key identifier used to create this object\n+     *\n+     * @return The certificate identifier.\n+     */\n+    public String getCertificateId() {\n+        return certificateId;\n+    }\n+\n+    /**\n+     * Gets the URL of the Key Vault.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Gets the name of the certificate.\n+     *\n+     * @return The certificate name.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the optional version of the certificate.\n+     *\n+     * @return The certificate version.\n+     */\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    /**\n+     * Create a new {@link KeyVaultCertificateIdentifier} from a given certificate identifier.\n+     *\n+     * <p>Valid examples are:\n+     *\n+     * <ul>\n+     *     <li>https://{key-vault-name}.vault.azure.net/certificates/{certificate-name}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/certificates/{certificate-name}/pending</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/certificates/{certificate-name}/{unique-version-id}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/deletedcertificates/{deleted-certificate-name}</li>\n+     * </ul>\n+     *\n+     * @param certificateId The certificate identifier to extract information from.\n+     * @return a new instance of {@link KeyVaultCertificateIdentifier}.\n+     * @throws IllegalArgumentException if the given identifier is {@code null}.\n+     * @throws MalformedURLException if the given identifier is not a valid Key Vault Certificate identifier\n+     */\n+    public static KeyVaultCertificateIdentifier parse(String certificateId) throws IllegalArgumentException, MalformedURLException {\n+        if (certificateId == null) {\n+            throw new IllegalArgumentException(\"certificateId cannot be null\");\n+        }\n+\n+        URL url = new URL(certificateId);\n+        // We expect an identifier with either 2 or 3 path segments: collection + name [+ version]\n+        String[] pathSegments = url.getPath().split(\"/\");\n+\n+        if ((pathSegments.length != 3 && pathSegments.length != 4) // More or less segments in the URI than expected.\n+            || !\"https\".equals(url.getProtocol()) // Invalid protocol.\n+            || (!\"certificates\".equals(pathSegments[1]) && !\"deletedcertificates\".equals(pathSegments[1])) // Invalid collection.\n+            || (\"deletedcertificates\".equals(pathSegments[1]) && pathSegments.length == 4)) { // Deleted items do not include a version.\n+            throw new IllegalArgumentException(\"certificateId is not a valid Key Vault Certificate identifier\");\n+        }\n+\n+        return new KeyVaultCertificateIdentifier(certificateId, url.getProtocol() + \"://\" + url.getHost(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb4b28f2788eb64ff1b7f385b46ef3debb809c0"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDU5MjQ4OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/models/KeyVaultKeyIdentifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMTo1NTowMVrOHb--tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMTo1NTowMVrOHb--tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwNTQ2MA==", "bodyText": "same feedback as certs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15851#discussion_r499105460", "createdAt": "2020-10-03T01:55:01Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/models/KeyVaultKeyIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.models;\n+\n+import com.azure.security.keyvault.keys.KeyAsyncClient;\n+import com.azure.security.keyvault.keys.KeyClient;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+/**\n+ * Information about a {@link KeyVaultKey} parsed from the key URL. You can use this information when calling methods\n+ * of {@link KeyClient} or {@link KeyAsyncClient}.\n+ */\n+public final class KeyVaultKeyIdentifier {\n+    private final String keyId, vaultUrl, name, version;\n+\n+    private KeyVaultKeyIdentifier(String keyId, String vaultUrl, String name, String version) {\n+        this.keyId = keyId;\n+        this.vaultUrl = vaultUrl;\n+        this.name = name;\n+        this.version = version;\n+    }\n+\n+    /**\n+     * Gets the key identifier used to create this object.\n+     *\n+     * @return The key identifier.\n+     */\n+    public String getKeyId() {\n+        return keyId;\n+    }\n+\n+    /**\n+     * Gets the URL of the Key Vault.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Gets the name of the key.\n+     *\n+     * @return The key name.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the optional version of the key.\n+     *\n+     * @return The key version.\n+     */\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    /**\n+     * Create a new {@link KeyVaultKeyIdentifier} from a given key identifier.\n+     *\n+     * <p>Valid examples are:\n+     *\n+     * <ul>\n+     *     <li>https://{key-vault-name}.vault.azure.net/keys/{key-name}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/keys/{key-name}/pending</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/keys/{key-name}/{unique-version-id}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/deletedkeys/{deleted-key-name}</li>\n+     * </ul>\n+     *\n+     * @param keyId The key identifier to extract information from.\n+     * @return a new instance of {@link KeyVaultKeyIdentifier}.\n+     * @throws IllegalArgumentException if the given identifier is {@code null}.\n+     * @throws MalformedURLException if the given identifier is not a valid Key Vault Key identifier\n+     */\n+    public static KeyVaultKeyIdentifier parse(String keyId) throws IllegalArgumentException, MalformedURLException {\n+        if (keyId == null) {\n+            throw new IllegalArgumentException(\"keyId cannot be null\");\n+        }\n+\n+        URL url = new URL(keyId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb4b28f2788eb64ff1b7f385b46ef3debb809c0"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDU5Mjg5OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/models/KeyVaultKeyIdentifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMTo1NToyMVrOHb--4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMTo1NToyMVrOHb--4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwNTUwNg==", "bodyText": "same feedback as certs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15851#discussion_r499105506", "createdAt": "2020-10-03T01:55:21Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/models/KeyVaultKeyIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.models;\n+\n+import com.azure.security.keyvault.keys.KeyAsyncClient;\n+import com.azure.security.keyvault.keys.KeyClient;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+/**\n+ * Information about a {@link KeyVaultKey} parsed from the key URL. You can use this information when calling methods\n+ * of {@link KeyClient} or {@link KeyAsyncClient}.\n+ */\n+public final class KeyVaultKeyIdentifier {\n+    private final String keyId, vaultUrl, name, version;\n+\n+    private KeyVaultKeyIdentifier(String keyId, String vaultUrl, String name, String version) {\n+        this.keyId = keyId;\n+        this.vaultUrl = vaultUrl;\n+        this.name = name;\n+        this.version = version;\n+    }\n+\n+    /**\n+     * Gets the key identifier used to create this object.\n+     *\n+     * @return The key identifier.\n+     */\n+    public String getKeyId() {\n+        return keyId;\n+    }\n+\n+    /**\n+     * Gets the URL of the Key Vault.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Gets the name of the key.\n+     *\n+     * @return The key name.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the optional version of the key.\n+     *\n+     * @return The key version.\n+     */\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    /**\n+     * Create a new {@link KeyVaultKeyIdentifier} from a given key identifier.\n+     *\n+     * <p>Valid examples are:\n+     *\n+     * <ul>\n+     *     <li>https://{key-vault-name}.vault.azure.net/keys/{key-name}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/keys/{key-name}/pending</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/keys/{key-name}/{unique-version-id}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/deletedkeys/{deleted-key-name}</li>\n+     * </ul>\n+     *\n+     * @param keyId The key identifier to extract information from.\n+     * @return a new instance of {@link KeyVaultKeyIdentifier}.\n+     * @throws IllegalArgumentException if the given identifier is {@code null}.\n+     * @throws MalformedURLException if the given identifier is not a valid Key Vault Key identifier\n+     */\n+    public static KeyVaultKeyIdentifier parse(String keyId) throws IllegalArgumentException, MalformedURLException {\n+        if (keyId == null) {\n+            throw new IllegalArgumentException(\"keyId cannot be null\");\n+        }\n+\n+        URL url = new URL(keyId);\n+        // We expect an identifier with either 2 or 3 path segments: collection + name [+ version]\n+        String[] pathSegments = url.getPath().split(\"/\");\n+\n+        if ((pathSegments.length != 3 && pathSegments.length != 4) // More or less segments in the URI than expected.\n+            || !\"https\".equals(url.getProtocol()) // Invalid protocol.\n+            || (!\"keys\".equals(pathSegments[1]) && !\"deletedkeys\".equals(pathSegments[1])) // Invalid collection.\n+            || (\"deletedkeys\".equals(pathSegments[1]) && pathSegments.length == 4)) { // Deleted items do not include a version.\n+            throw new IllegalArgumentException(\"keyId is not a valid Key Vault Key identifier\");\n+        }\n+\n+        return new KeyVaultKeyIdentifier(keyId, url.getProtocol() + \"://\" + url.getHost(), pathSegments[2],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb4b28f2788eb64ff1b7f385b46ef3debb809c0"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDU5MzAwOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/models/KeyVaultSecretIdentifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMTo1NTozNVrOHb--8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMTo1NTozNVrOHb--8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwNTUyMQ==", "bodyText": "same feedback.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15851#discussion_r499105521", "createdAt": "2020-10-03T01:55:35Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/models/KeyVaultSecretIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.secrets.models;\n+\n+import com.azure.security.keyvault.secrets.SecretAsyncClient;\n+import com.azure.security.keyvault.secrets.SecretClient;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+/**\n+ * Information about a {@link KeyVaultSecret} parsed from the secret URL. You can use this information when calling\n+ * methods of {@link SecretClient} or {@link SecretAsyncClient}.\n+ */\n+public final class KeyVaultSecretIdentifier {\n+    private final String secretId, vaultUrl, name, version;\n+\n+    private KeyVaultSecretIdentifier(String secretId, String vaultUrl, String name, String version) {\n+        this.secretId = secretId;\n+        this.vaultUrl = vaultUrl;\n+        this.name = name;\n+        this.version = version;\n+    }\n+\n+    /**\n+     * Gets the key identifier used to create this object\n+     *\n+     * @return The secret identifier.\n+     */\n+    public String getSecretId() {\n+        return secretId;\n+    }\n+\n+    /**\n+     * Gets the URL of the Key Vault.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Gets the name of the secret.\n+     *\n+     * @return The secret name.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the optional version of the secret.\n+     *\n+     * @return The secret version.\n+     */\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    /**\n+     * Create a new {@link KeyVaultSecretIdentifier} from a given secret identifier.\n+     *\n+     * <p>Valid examples are:\n+     *\n+     * <ul>\n+     *     <li>https://{key-vault-name}.vault.azure.net/secrets/{secret-name}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/secrets/{secret-name}/pending</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/secrets/{secret-name}/{unique-version-id}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/deletedsecrets/{deleted-secret-name}</li>\n+     * </ul>\n+     *\n+     * @param secretId The secret identifier to extract information from.\n+     * @return a new instance of {@link KeyVaultSecretIdentifier}.\n+     * @throws IllegalArgumentException if the given identifier is {@code null}.\n+     * @throws MalformedURLException if the given identifier is not a valid Key Vault Secret identifier\n+     */\n+    public static KeyVaultSecretIdentifier parse(String secretId) throws IllegalArgumentException, MalformedURLException {\n+        if (secretId == null) {\n+            throw new IllegalArgumentException(\"secretId cannot be null\");\n+        }\n+\n+        URL url = new URL(secretId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb4b28f2788eb64ff1b7f385b46ef3debb809c0"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDU5MzE2OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/models/KeyVaultSecretIdentifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMTo1NTo0MlrOHb-_Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMTo1NTo0MlrOHb-_Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwNTUzOA==", "bodyText": "same feedback.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15851#discussion_r499105538", "createdAt": "2020-10-03T01:55:42Z", "author": {"login": "g2vinay"}, "path": "sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/models/KeyVaultSecretIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.secrets.models;\n+\n+import com.azure.security.keyvault.secrets.SecretAsyncClient;\n+import com.azure.security.keyvault.secrets.SecretClient;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+/**\n+ * Information about a {@link KeyVaultSecret} parsed from the secret URL. You can use this information when calling\n+ * methods of {@link SecretClient} or {@link SecretAsyncClient}.\n+ */\n+public final class KeyVaultSecretIdentifier {\n+    private final String secretId, vaultUrl, name, version;\n+\n+    private KeyVaultSecretIdentifier(String secretId, String vaultUrl, String name, String version) {\n+        this.secretId = secretId;\n+        this.vaultUrl = vaultUrl;\n+        this.name = name;\n+        this.version = version;\n+    }\n+\n+    /**\n+     * Gets the key identifier used to create this object\n+     *\n+     * @return The secret identifier.\n+     */\n+    public String getSecretId() {\n+        return secretId;\n+    }\n+\n+    /**\n+     * Gets the URL of the Key Vault.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Gets the name of the secret.\n+     *\n+     * @return The secret name.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the optional version of the secret.\n+     *\n+     * @return The secret version.\n+     */\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    /**\n+     * Create a new {@link KeyVaultSecretIdentifier} from a given secret identifier.\n+     *\n+     * <p>Valid examples are:\n+     *\n+     * <ul>\n+     *     <li>https://{key-vault-name}.vault.azure.net/secrets/{secret-name}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/secrets/{secret-name}/pending</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/secrets/{secret-name}/{unique-version-id}</li>\n+     *     <li>https://{key-vault-name}.vault.azure.net/deletedsecrets/{deleted-secret-name}</li>\n+     * </ul>\n+     *\n+     * @param secretId The secret identifier to extract information from.\n+     * @return a new instance of {@link KeyVaultSecretIdentifier}.\n+     * @throws IllegalArgumentException if the given identifier is {@code null}.\n+     * @throws MalformedURLException if the given identifier is not a valid Key Vault Secret identifier\n+     */\n+    public static KeyVaultSecretIdentifier parse(String secretId) throws IllegalArgumentException, MalformedURLException {\n+        if (secretId == null) {\n+            throw new IllegalArgumentException(\"secretId cannot be null\");\n+        }\n+\n+        URL url = new URL(secretId);\n+        // We expect an identifier with either 2 or 3 path segments: collection + name [+ version]\n+        String[] pathSegments = url.getPath().split(\"/\");\n+\n+        if ((pathSegments.length != 3 && pathSegments.length != 4) // More or less segments in the URI than expected.\n+            || !\"https\".equals(url.getProtocol()) // Invalid protocol.\n+            || (!\"secrets\".equals(pathSegments[1]) && !\"deletedsecrets\".equals(pathSegments[1])) // Invalid collection.\n+            || (\"deletedsecrets\".equals(pathSegments[1]) && pathSegments.length == 4)) { // Deleted items do not include a version.\n+            throw new IllegalArgumentException(\"secretId is not a valid Key Vault Secret identifier\");\n+        }\n+\n+        return new KeyVaultSecretIdentifier(secretId, url.getProtocol() + \"://\" + url.getHost(), pathSegments[2],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb4b28f2788eb64ff1b7f385b46ef3debb809c0"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 729, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}