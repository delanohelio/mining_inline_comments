{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2Mzg2MzU2", "number": 13992, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMjo0ODo0MVrOEXaHbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMjo1MDoxOVrOEXaJDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTgwNTkxOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMjo0ODo0MVrOG_L0uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMzowMzoxMlrOG_MH5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwNzE5Mg==", "bodyText": "It would be useful log a warning if the method has any annotation but is non-public. It will let the users know that the visibility of the method is the reason for ignoring it. Same for field too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13992#discussion_r468907192", "createdAt": "2020-08-11T22:48:41Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -82,36 +84,70 @@ public String convertMemberName(Member member) {\n         if (Modifier.isTransient(member.getModifiers())) {\n             return null;\n         }\n+\n+        VisibilityChecker<?> visibilityChecker = mapper.getVisibilityChecker();\n         if (member instanceof Field) {\n             Field f = (Field) member;\n-            if (f.isAnnotationPresent(JsonIgnore.class)) {\n+\n+            if (f.isAnnotationPresent(JsonIgnore.class) || !visibilityChecker.isFieldVisible(f)) {\n                 return null;\n             }\n+\n             if (f.isAnnotationPresent(JsonProperty.class)) {\n                 String propertyName = f.getDeclaredAnnotation(JsonProperty.class).value();\n                 return CoreUtils.isNullOrEmpty(propertyName) ? f.getName() : propertyName;\n             }\n+\n             return f.getName();\n         }\n \n         if (member instanceof Method) {\n             Method m = (Method) member;\n-            String methodNameWithoutJavaBeans = removePrefix(m);\n-            if (m.isAnnotationPresent(JsonIgnore.class)) {\n+\n+            /*\n+             * If the method isn't a getter, is annotated with JsonIgnore, or isn't visible to the ObjectMapper ignore\n+             * it.\n+             */\n+            if (!verifyGetter(m)\n+                || m.isAnnotationPresent(JsonIgnore.class)\n+                || !visibilityChecker.isGetterVisible(m)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23a35540a142efd2576a7ed7830a17f3747b6524"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxMjEwMg==", "bodyText": "Only log in the instance of the method/field being ignored due to visibility and not due to annotations?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13992#discussion_r468912102", "createdAt": "2020-08-11T23:03:12Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -82,36 +84,70 @@ public String convertMemberName(Member member) {\n         if (Modifier.isTransient(member.getModifiers())) {\n             return null;\n         }\n+\n+        VisibilityChecker<?> visibilityChecker = mapper.getVisibilityChecker();\n         if (member instanceof Field) {\n             Field f = (Field) member;\n-            if (f.isAnnotationPresent(JsonIgnore.class)) {\n+\n+            if (f.isAnnotationPresent(JsonIgnore.class) || !visibilityChecker.isFieldVisible(f)) {\n                 return null;\n             }\n+\n             if (f.isAnnotationPresent(JsonProperty.class)) {\n                 String propertyName = f.getDeclaredAnnotation(JsonProperty.class).value();\n                 return CoreUtils.isNullOrEmpty(propertyName) ? f.getName() : propertyName;\n             }\n+\n             return f.getName();\n         }\n \n         if (member instanceof Method) {\n             Method m = (Method) member;\n-            String methodNameWithoutJavaBeans = removePrefix(m);\n-            if (m.isAnnotationPresent(JsonIgnore.class)) {\n+\n+            /*\n+             * If the method isn't a getter, is annotated with JsonIgnore, or isn't visible to the ObjectMapper ignore\n+             * it.\n+             */\n+            if (!verifyGetter(m)\n+                || m.isAnnotationPresent(JsonIgnore.class)\n+                || !visibilityChecker.isGetterVisible(m)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwNzE5Mg=="}, "originalCommit": {"oid": "23a35540a142efd2576a7ed7830a17f3747b6524"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTgxMDA0OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMjo1MDoxOVrOG_L3Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMzowMTozNVrOG_MF0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwNzc4Nw==", "bodyText": "Was this intended? Seems like random string in the javadoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13992#discussion_r468907787", "createdAt": "2020-08-11T22:50:19Z", "author": {"login": "srnagar"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClient.java", "diffHunk": "@@ -39,7 +39,7 @@\n \n     /**\n      * Package private constructor to be used by {@link SearchClientBuilder}\n-     *\n+     *classWithGettersWithAnnotations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23a35540a142efd2576a7ed7830a17f3747b6524"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxMTU3MQ==", "bodyText": "Likely an accidental paste, will remove it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13992#discussion_r468911571", "createdAt": "2020-08-11T23:01:35Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClient.java", "diffHunk": "@@ -39,7 +39,7 @@\n \n     /**\n      * Package private constructor to be used by {@link SearchClientBuilder}\n-     *\n+     *classWithGettersWithAnnotations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwNzc4Nw=="}, "originalCommit": {"oid": "23a35540a142efd2576a7ed7830a17f3747b6524"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1741, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}