{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNDI0NDI2", "number": 15737, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo1NDoyNFrOEoN6YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo1ODo0N1rOEoOADw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjA2NDMyOnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo1NDoyNFrOHZLfpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTowODozN1rOHZL88A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2NDc3Mg==", "bodyText": "I'd add a link to the issue rather than the number.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15737#discussion_r496164772", "createdAt": "2020-09-28T18:54:24Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/CHANGELOG.md", "diffHunk": "@@ -2,9 +2,16 @@\n \n ## 12.0.0-beta.2 (Unreleased)\n \n-### Fixes\n+### Changed\n+\n+- The `getEntity` methods have gained the `select` query option to allow for more efficient existence checks for a table entity #15289", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af3237f30929ec9bc00acc82e108af675e6d2ef5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3MjI3Mg==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15737#discussion_r496172272", "createdAt": "2020-09-28T19:08:37Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/CHANGELOG.md", "diffHunk": "@@ -2,9 +2,16 @@\n \n ## 12.0.0-beta.2 (Unreleased)\n \n-### Fixes\n+### Changed\n+\n+- The `getEntity` methods have gained the `select` query option to allow for more efficient existence checks for a table entity #15289", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2NDc3Mg=="}, "originalCommit": {"oid": "af3237f30929ec9bc00acc82e108af675e6d2ef5"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjA2OTM3OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo1NTo1MlrOHZLi8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMTowOTo0OFrOHZPu5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2NTYxOA==", "bodyText": "@alzimmermsft iirc, we use the timeout on reactor rather than the timeout to the generated rest client. (ie. .block(timeout)).... is this correct?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15737#discussion_r496165618", "createdAt": "2020-09-28T18:55:52Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClient.java", "diffHunk": "@@ -348,40 +347,61 @@ public void deleteEntity(String partitionKey, String rowKey, String eTag, Durati\n     }\n \n     /**\n-     * Queries and returns entities in the given table using the odata QueryOptions\n+     * gets the entity which fits the given criteria\n      *\n-     * @param options the odata query object\n-     * @param timeout max time for query to execute before erroring out\n-     * @return a list of the tables that fit the query\n+     * @param partitionKey the partition key of the entity\n+     * @param rowKey the row key of the entity\n+     * @return the table entity\n      */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedIterable<TableEntity> listEntities(ListEntitiesOptions options, Duration timeout) {\n-        return null;\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public TableEntity getEntity(String partitionKey, String rowKey) {\n+        return client.getEntity(partitionKey, rowKey).block();\n     }\n \n     /**\n      * gets the entity which fits the given criteria\n      *\n      * @param partitionKey the partition key of the entity\n      * @param rowKey the row key of the entity\n+     * @param select a select expression using OData notation. Limits the columns on each record to just those\n+     *               requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".\n      * @return the table entity\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public TableEntity getEntity(String partitionKey, String rowKey) {\n-        return client.getEntity(partitionKey, rowKey).block();\n+    public TableEntity getEntity(String partitionKey, String rowKey, String select) {\n+        return client.getEntity(partitionKey, rowKey, select).block();\n     }\n \n     /**\n      * gets the entity which fits the given criteria\n      *\n      * @param partitionKey the partition key of the entity\n      * @param rowKey the row key of the entity\n+     * @param select a select expression using OData notation. Limits the columns on each record to just those\n+     *               requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".\n+     * @param timeout max time for query to execute before erroring out\n+     * @return the table entity\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public TableEntity getEntity(String partitionKey, String rowKey, String select, Duration timeout) {\n+        return getEntityWithResponse(partitionKey, rowKey, select, timeout, null).getValue();\n+    }\n+\n+    /**\n+     * gets the entity which fits the given criteria\n+     *\n+     * @param partitionKey the partition key of the entity\n+     * @param rowKey the row key of the entity\n+     * @param select a select expression using OData notation. Limits the columns on each record to just those\n+     *               requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".\n+     * @param timeout max time for query to execute before erroring out\n      * @param context the context of the query\n      * @return a mono of the response with the table entity\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<TableEntity> getEntityWithResponse(String partitionKey, String rowKey, Context context) {\n-        return client.getEntityWithResponse(partitionKey, rowKey, new QueryOptions(), context).block();\n+    public Response<TableEntity> getEntityWithResponse(String partitionKey, String rowKey, String select,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af3237f30929ec9bc00acc82e108af675e6d2ef5"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2NjQ0NA==", "bodyText": "That is the pattern chosen by the Storage team", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15737#discussion_r496166444", "createdAt": "2020-09-28T18:57:26Z", "author": {"login": "alzimmermsft"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClient.java", "diffHunk": "@@ -348,40 +347,61 @@ public void deleteEntity(String partitionKey, String rowKey, String eTag, Durati\n     }\n \n     /**\n-     * Queries and returns entities in the given table using the odata QueryOptions\n+     * gets the entity which fits the given criteria\n      *\n-     * @param options the odata query object\n-     * @param timeout max time for query to execute before erroring out\n-     * @return a list of the tables that fit the query\n+     * @param partitionKey the partition key of the entity\n+     * @param rowKey the row key of the entity\n+     * @return the table entity\n      */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedIterable<TableEntity> listEntities(ListEntitiesOptions options, Duration timeout) {\n-        return null;\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public TableEntity getEntity(String partitionKey, String rowKey) {\n+        return client.getEntity(partitionKey, rowKey).block();\n     }\n \n     /**\n      * gets the entity which fits the given criteria\n      *\n      * @param partitionKey the partition key of the entity\n      * @param rowKey the row key of the entity\n+     * @param select a select expression using OData notation. Limits the columns on each record to just those\n+     *               requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".\n      * @return the table entity\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public TableEntity getEntity(String partitionKey, String rowKey) {\n-        return client.getEntity(partitionKey, rowKey).block();\n+    public TableEntity getEntity(String partitionKey, String rowKey, String select) {\n+        return client.getEntity(partitionKey, rowKey, select).block();\n     }\n \n     /**\n      * gets the entity which fits the given criteria\n      *\n      * @param partitionKey the partition key of the entity\n      * @param rowKey the row key of the entity\n+     * @param select a select expression using OData notation. Limits the columns on each record to just those\n+     *               requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".\n+     * @param timeout max time for query to execute before erroring out\n+     * @return the table entity\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public TableEntity getEntity(String partitionKey, String rowKey, String select, Duration timeout) {\n+        return getEntityWithResponse(partitionKey, rowKey, select, timeout, null).getValue();\n+    }\n+\n+    /**\n+     * gets the entity which fits the given criteria\n+     *\n+     * @param partitionKey the partition key of the entity\n+     * @param rowKey the row key of the entity\n+     * @param select a select expression using OData notation. Limits the columns on each record to just those\n+     *               requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".\n+     * @param timeout max time for query to execute before erroring out\n      * @param context the context of the query\n      * @return a mono of the response with the table entity\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<TableEntity> getEntityWithResponse(String partitionKey, String rowKey, Context context) {\n-        return client.getEntityWithResponse(partitionKey, rowKey, new QueryOptions(), context).block();\n+    public Response<TableEntity> getEntityWithResponse(String partitionKey, String rowKey, String select,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2NTYxOA=="}, "originalCommit": {"oid": "af3237f30929ec9bc00acc82e108af675e6d2ef5"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4NjA4OQ==", "bodyText": "Yeah. It would be good to know if the other language teams use the timeout parameter for the auto generated rest client or a client-side one.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15737#discussion_r496186089", "createdAt": "2020-09-28T19:35:32Z", "author": {"login": "conniey"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClient.java", "diffHunk": "@@ -348,40 +347,61 @@ public void deleteEntity(String partitionKey, String rowKey, String eTag, Durati\n     }\n \n     /**\n-     * Queries and returns entities in the given table using the odata QueryOptions\n+     * gets the entity which fits the given criteria\n      *\n-     * @param options the odata query object\n-     * @param timeout max time for query to execute before erroring out\n-     * @return a list of the tables that fit the query\n+     * @param partitionKey the partition key of the entity\n+     * @param rowKey the row key of the entity\n+     * @return the table entity\n      */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedIterable<TableEntity> listEntities(ListEntitiesOptions options, Duration timeout) {\n-        return null;\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public TableEntity getEntity(String partitionKey, String rowKey) {\n+        return client.getEntity(partitionKey, rowKey).block();\n     }\n \n     /**\n      * gets the entity which fits the given criteria\n      *\n      * @param partitionKey the partition key of the entity\n      * @param rowKey the row key of the entity\n+     * @param select a select expression using OData notation. Limits the columns on each record to just those\n+     *               requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".\n      * @return the table entity\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public TableEntity getEntity(String partitionKey, String rowKey) {\n-        return client.getEntity(partitionKey, rowKey).block();\n+    public TableEntity getEntity(String partitionKey, String rowKey, String select) {\n+        return client.getEntity(partitionKey, rowKey, select).block();\n     }\n \n     /**\n      * gets the entity which fits the given criteria\n      *\n      * @param partitionKey the partition key of the entity\n      * @param rowKey the row key of the entity\n+     * @param select a select expression using OData notation. Limits the columns on each record to just those\n+     *               requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".\n+     * @param timeout max time for query to execute before erroring out\n+     * @return the table entity\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public TableEntity getEntity(String partitionKey, String rowKey, String select, Duration timeout) {\n+        return getEntityWithResponse(partitionKey, rowKey, select, timeout, null).getValue();\n+    }\n+\n+    /**\n+     * gets the entity which fits the given criteria\n+     *\n+     * @param partitionKey the partition key of the entity\n+     * @param rowKey the row key of the entity\n+     * @param select a select expression using OData notation. Limits the columns on each record to just those\n+     *               requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".\n+     * @param timeout max time for query to execute before erroring out\n      * @param context the context of the query\n      * @return a mono of the response with the table entity\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<TableEntity> getEntityWithResponse(String partitionKey, String rowKey, Context context) {\n-        return client.getEntityWithResponse(partitionKey, rowKey, new QueryOptions(), context).block();\n+    public Response<TableEntity> getEntityWithResponse(String partitionKey, String rowKey, String select,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2NTYxOA=="}, "originalCommit": {"oid": "af3237f30929ec9bc00acc82e108af675e6d2ef5"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNDIxMg==", "bodyText": "For the tables library, for each operation - the Async client does not have an overload that takes a timeout because the consumer would call .block(timeout) or similar to add one, whereas the Sync client does include an overload that applies a timeout. This is consistent between all operations in the Sync client except for paginated operations, because they are composed of multiple requests.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15737#discussion_r496234212", "createdAt": "2020-09-28T21:09:48Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableClient.java", "diffHunk": "@@ -348,40 +347,61 @@ public void deleteEntity(String partitionKey, String rowKey, String eTag, Durati\n     }\n \n     /**\n-     * Queries and returns entities in the given table using the odata QueryOptions\n+     * gets the entity which fits the given criteria\n      *\n-     * @param options the odata query object\n-     * @param timeout max time for query to execute before erroring out\n-     * @return a list of the tables that fit the query\n+     * @param partitionKey the partition key of the entity\n+     * @param rowKey the row key of the entity\n+     * @return the table entity\n      */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedIterable<TableEntity> listEntities(ListEntitiesOptions options, Duration timeout) {\n-        return null;\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public TableEntity getEntity(String partitionKey, String rowKey) {\n+        return client.getEntity(partitionKey, rowKey).block();\n     }\n \n     /**\n      * gets the entity which fits the given criteria\n      *\n      * @param partitionKey the partition key of the entity\n      * @param rowKey the row key of the entity\n+     * @param select a select expression using OData notation. Limits the columns on each record to just those\n+     *               requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".\n      * @return the table entity\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public TableEntity getEntity(String partitionKey, String rowKey) {\n-        return client.getEntity(partitionKey, rowKey).block();\n+    public TableEntity getEntity(String partitionKey, String rowKey, String select) {\n+        return client.getEntity(partitionKey, rowKey, select).block();\n     }\n \n     /**\n      * gets the entity which fits the given criteria\n      *\n      * @param partitionKey the partition key of the entity\n      * @param rowKey the row key of the entity\n+     * @param select a select expression using OData notation. Limits the columns on each record to just those\n+     *               requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".\n+     * @param timeout max time for query to execute before erroring out\n+     * @return the table entity\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public TableEntity getEntity(String partitionKey, String rowKey, String select, Duration timeout) {\n+        return getEntityWithResponse(partitionKey, rowKey, select, timeout, null).getValue();\n+    }\n+\n+    /**\n+     * gets the entity which fits the given criteria\n+     *\n+     * @param partitionKey the partition key of the entity\n+     * @param rowKey the row key of the entity\n+     * @param select a select expression using OData notation. Limits the columns on each record to just those\n+     *               requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".\n+     * @param timeout max time for query to execute before erroring out\n      * @param context the context of the query\n      * @return a mono of the response with the table entity\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<TableEntity> getEntityWithResponse(String partitionKey, String rowKey, Context context) {\n-        return client.getEntityWithResponse(partitionKey, rowKey, new QueryOptions(), context).block();\n+    public Response<TableEntity> getEntityWithResponse(String partitionKey, String rowKey, String select,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2NTYxOA=="}, "originalCommit": {"oid": "af3237f30929ec9bc00acc82e108af675e6d2ef5"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjA3ODg3OnYy", "diffSide": "RIGHT", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo1ODo0N1rOHZLo3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOToxMjowOVrOHZMDtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2NzEzNA==", "bodyText": "Can use flatMap(FluxUtil::toMono).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15737#discussion_r496167134", "createdAt": "2020-09-28T18:58:47Z", "author": {"login": "alzimmermsft"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -582,7 +587,23 @@ public void close() {\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<TableEntity> getEntity(String partitionKey, String rowKey) {\n-        return getEntityWithResponse(partitionKey, rowKey).flatMap(response ->\n+        return getEntityWithResponse(partitionKey, rowKey, null).flatMap(response ->\n+            Mono.justOrEmpty(response.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af3237f30929ec9bc00acc82e108af675e6d2ef5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3NDAwNg==", "bodyText": "Fixed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15737#discussion_r496174006", "createdAt": "2020-09-28T19:12:09Z", "author": {"login": "bsiegel"}, "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -582,7 +587,23 @@ public void close() {\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<TableEntity> getEntity(String partitionKey, String rowKey) {\n-        return getEntityWithResponse(partitionKey, rowKey).flatMap(response ->\n+        return getEntityWithResponse(partitionKey, rowKey, null).flatMap(response ->\n+            Mono.justOrEmpty(response.getValue()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2NzEzNA=="}, "originalCommit": {"oid": "af3237f30929ec9bc00acc82e108af675e6d2ef5"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 784, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}