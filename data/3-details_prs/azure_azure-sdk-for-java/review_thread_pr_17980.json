{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNDEwMTc2", "number": 17980, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToxMTowMlrOFBjVhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMTo1MzowMVrOFBj07A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTcxODQ2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthError.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToxMTowMlrOIASOpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToxMTowMlrOIASOpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE2OTU3Mw==", "bodyText": "errorCodes", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537169573", "createdAt": "2020-12-07T01:11:02Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthError.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.azure.spring.aad.webapp;\n+\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+\n+public class AzureOAuthError extends OAuth2Error {\n+\n+    private final String error_codes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5900420d2cbb50fd63bb95e1975ff227d00ff30d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTcxODY0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthError.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToxMToxMlrOIASOug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToxMToxMlrOIASOug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE2OTU5NA==", "bodyText": "traceId", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537169594", "createdAt": "2020-12-07T01:11:12Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthError.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.azure.spring.aad.webapp;\n+\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+\n+public class AzureOAuthError extends OAuth2Error {\n+\n+    private final String error_codes;\n+\n+    private final String timestamp;\n+\n+    private final String trace_id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5900420d2cbb50fd63bb95e1975ff227d00ff30d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTcxOTEwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthError.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToxMToyOFrOIASO-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToxMToyOFrOIASO-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE2OTY1OA==", "bodyText": "correlationId", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537169658", "createdAt": "2020-12-07T01:11:28Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthError.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.azure.spring.aad.webapp;\n+\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+\n+public class AzureOAuthError extends OAuth2Error {\n+\n+    private final String error_codes;\n+\n+    private final String timestamp;\n+\n+    private final String trace_id;\n+\n+    private final String correlation_id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5900420d2cbb50fd63bb95e1975ff227d00ff30d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTcxOTU3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthError.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToxMTo0MlrOIASPMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToxMTo0MlrOIASPMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE2OTcxNA==", "bodyText": "subError", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537169714", "createdAt": "2020-12-07T01:11:42Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthError.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.azure.spring.aad.webapp;\n+\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+\n+public class AzureOAuthError extends OAuth2Error {\n+\n+    private final String error_codes;\n+\n+    private final String timestamp;\n+\n+    private final String trace_id;\n+\n+    private final String correlation_id;\n+\n+    private final String sub_error;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5900420d2cbb50fd63bb95e1975ff227d00ff30d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTcyNzYwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthResponseErrorHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToxNjowNVrOIASTOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToxNjowNVrOIASTOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE3MDc0Ng==", "bodyText": "this.oauth2ErrorConverter.setErrorConverter(errorConverter); can execute only one time, not on every execution of handleError. And variable errorConverter can be deleted.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537170746", "createdAt": "2020-12-07T01:16:05Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthResponseErrorHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.azure.spring.aad.webapp;\n+\n+import com.nimbusds.oauth2.sdk.token.BearerTokenError;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.security.oauth2.core.OAuth2AuthorizationException;\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+import org.springframework.security.oauth2.core.OAuth2ErrorCodes;\n+import org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.client.DefaultResponseErrorHandler;\n+import org.springframework.web.client.ResponseErrorHandler;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public class AzureOAuthResponseErrorHandler implements ResponseErrorHandler {\n+\n+    private final OAuth2ErrorHttpMessageConverter oauth2ErrorConverter = new OAuth2ErrorHttpMessageConverter();\n+\n+    private Converter<Map<String, String>, OAuth2Error> errorConverter = new AADOAuth2ErrorConverter();\n+\n+    private final ResponseErrorHandler defaultErrorHandler = new DefaultResponseErrorHandler();\n+\n+    @Override\n+    public boolean hasError(ClientHttpResponse response) throws IOException {\n+        return this.defaultErrorHandler.hasError(response);\n+    }\n+\n+    @Override\n+    public void handleError(ClientHttpResponse response) throws IOException {\n+\n+        if (!HttpStatus.BAD_REQUEST.equals(response.getStatusCode())) {\n+            this.defaultErrorHandler.handleError(response);\n+        }\n+\n+        // A Bearer Token Error may be in the WWW-Authenticate response header\n+        OAuth2Error oauth2Error = this.readErrorFromWwwAuthenticate(response.getHeaders());\n+        if (oauth2Error == null) {\n+            this.oauth2ErrorConverter.setErrorConverter(errorConverter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5900420d2cbb50fd63bb95e1975ff227d00ff30d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTczMjc0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthResponseErrorHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToxODo1MlrOIASVxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToxODo1MlrOIASVxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE3MTM5Nw==", "bodyText": "These variable used only one time, can be deleted and use string directly.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537171397", "createdAt": "2020-12-07T01:18:52Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthResponseErrorHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.azure.spring.aad.webapp;\n+\n+import com.nimbusds.oauth2.sdk.token.BearerTokenError;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.security.oauth2.core.OAuth2AuthorizationException;\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+import org.springframework.security.oauth2.core.OAuth2ErrorCodes;\n+import org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.client.DefaultResponseErrorHandler;\n+import org.springframework.web.client.ResponseErrorHandler;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public class AzureOAuthResponseErrorHandler implements ResponseErrorHandler {\n+\n+    private final OAuth2ErrorHttpMessageConverter oauth2ErrorConverter = new OAuth2ErrorHttpMessageConverter();\n+\n+    private Converter<Map<String, String>, OAuth2Error> errorConverter = new AADOAuth2ErrorConverter();\n+\n+    private final ResponseErrorHandler defaultErrorHandler = new DefaultResponseErrorHandler();\n+\n+    @Override\n+    public boolean hasError(ClientHttpResponse response) throws IOException {\n+        return this.defaultErrorHandler.hasError(response);\n+    }\n+\n+    @Override\n+    public void handleError(ClientHttpResponse response) throws IOException {\n+\n+        if (!HttpStatus.BAD_REQUEST.equals(response.getStatusCode())) {\n+            this.defaultErrorHandler.handleError(response);\n+        }\n+\n+        // A Bearer Token Error may be in the WWW-Authenticate response header\n+        OAuth2Error oauth2Error = this.readErrorFromWwwAuthenticate(response.getHeaders());\n+        if (oauth2Error == null) {\n+            this.oauth2ErrorConverter.setErrorConverter(errorConverter);\n+            oauth2Error = this.oauth2ErrorConverter.read(OAuth2Error.class, response);\n+        }\n+        throw new OAuth2AuthorizationException(oauth2Error);\n+    }\n+\n+    private OAuth2Error readErrorFromWwwAuthenticate(HttpHeaders headers) {\n+\n+        String wwwAuthenticateHeader = headers.getFirst(HttpHeaders.WWW_AUTHENTICATE);\n+        if (!StringUtils.hasText(wwwAuthenticateHeader)) {\n+            return null;\n+        }\n+\n+        BearerTokenError bearerTokenError;\n+        try {\n+            bearerTokenError = BearerTokenError.parse(wwwAuthenticateHeader);\n+        } catch (Exception ex) {\n+            return null;\n+        }\n+\n+        String errorCode = bearerTokenError.getCode() != null ?\n+            bearerTokenError.getCode() : OAuth2ErrorCodes.SERVER_ERROR;\n+        String errorDescription = bearerTokenError.getDescription();\n+        String errorUri = bearerTokenError.getURI() != null ?\n+            bearerTokenError.getURI().toString() : null;\n+\n+        return new OAuth2Error(errorCode, errorDescription, errorUri);\n+    }\n+\n+\n+    private static class AADOAuth2ErrorConverter implements Converter<Map<String, String>, OAuth2Error> {\n+        private final String ERROR = \"error\";\n+        private final String ERROR_DESCRIPTION = \"error_description\";\n+        private final String ERROR_CODES = \"error_codes\";\n+        private final String TIMESTAMP = \"timestamp\";\n+        private final String TRACE_ID = \"trace_id\";\n+        private final String CORRELATION_ID = \"correlation_id\";\n+        private final String ERROR_URI = \"error_uri\";\n+        private final String SUB_ERROR = \"suberror\";\n+        private final String CLAIMS = \"claims\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5900420d2cbb50fd63bb95e1975ff227d00ff30d"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTczNDk2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthResponseErrorHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToxOTo1NFrOIASW1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToxOTo1NFrOIASW1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE3MTY3MQ==", "bodyText": "Please confirm whether suberror is right. Maybe is should be sub_error.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537171671", "createdAt": "2020-12-07T01:19:54Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthResponseErrorHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.azure.spring.aad.webapp;\n+\n+import com.nimbusds.oauth2.sdk.token.BearerTokenError;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.security.oauth2.core.OAuth2AuthorizationException;\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+import org.springframework.security.oauth2.core.OAuth2ErrorCodes;\n+import org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.client.DefaultResponseErrorHandler;\n+import org.springframework.web.client.ResponseErrorHandler;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public class AzureOAuthResponseErrorHandler implements ResponseErrorHandler {\n+\n+    private final OAuth2ErrorHttpMessageConverter oauth2ErrorConverter = new OAuth2ErrorHttpMessageConverter();\n+\n+    private Converter<Map<String, String>, OAuth2Error> errorConverter = new AADOAuth2ErrorConverter();\n+\n+    private final ResponseErrorHandler defaultErrorHandler = new DefaultResponseErrorHandler();\n+\n+    @Override\n+    public boolean hasError(ClientHttpResponse response) throws IOException {\n+        return this.defaultErrorHandler.hasError(response);\n+    }\n+\n+    @Override\n+    public void handleError(ClientHttpResponse response) throws IOException {\n+\n+        if (!HttpStatus.BAD_REQUEST.equals(response.getStatusCode())) {\n+            this.defaultErrorHandler.handleError(response);\n+        }\n+\n+        // A Bearer Token Error may be in the WWW-Authenticate response header\n+        OAuth2Error oauth2Error = this.readErrorFromWwwAuthenticate(response.getHeaders());\n+        if (oauth2Error == null) {\n+            this.oauth2ErrorConverter.setErrorConverter(errorConverter);\n+            oauth2Error = this.oauth2ErrorConverter.read(OAuth2Error.class, response);\n+        }\n+        throw new OAuth2AuthorizationException(oauth2Error);\n+    }\n+\n+    private OAuth2Error readErrorFromWwwAuthenticate(HttpHeaders headers) {\n+\n+        String wwwAuthenticateHeader = headers.getFirst(HttpHeaders.WWW_AUTHENTICATE);\n+        if (!StringUtils.hasText(wwwAuthenticateHeader)) {\n+            return null;\n+        }\n+\n+        BearerTokenError bearerTokenError;\n+        try {\n+            bearerTokenError = BearerTokenError.parse(wwwAuthenticateHeader);\n+        } catch (Exception ex) {\n+            return null;\n+        }\n+\n+        String errorCode = bearerTokenError.getCode() != null ?\n+            bearerTokenError.getCode() : OAuth2ErrorCodes.SERVER_ERROR;\n+        String errorDescription = bearerTokenError.getDescription();\n+        String errorUri = bearerTokenError.getURI() != null ?\n+            bearerTokenError.getURI().toString() : null;\n+\n+        return new OAuth2Error(errorCode, errorDescription, errorUri);\n+    }\n+\n+\n+    private static class AADOAuth2ErrorConverter implements Converter<Map<String, String>, OAuth2Error> {\n+        private final String ERROR = \"error\";\n+        private final String ERROR_DESCRIPTION = \"error_description\";\n+        private final String ERROR_CODES = \"error_codes\";\n+        private final String TIMESTAMP = \"timestamp\";\n+        private final String TRACE_ID = \"trace_id\";\n+        private final String CORRELATION_ID = \"correlation_id\";\n+        private final String ERROR_URI = \"error_uri\";\n+        private final String SUB_ERROR = \"suberror\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5900420d2cbb50fd63bb95e1975ff227d00ff30d"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTczNzMxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthResponseErrorHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToyMToxMVrOIASX_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToyMToxMVrOIASX_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE3MTk2NQ==", "bodyText": "Can we write unit-test for hasError and handleError?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537171965", "createdAt": "2020-12-07T01:21:11Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthResponseErrorHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.azure.spring.aad.webapp;\n+\n+import com.nimbusds.oauth2.sdk.token.BearerTokenError;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.security.oauth2.core.OAuth2AuthorizationException;\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+import org.springframework.security.oauth2.core.OAuth2ErrorCodes;\n+import org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.client.DefaultResponseErrorHandler;\n+import org.springframework.web.client.ResponseErrorHandler;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public class AzureOAuthResponseErrorHandler implements ResponseErrorHandler {\n+\n+    private final OAuth2ErrorHttpMessageConverter oauth2ErrorConverter = new OAuth2ErrorHttpMessageConverter();\n+\n+    private Converter<Map<String, String>, OAuth2Error> errorConverter = new AADOAuth2ErrorConverter();\n+\n+    private final ResponseErrorHandler defaultErrorHandler = new DefaultResponseErrorHandler();\n+\n+    @Override\n+    public boolean hasError(ClientHttpResponse response) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5900420d2cbb50fd63bb95e1975ff227d00ff30d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTc0MTE3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthError.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToyMzowN1rOIASZ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToyMzowN1rOIASZ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE3MjQ1OA==", "bodyText": "AzureOAuth2Error", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537172458", "createdAt": "2020-12-07T01:23:07Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthError.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.azure.spring.aad.webapp;\n+\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+\n+public class AzureOAuthError extends OAuth2Error {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5900420d2cbb50fd63bb95e1975ff227d00ff30d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTc0MTM2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthResponseErrorHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToyMzoyNFrOIASaBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMToyMzoyNFrOIASaBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE3MjQ4Nw==", "bodyText": "AzureOAuth2ResponseErrorHandler", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537172487", "createdAt": "2020-12-07T01:23:24Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthResponseErrorHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.azure.spring.aad.webapp;\n+\n+import com.nimbusds.oauth2.sdk.token.BearerTokenError;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.security.oauth2.core.OAuth2AuthorizationException;\n+import org.springframework.security.oauth2.core.OAuth2Error;\n+import org.springframework.security.oauth2.core.OAuth2ErrorCodes;\n+import org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.client.DefaultResponseErrorHandler;\n+import org.springframework.web.client.ResponseErrorHandler;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public class AzureOAuthResponseErrorHandler implements ResponseErrorHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5900420d2cbb50fd63bb95e1975ff227d00ff30d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTc5ODg0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthenticationFailureHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMTo1MzowMVrOIAS20Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMTo1MzowMVrOIAS20Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE3OTg1Nw==", "bodyText": "To make it work, please:\n\nWrite a new java class named AzureOAuth2AuthorizationRequestResolver, just like AADOAuth2AuthorizationRequestResolver.\nUpdate AzureOAuth2Configuration.configure(...)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17980#discussion_r537179857", "createdAt": "2020-12-07T01:53:01Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOAuthenticationFailureHandler.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.autoconfigure.aad.Constants;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.oauth2.core.OAuth2AuthenticationException;\n+import org.springframework.security.web.authentication.AuthenticationFailureHandler;\n+import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;\n+import org.springframework.security.web.savedrequest.DefaultSavedRequest;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+public class AzureOAuthenticationFailureHandler implements AuthenticationFailureHandler {\n+    private static final String DEFAULT_FAILURE_URL = \"/login?error\";\n+    private final AuthenticationFailureHandler defaultHandler;\n+\n+    public AzureOAuthenticationFailureHandler() {\n+        this.defaultHandler = new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL);\n+    }\n+\n+    @Override\n+    public void onAuthenticationFailure(HttpServletRequest request,\n+                                        HttpServletResponse response,\n+                                        AuthenticationException exception) throws IOException, ServletException {\n+\n+        String claims = Optional.of(exception)\n+            .map(e -> (OAuth2AuthenticationException) e)\n+            .map(OAuth2AuthenticationException::getError)\n+            .map(e -> (AzureOAuthError)e)\n+            .map(AzureOAuthError ::getClaims)\n+            .orElse(null);\n+\n+        if (claims == null) {\n+            // Default handle logic\n+            defaultHandler.onAuthenticationFailure(request, response, exception);\n+        } else {\n+            // Put claims into session and redirect\n+            response.setStatus(302);\n+            request.getSession().setAttribute(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS,claims);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5900420d2cbb50fd63bb95e1975ff227d00ff30d"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2641, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}