{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMDE1NDcw", "number": 9975, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0MDoyOVrODw12ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNDo1MjozNVrODxesWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTQwNTU0OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0MDoyOVrOGED7Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0MDoyOVrOGED7Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMTc5NQ==", "bodyText": "List information for all models.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406911795", "createdAt": "2020-04-10T19:40:29Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClient.java", "diffHunk": "@@ -112,4 +118,15 @@\n         return client.beginExtractReceipts(buffer, length, includeTextDetails, formContentType, pollInterval)\n             .getSyncPoller();\n     }\n+\n+    /**\n+     * List all available models.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTQwNjcyOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0MTowMlrOGED76g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNDoyMjozN1rOGEcWdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMTk3OA==", "bodyText": "missing javadoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406911978", "createdAt": "2020-04-10T19:41:02Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -158,6 +167,57 @@ public FormRecognizerServiceVersion getServiceVersion() {\n             fetchExtractReceiptResult(includeTextDetails));\n     }\n \n+\n+    /**\n+     * List all available models.\n+     *\n+     * @return {@link PagedFlux} of {@link CustomFormModelInfo}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<CustomFormModelInfo> listModels() {\n+         try {\n+            return new PagedFlux<>(() -> withContext(context -> listFirstPageModelInfo(context)),\n+                continuationToken -> withContext(context -> listNextPageModelInfo(continuationToken, context)));\n+        } catch (RuntimeException ex) {\n+            return new PagedFlux<>(() -> monoError(logger, ex));\n+        }\n+    }\n+\n+    PagedFlux<CustomFormModelInfo> listModels(Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MTcyMA==", "bodyText": "It is so wired. I have to close my browser and reopen this link. then the changes shows up. It should already update.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406971720", "createdAt": "2020-04-10T22:41:06Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -158,6 +167,57 @@ public FormRecognizerServiceVersion getServiceVersion() {\n             fetchExtractReceiptResult(includeTextDetails));\n     }\n \n+\n+    /**\n+     * List all available models.\n+     *\n+     * @return {@link PagedFlux} of {@link CustomFormModelInfo}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<CustomFormModelInfo> listModels() {\n+         try {\n+            return new PagedFlux<>(() -> withContext(context -> listFirstPageModelInfo(context)),\n+                continuationToken -> withContext(context -> listNextPageModelInfo(continuationToken, context)));\n+        } catch (RuntimeException ex) {\n+            return new PagedFlux<>(() -> monoError(logger, ex));\n+        }\n+    }\n+\n+    PagedFlux<CustomFormModelInfo> listModels(Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMTk3OA=="}, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMxMTk5MA==", "bodyText": "it is updated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r407311990", "createdAt": "2020-04-13T04:22:37Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -158,6 +167,57 @@ public FormRecognizerServiceVersion getServiceVersion() {\n             fetchExtractReceiptResult(includeTextDetails));\n     }\n \n+\n+    /**\n+     * List all available models.\n+     *\n+     * @return {@link PagedFlux} of {@link CustomFormModelInfo}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<CustomFormModelInfo> listModels() {\n+         try {\n+            return new PagedFlux<>(() -> withContext(context -> listFirstPageModelInfo(context)),\n+                continuationToken -> withContext(context -> listNextPageModelInfo(continuationToken, context)));\n+        } catch (RuntimeException ex) {\n+            return new PagedFlux<>(() -> monoError(logger, ex));\n+        }\n+    }\n+\n+    PagedFlux<CustomFormModelInfo> listModels(Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMTk3OA=="}, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTQwNjkzOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0MToxMlrOGED8Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0MToxMlrOGED8Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMjAyMw==", "bodyText": "extra line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406912023", "createdAt": "2020-04-10T19:41:12Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -158,6 +167,57 @@ public FormRecognizerServiceVersion getServiceVersion() {\n             fetchExtractReceiptResult(includeTextDetails));\n     }\n \n+\n+    /**\n+     * List all available models.\n+     *\n+     * @return {@link PagedFlux} of {@link CustomFormModelInfo}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<CustomFormModelInfo> listModels() {\n+         try {\n+            return new PagedFlux<>(() -> withContext(context -> listFirstPageModelInfo(context)),\n+                continuationToken -> withContext(context -> listNextPageModelInfo(continuationToken, context)));\n+        } catch (RuntimeException ex) {\n+            return new PagedFlux<>(() -> monoError(logger, ex));\n+        }\n+    }\n+\n+    PagedFlux<CustomFormModelInfo> listModels(Context context) {\n+        return new PagedFlux<>(() -> listFirstPageModelInfo(context),\n+            continuationToken -> listNextPageModelInfo(continuationToken, context));\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTQxMDEyOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/CustomFormModelInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0Mjo0OFrOGED-Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0Mjo0OFrOGED-Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMjUzOA==", "bodyText": "Should be @Immutable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406912538", "createdAt": "2020-04-10T19:42:48Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/CustomFormModelInfo.java", "diffHunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.util.UUID;\n+\n+/**\n+ * The CustomFormModelInfo model.\n+ */\n+@Fluent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTQxMDc0OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/CustomFormModelInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0MzowN1rOGED-iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjozMzozN1rOGEHePA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMjY0OQ==", "bodyText": "ModelID should be a String?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406912649", "createdAt": "2020-04-10T19:43:07Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/CustomFormModelInfo.java", "diffHunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.util.UUID;\n+\n+/**\n+ * The CustomFormModelInfo model.\n+ */\n+@Fluent\n+public final class CustomFormModelInfo {\n+\n+    /*\n+     * Model identifier.\n+     */\n+    private UUID modelId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTkxNg==", "bodyText": "The auto-generated class ModelInfo uses UUID as type of modelId.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406969916", "createdAt": "2020-04-10T22:33:37Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/CustomFormModelInfo.java", "diffHunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.util.UUID;\n+\n+/**\n+ * The CustomFormModelInfo model.\n+ */\n+@Fluent\n+public final class CustomFormModelInfo {\n+\n+    /*\n+     * Model identifier.\n+     */\n+    private UUID modelId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMjY0OQ=="}, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTU3ODIwOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/CustomFormModelInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDo1MTo0NVrOGEFlrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDo1MTo0NVrOGEFlrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzOTA1NQ==", "bodyText": "All fields must be final", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406939055", "createdAt": "2020-04-10T20:51:45Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/CustomFormModelInfo.java", "diffHunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.OffsetDateTime;\n+import java.util.UUID;\n+\n+/**\n+ * The CustomFormModelInfo model.\n+ */\n+@Fluent\n+public final class CustomFormModelInfo {\n+\n+    /*\n+     * Model identifier.\n+     */\n+    private UUID modelId;\n+\n+    /*\n+     * Status of the model.\n+     */\n+    private ModelTrainingStatus status;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTU4MDk3OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/ModelTrainingStatus.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDo1MzoxMFrOGEFnZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDo1MzoxMFrOGEFnZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzOTQ5Mg==", "bodyText": "Should be expandable enum", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406939492", "createdAt": "2020-04-10T20:53:10Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/ModelTrainingStatus.java", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+public enum ModelTrainingStatus {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTU4MTc2OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ListModels.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDo1MzozMFrOGEFn2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDo1MzozMFrOGEFn2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzOTYwOQ==", "bodyText": "update the description.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406939609", "createdAt": "2020-04-10T20:53:30Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ListModels.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.CustomFormModelInfo;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.Context;\n+\n+/**\n+ * Sample for listing all available models in a synchronous way.\n+ */\n+public class ListModels {\n+    /**\n+     * Sample for extracting receipt information using file source URL.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTU4NTEyOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ListModels.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDo1NDo1NFrOGEFpyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoxNzo1N1rOGEHPSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MDEwNg==", "bodyText": "Does this need to use the Context param overload?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406940106", "createdAt": "2020-04-10T20:54:54Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ListModels.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.CustomFormModelInfo;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.Context;\n+\n+/**\n+ * Sample for listing all available models in a synchronous way.\n+ */\n+public class ListModels {\n+    /**\n+     * Sample for extracting receipt information using file source URL.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        FormRecognizerClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"48c9ec5b1c444c899770946defc486c4\"))\n+            .endpoint(\"https://javaformrecognizertestresource.cognitiveservices.azure.com/\")\n+            .buildClient();\n+\n+        for (CustomFormModelInfo modelInfo : client.listModels(Context.NONE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjA4OQ==", "bodyText": "I need to create another overload method for listModels(), right now it only has max overload method", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406966089", "createdAt": "2020-04-10T22:17:57Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ListModels.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.CustomFormModelInfo;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.Context;\n+\n+/**\n+ * Sample for listing all available models in a synchronous way.\n+ */\n+public class ListModels {\n+    /**\n+     * Sample for extracting receipt information using file source URL.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        FormRecognizerClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"48c9ec5b1c444c899770946defc486c4\"))\n+            .endpoint(\"https://javaformrecognizertestresource.cognitiveservices.azure.com/\")\n+            .buildClient();\n+\n+        for (CustomFormModelInfo modelInfo : client.listModels(Context.NONE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MDEwNg=="}, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTU4NzI3OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ListModelsAsync.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDo1NTo1MVrOGEFrCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNDoyOTo1MVrOGEcbhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MDQyNQ==", "bodyText": "Based on our discussion for samples in the morning. Recommend only keeping the sync sample.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406940425", "createdAt": "2020-04-10T20:55:51Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ListModelsAsync.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjQxNA==", "bodyText": "I feel list models() need to have async samples. It is like listConfigurationSetting(). Otherwise, user won't know how to use aysnc listModels()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406966414", "createdAt": "2020-04-10T22:19:21Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ListModelsAsync.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MDQyNQ=="}, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMxMzI4Ng==", "bodyText": "We can have this additional sample too. It should help since it will show async way of iteration through the paged response.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r407313286", "createdAt": "2020-04-13T04:29:51Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ListModelsAsync.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MDQyNQ=="}, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTU4ODczOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDo1Njo0MlrOGEFsBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMTowMzo0MlrOGEF3rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MDY3OQ==", "bodyText": "nit: logger.warning(\"Failed to list all model information\",", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406940679", "createdAt": "2020-04-10T20:56:42Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -158,6 +167,57 @@ public FormRecognizerServiceVersion getServiceVersion() {\n             fetchExtractReceiptResult(includeTextDetails));\n     }\n \n+\n+    /**\n+     * List all available models.\n+     *\n+     * @return {@link PagedFlux} of {@link CustomFormModelInfo}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<CustomFormModelInfo> listModels() {\n+         try {\n+            return new PagedFlux<>(() -> withContext(context -> listFirstPageModelInfo(context)),\n+                continuationToken -> withContext(context -> listNextPageModelInfo(continuationToken, context)));\n+        } catch (RuntimeException ex) {\n+            return new PagedFlux<>(() -> monoError(logger, ex));\n+        }\n+    }\n+\n+    PagedFlux<CustomFormModelInfo> listModels(Context context) {\n+        return new PagedFlux<>(() -> listFirstPageModelInfo(context),\n+            continuationToken -> listNextPageModelInfo(continuationToken, context));\n+    }\n+\n+\n+    private Mono<PagedResponse<CustomFormModelInfo>> listFirstPageModelInfo(Context context) {\n+        return service.listCustomModelsSinglePageAsync(context)\n+            .doOnRequest(ignoredValue -> logger.info(\"Listing all model information\"))\n+            .doOnSuccess(response -> logger.info(\"Listed all models\"))\n+            .doOnError(error -> logger.warning(\"Failed to list all models\", error))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MzY2MA==", "bodyText": "without providing error?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406943660", "createdAt": "2020-04-10T21:03:42Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -158,6 +167,57 @@ public FormRecognizerServiceVersion getServiceVersion() {\n             fetchExtractReceiptResult(includeTextDetails));\n     }\n \n+\n+    /**\n+     * List all available models.\n+     *\n+     * @return {@link PagedFlux} of {@link CustomFormModelInfo}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<CustomFormModelInfo> listModels() {\n+         try {\n+            return new PagedFlux<>(() -> withContext(context -> listFirstPageModelInfo(context)),\n+                continuationToken -> withContext(context -> listNextPageModelInfo(continuationToken, context)));\n+        } catch (RuntimeException ex) {\n+            return new PagedFlux<>(() -> monoError(logger, ex));\n+        }\n+    }\n+\n+    PagedFlux<CustomFormModelInfo> listModels(Context context) {\n+        return new PagedFlux<>(() -> listFirstPageModelInfo(context),\n+            continuationToken -> listNextPageModelInfo(continuationToken, context));\n+    }\n+\n+\n+    private Mono<PagedResponse<CustomFormModelInfo>> listFirstPageModelInfo(Context context) {\n+        return service.listCustomModelsSinglePageAsync(context)\n+            .doOnRequest(ignoredValue -> logger.info(\"Listing all model information\"))\n+            .doOnSuccess(response -> logger.info(\"Listed all models\"))\n+            .doOnError(error -> logger.warning(\"Failed to list all models\", error))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MDY3OQ=="}, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTU4OTc3OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDo1NzowOVrOGEFsnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzowOToyOFrOGEthbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MDgzMQ==", "bodyText": "ServiceMethod annotation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406940831", "createdAt": "2020-04-10T20:57:09Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -158,6 +167,57 @@ public FormRecognizerServiceVersion getServiceVersion() {\n             fetchExtractReceiptResult(includeTextDetails));\n     }\n \n+\n+    /**\n+     * List all available models.\n+     *\n+     * @return {@link PagedFlux} of {@link CustomFormModelInfo}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<CustomFormModelInfo> listModels() {\n+         try {\n+            return new PagedFlux<>(() -> withContext(context -> listFirstPageModelInfo(context)),\n+                continuationToken -> withContext(context -> listNextPageModelInfo(continuationToken, context)));\n+        } catch (RuntimeException ex) {\n+            return new PagedFlux<>(() -> monoError(logger, ex));\n+        }\n+    }\n+\n+    PagedFlux<CustomFormModelInfo> listModels(Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MzQ5OQ==", "bodyText": "it is a helper method that used in Sync Client.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406943499", "createdAt": "2020-04-10T21:03:15Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -158,6 +167,57 @@ public FormRecognizerServiceVersion getServiceVersion() {\n             fetchExtractReceiptResult(includeTextDetails));\n     }\n \n+\n+    /**\n+     * List all available models.\n+     *\n+     * @return {@link PagedFlux} of {@link CustomFormModelInfo}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<CustomFormModelInfo> listModels() {\n+         try {\n+            return new PagedFlux<>(() -> withContext(context -> listFirstPageModelInfo(context)),\n+                continuationToken -> withContext(context -> listNextPageModelInfo(continuationToken, context)));\n+        } catch (RuntimeException ex) {\n+            return new PagedFlux<>(() -> monoError(logger, ex));\n+        }\n+    }\n+\n+    PagedFlux<CustomFormModelInfo> listModels(Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MDgzMQ=="}, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMxMjA4NQ==", "bodyText": "@ServiceMethod(returns = ReturnType.COLLECTION)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r407312085", "createdAt": "2020-04-13T04:23:11Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -158,6 +167,57 @@ public FormRecognizerServiceVersion getServiceVersion() {\n             fetchExtractReceiptResult(includeTextDetails));\n     }\n \n+\n+    /**\n+     * List all available models.\n+     *\n+     * @return {@link PagedFlux} of {@link CustomFormModelInfo}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<CustomFormModelInfo> listModels() {\n+         try {\n+            return new PagedFlux<>(() -> withContext(context -> listFirstPageModelInfo(context)),\n+                continuationToken -> withContext(context -> listNextPageModelInfo(continuationToken, context)));\n+        } catch (RuntimeException ex) {\n+            return new PagedFlux<>(() -> monoError(logger, ex));\n+        }\n+    }\n+\n+    PagedFlux<CustomFormModelInfo> listModels(Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MDgzMQ=="}, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5MzMyNw==", "bodyText": "This is package-private helper method, it should not need to include @ServiceMethod, will follow up this with u offline.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r407593327", "createdAt": "2020-04-13T17:09:28Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -158,6 +167,57 @@ public FormRecognizerServiceVersion getServiceVersion() {\n             fetchExtractReceiptResult(includeTextDetails));\n     }\n \n+\n+    /**\n+     * List all available models.\n+     *\n+     * @return {@link PagedFlux} of {@link CustomFormModelInfo}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<CustomFormModelInfo> listModels() {\n+         try {\n+            return new PagedFlux<>(() -> withContext(context -> listFirstPageModelInfo(context)),\n+                continuationToken -> withContext(context -> listNextPageModelInfo(continuationToken, context)));\n+        } catch (RuntimeException ex) {\n+            return new PagedFlux<>(() -> monoError(logger, ex));\n+        }\n+    }\n+\n+    PagedFlux<CustomFormModelInfo> listModels(Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MDgzMQ=="}, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTU5Mzc5OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDo1ODoxN1rOGEFvCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoyNzo0MlrOGEHYlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MTQ1MQ==", "bodyText": "Should mention about models info here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406941451", "createdAt": "2020-04-10T20:58:17Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -158,6 +167,57 @@ public FormRecognizerServiceVersion getServiceVersion() {\n             fetchExtractReceiptResult(includeTextDetails));\n     }\n \n+\n+    /**\n+     * List all available models.\n+     *\n+     * @return {@link PagedFlux} of {@link CustomFormModelInfo}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<CustomFormModelInfo> listModels() {\n+         try {\n+            return new PagedFlux<>(() -> withContext(context -> listFirstPageModelInfo(context)),\n+                continuationToken -> withContext(context -> listNextPageModelInfo(continuationToken, context)));\n+        } catch (RuntimeException ex) {\n+            return new PagedFlux<>(() -> monoError(logger, ex));\n+        }\n+    }\n+\n+    PagedFlux<CustomFormModelInfo> listModels(Context context) {\n+        return new PagedFlux<>(() -> listFirstPageModelInfo(context),\n+            continuationToken -> listNextPageModelInfo(continuationToken, context));\n+    }\n+\n+\n+    private Mono<PagedResponse<CustomFormModelInfo>> listFirstPageModelInfo(Context context) {\n+        return service.listCustomModelsSinglePageAsync(context)\n+            .doOnRequest(ignoredValue -> logger.info(\"Listing all model information\"))\n+            .doOnSuccess(response -> logger.info(\"Listed all models\"))\n+            .doOnError(error -> logger.warning(\"Failed to list all models\", error))\n+            .map(res -> new PagedResponseBase<>(\n+                res.getRequest(),\n+                res.getStatusCode(),\n+                res.getHeaders(),\n+                toCustomFormModelInfo(res.getValue()),\n+                res.getContinuationToken(),\n+                null));\n+    }\n+\n+    private Mono<PagedResponse<CustomFormModelInfo>> listNextPageModelInfo(String nextPageLink, Context context) {\n+        return service.listCustomModelsNextSinglePageAsync(nextPageLink)\n+            .doOnSubscribe(ignoredValue -> logger.info(\"Retrieving the next listing page - Page {}\", nextPageLink))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODQ3MA==", "bodyText": "I feel it is more about the next page link. So we should not mention about the models info here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r406968470", "createdAt": "2020-04-10T22:27:42Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -158,6 +167,57 @@ public FormRecognizerServiceVersion getServiceVersion() {\n             fetchExtractReceiptResult(includeTextDetails));\n     }\n \n+\n+    /**\n+     * List all available models.\n+     *\n+     * @return {@link PagedFlux} of {@link CustomFormModelInfo}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<CustomFormModelInfo> listModels() {\n+         try {\n+            return new PagedFlux<>(() -> withContext(context -> listFirstPageModelInfo(context)),\n+                continuationToken -> withContext(context -> listNextPageModelInfo(continuationToken, context)));\n+        } catch (RuntimeException ex) {\n+            return new PagedFlux<>(() -> monoError(logger, ex));\n+        }\n+    }\n+\n+    PagedFlux<CustomFormModelInfo> listModels(Context context) {\n+        return new PagedFlux<>(() -> listFirstPageModelInfo(context),\n+            continuationToken -> listNextPageModelInfo(continuationToken, context));\n+    }\n+\n+\n+    private Mono<PagedResponse<CustomFormModelInfo>> listFirstPageModelInfo(Context context) {\n+        return service.listCustomModelsSinglePageAsync(context)\n+            .doOnRequest(ignoredValue -> logger.info(\"Listing all model information\"))\n+            .doOnSuccess(response -> logger.info(\"Listed all models\"))\n+            .doOnError(error -> logger.warning(\"Failed to list all models\", error))\n+            .map(res -> new PagedResponseBase<>(\n+                res.getRequest(),\n+                res.getStatusCode(),\n+                res.getHeaders(),\n+                toCustomFormModelInfo(res.getValue()),\n+                res.getContinuationToken(),\n+                null));\n+    }\n+\n+    private Mono<PagedResponse<CustomFormModelInfo>> listNextPageModelInfo(String nextPageLink, Context context) {\n+        return service.listCustomModelsNextSinglePageAsync(nextPageLink)\n+            .doOnSubscribe(ignoredValue -> logger.info(\"Retrieving the next listing page - Page {}\", nextPageLink))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MTQ1MQ=="}, "originalCommit": {"oid": "e731cbb36b89db00cbfd3d3f199ab3bb0ddeee73"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODQ5NjU4OnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNDoyNTozOFrOGEcYmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzoxMDoyMlrOGEtjVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMxMjUzNg==", "bodyText": "list A list", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r407312536", "createdAt": "2020-04-13T04:25:38Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -374,4 +377,40 @@ private static TimeValue toFieldValueTime(com.azure.ai.formrecognizer.implementa\n             serviceDateValue.getValueTime(), serviceDateValue.getPage());\n         // TODO: currently returning a string, waiting on swagger update.\n     }\n+\n+    /**\n+     * Transform a list of {@link ModelInfo} to a list of {@link CustomFormModelInfo}.\n+     *\n+     * @param list A list of {@link ModelInfo}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e584cfa2c658db39eae4ccec5304a0831fe7604b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5MzgxMw==", "bodyText": "Does it already is \"A list\"?\n     * @param list A list of {@link ModelInfo}.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r407593813", "createdAt": "2020-04-13T17:10:22Z", "author": {"login": "mssfang"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -374,4 +377,40 @@ private static TimeValue toFieldValueTime(com.azure.ai.formrecognizer.implementa\n             serviceDateValue.getValueTime(), serviceDateValue.getPage());\n         // TODO: currently returning a string, waiting on swagger update.\n     }\n+\n+    /**\n+     * Transform a list of {@link ModelInfo} to a list of {@link CustomFormModelInfo}.\n+     *\n+     * @param list A list of {@link ModelInfo}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMxMjUzNg=="}, "originalCommit": {"oid": "e584cfa2c658db39eae4ccec5304a0831fe7604b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjA5NjkwOnYy", "diffSide": "RIGHT", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/CustomFormModelInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNDo1MjozNVrOGE-KiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNDo1MjozNVrOGE-KiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg2NTk5Mg==", "bodyText": "This should be a string", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9975#discussion_r407865992", "createdAt": "2020-04-14T04:52:35Z", "author": {"login": "samvaity"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/CustomFormModelInfo.java", "diffHunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+import java.time.OffsetDateTime;\n+import java.util.UUID;\n+\n+/**\n+ * The CustomFormModelInfo model.\n+ */\n+@Immutable\n+public final class CustomFormModelInfo {\n+\n+    /*\n+     * Model identifier.\n+     */\n+    private final UUID modelId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9078a1762c9681fea62e66757198be2a8161d1c"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1897, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}