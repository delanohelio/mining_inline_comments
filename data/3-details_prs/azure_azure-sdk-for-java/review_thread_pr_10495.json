{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NzI2MzEy", "number": 10495, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTozODo1NlrOD17TZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0MDo0MVrOD17Vxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODcyNzQzOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTozODo1NlrOGLmdSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTozODo1NlrOGLmdSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNzYwOQ==", "bodyText": "Queue or topic?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10495#discussion_r414817609", "createdAt": "2020-04-24T19:38:56Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java", "diffHunk": "@@ -70,6 +72,32 @@ public void send(ServiceBusMessage message) {\n         asyncClient.send(message).block(tryTimeout);\n     }\n \n+    /**\n+     * Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is\n+     * enqueued and made available to receivers only at the scheduled enqueue time.\n+     *\n+     * @param message Message to be sent to the Service Bus Queue.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3179e87b29fc9e78a6622fc3bb4d1fa061cd8ef2"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODcyODk1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTozOToyMlrOGLmeIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTozOToyMlrOGLmeIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNzgyNQ==", "bodyText": "service bus -> Service Bus", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10495#discussion_r414817825", "createdAt": "2020-04-24T19:39:22Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java", "diffHunk": "@@ -70,6 +72,32 @@ public void send(ServiceBusMessage message) {\n         asyncClient.send(message).block(tryTimeout);\n     }\n \n+    /**\n+     * Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is\n+     * enqueued and made available to receivers only at the scheduled enqueue time.\n+     *\n+     * @param message Message to be sent to the Service Bus Queue.\n+     * @param scheduledEnqueueTime Instant at which the message should appear in the Service Bus queue or topic.\n+     *\n+     * @return The sequence number of the scheduled message which can be used to cancel the scheduling of the message.\n+     *\n+     * @throws NullPointerException if {@code message} or {@code scheduledEnqueueTime} is {@code null}.\n+     */\n+    public long scheduleMessage(ServiceBusMessage message, Instant scheduledEnqueueTime) {\n+        return asyncClient.scheduleMessage(message, scheduledEnqueueTime).block(tryTimeout);\n+    }\n+\n+    /**\n+     * Cancels the enqueuing of an already scheduled message, if it was not already enqueued.\n+     *\n+     * @param sequenceNumber of the scheduled message to cancel.\n+     *\n+     * @return The {@link Mono} that finishes this operation on service bus resource.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3179e87b29fc9e78a6622fc3bb4d1fa061cd8ef2"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODczMTM0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0MDowMlrOGLmfhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDoyOTowMFrOGLoEuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxODE4MA==", "bodyText": "The sequence number can be 0 if it is in the beginning of stream.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10495#discussion_r414818180", "createdAt": "2020-04-24T19:40:02Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientIntegrationTest.java", "diffHunk": "@@ -104,6 +106,50 @@ void nonSessionMessageBatch(MessagingEntityType entityType) {\n         }\n     }\n \n+    /**\n+     * Verifies that we can schedule a message to a non-session entity.\n+     */\n+    @MethodSource(\"receiverTypesProvider\")\n+    @ParameterizedTest\n+    void nonSessionScheduleMessage(MessagingEntityType entityType) {\n+        // Arrange\n+        setSenderAndReceiver(entityType);\n+\n+        final Instant scheduledEnqueueTime = Instant.now().plusSeconds(10);\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId);\n+\n+        // Act\n+        long sequenceNumber = sender.scheduleMessage(message, scheduledEnqueueTime);\n+\n+        // Assert\n+        Assertions.assertTrue(sequenceNumber > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3179e87b29fc9e78a6622fc3bb4d1fa061cd8ef2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg0NDA4OA==", "bodyText": "I am changing it to >=0 but When I try to send first message to a Queue, it always start  from 1.  But  SB docs says that  after reaching to max, it can roll over to zero.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10495#discussion_r414844088", "createdAt": "2020-04-24T20:29:00Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientIntegrationTest.java", "diffHunk": "@@ -104,6 +106,50 @@ void nonSessionMessageBatch(MessagingEntityType entityType) {\n         }\n     }\n \n+    /**\n+     * Verifies that we can schedule a message to a non-session entity.\n+     */\n+    @MethodSource(\"receiverTypesProvider\")\n+    @ParameterizedTest\n+    void nonSessionScheduleMessage(MessagingEntityType entityType) {\n+        // Arrange\n+        setSenderAndReceiver(entityType);\n+\n+        final Instant scheduledEnqueueTime = Instant.now().plusSeconds(10);\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId);\n+\n+        // Act\n+        long sequenceNumber = sender.scheduleMessage(message, scheduledEnqueueTime);\n+\n+        // Assert\n+        Assertions.assertTrue(sequenceNumber > 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxODE4MA=="}, "originalCommit": {"oid": "3179e87b29fc9e78a6622fc3bb4d1fa061cd8ef2"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODczMzUxOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0MDo0MVrOGLmgxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0MDo0MVrOGLmgxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxODUwMA==", "bodyText": "If this succeeds, you'll want to decrement messages pending.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10495#discussion_r414818500", "createdAt": "2020-04-24T19:40:41Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientIntegrationTest.java", "diffHunk": "@@ -104,6 +106,50 @@ void nonSessionMessageBatch(MessagingEntityType entityType) {\n         }\n     }\n \n+    /**\n+     * Verifies that we can schedule a message to a non-session entity.\n+     */\n+    @MethodSource(\"receiverTypesProvider\")\n+    @ParameterizedTest\n+    void nonSessionScheduleMessage(MessagingEntityType entityType) {\n+        // Arrange\n+        setSenderAndReceiver(entityType);\n+\n+        final Instant scheduledEnqueueTime = Instant.now().plusSeconds(10);\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId);\n+\n+        // Act\n+        long sequenceNumber = sender.scheduleMessage(message, scheduledEnqueueTime);\n+\n+        // Assert\n+        Assertions.assertTrue(sequenceNumber > 0);\n+\n+        messagesPending.incrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we can cancel a scheduled a message to a non-session entity.\n+     */\n+    @MethodSource(\"receiverTypesProvider\")\n+    @ParameterizedTest\n+    void nonSessionCancelScheduleMessage(MessagingEntityType entityType) {\n+        // Arrange\n+        setSenderAndReceiver(entityType);\n+\n+        final Instant scheduledEnqueueTime = Instant.now().plusSeconds(20);\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId);\n+\n+        // Assert & Act\n+        long sequenceNumber = sender.scheduleMessage(message, scheduledEnqueueTime);\n+        Assertions.assertTrue(sequenceNumber > 0);\n+\n+        sender.cancelScheduledMessage(sequenceNumber);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3179e87b29fc9e78a6622fc3bb4d1fa061cd8ef2"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4482, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}