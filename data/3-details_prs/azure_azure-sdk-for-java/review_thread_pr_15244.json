{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3Njc4MjAy", "number": 15244, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNDo1MzowMlrOEj4tPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzowOTozNVrOEkJdbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDY0NzAyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNDo1MzowMlrOHSf-vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNToxOTowMVrOHSgftA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2MDM4Mw==", "bodyText": "channel.ensureIneventLop()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489160383", "createdAt": "2020-09-16T04:53:02Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1297,6 +1332,40 @@ public final AcquireListener acquired() {\n             return this;\n         }\n \n+        private void doOperationComplete(Channel channel) {\n+            if (!channel.isActive()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f870a547f2c87c1220d1d09333cf26f3309738f"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2ODgyMA==", "bodyText": "Added that", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489168820", "createdAt": "2020-09-16T05:19:01Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1297,6 +1332,40 @@ public final AcquireListener acquired() {\n             return this;\n         }\n \n+        private void doOperationComplete(Channel channel) {\n+            if (!channel.isActive()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2MDM4Mw=="}, "originalCommit": {"oid": "9f870a547f2c87c1220d1d09333cf26f3309738f"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTcxNTgxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdContextRequestEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDoxNjoxM1rOHSqHUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMTo0MDo1M1rOHSszsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMyNjQxNg==", "bodyText": "Is it future proofing or a bug?\nQuick check doesn't show any sub-classes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489326416", "createdAt": "2020-09-16T10:16:13Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdContextRequestEncoder.java", "diffHunk": "@@ -26,7 +26,7 @@\n      */\n     @Override\n     public boolean acceptOutboundMessage(final Object message) {\n-        return message.getClass() == RntbdContextRequest.class;\n+        return message instanceof RntbdContextRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc43aa8f89e26ec0e5f0b7ee574017fe59f6e548"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3MDU0NQ==", "bodyText": "Reverted in next iteration", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489370545", "createdAt": "2020-09-16T11:40:53Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdContextRequestEncoder.java", "diffHunk": "@@ -26,7 +26,7 @@\n      */\n     @Override\n     public boolean acceptOutboundMessage(final Object message) {\n-        return message.getClass() == RntbdContextRequest.class;\n+        return message instanceof RntbdContextRequest;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMyNjQxNg=="}, "originalCommit": {"oid": "dc43aa8f89e26ec0e5f0b7ee574017fe59f6e548"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTcyNDQ2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RequestTimeoutException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDoxODo1MFrOHSqMww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMToyNDozMVrOHSsSig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMyNzgxMQ==", "bodyText": "Isn't null value a bug?\nOr when is it expected.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489327811", "createdAt": "2020-09-16T10:18:50Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RequestTimeoutException.java", "diffHunk": "@@ -76,6 +77,23 @@ public RequestTimeoutException(String message, HttpHeaders headers, URI requestU\n                 : null);\n     }\n \n+    /**\n+     * Instantiates a new Request timeout exception.\n+     *\n+     * @param message the message\n+     * @param headers the headers\n+     * @param remoteAddress the remote address\n+     */\n+    public RequestTimeoutException(String message, HttpHeaders headers, SocketAddress remoteAddress) {\n+        super(message,\n+            null,\n+            HttpUtils.asMap(headers),\n+            HttpConstants.StatusCodes.REQUEST_TIMEOUT,\n+            remoteAddress != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc43aa8f89e26ec0e5f0b7ee574017fe59f6e548"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM2MjA1OA==", "bodyText": "Not expected - null check here to avoid NPE - and to be consistent with other overloads. So consumers of the RequestTimeoutException have to be aware that it can be null today already.\nLeaving it as is - please reactivate if you disagree.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489362058", "createdAt": "2020-09-16T11:24:31Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RequestTimeoutException.java", "diffHunk": "@@ -76,6 +77,23 @@ public RequestTimeoutException(String message, HttpHeaders headers, URI requestU\n                 : null);\n     }\n \n+    /**\n+     * Instantiates a new Request timeout exception.\n+     *\n+     * @param message the message\n+     * @param headers the headers\n+     * @param remoteAddress the remote address\n+     */\n+    public RequestTimeoutException(String message, HttpHeaders headers, SocketAddress remoteAddress) {\n+        super(message,\n+            null,\n+            HttpUtils.asMap(headers),\n+            HttpConstants.StatusCodes.REQUEST_TIMEOUT,\n+            remoteAddress != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMyNzgxMQ=="}, "originalCommit": {"oid": "dc43aa8f89e26ec0e5f0b7ee574017fe59f6e548"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTc3ODc1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/FailFastRntbdRequestRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDozMzo1OVrOHSqtOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMToyNzowNVrOHSsXdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzNjEyMQ==", "bodyText": "ActivityId for non-service interaction is mis-leading.\nHow about not have it?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489336121", "createdAt": "2020-09-16T10:33:59Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/FailFastRntbdRequestRecord.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity.rntbd;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.RequestTimeoutException;\n+import com.azure.cosmos.implementation.http.HttpHeaders;\n+import io.netty.util.Timeout;\n+import io.netty.util.TimerTask;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.SocketAddress;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.azure.cosmos.implementation.guava27.Strings.lenientFormat;\n+\n+public class FailFastRntbdRequestRecord extends RntbdRequestRecord {\n+    private static final Logger logger = LoggerFactory.getLogger(RntbdRequestRecord.class);\n+\n+    private FailFastRntbdRequestRecord(final RntbdRequestArgs args) {\n+        super(args);\n+    }\n+\n+    @Override\n+    public Timeout newTimeout(final TimerTask task) {\n+        throw new IllegalArgumentException(\"newTimeout must never be called for fail fast records.\");\n+    }\n+\n+    public static FailFastRntbdRequestRecord createAndFailFast(\n+        RntbdRequestArgs args,\n+        long concurrentRequestsSnapshot,\n+        AtomicInteger concurrentRequests,\n+        RntbdMetrics metrics,\n+        SocketAddress remoteAddress) {\n+\n+        FailFastRntbdRequestRecord failFastRecord = new FailFastRntbdRequestRecord(args);\n+\n+        logger.debug(\n+            \"\\n  [{}]\\n  {}\\n  created FailFastRntbdRequestRecord {} \",\n+            failFastRecord,\n+            args,\n+            concurrentRequests);\n+\n+        final String reason = lenientFormat(\n+            \"Failed due to too many (%s) concurrent requests.\",\n+            concurrentRequestsSnapshot);\n+\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.set(HttpConstants.HttpHeaders.ACTIVITY_ID, failFastRecord.activityId().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc43aa8f89e26ec0e5f0b7ee574017fe59f6e548"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM2MzMxOA==", "bodyText": "I have replicated here what happens for client-generated GoneException. I would rather not change it - because that would mean I need to check everywhere whether there are assumptions that the ACTIVITY_ID header exists everywhere. Don't want to take that risk right now (and leaving it in GoneException but not here sees worse than the approach in the PR). Leaving as is - please reactivate if you disagree.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489363318", "createdAt": "2020-09-16T11:27:05Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/FailFastRntbdRequestRecord.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity.rntbd;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.RequestTimeoutException;\n+import com.azure.cosmos.implementation.http.HttpHeaders;\n+import io.netty.util.Timeout;\n+import io.netty.util.TimerTask;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.SocketAddress;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.azure.cosmos.implementation.guava27.Strings.lenientFormat;\n+\n+public class FailFastRntbdRequestRecord extends RntbdRequestRecord {\n+    private static final Logger logger = LoggerFactory.getLogger(RntbdRequestRecord.class);\n+\n+    private FailFastRntbdRequestRecord(final RntbdRequestArgs args) {\n+        super(args);\n+    }\n+\n+    @Override\n+    public Timeout newTimeout(final TimerTask task) {\n+        throw new IllegalArgumentException(\"newTimeout must never be called for fail fast records.\");\n+    }\n+\n+    public static FailFastRntbdRequestRecord createAndFailFast(\n+        RntbdRequestArgs args,\n+        long concurrentRequestsSnapshot,\n+        AtomicInteger concurrentRequests,\n+        RntbdMetrics metrics,\n+        SocketAddress remoteAddress) {\n+\n+        FailFastRntbdRequestRecord failFastRecord = new FailFastRntbdRequestRecord(args);\n+\n+        logger.debug(\n+            \"\\n  [{}]\\n  {}\\n  created FailFastRntbdRequestRecord {} \",\n+            failFastRecord,\n+            args,\n+            concurrentRequests);\n+\n+        final String reason = lenientFormat(\n+            \"Failed due to too many (%s) concurrent requests.\",\n+            concurrentRequestsSnapshot);\n+\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.set(HttpConstants.HttpHeaders.ACTIVITY_ID, failFastRecord.activityId().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzNjEyMQ=="}, "originalCommit": {"oid": "dc43aa8f89e26ec0e5f0b7ee574017fe59f6e548"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTgwMTgwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/FailFastRntbdRequestRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDo0MDo0NVrOHSq7Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMTozODowMlrOHSsuAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzOTc0Nw==", "bodyText": "Is it absolutely necessary?\nCan the decrement be done in the ServiceEndpoint before fail?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489339747", "createdAt": "2020-09-16T10:40:45Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/FailFastRntbdRequestRecord.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity.rntbd;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.RequestTimeoutException;\n+import com.azure.cosmos.implementation.http.HttpHeaders;\n+import io.netty.util.Timeout;\n+import io.netty.util.TimerTask;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.SocketAddress;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.azure.cosmos.implementation.guava27.Strings.lenientFormat;\n+\n+public class FailFastRntbdRequestRecord extends RntbdRequestRecord {\n+    private static final Logger logger = LoggerFactory.getLogger(RntbdRequestRecord.class);\n+\n+    private FailFastRntbdRequestRecord(final RntbdRequestArgs args) {\n+        super(args);\n+    }\n+\n+    @Override\n+    public Timeout newTimeout(final TimerTask task) {\n+        throw new IllegalArgumentException(\"newTimeout must never be called for fail fast records.\");\n+    }\n+\n+    public static FailFastRntbdRequestRecord createAndFailFast(\n+        RntbdRequestArgs args,\n+        long concurrentRequestsSnapshot,\n+        AtomicInteger concurrentRequests,\n+        RntbdMetrics metrics,\n+        SocketAddress remoteAddress) {\n+\n+        FailFastRntbdRequestRecord failFastRecord = new FailFastRntbdRequestRecord(args);\n+\n+        logger.debug(\n+            \"\\n  [{}]\\n  {}\\n  created FailFastRntbdRequestRecord {} \",\n+            failFastRecord,\n+            args,\n+            concurrentRequests);\n+\n+        final String reason = lenientFormat(\n+            \"Failed due to too many (%s) concurrent requests.\",\n+            concurrentRequestsSnapshot);\n+\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.set(HttpConstants.HttpHeaders.ACTIVITY_ID, failFastRecord.activityId().toString());\n+\n+        failFastRecord.whenComplete((response, error) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc43aa8f89e26ec0e5f0b7ee574017fe59f6e548"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM2OTA4OQ==", "bodyText": "Fixed in next iteration", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489369089", "createdAt": "2020-09-16T11:38:02Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/FailFastRntbdRequestRecord.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity.rntbd;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.RequestTimeoutException;\n+import com.azure.cosmos.implementation.http.HttpHeaders;\n+import io.netty.util.Timeout;\n+import io.netty.util.TimerTask;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.SocketAddress;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.azure.cosmos.implementation.guava27.Strings.lenientFormat;\n+\n+public class FailFastRntbdRequestRecord extends RntbdRequestRecord {\n+    private static final Logger logger = LoggerFactory.getLogger(RntbdRequestRecord.class);\n+\n+    private FailFastRntbdRequestRecord(final RntbdRequestArgs args) {\n+        super(args);\n+    }\n+\n+    @Override\n+    public Timeout newTimeout(final TimerTask task) {\n+        throw new IllegalArgumentException(\"newTimeout must never be called for fail fast records.\");\n+    }\n+\n+    public static FailFastRntbdRequestRecord createAndFailFast(\n+        RntbdRequestArgs args,\n+        long concurrentRequestsSnapshot,\n+        AtomicInteger concurrentRequests,\n+        RntbdMetrics metrics,\n+        SocketAddress remoteAddress) {\n+\n+        FailFastRntbdRequestRecord failFastRecord = new FailFastRntbdRequestRecord(args);\n+\n+        logger.debug(\n+            \"\\n  [{}]\\n  {}\\n  created FailFastRntbdRequestRecord {} \",\n+            failFastRecord,\n+            args,\n+            concurrentRequests);\n+\n+        final String reason = lenientFormat(\n+            \"Failed due to too many (%s) concurrent requests.\",\n+            concurrentRequestsSnapshot);\n+\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.set(HttpConstants.HttpHeaders.ACTIVITY_ID, failFastRecord.activityId().toString());\n+\n+        failFastRecord.whenComplete((response, error) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzOTc0Nw=="}, "originalCommit": {"oid": "dc43aa8f89e26ec0e5f0b7ee574017fe59f6e548"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTgwNTc4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdServiceEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDo0MTo1NlrOHSq95Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMTo0MjoyMFrOHSs2uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM0MDM4OQ==", "bodyText": "Do upstream retries fail these or retry? (not a blocker now)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489340389", "createdAt": "2020-09-16T10:41:56Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdServiceEndpoint.java", "diffHunk": "@@ -185,7 +187,17 @@ public RntbdRequestRecord request(final RntbdRequestArgs args) {\n \n         this.throwIfClosed();\n \n-        this.concurrentRequests.incrementAndGet();\n+        int concurrentRequestSnapshot = this.concurrentRequests.incrementAndGet();\n+\n+        if (concurrentRequestSnapshot > this.maxConcurrentRequests) {\n+            return FailFastRntbdRequestRecord.createAndFailFast(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc43aa8f89e26ec0e5f0b7ee574017fe59f6e548"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3MTMyMw==", "bodyText": "No retry - that is why we chose this exception vs. GoneException. We don't want retries in this scenario", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489371323", "createdAt": "2020-09-16T11:42:20Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdServiceEndpoint.java", "diffHunk": "@@ -185,7 +187,17 @@ public RntbdRequestRecord request(final RntbdRequestArgs args) {\n \n         this.throwIfClosed();\n \n-        this.concurrentRequests.incrementAndGet();\n+        int concurrentRequestSnapshot = this.concurrentRequests.incrementAndGet();\n+\n+        if (concurrentRequestSnapshot > this.maxConcurrentRequests) {\n+            return FailFastRntbdRequestRecord.createAndFailFast(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM0MDM4OQ=="}, "originalCommit": {"oid": "dc43aa8f89e26ec0e5f0b7ee574017fe59f6e548"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzI4ODA1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo0MDoyOFrOHS5WhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzowMjozN1rOHS6JsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3NjA2OA==", "bodyText": "should it be DEFAULT_MAX_*?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489576068", "createdAt": "2020-09-16T16:40:28Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -252,6 +252,8 @@ private void throwIfClosed() {\n \n     public static final class Options {\n \n+        private static final int DEFAULT_MIN_MAX_CONCURRENT_REQUESTS_PER_ENDPOINT = 10_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f521cfcd75e1dbf7c5d8bc10d38084e594d655e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4OTE2OQ==", "bodyText": "No - it is the minimum allowed value for MaxConcurrentRequestsPerEndpoint (#maxChannel * #maxRequestsPerChannel is used if it is larger than the Default_Min_Max*", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489589169", "createdAt": "2020-09-16T17:02:37Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -252,6 +252,8 @@ private void throwIfClosed() {\n \n     public static final class Options {\n \n+        private static final int DEFAULT_MIN_MAX_CONCURRENT_REQUESTS_PER_ENDPOINT = 10_000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3NjA2OA=="}, "originalCommit": {"oid": "3f521cfcd75e1dbf7c5d8bc10d38084e594d655e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzMwMjQ2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/FailFastRntbdRequestRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo0NDozOVrOHS5f9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo1NjoyM1rOHS569w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3ODQ4NQ==", "bodyText": "Should this be FailFastRntbdRequestRecord.class?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489578485", "createdAt": "2020-09-16T16:44:39Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/FailFastRntbdRequestRecord.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity.rntbd;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.RequestTimeoutException;\n+import com.azure.cosmos.implementation.http.HttpHeaders;\n+import io.netty.util.Timeout;\n+import io.netty.util.TimerTask;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.SocketAddress;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.azure.cosmos.implementation.guava27.Strings.lenientFormat;\n+\n+public class FailFastRntbdRequestRecord extends RntbdRequestRecord {\n+    private static final Logger logger = LoggerFactory.getLogger(RntbdRequestRecord.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f521cfcd75e1dbf7c5d8bc10d38084e594d655e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4NTM5OQ==", "bodyText": "Fixed in next iteration", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489585399", "createdAt": "2020-09-16T16:56:23Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/FailFastRntbdRequestRecord.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity.rntbd;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.RequestTimeoutException;\n+import com.azure.cosmos.implementation.http.HttpHeaders;\n+import io.netty.util.Timeout;\n+import io.netty.util.TimerTask;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.SocketAddress;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.azure.cosmos.implementation.guava27.Strings.lenientFormat;\n+\n+public class FailFastRntbdRequestRecord extends RntbdRequestRecord {\n+    private static final Logger logger = LoggerFactory.getLogger(RntbdRequestRecord.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3ODQ4NQ=="}, "originalCommit": {"oid": "3f521cfcd75e1dbf7c5d8bc10d38084e594d655e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzMxNDk3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/FailFastRntbdRequestRecord.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo0ODoxMlrOHS5n_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzowODoxMVrOHS6WMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDU0Mg==", "bodyText": "The usual pattern I saw is: (should we follow here as well?)\nif (logger.isDebugEnabled) {\nlogger.debug()\n}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489580542", "createdAt": "2020-09-16T16:48:12Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/FailFastRntbdRequestRecord.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity.rntbd;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.RequestTimeoutException;\n+import com.azure.cosmos.implementation.http.HttpHeaders;\n+import io.netty.util.Timeout;\n+import io.netty.util.TimerTask;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.SocketAddress;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.azure.cosmos.implementation.guava27.Strings.lenientFormat;\n+\n+public class FailFastRntbdRequestRecord extends RntbdRequestRecord {\n+    private static final Logger logger = LoggerFactory.getLogger(RntbdRequestRecord.class);\n+\n+    private FailFastRntbdRequestRecord(final RntbdRequestArgs args) {\n+        super(args);\n+    }\n+\n+    @Override\n+    public Timeout newTimeout(final TimerTask task) {\n+        throw new IllegalArgumentException(\"newTimeout must never be called for fail fast records.\");\n+    }\n+\n+    public static FailFastRntbdRequestRecord createAndFailFast(\n+        RntbdRequestArgs args,\n+        long concurrentRequestsSnapshot,\n+        RntbdMetrics metrics,\n+        SocketAddress remoteAddress) {\n+\n+        FailFastRntbdRequestRecord failFastRecord = new FailFastRntbdRequestRecord(args);\n+\n+        logger.debug(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f521cfcd75e1dbf7c5d8bc10d38084e594d655e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4ODQ4Mg==", "bodyText": "The pattern is used extremely inconsistent - from my understanding it is extremely useful if it is expensive to \"calculate\" the message to be logged (to avoid even preparing the message when debug logging is disabled). I will leave it here as is (cheap to get the to be logged message). But I agree that it would be good to go over the entire code base and decide how to get this consistent. I can pick this up when I look at the perf optimizations that I want to take a look at (primarily for write)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489588482", "createdAt": "2020-09-16T17:01:21Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/FailFastRntbdRequestRecord.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity.rntbd;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.RequestTimeoutException;\n+import com.azure.cosmos.implementation.http.HttpHeaders;\n+import io.netty.util.Timeout;\n+import io.netty.util.TimerTask;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.SocketAddress;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.azure.cosmos.implementation.guava27.Strings.lenientFormat;\n+\n+public class FailFastRntbdRequestRecord extends RntbdRequestRecord {\n+    private static final Logger logger = LoggerFactory.getLogger(RntbdRequestRecord.class);\n+\n+    private FailFastRntbdRequestRecord(final RntbdRequestArgs args) {\n+        super(args);\n+    }\n+\n+    @Override\n+    public Timeout newTimeout(final TimerTask task) {\n+        throw new IllegalArgumentException(\"newTimeout must never be called for fail fast records.\");\n+    }\n+\n+    public static FailFastRntbdRequestRecord createAndFailFast(\n+        RntbdRequestArgs args,\n+        long concurrentRequestsSnapshot,\n+        RntbdMetrics metrics,\n+        SocketAddress remoteAddress) {\n+\n+        FailFastRntbdRequestRecord failFastRecord = new FailFastRntbdRequestRecord(args);\n+\n+        logger.debug(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDU0Mg=="}, "originalCommit": {"oid": "3f521cfcd75e1dbf7c5d8bc10d38084e594d655e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5MjM2OA==", "bodyText": "For admission control with lots of load its useful.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489592368", "createdAt": "2020-09-16T17:08:11Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/FailFastRntbdRequestRecord.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.directconnectivity.rntbd;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.RequestTimeoutException;\n+import com.azure.cosmos.implementation.http.HttpHeaders;\n+import io.netty.util.Timeout;\n+import io.netty.util.TimerTask;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.SocketAddress;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.azure.cosmos.implementation.guava27.Strings.lenientFormat;\n+\n+public class FailFastRntbdRequestRecord extends RntbdRequestRecord {\n+    private static final Logger logger = LoggerFactory.getLogger(RntbdRequestRecord.class);\n+\n+    private FailFastRntbdRequestRecord(final RntbdRequestArgs args) {\n+        super(args);\n+    }\n+\n+    @Override\n+    public Timeout newTimeout(final TimerTask task) {\n+        throw new IllegalArgumentException(\"newTimeout must never be called for fail fast records.\");\n+    }\n+\n+    public static FailFastRntbdRequestRecord createAndFailFast(\n+        RntbdRequestArgs args,\n+        long concurrentRequestsSnapshot,\n+        RntbdMetrics metrics,\n+        SocketAddress remoteAddress) {\n+\n+        FailFastRntbdRequestRecord failFastRecord = new FailFastRntbdRequestRecord(args);\n+\n+        logger.debug(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MDU0Mg=="}, "originalCommit": {"oid": "3f521cfcd75e1dbf7c5d8bc10d38084e594d655e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzMyNTI3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo1MTowNVrOHS5upQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzowMTozOFrOHS6Heg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MjI0NQ==", "bodyText": "Same here, should we check whether the logger.isDebugEnabled?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489582245", "createdAt": "2020-09-16T16:51:05Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -588,7 +588,7 @@ private void acquireChannel(final ChannelPromiseWithExpiryTime promise) {\n                     final RntbdRequestManager manager = channel.pipeline().get(RntbdRequestManager.class);\n \n                     if (manager == null) {\n-                        logger.warn(\"Channel({} --> {}) closed\", channel, this.remoteAddress());\n+                        logger.debug(\"Channel({} --> {}) closed\", channel, this.remoteAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f521cfcd75e1dbf7c5d8bc10d38084e594d655e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4ODYwMg==", "bodyText": "see above()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489588602", "createdAt": "2020-09-16T17:01:38Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -588,7 +588,7 @@ private void acquireChannel(final ChannelPromiseWithExpiryTime promise) {\n                     final RntbdRequestManager manager = channel.pipeline().get(RntbdRequestManager.class);\n \n                     if (manager == null) {\n-                        logger.warn(\"Channel({} --> {}) closed\", channel, this.remoteAddress());\n+                        logger.debug(\"Channel({} --> {}) closed\", channel, this.remoteAddress());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MjI0NQ=="}, "originalCommit": {"oid": "3f521cfcd75e1dbf7c5d8bc10d38084e594d655e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzM4MDU2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestRecord.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzowNjoyMVrOHS6SDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzowNjoyMVrOHS6SDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5MTMwOA==", "bodyText": "why only timeQueued changed to final? should also change timeCompleted, timePipelined etc?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489591308", "createdAt": "2020-09-16T17:06:21Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestRecord.java", "diffHunk": "@@ -48,29 +48,26 @@\n             \"stage\");\n \n     private final RntbdRequestArgs args;\n-    private final RntbdRequestTimer timer;\n \n     private volatile int requestLength;\n     private volatile int responseLength;\n     private volatile Stage stage;\n \n     private volatile Instant timeCompleted;\n     private volatile Instant timePipelined;\n-    private volatile Instant timeQueued;\n+    private final Instant timeQueued;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f521cfcd75e1dbf7c5d8bc10d38084e594d655e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzM5MTgzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdServiceEndpoint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzowOTozNVrOHS6ZLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzowOTozNVrOHS6ZLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5MzEzMw==", "bodyText": "should decrease inside failFastRntbdRequestRecord.whenComplete?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15244#discussion_r489593133", "createdAt": "2020-09-16T17:09:35Z", "author": {"login": "xinlian12"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdServiceEndpoint.java", "diffHunk": "@@ -185,7 +187,21 @@ public RntbdRequestRecord request(final RntbdRequestArgs args) {\n \n         this.throwIfClosed();\n \n-        this.concurrentRequests.incrementAndGet();\n+        int concurrentRequestSnapshot = this.concurrentRequests.incrementAndGet();\n+\n+        if (concurrentRequestSnapshot > this.maxConcurrentRequests) {\n+            try {\n+                return FailFastRntbdRequestRecord.createAndFailFast(\n+                    args,\n+                    concurrentRequestSnapshot,\n+                    metrics,\n+                    remoteAddress);\n+            }\n+            finally {\n+                concurrentRequests.decrementAndGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f521cfcd75e1dbf7c5d8bc10d38084e594d655e"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1034, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}