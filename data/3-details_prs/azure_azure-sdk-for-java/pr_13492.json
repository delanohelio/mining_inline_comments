{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NDEwMTc4", "number": 13492, "title": "Use TypeReference<T> in ObjectSerializer and JsonSerializer Interfaces", "bodyText": "This PR  prototypes using a custom TypeReference<T> in the ObjectSerializer and JsonSerializer interfaces. TypeReference<T> allows for both parameterized types and T to be maintained in deserialization. It allows for more complex scenarios such as Map<String, Object> to be handled while maintaining T information on return, unlike Type which will return Object.", "createdAt": "2020-07-24T17:42:39Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13492", "merged": true, "mergeCommit": {"oid": "6e27b1491a973adb5771c1fea5951ba2ccf88a98"}, "closed": true, "closedAt": "2020-07-28T22:30:18Z", "author": {"login": "alzimmermsft"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4Hoq8AH2gAyNDU2NDEwMTc4OjI2M2I2NDQ2NDI3YTZkMzQxMWMyMGQ5YzBlNjJlZWJmYmUwM2JlZTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5eHjXAFqTQ1NzA3MTM5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "263b6446427a6d3411c20d9c0e62eebfbe03bee0", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/263b6446427a6d3411c20d9c0e62eebfbe03bee0", "committedDate": "2020-07-24T17:39:36Z", "message": "Use Type<T> in serializer interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d205f95589b6e68a8839cbb15ec682139a8128d2", "author": {"user": {"login": "alzimmermsft", "name": "Alan Zimmer"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d205f95589b6e68a8839cbb15ec682139a8128d2", "committedDate": "2020-07-24T20:50:16Z", "message": "Rename Type<T> to TypeReference<T> to differentiate it from Java's Type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjMwMDk2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13492#pullrequestreview-455230096", "createdAt": "2020-07-24T23:17:33Z", "commit": {"oid": "d205f95589b6e68a8839cbb15ec682139a8128d2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MDE1MzQx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13492#pullrequestreview-457015341", "createdAt": "2020-07-28T21:10:09Z", "commit": {"oid": "d205f95589b6e68a8839cbb15ec682139a8128d2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMToxMDowOVrOG4fAHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMToxMzozOFrOG4fG-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MTM3NA==", "bodyText": "Why is this abstract?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13492#discussion_r461881374", "createdAt": "2020-07-28T21:10:09Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/TypeReference.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.serializer;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+/**\n+ * This class represents a generic Java type, retaining information about generics.\n+ *\n+ * @param <T> The type being represented.\n+ */\n+public abstract class TypeReference<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d205f95589b6e68a8839cbb15ec682139a8128d2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MjAyOQ==", "bodyText": "This serves the purpose. The only thing is that the user will now have to learn about TypeReference but since this is going to be used mainly client library developers, I am not too worried about this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13492#discussion_r461882029", "createdAt": "2020-07-28T21:11:24Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/JsonSerializer.java", "diffHunk": "@@ -16,22 +16,22 @@\n      * Reads a JSON stream into its object representation.\n      *\n      * @param stream JSON stream.\n-     * @param clazz {@link Class} representing the object.\n+     * @param typeReference {@link TypeReference} representing the object.\n      * @param <T> Type of the object.\n      * @return The object represented by the deserialized JSON stream.\n      */\n     @Override\n-    <T> Mono<T> deserialize(InputStream stream, Class<T> clazz);\n+    <T> Mono<T> deserialize(InputStream stream, TypeReference<T> typeReference);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d205f95589b6e68a8839cbb15ec682139a8128d2"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MzEzMQ==", "bodyText": "Can we avoid creating a new instance for same type here and also have a way to minimize duplicate instances when used by the user? Maybe have a static map of known types and vend those TypeReference instances if one exists or create one if it doesnt?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13492#discussion_r461883131", "createdAt": "2020-07-28T21:13:38Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-serializer-avro-apache/src/test/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializerTests.java", "diffHunk": "@@ -54,61 +55,56 @@ private static ApacheAvroSerializer getSerializer(String schema) {\n \n     @ParameterizedTest\n     @MethodSource(\"deserializePrimitiveTypesSupplier\")\n-    public <T> void deserializePrimitiveTypes(InputStream avro, String schema, Class<T> clazz, T expected) {\n-        StepVerifier.create(getSerializer(schema).deserialize(avro, clazz))\n-            .assertNext(actual -> {\n-                assertTrue(clazz.isAssignableFrom(actual.getClass()));\n-                assertEquals(expected, actual);\n-            })\n+    public <T> void deserializePrimitiveTypes(InputStream avro, String schema, TypeReference<T> type, T expected) {\n+        StepVerifier.create(getSerializer(schema).deserialize(avro, type))\n+            .assertNext(actual -> assertEquals(expected, actual))\n             .verifyComplete();\n     }\n \n     private static Stream<Arguments> deserializePrimitiveTypesSupplier() {\n         return Stream.of(\n-            Arguments.of(streamCreator(0), schemaCreator(\"boolean\"), Boolean.class, false),\n-            Arguments.of(streamCreator(1), schemaCreator(\"boolean\"), Boolean.class, true),\n+            Arguments.of(streamCreator(0), schemaCreator(\"boolean\"), new TypeReference<Boolean>() { }, false),\n+            Arguments.of(streamCreator(1), schemaCreator(\"boolean\"), new TypeReference<Boolean>() { }, true),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d205f95589b6e68a8839cbb15ec682139a8128d2"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MDcxMzk0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13492#pullrequestreview-457071394", "createdAt": "2020-07-28T22:25:10Z", "commit": {"oid": "d205f95589b6e68a8839cbb15ec682139a8128d2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1116, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}