{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNDE0MTUw", "number": 16108, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODoxODoxOFrOEshdaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODoxODo1OVrOEshebw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTIxMDAxOnYy", "diffSide": "RIGHT", "path": "sdk/resourcemanager/azure-resourcemanager-keyvault/src/main/java/com/azure/resourcemanager/keyvault/implementation/SecretsImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODoxODoxOFrOHfz3rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNDowMzo1MlrOHgUnkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExNzc0MA==", "bodyText": "Is it better use something like makeSecretEnabledOrDisabled? Not just named with enable", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16108#discussion_r503117740", "createdAt": "2020-10-12T08:18:18Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resourcemanager/azure-resourcemanager-keyvault/src/main/java/com/azure/resourcemanager/keyvault/implementation/SecretsImpl.java", "diffHunk": "@@ -110,7 +123,51 @@ public Secret getByNameAndVersion(String name, String version) {\n \n     @Override\n     public Mono<Secret> getByNameAndVersionAsync(final String name, final String version) {\n-        return inner.getSecret(name, version).map(this::wrapModel);\n+        Objects.requireNonNull(name);\n+        return (version == null ? inner.getSecret(name) : inner.getSecret(name, version)).map(this::wrapModel);\n+    }\n+\n+    @Override\n+    public Secret enableByNameAndVersion(String name, String version) {\n+        return enableByNameAndVersionAsync(name, version).block();\n+    }\n+\n+    @Override\n+    public Mono<Secret> enableByNameAndVersionAsync(String name, String version) {\n+        Objects.requireNonNull(name);\n+        return enableByNameAndVersionAsync(name, version, true);\n+    }\n+\n+    @Override\n+    public void disableByNameAndVersion(String name, String version) {\n+        disableByNameAndVersionAsync(name, version).block();\n+    }\n+\n+    @Override\n+    public Mono<Void> disableByNameAndVersionAsync(String name, String version) {\n+        Objects.requireNonNull(name);\n+        return enableByNameAndVersionAsync(name, version, false).then();\n+    }\n+\n+    private Mono<Secret> enableByNameAndVersionAsync(String name, String version, boolean enabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40056f1f13ee1ea08c4383216694cfce50a91d4e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1Nzk5OQ==", "bodyText": "It is private method so I am a bit relax on the naming. I will try to figure out a better name.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16108#discussion_r503157999", "createdAt": "2020-10-12T09:21:47Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-keyvault/src/main/java/com/azure/resourcemanager/keyvault/implementation/SecretsImpl.java", "diffHunk": "@@ -110,7 +123,51 @@ public Secret getByNameAndVersion(String name, String version) {\n \n     @Override\n     public Mono<Secret> getByNameAndVersionAsync(final String name, final String version) {\n-        return inner.getSecret(name, version).map(this::wrapModel);\n+        Objects.requireNonNull(name);\n+        return (version == null ? inner.getSecret(name) : inner.getSecret(name, version)).map(this::wrapModel);\n+    }\n+\n+    @Override\n+    public Secret enableByNameAndVersion(String name, String version) {\n+        return enableByNameAndVersionAsync(name, version).block();\n+    }\n+\n+    @Override\n+    public Mono<Secret> enableByNameAndVersionAsync(String name, String version) {\n+        Objects.requireNonNull(name);\n+        return enableByNameAndVersionAsync(name, version, true);\n+    }\n+\n+    @Override\n+    public void disableByNameAndVersion(String name, String version) {\n+        disableByNameAndVersionAsync(name, version).block();\n+    }\n+\n+    @Override\n+    public Mono<Void> disableByNameAndVersionAsync(String name, String version) {\n+        Objects.requireNonNull(name);\n+        return enableByNameAndVersionAsync(name, version, false).then();\n+    }\n+\n+    private Mono<Secret> enableByNameAndVersionAsync(String name, String version, boolean enabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExNzc0MA=="}, "originalCommit": {"oid": "40056f1f13ee1ea08c4383216694cfce50a91d4e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1NDI4OQ==", "bodyText": "Changed to updateSecretEnableDisableAsync", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16108#discussion_r503654289", "createdAt": "2020-10-13T04:03:52Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-keyvault/src/main/java/com/azure/resourcemanager/keyvault/implementation/SecretsImpl.java", "diffHunk": "@@ -110,7 +123,51 @@ public Secret getByNameAndVersion(String name, String version) {\n \n     @Override\n     public Mono<Secret> getByNameAndVersionAsync(final String name, final String version) {\n-        return inner.getSecret(name, version).map(this::wrapModel);\n+        Objects.requireNonNull(name);\n+        return (version == null ? inner.getSecret(name) : inner.getSecret(name, version)).map(this::wrapModel);\n+    }\n+\n+    @Override\n+    public Secret enableByNameAndVersion(String name, String version) {\n+        return enableByNameAndVersionAsync(name, version).block();\n+    }\n+\n+    @Override\n+    public Mono<Secret> enableByNameAndVersionAsync(String name, String version) {\n+        Objects.requireNonNull(name);\n+        return enableByNameAndVersionAsync(name, version, true);\n+    }\n+\n+    @Override\n+    public void disableByNameAndVersion(String name, String version) {\n+        disableByNameAndVersionAsync(name, version).block();\n+    }\n+\n+    @Override\n+    public Mono<Void> disableByNameAndVersionAsync(String name, String version) {\n+        Objects.requireNonNull(name);\n+        return enableByNameAndVersionAsync(name, version, false).then();\n+    }\n+\n+    private Mono<Secret> enableByNameAndVersionAsync(String name, String version, boolean enabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExNzc0MA=="}, "originalCommit": {"oid": "40056f1f13ee1ea08c4383216694cfce50a91d4e"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTIxMjYzOnYy", "diffSide": "RIGHT", "path": "sdk/resourcemanager/azure-resourcemanager-keyvault/src/main/java/com/azure/resourcemanager/keyvault/implementation/SecretsImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODoxODo1OVrOHfz5SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOToxNzo1MlrOHf2LVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExODE1Mg==", "bodyText": "Is it any other way rather than using such a mock ID?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16108#discussion_r503118152", "createdAt": "2020-10-12T08:18:59Z", "author": {"login": "ChenTanyi"}, "path": "sdk/resourcemanager/azure-resourcemanager-keyvault/src/main/java/com/azure/resourcemanager/keyvault/implementation/SecretsImpl.java", "diffHunk": "@@ -110,7 +123,51 @@ public Secret getByNameAndVersion(String name, String version) {\n \n     @Override\n     public Mono<Secret> getByNameAndVersionAsync(final String name, final String version) {\n-        return inner.getSecret(name, version).map(this::wrapModel);\n+        Objects.requireNonNull(name);\n+        return (version == null ? inner.getSecret(name) : inner.getSecret(name, version)).map(this::wrapModel);\n+    }\n+\n+    @Override\n+    public Secret enableByNameAndVersion(String name, String version) {\n+        return enableByNameAndVersionAsync(name, version).block();\n+    }\n+\n+    @Override\n+    public Mono<Secret> enableByNameAndVersionAsync(String name, String version) {\n+        Objects.requireNonNull(name);\n+        return enableByNameAndVersionAsync(name, version, true);\n+    }\n+\n+    @Override\n+    public void disableByNameAndVersion(String name, String version) {\n+        disableByNameAndVersionAsync(name, version).block();\n+    }\n+\n+    @Override\n+    public Mono<Void> disableByNameAndVersionAsync(String name, String version) {\n+        Objects.requireNonNull(name);\n+        return enableByNameAndVersionAsync(name, version, false).then();\n+    }\n+\n+    private Mono<Secret> enableByNameAndVersionAsync(String name, String version, boolean enabled) {\n+        try {\n+            String mockId = \"https://foo.vault.azure.net/secrets/\" + name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40056f1f13ee1ea08c4383216694cfce50a91d4e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1NTAyOQ==", "bodyText": "The problem is that SecretProperties does not have constructor that can take the version. So the only way I can create a SecretProperties with version is to use serialization (https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/models/SecretProperties.java#L330-L344).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16108#discussion_r503155029", "createdAt": "2020-10-12T09:16:58Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-keyvault/src/main/java/com/azure/resourcemanager/keyvault/implementation/SecretsImpl.java", "diffHunk": "@@ -110,7 +123,51 @@ public Secret getByNameAndVersion(String name, String version) {\n \n     @Override\n     public Mono<Secret> getByNameAndVersionAsync(final String name, final String version) {\n-        return inner.getSecret(name, version).map(this::wrapModel);\n+        Objects.requireNonNull(name);\n+        return (version == null ? inner.getSecret(name) : inner.getSecret(name, version)).map(this::wrapModel);\n+    }\n+\n+    @Override\n+    public Secret enableByNameAndVersion(String name, String version) {\n+        return enableByNameAndVersionAsync(name, version).block();\n+    }\n+\n+    @Override\n+    public Mono<Secret> enableByNameAndVersionAsync(String name, String version) {\n+        Objects.requireNonNull(name);\n+        return enableByNameAndVersionAsync(name, version, true);\n+    }\n+\n+    @Override\n+    public void disableByNameAndVersion(String name, String version) {\n+        disableByNameAndVersionAsync(name, version).block();\n+    }\n+\n+    @Override\n+    public Mono<Void> disableByNameAndVersionAsync(String name, String version) {\n+        Objects.requireNonNull(name);\n+        return enableByNameAndVersionAsync(name, version, false).then();\n+    }\n+\n+    private Mono<Secret> enableByNameAndVersionAsync(String name, String version, boolean enabled) {\n+        try {\n+            String mockId = \"https://foo.vault.azure.net/secrets/\" + name;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExODE1Mg=="}, "originalCommit": {"oid": "40056f1f13ee1ea08c4383216694cfce50a91d4e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1NTU0MQ==", "bodyText": "Alternative would to do a list, then choose the correct SecretProperties.\nWe cannot do get, since a disabled secret would fail in get.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16108#discussion_r503155541", "createdAt": "2020-10-12T09:17:52Z", "author": {"login": "weidongxu-microsoft"}, "path": "sdk/resourcemanager/azure-resourcemanager-keyvault/src/main/java/com/azure/resourcemanager/keyvault/implementation/SecretsImpl.java", "diffHunk": "@@ -110,7 +123,51 @@ public Secret getByNameAndVersion(String name, String version) {\n \n     @Override\n     public Mono<Secret> getByNameAndVersionAsync(final String name, final String version) {\n-        return inner.getSecret(name, version).map(this::wrapModel);\n+        Objects.requireNonNull(name);\n+        return (version == null ? inner.getSecret(name) : inner.getSecret(name, version)).map(this::wrapModel);\n+    }\n+\n+    @Override\n+    public Secret enableByNameAndVersion(String name, String version) {\n+        return enableByNameAndVersionAsync(name, version).block();\n+    }\n+\n+    @Override\n+    public Mono<Secret> enableByNameAndVersionAsync(String name, String version) {\n+        Objects.requireNonNull(name);\n+        return enableByNameAndVersionAsync(name, version, true);\n+    }\n+\n+    @Override\n+    public void disableByNameAndVersion(String name, String version) {\n+        disableByNameAndVersionAsync(name, version).block();\n+    }\n+\n+    @Override\n+    public Mono<Void> disableByNameAndVersionAsync(String name, String version) {\n+        Objects.requireNonNull(name);\n+        return enableByNameAndVersionAsync(name, version, false).then();\n+    }\n+\n+    private Mono<Secret> enableByNameAndVersionAsync(String name, String version, boolean enabled) {\n+        try {\n+            String mockId = \"https://foo.vault.azure.net/secrets/\" + name;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExODE1Mg=="}, "originalCommit": {"oid": "40056f1f13ee1ea08c4383216694cfce50a91d4e"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3565, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}