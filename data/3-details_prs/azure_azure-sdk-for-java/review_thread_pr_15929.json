{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3OTc2NTc1", "number": 15929, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0MzoyMVrOEqZi2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoxMDoyMFrOEqaIAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODk0MTY4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedFluxCore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0MzoyMVrOHclTng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo1MjoyMVrOHcloNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMzQwNg==", "bodyText": "Any reason for setting this to 4 instead of 1? Probably adding a comment to explain why 4 was chosen would help.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15929#discussion_r499733406", "createdAt": "2020-10-05T16:43:21Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedFluxCore.java", "diffHunk": "@@ -156,23 +152,25 @@ public void subscribe(CoreSubscriber<? super T> coreSubscriber) {\n      * @param state the state to be used across multiple Page Retriever Function calls\n      * @param pageRetriever the Page Retriever Function\n      * @param pageSize the preferred page size\n-     * @param <C> the type of Continuation token\n-     * @param <T> The type of items in a {@link ContinuablePage}\n-     * @param <P> The {@link ContinuablePage} holding items of type {@code T}\n      * @return a Flux of {@link ContinuablePage}\n      */\n-    private static <C, T, P extends ContinuablePage<C, T>> Flux<P> concatFluxOfPage(ContinuationState<C> state,\n-        PageRetriever<C, P> pageRetriever, Integer pageSize) {\n+    private Flux<P> retrievePages(ContinuationState<C> state, PageRetriever<C, P> pageRetriever, Integer pageSize) {\n+        return retrievePage(state, pageRetriever, pageSize)\n+            .expand(page -> {\n+                state.setLastContinuationToken(page.getContinuationToken());\n+                return Flux.defer(() -> retrievePage(state, pageRetriever, pageSize));\n+            }, 4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26543a6f7ea580b6325e23ccbf422eb9ce8d1b7a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczODY3OA==", "bodyText": "I should add a comment here. The second argument is a hint to the operator that determines how large of an initial buffer it should instantiate. Given that PageRetriever returns a Flux the implementation could return more than one. Also, appears from looking at Reactor's code the smallest this could be is 8 but sticking with 4 for now in case that changes in the future.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15929#discussion_r499738678", "createdAt": "2020-10-05T16:52:21Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedFluxCore.java", "diffHunk": "@@ -156,23 +152,25 @@ public void subscribe(CoreSubscriber<? super T> coreSubscriber) {\n      * @param state the state to be used across multiple Page Retriever Function calls\n      * @param pageRetriever the Page Retriever Function\n      * @param pageSize the preferred page size\n-     * @param <C> the type of Continuation token\n-     * @param <T> The type of items in a {@link ContinuablePage}\n-     * @param <P> The {@link ContinuablePage} holding items of type {@code T}\n      * @return a Flux of {@link ContinuablePage}\n      */\n-    private static <C, T, P extends ContinuablePage<C, T>> Flux<P> concatFluxOfPage(ContinuationState<C> state,\n-        PageRetriever<C, P> pageRetriever, Integer pageSize) {\n+    private Flux<P> retrievePages(ContinuationState<C> state, PageRetriever<C, P> pageRetriever, Integer pageSize) {\n+        return retrievePage(state, pageRetriever, pageSize)\n+            .expand(page -> {\n+                state.setLastContinuationToken(page.getContinuationToken());\n+                return Flux.defer(() -> retrievePage(state, pageRetriever, pageSize));\n+            }, 4);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMzQwNg=="}, "originalCommit": {"oid": "26543a6f7ea580b6325e23ccbf422eb9ce8d1b7a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTAzNjgyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedFluxCore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoxMDoyMFrOHcmPHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoyMTo0NVrOHcmoSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0ODYzOA==", "bodyText": "I think it makes no difference in our case; i.e. storing the continuation-token before we gave the page to the user (i.e. in doOnNext immediately after call to \"retrievePage\") vs storing it after user consumes the page (inside expand).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15929#discussion_r499748638", "createdAt": "2020-10-05T17:10:20Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedFluxCore.java", "diffHunk": "@@ -156,23 +152,25 @@ public void subscribe(CoreSubscriber<? super T> coreSubscriber) {\n      * @param state the state to be used across multiple Page Retriever Function calls\n      * @param pageRetriever the Page Retriever Function\n      * @param pageSize the preferred page size\n-     * @param <C> the type of Continuation token\n-     * @param <T> The type of items in a {@link ContinuablePage}\n-     * @param <P> The {@link ContinuablePage} holding items of type {@code T}\n      * @return a Flux of {@link ContinuablePage}\n      */\n-    private static <C, T, P extends ContinuablePage<C, T>> Flux<P> concatFluxOfPage(ContinuationState<C> state,\n-        PageRetriever<C, P> pageRetriever, Integer pageSize) {\n+    private Flux<P> retrievePages(ContinuationState<C> state, PageRetriever<C, P> pageRetriever, Integer pageSize) {\n+        return retrievePage(state, pageRetriever, pageSize)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26543a6f7ea580b6325e23ccbf422eb9ce8d1b7a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1MjA0OQ==", "bodyText": "From what I remember being told it is better to have explicitly needed operations performed in map or flatMap as doOnX is meant for side affect operations such as logging or metrics. I don't see continuation token updating as a side affect but an explicit need.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15929#discussion_r499752049", "createdAt": "2020-10-05T17:16:25Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedFluxCore.java", "diffHunk": "@@ -156,23 +152,25 @@ public void subscribe(CoreSubscriber<? super T> coreSubscriber) {\n      * @param state the state to be used across multiple Page Retriever Function calls\n      * @param pageRetriever the Page Retriever Function\n      * @param pageSize the preferred page size\n-     * @param <C> the type of Continuation token\n-     * @param <T> The type of items in a {@link ContinuablePage}\n-     * @param <P> The {@link ContinuablePage} holding items of type {@code T}\n      * @return a Flux of {@link ContinuablePage}\n      */\n-    private static <C, T, P extends ContinuablePage<C, T>> Flux<P> concatFluxOfPage(ContinuationState<C> state,\n-        PageRetriever<C, P> pageRetriever, Integer pageSize) {\n+    private Flux<P> retrievePages(ContinuationState<C> state, PageRetriever<C, P> pageRetriever, Integer pageSize) {\n+        return retrievePage(state, pageRetriever, pageSize)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0ODYzOA=="}, "originalCommit": {"oid": "26543a6f7ea580b6325e23ccbf422eb9ce8d1b7a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NTA4MA==", "bodyText": "Yep, I think all we need to ensure is the link is tthere before retrieving the next page, which we do. lgtm.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15929#discussion_r499755080", "createdAt": "2020-10-05T17:21:45Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedFluxCore.java", "diffHunk": "@@ -156,23 +152,25 @@ public void subscribe(CoreSubscriber<? super T> coreSubscriber) {\n      * @param state the state to be used across multiple Page Retriever Function calls\n      * @param pageRetriever the Page Retriever Function\n      * @param pageSize the preferred page size\n-     * @param <C> the type of Continuation token\n-     * @param <T> The type of items in a {@link ContinuablePage}\n-     * @param <P> The {@link ContinuablePage} holding items of type {@code T}\n      * @return a Flux of {@link ContinuablePage}\n      */\n-    private static <C, T, P extends ContinuablePage<C, T>> Flux<P> concatFluxOfPage(ContinuationState<C> state,\n-        PageRetriever<C, P> pageRetriever, Integer pageSize) {\n+    private Flux<P> retrievePages(ContinuationState<C> state, PageRetriever<C, P> pageRetriever, Integer pageSize) {\n+        return retrievePage(state, pageRetriever, pageSize)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0ODYzOA=="}, "originalCommit": {"oid": "26543a6f7ea580b6325e23ccbf422eb9ce8d1b7a"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3576, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}