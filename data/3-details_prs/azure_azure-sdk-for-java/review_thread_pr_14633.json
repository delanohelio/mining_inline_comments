{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2MDM2NDY1", "number": 14633, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjozNjo1M1rOEeYbmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzozODowNVrOEeZuQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjkzMDE5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/ServiceBusAdministrationAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjozNjo1M1rOHKAHfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDozNDoxNVrOHKISOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0OTcyNg==", "bodyText": "put subscriptionName ahead of ruleName?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14633#discussion_r480249726", "createdAt": "2020-08-31T16:36:53Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/ServiceBusAdministrationAsyncClient.java", "diffHunk": "@@ -182,6 +194,82 @@\n         return withContext(context -> createQueueWithResponse(queueName, queueOptions, context));\n     }\n \n+    /**\n+     * Creates a rule under the given topic and subscription\n+     *\n+     * @param topicName Name of the topic associated with rule.\n+     * @param subscriptionName Name of the subscription associated with the rule.\n+     * @param ruleName Name of the rule.\n+     *\n+     * @return A Mono that completes with information about the created rule.\n+     * @throws ClientAuthenticationException if the client's credentials do not have access to modify the\n+     *     namespace.\n+     * @throws HttpResponseException If the request body was invalid, the quota is exceeded, or an error occurred\n+     *     processing the request.\n+     * @throws IllegalArgumentException if {@code topicName} or {@code ruleName} are are empty strings.\n+     * @throws NullPointerException if {@code topicName} or {@code ruleName} are are null.\n+     * @throws ResourceExistsException if a rule exists with the same topic, subscription, and rule name.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<RuleProperties> createRule(String topicName, String subscriptionName, String ruleName) {\n+        try {\n+            return createRule(topicName, subscriptionName, ruleName, new CreateRuleOptions());\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Creates a rule with the {@link CreateRuleOptions}.\n+     *\n+     * @param topicName Name of the topic associated with rule.\n+     * @param subscriptionName Name of the subscription associated with the rule.\n+     * @param ruleName Name of the rule.\n+     * @param ruleOptions Information about the rule to create.\n+     *\n+     * @return A Mono that completes with information about the created rule.\n+     * @throws ClientAuthenticationException if the client's credentials do not have access to modify the\n+     *     namespace.\n+     * @throws HttpResponseException If the request body was invalid, the quota is exceeded, or an error occurred\n+     *     processing the request.\n+     * @throws IllegalArgumentException if {@code topicName} or {@code ruleName} are are empty strings.\n+     * @throws NullPointerException if {@code topicName}, {@code ruleName}, or {@code ruleOptions}\n+     *     are are null.\n+     * @throws ResourceExistsException if a rule exists with the same topic and rule name.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<RuleProperties> createRule(String topicName, String ruleName, String subscriptionName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b30ed0dc220a58343ff1b5d11b1abfeab2c8ef4"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4MzU0Nw==", "bodyText": "Good catch. Oops.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14633#discussion_r480383547", "createdAt": "2020-08-31T20:34:15Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/ServiceBusAdministrationAsyncClient.java", "diffHunk": "@@ -182,6 +194,82 @@\n         return withContext(context -> createQueueWithResponse(queueName, queueOptions, context));\n     }\n \n+    /**\n+     * Creates a rule under the given topic and subscription\n+     *\n+     * @param topicName Name of the topic associated with rule.\n+     * @param subscriptionName Name of the subscription associated with the rule.\n+     * @param ruleName Name of the rule.\n+     *\n+     * @return A Mono that completes with information about the created rule.\n+     * @throws ClientAuthenticationException if the client's credentials do not have access to modify the\n+     *     namespace.\n+     * @throws HttpResponseException If the request body was invalid, the quota is exceeded, or an error occurred\n+     *     processing the request.\n+     * @throws IllegalArgumentException if {@code topicName} or {@code ruleName} are are empty strings.\n+     * @throws NullPointerException if {@code topicName} or {@code ruleName} are are null.\n+     * @throws ResourceExistsException if a rule exists with the same topic, subscription, and rule name.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<RuleProperties> createRule(String topicName, String subscriptionName, String ruleName) {\n+        try {\n+            return createRule(topicName, subscriptionName, ruleName, new CreateRuleOptions());\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Creates a rule with the {@link CreateRuleOptions}.\n+     *\n+     * @param topicName Name of the topic associated with rule.\n+     * @param subscriptionName Name of the subscription associated with the rule.\n+     * @param ruleName Name of the rule.\n+     * @param ruleOptions Information about the rule to create.\n+     *\n+     * @return A Mono that completes with information about the created rule.\n+     * @throws ClientAuthenticationException if the client's credentials do not have access to modify the\n+     *     namespace.\n+     * @throws HttpResponseException If the request body was invalid, the quota is exceeded, or an error occurred\n+     *     processing the request.\n+     * @throws IllegalArgumentException if {@code topicName} or {@code ruleName} are are empty strings.\n+     * @throws NullPointerException if {@code topicName}, {@code ruleName}, or {@code ruleOptions}\n+     *     are are null.\n+     * @throws ResourceExistsException if a rule exists with the same topic and rule name.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<RuleProperties> createRule(String topicName, String ruleName, String subscriptionName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0OTcyNg=="}, "originalCommit": {"oid": "1b30ed0dc220a58343ff1b5d11b1abfeab2c8ef4"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzEyMDg5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/models/RuleProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzozMTo0NVrOHKB8qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTo1Mzo0NFrOHKKhxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3OTcyMg==", "bodyText": "Should filter be checked for not null in constructor ?\nAlso is null action allowed here ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14633#discussion_r480279722", "createdAt": "2020-08-31T17:31:45Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/models/RuleProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.administration.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.messaging.servicebus.implementation.EntityHelper;\n+import com.azure.messaging.servicebus.implementation.models.CorrelationFilterImpl;\n+import com.azure.messaging.servicebus.implementation.models.EmptyRuleActionImpl;\n+import com.azure.messaging.servicebus.implementation.models.FalseFilterImpl;\n+import com.azure.messaging.servicebus.implementation.models.KeyValueImpl;\n+import com.azure.messaging.servicebus.implementation.models.RuleActionImpl;\n+import com.azure.messaging.servicebus.implementation.models.RuleDescription;\n+import com.azure.messaging.servicebus.implementation.models.RuleFilterImpl;\n+import com.azure.messaging.servicebus.implementation.models.SqlFilterImpl;\n+import com.azure.messaging.servicebus.implementation.models.SqlRuleActionImpl;\n+import com.azure.messaging.servicebus.implementation.models.TrueFilterImpl;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Represents the properties of a rule.\n+ */\n+@Fluent\n+public class RuleProperties {\n+    private final String name;\n+    private RuleFilter filter;\n+    private RuleAction action;\n+\n+    static {\n+        EntityHelper.setRuleAccessor(new EntityHelper.RuleAccessor() {\n+            private final EmptyRuleActionImpl emptyRuleAction = new EmptyRuleActionImpl();\n+            private final SqlFilterImpl trueFilter = new TrueFilterImpl().setSqlExpression(\"1=1\");\n+            private final SqlFilterImpl falseFilter = new TrueFilterImpl().setSqlExpression(\"1=0\");\n+\n+            @Override\n+            public RuleProperties toModel(RuleDescription description) {\n+                final RuleFilter filter = description.getFilter() != null\n+                    ? toModel(description.getFilter())\n+                    : null;\n+                final RuleAction action = description.getAction() != null\n+                    ? toModel(description.getAction())\n+                    : null;\n+\n+                return new RuleProperties(description.getName(), filter, action);\n+            }\n+\n+            @Override\n+            public RuleAction toModel(RuleActionImpl implementation) {\n+                if (implementation instanceof EmptyRuleActionImpl) {\n+                    return EmptyRuleAction.getInstance();\n+                } else if (implementation instanceof SqlRuleActionImpl) {\n+                    final SqlRuleActionImpl action = (SqlRuleActionImpl) implementation;\n+                    final SqlRuleAction returned = new SqlRuleAction(action.getSqlExpression(),\n+                        action.getCompatibilityLevel(), action.isRequiresPreprocessing());\n+\n+                    if (action.getParameters() != null) {\n+                        for (KeyValueImpl parameter : action.getParameters()) {\n+                            returned.getProperties().put(parameter.getKey(), parameter.getValue());\n+                        }\n+                    }\n+\n+                    return returned;\n+                } else {\n+                    return null;\n+                }\n+            }\n+\n+            @Override\n+            public RuleFilter toModel(RuleFilterImpl implementation) {\n+                if (implementation instanceof TrueFilterImpl) {\n+                    return TrueRuleFilter.getInstance();\n+                } else if (implementation instanceof FalseFilterImpl) {\n+                    return FalseRuleFilter.getInstance();\n+                } else if (implementation instanceof CorrelationFilterImpl) {\n+                    final CorrelationFilterImpl filter = (CorrelationFilterImpl) implementation;\n+                    final CorrelationRuleFilter returned = new CorrelationRuleFilter()\n+                        .setContentType(filter.getContentType())\n+                        .setCorrelationId(filter.getCorrelationId())\n+                        .setLabel(filter.getLabel())\n+                        .setMessageId(filter.getMessageId())\n+                        .setTo(filter.getTo())\n+                        .setSessionId(filter.getSessionId())\n+                        .setReplyTo(filter.getReplyTo())\n+                        .setReplyToSessionId(filter.getReplyToSessionId());\n+\n+                    if (filter.getProperties() != null) {\n+                        filter.getProperties().forEach(keyValue ->\n+                            returned.getProperties().put(keyValue.getKey(), keyValue.getValue()));\n+                    }\n+\n+                    return returned;\n+                } else if (implementation instanceof SqlFilterImpl) {\n+                    final SqlFilterImpl filter = (SqlFilterImpl) implementation;\n+                    final SqlRuleFilter returned = new SqlRuleFilter(filter.getSqlExpression(),\n+                        filter.getCompatibilityLevel(), filter.isRequiresPreprocessing());\n+\n+                    if (filter.getParameters() != null) {\n+                        filter.getParameters().forEach(keyValue ->\n+                            returned.getProperties().put(keyValue.getKey(), keyValue.getValue()));\n+                    }\n+\n+                    return returned;\n+                } else {\n+                    return null;\n+                }\n+            }\n+\n+            @Override\n+            public RuleDescription toImplementation(RuleProperties ruleProperties) {\n+                final RuleFilterImpl filter = ruleProperties.getFilter() != null\n+                    ? toImplementation(ruleProperties.getFilter())\n+                    : null;\n+                final RuleActionImpl action = ruleProperties.getAction() != null\n+                    ? toImplementation(ruleProperties.getAction())\n+                    : null;\n+\n+                return new RuleDescription()\n+                    .setName(ruleProperties.getName())\n+                    .setAction(action)\n+                    .setFilter(filter);\n+            }\n+\n+            @Override\n+            public RuleActionImpl toImplementation(RuleAction model) {\n+                if (model instanceof EmptyRuleAction) {\n+                    return emptyRuleAction;\n+                } else if (model instanceof SqlRuleAction) {\n+                    final SqlRuleAction action = (SqlRuleAction) model;\n+                    final SqlRuleActionImpl returned = new SqlRuleActionImpl()\n+                        .setSqlExpression(action.getSqlExpression())\n+                        .setCompatibilityLevel(action.getCompatibilityLevel())\n+                        .setRequiresPreprocessing(action.getRequiresPreprocessing());\n+\n+                    if (!action.getProperties().isEmpty()) {\n+                        final List<KeyValueImpl> parameters = action.getProperties().entrySet().stream()\n+                            .map(entry -> new KeyValueImpl()\n+                                .setKey(entry.getKey()).setValue(entry.getValue().toString()))\n+                            .collect(Collectors.toList());\n+\n+                        returned.setParameters(parameters);\n+                    }\n+\n+                    return returned;\n+                } else {\n+                    return null;\n+                }\n+            }\n+\n+            @Override\n+            public RuleFilterImpl toImplementation(RuleFilter model) {\n+                if (model instanceof TrueRuleFilter) {\n+                    return trueFilter;\n+                } else if (model instanceof FalseRuleFilter) {\n+                    return falseFilter;\n+                } else if (model instanceof CorrelationRuleFilter) {\n+                    final CorrelationRuleFilter filter = (CorrelationRuleFilter) model;\n+                    final CorrelationFilterImpl returned = new CorrelationFilterImpl()\n+                        .setContentType(filter.getContentType())\n+                        .setCorrelationId(filter.getCorrelationId())\n+                        .setLabel(filter.getLabel())\n+                        .setMessageId(filter.getMessageId())\n+                        .setTo(filter.getTo())\n+                        .setSessionId(filter.getSessionId())\n+                        .setReplyTo(filter.getReplyTo())\n+                        .setReplyToSessionId(filter.getReplyToSessionId());\n+\n+                    if (!filter.getProperties().isEmpty()) {\n+                        final List<KeyValueImpl> parameters = filter.getProperties().entrySet()\n+                            .stream()\n+                            .map(entry -> new KeyValueImpl()\n+                                .setKey(entry.getKey()).setValue(entry.getValue().toString()))\n+                            .collect(Collectors.toList());\n+\n+                        returned.setProperties(parameters);\n+                    }\n+\n+                    return returned;\n+                } else if (model instanceof SqlRuleFilter) {\n+                    final SqlRuleFilter filter = (SqlRuleFilter) model;\n+                    final SqlFilterImpl returned = new SqlFilterImpl()\n+                        .setSqlExpression(filter.getSqlExpression())\n+                        .setCompatibilityLevel(filter.getCompatibilityLevel())\n+                        .setRequiresPreprocessing(filter.getRequiresPreprocessing());\n+\n+                    if (!filter.getProperties().isEmpty()) {\n+                        final List<KeyValueImpl> parameters = filter.getProperties().entrySet()\n+                            .stream()\n+                            .map(entry -> new KeyValueImpl()\n+                                .setKey(entry.getKey()).setValue(entry.getValue().toString()))\n+                            .collect(Collectors.toList());\n+\n+                        returned.setParameters(parameters);\n+                    }\n+\n+                    return returned;\n+                } else {\n+                    return null;\n+                }\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Initializes a new instance with the given rule {@code name}, {@code filter}, and {@code action}.\n+     *\n+     * @param name Name of the rule.\n+     * @param filter Filter for the rule.\n+     * @param action Action for the rule.\n+     */\n+    RuleProperties(String name, RuleFilter filter, RuleAction action) {\n+        this.name = name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b30ed0dc220a58343ff1b5d11b1abfeab2c8ef4"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQyMDI5NQ==", "bodyText": "This is package private because the service returns the values. It's possible to have a rule that has no action. or a rule that has no filter.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14633#discussion_r480420295", "createdAt": "2020-08-31T21:53:44Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/models/RuleProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.administration.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.messaging.servicebus.implementation.EntityHelper;\n+import com.azure.messaging.servicebus.implementation.models.CorrelationFilterImpl;\n+import com.azure.messaging.servicebus.implementation.models.EmptyRuleActionImpl;\n+import com.azure.messaging.servicebus.implementation.models.FalseFilterImpl;\n+import com.azure.messaging.servicebus.implementation.models.KeyValueImpl;\n+import com.azure.messaging.servicebus.implementation.models.RuleActionImpl;\n+import com.azure.messaging.servicebus.implementation.models.RuleDescription;\n+import com.azure.messaging.servicebus.implementation.models.RuleFilterImpl;\n+import com.azure.messaging.servicebus.implementation.models.SqlFilterImpl;\n+import com.azure.messaging.servicebus.implementation.models.SqlRuleActionImpl;\n+import com.azure.messaging.servicebus.implementation.models.TrueFilterImpl;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Represents the properties of a rule.\n+ */\n+@Fluent\n+public class RuleProperties {\n+    private final String name;\n+    private RuleFilter filter;\n+    private RuleAction action;\n+\n+    static {\n+        EntityHelper.setRuleAccessor(new EntityHelper.RuleAccessor() {\n+            private final EmptyRuleActionImpl emptyRuleAction = new EmptyRuleActionImpl();\n+            private final SqlFilterImpl trueFilter = new TrueFilterImpl().setSqlExpression(\"1=1\");\n+            private final SqlFilterImpl falseFilter = new TrueFilterImpl().setSqlExpression(\"1=0\");\n+\n+            @Override\n+            public RuleProperties toModel(RuleDescription description) {\n+                final RuleFilter filter = description.getFilter() != null\n+                    ? toModel(description.getFilter())\n+                    : null;\n+                final RuleAction action = description.getAction() != null\n+                    ? toModel(description.getAction())\n+                    : null;\n+\n+                return new RuleProperties(description.getName(), filter, action);\n+            }\n+\n+            @Override\n+            public RuleAction toModel(RuleActionImpl implementation) {\n+                if (implementation instanceof EmptyRuleActionImpl) {\n+                    return EmptyRuleAction.getInstance();\n+                } else if (implementation instanceof SqlRuleActionImpl) {\n+                    final SqlRuleActionImpl action = (SqlRuleActionImpl) implementation;\n+                    final SqlRuleAction returned = new SqlRuleAction(action.getSqlExpression(),\n+                        action.getCompatibilityLevel(), action.isRequiresPreprocessing());\n+\n+                    if (action.getParameters() != null) {\n+                        for (KeyValueImpl parameter : action.getParameters()) {\n+                            returned.getProperties().put(parameter.getKey(), parameter.getValue());\n+                        }\n+                    }\n+\n+                    return returned;\n+                } else {\n+                    return null;\n+                }\n+            }\n+\n+            @Override\n+            public RuleFilter toModel(RuleFilterImpl implementation) {\n+                if (implementation instanceof TrueFilterImpl) {\n+                    return TrueRuleFilter.getInstance();\n+                } else if (implementation instanceof FalseFilterImpl) {\n+                    return FalseRuleFilter.getInstance();\n+                } else if (implementation instanceof CorrelationFilterImpl) {\n+                    final CorrelationFilterImpl filter = (CorrelationFilterImpl) implementation;\n+                    final CorrelationRuleFilter returned = new CorrelationRuleFilter()\n+                        .setContentType(filter.getContentType())\n+                        .setCorrelationId(filter.getCorrelationId())\n+                        .setLabel(filter.getLabel())\n+                        .setMessageId(filter.getMessageId())\n+                        .setTo(filter.getTo())\n+                        .setSessionId(filter.getSessionId())\n+                        .setReplyTo(filter.getReplyTo())\n+                        .setReplyToSessionId(filter.getReplyToSessionId());\n+\n+                    if (filter.getProperties() != null) {\n+                        filter.getProperties().forEach(keyValue ->\n+                            returned.getProperties().put(keyValue.getKey(), keyValue.getValue()));\n+                    }\n+\n+                    return returned;\n+                } else if (implementation instanceof SqlFilterImpl) {\n+                    final SqlFilterImpl filter = (SqlFilterImpl) implementation;\n+                    final SqlRuleFilter returned = new SqlRuleFilter(filter.getSqlExpression(),\n+                        filter.getCompatibilityLevel(), filter.isRequiresPreprocessing());\n+\n+                    if (filter.getParameters() != null) {\n+                        filter.getParameters().forEach(keyValue ->\n+                            returned.getProperties().put(keyValue.getKey(), keyValue.getValue()));\n+                    }\n+\n+                    return returned;\n+                } else {\n+                    return null;\n+                }\n+            }\n+\n+            @Override\n+            public RuleDescription toImplementation(RuleProperties ruleProperties) {\n+                final RuleFilterImpl filter = ruleProperties.getFilter() != null\n+                    ? toImplementation(ruleProperties.getFilter())\n+                    : null;\n+                final RuleActionImpl action = ruleProperties.getAction() != null\n+                    ? toImplementation(ruleProperties.getAction())\n+                    : null;\n+\n+                return new RuleDescription()\n+                    .setName(ruleProperties.getName())\n+                    .setAction(action)\n+                    .setFilter(filter);\n+            }\n+\n+            @Override\n+            public RuleActionImpl toImplementation(RuleAction model) {\n+                if (model instanceof EmptyRuleAction) {\n+                    return emptyRuleAction;\n+                } else if (model instanceof SqlRuleAction) {\n+                    final SqlRuleAction action = (SqlRuleAction) model;\n+                    final SqlRuleActionImpl returned = new SqlRuleActionImpl()\n+                        .setSqlExpression(action.getSqlExpression())\n+                        .setCompatibilityLevel(action.getCompatibilityLevel())\n+                        .setRequiresPreprocessing(action.getRequiresPreprocessing());\n+\n+                    if (!action.getProperties().isEmpty()) {\n+                        final List<KeyValueImpl> parameters = action.getProperties().entrySet().stream()\n+                            .map(entry -> new KeyValueImpl()\n+                                .setKey(entry.getKey()).setValue(entry.getValue().toString()))\n+                            .collect(Collectors.toList());\n+\n+                        returned.setParameters(parameters);\n+                    }\n+\n+                    return returned;\n+                } else {\n+                    return null;\n+                }\n+            }\n+\n+            @Override\n+            public RuleFilterImpl toImplementation(RuleFilter model) {\n+                if (model instanceof TrueRuleFilter) {\n+                    return trueFilter;\n+                } else if (model instanceof FalseRuleFilter) {\n+                    return falseFilter;\n+                } else if (model instanceof CorrelationRuleFilter) {\n+                    final CorrelationRuleFilter filter = (CorrelationRuleFilter) model;\n+                    final CorrelationFilterImpl returned = new CorrelationFilterImpl()\n+                        .setContentType(filter.getContentType())\n+                        .setCorrelationId(filter.getCorrelationId())\n+                        .setLabel(filter.getLabel())\n+                        .setMessageId(filter.getMessageId())\n+                        .setTo(filter.getTo())\n+                        .setSessionId(filter.getSessionId())\n+                        .setReplyTo(filter.getReplyTo())\n+                        .setReplyToSessionId(filter.getReplyToSessionId());\n+\n+                    if (!filter.getProperties().isEmpty()) {\n+                        final List<KeyValueImpl> parameters = filter.getProperties().entrySet()\n+                            .stream()\n+                            .map(entry -> new KeyValueImpl()\n+                                .setKey(entry.getKey()).setValue(entry.getValue().toString()))\n+                            .collect(Collectors.toList());\n+\n+                        returned.setProperties(parameters);\n+                    }\n+\n+                    return returned;\n+                } else if (model instanceof SqlRuleFilter) {\n+                    final SqlRuleFilter filter = (SqlRuleFilter) model;\n+                    final SqlFilterImpl returned = new SqlFilterImpl()\n+                        .setSqlExpression(filter.getSqlExpression())\n+                        .setCompatibilityLevel(filter.getCompatibilityLevel())\n+                        .setRequiresPreprocessing(filter.getRequiresPreprocessing());\n+\n+                    if (!filter.getProperties().isEmpty()) {\n+                        final List<KeyValueImpl> parameters = filter.getProperties().entrySet()\n+                            .stream()\n+                            .map(entry -> new KeyValueImpl()\n+                                .setKey(entry.getKey()).setValue(entry.getValue().toString()))\n+                            .collect(Collectors.toList());\n+\n+                        returned.setParameters(parameters);\n+                    }\n+\n+                    return returned;\n+                } else {\n+                    return null;\n+                }\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Initializes a new instance with the given rule {@code name}, {@code filter}, and {@code action}.\n+     *\n+     * @param name Name of the rule.\n+     * @param filter Filter for the rule.\n+     * @param action Action for the rule.\n+     */\n+    RuleProperties(String name, RuleFilter filter, RuleAction action) {\n+        this.name = name;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3OTcyMg=="}, "originalCommit": {"oid": "1b30ed0dc220a58343ff1b5d11b1abfeab2c8ef4"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzE0MTc3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/models/TrueRuleFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzozODowNVrOHKCJsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTo1MzoxOFrOHKKg4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4MzA1Ng==", "bodyText": "Did we consider not having these types , they are String sqlExpression and user can directly create instance of SqlRuleFilter ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14633#discussion_r480283056", "createdAt": "2020-08-31T17:38:05Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/models/TrueRuleFilter.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.administration.models;\n+\n+/**\n+ * Matches all the messages arriving to be selected for the subscription.\n+ */\n+public final class TrueRuleFilter extends SqlRuleFilter {\n+    private static final TrueRuleFilter INSTANCE = new TrueRuleFilter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b30ed0dc220a58343ff1b5d11b1abfeab2c8ef4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQyMDA2NA==", "bodyText": "They exist in the .NET API and I believe we talked about this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14633#discussion_r480420064", "createdAt": "2020-08-31T21:53:18Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/models/TrueRuleFilter.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.administration.models;\n+\n+/**\n+ * Matches all the messages arriving to be selected for the subscription.\n+ */\n+public final class TrueRuleFilter extends SqlRuleFilter {\n+    private static final TrueRuleFilter INSTANCE = new TrueRuleFilter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4MzA1Ng=="}, "originalCommit": {"oid": "1b30ed0dc220a58343ff1b5d11b1abfeab2c8ef4"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1325, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}