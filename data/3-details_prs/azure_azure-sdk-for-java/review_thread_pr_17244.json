{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NDM3NjUw", "number": 17244, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzo0MDo1NFrOE2La1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMzowNjoxN1rOE2RFjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjQ1NjU1OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSender.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzo0MDo1NVrOHu3bGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzo0NzowMVrOHu3nvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwNDYwMw==", "bodyText": "I hide BatchSize in Python for this release. Do we want to expose InitialBatchActionCount to users?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r518904603", "createdAt": "2020-11-06T17:40:55Z", "author": {"login": "xiangyan99"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSender.java", "diffHunk": "@@ -32,12 +32,14 @@\n     }\n \n     /**\n-     * Gets the batch size.\n+     * Gets the number of documents required in a batch for it to be flushed.\n+     * <p>\n+     * This configuration is only taken into account if auto flushing is enabled.\n      *\n-     * @return The batch size.\n+     * @return The number of documents required before a flush is triggered.\n      */\n-    public int getBatchSize() {\n-        return client.getBatchSize();\n+    public int getInitialBatchActionCount() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb853369ec004bc61cf99f5b202f54ad8f31569c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwNzgzOA==", "bodyText": "I can hide this as well, it doesn't have a major value add right now", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r518907838", "createdAt": "2020-11-06T17:47:01Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSender.java", "diffHunk": "@@ -32,12 +32,14 @@\n     }\n \n     /**\n-     * Gets the batch size.\n+     * Gets the number of documents required in a batch for it to be flushed.\n+     * <p>\n+     * This configuration is only taken into account if auto flushing is enabled.\n      *\n-     * @return The batch size.\n+     * @return The number of documents required before a flush is triggered.\n      */\n-    public int getBatchSize() {\n-        return client.getBatchSize();\n+    public int getInitialBatchActionCount() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwNDYwMw=="}, "originalCommit": {"oid": "cb853369ec004bc61cf99f5b202f54ad8f31569c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjQ2MjA0OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzo0Mjo0MlrOHu3ekw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzo0NzoxN1rOHu3oXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwNTQ5MQ==", "bodyText": "Maybe we'd better use property name batchActionCount?\nInitialBatchActionCount is only its initial value, we may change the value when we tune it dynamically.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r518905491", "createdAt": "2020-11-06T17:42:42Z", "author": {"login": "xiangyan99"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java", "diffHunk": "@@ -21,16 +21,20 @@\n  */\n public final class SearchIndexingBufferedSenderOptions<T> {\n     private static final boolean DEFAULT_AUTO_FLUSH = true;\n-    private static final int DEFAULT_BATCH_SIZE = 500;\n+    private static final int DEFAULT_INITIAL_BATCH_ACTION_COUNT = 512;\n     private static final Duration DEFAULT_FLUSH_WINDOW = Duration.ofSeconds(60);\n-    private static final int DEFAULT_DOCUMENT_TRY_LIMIT = 3;\n+    private static final int DEFAULT_MAX_RETRIES = 3;\n+    private static final Duration DEFAULT_RETRY_DELAY = Duration.ofMillis(800);\n+    private static final Duration DEFAULT_MAX_RETRY_DELAY = Duration.ofMinutes(1);\n \n     private final ClientLogger logger = new ClientLogger(SearchIndexingBufferedSenderOptions.class);\n \n     private Boolean autoFlush;\n     private Duration autoFlushWindow;\n-    private Integer batchSize;\n-    private Integer documentTryLimit;\n+    private Integer initialBatchActionCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb853369ec004bc61cf99f5b202f54ad8f31569c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwNzk5Ng==", "bodyText": "Can change the property name as it doesn't really matter", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r518907996", "createdAt": "2020-11-06T17:47:17Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java", "diffHunk": "@@ -21,16 +21,20 @@\n  */\n public final class SearchIndexingBufferedSenderOptions<T> {\n     private static final boolean DEFAULT_AUTO_FLUSH = true;\n-    private static final int DEFAULT_BATCH_SIZE = 500;\n+    private static final int DEFAULT_INITIAL_BATCH_ACTION_COUNT = 512;\n     private static final Duration DEFAULT_FLUSH_WINDOW = Duration.ofSeconds(60);\n-    private static final int DEFAULT_DOCUMENT_TRY_LIMIT = 3;\n+    private static final int DEFAULT_MAX_RETRIES = 3;\n+    private static final Duration DEFAULT_RETRY_DELAY = Duration.ofMillis(800);\n+    private static final Duration DEFAULT_MAX_RETRY_DELAY = Duration.ofMinutes(1);\n \n     private final ClientLogger logger = new ClientLogger(SearchIndexingBufferedSenderOptions.class);\n \n     private Boolean autoFlush;\n     private Duration autoFlushWindow;\n-    private Integer batchSize;\n-    private Integer documentTryLimit;\n+    private Integer initialBatchActionCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwNTQ5MQ=="}, "originalCommit": {"oid": "cb853369ec004bc61cf99f5b202f54ad8f31569c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjc0OTc4OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOToxMToyN1rOHu6Q9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOToxOToyOFrOHu6fEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1MTE1OA==", "bodyText": "Do we need to hide it here as well?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r518951158", "createdAt": "2020-11-06T19:11:27Z", "author": {"login": "xiangyan99"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java", "diffHunk": "@@ -123,38 +127,96 @@ public Duration getAutoFlushWindow() {\n      *\n      * @return The number of documents required before a flush is triggered.\n      */\n-    int getBatchSize() {\n-        return (batchSize == null) ? DEFAULT_BATCH_SIZE : batchSize;\n+    public int getInitialBatchActionCount() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1329894f9744653bd3d3d2a81965ee254cc762"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NDc3MQ==", "bodyText": "This is the options class passed into the buffered sender, it could be made package private but I was copying @tg-msft's design where all properties had public get and set.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r518954771", "createdAt": "2020-11-06T19:19:28Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java", "diffHunk": "@@ -123,38 +127,96 @@ public Duration getAutoFlushWindow() {\n      *\n      * @return The number of documents required before a flush is triggered.\n      */\n-    int getBatchSize() {\n-        return (batchSize == null) ? DEFAULT_BATCH_SIZE : batchSize;\n+    public int getInitialBatchActionCount() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1MTE1OA=="}, "originalCommit": {"oid": "3b1329894f9744653bd3d3d2a81965ee254cc762"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzMyOTI3OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjozOToyOVrOHu_s0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjozOToyOVrOHu_s0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0MDIxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param maxRetries The number of times a document will attempt indexing before it is considered failed.\n          \n          \n            \n                 * @param maxRetries The number of times a document will retry indexing before it is considered failed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r519040211", "createdAt": "2020-11-06T22:39:29Z", "author": {"login": "mssfang"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java", "diffHunk": "@@ -123,38 +127,96 @@ public Duration getAutoFlushWindow() {\n      *\n      * @return The number of documents required before a flush is triggered.\n      */\n-    int getBatchSize() {\n-        return (batchSize == null) ? DEFAULT_BATCH_SIZE : batchSize;\n+    public int getInitialBatchActionCount() {\n+        return (initialBatchActionCount == null) ? DEFAULT_INITIAL_BATCH_ACTION_COUNT : initialBatchActionCount;\n     }\n \n     /**\n-     * The number of times a document will attempt indexing before it is considered failed.\n+     * Sets the number of times a document will retry indexing before it is considered failed.\n      * <p>\n      * Documents are only retried on retryable status codes.\n      * <p>\n      * Default value is {@code 3}.\n      *\n-     * @param documentTryLimit The number of times a document will attempt indexing before it is considered failed.\n+     * @param maxRetries The number of times a document will attempt indexing before it is considered failed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1329894f9744653bd3d3d2a81965ee254cc762"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzMzNjM0OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjo0MjoxOVrOHu_w3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjo0MjoxOVrOHu_w3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0MTI0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Gets the initial duration that requests will be delay when the service is throttling.\n          \n          \n            \n                 * Gets the initial duration that requests will be delayed when the service is throttling.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r519041245", "createdAt": "2020-11-06T22:42:19Z", "author": {"login": "mssfang"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java", "diffHunk": "@@ -123,38 +127,96 @@ public Duration getAutoFlushWindow() {\n      *\n      * @return The number of documents required before a flush is triggered.\n      */\n-    int getBatchSize() {\n-        return (batchSize == null) ? DEFAULT_BATCH_SIZE : batchSize;\n+    public int getInitialBatchActionCount() {\n+        return (initialBatchActionCount == null) ? DEFAULT_INITIAL_BATCH_ACTION_COUNT : initialBatchActionCount;\n     }\n \n     /**\n-     * The number of times a document will attempt indexing before it is considered failed.\n+     * Sets the number of times a document will retry indexing before it is considered failed.\n      * <p>\n      * Documents are only retried on retryable status codes.\n      * <p>\n      * Default value is {@code 3}.\n      *\n-     * @param documentTryLimit The number of times a document will attempt indexing before it is considered failed.\n+     * @param maxRetries The number of times a document will attempt indexing before it is considered failed.\n      * @return The updated SearchIndexingBufferedSenderOptions object.\n      * @throws IllegalArgumentException If {@code documentTryLimit} is less than one.\n      */\n-    SearchIndexingBufferedSenderOptions<T> setDocumentTryLimit(Integer documentTryLimit) {\n-        if (documentTryLimit != null && documentTryLimit < 1) {\n+    public SearchIndexingBufferedSenderOptions<T> setMaxRetries(Integer maxRetries) {\n+        if (maxRetries != null && maxRetries < 1) {\n             throw logger.logExceptionAsError(\n-                new IllegalArgumentException(\"'documentTryLimit' cannot be less than one.\"));\n+                new IllegalArgumentException(\"'maxRetries' cannot be less than one.\"));\n         }\n \n-        this.documentTryLimit = documentTryLimit;\n+        this.maxRetries = maxRetries;\n         return this;\n     }\n \n     /**\n-     * Gets the number of times a document will attempt indexing before it is considered failed.\n+     * Gets the number of times a document will retry indexing before it is considered failed.\n      *\n      * @return The number of times a document will attempt indexing.\n      */\n-    int getDocumentTryLimit() {\n-        return (documentTryLimit == null) ? DEFAULT_DOCUMENT_TRY_LIMIT : documentTryLimit;\n+    public int getMaxRetries() {\n+        return (maxRetries == null) ? DEFAULT_MAX_RETRIES : maxRetries;\n+    }\n+\n+    /**\n+     * Sets the initial duration that requests will be delayed when the service is throttling.\n+     * <p>\n+     * Default value is {@code Duration.ofMillis(800)}.\n+     *\n+     * @param retryDelay The initial duration requests will delay when the service is throttling.\n+     * @return The updated SearchIndexingBufferedSenderOptions object.\n+     * @throws IllegalArgumentException If {@code retryDelay.isNegative()} or {@code retryDelay.isZero()} is true.\n+     */\n+    public SearchIndexingBufferedSenderOptions<T> setRetryDelay(Duration retryDelay) {\n+        if (retryDelay != null && (retryDelay.isNegative() || retryDelay.isZero())) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"'retryDelay' cannot be negative or zero.\"));\n+        }\n+\n+        this.retryDelay = retryDelay;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the initial duration that requests will be delay when the service is throttling.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1329894f9744653bd3d3d2a81965ee254cc762"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzMzNzY0OnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjo0Mjo0NlrOHu_xiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjo0Mjo0NlrOHu_xiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0MTQxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Sets the maximum duration that requests will be delay when the service is throttling.\n          \n          \n            \n                 * Sets the maximum duration that requests will be delayed when the service is throttling.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r519041419", "createdAt": "2020-11-06T22:42:46Z", "author": {"login": "mssfang"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java", "diffHunk": "@@ -123,38 +127,96 @@ public Duration getAutoFlushWindow() {\n      *\n      * @return The number of documents required before a flush is triggered.\n      */\n-    int getBatchSize() {\n-        return (batchSize == null) ? DEFAULT_BATCH_SIZE : batchSize;\n+    public int getInitialBatchActionCount() {\n+        return (initialBatchActionCount == null) ? DEFAULT_INITIAL_BATCH_ACTION_COUNT : initialBatchActionCount;\n     }\n \n     /**\n-     * The number of times a document will attempt indexing before it is considered failed.\n+     * Sets the number of times a document will retry indexing before it is considered failed.\n      * <p>\n      * Documents are only retried on retryable status codes.\n      * <p>\n      * Default value is {@code 3}.\n      *\n-     * @param documentTryLimit The number of times a document will attempt indexing before it is considered failed.\n+     * @param maxRetries The number of times a document will attempt indexing before it is considered failed.\n      * @return The updated SearchIndexingBufferedSenderOptions object.\n      * @throws IllegalArgumentException If {@code documentTryLimit} is less than one.\n      */\n-    SearchIndexingBufferedSenderOptions<T> setDocumentTryLimit(Integer documentTryLimit) {\n-        if (documentTryLimit != null && documentTryLimit < 1) {\n+    public SearchIndexingBufferedSenderOptions<T> setMaxRetries(Integer maxRetries) {\n+        if (maxRetries != null && maxRetries < 1) {\n             throw logger.logExceptionAsError(\n-                new IllegalArgumentException(\"'documentTryLimit' cannot be less than one.\"));\n+                new IllegalArgumentException(\"'maxRetries' cannot be less than one.\"));\n         }\n \n-        this.documentTryLimit = documentTryLimit;\n+        this.maxRetries = maxRetries;\n         return this;\n     }\n \n     /**\n-     * Gets the number of times a document will attempt indexing before it is considered failed.\n+     * Gets the number of times a document will retry indexing before it is considered failed.\n      *\n      * @return The number of times a document will attempt indexing.\n      */\n-    int getDocumentTryLimit() {\n-        return (documentTryLimit == null) ? DEFAULT_DOCUMENT_TRY_LIMIT : documentTryLimit;\n+    public int getMaxRetries() {\n+        return (maxRetries == null) ? DEFAULT_MAX_RETRIES : maxRetries;\n+    }\n+\n+    /**\n+     * Sets the initial duration that requests will be delayed when the service is throttling.\n+     * <p>\n+     * Default value is {@code Duration.ofMillis(800)}.\n+     *\n+     * @param retryDelay The initial duration requests will delay when the service is throttling.\n+     * @return The updated SearchIndexingBufferedSenderOptions object.\n+     * @throws IllegalArgumentException If {@code retryDelay.isNegative()} or {@code retryDelay.isZero()} is true.\n+     */\n+    public SearchIndexingBufferedSenderOptions<T> setRetryDelay(Duration retryDelay) {\n+        if (retryDelay != null && (retryDelay.isNegative() || retryDelay.isZero())) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"'retryDelay' cannot be negative or zero.\"));\n+        }\n+\n+        this.retryDelay = retryDelay;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the initial duration that requests will be delay when the service is throttling.\n+     *\n+     * @return The initial duration requests will delay when the service is throttling.\n+     */\n+    public Duration getRetryDelay() {\n+        return (retryDelay == null) ? DEFAULT_RETRY_DELAY : retryDelay;\n+    }\n+\n+    /**\n+     * Sets the maximum duration that requests will be delay when the service is throttling.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1329894f9744653bd3d3d2a81965ee254cc762"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzM1NjkyOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjo1MTo0MVrOHu_8pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjo1MTo0MVrOHu_8pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0NDI2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (exception.getResponse().getStatusCode() == HttpURLConnection.HTTP_ENTITY_TOO_LARGE) {\n          \n          \n            \n                            if (statusCode == HttpURLConnection.HTTP_ENTITY_TOO_LARGE) {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r519044261", "createdAt": "2020-11-06T22:51:41Z", "author": {"login": "mssfang"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingPublisher.java", "diffHunk": "@@ -159,20 +176,23 @@ int getBatchSize() {\n         List<com.azure.search.documents.implementation.models.IndexAction> actions, int actionsOffset,\n         Context context) {\n         return client.indexDocumentsWithResponse(actions, true, context)\n+            .delaySubscription(currentRetryDelay)\n             .flatMapMany(response -> Flux.just(\n-                new IndexBatchResponse(response.getValue().getResults(), actionsOffset, actions.size(), false)))\n+                new IndexBatchResponse(response.getStatusCode(), response.getValue().getResults(), actionsOffset,\n+                    actions.size(), false)))\n             .onErrorResume(IndexBatchException.class, exception -> Flux\n-                .just(new IndexBatchResponse(exception.getIndexingResults(), actionsOffset, actions.size(), true)))\n+                .just(new IndexBatchResponse(207, exception.getIndexingResults(), actionsOffset, actions.size(), true)))\n             .onErrorResume(HttpResponseException.class, exception -> {\n                 /*\n                  * If we received an error response where the payload was too large split it into two smaller payloads\n                  * and attempt to index again. If the number of index actions was one raise the error as we cannot split\n                  * that any further.\n                  */\n+                int statusCode = exception.getResponse().getStatusCode();\n                 if (exception.getResponse().getStatusCode() == HttpURLConnection.HTTP_ENTITY_TOO_LARGE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1329894f9744653bd3d3d2a81965ee254cc762"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzM4NTExOnYy", "diffSide": "RIGHT", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMzowNjoxN1rOHvAM6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMzoxMDoyMFrOHvAQ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0ODQyNg==", "bodyText": "does the order of action matters?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r519048426", "createdAt": "2020-11-06T23:06:17Z", "author": {"login": "mssfang"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingPublisher.java", "diffHunk": "@@ -182,48 +202,70 @@ int getBatchSize() {\n                     );\n                 }\n \n-                return Flux.just(new IndexBatchResponse(null, actionsOffset, actions.size(), true));\n+                return Flux.just(new IndexBatchResponse(statusCode, null, actionsOffset, actions.size(), true));\n             });\n     }\n \n     private void handleResponse(List<TryTrackingIndexAction<T>> actions, IndexBatchResponse batchResponse) {\n         /*\n          * Batch has been split until it had one document in it and it returned a 413 response.\n          */\n-        if (batchResponse.getResults() == null && batchResponse.getCount() == 1) {\n+        if (batchResponse.getStatusCode() == HttpURLConnection.HTTP_ENTITY_TOO_LARGE && batchResponse.getCount() == 1) {\n             IndexAction<T> action = actions.get(batchResponse.getOffset()).getAction();\n             onActionErrorBiConsumer.accept(action,\n                 new RuntimeException(\"Document is too large to be indexed and won't be tried again.\"));\n             return;\n         }\n \n+        List<TryTrackingIndexAction<T>> actionsToRetry = new ArrayList<>();\n+        boolean has503 = batchResponse.getStatusCode() == HttpURLConnection.HTTP_UNAVAILABLE;\n         if (batchResponse.getResults() == null) {\n-            return;\n-        }\n+            /*\n+             * Null results indicates that the entire request failed. Retry all documents.\n+             */\n+            int offset = batchResponse.getOffset();\n+            actionsToRetry.addAll(actions.subList(offset, offset + batchResponse.getCount()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1329894f9744653bd3d3d2a81965ee254cc762"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0OTQyOQ==", "bodyText": "Ordering of the actions may matter, so the order they were submitted is retained here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r519049429", "createdAt": "2020-11-06T23:10:20Z", "author": {"login": "alzimmermsft"}, "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingPublisher.java", "diffHunk": "@@ -182,48 +202,70 @@ int getBatchSize() {\n                     );\n                 }\n \n-                return Flux.just(new IndexBatchResponse(null, actionsOffset, actions.size(), true));\n+                return Flux.just(new IndexBatchResponse(statusCode, null, actionsOffset, actions.size(), true));\n             });\n     }\n \n     private void handleResponse(List<TryTrackingIndexAction<T>> actions, IndexBatchResponse batchResponse) {\n         /*\n          * Batch has been split until it had one document in it and it returned a 413 response.\n          */\n-        if (batchResponse.getResults() == null && batchResponse.getCount() == 1) {\n+        if (batchResponse.getStatusCode() == HttpURLConnection.HTTP_ENTITY_TOO_LARGE && batchResponse.getCount() == 1) {\n             IndexAction<T> action = actions.get(batchResponse.getOffset()).getAction();\n             onActionErrorBiConsumer.accept(action,\n                 new RuntimeException(\"Document is too large to be indexed and won't be tried again.\"));\n             return;\n         }\n \n+        List<TryTrackingIndexAction<T>> actionsToRetry = new ArrayList<>();\n+        boolean has503 = batchResponse.getStatusCode() == HttpURLConnection.HTTP_UNAVAILABLE;\n         if (batchResponse.getResults() == null) {\n-            return;\n-        }\n+            /*\n+             * Null results indicates that the entire request failed. Retry all documents.\n+             */\n+            int offset = batchResponse.getOffset();\n+            actionsToRetry.addAll(actions.subList(offset, offset + batchResponse.getCount()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0ODQyNg=="}, "originalCommit": {"oid": "3b1329894f9744653bd3d3d2a81965ee254cc762"}, "originalPosition": 149}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3053, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}