{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NDM1OTQ4", "number": 17856, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTozNDo1MVrOE-d2-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTo0MTozMVrOE-d6-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTM2Mzc4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/login/AADLoginIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTozNDo1MVrOH7pT4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTozNDo1MVrOH7pT4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwNDg2Ng==", "bodyText": "Add\nelse {\n    throw new IllegalStateException(\"Can not recognize osName. osName = \" + osName);\n}", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17856#discussion_r532304866", "createdAt": "2020-11-30T01:34:51Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/login/AADLoginIT.java", "diffHunk": "@@ -0,0 +1,128 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.test.aad.login;\n+\n+import com.azure.test.utils.AppRunner;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.chrome.ChromeDriver;\n+import org.openqa.selenium.chrome.ChromeDriverService;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest;\n+import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;\n+import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.function.Consumer;\n+import java.util.regex.Pattern;\n+\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_ID;\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_SECRET;\n+import static com.azure.test.oauth.OAuthUtils.AAD_TENANT_ID_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_NAME_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_PASSWORD_1;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+\n+public class AADLoginIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADLoginIT.class);\n+\n+    static {\n+        final String chromedriverLinux = \"src/test/resources/driver/chromedriver_linux64\";\n+        final String chromedriverWin32 = \"src/test/resources/driver/chromedriver_win32.exe\";\n+        final String chromedriverMac = \"src/test/resources/driver/chromedriver_mac64\";\n+        String osName = System.getProperty(\"os.name\").toLowerCase();\n+        if (Pattern.matches(\"linux.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverLinux);\n+        } else if (Pattern.matches(\"windows.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverWin32);\n+        } else if (Pattern.matches(\"mac.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverMac);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3296d08ade893509231871d1d49aa219afdf87b8"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTM2NDI4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/login/AADLoginIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTozNTowOVrOH7pUIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTo1MToxMlrOH7pg6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwNDkzMQ==", "bodyText": "When can we enable it?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17856#discussion_r532304931", "createdAt": "2020-11-30T01:35:09Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/login/AADLoginIT.java", "diffHunk": "@@ -0,0 +1,128 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.test.aad.login;\n+\n+import com.azure.test.utils.AppRunner;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.chrome.ChromeDriver;\n+import org.openqa.selenium.chrome.ChromeDriverService;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest;\n+import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;\n+import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.function.Consumer;\n+import java.util.regex.Pattern;\n+\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_ID;\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_SECRET;\n+import static com.azure.test.oauth.OAuthUtils.AAD_TENANT_ID_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_NAME_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_PASSWORD_1;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+\n+public class AADLoginIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADLoginIT.class);\n+\n+    static {\n+        final String chromedriverLinux = \"src/test/resources/driver/chromedriver_linux64\";\n+        final String chromedriverWin32 = \"src/test/resources/driver/chromedriver_win32.exe\";\n+        final String chromedriverMac = \"src/test/resources/driver/chromedriver_mac64\";\n+        String osName = System.getProperty(\"os.name\").toLowerCase();\n+        if (Pattern.matches(\"linux.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverLinux);\n+        } else if (Pattern.matches(\"windows.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverWin32);\n+        } else if (Pattern.matches(\"mac.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverMac);\n+        }\n+    }\n+\n+//    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3296d08ade893509231871d1d49aa219afdf87b8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwNzQzNA==", "bodyText": "When you delete the application.properties", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17856#discussion_r532307434", "createdAt": "2020-11-30T01:47:28Z", "author": {"login": "lu-cheng"}, "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/login/AADLoginIT.java", "diffHunk": "@@ -0,0 +1,128 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.test.aad.login;\n+\n+import com.azure.test.utils.AppRunner;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.chrome.ChromeDriver;\n+import org.openqa.selenium.chrome.ChromeDriverService;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest;\n+import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;\n+import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.function.Consumer;\n+import java.util.regex.Pattern;\n+\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_ID;\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_SECRET;\n+import static com.azure.test.oauth.OAuthUtils.AAD_TENANT_ID_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_NAME_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_PASSWORD_1;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+\n+public class AADLoginIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADLoginIT.class);\n+\n+    static {\n+        final String chromedriverLinux = \"src/test/resources/driver/chromedriver_linux64\";\n+        final String chromedriverWin32 = \"src/test/resources/driver/chromedriver_win32.exe\";\n+        final String chromedriverMac = \"src/test/resources/driver/chromedriver_mac64\";\n+        String osName = System.getProperty(\"os.name\").toLowerCase();\n+        if (Pattern.matches(\"linux.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverLinux);\n+        } else if (Pattern.matches(\"windows.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverWin32);\n+        } else if (Pattern.matches(\"mac.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverMac);\n+        }\n+    }\n+\n+//    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwNDkzMQ=="}, "originalCommit": {"oid": "3296d08ade893509231871d1d49aa219afdf87b8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwODIwMw==", "bodyText": "Already deleted in latest master branch. Please merge latest master branch to your branch. \ud83d\ude4f", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17856#discussion_r532308203", "createdAt": "2020-11-30T01:51:12Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/login/AADLoginIT.java", "diffHunk": "@@ -0,0 +1,128 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.test.aad.login;\n+\n+import com.azure.test.utils.AppRunner;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.chrome.ChromeDriver;\n+import org.openqa.selenium.chrome.ChromeDriverService;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest;\n+import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;\n+import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.function.Consumer;\n+import java.util.regex.Pattern;\n+\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_ID;\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_SECRET;\n+import static com.azure.test.oauth.OAuthUtils.AAD_TENANT_ID_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_NAME_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_PASSWORD_1;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+\n+public class AADLoginIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADLoginIT.class);\n+\n+    static {\n+        final String chromedriverLinux = \"src/test/resources/driver/chromedriver_linux64\";\n+        final String chromedriverWin32 = \"src/test/resources/driver/chromedriver_win32.exe\";\n+        final String chromedriverMac = \"src/test/resources/driver/chromedriver_mac64\";\n+        String osName = System.getProperty(\"os.name\").toLowerCase();\n+        if (Pattern.matches(\"linux.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverLinux);\n+        } else if (Pattern.matches(\"windows.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverWin32);\n+        } else if (Pattern.matches(\"mac.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverMac);\n+        }\n+    }\n+\n+//    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwNDkzMQ=="}, "originalCommit": {"oid": "3296d08ade893509231871d1d49aa219afdf87b8"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTM2NzM5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/login/AADLoginIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTozNzowNlrOH7pVuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTozNzowNlrOH7pVuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwNTMzOQ==", "bodyText": "Use variable instead of String.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17856#discussion_r532305339", "createdAt": "2020-11-30T01:37:06Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/login/AADLoginIT.java", "diffHunk": "@@ -0,0 +1,128 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.test.aad.login;\n+\n+import com.azure.test.utils.AppRunner;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.chrome.ChromeDriver;\n+import org.openqa.selenium.chrome.ChromeDriverService;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest;\n+import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;\n+import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.function.Consumer;\n+import java.util.regex.Pattern;\n+\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_ID;\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_SECRET;\n+import static com.azure.test.oauth.OAuthUtils.AAD_TENANT_ID_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_NAME_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_PASSWORD_1;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+\n+public class AADLoginIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADLoginIT.class);\n+\n+    static {\n+        final String chromedriverLinux = \"src/test/resources/driver/chromedriver_linux64\";\n+        final String chromedriverWin32 = \"src/test/resources/driver/chromedriver_win32.exe\";\n+        final String chromedriverMac = \"src/test/resources/driver/chromedriver_mac64\";\n+        String osName = System.getProperty(\"os.name\").toLowerCase();\n+        if (Pattern.matches(\"linux.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverLinux);\n+        } else if (Pattern.matches(\"windows.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverWin32);\n+        } else if (Pattern.matches(\"mac.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverMac);\n+        }\n+    }\n+\n+//    @Test\n+    public void loginTest() {\n+        this.runTest(app -> {\n+            WebDriver driver = new ChromeDriver();\n+            WebDriverWait wait = new WebDriverWait(driver, 10);\n+            driver.get(app.root() + \"api/group1\");\n+            wait.until(presenceOfElementLocated(By.name(\"loginfmt\")))\n+                .sendKeys(System.getenv(AAD_USER_NAME_1) + Keys.ENTER);\n+            wait.until(presenceOfElementLocated(By.name(\"passwd\")))\n+                .sendKeys(System.getenv(AAD_USER_PASSWORD_1));\n+\n+            try {\n+                Thread.sleep(3000);\n+                driver.findElement(By.cssSelector(\"input[type='submit']\")).click();\n+                Thread.sleep(3000);\n+                driver.findElement(By.cssSelector(\"input[type='submit']\")).click();\n+                Thread.sleep(3000);\n+                Assert.assertEquals(\"group1\", driver.findElement(By.tagName(\"body\")).getText());\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            } finally {\n+                driver.quit();\n+            }\n+        });\n+    }\n+\n+    public void runTest(Consumer<AppRunner> command) {\n+        try (AppRunner app = new AppRunner(AADLoginIT.DumbApp.class)) {\n+            app.property(\"spring.security.oauth2.client.registration.azure.tenant-id\",\n+                System.getenv(\"AAD_TENANT_ID_1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3296d08ade893509231871d1d49aa219afdf87b8"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTM3MDMyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/login/AADLoginIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTozOToxOVrOH7pXbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTozOToxOVrOH7pXbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwNTc3Mw==", "bodyText": "Add // TODO here, just remind us to delete old configuration item after new aad implementation start to work.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17856#discussion_r532305773", "createdAt": "2020-11-30T01:39:19Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/login/AADLoginIT.java", "diffHunk": "@@ -0,0 +1,128 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.test.aad.login;\n+\n+import com.azure.test.utils.AppRunner;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.chrome.ChromeDriver;\n+import org.openqa.selenium.chrome.ChromeDriverService;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest;\n+import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;\n+import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.function.Consumer;\n+import java.util.regex.Pattern;\n+\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_ID;\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_SECRET;\n+import static com.azure.test.oauth.OAuthUtils.AAD_TENANT_ID_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_NAME_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_PASSWORD_1;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+\n+public class AADLoginIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADLoginIT.class);\n+\n+    static {\n+        final String chromedriverLinux = \"src/test/resources/driver/chromedriver_linux64\";\n+        final String chromedriverWin32 = \"src/test/resources/driver/chromedriver_win32.exe\";\n+        final String chromedriverMac = \"src/test/resources/driver/chromedriver_mac64\";\n+        String osName = System.getProperty(\"os.name\").toLowerCase();\n+        if (Pattern.matches(\"linux.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverLinux);\n+        } else if (Pattern.matches(\"windows.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverWin32);\n+        } else if (Pattern.matches(\"mac.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverMac);\n+        }\n+    }\n+\n+//    @Test\n+    public void loginTest() {\n+        this.runTest(app -> {\n+            WebDriver driver = new ChromeDriver();\n+            WebDriverWait wait = new WebDriverWait(driver, 10);\n+            driver.get(app.root() + \"api/group1\");\n+            wait.until(presenceOfElementLocated(By.name(\"loginfmt\")))\n+                .sendKeys(System.getenv(AAD_USER_NAME_1) + Keys.ENTER);\n+            wait.until(presenceOfElementLocated(By.name(\"passwd\")))\n+                .sendKeys(System.getenv(AAD_USER_PASSWORD_1));\n+\n+            try {\n+                Thread.sleep(3000);\n+                driver.findElement(By.cssSelector(\"input[type='submit']\")).click();\n+                Thread.sleep(3000);\n+                driver.findElement(By.cssSelector(\"input[type='submit']\")).click();\n+                Thread.sleep(3000);\n+                Assert.assertEquals(\"group1\", driver.findElement(By.tagName(\"body\")).getText());\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            } finally {\n+                driver.quit();\n+            }\n+        });\n+    }\n+\n+    public void runTest(Consumer<AppRunner> command) {\n+        try (AppRunner app = new AppRunner(AADLoginIT.DumbApp.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3296d08ade893509231871d1d49aa219afdf87b8"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTM3MjM4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/login/AADLoginIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTo0MDoyNlrOH7pYgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTo1MjoxNFrOH7phyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwNjA0OA==", "bodyText": "Can we use String instead of ResponseEntity?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17856#discussion_r532306048", "createdAt": "2020-11-30T01:40:26Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/login/AADLoginIT.java", "diffHunk": "@@ -0,0 +1,128 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.test.aad.login;\n+\n+import com.azure.test.utils.AppRunner;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.chrome.ChromeDriver;\n+import org.openqa.selenium.chrome.ChromeDriverService;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest;\n+import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;\n+import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.function.Consumer;\n+import java.util.regex.Pattern;\n+\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_ID;\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_SECRET;\n+import static com.azure.test.oauth.OAuthUtils.AAD_TENANT_ID_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_NAME_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_PASSWORD_1;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+\n+public class AADLoginIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADLoginIT.class);\n+\n+    static {\n+        final String chromedriverLinux = \"src/test/resources/driver/chromedriver_linux64\";\n+        final String chromedriverWin32 = \"src/test/resources/driver/chromedriver_win32.exe\";\n+        final String chromedriverMac = \"src/test/resources/driver/chromedriver_mac64\";\n+        String osName = System.getProperty(\"os.name\").toLowerCase();\n+        if (Pattern.matches(\"linux.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverLinux);\n+        } else if (Pattern.matches(\"windows.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverWin32);\n+        } else if (Pattern.matches(\"mac.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverMac);\n+        }\n+    }\n+\n+//    @Test\n+    public void loginTest() {\n+        this.runTest(app -> {\n+            WebDriver driver = new ChromeDriver();\n+            WebDriverWait wait = new WebDriverWait(driver, 10);\n+            driver.get(app.root() + \"api/group1\");\n+            wait.until(presenceOfElementLocated(By.name(\"loginfmt\")))\n+                .sendKeys(System.getenv(AAD_USER_NAME_1) + Keys.ENTER);\n+            wait.until(presenceOfElementLocated(By.name(\"passwd\")))\n+                .sendKeys(System.getenv(AAD_USER_PASSWORD_1));\n+\n+            try {\n+                Thread.sleep(3000);\n+                driver.findElement(By.cssSelector(\"input[type='submit']\")).click();\n+                Thread.sleep(3000);\n+                driver.findElement(By.cssSelector(\"input[type='submit']\")).click();\n+                Thread.sleep(3000);\n+                Assert.assertEquals(\"group1\", driver.findElement(By.tagName(\"body\")).getText());\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            } finally {\n+                driver.quit();\n+            }\n+        });\n+    }\n+\n+    public void runTest(Consumer<AppRunner> command) {\n+        try (AppRunner app = new AppRunner(AADLoginIT.DumbApp.class)) {\n+            app.property(\"spring.security.oauth2.client.registration.azure.tenant-id\",\n+                System.getenv(\"AAD_TENANT_ID_1\"));\n+            app.property(\"spring.security.oauth2.client.registration.azure.client-id\",\n+                System.getenv(AAD_MULTI_TENANT_CLIENT_ID));\n+            app.property(\"spring.security.oauth2.client.registration.azure.client-secret\",\n+                System.getenv(AAD_MULTI_TENANT_CLIENT_SECRET));\n+\n+            app.property(\"azure.activedirectory.tenant-id\", System.getenv(AAD_TENANT_ID_1));\n+            app.property(\"azure.activedirectory.client-id\", System.getenv(AAD_MULTI_TENANT_CLIENT_ID));\n+            app.property(\"azure.activedirectory.client-secret\", System.getenv(AAD_MULTI_TENANT_CLIENT_SECRET));\n+            app.property(\"azure.activedirectory.user-group.allowed-groups\", \"group1\");\n+\n+            app.start();\n+            command.accept(app);\n+        }\n+    }\n+\n+    @EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)\n+    @SpringBootApplication\n+    @RestController\n+    public static class DumbApp extends WebSecurityConfigurerAdapter {\n+\n+        @Autowired\n+        private OAuth2UserService<OidcUserRequest, OidcUser> oidcUserService;\n+\n+        @PreAuthorize(\"hasRole('ROLE_group1')\")\n+        @GetMapping(value = \"/api/group1\")\n+        public ResponseEntity<String> getRoleGroup1() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3296d08ade893509231871d1d49aa219afdf87b8"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwNzQ0Mw==", "bodyText": "Why?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17856#discussion_r532307443", "createdAt": "2020-11-30T01:47:32Z", "author": {"login": "lu-cheng"}, "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/login/AADLoginIT.java", "diffHunk": "@@ -0,0 +1,128 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.test.aad.login;\n+\n+import com.azure.test.utils.AppRunner;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.chrome.ChromeDriver;\n+import org.openqa.selenium.chrome.ChromeDriverService;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest;\n+import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;\n+import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.function.Consumer;\n+import java.util.regex.Pattern;\n+\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_ID;\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_SECRET;\n+import static com.azure.test.oauth.OAuthUtils.AAD_TENANT_ID_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_NAME_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_PASSWORD_1;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+\n+public class AADLoginIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADLoginIT.class);\n+\n+    static {\n+        final String chromedriverLinux = \"src/test/resources/driver/chromedriver_linux64\";\n+        final String chromedriverWin32 = \"src/test/resources/driver/chromedriver_win32.exe\";\n+        final String chromedriverMac = \"src/test/resources/driver/chromedriver_mac64\";\n+        String osName = System.getProperty(\"os.name\").toLowerCase();\n+        if (Pattern.matches(\"linux.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverLinux);\n+        } else if (Pattern.matches(\"windows.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverWin32);\n+        } else if (Pattern.matches(\"mac.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverMac);\n+        }\n+    }\n+\n+//    @Test\n+    public void loginTest() {\n+        this.runTest(app -> {\n+            WebDriver driver = new ChromeDriver();\n+            WebDriverWait wait = new WebDriverWait(driver, 10);\n+            driver.get(app.root() + \"api/group1\");\n+            wait.until(presenceOfElementLocated(By.name(\"loginfmt\")))\n+                .sendKeys(System.getenv(AAD_USER_NAME_1) + Keys.ENTER);\n+            wait.until(presenceOfElementLocated(By.name(\"passwd\")))\n+                .sendKeys(System.getenv(AAD_USER_PASSWORD_1));\n+\n+            try {\n+                Thread.sleep(3000);\n+                driver.findElement(By.cssSelector(\"input[type='submit']\")).click();\n+                Thread.sleep(3000);\n+                driver.findElement(By.cssSelector(\"input[type='submit']\")).click();\n+                Thread.sleep(3000);\n+                Assert.assertEquals(\"group1\", driver.findElement(By.tagName(\"body\")).getText());\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            } finally {\n+                driver.quit();\n+            }\n+        });\n+    }\n+\n+    public void runTest(Consumer<AppRunner> command) {\n+        try (AppRunner app = new AppRunner(AADLoginIT.DumbApp.class)) {\n+            app.property(\"spring.security.oauth2.client.registration.azure.tenant-id\",\n+                System.getenv(\"AAD_TENANT_ID_1\"));\n+            app.property(\"spring.security.oauth2.client.registration.azure.client-id\",\n+                System.getenv(AAD_MULTI_TENANT_CLIENT_ID));\n+            app.property(\"spring.security.oauth2.client.registration.azure.client-secret\",\n+                System.getenv(AAD_MULTI_TENANT_CLIENT_SECRET));\n+\n+            app.property(\"azure.activedirectory.tenant-id\", System.getenv(AAD_TENANT_ID_1));\n+            app.property(\"azure.activedirectory.client-id\", System.getenv(AAD_MULTI_TENANT_CLIENT_ID));\n+            app.property(\"azure.activedirectory.client-secret\", System.getenv(AAD_MULTI_TENANT_CLIENT_SECRET));\n+            app.property(\"azure.activedirectory.user-group.allowed-groups\", \"group1\");\n+\n+            app.start();\n+            command.accept(app);\n+        }\n+    }\n+\n+    @EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)\n+    @SpringBootApplication\n+    @RestController\n+    public static class DumbApp extends WebSecurityConfigurerAdapter {\n+\n+        @Autowired\n+        private OAuth2UserService<OidcUserRequest, OidcUser> oidcUserService;\n+\n+        @PreAuthorize(\"hasRole('ROLE_group1')\")\n+        @GetMapping(value = \"/api/group1\")\n+        public ResponseEntity<String> getRoleGroup1() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwNjA0OA=="}, "originalCommit": {"oid": "3296d08ade893509231871d1d49aa219afdf87b8"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwODQyNA==", "bodyText": "To make code shorter.\nNever mind, keep it if you like.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17856#discussion_r532308424", "createdAt": "2020-11-30T01:52:14Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/login/AADLoginIT.java", "diffHunk": "@@ -0,0 +1,128 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.test.aad.login;\n+\n+import com.azure.test.utils.AppRunner;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.chrome.ChromeDriver;\n+import org.openqa.selenium.chrome.ChromeDriverService;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest;\n+import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;\n+import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.function.Consumer;\n+import java.util.regex.Pattern;\n+\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_ID;\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_SECRET;\n+import static com.azure.test.oauth.OAuthUtils.AAD_TENANT_ID_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_NAME_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_PASSWORD_1;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+\n+public class AADLoginIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADLoginIT.class);\n+\n+    static {\n+        final String chromedriverLinux = \"src/test/resources/driver/chromedriver_linux64\";\n+        final String chromedriverWin32 = \"src/test/resources/driver/chromedriver_win32.exe\";\n+        final String chromedriverMac = \"src/test/resources/driver/chromedriver_mac64\";\n+        String osName = System.getProperty(\"os.name\").toLowerCase();\n+        if (Pattern.matches(\"linux.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverLinux);\n+        } else if (Pattern.matches(\"windows.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverWin32);\n+        } else if (Pattern.matches(\"mac.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverMac);\n+        }\n+    }\n+\n+//    @Test\n+    public void loginTest() {\n+        this.runTest(app -> {\n+            WebDriver driver = new ChromeDriver();\n+            WebDriverWait wait = new WebDriverWait(driver, 10);\n+            driver.get(app.root() + \"api/group1\");\n+            wait.until(presenceOfElementLocated(By.name(\"loginfmt\")))\n+                .sendKeys(System.getenv(AAD_USER_NAME_1) + Keys.ENTER);\n+            wait.until(presenceOfElementLocated(By.name(\"passwd\")))\n+                .sendKeys(System.getenv(AAD_USER_PASSWORD_1));\n+\n+            try {\n+                Thread.sleep(3000);\n+                driver.findElement(By.cssSelector(\"input[type='submit']\")).click();\n+                Thread.sleep(3000);\n+                driver.findElement(By.cssSelector(\"input[type='submit']\")).click();\n+                Thread.sleep(3000);\n+                Assert.assertEquals(\"group1\", driver.findElement(By.tagName(\"body\")).getText());\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            } finally {\n+                driver.quit();\n+            }\n+        });\n+    }\n+\n+    public void runTest(Consumer<AppRunner> command) {\n+        try (AppRunner app = new AppRunner(AADLoginIT.DumbApp.class)) {\n+            app.property(\"spring.security.oauth2.client.registration.azure.tenant-id\",\n+                System.getenv(\"AAD_TENANT_ID_1\"));\n+            app.property(\"spring.security.oauth2.client.registration.azure.client-id\",\n+                System.getenv(AAD_MULTI_TENANT_CLIENT_ID));\n+            app.property(\"spring.security.oauth2.client.registration.azure.client-secret\",\n+                System.getenv(AAD_MULTI_TENANT_CLIENT_SECRET));\n+\n+            app.property(\"azure.activedirectory.tenant-id\", System.getenv(AAD_TENANT_ID_1));\n+            app.property(\"azure.activedirectory.client-id\", System.getenv(AAD_MULTI_TENANT_CLIENT_ID));\n+            app.property(\"azure.activedirectory.client-secret\", System.getenv(AAD_MULTI_TENANT_CLIENT_SECRET));\n+            app.property(\"azure.activedirectory.user-group.allowed-groups\", \"group1\");\n+\n+            app.start();\n+            command.accept(app);\n+        }\n+    }\n+\n+    @EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)\n+    @SpringBootApplication\n+    @RestController\n+    public static class DumbApp extends WebSecurityConfigurerAdapter {\n+\n+        @Autowired\n+        private OAuth2UserService<OidcUserRequest, OidcUser> oidcUserService;\n+\n+        @PreAuthorize(\"hasRole('ROLE_group1')\")\n+        @GetMapping(value = \"/api/group1\")\n+        public ResponseEntity<String> getRoleGroup1() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwNjA0OA=="}, "originalCommit": {"oid": "3296d08ade893509231871d1d49aa219afdf87b8"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTM3NDAzOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/login/AADLoginIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTo0MTozMVrOH7pZVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTo0MTozMVrOH7pZVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwNjI2MQ==", "bodyText": "Now we tested /api/group. Could you please add the following 2 apis and test them?\n\n/api/home\napi/group2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17856#discussion_r532306261", "createdAt": "2020-11-30T01:41:31Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/login/AADLoginIT.java", "diffHunk": "@@ -0,0 +1,128 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.test.aad.login;\n+\n+import com.azure.test.utils.AppRunner;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.chrome.ChromeDriver;\n+import org.openqa.selenium.chrome.ChromeDriverService;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest;\n+import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;\n+import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.function.Consumer;\n+import java.util.regex.Pattern;\n+\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_ID;\n+import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_SECRET;\n+import static com.azure.test.oauth.OAuthUtils.AAD_TENANT_ID_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_NAME_1;\n+import static com.azure.test.oauth.OAuthUtils.AAD_USER_PASSWORD_1;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+\n+public class AADLoginIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADLoginIT.class);\n+\n+    static {\n+        final String chromedriverLinux = \"src/test/resources/driver/chromedriver_linux64\";\n+        final String chromedriverWin32 = \"src/test/resources/driver/chromedriver_win32.exe\";\n+        final String chromedriverMac = \"src/test/resources/driver/chromedriver_mac64\";\n+        String osName = System.getProperty(\"os.name\").toLowerCase();\n+        if (Pattern.matches(\"linux.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverLinux);\n+        } else if (Pattern.matches(\"windows.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverWin32);\n+        } else if (Pattern.matches(\"mac.*\", osName)) {\n+            System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, chromedriverMac);\n+        }\n+    }\n+\n+//    @Test\n+    public void loginTest() {\n+        this.runTest(app -> {\n+            WebDriver driver = new ChromeDriver();\n+            WebDriverWait wait = new WebDriverWait(driver, 10);\n+            driver.get(app.root() + \"api/group1\");\n+            wait.until(presenceOfElementLocated(By.name(\"loginfmt\")))\n+                .sendKeys(System.getenv(AAD_USER_NAME_1) + Keys.ENTER);\n+            wait.until(presenceOfElementLocated(By.name(\"passwd\")))\n+                .sendKeys(System.getenv(AAD_USER_PASSWORD_1));\n+\n+            try {\n+                Thread.sleep(3000);\n+                driver.findElement(By.cssSelector(\"input[type='submit']\")).click();\n+                Thread.sleep(3000);\n+                driver.findElement(By.cssSelector(\"input[type='submit']\")).click();\n+                Thread.sleep(3000);\n+                Assert.assertEquals(\"group1\", driver.findElement(By.tagName(\"body\")).getText());\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            } finally {\n+                driver.quit();\n+            }\n+        });\n+    }\n+\n+    public void runTest(Consumer<AppRunner> command) {\n+        try (AppRunner app = new AppRunner(AADLoginIT.DumbApp.class)) {\n+            app.property(\"spring.security.oauth2.client.registration.azure.tenant-id\",\n+                System.getenv(\"AAD_TENANT_ID_1\"));\n+            app.property(\"spring.security.oauth2.client.registration.azure.client-id\",\n+                System.getenv(AAD_MULTI_TENANT_CLIENT_ID));\n+            app.property(\"spring.security.oauth2.client.registration.azure.client-secret\",\n+                System.getenv(AAD_MULTI_TENANT_CLIENT_SECRET));\n+\n+            app.property(\"azure.activedirectory.tenant-id\", System.getenv(AAD_TENANT_ID_1));\n+            app.property(\"azure.activedirectory.client-id\", System.getenv(AAD_MULTI_TENANT_CLIENT_ID));\n+            app.property(\"azure.activedirectory.client-secret\", System.getenv(AAD_MULTI_TENANT_CLIENT_SECRET));\n+            app.property(\"azure.activedirectory.user-group.allowed-groups\", \"group1\");\n+\n+            app.start();\n+            command.accept(app);\n+        }\n+    }\n+\n+    @EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)\n+    @SpringBootApplication\n+    @RestController\n+    public static class DumbApp extends WebSecurityConfigurerAdapter {\n+\n+        @Autowired\n+        private OAuth2UserService<OidcUserRequest, OidcUser> oidcUserService;\n+\n+        @PreAuthorize(\"hasRole('ROLE_group1')\")\n+        @GetMapping(value = \"/api/group1\")\n+        public ResponseEntity<String> getRoleGroup1() {\n+            return new ResponseEntity<>(\"group1\", HttpStatus.OK);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3296d08ade893509231871d1d49aa219afdf87b8"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2723, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}