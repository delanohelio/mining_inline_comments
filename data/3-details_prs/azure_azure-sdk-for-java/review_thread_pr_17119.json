{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NjM0MTE3", "number": 17119, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODo1NzoxOVrOFHtoyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwNzo0ODoyOVrOFJVA5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjMyMDc1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-cloud-sample-eventhubs-binder/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODo1NzoxOVrOIJQ0Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTozNzoxM1rOIJR9zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4MzYyNw==", "bodyText": "I am not very clear about this here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17119#discussion_r546583627", "createdAt": "2020-12-21T08:57:19Z", "author": {"login": "backwind1233"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-cloud-sample-eventhubs-binder/pom.xml", "diffHunk": "@@ -1,90 +1,120 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n <project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xmlns=\"http://maven.apache.org/POM/4.0.0\"\n          xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-  <parent>\n-    <groupId>org.springframework.boot</groupId>\n-    <artifactId>spring-boot-starter-parent</artifactId>\n+  <parent> \n+    <groupId>org.springframework.boot</groupId>  \n+    <artifactId>spring-boot-starter-parent</artifactId>  \n     <version>2.3.7.RELEASE</version> <!-- {x-version-update;org.springframework.boot:spring-boot-starter-parent;external_dependency} -->\n-  </parent>\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <artifactId>azure-spring-cloud-sample-eventhubs-binder</artifactId>\n-  <groupId>com.azure.spring</groupId>\n-  <version>1.0.0</version> <!-- {x-version-update;com.azure.spring:azure-spring-cloud-sample-eventhubs-binder;current} -->\n-  <name>Azure Spring Cloud Sample Event Hubs Binder</name>\n-\n-  <dependencyManagement>\n-    <dependencies>\n-      <dependency>\n-        <groupId>org.springframework.cloud</groupId>\n-        <artifactId>spring-cloud-dependencies</artifactId>\n-        <version>Hoxton.SR8</version> <!-- {x-version-update;org.springframework.cloud:spring-cloud-dependencies;external_dependency} -->\n-        <type>pom</type>\n-        <scope>import</scope>\n-      </dependency>\n-    </dependencies>\n-  </dependencyManagement>\n-\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.springframework.boot</groupId>\n-      <artifactId>spring-boot-starter-web</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>com.azure.spring</groupId>\n-      <artifactId>azure-spring-cloud-stream-binder-eventhubs</artifactId>\n-      <version>2.0.0-beta.2</version> <!-- {x-version-update;com.azure.spring:azure-spring-cloud-stream-binder-eventhubs;current} -->\n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework.boot</groupId>\n-      <artifactId>spring-boot-starter-logging</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.mockito</groupId>\n-      <artifactId>mockito-core</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.powermock</groupId>\n-      <artifactId>powermock-api-mockito2</artifactId>\n-      <version>2.0.2</version> <!-- {x-version-update;org.powermock:powermock-api-mockito2;external_dependency} -->\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.powermock</groupId>\n-      <artifactId>powermock-module-junit4</artifactId>\n-      <version>2.0.2</version> <!-- {x-version-update;org.powermock:powermock-module-junit4;external_dependency} -->\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.hibernate.validator</groupId>\n-      <artifactId>hibernate-validator</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework.boot</groupId>\n-      <artifactId>spring-boot-starter-test</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n-  </dependencies>\n-\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.springframework.boot</groupId>\n-        <artifactId>spring-boot-maven-plugin</artifactId>\n-      </plugin>\n-      <!--  mvn azure-webapp:config -->\n-      <plugin>\n-        <groupId>com.microsoft.azure</groupId>\n-        <artifactId>azure-webapp-maven-plugin</artifactId>\n-        <version>1.10.0</version>\n+  </parent>  \n+  <modelVersion>4.0.0</modelVersion>  \n+  <artifactId>azure-spring-cloud-sample-eventhubs-binder</artifactId>  \n+  <groupId>com.azure.spring</groupId>  \n+  <version>1.0.0</version>  \n+  <!-- {x-version-update;com.azure.spring:azure-spring-cloud-sample-eventhubs-binder;current} -->  \n+  <name>Azure Spring Cloud Sample Event Hubs Binder</name>  \n+  <dependencyManagement> \n+    <dependencies> \n+      <dependency> \n+        <groupId>org.springframework.cloud</groupId>  \n+        <artifactId>spring-cloud-dependencies</artifactId>  \n+        <version>Hoxton.SR8</version>  \n+        <!-- {x-version-update;org.springframework.cloud:spring-cloud-dependencies;external_dependency} -->  \n+        <type>pom</type>  \n+        <scope>import</scope> \n+      </dependency> \n+    </dependencies> \n+  </dependencyManagement>  \n+  <dependencies> \n+    <dependency> \n+      <groupId>org.springframework.boot</groupId>  \n+      <artifactId>spring-boot-starter-web</artifactId> \n+    </dependency>  \n+    <dependency> \n+      <groupId>com.azure.spring</groupId>  \n+      <artifactId>azure-spring-cloud-stream-binder-eventhubs</artifactId>  \n+      <version>2.0.0-beta.2</version>  \n+      <!-- {x-version-update;com.azure.spring:azure-spring-cloud-stream-binder-eventhubs;current} --> \n+    </dependency>  \n+    <!-- Storage library for provisioning checkpoint storage -->  \n+    <dependency> \n+      <groupId>com.azure.spring</groupId>  \n+      <artifactId>azure-spring-cloud-storage</artifactId>  \n+      <version>2.0.0-beta.2</version>  \n+      <!-- {x-version-update;com.azure.spring:azure-spring-cloud-storage;current} --> \n+    </dependency>  \n+    <dependency> \n+      <groupId>org.springframework.boot</groupId>  \n+      <artifactId>spring-boot-starter-logging</artifactId> \n+    </dependency>  \n+    <dependency> \n+      <groupId>junit</groupId>  \n+      <artifactId>junit</artifactId>  \n+      <scope>test</scope> \n+    </dependency>  \n+    <dependency> \n+      <groupId>org.mockito</groupId>  \n+      <artifactId>mockito-core</artifactId>  \n+      <scope>test</scope> \n+    </dependency>  \n+    <dependency> \n+      <groupId>org.powermock</groupId>  \n+      <artifactId>powermock-api-mockito2</artifactId>  \n+      <version>2.0.2</version>  \n+      <!-- {x-version-update;org.powermock:powermock-api-mockito2;external_dependency} -->  \n+      <scope>test</scope> \n+    </dependency>  \n+    <dependency> \n+      <groupId>org.powermock</groupId>  \n+      <artifactId>powermock-module-junit4</artifactId>  \n+      <version>2.0.2</version>  \n+      <!-- {x-version-update;org.powermock:powermock-module-junit4;external_dependency} -->  \n+      <scope>test</scope> \n+    </dependency>  \n+    <dependency> \n+      <groupId>org.hibernate.validator</groupId>  \n+      <artifactId>hibernate-validator</artifactId> \n+    </dependency>  \n+    <dependency> \n+      <groupId>org.springframework.boot</groupId>  \n+      <artifactId>spring-boot-starter-test</artifactId>  \n+      <scope>test</scope> \n+    </dependency> \n+  </dependencies>  \n+  <build> \n+    <plugins> \n+      <plugin> \n+        <groupId>org.springframework.boot</groupId>  \n+        <artifactId>spring-boot-maven-plugin</artifactId> \n       </plugin>\n-    </plugins>\n-  </build>\n+\n+      <!-- mvn azure-webapp:config -->  \n+      <plugin> \n+        <groupId>com.microsoft.azure</groupId>  \n+        <artifactId>azure-webapp-maven-plugin</artifactId>  \n+        <version>1.12.0</version>  \n+        <configuration> \n+          <schemaVersion>V2</schemaVersion>\n+          <resourceGroup>[your-resource-group]</resourceGroup>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4f1b1e843cd1e0a335a4c00350deaa602f81a27"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwMjQ0Ng==", "bodyText": "This is an Azure maven plugin to create an App Service and deploy your application jar file to the service.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17119#discussion_r546602446", "createdAt": "2020-12-21T09:37:13Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-cloud-sample-eventhubs-binder/pom.xml", "diffHunk": "@@ -1,90 +1,120 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n <project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xmlns=\"http://maven.apache.org/POM/4.0.0\"\n          xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-  <parent>\n-    <groupId>org.springframework.boot</groupId>\n-    <artifactId>spring-boot-starter-parent</artifactId>\n+  <parent> \n+    <groupId>org.springframework.boot</groupId>  \n+    <artifactId>spring-boot-starter-parent</artifactId>  \n     <version>2.3.7.RELEASE</version> <!-- {x-version-update;org.springframework.boot:spring-boot-starter-parent;external_dependency} -->\n-  </parent>\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <artifactId>azure-spring-cloud-sample-eventhubs-binder</artifactId>\n-  <groupId>com.azure.spring</groupId>\n-  <version>1.0.0</version> <!-- {x-version-update;com.azure.spring:azure-spring-cloud-sample-eventhubs-binder;current} -->\n-  <name>Azure Spring Cloud Sample Event Hubs Binder</name>\n-\n-  <dependencyManagement>\n-    <dependencies>\n-      <dependency>\n-        <groupId>org.springframework.cloud</groupId>\n-        <artifactId>spring-cloud-dependencies</artifactId>\n-        <version>Hoxton.SR8</version> <!-- {x-version-update;org.springframework.cloud:spring-cloud-dependencies;external_dependency} -->\n-        <type>pom</type>\n-        <scope>import</scope>\n-      </dependency>\n-    </dependencies>\n-  </dependencyManagement>\n-\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.springframework.boot</groupId>\n-      <artifactId>spring-boot-starter-web</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>com.azure.spring</groupId>\n-      <artifactId>azure-spring-cloud-stream-binder-eventhubs</artifactId>\n-      <version>2.0.0-beta.2</version> <!-- {x-version-update;com.azure.spring:azure-spring-cloud-stream-binder-eventhubs;current} -->\n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework.boot</groupId>\n-      <artifactId>spring-boot-starter-logging</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.mockito</groupId>\n-      <artifactId>mockito-core</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.powermock</groupId>\n-      <artifactId>powermock-api-mockito2</artifactId>\n-      <version>2.0.2</version> <!-- {x-version-update;org.powermock:powermock-api-mockito2;external_dependency} -->\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.powermock</groupId>\n-      <artifactId>powermock-module-junit4</artifactId>\n-      <version>2.0.2</version> <!-- {x-version-update;org.powermock:powermock-module-junit4;external_dependency} -->\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.hibernate.validator</groupId>\n-      <artifactId>hibernate-validator</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework.boot</groupId>\n-      <artifactId>spring-boot-starter-test</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n-  </dependencies>\n-\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.springframework.boot</groupId>\n-        <artifactId>spring-boot-maven-plugin</artifactId>\n-      </plugin>\n-      <!--  mvn azure-webapp:config -->\n-      <plugin>\n-        <groupId>com.microsoft.azure</groupId>\n-        <artifactId>azure-webapp-maven-plugin</artifactId>\n-        <version>1.10.0</version>\n+  </parent>  \n+  <modelVersion>4.0.0</modelVersion>  \n+  <artifactId>azure-spring-cloud-sample-eventhubs-binder</artifactId>  \n+  <groupId>com.azure.spring</groupId>  \n+  <version>1.0.0</version>  \n+  <!-- {x-version-update;com.azure.spring:azure-spring-cloud-sample-eventhubs-binder;current} -->  \n+  <name>Azure Spring Cloud Sample Event Hubs Binder</name>  \n+  <dependencyManagement> \n+    <dependencies> \n+      <dependency> \n+        <groupId>org.springframework.cloud</groupId>  \n+        <artifactId>spring-cloud-dependencies</artifactId>  \n+        <version>Hoxton.SR8</version>  \n+        <!-- {x-version-update;org.springframework.cloud:spring-cloud-dependencies;external_dependency} -->  \n+        <type>pom</type>  \n+        <scope>import</scope> \n+      </dependency> \n+    </dependencies> \n+  </dependencyManagement>  \n+  <dependencies> \n+    <dependency> \n+      <groupId>org.springframework.boot</groupId>  \n+      <artifactId>spring-boot-starter-web</artifactId> \n+    </dependency>  \n+    <dependency> \n+      <groupId>com.azure.spring</groupId>  \n+      <artifactId>azure-spring-cloud-stream-binder-eventhubs</artifactId>  \n+      <version>2.0.0-beta.2</version>  \n+      <!-- {x-version-update;com.azure.spring:azure-spring-cloud-stream-binder-eventhubs;current} --> \n+    </dependency>  \n+    <!-- Storage library for provisioning checkpoint storage -->  \n+    <dependency> \n+      <groupId>com.azure.spring</groupId>  \n+      <artifactId>azure-spring-cloud-storage</artifactId>  \n+      <version>2.0.0-beta.2</version>  \n+      <!-- {x-version-update;com.azure.spring:azure-spring-cloud-storage;current} --> \n+    </dependency>  \n+    <dependency> \n+      <groupId>org.springframework.boot</groupId>  \n+      <artifactId>spring-boot-starter-logging</artifactId> \n+    </dependency>  \n+    <dependency> \n+      <groupId>junit</groupId>  \n+      <artifactId>junit</artifactId>  \n+      <scope>test</scope> \n+    </dependency>  \n+    <dependency> \n+      <groupId>org.mockito</groupId>  \n+      <artifactId>mockito-core</artifactId>  \n+      <scope>test</scope> \n+    </dependency>  \n+    <dependency> \n+      <groupId>org.powermock</groupId>  \n+      <artifactId>powermock-api-mockito2</artifactId>  \n+      <version>2.0.2</version>  \n+      <!-- {x-version-update;org.powermock:powermock-api-mockito2;external_dependency} -->  \n+      <scope>test</scope> \n+    </dependency>  \n+    <dependency> \n+      <groupId>org.powermock</groupId>  \n+      <artifactId>powermock-module-junit4</artifactId>  \n+      <version>2.0.2</version>  \n+      <!-- {x-version-update;org.powermock:powermock-module-junit4;external_dependency} -->  \n+      <scope>test</scope> \n+    </dependency>  \n+    <dependency> \n+      <groupId>org.hibernate.validator</groupId>  \n+      <artifactId>hibernate-validator</artifactId> \n+    </dependency>  \n+    <dependency> \n+      <groupId>org.springframework.boot</groupId>  \n+      <artifactId>spring-boot-starter-test</artifactId>  \n+      <scope>test</scope> \n+    </dependency> \n+  </dependencies>  \n+  <build> \n+    <plugins> \n+      <plugin> \n+        <groupId>org.springframework.boot</groupId>  \n+        <artifactId>spring-boot-maven-plugin</artifactId> \n       </plugin>\n-    </plugins>\n-  </build>\n+\n+      <!-- mvn azure-webapp:config -->  \n+      <plugin> \n+        <groupId>com.microsoft.azure</groupId>  \n+        <artifactId>azure-webapp-maven-plugin</artifactId>  \n+        <version>1.12.0</version>  \n+        <configuration> \n+          <schemaVersion>V2</schemaVersion>\n+          <resourceGroup>[your-resource-group]</resourceGroup>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4MzYyNw=="}, "originalCommit": {"oid": "f4f1b1e843cd1e0a335a4c00350deaa602f81a27"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjM2NjUxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-cloud-context/src/main/java/com/azure/spring/cloud/autoconfigure/context/AzureContextAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToxMjo0MFrOIJRPzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToxNjo0NFrOIJRXoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5MDY3MQ==", "bodyText": "the code you have marked as comment here, I am not sure whether it's appropriate, should we delete?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17119#discussion_r546590671", "createdAt": "2020-12-21T09:12:40Z", "author": {"login": "backwind1233"}, "path": "sdk/spring/azure-spring-cloud-context/src/main/java/com/azure/spring/cloud/autoconfigure/context/AzureContextAutoConfiguration.java", "diffHunk": "@@ -3,79 +3,89 @@\n \n package com.azure.spring.cloud.autoconfigure.context;\n \n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.management.profile.AzureProfile;\n+import com.azure.resourcemanager.AzureResourceManager;\n+import com.azure.spring.cloud.autoconfigure.telemetry.SubscriptionSupplier;\n import com.azure.spring.cloud.context.core.api.CredentialsProvider;\n-import com.azure.spring.cloud.context.core.api.ResourceManagerProvider;\n import com.azure.spring.cloud.context.core.config.AzureProperties;\n-import com.azure.spring.cloud.context.core.impl.AzureResourceManagerProvider;\n import com.azure.spring.cloud.context.core.impl.DefaultCredentialsProvider;\n-import com.microsoft.azure.AzureEnvironment;\n-import com.microsoft.azure.AzureResponseBuilder;\n-import com.microsoft.azure.credentials.AzureTokenCredentials;\n-import com.microsoft.azure.management.Azure;\n-import com.microsoft.azure.management.resources.fluentcore.utils.ProviderRegistrationInterceptor;\n-import com.microsoft.azure.management.resources.fluentcore.utils.ResourceManagerThrottlingInterceptor;\n-import com.microsoft.azure.serializer.AzureJacksonAdapter;\n-import com.microsoft.rest.RestClient;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-import java.io.IOException;\n-import java.util.Optional;\n-\n /**\n  * Auto-config to provide default {@link CredentialsProvider} for all Azure services\n  *\n  * @author Warren Zhu\n  */\n @Configuration\n @EnableConfigurationProperties(AzureProperties.class)\n-@ConditionalOnClass(Azure.class)\n+@ConditionalOnClass(AzureResourceManager.class)\n @ConditionalOnProperty(prefix = \"spring.cloud.azure\", value = { \"resource-group\" })\n public class AzureContextAutoConfiguration {\n \n-    private static final String PROJECT_VERSION =\n-        AzureContextAutoConfiguration.class.getPackage().getImplementationVersion();\n+    private static final String PROJECT_VERSION = AzureContextAutoConfiguration.class.getPackage()\n+                                                                                     .getImplementationVersion();\n     private static final String SPRING_CLOUD_USER_AGENT = \"spring-cloud-azure/\" + PROJECT_VERSION;\n \n-    @Bean\n-    @ConditionalOnMissingBean\n-    public ResourceManagerProvider resourceManagerProvider(Azure azure, AzureProperties azureProperties) {\n-        return new AzureResourceManagerProvider(azure, azureProperties);\n-    }\n \n     /**\n-     * Create an {@link Azure} bean.\n-     * @param credentials The credential to connect to Azure.\n-     * @param azureProperties The configured Azure properties.\n-     * @return An Azure object.\n-     * @throws IOException When IOException happens.\n+     * Create an {@link AzureResourceManager} bean.\n+     *\n+     * @param credential The credential to connect to Azure.\n+     * @param profile The azure profile.\n+     * @return An AzureResourceManager object.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public Azure azure(AzureTokenCredentials credentials, AzureProperties azureProperties) throws IOException {\n-        RestClient restClient = new RestClient.Builder()\n-            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)\n-            .withCredentials(credentials).withSerializerAdapter(new AzureJacksonAdapter())\n-            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())\n-            .withInterceptor(new ProviderRegistrationInterceptor(credentials))\n-            .withInterceptor(new ResourceManagerThrottlingInterceptor()).withUserAgent(SPRING_CLOUD_USER_AGENT)\n-            .build();\n+    public AzureResourceManager azureResourceManager(TokenCredential credential, AzureProfile profile) {\n+        // TODO (xiada) USER AGENT\n+        return AzureResourceManager.configure()\n+//                                   .withLogLevel(HttpLogDetailLevel.BASIC)\n+                                   .authenticate(credential, profile)\n+                                   .withDefaultSubscription();\n+    }\n+//\n+//    @VisibleForTesting\n+//    protected Azure authenticateToAzure(RestClient restClient, String subscriptionId,\n+//                                        AzureTokenCredentials credentials) {\n+//        return Azure.authenticate(restClient, credentials.domain()).withSubscription(subscriptionId);\n+//    }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4f1b1e843cd1e0a335a4c00350deaa602f81a27"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5MjY3Mw==", "bodyText": "Yes, we should delete them.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17119#discussion_r546592673", "createdAt": "2020-12-21T09:16:44Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-cloud-context/src/main/java/com/azure/spring/cloud/autoconfigure/context/AzureContextAutoConfiguration.java", "diffHunk": "@@ -3,79 +3,89 @@\n \n package com.azure.spring.cloud.autoconfigure.context;\n \n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.management.profile.AzureProfile;\n+import com.azure.resourcemanager.AzureResourceManager;\n+import com.azure.spring.cloud.autoconfigure.telemetry.SubscriptionSupplier;\n import com.azure.spring.cloud.context.core.api.CredentialsProvider;\n-import com.azure.spring.cloud.context.core.api.ResourceManagerProvider;\n import com.azure.spring.cloud.context.core.config.AzureProperties;\n-import com.azure.spring.cloud.context.core.impl.AzureResourceManagerProvider;\n import com.azure.spring.cloud.context.core.impl.DefaultCredentialsProvider;\n-import com.microsoft.azure.AzureEnvironment;\n-import com.microsoft.azure.AzureResponseBuilder;\n-import com.microsoft.azure.credentials.AzureTokenCredentials;\n-import com.microsoft.azure.management.Azure;\n-import com.microsoft.azure.management.resources.fluentcore.utils.ProviderRegistrationInterceptor;\n-import com.microsoft.azure.management.resources.fluentcore.utils.ResourceManagerThrottlingInterceptor;\n-import com.microsoft.azure.serializer.AzureJacksonAdapter;\n-import com.microsoft.rest.RestClient;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-import java.io.IOException;\n-import java.util.Optional;\n-\n /**\n  * Auto-config to provide default {@link CredentialsProvider} for all Azure services\n  *\n  * @author Warren Zhu\n  */\n @Configuration\n @EnableConfigurationProperties(AzureProperties.class)\n-@ConditionalOnClass(Azure.class)\n+@ConditionalOnClass(AzureResourceManager.class)\n @ConditionalOnProperty(prefix = \"spring.cloud.azure\", value = { \"resource-group\" })\n public class AzureContextAutoConfiguration {\n \n-    private static final String PROJECT_VERSION =\n-        AzureContextAutoConfiguration.class.getPackage().getImplementationVersion();\n+    private static final String PROJECT_VERSION = AzureContextAutoConfiguration.class.getPackage()\n+                                                                                     .getImplementationVersion();\n     private static final String SPRING_CLOUD_USER_AGENT = \"spring-cloud-azure/\" + PROJECT_VERSION;\n \n-    @Bean\n-    @ConditionalOnMissingBean\n-    public ResourceManagerProvider resourceManagerProvider(Azure azure, AzureProperties azureProperties) {\n-        return new AzureResourceManagerProvider(azure, azureProperties);\n-    }\n \n     /**\n-     * Create an {@link Azure} bean.\n-     * @param credentials The credential to connect to Azure.\n-     * @param azureProperties The configured Azure properties.\n-     * @return An Azure object.\n-     * @throws IOException When IOException happens.\n+     * Create an {@link AzureResourceManager} bean.\n+     *\n+     * @param credential The credential to connect to Azure.\n+     * @param profile The azure profile.\n+     * @return An AzureResourceManager object.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public Azure azure(AzureTokenCredentials credentials, AzureProperties azureProperties) throws IOException {\n-        RestClient restClient = new RestClient.Builder()\n-            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)\n-            .withCredentials(credentials).withSerializerAdapter(new AzureJacksonAdapter())\n-            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())\n-            .withInterceptor(new ProviderRegistrationInterceptor(credentials))\n-            .withInterceptor(new ResourceManagerThrottlingInterceptor()).withUserAgent(SPRING_CLOUD_USER_AGENT)\n-            .build();\n+    public AzureResourceManager azureResourceManager(TokenCredential credential, AzureProfile profile) {\n+        // TODO (xiada) USER AGENT\n+        return AzureResourceManager.configure()\n+//                                   .withLogLevel(HttpLogDetailLevel.BASIC)\n+                                   .authenticate(credential, profile)\n+                                   .withDefaultSubscription();\n+    }\n+//\n+//    @VisibleForTesting\n+//    protected Azure authenticateToAzure(RestClient restClient, String subscriptionId,\n+//                                        AzureTokenCredentials credentials) {\n+//        return Azure.authenticate(restClient, credentials.domain()).withSubscription(subscriptionId);\n+//    }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5MDY3MQ=="}, "originalCommit": {"oid": "f4f1b1e843cd1e0a335a4c00350deaa602f81a27"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzIyMzg5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-identity-spring/src/test/java/com/azure/spring/identity/PrefixedSpringCredentialBuilderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwNzowMzo1MlrOILo36A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxNToxODowMVrOILr77g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA3NDkyMA==", "bodyText": "Need to set one environment here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17119#discussion_r549074920", "createdAt": "2020-12-27T07:03:52Z", "author": {"login": "jialindai"}, "path": "sdk/spring/azure-identity-spring/src/test/java/com/azure/spring/identity/PrefixedSpringCredentialBuilderTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.identity;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.identity.ManagedIdentityCredential;\n+import com.google.common.collect.Lists;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class PrefixedSpringCredentialBuilderTest extends SpringCredentialTestBase {\n+\n+    @Test\n+    public void testWithNoEnvironmentSet() {\n+        final PrefixedSpringCredentialBuilder builder = new PrefixedSpringCredentialBuilder();\n+        assertThrows(IllegalArgumentException.class, builder::build);\n+    }\n+\n+    @Test\n+    public void testWithNoPrefixSet() {\n+        final PrefixedSpringCredentialBuilder builder = new PrefixedSpringCredentialBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cac3c0b524a74223c2a7b135f91a157bfaf6d4d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTEyNTEwMg==", "bodyText": "Ah yes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17119#discussion_r549125102", "createdAt": "2020-12-27T15:18:01Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-identity-spring/src/test/java/com/azure/spring/identity/PrefixedSpringCredentialBuilderTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.identity;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.identity.ManagedIdentityCredential;\n+import com.google.common.collect.Lists;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class PrefixedSpringCredentialBuilderTest extends SpringCredentialTestBase {\n+\n+    @Test\n+    public void testWithNoEnvironmentSet() {\n+        final PrefixedSpringCredentialBuilder builder = new PrefixedSpringCredentialBuilder();\n+        assertThrows(IllegalArgumentException.class, builder::build);\n+    }\n+\n+    @Test\n+    public void testWithNoPrefixSet() {\n+        final PrefixedSpringCredentialBuilder builder = new PrefixedSpringCredentialBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA3NDkyMA=="}, "originalCommit": {"oid": "7cac3c0b524a74223c2a7b135f91a157bfaf6d4d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzI1Nzk5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-identity-spring/src/main/java/com/azure/spring/identity/DefaultSpringCredentialBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwNzo0ODoyOVrOILpHKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNTo1MjozM1rOILx-GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA3ODgyNw==", "bodyText": "If alternativePrefix is not null, then we will get managed identity credential if there is no such prefixed configuration in Environment. The order should be:\n\nCheck alternativePrefix client-id, client-secret\nCheck alternativePrefix client-id, client-certificate-path\nIf there is only alternativePrefix client-id, try managed identity with client-id\nCheck default prefix client-id, client-secret\nCheck default prefix client-id, client-certificate-path\nIf there is only default prefix client-id, try managed identity with client-id\nUse managed identity with no argument", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17119#discussion_r549078827", "createdAt": "2020-12-27T07:48:29Z", "author": {"login": "jialindai"}, "path": "sdk/spring/azure-identity-spring/src/main/java/com/azure/spring/identity/DefaultSpringCredentialBuilder.java", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.identity;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.identity.ChainedTokenCredentialBuilder;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ *\n+ */\n+public class DefaultSpringCredentialBuilder extends SpringCredentialBuilderBase<DefaultSpringCredentialBuilder> {\n+\n+    /**\n+     * Defines the AZURE_CREDENTIAL_PREFIX.\n+     */\n+    static final String AZURE_CREDENTIAL_PREFIX = \"azure.credential.\";\n+\n+    private String alternativePrefix;\n+\n+    public DefaultSpringCredentialBuilder alternativePrfix(String alternative) {\n+        if (alternative != null) {\n+            this.alternativePrefix = alternative + (alternative.endsWith(\".\") ? \"\" : \".\");\n+        }\n+\n+        return this;\n+    }\n+\n+    public TokenCredential build() {\n+        if (environment == null) {\n+            throw new IllegalArgumentException(\"To build a spring credential the environment must be set\");\n+        }\n+\n+        List<TokenCredential> tokenCredentials = new ArrayList<>();\n+\n+        if (alternativePrefix != null) {\n+            tokenCredentials.add(populateTokenCredential(alternativePrefix));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cac3c0b524a74223c2a7b135f91a157bfaf6d4d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIyMzk2MQ==", "bodyText": "Changed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17119#discussion_r549223961", "createdAt": "2020-12-28T05:52:33Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-identity-spring/src/main/java/com/azure/spring/identity/DefaultSpringCredentialBuilder.java", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.identity;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.identity.ChainedTokenCredentialBuilder;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ *\n+ */\n+public class DefaultSpringCredentialBuilder extends SpringCredentialBuilderBase<DefaultSpringCredentialBuilder> {\n+\n+    /**\n+     * Defines the AZURE_CREDENTIAL_PREFIX.\n+     */\n+    static final String AZURE_CREDENTIAL_PREFIX = \"azure.credential.\";\n+\n+    private String alternativePrefix;\n+\n+    public DefaultSpringCredentialBuilder alternativePrfix(String alternative) {\n+        if (alternative != null) {\n+            this.alternativePrefix = alternative + (alternative.endsWith(\".\") ? \"\" : \".\");\n+        }\n+\n+        return this;\n+    }\n+\n+    public TokenCredential build() {\n+        if (environment == null) {\n+            throw new IllegalArgumentException(\"To build a spring credential the environment must be set\");\n+        }\n+\n+        List<TokenCredential> tokenCredentials = new ArrayList<>();\n+\n+        if (alternativePrefix != null) {\n+            tokenCredentials.add(populateTokenCredential(alternativePrefix));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA3ODgyNw=="}, "originalCommit": {"oid": "7cac3c0b524a74223c2a7b135f91a157bfaf6d4d"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3081, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}