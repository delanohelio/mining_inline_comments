{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NzQ0Mjc4", "number": 15998, "title": "Communication - Added Phone Number Administration Create Search LRO", "bodyText": "", "createdAt": "2020-10-06T18:21:58Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998", "merged": true, "mergeCommit": {"oid": "97c9e9b12e71c8eaacaff7c1a7ee709c15ce200a"}, "closed": true, "closedAt": "2020-10-08T23:28:42Z", "author": {"login": "jbeauregardb"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdP9KQvgFqTUwMzI3MTgwMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQnrRRgBqjM4NTcyNjc0Nzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMjcxODAy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-503271802", "createdAt": "2020-10-06T19:01:31Z", "commit": {"oid": "5d33fc71c06d5d235068b074868b562966f8ea72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMTozMVrOHdV5nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMTozMVrOHdV5nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyOTU2NA==", "bodyText": "I thought we concluded that we would support cancellation -- which in turn would be the sync cancelSearch", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r500529564", "createdAt": "2020-10-06T19:01:31Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java", "diffHunk": "@@ -757,4 +765,68 @@\n             return monoError(logger, ex);\n         }\n     }\n+\n+    /**\n+     * Initiates a search and returns a {@link PhoneNumberSearch} usable by other functions\n+     * This function returns a Long Running Operation poller that allows you to \n+     * wait indefinitely until the operation is complete.\n+     * \n+     * @param options A {@link CreateSearchOptions} with the search options\n+     * @param lroDuration The time our long running operation will keep on polling \n+     * until it gets a result from the server\n+     * @return A {@link PollerFlux} object with the search result\n+     */\n+    public PollerFlux<PhoneNumberSearch, PhoneNumberSearch> beginCreateSearch(\n+        CreateSearchOptions options, Duration lroDuration) {\n+        final Duration interval = lroDuration != null ? lroDuration : DEFAULT_POLL_INTERVAL;\n+        return new PollerFlux<PhoneNumberSearch, PhoneNumberSearch>(interval,\n+            createSearchActivationOperation(options),\n+            createSearchPollOperation(),\n+            (activationResponse, pollingContext) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d33fc71c06d5d235068b074868b562966f8ea72"}, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d33fc71c06d5d235068b074868b562966f8ea72", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5d33fc71c06d5d235068b074868b562966f8ea72", "committedDate": "2020-10-06T18:21:06Z", "message": "Added create search LRO"}, "afterCommit": {"oid": "7f328f0c786af25fbcbd059ef1c65ab26058bf1d", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7f328f0c786af25fbcbd059ef1c65ab26058bf1d", "committedDate": "2020-10-06T19:02:26Z", "message": "Added create search LRO"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMjc4NDc4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-503278478", "createdAt": "2020-10-06T19:11:02Z", "commit": {"oid": "7f328f0c786af25fbcbd059ef1c65ab26058bf1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOToxMTowMlrOHdWNnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOToxMTowMlrOHdWNnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzNDY4NQ==", "bodyText": "nit: we can use DESCRIPTION_FOR_SEARCH and likewise for Name, will look cleaner", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r500534685", "createdAt": "2020-10-06T19:11:02Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/PhoneNumberAsyncClientIntegrationTest.java", "diffHunk": "@@ -449,6 +452,29 @@ public void releasePhoneNumbersWithResponse() {\n             .verifyComplete();\n     }\n \n+    @Test()\n+    public void beginCreateSearch() {\n+        List<String> phonePlanIds = new ArrayList<>();\n+        phonePlanIds.add(\"27b53eec-8ff4-4070-8900-fbeaabfd158a\");\n+\n+        CreateSearchOptions createSearchOptions = new CreateSearchOptions();\n+        createSearchOptions\n+            .setAreaCode(AREA_CODE_FOR_SEARCH)\n+            .setDescription(\"testsearch20200014\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f328f0c786af25fbcbd059ef1c65ab26058bf1d"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMjc4NzMz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-503278733", "createdAt": "2020-10-06T19:11:21Z", "commit": {"oid": "7f328f0c786af25fbcbd059ef1c65ab26058bf1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOToxMToyMVrOHdWOUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOToxMToyMVrOHdWOUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzNDg2NQ==", "bodyText": "Can we read this from env variables?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r500534865", "createdAt": "2020-10-06T19:11:21Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/PhoneNumberAsyncClientIntegrationTest.java", "diffHunk": "@@ -449,6 +452,29 @@ public void releasePhoneNumbersWithResponse() {\n             .verifyComplete();\n     }\n \n+    @Test()\n+    public void beginCreateSearch() {\n+        List<String> phonePlanIds = new ArrayList<>();\n+        phonePlanIds.add(\"27b53eec-8ff4-4070-8900-fbeaabfd158a\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f328f0c786af25fbcbd059ef1c65ab26058bf1d"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMjc5MTYy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-503279162", "createdAt": "2020-10-06T19:11:57Z", "commit": {"oid": "7f328f0c786af25fbcbd059ef1c65ab26058bf1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOToxMTo1N1rOHdWPkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOToxMTo1N1rOHdWPkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzNTE4NQ==", "bodyText": "You might want to poll sooner then that?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r500535185", "createdAt": "2020-10-06T19:11:57Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/PhoneNumberAsyncClientIntegrationTest.java", "diffHunk": "@@ -449,6 +452,29 @@ public void releasePhoneNumbersWithResponse() {\n             .verifyComplete();\n     }\n \n+    @Test()\n+    public void beginCreateSearch() {\n+        List<String> phonePlanIds = new ArrayList<>();\n+        phonePlanIds.add(\"27b53eec-8ff4-4070-8900-fbeaabfd158a\");\n+\n+        CreateSearchOptions createSearchOptions = new CreateSearchOptions();\n+        createSearchOptions\n+            .setAreaCode(AREA_CODE_FOR_SEARCH)\n+            .setDescription(\"testsearch20200014\")\n+            .setDisplayName(\"testsearch20200014\")\n+            .setPhonePlanIds(phonePlanIds)\n+            .setQuantity(2);\n+\n+        Duration duration = Duration.ofSeconds(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f328f0c786af25fbcbd059ef1c65ab26058bf1d"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMjg0ODg5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-503284889", "createdAt": "2020-10-06T19:20:08Z", "commit": {"oid": "7f328f0c786af25fbcbd059ef1c65ab26058bf1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOToyMDowOFrOHdWhIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOToyMDowOFrOHdWhIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzOTY4MA==", "bodyText": "This checks one path of functionality.. (Create and Validate Response).. but shouldn't we also test that the developer can poll and get the status? Another scenario would be the cancel itself?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r500539680", "createdAt": "2020-10-06T19:20:08Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/PhoneNumberAsyncClientIntegrationTest.java", "diffHunk": "@@ -449,6 +452,29 @@ public void releasePhoneNumbersWithResponse() {\n             .verifyComplete();\n     }\n \n+    @Test()\n+    public void beginCreateSearch() {\n+        List<String> phonePlanIds = new ArrayList<>();\n+        phonePlanIds.add(\"27b53eec-8ff4-4070-8900-fbeaabfd158a\");\n+\n+        CreateSearchOptions createSearchOptions = new CreateSearchOptions();\n+        createSearchOptions\n+            .setAreaCode(AREA_CODE_FOR_SEARCH)\n+            .setDescription(\"testsearch20200014\")\n+            .setDisplayName(\"testsearch20200014\")\n+            .setPhonePlanIds(phonePlanIds)\n+            .setQuantity(2);\n+\n+        Duration duration = Duration.ofSeconds(5);\n+        PhoneNumberAsyncClient client = this.getClient();\n+        PollerFlux<PhoneNumberSearch, PhoneNumberSearch> res = client.beginCreateSearch(createSearchOptions, duration);\n+        SyncPoller<PhoneNumberSearch, PhoneNumberSearch> sync = res.getSyncPoller();\n+        sync.waitForCompletion();\n+        PhoneNumberSearch testResult = sync.getFinalResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f328f0c786af25fbcbd059ef1c65ab26058bf1d"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMjkwMDA5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-503290009", "createdAt": "2020-10-06T19:27:34Z", "commit": {"oid": "7f328f0c786af25fbcbd059ef1c65ab26058bf1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOToyNzozNFrOHdWwtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOToyNzozNFrOHdWwtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0MzY3MQ==", "bodyText": "This doesn't seen right, doesn't it mean that the poll happens every 60s so if the caller doesn't specify a poll duration, it will take this long for their method to complete? Could you check what is the typical default duration and do we need to have a default at all? Maybe this should be required?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r500543671", "createdAt": "2020-10-06T19:27:34Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java", "diffHunk": "@@ -53,6 +60,7 @@\n @ServiceClient(builder = PhoneNumberClientBuilder.class, isAsync = true)\n public final class PhoneNumberAsyncClient {\n     private final ClientLogger logger = new ClientLogger(PhoneNumberAsyncClient.class);\n+    private static final Duration DEFAULT_POLL_INTERVAL = Duration.ofSeconds(60);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f328f0c786af25fbcbd059ef1c65ab26058bf1d"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMjkwNTM0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-503290534", "createdAt": "2020-10-06T19:28:19Z", "commit": {"oid": "7f328f0c786af25fbcbd059ef1c65ab26058bf1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOToyODoxOVrOHdWyYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOToyODoxOVrOHdWyYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0NDA5OA==", "bodyText": "Check for non-null needed here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r500544098", "createdAt": "2020-10-06T19:28:19Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java", "diffHunk": "@@ -757,4 +765,73 @@\n             return monoError(logger, ex);\n         }\n     }\n+\n+    /**\n+     * Initiates a search and returns a {@link PhoneNumberSearch} usable by other functions\n+     * This function returns a Long Running Operation poller that allows you to \n+     * wait indefinitely until the operation is complete.\n+     * \n+     * @param options A {@link CreateSearchOptions} with the search options\n+     * @param lroDuration The time our long running operation will keep on polling \n+     * until it gets a result from the server\n+     * @return A {@link PollerFlux} object with the search result\n+     */\n+    public PollerFlux<PhoneNumberSearch, PhoneNumberSearch> beginCreateSearch(\n+        CreateSearchOptions options, Duration lroDuration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f328f0c786af25fbcbd059ef1c65ab26058bf1d"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMjk1MDQ4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-503295048", "createdAt": "2020-10-06T19:34:41Z", "commit": {"oid": "7f328f0c786af25fbcbd059ef1c65ab26058bf1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTozNDo0MVrOHdW_dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTozNDo0MVrOHdW_dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0NzQ0NA==", "bodyText": "How is this going to work.. if you just assign the searchId to a new PhoneNumberSearch object? Shouldn't you do something - getSearchById(createSearchResponse.getSearchId())?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r500547444", "createdAt": "2020-10-06T19:34:41Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java", "diffHunk": "@@ -757,4 +765,73 @@\n             return monoError(logger, ex);\n         }\n     }\n+\n+    /**\n+     * Initiates a search and returns a {@link PhoneNumberSearch} usable by other functions\n+     * This function returns a Long Running Operation poller that allows you to \n+     * wait indefinitely until the operation is complete.\n+     * \n+     * @param options A {@link CreateSearchOptions} with the search options\n+     * @param lroDuration The time our long running operation will keep on polling \n+     * until it gets a result from the server\n+     * @return A {@link PollerFlux} object with the search result\n+     */\n+    public PollerFlux<PhoneNumberSearch, PhoneNumberSearch> beginCreateSearch(\n+        CreateSearchOptions options, Duration lroDuration) {\n+        final Duration interval = lroDuration != null ? lroDuration : DEFAULT_POLL_INTERVAL;\n+        return new PollerFlux<PhoneNumberSearch, PhoneNumberSearch>(interval,\n+            createSearchActivationOperation(options),\n+            createSearchPollOperation(),\n+            (activationResponse, pollingContext) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n+            createSearchFetchResultOperation());\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>, \n+        Mono<PhoneNumberSearch>> createSearchActivationOperation(CreateSearchOptions options) {\n+        return (pollingContext) -> {\n+            Mono<PhoneNumberSearch> response = createSearch(options).flatMap(createSearchResponse ->\n+            {\n+                String searchId = createSearchResponse.getSearchId();\n+                PhoneNumberSearch phoneNumberSearch = new PhoneNumberSearch().setSearchId(searchId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f328f0c786af25fbcbd059ef1c65ab26058bf1d"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMjk1OTc4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-503295978", "createdAt": "2020-10-06T19:36:02Z", "commit": {"oid": "7f328f0c786af25fbcbd059ef1c65ab26058bf1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTozNjowMlrOHdXCSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTozNjowMlrOHdXCSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0ODE2OQ==", "bodyText": "Can we clean this up a bit, get the status in a variable and set do the same this for Expired, cancelled, etc..", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r500548169", "createdAt": "2020-10-06T19:36:02Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java", "diffHunk": "@@ -757,4 +765,73 @@\n             return monoError(logger, ex);\n         }\n     }\n+\n+    /**\n+     * Initiates a search and returns a {@link PhoneNumberSearch} usable by other functions\n+     * This function returns a Long Running Operation poller that allows you to \n+     * wait indefinitely until the operation is complete.\n+     * \n+     * @param options A {@link CreateSearchOptions} with the search options\n+     * @param lroDuration The time our long running operation will keep on polling \n+     * until it gets a result from the server\n+     * @return A {@link PollerFlux} object with the search result\n+     */\n+    public PollerFlux<PhoneNumberSearch, PhoneNumberSearch> beginCreateSearch(\n+        CreateSearchOptions options, Duration lroDuration) {\n+        final Duration interval = lroDuration != null ? lroDuration : DEFAULT_POLL_INTERVAL;\n+        return new PollerFlux<PhoneNumberSearch, PhoneNumberSearch>(interval,\n+            createSearchActivationOperation(options),\n+            createSearchPollOperation(),\n+            (activationResponse, pollingContext) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n+            createSearchFetchResultOperation());\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>, \n+        Mono<PhoneNumberSearch>> createSearchActivationOperation(CreateSearchOptions options) {\n+        return (pollingContext) -> {\n+            Mono<PhoneNumberSearch> response = createSearch(options).flatMap(createSearchResponse ->\n+            {\n+                String searchId = createSearchResponse.getSearchId();\n+                PhoneNumberSearch phoneNumberSearch = new PhoneNumberSearch().setSearchId(searchId);\n+                return Mono.just(phoneNumberSearch);\n+            });\n+            return response;\n+        };\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>, \n+        Mono<PollResponse<PhoneNumberSearch>>> createSearchPollOperation() {\n+        return pollingContext ->\n+            getSearchById(pollingContext.getActivationResponse().getValue().getSearchId())\n+                .flatMap(getSearchResponse -> {\n+                    if (getSearchResponse.getStatus().equals(SearchStatus.SUCCESS)) {\n+                        return Mono.just(new PollResponse<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f328f0c786af25fbcbd059ef1c65ab26058bf1d"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMjk5MDg2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-503299086", "createdAt": "2020-10-06T19:40:34Z", "commit": {"oid": "7f328f0c786af25fbcbd059ef1c65ab26058bf1d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "079e659f635080df4e57942fb9f9ebebf3fe65f9", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/079e659f635080df4e57942fb9f9ebebf3fe65f9", "committedDate": "2020-10-06T22:11:21Z", "message": "Addressed PR comments"}, "afterCommit": {"oid": "7e7c6d3ff0d72ac1b9c82d93c9515990bf1d91cc", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7e7c6d3ff0d72ac1b9c82d93c9515990bf1d91cc", "committedDate": "2020-10-06T22:26:00Z", "message": "Addressed PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e7c6d3ff0d72ac1b9c82d93c9515990bf1d91cc", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7e7c6d3ff0d72ac1b9c82d93c9515990bf1d91cc", "committedDate": "2020-10-06T22:26:00Z", "message": "Addressed PR comments"}, "afterCommit": {"oid": "f18bf71da44e2d3e89f569c4faa7eb4bf046a188", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f18bf71da44e2d3e89f569c4faa7eb4bf046a188", "committedDate": "2020-10-06T22:46:53Z", "message": "Addressed PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNDUxNjIx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-503451621", "createdAt": "2020-10-07T00:41:40Z", "commit": {"oid": "f18bf71da44e2d3e89f569c4faa7eb4bf046a188"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo0MTo0MFrOHdeqdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo0MTo0MFrOHdeqdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MzE0MA==", "bodyText": "Sorry I should have mentioned it in the previous review iteration but this style of specifying parameters in different lines is quite confusing, did you see this as a standard somewhere? Shouldn't this be better --\nprivate Function<PollingContext, Mono>\ncreateSearchActivationOperation(CreateSearchOptions options) {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r500673140", "createdAt": "2020-10-07T00:41:40Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java", "diffHunk": "@@ -757,4 +764,83 @@\n             return monoError(logger, ex);\n         }\n     }\n+\n+    /**\n+     * Initiates a search and returns a {@link PhoneNumberSearch} usable by other functions\n+     * This function returns a Long Running Operation poller that allows you to \n+     * wait indefinitely until the operation is complete.\n+     * \n+     * @param options A {@link CreateSearchOptions} with the search options\n+     * @param pollInterval The time our long running operation will keep on polling \n+     * until it gets a result from the server\n+     * @return A {@link PollerFlux} object with the search result\n+     */\n+    public PollerFlux<PhoneNumberSearch, PhoneNumberSearch> beginCreateSearch(\n+        CreateSearchOptions options, Duration pollInterval) {\n+        Objects.requireNonNull(options, \"'options' cannot be null.\");\n+        Objects.requireNonNull(pollInterval, \"'pollInterval' cannot be null.\");\n+        return new PollerFlux<PhoneNumberSearch, PhoneNumberSearch>(pollInterval,\n+            createSearchActivationOperation(options),\n+            createSearchPollOperation(),\n+            cancelSearchOperation(),\n+            createSearchFetchResultOperation());\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>, \n+        Mono<PhoneNumberSearch>> createSearchActivationOperation(CreateSearchOptions options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18bf71da44e2d3e89f569c4faa7eb4bf046a188"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNDUyOTE0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-503452914", "createdAt": "2020-10-07T00:46:00Z", "commit": {"oid": "f18bf71da44e2d3e89f569c4faa7eb4bf046a188"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo0NjowMFrOHdeu5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo0NjowMFrOHdeu5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NDI3Nw==", "bodyText": "Can't we do something like pollingContext.getLatestResponse().. this is pretty much getting the searchId and querying the sync status api", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r500674277", "createdAt": "2020-10-07T00:46:00Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java", "diffHunk": "@@ -757,4 +764,83 @@\n             return monoError(logger, ex);\n         }\n     }\n+\n+    /**\n+     * Initiates a search and returns a {@link PhoneNumberSearch} usable by other functions\n+     * This function returns a Long Running Operation poller that allows you to \n+     * wait indefinitely until the operation is complete.\n+     * \n+     * @param options A {@link CreateSearchOptions} with the search options\n+     * @param pollInterval The time our long running operation will keep on polling \n+     * until it gets a result from the server\n+     * @return A {@link PollerFlux} object with the search result\n+     */\n+    public PollerFlux<PhoneNumberSearch, PhoneNumberSearch> beginCreateSearch(\n+        CreateSearchOptions options, Duration pollInterval) {\n+        Objects.requireNonNull(options, \"'options' cannot be null.\");\n+        Objects.requireNonNull(pollInterval, \"'pollInterval' cannot be null.\");\n+        return new PollerFlux<PhoneNumberSearch, PhoneNumberSearch>(pollInterval,\n+            createSearchActivationOperation(options),\n+            createSearchPollOperation(),\n+            cancelSearchOperation(),\n+            createSearchFetchResultOperation());\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>, \n+        Mono<PhoneNumberSearch>> createSearchActivationOperation(CreateSearchOptions options) {\n+        return (pollingContext) -> {\n+            Mono<PhoneNumberSearch> response = createSearch(options).flatMap(createSearchResponse -> {\n+                String searchId = createSearchResponse.getSearchId();\n+                Mono<PhoneNumberSearch> phoneNumberSearch = getSearchById(searchId);\n+                return phoneNumberSearch;\n+            });\n+            return response;\n+        };\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>, \n+        Mono<PollResponse<PhoneNumberSearch>>> createSearchPollOperation() {\n+        return pollingContext ->\n+            getSearchById(pollingContext.getActivationResponse().getValue().getSearchId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18bf71da44e2d3e89f569c4faa7eb4bf046a188"}, "originalPosition": 77}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "52e81fc1fb9277383e24afceb02bf6001b59108f", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/52e81fc1fb9277383e24afceb02bf6001b59108f", "committedDate": "2020-10-07T16:05:44Z", "message": "Addressed Ankit's comments"}, "afterCommit": {"oid": "396c715e8da2ef8d212f37cb673e806b0d33eada", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/396c715e8da2ef8d212f37cb673e806b0d33eada", "committedDate": "2020-10-07T16:26:22Z", "message": "Addressed Ankit's comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "396c715e8da2ef8d212f37cb673e806b0d33eada", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/396c715e8da2ef8d212f37cb673e806b0d33eada", "committedDate": "2020-10-07T16:26:22Z", "message": "Addressed Ankit's comments"}, "afterCommit": {"oid": "8104031a50db719e2f6bb67892798adc55acf5a0", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8104031a50db719e2f6bb67892798adc55acf5a0", "committedDate": "2020-10-07T16:35:25Z", "message": "Addressed Ankit's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MDk0MTUw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-504094150", "createdAt": "2020-10-07T17:08:59Z", "commit": {"oid": "8104031a50db719e2f6bb67892798adc55acf5a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzowODo1OVrOHd9S3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzowODo1OVrOHd9S3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3NTAwNQ==", "bodyText": "From design standpoint, I am thinking that our poll result type should be SearchStatus instead of PhoneNumberSearch.. so then this declaration should change to --\npublic PollerFlux<SearchStatus, PhoneNumberSearch> beginCreateSearch", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r501175005", "createdAt": "2020-10-07T17:08:59Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java", "diffHunk": "@@ -757,4 +764,84 @@\n             return monoError(logger, ex);\n         }\n     }\n+\n+    /**\n+     * Initiates a search and returns a {@link PhoneNumberSearch} usable by other functions\n+     * This function returns a Long Running Operation poller that allows you to \n+     * wait indefinitely until the operation is complete.\n+     * \n+     * @param options A {@link CreateSearchOptions} with the search options\n+     * @param pollInterval The time our long running operation will keep on polling \n+     * until it gets a result from the server\n+     * @return A {@link PollerFlux} object with the search result\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PollerFlux<PhoneNumberSearch, PhoneNumberSearch> beginCreateSearch(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8104031a50db719e2f6bb67892798adc55acf5a0"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MDk1MTUx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-504095151", "createdAt": "2020-10-07T17:10:11Z", "commit": {"oid": "8104031a50db719e2f6bb67892798adc55acf5a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzoxMDoxMlrOHd9V4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzoxMDoxMlrOHd9V4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3NTc3Nw==", "bodyText": "So if change the polling type as per my other comment, the return type would just change to Mono.just(SearchStatus.Cancelled) ..", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r501175777", "createdAt": "2020-10-07T17:10:12Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java", "diffHunk": "@@ -757,4 +764,84 @@\n             return monoError(logger, ex);\n         }\n     }\n+\n+    /**\n+     * Initiates a search and returns a {@link PhoneNumberSearch} usable by other functions\n+     * This function returns a Long Running Operation poller that allows you to \n+     * wait indefinitely until the operation is complete.\n+     * \n+     * @param options A {@link CreateSearchOptions} with the search options\n+     * @param pollInterval The time our long running operation will keep on polling \n+     * until it gets a result from the server\n+     * @return A {@link PollerFlux} object with the search result\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PollerFlux<PhoneNumberSearch, PhoneNumberSearch> beginCreateSearch(\n+        CreateSearchOptions options, Duration pollInterval) {\n+        Objects.requireNonNull(options, \"'options' cannot be null.\");\n+        Objects.requireNonNull(pollInterval, \"'pollInterval' cannot be null.\");\n+        return new PollerFlux<PhoneNumberSearch, PhoneNumberSearch>(pollInterval,\n+            createSearchActivationOperation(options),\n+            createSearchPollOperation(),\n+            cancelSearchOperation(),\n+            createSearchFetchResultOperation());\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>, Mono<PhoneNumberSearch>> \n+        createSearchActivationOperation(CreateSearchOptions options) {\n+        return (pollingContext) -> {\n+            Mono<PhoneNumberSearch> response = createSearch(options).flatMap(createSearchResponse -> {\n+                String searchId = createSearchResponse.getSearchId();\n+                Mono<PhoneNumberSearch> phoneNumberSearch = getSearchById(searchId);\n+                return phoneNumberSearch;\n+            });\n+            return response;\n+        };\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>, \n+        Mono<PollResponse<PhoneNumberSearch>>> createSearchPollOperation() {\n+        return pollingContext ->\n+            getSearchById(pollingContext.getActivationResponse().getValue().getSearchId())\n+                .flatMap(getSearchResponse -> {\n+                    SearchStatus status = getSearchResponse.getStatus();\n+                    if (status.equals(SearchStatus.SUCCESS)) {\n+                        return Mono.just(new PollResponse<>(\n+                        LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, getSearchResponse));\n+                    }\n+                    if (status.equals(SearchStatus.EXPIRED)) {\n+                        return Mono.just(new PollResponse<>(\n+                        LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, getSearchResponse));\n+                    }\n+                    if (status.equals(SearchStatus.CANCELLED)) {\n+                        return Mono.just(new PollResponse<>(\n+                        LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, getSearchResponse));\n+                    }\n+                    if (status.equals(SearchStatus.RESERVED)) {\n+                        return Mono.just(new PollResponse<>(\n+                        LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, getSearchResponse));\n+                    }\n+                    if (status.equals(SearchStatus.ERROR)) {\n+                        return Mono.just(new PollResponse<>(\n+                        LongRunningOperationStatus.FAILED, getSearchResponse));\n+                    }\n+                    return Mono.just(new PollResponse<>(LongRunningOperationStatus.IN_PROGRESS, getSearchResponse));\n+                });\n+    }\n+\n+    private BiFunction<PollingContext<PhoneNumberSearch>,\n+        PollResponse<PhoneNumberSearch>, Mono<PhoneNumberSearch>> \n+        cancelSearchOperation() {\n+        return (pollingContext, firstResponse) -> {\n+            cancelSearch(pollingContext.getActivationResponse().getValue().getSearchId());\n+            return Mono.just(new PhoneNumberSearch());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8104031a50db719e2f6bb67892798adc55acf5a0"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MDk3NTk1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-504097595", "createdAt": "2020-10-07T17:13:15Z", "commit": {"oid": "8104031a50db719e2f6bb67892798adc55acf5a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzoxMzoxNVrOHd9dIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzoxMzoxNVrOHd9dIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE3NzYzNA==", "bodyText": "You would probably have to change this as well since the pollingContext ill not have the result anymore", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r501177634", "createdAt": "2020-10-07T17:13:15Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java", "diffHunk": "@@ -757,4 +764,84 @@\n             return monoError(logger, ex);\n         }\n     }\n+\n+    /**\n+     * Initiates a search and returns a {@link PhoneNumberSearch} usable by other functions\n+     * This function returns a Long Running Operation poller that allows you to \n+     * wait indefinitely until the operation is complete.\n+     * \n+     * @param options A {@link CreateSearchOptions} with the search options\n+     * @param pollInterval The time our long running operation will keep on polling \n+     * until it gets a result from the server\n+     * @return A {@link PollerFlux} object with the search result\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PollerFlux<PhoneNumberSearch, PhoneNumberSearch> beginCreateSearch(\n+        CreateSearchOptions options, Duration pollInterval) {\n+        Objects.requireNonNull(options, \"'options' cannot be null.\");\n+        Objects.requireNonNull(pollInterval, \"'pollInterval' cannot be null.\");\n+        return new PollerFlux<PhoneNumberSearch, PhoneNumberSearch>(pollInterval,\n+            createSearchActivationOperation(options),\n+            createSearchPollOperation(),\n+            cancelSearchOperation(),\n+            createSearchFetchResultOperation());\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>, Mono<PhoneNumberSearch>> \n+        createSearchActivationOperation(CreateSearchOptions options) {\n+        return (pollingContext) -> {\n+            Mono<PhoneNumberSearch> response = createSearch(options).flatMap(createSearchResponse -> {\n+                String searchId = createSearchResponse.getSearchId();\n+                Mono<PhoneNumberSearch> phoneNumberSearch = getSearchById(searchId);\n+                return phoneNumberSearch;\n+            });\n+            return response;\n+        };\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>, \n+        Mono<PollResponse<PhoneNumberSearch>>> createSearchPollOperation() {\n+        return pollingContext ->\n+            getSearchById(pollingContext.getActivationResponse().getValue().getSearchId())\n+                .flatMap(getSearchResponse -> {\n+                    SearchStatus status = getSearchResponse.getStatus();\n+                    if (status.equals(SearchStatus.SUCCESS)) {\n+                        return Mono.just(new PollResponse<>(\n+                        LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, getSearchResponse));\n+                    }\n+                    if (status.equals(SearchStatus.EXPIRED)) {\n+                        return Mono.just(new PollResponse<>(\n+                        LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, getSearchResponse));\n+                    }\n+                    if (status.equals(SearchStatus.CANCELLED)) {\n+                        return Mono.just(new PollResponse<>(\n+                        LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, getSearchResponse));\n+                    }\n+                    if (status.equals(SearchStatus.RESERVED)) {\n+                        return Mono.just(new PollResponse<>(\n+                        LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, getSearchResponse));\n+                    }\n+                    if (status.equals(SearchStatus.ERROR)) {\n+                        return Mono.just(new PollResponse<>(\n+                        LongRunningOperationStatus.FAILED, getSearchResponse));\n+                    }\n+                    return Mono.just(new PollResponse<>(LongRunningOperationStatus.IN_PROGRESS, getSearchResponse));\n+                });\n+    }\n+\n+    private BiFunction<PollingContext<PhoneNumberSearch>,\n+        PollResponse<PhoneNumberSearch>, Mono<PhoneNumberSearch>> \n+        cancelSearchOperation() {\n+        return (pollingContext, firstResponse) -> {\n+            cancelSearch(pollingContext.getActivationResponse().getValue().getSearchId());\n+            return Mono.just(new PhoneNumberSearch());\n+        };\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>,\n+        Mono<PhoneNumberSearch>> createSearchFetchResultOperation() {\n+        return pollingContext -> {\n+            return Mono.just(pollingContext.getLatestResponse().getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8104031a50db719e2f6bb67892798adc55acf5a0"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MDk4NDAx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-504098401", "createdAt": "2020-10-07T17:14:17Z", "commit": {"oid": "8104031a50db719e2f6bb67892798adc55acf5a0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MjMwODA0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-504230804", "createdAt": "2020-10-07T20:13:13Z", "commit": {"oid": "e3af350d3fd8f0eb11ef650358f7d8cd38854c04"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoxMzoxM1rOHeDzBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoxMzoxM1rOHeDzBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4MTU0Mw==", "bodyText": "nit: can you fix formatting..\nprivate Function<PollingContext, Mono<PollResponse>>\ncreateSearchPollOperation()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r501281543", "createdAt": "2020-10-07T20:13:13Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java", "diffHunk": "@@ -757,4 +764,75 @@\n             return monoError(logger, ex);\n         }\n     }\n+\n+    /**\n+     * Initiates a search and returns a {@link PhoneNumberSearch} usable by other functions\n+     * This function returns a Long Running Operation poller that allows you to \n+     * wait indefinitely until the operation is complete.\n+     * \n+     * @param options A {@link CreateSearchOptions} with the search options\n+     * @param pollInterval The time our long running operation will keep on polling \n+     * until it gets a result from the server\n+     * @return A {@link PollerFlux} object with the search result\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PollerFlux<PhoneNumberSearch, PhoneNumberSearch> beginCreateSearch(\n+        CreateSearchOptions options, Duration pollInterval) {\n+        Objects.requireNonNull(options, \"'options' cannot be null.\");\n+        Objects.requireNonNull(pollInterval, \"'pollInterval' cannot be null.\");\n+        return new PollerFlux<PhoneNumberSearch, PhoneNumberSearch>(pollInterval,\n+            createSearchActivationOperation(options),\n+            createSearchPollOperation(),\n+            cancelSearchOperation(),\n+            createSearchFetchResultOperation());\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>, Mono<PhoneNumberSearch>> \n+        createSearchActivationOperation(CreateSearchOptions options) {\n+        return (pollingContext) -> {\n+            Mono<PhoneNumberSearch> response = createSearch(options).flatMap(createSearchResponse -> {\n+                String searchId = createSearchResponse.getSearchId();\n+                Mono<PhoneNumberSearch> phoneNumberSearch = getSearchById(searchId);\n+                return phoneNumberSearch;\n+            });\n+            return response;\n+        };\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>, \n+        Mono<PollResponse<PhoneNumberSearch>>> createSearchPollOperation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3af350d3fd8f0eb11ef650358f7d8cd38854c04"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MjMxNTIy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-504231522", "createdAt": "2020-10-07T20:14:17Z", "commit": {"oid": "e3af350d3fd8f0eb11ef650358f7d8cd38854c04"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoxNDoxN1rOHeD1Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoxNDoxN1rOHeD1Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4MjEyNw==", "bodyText": "nit: can you format the tabs\nif (status.equals(SearchStatus.SUCCESS) ||\nstatus.equals(SearchStatus.EXPIRED) ||\nstatus.equals(SearchStatus.CANCELLED) ||\nstatus.equals(SearchStatus.RESERVED)) {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r501282127", "createdAt": "2020-10-07T20:14:17Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java", "diffHunk": "@@ -757,4 +764,75 @@\n             return monoError(logger, ex);\n         }\n     }\n+\n+    /**\n+     * Initiates a search and returns a {@link PhoneNumberSearch} usable by other functions\n+     * This function returns a Long Running Operation poller that allows you to \n+     * wait indefinitely until the operation is complete.\n+     * \n+     * @param options A {@link CreateSearchOptions} with the search options\n+     * @param pollInterval The time our long running operation will keep on polling \n+     * until it gets a result from the server\n+     * @return A {@link PollerFlux} object with the search result\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PollerFlux<PhoneNumberSearch, PhoneNumberSearch> beginCreateSearch(\n+        CreateSearchOptions options, Duration pollInterval) {\n+        Objects.requireNonNull(options, \"'options' cannot be null.\");\n+        Objects.requireNonNull(pollInterval, \"'pollInterval' cannot be null.\");\n+        return new PollerFlux<PhoneNumberSearch, PhoneNumberSearch>(pollInterval,\n+            createSearchActivationOperation(options),\n+            createSearchPollOperation(),\n+            cancelSearchOperation(),\n+            createSearchFetchResultOperation());\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>, Mono<PhoneNumberSearch>> \n+        createSearchActivationOperation(CreateSearchOptions options) {\n+        return (pollingContext) -> {\n+            Mono<PhoneNumberSearch> response = createSearch(options).flatMap(createSearchResponse -> {\n+                String searchId = createSearchResponse.getSearchId();\n+                Mono<PhoneNumberSearch> phoneNumberSearch = getSearchById(searchId);\n+                return phoneNumberSearch;\n+            });\n+            return response;\n+        };\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>, \n+        Mono<PollResponse<PhoneNumberSearch>>> createSearchPollOperation() {\n+        return pollingContext ->\n+            getSearchById(pollingContext.getLatestResponse().getValue().getSearchId())\n+                .flatMap(getSearchResponse -> {\n+                    SearchStatus status = getSearchResponse.getStatus();\n+                    if (status.equals(SearchStatus.SUCCESS) || \n+                    status.equals(SearchStatus.EXPIRED) || \n+                    status.equals(SearchStatus.CANCELLED) || \n+                    status.equals(SearchStatus.RESERVED)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3af350d3fd8f0eb11ef650358f7d8cd38854c04"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MjMyMTgz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-504232183", "createdAt": "2020-10-07T20:15:17Z", "commit": {"oid": "e3af350d3fd8f0eb11ef650358f7d8cd38854c04"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoxNToxN1rOHeD3dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoxNToxN1rOHeD3dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4MjY3Ng==", "bodyText": "I don't think we should get SUCCESS in here, because that is after purchaseSearch.. but I don;t kow what is the right thing to do in that case..", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r501282676", "createdAt": "2020-10-07T20:15:17Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java", "diffHunk": "@@ -757,4 +764,75 @@\n             return monoError(logger, ex);\n         }\n     }\n+\n+    /**\n+     * Initiates a search and returns a {@link PhoneNumberSearch} usable by other functions\n+     * This function returns a Long Running Operation poller that allows you to \n+     * wait indefinitely until the operation is complete.\n+     * \n+     * @param options A {@link CreateSearchOptions} with the search options\n+     * @param pollInterval The time our long running operation will keep on polling \n+     * until it gets a result from the server\n+     * @return A {@link PollerFlux} object with the search result\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PollerFlux<PhoneNumberSearch, PhoneNumberSearch> beginCreateSearch(\n+        CreateSearchOptions options, Duration pollInterval) {\n+        Objects.requireNonNull(options, \"'options' cannot be null.\");\n+        Objects.requireNonNull(pollInterval, \"'pollInterval' cannot be null.\");\n+        return new PollerFlux<PhoneNumberSearch, PhoneNumberSearch>(pollInterval,\n+            createSearchActivationOperation(options),\n+            createSearchPollOperation(),\n+            cancelSearchOperation(),\n+            createSearchFetchResultOperation());\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>, Mono<PhoneNumberSearch>> \n+        createSearchActivationOperation(CreateSearchOptions options) {\n+        return (pollingContext) -> {\n+            Mono<PhoneNumberSearch> response = createSearch(options).flatMap(createSearchResponse -> {\n+                String searchId = createSearchResponse.getSearchId();\n+                Mono<PhoneNumberSearch> phoneNumberSearch = getSearchById(searchId);\n+                return phoneNumberSearch;\n+            });\n+            return response;\n+        };\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>, \n+        Mono<PollResponse<PhoneNumberSearch>>> createSearchPollOperation() {\n+        return pollingContext ->\n+            getSearchById(pollingContext.getLatestResponse().getValue().getSearchId())\n+                .flatMap(getSearchResponse -> {\n+                    SearchStatus status = getSearchResponse.getStatus();\n+                    if (status.equals(SearchStatus.SUCCESS) || ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3af350d3fd8f0eb11ef650358f7d8cd38854c04"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MjMyNDQ3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-504232447", "createdAt": "2020-10-07T20:15:42Z", "commit": {"oid": "e3af350d3fd8f0eb11ef650358f7d8cd38854c04"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoxNTo0M1rOHeD4Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoxNTo0M1rOHeD4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4Mjg3MA==", "bodyText": "nit: space between arguments", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r501282870", "createdAt": "2020-10-07T20:15:43Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java", "diffHunk": "@@ -757,4 +764,75 @@\n             return monoError(logger, ex);\n         }\n     }\n+\n+    /**\n+     * Initiates a search and returns a {@link PhoneNumberSearch} usable by other functions\n+     * This function returns a Long Running Operation poller that allows you to \n+     * wait indefinitely until the operation is complete.\n+     * \n+     * @param options A {@link CreateSearchOptions} with the search options\n+     * @param pollInterval The time our long running operation will keep on polling \n+     * until it gets a result from the server\n+     * @return A {@link PollerFlux} object with the search result\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PollerFlux<PhoneNumberSearch, PhoneNumberSearch> beginCreateSearch(\n+        CreateSearchOptions options, Duration pollInterval) {\n+        Objects.requireNonNull(options, \"'options' cannot be null.\");\n+        Objects.requireNonNull(pollInterval, \"'pollInterval' cannot be null.\");\n+        return new PollerFlux<PhoneNumberSearch, PhoneNumberSearch>(pollInterval,\n+            createSearchActivationOperation(options),\n+            createSearchPollOperation(),\n+            cancelSearchOperation(),\n+            createSearchFetchResultOperation());\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>, Mono<PhoneNumberSearch>> \n+        createSearchActivationOperation(CreateSearchOptions options) {\n+        return (pollingContext) -> {\n+            Mono<PhoneNumberSearch> response = createSearch(options).flatMap(createSearchResponse -> {\n+                String searchId = createSearchResponse.getSearchId();\n+                Mono<PhoneNumberSearch> phoneNumberSearch = getSearchById(searchId);\n+                return phoneNumberSearch;\n+            });\n+            return response;\n+        };\n+    }\n+\n+    private Function<PollingContext<PhoneNumberSearch>, \n+        Mono<PollResponse<PhoneNumberSearch>>> createSearchPollOperation() {\n+        return pollingContext ->\n+            getSearchById(pollingContext.getLatestResponse().getValue().getSearchId())\n+                .flatMap(getSearchResponse -> {\n+                    SearchStatus status = getSearchResponse.getStatus();\n+                    if (status.equals(SearchStatus.SUCCESS) || \n+                    status.equals(SearchStatus.EXPIRED) || \n+                    status.equals(SearchStatus.CANCELLED) || \n+                    status.equals(SearchStatus.RESERVED)) {\n+                        return Mono.just(new PollResponse<>(\n+                        LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, getSearchResponse));\n+                    }\n+                    if (status.equals(SearchStatus.ERROR)) {\n+                        return Mono.just(new PollResponse<>(\n+                        LongRunningOperationStatus.FAILED, getSearchResponse));\n+                    }\n+                    return Mono.just(new PollResponse<>(LongRunningOperationStatus.IN_PROGRESS, getSearchResponse));\n+                });\n+    }\n+\n+    private BiFunction<PollingContext<PhoneNumberSearch>,\n+        PollResponse<PhoneNumberSearch>,Mono<PhoneNumberSearch>> ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3af350d3fd8f0eb11ef650358f7d8cd38854c04"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MjMzMzI1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-504233325", "createdAt": "2020-10-07T20:16:58Z", "commit": {"oid": "e3af350d3fd8f0eb11ef650358f7d8cd38854c04"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoxNjo1OFrOHeD6qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoxNjo1OFrOHeD6qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4MzQ5OQ==", "bodyText": "why not just do a .getSyncPoller right here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r501283499", "createdAt": "2020-10-07T20:16:58Z", "author": {"login": "ankitarorabit"}, "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/PhoneNumberAsyncClientIntegrationTest.java", "diffHunk": "@@ -449,6 +452,29 @@ public void releasePhoneNumbersWithResponse() {\n             .verifyComplete();\n     }\n \n+    @Test()\n+    public void beginCreateSearch() {\n+        List<String> phonePlanIds = new ArrayList<>();\n+        phonePlanIds.add(PHONE_PLAN_ID);\n+\n+        CreateSearchOptions createSearchOptions = new CreateSearchOptions();\n+        createSearchOptions\n+            .setAreaCode(AREA_CODE_FOR_SEARCH)\n+            .setDescription(SEARCH_OPTIONS_DESCRIPTION)\n+            .setDisplayName(SEARCH_OPTIONS_NAME)\n+            .setPhonePlanIds(phonePlanIds)\n+            .setQuantity(2);\n+\n+        Duration duration = Duration.ofSeconds(1);\n+        PhoneNumberAsyncClient client = this.getClient();\n+        PollerFlux<PhoneNumberSearch, PhoneNumberSearch> res = client.beginCreateSearch(createSearchOptions, duration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3af350d3fd8f0eb11ef650358f7d8cd38854c04"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MjMzNTc5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-504233579", "createdAt": "2020-10-07T20:17:19Z", "commit": {"oid": "e3af350d3fd8f0eb11ef650358f7d8cd38854c04"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3af350d3fd8f0eb11ef650358f7d8cd38854c04", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e3af350d3fd8f0eb11ef650358f7d8cd38854c04", "committedDate": "2020-10-07T20:09:48Z", "message": "Cleaned poll operation"}, "afterCommit": {"oid": "29a7635d08d98c2b02068c25d099c810ffc66e71", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/29a7635d08d98c2b02068c25d099c810ffc66e71", "committedDate": "2020-10-07T20:25:32Z", "message": "Cleaned poll operation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0fdd1f75fbff831d915e6962ec8346678024cbdd", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0fdd1f75fbff831d915e6962ec8346678024cbdd", "committedDate": "2020-10-07T20:34:59Z", "message": "Removed SUCCESS as a terminal state"}, "afterCommit": {"oid": "faae145a6b80f3dae615e8e4f46ba6bd50681f32", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/faae145a6b80f3dae615e8e4f46ba6bd50681f32", "committedDate": "2020-10-07T20:37:15Z", "message": "Removed SUCCESS as a terminal state"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "faae145a6b80f3dae615e8e4f46ba6bd50681f32", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/faae145a6b80f3dae615e8e4f46ba6bd50681f32", "committedDate": "2020-10-07T20:37:15Z", "message": "Removed SUCCESS as a terminal state"}, "afterCommit": {"oid": "40e4e0671960a0c17547f94c3e459078b5ff0d88", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/40e4e0671960a0c17547f94c3e459078b5ff0d88", "committedDate": "2020-10-07T23:06:52Z", "message": "Removed SUCCESS as a terminal state"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MzM2ODcw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#pullrequestreview-504336870", "createdAt": "2020-10-07T23:32:12Z", "commit": {"oid": "faae145a6b80f3dae615e8e4f46ba6bd50681f32"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMzozMzoyOFrOHeJFfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMzozMzoyOFrOHeJFfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM2ODE5MQ==", "bodyText": "If you call \"getSyncPoller\", your test is sync. Might as well call the sync client version and move this test to the sync client test file instead.\nFor testing async version, you might want to test subscribe function of PollerFux with callback.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15998#discussion_r501368191", "createdAt": "2020-10-07T23:33:28Z", "author": {"login": "JianpingChen"}, "path": "sdk/communication/azure-communication-administration/src/test/java/com/azure/communication/administration/PhoneNumberAsyncClientIntegrationTest.java", "diffHunk": "@@ -463,6 +465,29 @@ public void releasePhoneNumbersWithResponse() {\n             .verifyComplete();\n     }\n \n+    @Test()\n+    public void beginCreateSearch() {\n+        List<String> phonePlanIds = new ArrayList<>();\n+        phonePlanIds.add(PHONE_PLAN_ID);\n+\n+        CreateSearchOptions createSearchOptions = new CreateSearchOptions();\n+        createSearchOptions\n+            .setAreaCode(AREA_CODE_FOR_SEARCH)\n+            .setDescription(SEARCH_OPTIONS_DESCRIPTION)\n+            .setDisplayName(SEARCH_OPTIONS_NAME)\n+            .setPhonePlanIds(phonePlanIds)\n+            .setQuantity(2);\n+\n+        Duration duration = Duration.ofSeconds(1);\n+        PhoneNumberAsyncClient client = this.getClient();\n+        SyncPoller<PhoneNumberSearch, PhoneNumberSearch> res = \n+            client.beginCreateSearch(createSearchOptions, duration).getSyncPoller();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40e4e0671960a0c17547f94c3e459078b5ff0d88"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eb7fd72d17f48f28aec1b00599504018aa3aec0", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9eb7fd72d17f48f28aec1b00599504018aa3aec0", "committedDate": "2020-10-08T20:29:56Z", "message": "Added create search LRO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb895c3b428e0e6544ec0df1d9515a28d0fae502", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/eb895c3b428e0e6544ec0df1d9515a28d0fae502", "committedDate": "2020-10-08T20:29:57Z", "message": "Addressed PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5b1bee022b028e035f32f931625305651239e16", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e5b1bee022b028e035f32f931625305651239e16", "committedDate": "2020-10-08T20:29:57Z", "message": "Addressed Ankit's comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e93f26e9a2b03b11e72a155eb68ac9fab8dc1b70", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e93f26e9a2b03b11e72a155eb68ac9fab8dc1b70", "committedDate": "2020-10-08T20:29:58Z", "message": "Cleaned poll operation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4808beeba5b9fa59ef77b64828959f96b3cfd176", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4808beeba5b9fa59ef77b64828959f96b3cfd176", "committedDate": "2020-10-08T20:29:59Z", "message": "Removed SUCCESS as a terminal state"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40e4e0671960a0c17547f94c3e459078b5ff0d88", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/40e4e0671960a0c17547f94c3e459078b5ff0d88", "committedDate": "2020-10-07T23:06:52Z", "message": "Removed SUCCESS as a terminal state"}, "afterCommit": {"oid": "e759547b73cbf07174c8af5f21fecbf9d6ad6742", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e759547b73cbf07174c8af5f21fecbf9d6ad6742", "committedDate": "2020-10-08T20:29:59Z", "message": "Test redone to use async responses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6176e0a9689e15a2545ac9dc775df4f5c3156903", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6176e0a9689e15a2545ac9dc775df4f5c3156903", "committedDate": "2020-10-08T20:33:19Z", "message": "Test redone to use async responses"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e759547b73cbf07174c8af5f21fecbf9d6ad6742", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e759547b73cbf07174c8af5f21fecbf9d6ad6742", "committedDate": "2020-10-08T20:29:59Z", "message": "Test redone to use async responses"}, "afterCommit": {"oid": "6176e0a9689e15a2545ac9dc775df4f5c3156903", "author": {"user": {"login": "jbeauregardb", "name": "Jorge Beauregard"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6176e0a9689e15a2545ac9dc775df4f5c3156903", "committedDate": "2020-10-08T20:33:19Z", "message": "Test redone to use async responses"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2264, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}