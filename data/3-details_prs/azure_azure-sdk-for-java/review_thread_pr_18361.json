{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NTU4OTc1", "number": 18361, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QyMzoyMjowNlrOFJZ7gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNTo0NDo1OFrOFJr3bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDA2MzM5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server/src/main/java/com/azure/spring/sample/aad/controller/HomeController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QyMzoyMjowNlrOILvBNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QyMzoyMjowNlrOILvBNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE3NTYwNw==", "bodyText": "To keep the same style, please use File.Read.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18361#discussion_r549175607", "createdAt": "2020-12-27T23:22:06Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server/src/main/java/com/azure/spring/sample/aad/controller/HomeController.java", "diffHunk": "@@ -16,14 +16,14 @@\n     @GetMapping(\"/file\")\n     @ResponseBody\n     @PreAuthorize(\"hasAuthority('SCOPE_File.read')\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0657c82f7179475638bfccf507d1242c8641c616"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDE3MDM2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMTozOTo0MVrOILvxng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMTozOTo0MVrOILvxng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE4Nzk5OA==", "bodyText": "we may change\n\"Under Manage In the same tenant\"\n--->\n\"Under Manage\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18361#discussion_r549187998", "createdAt": "2020-12-28T01:39:41Z", "author": {"login": "backwind1233"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server/README.md", "diffHunk": "@@ -3,109 +3,102 @@\n ## Key concepts\n This sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts only.\n \n-1. The bearer token is obtained from the request header. \n+1. The bearer token is obtained from the request header.\n 2. `JwtDecoder`  is used to parse the token into `Jwt`.\n-3. Claims, headers etc in `Jwt` will be extracted, they will be wrapped in `AzureOAuth2AuthenticatedPrincipal` object.\n-4. `AzureOAuth2AuthenticatedPrincipal` will eventually be set into SecurityContext.\n-\n+3. Verify `aud`, `iss`, `nbf`, `exp` in access token.\n+4. After successful verification, claims, headers etc in `Jwt` will be extracted, they will be wrapped in `AzureOAuth2AuthenticatedPrincipal` object.\n+5. `AzureOAuth2AuthenticatedPrincipal` will eventually be set into SecurityContext.\n \n ## Getting started\n-\n ### Environment checklist\n We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n \n-To run this sample, you'll need:\n-- An Azure Active Directory (Azure AD) tenant. For more information on how to get an Azure AD tenant, see [How to get an Azure AD tenant][How to get an Azure AD tenant]\n-- You register your web APP in App registrations in the Azure portal.\n-- A Web APP runtime that requires access to a Web API.\n-\n-\n-## Include the package\n-```xml\n-  <dependencies>\n-    <dependency>\n-      <groupId>com.azure.spring</groupId>\n-      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework.security</groupId>\n-      <artifactId>spring-security-oauth2-resource-server</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework.security</groupId>\n-      <artifactId>spring-security-oauth2-jose</artifactId>\n-    </dependency>\n-  </dependencies>\n-```\n-\n-## Register your web API\n-In this section, you register your web API in App registrations in the Azure portal.\n-    \n-### Choose your Azure AD tenant\n-\n-To register your apps manually, choose the Azure Active Directory (Azure AD) tenant where you want to create your apps.\n-\n-1. Sign in to the [Azure portal](https://portal.azure.com/) with either a work or school account or a personal Microsoft account.\n-2. If your account is present in more than one Azure AD tenant, select your profile at the upper right, and then select **Switch directory**.\n-3. Change your portal session to the Azure AD tenant you want to use.\n-\n-### Register the web API\n-\n-1. Go to the Microsoft identity platform for developers App registrations portal.\n+### Configure web api\n+1. Search for and select your tenant in **Azure Active Directory**.\n+2. Under Manage In the same tenant, select **App registrations** -> **New registration**.![Protal manage](docs/image-protal-manage.png \"Protal manage\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0657c82f7179475638bfccf507d1242c8641c616"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDE3MzYxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMTo0Mzo0OVrOILvzSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMTo0Mzo0OVrOILvzSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE4ODQyNQ==", "bodyText": "\"If you don't know web app at the moment, you can look at this [azure-spring-boot-sample-active-directory-webapp].\"\n--->\n\"If you are not familiar with web app , you can refer this [azure-spring-boot-sample-active-directory-webapp].\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18361#discussion_r549188425", "createdAt": "2020-12-28T01:43:49Z", "author": {"login": "backwind1233"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server/README.md", "diffHunk": "@@ -3,109 +3,102 @@\n ## Key concepts\n This sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts only.\n \n-1. The bearer token is obtained from the request header. \n+1. The bearer token is obtained from the request header.\n 2. `JwtDecoder`  is used to parse the token into `Jwt`.\n-3. Claims, headers etc in `Jwt` will be extracted, they will be wrapped in `AzureOAuth2AuthenticatedPrincipal` object.\n-4. `AzureOAuth2AuthenticatedPrincipal` will eventually be set into SecurityContext.\n-\n+3. Verify `aud`, `iss`, `nbf`, `exp` in access token.\n+4. After successful verification, claims, headers etc in `Jwt` will be extracted, they will be wrapped in `AzureOAuth2AuthenticatedPrincipal` object.\n+5. `AzureOAuth2AuthenticatedPrincipal` will eventually be set into SecurityContext.\n \n ## Getting started\n-\n ### Environment checklist\n We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n \n-To run this sample, you'll need:\n-- An Azure Active Directory (Azure AD) tenant. For more information on how to get an Azure AD tenant, see [How to get an Azure AD tenant][How to get an Azure AD tenant]\n-- You register your web APP in App registrations in the Azure portal.\n-- A Web APP runtime that requires access to a Web API.\n-\n-\n-## Include the package\n-```xml\n-  <dependencies>\n-    <dependency>\n-      <groupId>com.azure.spring</groupId>\n-      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework.security</groupId>\n-      <artifactId>spring-security-oauth2-resource-server</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework.security</groupId>\n-      <artifactId>spring-security-oauth2-jose</artifactId>\n-    </dependency>\n-  </dependencies>\n-```\n-\n-## Register your web API\n-In this section, you register your web API in App registrations in the Azure portal.\n-    \n-### Choose your Azure AD tenant\n-\n-To register your apps manually, choose the Azure Active Directory (Azure AD) tenant where you want to create your apps.\n-\n-1. Sign in to the [Azure portal](https://portal.azure.com/) with either a work or school account or a personal Microsoft account.\n-2. If your account is present in more than one Azure AD tenant, select your profile at the upper right, and then select **Switch directory**.\n-3. Change your portal session to the Azure AD tenant you want to use.\n-\n-### Register the web API\n-\n-1. Go to the Microsoft identity platform for developers App registrations portal.\n+### Configure web api\n+1. Search for and select your tenant in **Azure Active Directory**.\n+2. Under Manage In the same tenant, select **App registrations** -> **New registration**.![Protal manage](docs/image-protal-manage.png \"Protal manage\")\n+3. The registered application name is filled into `webapi`, select **Accounts in this organizational directory only**, click the **register** button.![Register a web api](docs/image-register-a-web-api.png \"Register a web api\")\n+4. Under **webapi** application, select **Certificates & secrets** -> **new client secret**, expires select **Never**, click the **add** button.(Remember to save the secrets here and use them later.)![Creat secrets](docs/image-creat-secrets-api.png \"Creat secrets\")\n+5. Under **webapi** application, select **Expose an API** -> **Add a scope**, Use the default Application ID URI, click **Save and continue** button.![Set application id url](docs/image-set-application-id-url.png \"Set application id url\")\n+6. After step five,the page will refresh again. Then set the **Scope name** to `File.read`.(This scope will be used in application.yml.)![Add a app id url](docs/image-add-a-scope.png \"Add a app id url\")\n+7. Finally, the api exposed in `webapi`.![Finally, the API exposed in webAPI](docs/image-expose-api.png \"Finally, the API exposed in webAPI\")\n \n-2. Select New registration.\n-    ![Select New registration](docs/image-select-new-registration.png \"Select new registration\")\n+See [Expose scoped permission to web api] for more information about web api.\n \n-3. When the Register an application page opens, enter your application's registration information:\n-    ![Scope Config](docs/image-register-an-application.png \"Register an application\")\n-    \n-4. In the **Expose an API** section, select **Add a scope**, accept the proposed Application ID URI `(api://{clientId})` (back up the Application ID URI here, which will be used in the properties file) by selecting **Save and Continue**.\n-   ![App-Id-Uri Config](docs/image-app-id-uri-config.png \"App-id-uri Config\")\n-   Then enter the following information:\n-   - For **Scope name**, enter **File.read**.\n-   - For **Who can consent**, ensure that the **Admins and users** option is selected.\n-   - In the **Admin consent display name** box, enter **Access File.read as a user**.\n-   - In the **Admin consent description** box, enter **Accesses the File.read web API as a user**.\n-   - In the **User consent display name** box, enter **Access File.read as a user**.\n-   - In the **User consent description** box, enter **Accesses the File.read web API as a user**.\n-   - For **State**, keep **Enabled**.\n-   - Select **Add scope**.\n-   ![Scope Config](docs/image-scope-configurations.png \"Scope Config\")\n+### Configure web app\n+If you don't know web app at the moment, you can look at this [azure-spring-boot-sample-active-directory-webapp].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0657c82f7179475638bfccf507d1242c8641c616"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDE3NDA1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMTo0NDoyOFrOILvzfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMTo0NDoyOFrOILvzfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE4ODQ3Ng==", "bodyText": "At this point, I believe you have understood the web app, so let's continue!\nI think we can delete this sentence.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18361#discussion_r549188476", "createdAt": "2020-12-28T01:44:28Z", "author": {"login": "backwind1233"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server/README.md", "diffHunk": "@@ -3,109 +3,102 @@\n ## Key concepts\n This sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts only.\n \n-1. The bearer token is obtained from the request header. \n+1. The bearer token is obtained from the request header.\n 2. `JwtDecoder`  is used to parse the token into `Jwt`.\n-3. Claims, headers etc in `Jwt` will be extracted, they will be wrapped in `AzureOAuth2AuthenticatedPrincipal` object.\n-4. `AzureOAuth2AuthenticatedPrincipal` will eventually be set into SecurityContext.\n-\n+3. Verify `aud`, `iss`, `nbf`, `exp` in access token.\n+4. After successful verification, claims, headers etc in `Jwt` will be extracted, they will be wrapped in `AzureOAuth2AuthenticatedPrincipal` object.\n+5. `AzureOAuth2AuthenticatedPrincipal` will eventually be set into SecurityContext.\n \n ## Getting started\n-\n ### Environment checklist\n We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n \n-To run this sample, you'll need:\n-- An Azure Active Directory (Azure AD) tenant. For more information on how to get an Azure AD tenant, see [How to get an Azure AD tenant][How to get an Azure AD tenant]\n-- You register your web APP in App registrations in the Azure portal.\n-- A Web APP runtime that requires access to a Web API.\n-\n-\n-## Include the package\n-```xml\n-  <dependencies>\n-    <dependency>\n-      <groupId>com.azure.spring</groupId>\n-      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework.security</groupId>\n-      <artifactId>spring-security-oauth2-resource-server</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework.security</groupId>\n-      <artifactId>spring-security-oauth2-jose</artifactId>\n-    </dependency>\n-  </dependencies>\n-```\n-\n-## Register your web API\n-In this section, you register your web API in App registrations in the Azure portal.\n-    \n-### Choose your Azure AD tenant\n-\n-To register your apps manually, choose the Azure Active Directory (Azure AD) tenant where you want to create your apps.\n-\n-1. Sign in to the [Azure portal](https://portal.azure.com/) with either a work or school account or a personal Microsoft account.\n-2. If your account is present in more than one Azure AD tenant, select your profile at the upper right, and then select **Switch directory**.\n-3. Change your portal session to the Azure AD tenant you want to use.\n-\n-### Register the web API\n-\n-1. Go to the Microsoft identity platform for developers App registrations portal.\n+### Configure web api\n+1. Search for and select your tenant in **Azure Active Directory**.\n+2. Under Manage In the same tenant, select **App registrations** -> **New registration**.![Protal manage](docs/image-protal-manage.png \"Protal manage\")\n+3. The registered application name is filled into `webapi`, select **Accounts in this organizational directory only**, click the **register** button.![Register a web api](docs/image-register-a-web-api.png \"Register a web api\")\n+4. Under **webapi** application, select **Certificates & secrets** -> **new client secret**, expires select **Never**, click the **add** button.(Remember to save the secrets here and use them later.)![Creat secrets](docs/image-creat-secrets-api.png \"Creat secrets\")\n+5. Under **webapi** application, select **Expose an API** -> **Add a scope**, Use the default Application ID URI, click **Save and continue** button.![Set application id url](docs/image-set-application-id-url.png \"Set application id url\")\n+6. After step five,the page will refresh again. Then set the **Scope name** to `File.read`.(This scope will be used in application.yml.)![Add a app id url](docs/image-add-a-scope.png \"Add a app id url\")\n+7. Finally, the api exposed in `webapi`.![Finally, the API exposed in webAPI](docs/image-expose-api.png \"Finally, the API exposed in webAPI\")\n \n-2. Select New registration.\n-    ![Select New registration](docs/image-select-new-registration.png \"Select new registration\")\n+See [Expose scoped permission to web api] for more information about web api.\n \n-3. When the Register an application page opens, enter your application's registration information:\n-    ![Scope Config](docs/image-register-an-application.png \"Register an application\")\n-    \n-4. In the **Expose an API** section, select **Add a scope**, accept the proposed Application ID URI `(api://{clientId})` (back up the Application ID URI here, which will be used in the properties file) by selecting **Save and Continue**.\n-   ![App-Id-Uri Config](docs/image-app-id-uri-config.png \"App-id-uri Config\")\n-   Then enter the following information:\n-   - For **Scope name**, enter **File.read**.\n-   - For **Who can consent**, ensure that the **Admins and users** option is selected.\n-   - In the **Admin consent display name** box, enter **Access File.read as a user**.\n-   - In the **Admin consent description** box, enter **Accesses the File.read web API as a user**.\n-   - In the **User consent display name** box, enter **Access File.read as a user**.\n-   - In the **User consent description** box, enter **Accesses the File.read web API as a user**.\n-   - For **State**, keep **Enabled**.\n-   - Select **Add scope**.\n-   ![Scope Config](docs/image-scope-configurations.png \"Scope Config\")\n+### Configure web app\n+If you don't know web app at the moment, you can look at this [azure-spring-boot-sample-active-directory-webapp].\n+At this point, I believe you have understood the web app, so let's continue!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0657c82f7179475638bfccf507d1242c8641c616"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDE3Nzc0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMTo0NzoxM1rOILv1LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMTo0NzoxM1rOILv1LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE4ODkwOQ==", "bodyText": "\"Here code is just an example, let you understand the process.\"\n-->\n\"The code here is just an example to show the process\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18361#discussion_r549188909", "createdAt": "2020-12-28T01:47:13Z", "author": {"login": "backwind1233"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server/README.md", "diffHunk": "@@ -3,109 +3,102 @@\n ## Key concepts\n This sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts only.\n \n-1. The bearer token is obtained from the request header. \n+1. The bearer token is obtained from the request header.\n 2. `JwtDecoder`  is used to parse the token into `Jwt`.\n-3. Claims, headers etc in `Jwt` will be extracted, they will be wrapped in `AzureOAuth2AuthenticatedPrincipal` object.\n-4. `AzureOAuth2AuthenticatedPrincipal` will eventually be set into SecurityContext.\n-\n+3. Verify `aud`, `iss`, `nbf`, `exp` in access token.\n+4. After successful verification, claims, headers etc in `Jwt` will be extracted, they will be wrapped in `AzureOAuth2AuthenticatedPrincipal` object.\n+5. `AzureOAuth2AuthenticatedPrincipal` will eventually be set into SecurityContext.\n \n ## Getting started\n-\n ### Environment checklist\n We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n \n-To run this sample, you'll need:\n-- An Azure Active Directory (Azure AD) tenant. For more information on how to get an Azure AD tenant, see [How to get an Azure AD tenant][How to get an Azure AD tenant]\n-- You register your web APP in App registrations in the Azure portal.\n-- A Web APP runtime that requires access to a Web API.\n-\n-\n-## Include the package\n-```xml\n-  <dependencies>\n-    <dependency>\n-      <groupId>com.azure.spring</groupId>\n-      <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework.security</groupId>\n-      <artifactId>spring-security-oauth2-resource-server</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework.security</groupId>\n-      <artifactId>spring-security-oauth2-jose</artifactId>\n-    </dependency>\n-  </dependencies>\n-```\n-\n-## Register your web API\n-In this section, you register your web API in App registrations in the Azure portal.\n-    \n-### Choose your Azure AD tenant\n-\n-To register your apps manually, choose the Azure Active Directory (Azure AD) tenant where you want to create your apps.\n-\n-1. Sign in to the [Azure portal](https://portal.azure.com/) with either a work or school account or a personal Microsoft account.\n-2. If your account is present in more than one Azure AD tenant, select your profile at the upper right, and then select **Switch directory**.\n-3. Change your portal session to the Azure AD tenant you want to use.\n-\n-### Register the web API\n-\n-1. Go to the Microsoft identity platform for developers App registrations portal.\n+### Configure web api\n+1. Search for and select your tenant in **Azure Active Directory**.\n+2. Under Manage In the same tenant, select **App registrations** -> **New registration**.![Protal manage](docs/image-protal-manage.png \"Protal manage\")\n+3. The registered application name is filled into `webapi`, select **Accounts in this organizational directory only**, click the **register** button.![Register a web api](docs/image-register-a-web-api.png \"Register a web api\")\n+4. Under **webapi** application, select **Certificates & secrets** -> **new client secret**, expires select **Never**, click the **add** button.(Remember to save the secrets here and use them later.)![Creat secrets](docs/image-creat-secrets-api.png \"Creat secrets\")\n+5. Under **webapi** application, select **Expose an API** -> **Add a scope**, Use the default Application ID URI, click **Save and continue** button.![Set application id url](docs/image-set-application-id-url.png \"Set application id url\")\n+6. After step five,the page will refresh again. Then set the **Scope name** to `File.read`.(This scope will be used in application.yml.)![Add a app id url](docs/image-add-a-scope.png \"Add a app id url\")\n+7. Finally, the api exposed in `webapi`.![Finally, the API exposed in webAPI](docs/image-expose-api.png \"Finally, the API exposed in webAPI\")\n \n-2. Select New registration.\n-    ![Select New registration](docs/image-select-new-registration.png \"Select new registration\")\n+See [Expose scoped permission to web api] for more information about web api.\n \n-3. When the Register an application page opens, enter your application's registration information:\n-    ![Scope Config](docs/image-register-an-application.png \"Register an application\")\n-    \n-4. In the **Expose an API** section, select **Add a scope**, accept the proposed Application ID URI `(api://{clientId})` (back up the Application ID URI here, which will be used in the properties file) by selecting **Save and Continue**.\n-   ![App-Id-Uri Config](docs/image-app-id-uri-config.png \"App-id-uri Config\")\n-   Then enter the following information:\n-   - For **Scope name**, enter **File.read**.\n-   - For **Who can consent**, ensure that the **Admins and users** option is selected.\n-   - In the **Admin consent display name** box, enter **Access File.read as a user**.\n-   - In the **Admin consent description** box, enter **Accesses the File.read web API as a user**.\n-   - In the **User consent display name** box, enter **Access File.read as a user**.\n-   - In the **User consent description** box, enter **Accesses the File.read web API as a user**.\n-   - For **State**, keep **Enabled**.\n-   - Select **Add scope**.\n-   ![Scope Config](docs/image-scope-configurations.png \"Scope Config\")\n+### Configure web app\n+If you don't know web app at the moment, you can look at this [azure-spring-boot-sample-active-directory-webapp].\n+At this point, I believe you have understood the web app, so let's continue!\n+1. Add custom apis in the `webapi` to `webapp`.\n+2. Under **webapp** application, select **API permissions** -> **Add a permission** -> **My APIS**, select **webapi** tab, add **File.read** permission,click **Add permissions** button.![Add custom apis to webapp](docs/image-add-custom-apis-to-webapp.png \"Add custom apis to webapp\")\n+3. click **Grant admin consent for...**.![Grant permission](docs/image-granted-permission.png \"Grant permission\")\n+4. Manually remove the admin consent for **user_impersonation**.(Ensure that the authorization in `webapp` is not changed.)![Final configuration](docs/image-final.png \"Final configuration\")\n \n-If you still don't understand, you can look at this [register app or web api][Register app or web API] and another [expose scoped permission to web api][Expose scoped permission to web API]. I believe it will also help you.\n+See [Configure a client application to access a web api] for more information about web app.\n \n ## Examples\n-\n-### Configure application.properties\n-\n-```properties\n-azure.activedirectory.client-id=xxxxxx-your-client-id-xxxxxx\n-azure.activedirectory.app-id-uri=xxxxxxxx-app-id-uri-xxxxxxxxxx\n-azure.activedirectory.session-stateless=true\n+### Configure application.yml\n+\n+Add the following to appapplication.yml in webapp.\n+```yaml\n+azure:\n+  activedirectory:\n+    authorization:\n+      webapi:\n+        scopes: api://xxxxx-xxxxxxx-xxxxxxx/File.read\n+  ```\n+\n+Modify application.yml in webapi.\n+```yaml\n+#If we configure the azure.activedirectory.client-id or azure.activedirectory.app-id-uri will be to check the audience.\n+#In v2.0 tokens, this is always client id of the app, while in v1.0 tokens it can be the client id or the application id url used in the request.\n+#If you are using v1.0 tokens, configure both to properly complete the audience validation.\n+\n+azure:\n+  activedirectory:\n+    client-id: <client-id>\n+    app-id-uri: <app-id-uri>\n+```\n+**NOTE**\uff1aSet the `server.port` in the application.yml of `webapp` and `webapi` to different value.\n+\n+### Add code\n+Add code(Here code is just an example, let you understand the process.) to webapp's `ClientController.java`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0657c82f7179475638bfccf507d1242c8641c616"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzAwMjA2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNTo0NDo1OFrOIMHdQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNTo1NDowMVrOIMHjIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU3NjAwMQ==", "bodyText": "We've changed this class's name.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18361#discussion_r549576001", "createdAt": "2020-12-29T05:44:58Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server/README.md", "diffHunk": "@@ -3,26 +3,19 @@\n ## Key concepts\n This sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts only.\n \n-1. The bearer token is obtained from the request header. \n+1. The bearer token is obtained from the request header.\n 2. `JwtDecoder`  is used to parse the token into `Jwt`.\n-3. Claims, headers etc in `Jwt` will be extracted, they will be wrapped in `AzureOAuth2AuthenticatedPrincipal` object.\n-4. `AzureOAuth2AuthenticatedPrincipal` will eventually be set into SecurityContext.\n-\n+3. Verify `aud`, `iss`, `nbf`, `exp` in access token.\n+4. After successful verification, claims, headers etc in `Jwt` will be extracted, they will be wrapped in `AzureOAuth2AuthenticatedPrincipal` object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6c9eddaa408f57bcd4a825bb2dd19d79b9876b3"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU3NjY2NA==", "bodyText": "How about change this sentence to Extract information from JWT in xxx object after a successful verification ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18361#discussion_r549576664", "createdAt": "2020-12-29T05:48:32Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server/README.md", "diffHunk": "@@ -3,26 +3,19 @@\n ## Key concepts\n This sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts only.\n \n-1. The bearer token is obtained from the request header. \n+1. The bearer token is obtained from the request header.\n 2. `JwtDecoder`  is used to parse the token into `Jwt`.\n-3. Claims, headers etc in `Jwt` will be extracted, they will be wrapped in `AzureOAuth2AuthenticatedPrincipal` object.\n-4. `AzureOAuth2AuthenticatedPrincipal` will eventually be set into SecurityContext.\n-\n+3. Verify `aud`, `iss`, `nbf`, `exp` in access token.\n+4. After successful verification, claims, headers etc in `Jwt` will be extracted, they will be wrapped in `AzureOAuth2AuthenticatedPrincipal` object.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU3NjAwMQ=="}, "originalCommit": {"oid": "b6c9eddaa408f57bcd4a825bb2dd19d79b9876b3"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU3NzUwNg==", "bodyText": "I've updated these directly. Resolve this conversation now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18361#discussion_r549577506", "createdAt": "2020-12-29T05:54:01Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server/README.md", "diffHunk": "@@ -3,26 +3,19 @@\n ## Key concepts\n This sample illustrates how to protect a Java web API by restricting access to its resources to authorized accounts only.\n \n-1. The bearer token is obtained from the request header. \n+1. The bearer token is obtained from the request header.\n 2. `JwtDecoder`  is used to parse the token into `Jwt`.\n-3. Claims, headers etc in `Jwt` will be extracted, they will be wrapped in `AzureOAuth2AuthenticatedPrincipal` object.\n-4. `AzureOAuth2AuthenticatedPrincipal` will eventually be set into SecurityContext.\n-\n+3. Verify `aud`, `iss`, `nbf`, `exp` in access token.\n+4. After successful verification, claims, headers etc in `Jwt` will be extracted, they will be wrapped in `AzureOAuth2AuthenticatedPrincipal` object.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU3NjAwMQ=="}, "originalCommit": {"oid": "b6c9eddaa408f57bcd4a825bb2dd19d79b9876b3"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2529, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}