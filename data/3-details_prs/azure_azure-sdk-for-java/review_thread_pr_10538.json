{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5Nzg2OTg0", "number": 10538, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMjo1NTo0N1rOD2_dPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODo0OTowN1rOD3wazA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTg5MzczOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMjo1NTo0N1rOGNAQyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMjo1NTo0N1rOGNAQyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI4ODk2OA==", "bodyText": "Do you have a test case for the exception scenario where there are too many events", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416288968", "createdAt": "2020-04-28T02:55:47Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -282,6 +283,39 @@ void sendMultipleMessages() {\n         messagesSent.forEach(message -> Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType()));\n     }\n \n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf243e9d87dd90d583c925577ea129bc7c25dae"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTg5NjgyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMjo1Njo1M1rOGNASZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMjo1Njo1M1rOGNASZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI4OTM4MQ==", "bodyText": "Why are you chaining.then()? The send operation already returns a mono void.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416289381", "createdAt": "2020-04-28T02:56:53Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -135,6 +135,26 @@ public String getEntityPath() {\n         return sendInternal(Flux.just(message));\n     }\n \n+    /**\n+     * Sends a list of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n+     * exceed the maximum size of a single batch, an exception will be triggered and the send will fail.\n+     * By default, the message size is the max amount allowed on the link.\n+     *\n+     * @param messages Messages to be sent to Service Bus queue or topic.\n+     *\n+     * @return The {@link Mono} the finishes this operation on service bus resource.\n+     *\n+     * @throws NullPointerException if {@code messages} is {@code null}.\n+     */\n+    public Mono<Void> send(Iterable<ServiceBusMessage> messages) {\n+        Objects.requireNonNull(messages, \"'messages' cannot be null.\");\n+\n+        return createBatch().flatMap(messageBatch -> {\n+            messages.forEach(serviceBusMessage -> messageBatch.tryAdd(serviceBusMessage));\n+            return send(messageBatch);\n+        }).then();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf243e9d87dd90d583c925577ea129bc7c25dae"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTkwMDM5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMjo1ODozNFrOGNAUdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjoxODozNlrOGNEWcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI4OTkwOQ==", "bodyText": "Why not varargs instead of iterable. I don't remember this in an API view, so I'm curious.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416289909", "createdAt": "2020-04-28T02:58:34Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -135,6 +135,26 @@ public String getEntityPath() {\n         return sendInternal(Flux.just(message));\n     }\n \n+    /**\n+     * Sends a list of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n+     * exceed the maximum size of a single batch, an exception will be triggered and the send will fail.\n+     * By default, the message size is the max amount allowed on the link.\n+     *\n+     * @param messages Messages to be sent to Service Bus queue or topic.\n+     *\n+     * @return The {@link Mono} the finishes this operation on service bus resource.\n+     *\n+     * @throws NullPointerException if {@code messages} is {@code null}.\n+     */\n+    public Mono<Void> send(Iterable<ServiceBusMessage> messages) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf243e9d87dd90d583c925577ea129bc7c25dae"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM1NTk1Mg==", "bodyText": "Changed to vargs : This was added by Ramya in last week , I did not had it in API View, We should add just it in API View.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416355952", "createdAt": "2020-04-28T06:18:36Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -135,6 +135,26 @@ public String getEntityPath() {\n         return sendInternal(Flux.just(message));\n     }\n \n+    /**\n+     * Sends a list of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n+     * exceed the maximum size of a single batch, an exception will be triggered and the send will fail.\n+     * By default, the message size is the max amount allowed on the link.\n+     *\n+     * @param messages Messages to be sent to Service Bus queue or topic.\n+     *\n+     * @return The {@link Mono} the finishes this operation on service bus resource.\n+     *\n+     * @throws NullPointerException if {@code messages} is {@code null}.\n+     */\n+    public Mono<Void> send(Iterable<ServiceBusMessage> messages) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI4OTkwOQ=="}, "originalCommit": {"oid": "acf243e9d87dd90d583c925577ea129bc7c25dae"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTkwMzg0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzowMDoxMlrOGNAWag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzowMDoxMlrOGNAWag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MDQxMA==", "bodyText": "Why the assertion here? It's not testing our code", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416290410", "createdAt": "2020-04-28T03:00:12Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java", "diffHunk": "@@ -144,6 +150,39 @@ void createsMessageBatchWithSize() {\n         Assertions.assertEquals(batch, messageBatch);\n     }\n \n+    /**\n+     * Verifies that sending a single message will result in calling sender.send(Message).\n+     */\n+    @Test\n+    void sendMessageList() {\n+        // Arrange\n+        final int count = 4;\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final List<ServiceBusMessage> messageList = new ArrayList<>();\n+\n+        IntStream.range(0, count).forEach(index -> {\n+            final ServiceBusMessage message = new ServiceBusMessage(contents);\n+            Assertions.assertTrue(messageList.add(message));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf243e9d87dd90d583c925577ea129bc7c25dae"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTkwNjQ3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzowMToxM1rOGNAX0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzowMToxM1rOGNAX0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MDc3MQ==", "bodyText": "Does message need to be fully qualified", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416290771", "createdAt": "2020-04-28T03:01:13Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -282,6 +283,39 @@ void sendMultipleMessages() {\n         messagesSent.forEach(message -> Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType()));\n     }\n \n+    /**\n+     * Verifies that sending multiple message will result in calling sender.send(Iterator).\n+     */\n+    @Test\n+    void sendMessagesList() {\n+        // Arrange\n+        final int count = 4;\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final List<ServiceBusMessage> messageList = new ArrayList<>();\n+\n+        IntStream.range(0, count).forEach(index -> {\n+            final ServiceBusMessage message = new ServiceBusMessage(contents);\n+            Assertions.assertTrue(messageList.add(message));\n+        });\n+\n+        when(connection.createSendLink(eq(ENTITY_NAME), eq(ENTITY_NAME), eq(retryOptions)))\n+            .thenReturn(Mono.just(sendLink));\n+        when(sendLink.send(any(Message.class))).thenReturn(Mono.empty());\n+        when(sendLink.send(anyList())).thenReturn(Mono.empty());\n+\n+        // Act\n+        StepVerifier.create(sender.send(messageList))\n+            .verifyComplete();\n+\n+        // Assert\n+        verify(sendLink).send(messagesCaptor.capture());\n+\n+        final List<org.apache.qpid.proton.message.Message> messagesSent = messagesCaptor.getValue();\n+        Assertions.assertEquals(count, messagesSent.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf243e9d87dd90d583c925577ea129bc7c25dae"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTkwNzQ3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzowMToyOFrOGNAYTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzowMToyOFrOGNAYTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MDg5NA==", "bodyText": "Why an assertion here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416290894", "createdAt": "2020-04-28T03:01:28Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -282,6 +283,39 @@ void sendMultipleMessages() {\n         messagesSent.forEach(message -> Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType()));\n     }\n \n+    /**\n+     * Verifies that sending multiple message will result in calling sender.send(Iterator).\n+     */\n+    @Test\n+    void sendMessagesList() {\n+        // Arrange\n+        final int count = 4;\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final List<ServiceBusMessage> messageList = new ArrayList<>();\n+\n+        IntStream.range(0, count).forEach(index -> {\n+            final ServiceBusMessage message = new ServiceBusMessage(contents);\n+            Assertions.assertTrue(messageList.add(message));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf243e9d87dd90d583c925577ea129bc7c25dae"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Mzk4OTI1OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxMDozNFrOGNnEoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxMDozNFrOGNnEoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNDgzMw==", "bodyText": "This return doesn't make sense.\n\"A Mono that completes when all messages have been sent to the Service Bus resource.\"", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416924833", "createdAt": "2020-04-28T21:10:34Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -136,21 +137,23 @@ public String getEntityPath() {\n     }\n \n     /**\n-     * Sends a message to a Service Bus queue or topic.\n+     * Sends an array of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n+     * exceed the maximum size of a single batch, an exception will be triggered and the send will fail.\n+     * By default, the message size is the max amount allowed on the link.\n      *\n-     * @param message Message to be sent to Service Bus queue or topic.\n-     * @param sessionId the session id to associate with the message.\n+     * @param messages Messages to be sent to Service Bus queue or topic.\n      *\n-     * @return A {@link Mono} the finishes this operation on service bus resource.\n+     * @return The {@link Mono} the finishes this operation on service bus resource.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7b044122d7e43738b789267c219219264d4765f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Mzk5MTMwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxMTowNFrOGNnFuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxMTowNFrOGNnFuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNTExMg==", "bodyText": "You have to indicate what exception is thrown when the payload exceeds the size of a single batch.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416925112", "createdAt": "2020-04-28T21:11:04Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -136,21 +137,23 @@ public String getEntityPath() {\n     }\n \n     /**\n-     * Sends a message to a Service Bus queue or topic.\n+     * Sends an array of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n+     * exceed the maximum size of a single batch, an exception will be triggered and the send will fail.\n+     * By default, the message size is the max amount allowed on the link.\n      *\n-     * @param message Message to be sent to Service Bus queue or topic.\n-     * @param sessionId the session id to associate with the message.\n+     * @param messages Messages to be sent to Service Bus queue or topic.\n      *\n-     * @return A {@link Mono} the finishes this operation on service bus resource.\n+     * @return The {@link Mono} the finishes this operation on service bus resource.\n      *\n-     * @throws NullPointerException if {@code message} or {@code sessionId} is {@code null}.\n+     * @throws NullPointerException if {@code messages} is {@code null}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7b044122d7e43738b789267c219219264d4765f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Mzk5NTg4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxMjoxNVrOGNnIXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxMjoxNVrOGNnIXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNTc4OQ==", "bodyText": "Why wrap this with a stream when you can use a for loop?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416925789", "createdAt": "2020-04-28T21:12:15Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -136,21 +137,23 @@ public String getEntityPath() {\n     }\n \n     /**\n-     * Sends a message to a Service Bus queue or topic.\n+     * Sends an array of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n+     * exceed the maximum size of a single batch, an exception will be triggered and the send will fail.\n+     * By default, the message size is the max amount allowed on the link.\n      *\n-     * @param message Message to be sent to Service Bus queue or topic.\n-     * @param sessionId the session id to associate with the message.\n+     * @param messages Messages to be sent to Service Bus queue or topic.\n      *\n-     * @return A {@link Mono} the finishes this operation on service bus resource.\n+     * @return The {@link Mono} the finishes this operation on service bus resource.\n      *\n-     * @throws NullPointerException if {@code message} or {@code sessionId} is {@code null}.\n+     * @throws NullPointerException if {@code messages} is {@code null}.\n      */\n-    public Mono<Void> send(ServiceBusMessage message, String sessionId) {\n-        Objects.requireNonNull(message, \"'message' cannot be null.\");\n-        Objects.requireNonNull(sessionId, \"'sessionId' cannot be null.\");\n+    public Mono<Void> send(ServiceBusMessage... messages) {\n+        Objects.requireNonNull(messages, \"'messages' cannot be null.\");\n \n-        //TODO (hemanttanwar): Implement session id feature.\n-        return Mono.error(new IllegalStateException(\"Not implemented.\"));\n+        return createBatch().flatMap(messageBatch -> {\n+            Stream.of(messages).forEach(serviceBusMessage -> messageBatch.tryAdd(serviceBusMessage));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7b044122d7e43738b789267c219219264d4765f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Mzk5ODMwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxMjo0N1rOGNnJpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxMjo0N1rOGNnJpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNjExOA==", "bodyText": "Specify the error that is thrown when the messages are too large for a single batch.\n@throws ...", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416926118", "createdAt": "2020-04-28T21:12:47Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java", "diffHunk": "@@ -71,6 +71,19 @@ public void send(ServiceBusMessage message) {\n         asyncClient.send(message).block(tryTimeout);\n     }\n \n+    /**\n+     * Sends an array of {@link ServiceBusMessage} to a Service Bus queue or topic using a batched approach.\n+     * If the size of messages exceed the maximum size of a single batch, an exception will be triggered and the send\n+     * will fail. By default, the message size is the max amount allowed on the link.\n+     *\n+     * @param messages Messages to be sent to Service Bus queue or topic.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7b044122d7e43738b789267c219219264d4765f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDAwNDE3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxNDoyMVrOGNnM-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxNDoyMVrOGNnM-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNjk3MQ==", "bodyText": "there is also never() => times(0)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416926971", "createdAt": "2020-04-28T21:14:21Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -282,6 +285,65 @@ void sendMultipleMessages() {\n         messagesSent.forEach(message -> Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType()));\n     }\n \n+    /**\n+     * Verifies that sending multiple message will result in calling sender.send(Message...).\n+     */\n+    @Test\n+    void sendMessagesList() {\n+        // Arrange\n+        final int count = 4;\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n+\n+        IntStream.range(0, count).forEach(index -> {\n+            messages[index] = new ServiceBusMessage(contents).setMessageId(UUID.randomUUID().toString());\n+        });\n+\n+        when(connection.createSendLink(eq(ENTITY_NAME), eq(ENTITY_NAME), eq(retryOptions)))\n+            .thenReturn(Mono.just(sendLink));\n+        when(sendLink.send(any(Message.class))).thenReturn(Mono.empty());\n+        when(sendLink.send(anyList())).thenReturn(Mono.empty());\n+\n+        // Act\n+        StepVerifier.create(sender.send(messages))\n+            .verifyComplete();\n+\n+        // Assert\n+        verify(sendLink).send(messagesCaptor.capture());\n+\n+        final List<Message> messagesSent = messagesCaptor.getValue();\n+        Assertions.assertEquals(count, messagesSent.size());\n+\n+        messagesSent.forEach(message -> Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType()));\n+    }\n+\n+    /**\n+     * Verifies that sending multiple message will result in calling sender.send(Iterator).\n+     */\n+    @Test\n+    void sendMessagesListExceedSize() {\n+        // Arrange\n+        final int count = 4;\n+        final Mono<Integer> linkMaxSize = Mono.just(1);\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n+\n+        IntStream.range(0, count).forEach(index -> {\n+            messages[index] = new ServiceBusMessage(contents).setMessageId(UUID.randomUUID().toString());\n+        });\n+\n+        when(connection.createSendLink(eq(ENTITY_NAME), eq(ENTITY_NAME), eq(retryOptions)))\n+            .thenReturn(Mono.just(sendLink));\n+        when(sendLink.getLinkSize()).thenReturn(linkMaxSize);\n+\n+        // Act & Assert\n+        StepVerifier.create(sender.send(messages))\n+            .verifyErrorMatches(error -> error instanceof AmqpException\n+                && ((AmqpException) error).getErrorCondition() == AmqpErrorCondition.LINK_PAYLOAD_SIZE_EXCEEDED);\n+\n+        verify(sendLink, times(0)).send(anyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7b044122d7e43738b789267c219219264d4765f"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDAwNzYwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxNToyMlrOGNnO-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxNzoxOVrOGNnTAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNzQ4MQ==", "bodyText": "Why not for (int i = 0; i < messages.length; i++)? I don't see any added benefit creating this IntStream.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416927481", "createdAt": "2020-04-28T21:15:22Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java", "diffHunk": "@@ -144,6 +150,38 @@ void createsMessageBatchWithSize() {\n         Assertions.assertEquals(batch, messageBatch);\n     }\n \n+    /**\n+     * Verifies that sending an array of message will result in calling sender.send(Message...).\n+     */\n+    @Test\n+    void sendMessageList() {\n+        // Arrange\n+        final int count = 4;\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n+\n+        IntStream.range(0, count).forEach(index -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7b044122d7e43738b789267c219219264d4765f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyODUxMw==", "bodyText": "There's a helper method that does all this: TestUtils.getServiceBusMessages(3, id).toArray()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416928513", "createdAt": "2020-04-28T21:17:19Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java", "diffHunk": "@@ -144,6 +150,38 @@ void createsMessageBatchWithSize() {\n         Assertions.assertEquals(batch, messageBatch);\n     }\n \n+    /**\n+     * Verifies that sending an array of message will result in calling sender.send(Message...).\n+     */\n+    @Test\n+    void sendMessageList() {\n+        // Arrange\n+        final int count = 4;\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n+\n+        IntStream.range(0, count).forEach(index -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNzQ4MQ=="}, "originalCommit": {"oid": "e7b044122d7e43738b789267c219219264d4765f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDAxMDM2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxNjoxMFrOGNnQjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxNjoxMFrOGNnQjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNzg4Ng==", "bodyText": "Why not for (int i = 0; i < messages.length; i++)? I don't see any added benefit creating this IntStream.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416927886", "createdAt": "2020-04-28T21:16:10Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -282,6 +285,65 @@ void sendMultipleMessages() {\n         messagesSent.forEach(message -> Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType()));\n     }\n \n+    /**\n+     * Verifies that sending multiple message will result in calling sender.send(Message...).\n+     */\n+    @Test\n+    void sendMessagesList() {\n+        // Arrange\n+        final int count = 4;\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n+\n+        IntStream.range(0, count).forEach(index -> {\n+            messages[index] = new ServiceBusMessage(contents).setMessageId(UUID.randomUUID().toString());\n+        });\n+\n+        when(connection.createSendLink(eq(ENTITY_NAME), eq(ENTITY_NAME), eq(retryOptions)))\n+            .thenReturn(Mono.just(sendLink));\n+        when(sendLink.send(any(Message.class))).thenReturn(Mono.empty());\n+        when(sendLink.send(anyList())).thenReturn(Mono.empty());\n+\n+        // Act\n+        StepVerifier.create(sender.send(messages))\n+            .verifyComplete();\n+\n+        // Assert\n+        verify(sendLink).send(messagesCaptor.capture());\n+\n+        final List<Message> messagesSent = messagesCaptor.getValue();\n+        Assertions.assertEquals(count, messagesSent.size());\n+\n+        messagesSent.forEach(message -> Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType()));\n+    }\n+\n+    /**\n+     * Verifies that sending multiple message will result in calling sender.send(Iterator).\n+     */\n+    @Test\n+    void sendMessagesListExceedSize() {\n+        // Arrange\n+        final int count = 4;\n+        final Mono<Integer> linkMaxSize = Mono.just(1);\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n+\n+        IntStream.range(0, count).forEach(index -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7b044122d7e43738b789267c219219264d4765f"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDAxMDk2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxNjoxOFrOGNnQ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxNjoxOFrOGNnQ5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNzk3NQ==", "bodyText": "Why not for (int i = 0; i < messages.length; i++)? I don't see any added benefit creating this IntStream.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416927975", "createdAt": "2020-04-28T21:16:18Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -282,6 +285,65 @@ void sendMultipleMessages() {\n         messagesSent.forEach(message -> Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType()));\n     }\n \n+    /**\n+     * Verifies that sending multiple message will result in calling sender.send(Message...).\n+     */\n+    @Test\n+    void sendMessagesList() {\n+        // Arrange\n+        final int count = 4;\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n+\n+        IntStream.range(0, count).forEach(index -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7b044122d7e43738b789267c219219264d4765f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzkxNTY0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODo0OTowN1rOGOMXgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODo0OTowN1rOGOMXgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzNTg3Mg==", "bodyText": "This should return monoError(logger, new NullPointerException(\"'messages' cannot be null.\"); rather than throwing. There are other instances that I need to look at and fix. It's odd when async operations throw instead of returning the terminal error state.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r417535872", "createdAt": "2020-04-29T18:49:07Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -136,21 +136,24 @@ public String getEntityPath() {\n     }\n \n     /**\n-     * Sends a message to a Service Bus queue or topic.\n+     * Sends a set of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n+     * exceed the maximum size of a single batch, an exception will be triggered and the send will fail.\n+     * By default, the message size is the max amount allowed on the link.\n      *\n-     * @param message Message to be sent to Service Bus queue or topic.\n-     * @param sessionId the session id to associate with the message.\n+     * @param messages Messages to be sent to Service Bus queue or topic.\n      *\n-     * @return A {@link Mono} the finishes this operation on service bus resource.\n+     * @return A {@link Mono} that completes when all messages have been sent to the Service Bus resource.\n      *\n-     * @throws NullPointerException if {@code message} or {@code sessionId} is {@code null}.\n+     * @throws NullPointerException if {@code messages} is {@code null}.\n+     * @throws AmqpException if {@code messages} is larger than the maximum allowed size of a single batch.\n      */\n-    public Mono<Void> send(ServiceBusMessage message, String sessionId) {\n-        Objects.requireNonNull(message, \"'message' cannot be null.\");\n-        Objects.requireNonNull(sessionId, \"'sessionId' cannot be null.\");\n+    public Mono<Void> send(Iterable<ServiceBusMessage> messages) {\n+        Objects.requireNonNull(messages, \"'messages' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af471061eddddf60240a0abff8eda5eb7eeae78"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4505, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}