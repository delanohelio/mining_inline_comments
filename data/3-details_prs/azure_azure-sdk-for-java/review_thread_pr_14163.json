{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NTQ3NzA5", "number": 14163, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNDo0NzozOVrOEY478g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoxNzoxNFrOEaE6pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTM0MTMwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/BaseAuthorizationTokenProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNDo0NzozOVrOHBZkwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzozNjoxOFrOHB-S8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyOTYzMw==", "bodyText": "SpotBugs cribbing, @kushagraThapar, @moderakh how to suppress this warning?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14163#discussion_r471229633", "createdAt": "2020-08-17T04:47:39Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/BaseAuthorizationTokenProvider.java", "diffHunk": "@@ -237,38 +239,44 @@ private String generateKeyAuthorizationSignatureNew(RequestVerb verb, String res\n \n         String authResourceId = getAuthorizationResourceIdOrFullName(resourceType, resourceIdValue);\n         String payLoad = generateMessagePayload(verb, authResourceId, resourceType, headers);\n-        Mac mac = this.getMacInstance();\n-        byte[] digest = mac.doFinal(payLoad.getBytes(StandardCharsets.UTF_8));\n-        String authorizationToken = Utils.encodeBase64String(digest);\n-        String authtoken = AUTH_PREFIX + authorizationToken;\n-        return HttpUtils.urlEncode(authtoken);\n+\n+        MacPool.ReUsableMac macInstance = this.getReUseableMacInstance();\n+\n+        try {\n+            byte[] digest = macInstance.get().doFinal(payLoad.getBytes(StandardCharsets.UTF_8));\n+            String authorizationToken = Utils.encodeBase64String(digest);\n+            String authtoken = AUTH_PREFIX + authorizationToken;\n+            return HttpUtils.urlEncode(authtoken);\n+        }\n+        finally {\n+            macInstance.close();\n+        }\n     }\n \n-    private Mac getMacInstance() {\n-        int masterKeyLatestHashCode = this.credential.getKey().hashCode();\n-\n-        //  Master key has changed, or this is the first time we are getting mac instance\n-        if (masterKeyLatestHashCode != this.masterKeyHashCode) {\n-            byte[] masterKeyBytes = this.credential.getKey().getBytes(StandardCharsets.UTF_8);\n-            byte[] masterKeyDecodedBytes = Utils.Base64Decoder.decode(masterKeyBytes);\n-            SecretKey signingKey = new SecretKeySpec(masterKeyDecodedBytes, \"HMACSHA256\");\n-            try {\n-                Mac macInstance = Mac.getInstance(\"HMACSHA256\");\n-                macInstance.init(signingKey);\n-                //  Update the master key hash code\n-                this.masterKeyHashCode = masterKeyLatestHashCode;\n-                return macInstance;\n-            } catch (NoSuchAlgorithmException | InvalidKeyException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        } else {\n-            //  Master key hasn't changed, return the cloned mac instance\n-            try {\n-                return (Mac)this.macInstance.clone();\n-            } catch (CloneNotSupportedException e) {\n-                throw new IllegalStateException(e);\n+    private MacPool.ReUsableMac getReUseableMacInstance() {\n+\n+        // Java == operator is reference equals not content\n+        // leveraging reference comparison avoid hash computation\n+        if (this.currentCredentialKey != this.credential.getKey()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a8acad4d05012f45c4f78c388eda34bb2a49eed"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMTI4MQ==", "bodyText": "@kirankumarkolli  - you need to update this file with the proper spotbug issue which is failing here : https://github.com/Azure/azure-sdk-for-java/blob/master/eng/code-quality-reports/src/main/resources/spotbugs/spotbugs-exclude.xml", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14163#discussion_r471831281", "createdAt": "2020-08-17T23:36:18Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/BaseAuthorizationTokenProvider.java", "diffHunk": "@@ -237,38 +239,44 @@ private String generateKeyAuthorizationSignatureNew(RequestVerb verb, String res\n \n         String authResourceId = getAuthorizationResourceIdOrFullName(resourceType, resourceIdValue);\n         String payLoad = generateMessagePayload(verb, authResourceId, resourceType, headers);\n-        Mac mac = this.getMacInstance();\n-        byte[] digest = mac.doFinal(payLoad.getBytes(StandardCharsets.UTF_8));\n-        String authorizationToken = Utils.encodeBase64String(digest);\n-        String authtoken = AUTH_PREFIX + authorizationToken;\n-        return HttpUtils.urlEncode(authtoken);\n+\n+        MacPool.ReUsableMac macInstance = this.getReUseableMacInstance();\n+\n+        try {\n+            byte[] digest = macInstance.get().doFinal(payLoad.getBytes(StandardCharsets.UTF_8));\n+            String authorizationToken = Utils.encodeBase64String(digest);\n+            String authtoken = AUTH_PREFIX + authorizationToken;\n+            return HttpUtils.urlEncode(authtoken);\n+        }\n+        finally {\n+            macInstance.close();\n+        }\n     }\n \n-    private Mac getMacInstance() {\n-        int masterKeyLatestHashCode = this.credential.getKey().hashCode();\n-\n-        //  Master key has changed, or this is the first time we are getting mac instance\n-        if (masterKeyLatestHashCode != this.masterKeyHashCode) {\n-            byte[] masterKeyBytes = this.credential.getKey().getBytes(StandardCharsets.UTF_8);\n-            byte[] masterKeyDecodedBytes = Utils.Base64Decoder.decode(masterKeyBytes);\n-            SecretKey signingKey = new SecretKeySpec(masterKeyDecodedBytes, \"HMACSHA256\");\n-            try {\n-                Mac macInstance = Mac.getInstance(\"HMACSHA256\");\n-                macInstance.init(signingKey);\n-                //  Update the master key hash code\n-                this.masterKeyHashCode = masterKeyLatestHashCode;\n-                return macInstance;\n-            } catch (NoSuchAlgorithmException | InvalidKeyException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        } else {\n-            //  Master key hasn't changed, return the cloned mac instance\n-            try {\n-                return (Mac)this.macInstance.clone();\n-            } catch (CloneNotSupportedException e) {\n-                throw new IllegalStateException(e);\n+    private MacPool.ReUsableMac getReUseableMacInstance() {\n+\n+        // Java == operator is reference equals not content\n+        // leveraging reference comparison avoid hash computation\n+        if (this.currentCredentialKey != this.credential.getKey()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyOTYzMw=="}, "originalCommit": {"oid": "2a8acad4d05012f45c4f78c388eda34bb2a49eed"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Nzc4OTgzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MacPool.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoxNzoxNFrOHDRqnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODo1NToyMlrOHDU-Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5NzIxNQ==", "bodyText": "Using MacPool is a very nice change.\nhowever now mac.clone() overhead is replaced by a ConcurrentLinkedQueue synchrnozation lock overhead. most likely better perf.\non the perf comparison do we know how much of perf gain we have from this?\nYou can do micro-benchmarking using jmh (just for the authorization part) I have the jmh project template here:\nhttps://github.com/moderakh/azure-cosmosdb-benchmark/tree/master/jmh", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14163#discussion_r473197215", "createdAt": "2020-08-19T17:17:14Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MacPool.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import javax.crypto.Mac;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+class MacPool {\n+    final Mac macInstance;\n+    final ConcurrentLinkedQueue<Mac> pool;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a861ab08c581c1e39be2660c74943af89c349dd"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMjY0NA==", "bodyText": "Won't this benchmark needs package to be published?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14163#discussion_r473202644", "createdAt": "2020-08-19T17:26:15Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MacPool.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import javax.crypto.Mac;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+class MacPool {\n+    final Mac macInstance;\n+    final ConcurrentLinkedQueue<Mac> pool;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5NzIxNQ=="}, "originalCommit": {"oid": "3a861ab08c581c1e39be2660c74943af89c349dd"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwODc2OA==", "bodyText": "no, you don't need to publish the package. There are two options:\nfirst option)\non the java SDK repo install the package in your local maven repo using following command:\nmvn -e  -Dgpg.skip -Dmaven.javadoc.skip=true -Dspotbugs.skip=true  -Dcheckstyle.skip=true  -Drevapi.skip=true  -DskipTests -pl ,com.azure:azure-cosmos  -am clean install\nand in the jmh project just update the pom to use the latest version installed in your local maven repo.\nexample for this option in jmh project:\nhttps://github.com/moderakh/azure-cosmosdb-benchmark/blob/master/jmh/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdTokenStreamJMH.java\nsecond option)\nif the area to be tested is small (just copy that code (e.g, MacPool) to jmh project itself and micro benchmark just the copied code.\nexample for this option:\ncopied code:\nhttps://github.com/moderakh/azure-cosmosdb-benchmark/blob/master/jmh/src/main/java/moderakh/ConsistencyLevel.java\nmicro-benchmark test:\nhttps://github.com/moderakh/azure-cosmosdb-benchmark/blob/master/jmh/src/main/java/moderakh/ExpandableStringEnumJMH.java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14163#discussion_r473208768", "createdAt": "2020-08-19T17:36:54Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MacPool.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import javax.crypto.Mac;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+class MacPool {\n+    final Mac macInstance;\n+    final ConcurrentLinkedQueue<Mac> pool;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5NzIxNQ=="}, "originalCommit": {"oid": "3a861ab08c581c1e39be2660c74943af89c349dd"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1MTQxOA==", "bodyText": "Based on offline discussion resolving this comment.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14163#discussion_r473251418", "createdAt": "2020-08-19T18:55:22Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MacPool.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import javax.crypto.Mac;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+class MacPool {\n+    final Mac macInstance;\n+    final ConcurrentLinkedQueue<Mac> pool;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5NzIxNQ=="}, "originalCommit": {"oid": "3a861ab08c581c1e39be2660c74943af89c349dd"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1630, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}