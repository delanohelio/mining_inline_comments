{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNzgwNzIw", "number": 10643, "title": "Nio input stream", "bodyText": "", "createdAt": "2020-04-30T19:07:16Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643", "merged": true, "mergeCommit": {"oid": "dfb46607f03f40b16cf0f43edcfcad9afbf2b76e"}, "closed": true, "closedAt": "2020-05-13T22:32:07Z", "author": {"login": "rickle-msft"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccyCUigFqTQwMzgwNTQ0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg--fpAFqTQxMTI3ODQzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODA1NDQ0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#pullrequestreview-403805444", "createdAt": "2020-04-30T19:13:45Z", "commit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToxMzo0NVrOGO21wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToxMzo0NVrOGO21wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMTc0Ng==", "bodyText": "Does our implementation of BlobInputStream always give back the user as much data as they requested? Cause isnt it possible for an InputStream to return less than expected?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r418231746", "createdAt": "2020-04-30T19:13:45Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/test/java/com/azure/storage/blob/nio/NioBlobInputStreamTest.groovy", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio\n+\n+import com.azure.storage.blob.BlobClient\n+import spock.lang.Unroll\n+\n+class NioBlobInputStreamTest extends APISpec {\n+\n+    File sourceFile\n+    BlobClient bc\n+    NioBlobInputStream nioStream\n+    FileInputStream fileStream\n+\n+    def setup() {\n+        sourceFile = getRandomFile(10 * 1024 * 1024)\n+        cc.create()\n+        bc = cc.getBlobClient(generateBlobName())\n+        bc.uploadFromFile(sourceFile.getPath())\n+        nioStream = new NioBlobInputStream(bc.openInputStream())\n+        fileStream = new FileInputStream(sourceFile)\n+    }\n+\n+    def cleanup() {\n+        sourceFile.delete()\n+        cc.delete()\n+    }\n+\n+    def \"Read whole file\"() {\n+        expect:\n+        compareInputStreams(nioStream, fileStream, sourceFile.size())\n+    }\n+\n+    def \"Read min\"() {\n+        expect:\n+        for (i in 1..100) {\n+            assert nioStream.read() == fileStream.read()\n+        }\n+    }\n+\n+    @Unroll\n+    def \"Read buff\"() {\n+        setup:\n+        def nioBytes = new byte[size]\n+        def fileBytes = new byte[size]\n+\n+        when:\n+        nioStream.read(nioBytes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODM2Njc1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#pullrequestreview-403836675", "createdAt": "2020-04-30T20:02:05Z", "commit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowMjowNVrOGO4VcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowMjowNVrOGO4VcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NjI0MA==", "bodyText": "Are you wrapping each method since you want to log using the NioBlobInputStream class? Just wondering", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r418256240", "createdAt": "2020-04-30T20:02:05Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/NioBlobInputStream.java", "diffHunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.specialized.BlobInputStream;\n+import com.azure.storage.common.implementation.Constants;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Provides an InputStream to read a file stored as an Azure Blob.\n+ */\n+public class NioBlobInputStream extends InputStream {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODQ4MTQw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#pullrequestreview-403848140", "createdAt": "2020-04-30T20:20:07Z", "commit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyMDowN1rOGO446w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyMDo0NVrOGO46Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTMyMw==", "bodyText": "+1 I wonder what additional functionality NioBlobInputStream provides over BlobInputStream.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r418265323", "createdAt": "2020-04-30T20:20:07Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/NioBlobInputStream.java", "diffHunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.specialized.BlobInputStream;\n+import com.azure.storage.common.implementation.Constants;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Provides an InputStream to read a file stored as an Azure Blob.\n+ */\n+public class NioBlobInputStream extends InputStream {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NjI0MA=="}, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NTY1NQ==", "bodyText": "Shoundn't this already happen inside BlobInputStream ? If not would it be possible to push it down there instead of creating new type ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r418265655", "createdAt": "2020-04-30T20:20:45Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/NioBlobInputStream.java", "diffHunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.nio;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.blob.specialized.BlobInputStream;\n+import com.azure.storage.common.implementation.Constants;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Provides an InputStream to read a file stored as an Azure Blob.\n+ */\n+public class NioBlobInputStream extends InputStream {\n+    private final ClientLogger logger = new ClientLogger(NioBlobInputStream.class);\n+\n+    private final BlobInputStream blobInputStream;\n+\n+    NioBlobInputStream(BlobInputStream blobInputStream) {\n+        this.blobInputStream = blobInputStream;\n+    }\n+\n+    /**\n+     * Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without\n+     * blocking by the next invocation of a method for this input stream. The next invocation might be the same thread\n+     * or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes.\n+     *\n+     * @return An <code>int</code> which represents an estimate of the number of bytes that can be read (or skipped\n+     * over) from this input stream without blocking, or 0 when it reaches the end of the input stream.\n+     */\n+    @Override\n+    public synchronized int available() {\n+        return this.blobInputStream.available();\n+    }\n+\n+    /**\n+     * Closes this input stream and releases any system resources associated with the stream.\n+     */\n+    @Override\n+    public synchronized void close() {\n+        this.blobInputStream.close();\n+    }\n+\n+    /**\n+     * Marks the current position in this input stream. A subsequent call to the reset method repositions this stream at\n+     * the last marked position so that subsequent reads re-read the same bytes.\n+     *\n+     * @param readlimit An <code>int</code> which represents the maximum limit of bytes that can be read before the mark\n+     * position becomes invalid.\n+     */\n+    @Override\n+    public synchronized void mark(final int readlimit) {\n+        this.blobInputStream.mark(readlimit);\n+    }\n+\n+    /**\n+     * Tests if this input stream supports the mark and reset methods.\n+     *\n+     * @return Returns {@code true}\n+     */\n+    @Override\n+    public boolean markSupported() {\n+        return this.blobInputStream.markSupported();\n+    }\n+\n+    /**\n+     * Reads the next byte of data from the input stream. The value byte is returned as an int in the range 0 to 255. If\n+     * no byte is available because the end of the stream has been reached, the value -1 is returned. This method blocks\n+     * until input data is available, the end of the stream is detected, or an exception is thrown.\n+     *\n+     * @return An <code>int</code> which represents the total number of bytes read into the buffer, or -1 if there is no\n+     * more data because the end of the stream has been reached.\n+     * @throws RuntimeException when no available bytes to read.\n+     * @throws IOException If an I/O error occurs.\n+     */\n+    @Override\n+    public int read() throws IOException {\n+        try {\n+            return this.blobInputStream.read();\n+        } catch (RuntimeException e) {\n+            if (e.getMessage().equals(Constants.STREAM_CLOSED)) {\n+                throw LoggingUtility.logError(logger, new IOException(e));\n+            }\n+            throw LoggingUtility.logError(logger, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MjYzNTQz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#pullrequestreview-404263543", "createdAt": "2020-05-01T16:41:08Z", "commit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjo0MTowOFrOGPO1Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjo0MTowOFrOGPO1Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNDg1NA==", "bodyText": "nice catch!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#discussion_r418624854", "createdAt": "2020-05-01T16:41:08Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/StorageInputStream.java", "diffHunk": "@@ -286,7 +286,7 @@ public int read(final byte[] b, final int off, final int len) throws IOException\n         int chunks = (int) (Math.ceil((double) len / (double) this.chunkSize));\n         int numOfBytesRead = 0;\n         for (int i = 0; i < chunks; i++) {\n-            int results = this.readInternal(b, off + numOfBytesRead, len);\n+            int results = this.readInternal(b, off + numOfBytesRead, len - numOfBytesRead);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MjUxNzQ2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#pullrequestreview-406251746", "createdAt": "2020-05-06T01:04:45Z", "commit": {"oid": "504fc6f3a47097206f03fb56ca4d393fa0d6fe58"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2OTYxMDcw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#pullrequestreview-406961070", "createdAt": "2020-05-06T20:27:15Z", "commit": {"oid": "f1d57c8aa665dc3f41c4f5502edbc79461d14f19"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45d8c6f31e50e2d8babb878250fc9ceb13de5fdb", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/45d8c6f31e50e2d8babb878250fc9ceb13de5fdb", "committedDate": "2020-05-06T20:37:16Z", "message": "Added nioBlobInputStream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0af82d01a6c0b5d706f0e1204d745f5329a2b06c", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0af82d01a6c0b5d706f0e1204d745f5329a2b06c", "committedDate": "2020-05-06T20:37:16Z", "message": "Started on inputStream tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ba81b0b64dbb03e582d6cd9884927a663a857f1", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2ba81b0b64dbb03e582d6cd9884927a663a857f1", "committedDate": "2020-05-06T20:37:16Z", "message": "Added most tests for nioInputStream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30f3fa15e5930823c24cb197b607dbc89767df37", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/30f3fa15e5930823c24cb197b607dbc89767df37", "committedDate": "2020-05-06T20:37:16Z", "message": "Added more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b40b91fe3f8bbdc86d22d9b1feb29ac241449fc", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1b40b91fe3f8bbdc86d22d9b1feb29ac241449fc", "committedDate": "2020-05-06T20:37:16Z", "message": "Added provider tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61c4304e6381d20ac3faa21419b786012a420325", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/61c4304e6381d20ac3faa21419b786012a420325", "committedDate": "2020-05-06T20:37:16Z", "message": "Added a test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6e23f5a50a9c6c76c31ed9c271cad24d390636f", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d6e23f5a50a9c6c76c31ed9c271cad24d390636f", "committedDate": "2020-05-06T20:37:30Z", "message": "Added recordings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "929c80b707615b2226cf5a17c9ea2a8d15b18bdb", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/929c80b707615b2226cf5a17c9ea2a8d15b18bdb", "committedDate": "2020-05-06T20:37:30Z", "message": "Doc update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a205cc2df9ae6c163081153509e03c86dc9fdddb", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a205cc2df9ae6c163081153509e03c86dc9fdddb", "committedDate": "2020-05-06T20:37:30Z", "message": "Updated error handling"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1d57c8aa665dc3f41c4f5502edbc79461d14f19", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f1d57c8aa665dc3f41c4f5502edbc79461d14f19", "committedDate": "2020-05-06T20:21:15Z", "message": "Updated error handling"}, "afterCommit": {"oid": "23d92863a9ae1ac8473aa785ca09850abeb4ad62", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/23d92863a9ae1ac8473aa785ca09850abeb4ad62", "committedDate": "2020-05-07T19:20:19Z", "message": "Added recordings"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c13eeafd3f7ebac599662dfdfc65a837d984fe1", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0c13eeafd3f7ebac599662dfdfc65a837d984fe1", "committedDate": "2020-05-12T17:00:35Z", "message": "Changelog"}, "afterCommit": {"oid": "c86581c509a180b0c5d47f8bab16163dab820fb9", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c86581c509a180b0c5d47f8bab16163dab820fb9", "committedDate": "2020-05-12T17:01:39Z", "message": "Changelog"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c86581c509a180b0c5d47f8bab16163dab820fb9", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c86581c509a180b0c5d47f8bab16163dab820fb9", "committedDate": "2020-05-12T17:01:39Z", "message": "Changelog"}, "afterCommit": {"oid": "a205cc2df9ae6c163081153509e03c86dc9fdddb", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a205cc2df9ae6c163081153509e03c86dc9fdddb", "committedDate": "2020-05-06T20:37:30Z", "message": "Updated error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cd9039e54ce9815f2dc6e334835131639ddef0a", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4cd9039e54ce9815f2dc6e334835131639ddef0a", "committedDate": "2020-05-13T19:05:15Z", "message": "CI fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "965c3657402a77e75218b080b00de4a695eb8f2a", "author": {"user": {"login": "rickle-msft", "name": "Rick Ley"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/965c3657402a77e75218b080b00de4a695eb8f2a", "committedDate": "2020-05-13T19:10:56Z", "message": "updatedDocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjc4NDM4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10643#pullrequestreview-411278438", "createdAt": "2020-05-13T20:34:02Z", "commit": {"oid": "965c3657402a77e75218b080b00de4a695eb8f2a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4485, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}