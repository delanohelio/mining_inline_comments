{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxOTIzNjAx", "number": 15562, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzowMDoxNVrOEniNKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzowMDoxNVrOEniNKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODkwMzQ1OnYy", "diffSide": "RIGHT", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareFileAsyncClient.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzowMDoxNVrOHYLkww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzoxMDowMVrOHYL5Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTExNzUwNw==", "bodyText": "From a functional stand-point this change is fine. Generally, we have erred on using PagedFlux/PagedIterable on list responses so if the service changed in the future to be pagable we wouldn't require an API change in the SDK.\nhttps://azure.github.io/azure-sdk/java_design.html#java-pagination-pagedflux", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15562#discussion_r495117507", "createdAt": "2020-09-25T17:00:15Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareFileAsyncClient.java", "diffHunk": "@@ -1636,11 +1637,12 @@ private void channelCleanUp(AsynchronousFileChannel channel) {\n      * snapshot, as long as the snapshot specified by previousSnapshot is the older of the two.\n      * @return {@link ShareFileRange ranges} in the files that satisfy the requirements\n      */\n-    public PagedFlux<ShareFileRange> listRangesDiff(String previousSnapshot) {\n+    public Mono<ShareFileRangeList> listRangesDiff(String previousSnapshot) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05375c517fb31cdd6a8ab289e3c3d4914427af3f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTExOTAxNQ==", "bodyText": "We have a Mono<> for PageBlobClient.GetPageRange() and .GetPageRangeDiff(), and this API isn't currently Pagable, I think it's important that we be internally consistent..", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15562#discussion_r495119015", "createdAt": "2020-09-25T17:03:05Z", "author": {"login": "seanmcc-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareFileAsyncClient.java", "diffHunk": "@@ -1636,11 +1637,12 @@ private void channelCleanUp(AsynchronousFileChannel channel) {\n      * snapshot, as long as the snapshot specified by previousSnapshot is the older of the two.\n      * @return {@link ShareFileRange ranges} in the files that satisfy the requirements\n      */\n-    public PagedFlux<ShareFileRange> listRangesDiff(String previousSnapshot) {\n+    public Mono<ShareFileRangeList> listRangesDiff(String previousSnapshot) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTExNzUwNw=="}, "originalCommit": {"oid": "05375c517fb31cdd6a8ab289e3c3d4914427af3f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyMDEyMg==", "bodyText": "I believe the chance this api going pageable is small.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15562#discussion_r495120122", "createdAt": "2020-09-25T17:05:02Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareFileAsyncClient.java", "diffHunk": "@@ -1636,11 +1637,12 @@ private void channelCleanUp(AsynchronousFileChannel channel) {\n      * snapshot, as long as the snapshot specified by previousSnapshot is the older of the two.\n      * @return {@link ShareFileRange ranges} in the files that satisfy the requirements\n      */\n-    public PagedFlux<ShareFileRange> listRangesDiff(String previousSnapshot) {\n+    public Mono<ShareFileRangeList> listRangesDiff(String previousSnapshot) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTExNzUwNw=="}, "originalCommit": {"oid": "05375c517fb31cdd6a8ab289e3c3d4914427af3f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyMTE5OQ==", "bodyText": "Discussed offline. This is a list response but there are 2 different lists returned by the service - ClearRange and Range, so going with a Mono makes sense here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15562#discussion_r495121199", "createdAt": "2020-09-25T17:07:00Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareFileAsyncClient.java", "diffHunk": "@@ -1636,11 +1637,12 @@ private void channelCleanUp(AsynchronousFileChannel channel) {\n      * snapshot, as long as the snapshot specified by previousSnapshot is the older of the two.\n      * @return {@link ShareFileRange ranges} in the files that satisfy the requirements\n      */\n-    public PagedFlux<ShareFileRange> listRangesDiff(String previousSnapshot) {\n+    public Mono<ShareFileRangeList> listRangesDiff(String previousSnapshot) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTExNzUwNw=="}, "originalCommit": {"oid": "05375c517fb31cdd6a8ab289e3c3d4914427af3f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyMjc2Mw==", "bodyText": "Didn't realize the response type was two disparate lists, given that Mono makes more sense.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15562#discussion_r495122763", "createdAt": "2020-09-25T17:10:01Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareFileAsyncClient.java", "diffHunk": "@@ -1636,11 +1637,12 @@ private void channelCleanUp(AsynchronousFileChannel channel) {\n      * snapshot, as long as the snapshot specified by previousSnapshot is the older of the two.\n      * @return {@link ShareFileRange ranges} in the files that satisfy the requirements\n      */\n-    public PagedFlux<ShareFileRange> listRangesDiff(String previousSnapshot) {\n+    public Mono<ShareFileRangeList> listRangesDiff(String previousSnapshot) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTExNzUwNw=="}, "originalCommit": {"oid": "05375c517fb31cdd6a8ab289e3c3d4914427af3f"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 839, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}