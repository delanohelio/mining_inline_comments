{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MzI5MDA4", "number": 12260, "title": "Changefeed - Created an interface and put implementation details in implementation", "bodyText": "", "createdAt": "2020-06-16T16:23:04Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260", "merged": true, "mergeCommit": {"oid": "0552e8ed55dbd1f23b8394f9ab2ca735b4832d74"}, "closed": true, "closedAt": "2020-06-16T19:58:54Z", "author": {"login": "gapra-msft"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcr3viuAH2gAyNDM1MzI5MDA4OmI2MGQ3NDhmY2QxMjFiNDJmYTFjOGJiYmZiODFhNDAzM2Y5ZjBhN2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr6MzLAH2gAyNDM1MzI5MDA4OmM3OTZiODE0NDk2NTJlMTI1N2VjYzRmZTE0Y2Q1MWIyZDY3ZTNkMmU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d", "committedDate": "2020-06-16T16:21:32Z", "message": "Created an interface and put implementation details in implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNjk3MTcw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#pullrequestreview-431697170", "createdAt": "2020-06-16T16:40:48Z", "commit": {"oid": "b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo0MDo0OFrOGkkEPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo0MDo0OFrOGkkEPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5MjgyOQ==", "bodyText": "Should I call this ...EventImpl? Analyze Step is mad at me for keeping the same name", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r440992829", "createdAt": "2020-06-16T16:40:48Z", "author": {"login": "gapra-msft"}, "path": "sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java", "diffHunk": "@@ -0,0 +1,212 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.changefeed.implementation.models;\n+\n+import com.azure.storage.blob.changefeed.models.BlobChangefeedEventType;\n+import com.azure.storage.internal.avro.implementation.AvroConstants;\n+import com.azure.storage.internal.avro.implementation.schema.AvroSchema;\n+import com.azure.storage.internal.avro.implementation.schema.primitive.AvroNullSchema;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class contains properties of a BlobChangefeedEvent.\n+ */\n+public class BlobChangefeedEvent implements com.azure.storage.blob.changefeed.models.BlobChangefeedEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNjk1NDM2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#pullrequestreview-431695436", "createdAt": "2020-06-16T16:38:45Z", "commit": {"oid": "b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjozODo0NVrOGkj-mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo0MzowM1rOGkkJxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5MTM4Ng==", "bodyText": "all of this could be\nstatic <T> T nullOr(String name, Object o, Class<T> clazz)\n\nSee https://docs.oracle.com/javase/tutorial/extra/generics/methods.html", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r440991386", "createdAt": "2020-06-16T16:38:45Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java", "diffHunk": "@@ -0,0 +1,212 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.changefeed.implementation.models;\n+\n+import com.azure.storage.blob.changefeed.models.BlobChangefeedEventType;\n+import com.azure.storage.internal.avro.implementation.AvroConstants;\n+import com.azure.storage.internal.avro.implementation.schema.AvroSchema;\n+import com.azure.storage.internal.avro.implementation.schema.primitive.AvroNullSchema;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class contains properties of a BlobChangefeedEvent.\n+ */\n+public class BlobChangefeedEvent implements com.azure.storage.blob.changefeed.models.BlobChangefeedEvent {\n+\n+    private final String topic;\n+    private final String subject;\n+    private final BlobChangefeedEventType eventType;\n+    private final OffsetDateTime eventTime;\n+    private final String id;\n+    private final com.azure.storage.blob.changefeed.models.BlobChangefeedEventData data;\n+    private final Long dataVersion;\n+    private final String metadataVersion;\n+\n+    /**\n+     * Constructs a {@link BlobChangefeedEvent}.\n+     *\n+     * @param topic The topic.\n+     * @param subject The subject.\n+     * @param eventType {@link BlobChangefeedEventType}\n+     * @param eventTime The {@link OffsetDateTime event time}.\n+     * @param id The identifier.\n+     * @param data {@link BlobChangefeedEventData}\n+     * @param dataVersion The data version.\n+     * @param metadataVersion The metadata version.\n+     */\n+    public BlobChangefeedEvent(String topic, String subject, BlobChangefeedEventType eventType,\n+        OffsetDateTime eventTime, String id, com.azure.storage.blob.changefeed.models.BlobChangefeedEventData data,\n+        Long dataVersion, String metadataVersion) {\n+        this.topic = topic;\n+        this.subject = subject;\n+        this.eventType = eventType;\n+        this.eventTime = eventTime;\n+        this.id = id;\n+        this.data = data;\n+        this.dataVersion = dataVersion;\n+        this.metadataVersion = metadataVersion;\n+    }\n+\n+    /**\n+     * Constructs a {@link BlobChangefeedEvent}.\n+     *\n+     * @param record The record.\n+     * @return The {@link BlobChangefeedEvent} representing the record.\n+     * @throws IllegalArgumentException if the record is not valid.\n+     */\n+    public static BlobChangefeedEvent fromRecord(Object record) {\n+        AvroSchema.checkType(\"r\", record, Map.class);\n+        Map<?, ?> r = (Map<?, ?>) record;\n+\n+        if (!r.get(AvroConstants.RECORD).equals(\"BlobChangeEvent\")) {\n+            throw new IllegalArgumentException(\"Not a valid BlobChangefeedEvent.\");\n+        }\n+\n+        Object topic = r.get(\"topic\");\n+        Object subject = r.get(\"subject\");\n+        Object eventType = r.get(\"eventType\");\n+        Object eventTime = r.get(\"eventTime\");\n+        Object id = r.get(\"id\");\n+        Object data = r.get(\"data\");\n+        Object dataVersion = r.get(\"dataVersion\");\n+        Object metadataVersion = r.get(\"metadataVersion\");\n+\n+        return new BlobChangefeedEvent(\n+            nullOrString(\"topic\", topic),\n+            nullOrString(\"subject\", subject),\n+            isNull(eventType) ? null\n+                : BlobChangefeedEventType.fromString(BlobChangefeedEvent.nullOrString(\"eventType\", eventType)),\n+            isNull(eventTime) ? null\n+                : OffsetDateTime.parse(Objects.requireNonNull(nullOrString(\"eventTime\", eventTime))),\n+            nullOrString(\"id\", id),\n+            isNull(data) ? null : BlobChangefeedEventData.fromRecord(data),\n+            nullOrLong(\"dataVersion\", dataVersion),\n+            nullOrString(\"metadataVersion\", metadataVersion)\n+        );\n+    }\n+\n+    /**\n+     * Determines whether or not the object is null in the Avro sense.\n+     */\n+    static boolean isNull(Object o) {\n+        return o == null || o instanceof AvroNullSchema.Null;\n+    }\n+\n+    /**\n+     * Returns either null or a String.\n+     */\n+    static String nullOrString(String name, Object o) {\n+        if (isNull(o)) {\n+            return null;\n+        }\n+        AvroSchema.checkType(name, o, String.class);\n+        return (String) o;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5Mjk4OA==", "bodyText": "we should mark all methods coming from interface with @Override (so that compiler can catch changes).\nSee https://stackoverflow.com/questions/212614/should-we-override-an-interfaces-method-implementation\nWe can also use {@inheritDoc} to not repeat javadocs.\nThis applies to other places so I won't repeat this there.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r440992988", "createdAt": "2020-06-16T16:41:02Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java", "diffHunk": "@@ -0,0 +1,212 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.changefeed.implementation.models;\n+\n+import com.azure.storage.blob.changefeed.models.BlobChangefeedEventType;\n+import com.azure.storage.internal.avro.implementation.AvroConstants;\n+import com.azure.storage.internal.avro.implementation.schema.AvroSchema;\n+import com.azure.storage.internal.avro.implementation.schema.primitive.AvroNullSchema;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class contains properties of a BlobChangefeedEvent.\n+ */\n+public class BlobChangefeedEvent implements com.azure.storage.blob.changefeed.models.BlobChangefeedEvent {\n+\n+    private final String topic;\n+    private final String subject;\n+    private final BlobChangefeedEventType eventType;\n+    private final OffsetDateTime eventTime;\n+    private final String id;\n+    private final com.azure.storage.blob.changefeed.models.BlobChangefeedEventData data;\n+    private final Long dataVersion;\n+    private final String metadataVersion;\n+\n+    /**\n+     * Constructs a {@link BlobChangefeedEvent}.\n+     *\n+     * @param topic The topic.\n+     * @param subject The subject.\n+     * @param eventType {@link BlobChangefeedEventType}\n+     * @param eventTime The {@link OffsetDateTime event time}.\n+     * @param id The identifier.\n+     * @param data {@link BlobChangefeedEventData}\n+     * @param dataVersion The data version.\n+     * @param metadataVersion The metadata version.\n+     */\n+    public BlobChangefeedEvent(String topic, String subject, BlobChangefeedEventType eventType,\n+        OffsetDateTime eventTime, String id, com.azure.storage.blob.changefeed.models.BlobChangefeedEventData data,\n+        Long dataVersion, String metadataVersion) {\n+        this.topic = topic;\n+        this.subject = subject;\n+        this.eventType = eventType;\n+        this.eventTime = eventTime;\n+        this.id = id;\n+        this.data = data;\n+        this.dataVersion = dataVersion;\n+        this.metadataVersion = metadataVersion;\n+    }\n+\n+    /**\n+     * Constructs a {@link BlobChangefeedEvent}.\n+     *\n+     * @param record The record.\n+     * @return The {@link BlobChangefeedEvent} representing the record.\n+     * @throws IllegalArgumentException if the record is not valid.\n+     */\n+    public static BlobChangefeedEvent fromRecord(Object record) {\n+        AvroSchema.checkType(\"r\", record, Map.class);\n+        Map<?, ?> r = (Map<?, ?>) record;\n+\n+        if (!r.get(AvroConstants.RECORD).equals(\"BlobChangeEvent\")) {\n+            throw new IllegalArgumentException(\"Not a valid BlobChangefeedEvent.\");\n+        }\n+\n+        Object topic = r.get(\"topic\");\n+        Object subject = r.get(\"subject\");\n+        Object eventType = r.get(\"eventType\");\n+        Object eventTime = r.get(\"eventTime\");\n+        Object id = r.get(\"id\");\n+        Object data = r.get(\"data\");\n+        Object dataVersion = r.get(\"dataVersion\");\n+        Object metadataVersion = r.get(\"metadataVersion\");\n+\n+        return new BlobChangefeedEvent(\n+            nullOrString(\"topic\", topic),\n+            nullOrString(\"subject\", subject),\n+            isNull(eventType) ? null\n+                : BlobChangefeedEventType.fromString(BlobChangefeedEvent.nullOrString(\"eventType\", eventType)),\n+            isNull(eventTime) ? null\n+                : OffsetDateTime.parse(Objects.requireNonNull(nullOrString(\"eventTime\", eventTime))),\n+            nullOrString(\"id\", id),\n+            isNull(data) ? null : BlobChangefeedEventData.fromRecord(data),\n+            nullOrLong(\"dataVersion\", dataVersion),\n+            nullOrString(\"metadataVersion\", metadataVersion)\n+        );\n+    }\n+\n+    /**\n+     * Determines whether or not the object is null in the Avro sense.\n+     */\n+    static boolean isNull(Object o) {\n+        return o == null || o instanceof AvroNullSchema.Null;\n+    }\n+\n+    /**\n+     * Returns either null or a String.\n+     */\n+    static String nullOrString(String name, Object o) {\n+        if (isNull(o)) {\n+            return null;\n+        }\n+        AvroSchema.checkType(name, o, String.class);\n+        return (String) o;\n+    }\n+\n+    /**\n+     * Returns either null or a Long.\n+     */\n+    static Long nullOrLong(String name, Object o) {\n+        if (isNull(o)) {\n+            return null;\n+        }\n+        AvroSchema.checkType(name, o, Long.class);\n+        return (Long) o;\n+    }\n+\n+    /**\n+     * Returns either null or a Boolean.\n+     */\n+    static boolean nullOrBoolean(String name, Object o) {\n+        if (isNull(o)) {\n+            return false;\n+        }\n+        AvroSchema.checkType(name, o, Boolean.class);\n+        return (boolean) o;\n+    }\n+\n+    /**\n+     * @return the topic.\n+     */\n+    public String getTopic() {\n+        return topic;\n+    }\n+\n+    /**\n+     * @return the subject.\n+     */\n+    public String getSubject() {\n+        return subject;\n+    }\n+\n+    /**\n+     * @return {@link BlobChangefeedEventType}\n+     */\n+    public BlobChangefeedEventType getEventType() {\n+        return eventType;\n+    }\n+\n+    /**\n+     * @return The {@link OffsetDateTime event time}.\n+     */\n+    public OffsetDateTime getEventTime() {\n+        return eventTime;\n+    }\n+\n+    /**\n+     * @return the identifer.\n+     */\n+    public String getId() {\n+        return id;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5NDI0NA==", "bodyText": "If these are used across various models then they should exist in separate class. For example ChangeFeedModelValidator or something like that.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r440994244", "createdAt": "2020-06-16T16:43:03Z", "author": {"login": "kasobol-msft"}, "path": "sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEventData.java", "diffHunk": "@@ -0,0 +1,228 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.changefeed.implementation.models;\n+\n+import com.azure.storage.blob.models.BlobType;\n+import com.azure.storage.internal.avro.implementation.AvroConstants;\n+import com.azure.storage.internal.avro.implementation.schema.AvroSchema;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class contains properties of a BlobChangefeedEventData.\n+ */\n+public class BlobChangefeedEventData implements com.azure.storage.blob.changefeed.models.BlobChangefeedEventData {\n+\n+    private final String api;\n+    private final String clientRequestId;\n+    private final String requestId;\n+    private final String eTag;\n+    private final String contentType;\n+    private final Long contentLength;\n+    private final BlobType blobType;\n+    private final Long contentOffset;\n+    private final String destinationUrl;\n+    private final String sourceUrl;\n+    private final String blobUrl;\n+    private final boolean recursive;\n+    private final String sequencer;\n+\n+    /**\n+     * Constructs a {@link BlobChangefeedEventData}.\n+     *\n+     * @param api The api.\n+     * @param clientRequestId The client request id.\n+     * @param requestId The request id.\n+     * @param eTag The eTag.\n+     * @param contentType The content type.\n+     * @param contentLength Th4e content length.\n+     * @param blobType {@link BlobType}\n+     * @param contentOffset The content offset.\n+     * @param destinationUrl The destination url.\n+     * @param sourceUrl The source url.\n+     * @param blobUrl The blob url.\n+     * @param recursive Whether or not this operation was recursive.\n+     * @param sequencer The sequencer.\n+     */\n+    public BlobChangefeedEventData(String api, String clientRequestId, String requestId, String eTag,\n+        String contentType, Long contentLength, BlobType blobType, Long contentOffset, String destinationUrl,\n+        String sourceUrl, String blobUrl, boolean recursive, String sequencer) {\n+        this.api = api;\n+        this.clientRequestId = clientRequestId;\n+        this.requestId = requestId;\n+        this.eTag = eTag;\n+        this.contentType = contentType;\n+        this.contentLength = contentLength;\n+        this.blobType = blobType;\n+        this.contentOffset = contentOffset;\n+        this.destinationUrl = destinationUrl;\n+        this.sourceUrl = sourceUrl;\n+        this.blobUrl = blobUrl;\n+        this.recursive = recursive;\n+        this.sequencer = sequencer;\n+    }\n+\n+    static BlobChangefeedEventData fromRecord(Object d) {\n+        AvroSchema.checkType(\"data\", d, Map.class);\n+        Map<?, ?> data = (Map<?, ?>) d;\n+\n+        if (!data.get(AvroConstants.RECORD).equals(\"BlobChangeEventData\")) {\n+            throw new IllegalArgumentException(\"Not a valid BlobChangefeedEventData.\");\n+        }\n+\n+        Object api = data.get(\"api\");\n+        Object clientRequestId = data.get(\"clientRequestId\");\n+        Object requestId = data.get(\"requestId\");\n+        Object eTag = data.get(\"etag\");\n+        Object contentType = data.get(\"contentType\");\n+        Object contentLength = data.get(\"contentLength\");\n+        Object blobType = data.get(\"blobType\");\n+        Object contentOffset = data.get(\"contentOffset\");\n+        Object destinationUrl = data.get(\"destinationUrl\");\n+        Object sourceUrl = data.get(\"sourceUrl\");\n+        Object blobUrl = data.get(\"url\");\n+        Object recursive = data.get(\"recursive\");\n+        Object sequencer = data.get(\"sequencer\");\n+\n+        return new BlobChangefeedEventData(\n+            BlobChangefeedEvent.nullOrString(\"api\", api),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzAxNzkw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#pullrequestreview-431701790", "createdAt": "2020-06-16T16:46:41Z", "commit": {"oid": "b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo0Njo0MVrOGkkSZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo0ODozMVrOGkkWyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5NjQ1NQ==", "bodyText": "Mind adding @Override to the implementation methods.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r440996455", "createdAt": "2020-06-16T16:46:41Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEventData.java", "diffHunk": "@@ -0,0 +1,228 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.changefeed.implementation.models;\n+\n+import com.azure.storage.blob.models.BlobType;\n+import com.azure.storage.internal.avro.implementation.AvroConstants;\n+import com.azure.storage.internal.avro.implementation.schema.AvroSchema;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class contains properties of a BlobChangefeedEventData.\n+ */\n+public class BlobChangefeedEventData implements com.azure.storage.blob.changefeed.models.BlobChangefeedEventData {\n+\n+    private final String api;\n+    private final String clientRequestId;\n+    private final String requestId;\n+    private final String eTag;\n+    private final String contentType;\n+    private final Long contentLength;\n+    private final BlobType blobType;\n+    private final Long contentOffset;\n+    private final String destinationUrl;\n+    private final String sourceUrl;\n+    private final String blobUrl;\n+    private final boolean recursive;\n+    private final String sequencer;\n+\n+    /**\n+     * Constructs a {@link BlobChangefeedEventData}.\n+     *\n+     * @param api The api.\n+     * @param clientRequestId The client request id.\n+     * @param requestId The request id.\n+     * @param eTag The eTag.\n+     * @param contentType The content type.\n+     * @param contentLength Th4e content length.\n+     * @param blobType {@link BlobType}\n+     * @param contentOffset The content offset.\n+     * @param destinationUrl The destination url.\n+     * @param sourceUrl The source url.\n+     * @param blobUrl The blob url.\n+     * @param recursive Whether or not this operation was recursive.\n+     * @param sequencer The sequencer.\n+     */\n+    public BlobChangefeedEventData(String api, String clientRequestId, String requestId, String eTag,\n+        String contentType, Long contentLength, BlobType blobType, Long contentOffset, String destinationUrl,\n+        String sourceUrl, String blobUrl, boolean recursive, String sequencer) {\n+        this.api = api;\n+        this.clientRequestId = clientRequestId;\n+        this.requestId = requestId;\n+        this.eTag = eTag;\n+        this.contentType = contentType;\n+        this.contentLength = contentLength;\n+        this.blobType = blobType;\n+        this.contentOffset = contentOffset;\n+        this.destinationUrl = destinationUrl;\n+        this.sourceUrl = sourceUrl;\n+        this.blobUrl = blobUrl;\n+        this.recursive = recursive;\n+        this.sequencer = sequencer;\n+    }\n+\n+    static BlobChangefeedEventData fromRecord(Object d) {\n+        AvroSchema.checkType(\"data\", d, Map.class);\n+        Map<?, ?> data = (Map<?, ?>) d;\n+\n+        if (!data.get(AvroConstants.RECORD).equals(\"BlobChangeEventData\")) {\n+            throw new IllegalArgumentException(\"Not a valid BlobChangefeedEventData.\");\n+        }\n+\n+        Object api = data.get(\"api\");\n+        Object clientRequestId = data.get(\"clientRequestId\");\n+        Object requestId = data.get(\"requestId\");\n+        Object eTag = data.get(\"etag\");\n+        Object contentType = data.get(\"contentType\");\n+        Object contentLength = data.get(\"contentLength\");\n+        Object blobType = data.get(\"blobType\");\n+        Object contentOffset = data.get(\"contentOffset\");\n+        Object destinationUrl = data.get(\"destinationUrl\");\n+        Object sourceUrl = data.get(\"sourceUrl\");\n+        Object blobUrl = data.get(\"url\");\n+        Object recursive = data.get(\"recursive\");\n+        Object sequencer = data.get(\"sequencer\");\n+\n+        return new BlobChangefeedEventData(\n+            BlobChangefeedEvent.nullOrString(\"api\", api),\n+            BlobChangefeedEvent.nullOrString(\"clientRequestId\", clientRequestId),\n+            BlobChangefeedEvent.nullOrString(\"requestId\", requestId),\n+            BlobChangefeedEvent.nullOrString(\"etag\", eTag),\n+            BlobChangefeedEvent.nullOrString(\"contentType\", contentType),\n+            BlobChangefeedEvent.nullOrLong(\"contentLength\", contentLength),\n+            BlobChangefeedEvent.isNull(blobType) ? null\n+                : BlobType.fromString(BlobChangefeedEvent.nullOrString(\"blobType\", blobType)),\n+            BlobChangefeedEvent.nullOrLong(\"contentOffset\", contentOffset),\n+            BlobChangefeedEvent.nullOrString(\"destinationUrl\", destinationUrl),\n+            BlobChangefeedEvent.nullOrString(\"sourceUrl\", sourceUrl),\n+            BlobChangefeedEvent.nullOrString(\"url\", blobUrl),\n+            BlobChangefeedEvent.nullOrBoolean(\"recursive\", recursive),\n+            BlobChangefeedEvent.nullOrString(\"sequencer\", sequencer)\n+        );\n+    }\n+\n+    /**\n+     * @return The api.\n+     */\n+    public String getApi() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5NzU3OQ==", "bodyText": "Should these static helpers go into a separate utility class? These may be related to BlobChangefeedEvent but they also feel very standalone.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r440997579", "createdAt": "2020-06-16T16:48:31Z", "author": {"login": "alzimmermsft"}, "path": "sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java", "diffHunk": "@@ -0,0 +1,212 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.changefeed.implementation.models;\n+\n+import com.azure.storage.blob.changefeed.models.BlobChangefeedEventType;\n+import com.azure.storage.internal.avro.implementation.AvroConstants;\n+import com.azure.storage.internal.avro.implementation.schema.AvroSchema;\n+import com.azure.storage.internal.avro.implementation.schema.primitive.AvroNullSchema;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class contains properties of a BlobChangefeedEvent.\n+ */\n+public class BlobChangefeedEvent implements com.azure.storage.blob.changefeed.models.BlobChangefeedEvent {\n+\n+    private final String topic;\n+    private final String subject;\n+    private final BlobChangefeedEventType eventType;\n+    private final OffsetDateTime eventTime;\n+    private final String id;\n+    private final com.azure.storage.blob.changefeed.models.BlobChangefeedEventData data;\n+    private final Long dataVersion;\n+    private final String metadataVersion;\n+\n+    /**\n+     * Constructs a {@link BlobChangefeedEvent}.\n+     *\n+     * @param topic The topic.\n+     * @param subject The subject.\n+     * @param eventType {@link BlobChangefeedEventType}\n+     * @param eventTime The {@link OffsetDateTime event time}.\n+     * @param id The identifier.\n+     * @param data {@link BlobChangefeedEventData}\n+     * @param dataVersion The data version.\n+     * @param metadataVersion The metadata version.\n+     */\n+    public BlobChangefeedEvent(String topic, String subject, BlobChangefeedEventType eventType,\n+        OffsetDateTime eventTime, String id, com.azure.storage.blob.changefeed.models.BlobChangefeedEventData data,\n+        Long dataVersion, String metadataVersion) {\n+        this.topic = topic;\n+        this.subject = subject;\n+        this.eventType = eventType;\n+        this.eventTime = eventTime;\n+        this.id = id;\n+        this.data = data;\n+        this.dataVersion = dataVersion;\n+        this.metadataVersion = metadataVersion;\n+    }\n+\n+    /**\n+     * Constructs a {@link BlobChangefeedEvent}.\n+     *\n+     * @param record The record.\n+     * @return The {@link BlobChangefeedEvent} representing the record.\n+     * @throws IllegalArgumentException if the record is not valid.\n+     */\n+    public static BlobChangefeedEvent fromRecord(Object record) {\n+        AvroSchema.checkType(\"r\", record, Map.class);\n+        Map<?, ?> r = (Map<?, ?>) record;\n+\n+        if (!r.get(AvroConstants.RECORD).equals(\"BlobChangeEvent\")) {\n+            throw new IllegalArgumentException(\"Not a valid BlobChangefeedEvent.\");\n+        }\n+\n+        Object topic = r.get(\"topic\");\n+        Object subject = r.get(\"subject\");\n+        Object eventType = r.get(\"eventType\");\n+        Object eventTime = r.get(\"eventTime\");\n+        Object id = r.get(\"id\");\n+        Object data = r.get(\"data\");\n+        Object dataVersion = r.get(\"dataVersion\");\n+        Object metadataVersion = r.get(\"metadataVersion\");\n+\n+        return new BlobChangefeedEvent(\n+            nullOrString(\"topic\", topic),\n+            nullOrString(\"subject\", subject),\n+            isNull(eventType) ? null\n+                : BlobChangefeedEventType.fromString(BlobChangefeedEvent.nullOrString(\"eventType\", eventType)),\n+            isNull(eventTime) ? null\n+                : OffsetDateTime.parse(Objects.requireNonNull(nullOrString(\"eventTime\", eventTime))),\n+            nullOrString(\"id\", id),\n+            isNull(data) ? null : BlobChangefeedEventData.fromRecord(data),\n+            nullOrLong(\"dataVersion\", dataVersion),\n+            nullOrString(\"metadataVersion\", metadataVersion)\n+        );\n+    }\n+\n+    /**\n+     * Determines whether or not the object is null in the Avro sense.\n+     */\n+    static boolean isNull(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c98968eb01d250232d782bcd3ddb9822d6fbbb33", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c98968eb01d250232d782bcd3ddb9822d6fbbb33", "committedDate": "2020-06-16T16:55:13Z", "message": "Added Override to methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d44258f6a68cf79a4e0200d9800121becdd47d4", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9d44258f6a68cf79a4e0200d9800121becdd47d4", "committedDate": "2020-06-16T16:57:31Z", "message": "Renamed implementation to internal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b47a5b80a38fa86c85c58c4f1b154727f61541d7", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b47a5b80a38fa86c85c58c4f1b154727f61541d7", "committedDate": "2020-06-16T18:45:50Z", "message": "Added new class for model type validation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzk5MDM5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#pullrequestreview-431799039", "createdAt": "2020-06-16T18:49:12Z", "commit": {"oid": "b47a5b80a38fa86c85c58c4f1b154727f61541d7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c796b81449652e1257ecc4fe14cd51b2d67e3d2e", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c796b81449652e1257ecc4fe14cd51b2d67e3d2e", "committedDate": "2020-06-16T19:13:18Z", "message": "Added copyright header"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3047, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}