{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMTA0Mzk4", "number": 8679, "reviewThreads": {"totalCount": 59, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODozMzoyNFrODliSTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMzoyOTo0NlrODoiPtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg1NjQ0OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODozMzoyNFrOFyfGMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1OToyOVrOFyf9Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4MjYwOA==", "bodyText": "This will add Azure Core as a dependency to all modules depending pom.xml, this dependency should be removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388482608", "createdAt": "2020-03-05T18:33:24Z", "author": {"login": "alzimmermsft"}, "path": "pom.xml", "diffHunk": "@@ -6,7 +6,15 @@\n   <groupId>com.azure</groupId>\n   <artifactId>azure-sdk-all</artifactId>\n   <packaging>pom</packaging>\n-  <version>1.0.0</version> <!-- {x-version-update;com.azure:azure-sdk-all;current} -->\n+  <version>1.0.0</version>\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.azure</groupId>\n+            <artifactId>azure-core</artifactId>\n+            <version>1.4.0-beta.2</version>\n+            <scope>compile</scope>\n+        </dependency>\n+    </dependencies> <!-- {x-version-update;com.azure:azure-sdk-all;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NjY3NQ==", "bodyText": "Wrong place to add. Will remvoe.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388496675", "createdAt": "2020-03-05T18:59:29Z", "author": {"login": "sima-zhu"}, "path": "pom.xml", "diffHunk": "@@ -6,7 +6,15 @@\n   <groupId>com.azure</groupId>\n   <artifactId>azure-sdk-all</artifactId>\n   <packaging>pom</packaging>\n-  <version>1.0.0</version> <!-- {x-version-update;com.azure:azure-sdk-all;current} -->\n+  <version>1.0.0</version>\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.azure</groupId>\n+            <artifactId>azure-core</artifactId>\n+            <version>1.4.0-beta.2</version>\n+            <scope>compile</scope>\n+        </dependency>\n+    </dependencies> <!-- {x-version-update;com.azure:azure-sdk-all;current} -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4MjYwOA=="}, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg2ODIwOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODozNzoxMVrOFyfNtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1OTo0N1rOFyf-Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NDUzMg==", "bodyText": "@sima-zhu I don't believe this is the correct place to have this dependency (which, btw, is declared incorrectly anyways, the version tag belongs on the version line). This is azure-sdk-all which includes client, data and management in its module list. This change needs to be more limited, possibly just in pom.client.xml", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388484532", "createdAt": "2020-03-05T18:37:11Z", "author": {"login": "JimSuplizio"}, "path": "pom.xml", "diffHunk": "@@ -6,7 +6,15 @@\n   <groupId>com.azure</groupId>\n   <artifactId>azure-sdk-all</artifactId>\n   <packaging>pom</packaging>\n-  <version>1.0.0</version> <!-- {x-version-update;com.azure:azure-sdk-all;current} -->\n+  <version>1.0.0</version>\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.azure</groupId>\n+            <artifactId>azure-core</artifactId>\n+            <version>1.4.0-beta.2</version>\n+            <scope>compile</scope>\n+        </dependency>\n+    </dependencies> <!-- {x-version-update;com.azure:azure-sdk-all;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5Njg5OQ==", "bodyText": "Not intended to put here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388496899", "createdAt": "2020-03-05T18:59:47Z", "author": {"login": "sima-zhu"}, "path": "pom.xml", "diffHunk": "@@ -6,7 +6,15 @@\n   <groupId>com.azure</groupId>\n   <artifactId>azure-sdk-all</artifactId>\n   <packaging>pom</packaging>\n-  <version>1.0.0</version> <!-- {x-version-update;com.azure:azure-sdk-all;current} -->\n+  <version>1.0.0</version>\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.azure</groupId>\n+            <artifactId>azure-core</artifactId>\n+            <version>1.4.0-beta.2</version>\n+            <scope>compile</scope>\n+        </dependency>\n+    </dependencies> <!-- {x-version-update;com.azure:azure-sdk-all;current} -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NDUzMg=="}, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg2ODk0OnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationAsyncClientTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODozNzoyOFrOFyfOKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOToxOTozNFrOFz2EZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NDY0OA==", "bodyText": "Not a huge fan that every test will need to become parameterized to test each client, are there any ways to abstract this into Azure Core Test or does JUnit have the ability to parameterize an entire test run?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388484648", "createdAt": "2020-03-05T18:37:28Z", "author": {"login": "alzimmermsft"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationAsyncClientTest.java", "diffHunk": "@@ -91,17 +97,21 @@ public void addConfigurationSetting() {\n     /**\n      * Tests that we cannot add a configuration setting when the key is an empty string.\n      */\n-    @Test\n-    public void addConfigurationSettingEmptyKey() {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"getTestParameters\")\n+    public void addConfigurationSettingEmptyKey(HttpClient httpClient, ConfigurationServiceVersion serviceVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNTUzNg==", "bodyText": "JUnit 4 did support this, but as far as I know, JUnit 5 does not - you now parameterise each test separately.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r389415536", "createdAt": "2020-03-08T23:04:48Z", "author": {"login": "JonathanGiles"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationAsyncClientTest.java", "diffHunk": "@@ -91,17 +97,21 @@ public void addConfigurationSetting() {\n     /**\n      * Tests that we cannot add a configuration setting when the key is an empty string.\n      */\n-    @Test\n-    public void addConfigurationSettingEmptyKey() {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"getTestParameters\")\n+    public void addConfigurationSettingEmptyKey(HttpClient httpClient, ConfigurationServiceVersion serviceVersion) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NDY0OA=="}, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwNzU1OA==", "bodyText": "First, I'd like to see a description so I can understand why these changes are necessary. Second, I don't believe that pom.xml isn't the correct place to add a core dependency.\n\nThanks for suggestion! Added the description.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r389907558", "createdAt": "2020-03-09T19:19:34Z", "author": {"login": "sima-zhu"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationAsyncClientTest.java", "diffHunk": "@@ -91,17 +97,21 @@ public void addConfigurationSetting() {\n     /**\n      * Tests that we cannot add a configuration setting when the key is an empty string.\n      */\n-    @Test\n-    public void addConfigurationSettingEmptyKey() {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"getTestParameters\")\n+    public void addConfigurationSettingEmptyKey(HttpClient httpClient, ConfigurationServiceVersion serviceVersion) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NDY0OA=="}, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg3ODU2OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-certificates/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0MDozMVrOFyfUIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0MDozMVrOFyfUIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NjE3OQ==", "bodyText": "This tag is wrong, unreleased dependencies should only ever be dependency. The tag should be x-version-update;unreleased_com.azure:azure-core-test;dependency. As it is right now it'll definitely fail the analyze step's version scanner.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388486179", "createdAt": "2020-03-05T18:40:31Z", "author": {"login": "JimSuplizio"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/pom.xml", "diffHunk": "@@ -97,7 +97,14 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core-test</artifactId>\n-      <version>1.1.0</version> <!-- {x-version-update;com.azure:azure-core-test;dependency} -->\n+      <version>1.2.0-beta.1</version> <!-- {x-version-update;unrelease_com.azure:azure-core-test;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg3ODg4OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0MDozN1rOFyfUVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0MDozN1rOFyfUVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NjIyOQ==", "bodyText": "This change should be reverted.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388486229", "createdAt": "2020-03-05T18:40:37Z", "author": {"login": "srnagar"}, "path": "pom.xml", "diffHunk": "@@ -6,7 +6,15 @@\n   <groupId>com.azure</groupId>\n   <artifactId>azure-sdk-all</artifactId>\n   <packaging>pom</packaging>\n-  <version>1.0.0</version> <!-- {x-version-update;com.azure:azure-sdk-all;current} -->\n+  <version>1.0.0</version>\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.azure</groupId>\n+            <artifactId>azure-core</artifactId>\n+            <version>1.4.0-beta.2</version>\n+            <scope>compile</scope>\n+        </dependency>\n+    </dependencies> <!-- {x-version-update;com.azure:azure-sdk-all;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg4MDE1OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0MDo1OVrOFyfVHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0MDo1OVrOFyfVHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NjQyOA==", "bodyText": "Same comment as above, the tag is incorrect and should be x-version-update;unreleased_com.azure:azure-core-test;dependency", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388486428", "createdAt": "2020-03-05T18:40:59Z", "author": {"login": "JimSuplizio"}, "path": "sdk/keyvault/azure-security-keyvault-keys/pom.xml", "diffHunk": "@@ -95,7 +95,14 @@\n       <dependency>\n         <groupId>com.azure</groupId>\n         <artifactId>azure-core-test</artifactId>\n-        <version>1.1.0</version> <!-- {x-version-update;com.azure:azure-core-test;dependency} -->\n+        <version>1.2.0-beta.1</version> <!-- {x-version-update;unrelease_com.azure:azure-core-test;current} -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg4MTI1OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/http/HttpClientProviders.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0MToxOFrOFyfVug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowNzoxNFrOFygOEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NjU4Ng==", "bodyText": "I don't think we would want to add APIs into our production code to just handle testing.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388486586", "createdAt": "2020-03-05T18:41:18Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/http/HttpClientProviders.java", "diffHunk": "@@ -34,4 +36,19 @@ public static HttpClient createInstance() {\n         }\n         return defaultProvider.createInstance();\n     }\n+\n+    /**\n+     * Returns a list of all {@link HttpClient HttpClients} that are discovered in the classpath.\n+     *\n+     * @return A list of all {@link HttpClient HttpClients} discovered in the classpath.\n+     */\n+    public static List<HttpClient> getAllHttpClients() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMTAxMQ==", "bodyText": "This is decided by Srikanta and Jonathan. @srnagar introduce the logic here. We want to expose the clients to test framework, so we are able to get all clients from test without manual adding clients in test every time. It is under implementation, the only pain is to expose the API to azure-core-test. I think we agree to approach in this way.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388501011", "createdAt": "2020-03-05T19:07:14Z", "author": {"login": "sima-zhu"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/http/HttpClientProviders.java", "diffHunk": "@@ -34,4 +36,19 @@ public static HttpClient createInstance() {\n         }\n         return defaultProvider.createInstance();\n     }\n+\n+    /**\n+     * Returns a list of all {@link HttpClient HttpClients} that are discovered in the classpath.\n+     *\n+     * @return A list of all {@link HttpClient HttpClients} discovered in the classpath.\n+     */\n+    public static List<HttpClient> getAllHttpClients() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NjU4Ng=="}, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg4NDgwOnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0MjoyNVrOFyfYEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0MjoyNVrOFyfYEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NzE4NA==", "bodyText": "Instead of casting this to ConfigurationServiceVersion, the method can directly take in ConfigurationServiceVersion instead of ServiceVersion", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388487184", "createdAt": "2020-03-05T18:42:25Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java", "diffHunk": "@@ -42,20 +53,43 @@ public void setup() throws InvalidKeyException, NoSuchAlgorithmException {\n \n             String endpoint = new ConfigurationClientCredentials(connectionString).getBaseUri();\n             client = new ConfigurationClientBuilder()\n+                .httpClient(httpClient)\n                 .credential(tokenCredential)\n                 .endpoint(endpoint)\n                 .addPolicy(interceptorManager.getRecordPolicy()) // Record\n+                .serviceVersion(serviceVersion)\n                 .buildClient();\n         }\n     }\n \n-    @Test\n-    public void aadAuthenticationAzConfigClient() {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"getTestParameters\")\n+    public void aadAuthenticationAzConfigClient(HttpClient httpClient, ServiceVersion serviceVersion) throws Exception {\n+        setup(httpClient, (ConfigurationServiceVersion) serviceVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjkwODY1OnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0OTo0N1rOFyfnBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToxMDoyN1rOFygVNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTAxMw==", "bodyText": "Should this include service version too?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388491013", "createdAt": "2020-03-05T18:49:47Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java", "diffHunk": "@@ -113,8 +123,9 @@ public void timeoutPolicy() {\n         assertThrows(RuntimeException.class, () -> client.setConfigurationSetting(key, null, value));\n     }\n \n-    @Test\n-    public void nullServiceVersion() {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"getTestParameters\")\n+    public void nullServiceVersion(HttpClient httpClient) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMjgzOA==", "bodyText": "This is testing null Service Version.\nI test it. It is working for not adding version. The display name makes more sense", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388502838", "createdAt": "2020-03-05T19:10:27Z", "author": {"login": "sima-zhu"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java", "diffHunk": "@@ -113,8 +123,9 @@ public void timeoutPolicy() {\n         assertThrows(RuntimeException.class, () -> client.setConfigurationSetting(key, null, value));\n     }\n \n-    @Test\n-    public void nullServiceVersion() {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"getTestParameters\")\n+    public void nullServiceVersion(HttpClient httpClient) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTAxMw=="}, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjkxNTY3OnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MTozMlrOFyfrPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MTozMlrOFyfrPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MjA5NQ==", "bodyText": "If you are setting the pipeline, shouldn't the httpclient be setup along with the pipeline?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388492095", "createdAt": "2020-03-05T18:51:32Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java", "diffHunk": "@@ -157,13 +167,12 @@ public void defaultPipeline() {\n             .retryPolicy(new RetryPolicy())\n             .configuration(Configuration.getGlobalConfiguration())\n             .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n-            .pipeline(new HttpPipelineBuilder().build());\n+            .pipeline(new HttpPipelineBuilder().build())\n+            .httpClient(httpClient == null ? interceptorManager.getPlaybackClient() : httpClient)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjkzOTAzOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1ODowNVrOFyf5ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1ODowNVrOFyf5ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NTgxMQ==", "bodyText": "If you set the pipeline, setting the httpclient on the same builder will have no effect. Pipeline will take precedence.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388495811", "createdAt": "2020-03-05T18:58:05Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java", "diffHunk": "@@ -6,44 +6,71 @@\n import com.azure.core.exception.HttpResponseException;\n import com.azure.core.exception.ResourceModifiedException;\n import com.azure.core.exception.ResourceNotFoundException;\n+import com.azure.core.http.HttpClient;\n import com.azure.core.http.rest.PagedIterable;\n import com.azure.core.util.polling.PollResponse;\n import com.azure.core.util.polling.SyncPoller;\n-import com.azure.security.keyvault.certificates.models.*;\n-import org.junit.jupiter.api.Test;\n \n+import com.azure.security.keyvault.certificates.models.CertificateContact;\n+import com.azure.security.keyvault.certificates.models.CertificateIssuer;\n+import com.azure.security.keyvault.certificates.models.CertificateOperation;\n+import com.azure.security.keyvault.certificates.models.CertificatePolicy;\n+import com.azure.security.keyvault.certificates.models.CertificateProperties;\n+import com.azure.security.keyvault.certificates.models.DeletedCertificate;\n+import com.azure.security.keyvault.certificates.models.IssuerProperties;\n+import com.azure.security.keyvault.certificates.models.KeyVaultCertificate;\n+import com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy;\n+import com.azure.security.keyvault.certificates.models.MergeCertificateOptions;\n import java.io.IOException;\n import java.net.HttpURLConnection;\n import java.security.cert.CertificateException;\n import java.security.cert.X509Certificate;\n-import java.util.*;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;\n+\n+@TestInstance(PER_CLASS)\n public class CertificateClientTest extends CertificateClientTestBase {\n+    private static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n     private CertificateClient client;\n \n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-\n-            client = clientSetup(pipeline -> new CertificateClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        } else {\n-            client = clientSetup(pipeline -> new CertificateClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        }\n     }\n \n+    private void getCertificateClient(HttpClient httpClient,\n+        CertificateServiceVersion serviceVersion) {\n+\n+        client = clientSetup(pipeline -> new CertificateClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(pipeline)\n+            .httpClient(httpClient == null ? interceptorManager.getPlaybackClient() : httpClient)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjk0NjYyOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1OTo1NlrOFyf-Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1OTo1NlrOFyf-Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5Njk5MA==", "bodyText": "This can now be deleted.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388496990", "createdAt": "2020-03-05T18:59:56Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java", "diffHunk": "@@ -30,24 +36,31 @@\n     protected void beforeTest() {\n         beforeTestSetup();\n \n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildAsyncClient());\n-        } else {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .pipeline(pipeline)\n-                .vaultUrl(getEndpoint())\n-                .buildAsyncClient());\n-        }\n+        client = clientSetup(pipeline -> new KeyClientBuilder()\n+            .pipeline(pipeline)\n+            .vaultUrl(getEndpoint())\n+            .buildAsyncClient());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjk0OTQ3OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMDo1MVrOFygAOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToxMjo1MlrOFyga_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NzQ2NA==", "bodyText": "Same as above. Pipeline and http client both should not be set.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388497464", "createdAt": "2020-03-05T19:00:51Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java", "diffHunk": "@@ -30,24 +36,31 @@\n     protected void beforeTest() {\n         beforeTestSetup();\n \n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildAsyncClient());\n-        } else {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .pipeline(pipeline)\n-                .vaultUrl(getEndpoint())\n-                .buildAsyncClient());\n-        }\n+        client = clientSetup(pipeline -> new KeyClientBuilder()\n+            .pipeline(pipeline)\n+            .vaultUrl(getEndpoint())\n+            .buildAsyncClient());\n+    }\n+\n+\n+    private void getKeyAsyncClient(HttpClient httpClient,\n+        KeyServiceVersion serviceVersion) {\n+\n+        client = clientSetup(pipeline -> new KeyClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(pipeline)\n+            .httpClient(httpClient == null ? interceptorManager.getPlaybackClient() : httpClient)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwNDMxOQ==", "bodyText": "Will rework here. Thanks!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388504319", "createdAt": "2020-03-05T19:12:52Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java", "diffHunk": "@@ -30,24 +36,31 @@\n     protected void beforeTest() {\n         beforeTestSetup();\n \n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildAsyncClient());\n-        } else {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .pipeline(pipeline)\n-                .vaultUrl(getEndpoint())\n-                .buildAsyncClient());\n-        }\n+        client = clientSetup(pipeline -> new KeyClientBuilder()\n+            .pipeline(pipeline)\n+            .vaultUrl(getEndpoint())\n+            .buildAsyncClient());\n+    }\n+\n+\n+    private void getKeyAsyncClient(HttpClient httpClient,\n+        KeyServiceVersion serviceVersion) {\n+\n+        client = clientSetup(pipeline -> new KeyClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(pipeline)\n+            .httpClient(httpClient == null ? interceptorManager.getPlaybackClient() : httpClient)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NzQ2NA=="}, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjk1MTE5OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMToyNlrOFygBVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMToyNlrOFygBVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5Nzc1MA==", "bodyText": "This can be deleted.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388497750", "createdAt": "2020-03-05T19:01:26Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java", "diffHunk": "@@ -17,54 +18,65 @@\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class KeyClientTest extends KeyClientTestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n \n     private KeyClient client;\n \n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n+        client = clientSetup(pipeline -> new KeyClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(pipeline)\n+            .buildClient());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjk1MTkwOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMTozN1rOFygBwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMTozN1rOFygBwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5Nzg1Ng==", "bodyText": "Move this to KeyClientTestBase", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388497856", "createdAt": "2020-03-05T19:01:37Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java", "diffHunk": "@@ -17,54 +18,65 @@\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class KeyClientTest extends KeyClientTestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjk1Mzk0OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMjoxOFrOFygDMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMjoxOFrOFygDMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5ODIyNQ==", "bodyText": "Set the httpclient in pipeline instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388498225", "createdAt": "2020-03-05T19:02:18Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java", "diffHunk": "@@ -17,54 +18,65 @@\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class KeyClientTest extends KeyClientTestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n \n     private KeyClient client;\n \n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n+        client = clientSetup(pipeline -> new KeyClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(pipeline)\n+            .buildClient());\n+    }\n \n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        } else {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        }\n+    private void getKeyClient(HttpClient httpClient,\n+        KeyServiceVersion serviceVersion) {\n+\n+        client = clientSetup(pipeline -> new KeyClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(pipeline)\n+            .httpClient(httpClient == null ? interceptorManager.getPlaybackClient() : httpClient)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2475928ecdda5741557f073170e126d8ded29d2"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzA5Mzg0OnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMzoxMToxMVrOFzYE8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOToyMjo1NVrOFz2LBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNjE3OQ==", "bodyText": "It's really critical that for a client library, you only have this method once. All test classes should reference a single version of this method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r389416179", "createdAt": "2020-03-08T23:11:11Z", "author": {"login": "JonathanGiles"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java", "diffHunk": "@@ -184,4 +193,23 @@ private static URI getURI(String endpointFormat, String namespace, String domain\n                 \"Invalid namespace name: %s\", namespace), exception);\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    protected Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                for (ConfigurationServiceVersion serviceVersion : ConfigurationServiceVersion.values()) {\n+                    argumentsList.add(Arguments.of(httpClient, serviceVersion));\n+                }\n+            });\n+        return argumentsList.stream();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "396f69226a5e16b74e67abb871c7fd6b87a83172"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwOTI1Mw==", "bodyText": "Will add TestHelper for having this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r389909253", "createdAt": "2020-03-09T19:22:55Z", "author": {"login": "sima-zhu"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java", "diffHunk": "@@ -184,4 +193,23 @@ private static URI getURI(String endpointFormat, String namespace, String domain\n                 \"Invalid namespace name: %s\", namespace), exception);\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    protected Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                for (ConfigurationServiceVersion serviceVersion : ConfigurationServiceVersion.values()) {\n+                    argumentsList.add(Arguments.of(httpClient, serviceVersion));\n+                }\n+            });\n+        return argumentsList.stream();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNjE3OQ=="}, "originalCommit": {"oid": "396f69226a5e16b74e67abb871c7fd6b87a83172"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjg1MjAyOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo1MDo1NFrOFz79cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzowMjo1M1rOFz8Mlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNDA4Mw==", "bodyText": "The service version should be set on the builder otherwise it will always use the latest.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390004083", "createdAt": "2020-03-09T22:50:54Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java", "diffHunk": "@@ -30,41 +34,43 @@\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n+    }\n \n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        } else {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        }\n+    private void getKeyClient(HttpClient httpClient, KeyServiceVersion serviceVersion) {\n+        HttpPipeline httpPipeline = getHttpPipeline(httpClient, serviceVersion);\n+        client = new KeyClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(httpPipeline)\n+            .buildClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d5f39b6e16bc443dec693945838dd0fbbe47163"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNzk1OQ==", "bodyText": "Ah, right. Making changes in UserAgent one. Forgot to update here.\nThanks!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390007959", "createdAt": "2020-03-09T23:02:53Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java", "diffHunk": "@@ -30,41 +34,43 @@\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n+    }\n \n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        } else {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        }\n+    private void getKeyClient(HttpClient httpClient, KeyServiceVersion serviceVersion) {\n+        HttpPipeline httpPipeline = getHttpPipeline(httpClient, serviceVersion);\n+        client = new KeyClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(httpPipeline)\n+            .buildClient();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNDA4Mw=="}, "originalCommit": {"oid": "8d5f39b6e16bc443dec693945838dd0fbbe47163"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjg1MjQ4OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo1MTowNlrOFz79uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo1MTowNlrOFz79uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNDE1NQ==", "bodyText": "The service version should be set on the builder otherwise it will always use the latest.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390004155", "createdAt": "2020-03-09T22:51:06Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java", "diffHunk": "@@ -29,25 +33,24 @@\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n+    }\n \n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildAsyncClient());\n-        } else {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .pipeline(pipeline)\n-                .vaultUrl(getEndpoint())\n-                .buildAsyncClient());\n-        }\n+\n+    private void getKeyAsyncClient(HttpClient httpClient, KeyServiceVersion serviceVersion) {\n+        HttpPipeline httpPipeline = getHttpPipeline(httpClient, serviceVersion);\n+        client = new KeyClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(httpPipeline)\n+            .buildAsyncClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d5f39b6e16bc443dec693945838dd0fbbe47163"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjg1NDYzOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo1MjoxNVrOFz7_Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNToyMjo1NFrOF25QuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNDQ4Mg==", "bodyText": "All client builders are missing service version.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390004482", "createdAt": "2020-03-09T22:52:15Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTest.java", "diffHunk": "@@ -32,27 +35,20 @@\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        } else {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        }\n     }\n \n-    @Test\n-    public void encryptDecryptRsa() throws Exception {\n+    private void initializeClient(HttpClient httpClient, CryptographyServiceVersion serviceVersion) {\n+        pipeline = getHttpPipeline(httpClient, serviceVersion);\n+        client = new KeyClientBuilder()\n+            .pipeline(pipeline)\n+            .vaultUrl(getEndpoint())\n+            .buildClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d5f39b6e16bc443dec693945838dd0fbbe47163"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwNTU5Mw==", "bodyText": "initializeKeyClient is not the major client we want to test in this class but initializeCryptographyClient. There are another test classes testing KeyClient. What we use for keyClientBuilder are default ones (netty, latest)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393105593", "createdAt": "2020-03-16T15:22:54Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTest.java", "diffHunk": "@@ -32,27 +35,20 @@\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        } else {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        }\n     }\n \n-    @Test\n-    public void encryptDecryptRsa() throws Exception {\n+    private void initializeClient(HttpClient httpClient, CryptographyServiceVersion serviceVersion) {\n+        pipeline = getHttpPipeline(httpClient, serviceVersion);\n+        client = new KeyClientBuilder()\n+            .pipeline(pipeline)\n+            .vaultUrl(getEndpoint())\n+            .buildClient();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNDQ4Mg=="}, "originalCommit": {"oid": "8d5f39b6e16bc443dec693945838dd0fbbe47163"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjg2ODc2OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo1ODo1M1rOFz8HLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo1NzowN1rOF0id-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNjU3NA==", "bodyText": "Also, by default, PR builds should just run the tests with latest version and if environment variable to run tests for all versions is set, then we should do this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390006574", "createdAt": "2020-03-09T22:58:53Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java", "diffHunk": "@@ -437,4 +433,23 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                for (SecretServiceVersion serviceVersion : SecretServiceVersion.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d5f39b6e16bc443dec693945838dd0fbbe47163"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyNjI5OA==", "bodyText": "Do we want to introduce new Environment variable to control this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390026298", "createdAt": "2020-03-10T00:04:08Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java", "diffHunk": "@@ -437,4 +433,23 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                for (SecretServiceVersion serviceVersion : SecretServiceVersion.values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNjU3NA=="}, "originalCommit": {"oid": "8d5f39b6e16bc443dec693945838dd0fbbe47163"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMTcxNA==", "bodyText": "Yes. My proposal to @srnagar yesterday was the following:\n\nAZURE_TEST_SERVICE_VERSIONS = all | latest\nAZURE_TEST_HTTP_CLIENTS = all | netty\n\nIf no environment variable is set, use latest and netty.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390031714", "createdAt": "2020-03-10T00:24:44Z", "author": {"login": "JonathanGiles"}, "path": "sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java", "diffHunk": "@@ -437,4 +433,23 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                for (SecretServiceVersion serviceVersion : SecretServiceVersion.values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNjU3NA=="}, "originalCommit": {"oid": "8d5f39b6e16bc443dec693945838dd0fbbe47163"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0Njk1Mg==", "bodyText": "Talked with Srikanta. We only introduce the AZURE_TEST_SERVICE_VERSIONS variable for this PR for the following two reasons.\n\nThe client library has no ability to tell the httpClient is instance of Netty or Okhttp in current structure.\nHttpClient has no impact on PR validation, as we only run playbackClient for PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390546952", "createdAt": "2020-03-10T19:06:29Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java", "diffHunk": "@@ -437,4 +433,23 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                for (SecretServiceVersion serviceVersion : SecretServiceVersion.values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNjU3NA=="}, "originalCommit": {"oid": "8d5f39b6e16bc443dec693945838dd0fbbe47163"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU3MDMxOA==", "bodyText": "I later spoke to @sima-zhu and provided sample for enabling HttpClient env variable as well in TestBase's shouldClientBeTested() method.\nSo, environment variables for both http client and service version should be supported now.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390570318", "createdAt": "2020-03-10T19:49:49Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java", "diffHunk": "@@ -437,4 +433,23 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                for (SecretServiceVersion serviceVersion : SecretServiceVersion.values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNjU3NA=="}, "originalCommit": {"oid": "8d5f39b6e16bc443dec693945838dd0fbbe47163"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzNTAwMg==", "bodyText": "Yes. Tested over the method. We can support both variables.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390635002", "createdAt": "2020-03-10T21:57:07Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java", "diffHunk": "@@ -437,4 +433,23 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                for (SecretServiceVersion serviceVersion : SecretServiceVersion.values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNjU3NA=="}, "originalCommit": {"oid": "8d5f39b6e16bc443dec693945838dd0fbbe47163"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTcxMjcyOnYy", "diffSide": "RIGHT", "path": "pom.client.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTowMjo0NlrOF1RUhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo1MTowNVrOF1m4SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMjYyOQ==", "bodyText": "Don't you need KV Keys too?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391402629", "createdAt": "2020-03-12T05:02:46Z", "author": {"login": "srnagar"}, "path": "pom.client.xml", "diffHunk": "@@ -958,7 +957,11 @@\n                 --add-opens com.azure.core/com.azure.core.http=ALL-UNNAMED\n                 --add-opens com.azure.core/com.azure.core.http.policy=ALL-UNNAMED\n                 --add-opens com.azure.core/com.azure.core.util=ALL-UNNAMED\n+                --add-opens com.azure.core/com.azure.core.implementation.http=ALL-UNNAMED\n                 --add-opens com.azure.ai.textanalytics/com.azure.ai.textanalytics=ALL-UNNAMED\n+                --add-opens com.azure.data.appconfiguration/com.azure.data.appconfiguration=ALL-UNNAMED\n+                --add-opens com.azure.security.keyvault.certificates/com.azure.security.keyvault.certificates=ALL-UNNAMED\n+                --add-opens com.azure.security.keyvault.secrets/com.azure.security.keyvault.secrets=ALL-UNNAMED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1NTg0OQ==", "bodyText": "I put it over keys pom.\nMoved back to keep them in one place as you comment below.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391755849", "createdAt": "2020-03-12T16:51:05Z", "author": {"login": "sima-zhu"}, "path": "pom.client.xml", "diffHunk": "@@ -958,7 +957,11 @@\n                 --add-opens com.azure.core/com.azure.core.http=ALL-UNNAMED\n                 --add-opens com.azure.core/com.azure.core.http.policy=ALL-UNNAMED\n                 --add-opens com.azure.core/com.azure.core.util=ALL-UNNAMED\n+                --add-opens com.azure.core/com.azure.core.implementation.http=ALL-UNNAMED\n                 --add-opens com.azure.ai.textanalytics/com.azure.ai.textanalytics=ALL-UNNAMED\n+                --add-opens com.azure.data.appconfiguration/com.azure.data.appconfiguration=ALL-UNNAMED\n+                --add-opens com.azure.security.keyvault.certificates/com.azure.security.keyvault.certificates=ALL-UNNAMED\n+                --add-opens com.azure.security.keyvault.secrets/com.azure.security.keyvault.secrets=ALL-UNNAMED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMjYyOQ=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTcxNDA0OnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTowMzo0OVrOF1RVVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTowMzo0OVrOF1RVVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMjgzOQ==", "bodyText": "Now that the MethodSource is a static method, is this still required?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391402839", "createdAt": "2020-03-12T05:03:49Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java", "diffHunk": "@@ -3,29 +3,35 @@\n package com.azure.data.appconfiguration;\n \n import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n import com.azure.core.test.TestBase;\n import com.azure.core.util.Configuration;\n import com.azure.data.appconfiguration.implementation.ConfigurationClientCredentials;\n import com.azure.data.appconfiguration.models.ConfigurationSetting;\n import com.azure.identity.DefaultAzureCredentialBuilder;\n import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n \n import java.security.InvalidKeyException;\n import java.security.NoSuchAlgorithmException;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static com.azure.data.appconfiguration.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;\n \n /**\n  * Unit test for construct a configuration client by using AAD token credential.\n  */\n+@TestInstance(PER_CLASS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTcxNzgwOnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTowNjoyNFrOF1RXjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo1MDoyMVrOF1m2Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMzQwNw==", "bodyText": "Is this still required?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391403407", "createdAt": "2020-03-12T05:06:24Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java", "diffHunk": "@@ -22,9 +22,15 @@\n import java.time.Duration;\n import java.util.Locale;\n import java.util.Objects;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n+import static com.azure.data.appconfiguration.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;\n \n+@TestInstance(PER_CLASS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1NTI3MQ==", "bodyText": "Removed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391755271", "createdAt": "2020-03-12T16:50:21Z", "author": {"login": "sima-zhu"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java", "diffHunk": "@@ -22,9 +22,15 @@\n import java.time.Duration;\n import java.util.Locale;\n import java.util.Objects;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n+import static com.azure.data.appconfiguration.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;\n \n+@TestInstance(PER_CLASS)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMzQwNw=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTcyNDA1OnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNToxMToxN1rOF1RbiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNToxMToxN1rOF1RbiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNDQyNQ==", "bodyText": "Since this test is to use the default pipeline (i.e. whichever httpclient is selected by default along with all other policies), this test should only have service version as a parameter.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391404425", "createdAt": "2020-03-12T05:11:17Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java", "diffHunk": "@@ -127,22 +134,21 @@ public void nullServiceVersion() {\n             .connectionString(connectionString)\n             .retryPolicy(new RetryPolicy())\n             .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n-            .serviceVersion(null);\n+            .serviceVersion(null)\n+            .httpClient(httpClient == null ? interceptorManager.getPlaybackClient() : httpClient);\n \n-        if (interceptorManager.isPlaybackMode()) {\n-            clientBuilder.httpClient(interceptorManager.getPlaybackClient());\n-        } else {\n-            clientBuilder.httpClient(new NettyAsyncHttpClientBuilder().wiretap(true).build())\n-                .addPolicy(interceptorManager.getRecordPolicy());\n+        if (!interceptorManager.isPlaybackMode()) {\n+            clientBuilder.addPolicy(interceptorManager.getRecordPolicy());\n         }\n \n         ConfigurationSetting addedSetting = clientBuilder.buildClient().setConfigurationSetting(key, null, value);\n         Assertions.assertEquals(addedSetting.getKey(), key);\n         Assertions.assertEquals(addedSetting.getValue(), value);\n     }\n \n-    @Test\n-    public void defaultPipeline() {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.data.appconfiguration.TestHelper#getTestParameters\")\n+    public void defaultPipeline(HttpClient httpClient, ConfigurationServiceVersion serviceVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTcyNTA0OnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNToxMTo1NVrOF1RcJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo1MDoxMFrOF1m1pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNDU4Mg==", "bodyText": "Check if this is still required.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391404582", "createdAt": "2020-03-12T05:11:55Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientTest.java", "diffHunk": "@@ -5,31 +5,37 @@\n import com.azure.core.exception.HttpResponseException;\n import com.azure.core.exception.ResourceExistsException;\n import com.azure.core.exception.ResourceNotFoundException;\n+import com.azure.core.http.HttpClient;\n import com.azure.core.http.HttpHeaders;\n-import com.azure.core.http.netty.NettyAsyncHttpClientBuilder;\n import com.azure.core.http.policy.AddHeadersFromContextPolicy;\n import com.azure.core.http.policy.HttpLogDetailLevel;\n import com.azure.core.http.policy.HttpLogOptions;\n import com.azure.core.http.policy.RetryPolicy;\n import com.azure.core.http.rest.PagedIterable;\n import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestMode;\n import com.azure.core.util.Context;\n import com.azure.core.util.logging.ClientLogger;\n import com.azure.data.appconfiguration.models.ConfigurationSetting;\n import com.azure.data.appconfiguration.models.SettingFields;\n import com.azure.data.appconfiguration.models.SettingSelector;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Disabled;\n-import org.junit.jupiter.api.Test;\n \n import java.net.HttpURLConnection;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.stream.Collectors;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n+import static com.azure.data.appconfiguration.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;\n \n+@TestInstance(PER_CLASS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1NTE3NA==", "bodyText": "Removed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391755174", "createdAt": "2020-03-12T16:50:10Z", "author": {"login": "sima-zhu"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientTest.java", "diffHunk": "@@ -5,31 +5,37 @@\n import com.azure.core.exception.HttpResponseException;\n import com.azure.core.exception.ResourceExistsException;\n import com.azure.core.exception.ResourceNotFoundException;\n+import com.azure.core.http.HttpClient;\n import com.azure.core.http.HttpHeaders;\n-import com.azure.core.http.netty.NettyAsyncHttpClientBuilder;\n import com.azure.core.http.policy.AddHeadersFromContextPolicy;\n import com.azure.core.http.policy.HttpLogDetailLevel;\n import com.azure.core.http.policy.HttpLogOptions;\n import com.azure.core.http.policy.RetryPolicy;\n import com.azure.core.http.rest.PagedIterable;\n import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestMode;\n import com.azure.core.util.Context;\n import com.azure.core.util.logging.ClientLogger;\n import com.azure.data.appconfiguration.models.ConfigurationSetting;\n import com.azure.data.appconfiguration.models.SettingFields;\n import com.azure.data.appconfiguration.models.SettingSelector;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Disabled;\n-import org.junit.jupiter.api.Test;\n \n import java.net.HttpURLConnection;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.stream.Collectors;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n+import static com.azure.data.appconfiguration.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;\n \n+@TestInstance(PER_CLASS)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNDU4Mg=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTcyNzE1OnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNToxMzoxNVrOF1RdZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNToxMzoxNVrOF1RdZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNDkwMQ==", "bodyText": "package-private instead of protected.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391404901", "createdAt": "2020-03-12T05:13:15Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.appconfiguration;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+class TestHelper extends TestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    protected static Stream<Arguments> getTestParameters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTcyODUyOnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNToxMzo1OFrOF1ReFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNToxMzo1OFrOF1ReFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNTA3Nw==", "bodyText": "private instead of protected", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391405077", "createdAt": "2020-03-12T05:13:58Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.appconfiguration;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+class TestHelper extends TestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    protected static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(ConfigurationServiceVersion.values()).filter(TestHelper::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    protected static boolean shouldServiceVersionBeTested(ConfigurationServiceVersion serviceVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTczMjM3OnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNToxNjozOVrOF1RgWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNToxNjozOVrOF1RgWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNTY1Nw==", "bodyText": "This should check what was in the environment variable before returning true.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391405657", "createdAt": "2020-03-12T05:16:39Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.appconfiguration;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+class TestHelper extends TestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    protected static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(ConfigurationServiceVersion.values()).filter(TestHelper::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    protected static boolean shouldServiceVersionBeTested(ConfigurationServiceVersion serviceVersion) {\n+        if (Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS) == null) {\n+            return ConfigurationServiceVersion.getLatest().equals(serviceVersion);\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTczNzY2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNToyMDozOFrOF1Rjng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTowNzozMFrOF24nBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNjQ5NA==", "bodyText": "Replace this comment with what this method is doing. We are using Netty http client as default if env variable is not set. If it's set to ALL, all HttpClients in the classpath will be tested else the name of the HttpClient class should match env variable.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391406494", "createdAt": "2020-03-12T05:20:38Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "diffHunk": "@@ -121,6 +131,37 @@ protected void beforeTest() {\n     protected void afterTest() {\n     }\n \n+    /**\n+     * Returns a list of {@link HttpClient HttpClients} that should be tested.\n+     * @return A list of {@link HttpClient HttpClients} to be tested.\n+     */\n+    protected static Stream<HttpClient> getHttpClients() {\n+        if (testMode == TestMode.PLAYBACK) {\n+            // Call to @MethodSource method happens @BeforeEach call, so the interceptorManager is\n+            // not yet initialized. So, playbackClient will not be available until later.\n+            return Stream.of(new HttpClient[]{null});\n+        }\n+        return HttpClientProviders.getAllHttpClients().stream().filter(TestBase::shouldClientBeTested);\n+    }\n+\n+    /**\n+     * Filter out the http clients needs to run in test framework\n+     * @param client Http client needs to check\n+     * @return Boolean indicates whether filters out the client or not.\n+     */\n+    protected static boolean shouldClientBeTested(HttpClient client) {\n+        // This is for when we decide to filter some http clients based on some criteria\n+        // to reduce the time take to run the tests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTYyMA==", "bodyText": "Update the comment here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392555620", "createdAt": "2020-03-14T04:26:18Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "diffHunk": "@@ -121,6 +131,37 @@ protected void beforeTest() {\n     protected void afterTest() {\n     }\n \n+    /**\n+     * Returns a list of {@link HttpClient HttpClients} that should be tested.\n+     * @return A list of {@link HttpClient HttpClients} to be tested.\n+     */\n+    protected static Stream<HttpClient> getHttpClients() {\n+        if (testMode == TestMode.PLAYBACK) {\n+            // Call to @MethodSource method happens @BeforeEach call, so the interceptorManager is\n+            // not yet initialized. So, playbackClient will not be available until later.\n+            return Stream.of(new HttpClient[]{null});\n+        }\n+        return HttpClientProviders.getAllHttpClients().stream().filter(TestBase::shouldClientBeTested);\n+    }\n+\n+    /**\n+     * Filter out the http clients needs to run in test framework\n+     * @param client Http client needs to check\n+     * @return Boolean indicates whether filters out the client or not.\n+     */\n+    protected static boolean shouldClientBeTested(HttpClient client) {\n+        // This is for when we decide to filter some http clients based on some criteria\n+        // to reduce the time take to run the tests.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNjQ5NA=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5NDkxNw==", "bodyText": "Removed as there is JavaDoc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393094917", "createdAt": "2020-03-16T15:07:30Z", "author": {"login": "sima-zhu"}, "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "diffHunk": "@@ -121,6 +131,37 @@ protected void beforeTest() {\n     protected void afterTest() {\n     }\n \n+    /**\n+     * Returns a list of {@link HttpClient HttpClients} that should be tested.\n+     * @return A list of {@link HttpClient HttpClients} to be tested.\n+     */\n+    protected static Stream<HttpClient> getHttpClients() {\n+        if (testMode == TestMode.PLAYBACK) {\n+            // Call to @MethodSource method happens @BeforeEach call, so the interceptorManager is\n+            // not yet initialized. So, playbackClient will not be available until later.\n+            return Stream.of(new HttpClient[]{null});\n+        }\n+        return HttpClientProviders.getAllHttpClients().stream().filter(TestBase::shouldClientBeTested);\n+    }\n+\n+    /**\n+     * Filter out the http clients needs to run in test framework\n+     * @param client Http client needs to check\n+     * @return Boolean indicates whether filters out the client or not.\n+     */\n+    protected static boolean shouldClientBeTested(HttpClient client) {\n+        // This is for when we decide to filter some http clients based on some criteria\n+        // to reduce the time take to run the tests.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNjQ5NA=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTczODQ5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNToyMToxMVrOF1RkGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzoxNTo1NlrOF1n0fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNjYxNg==", "bodyText": "This should support a comma-separated list of HttpClient names.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391406616", "createdAt": "2020-03-12T05:21:11Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "diffHunk": "@@ -121,6 +131,37 @@ protected void beforeTest() {\n     protected void afterTest() {\n     }\n \n+    /**\n+     * Returns a list of {@link HttpClient HttpClients} that should be tested.\n+     * @return A list of {@link HttpClient HttpClients} to be tested.\n+     */\n+    protected static Stream<HttpClient> getHttpClients() {\n+        if (testMode == TestMode.PLAYBACK) {\n+            // Call to @MethodSource method happens @BeforeEach call, so the interceptorManager is\n+            // not yet initialized. So, playbackClient will not be available until later.\n+            return Stream.of(new HttpClient[]{null});\n+        }\n+        return HttpClientProviders.getAllHttpClients().stream().filter(TestBase::shouldClientBeTested);\n+    }\n+\n+    /**\n+     * Filter out the http clients needs to run in test framework\n+     * @param client Http client needs to check\n+     * @return Boolean indicates whether filters out the client or not.\n+     */\n+    protected static boolean shouldClientBeTested(HttpClient client) {\n+        // This is for when we decide to filter some http clients based on some criteria\n+        // to reduce the time take to run the tests.\n+        String configuredHttpClientToTest = Configuration.getGlobalConfiguration().get(AZURE_TEST_HTTP_CLIENTS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3MTI2Mw==", "bodyText": "Made changes to support comma.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391771263", "createdAt": "2020-03-12T17:15:56Z", "author": {"login": "sima-zhu"}, "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "diffHunk": "@@ -121,6 +131,37 @@ protected void beforeTest() {\n     protected void afterTest() {\n     }\n \n+    /**\n+     * Returns a list of {@link HttpClient HttpClients} that should be tested.\n+     * @return A list of {@link HttpClient HttpClients} to be tested.\n+     */\n+    protected static Stream<HttpClient> getHttpClients() {\n+        if (testMode == TestMode.PLAYBACK) {\n+            // Call to @MethodSource method happens @BeforeEach call, so the interceptorManager is\n+            // not yet initialized. So, playbackClient will not be available until later.\n+            return Stream.of(new HttpClient[]{null});\n+        }\n+        return HttpClientProviders.getAllHttpClients().stream().filter(TestBase::shouldClientBeTested);\n+    }\n+\n+    /**\n+     * Filter out the http clients needs to run in test framework\n+     * @param client Http client needs to check\n+     * @return Boolean indicates whether filters out the client or not.\n+     */\n+    protected static boolean shouldClientBeTested(HttpClient client) {\n+        // This is for when we decide to filter some http clients based on some criteria\n+        // to reduce the time take to run the tests.\n+        String configuredHttpClientToTest = Configuration.getGlobalConfiguration().get(AZURE_TEST_HTTP_CLIENTS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNjYxNg=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc0NTQ0OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNToyNjowMVrOF1RoNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoyNjoxN1rOF1l40Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNzY2OQ==", "bodyText": "Why's getCertificateClient() called twice?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391407669", "createdAt": "2020-03-12T05:26:01Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java", "diffHunk": "@@ -6,44 +6,65 @@\n import com.azure.core.exception.HttpResponseException;\n import com.azure.core.exception.ResourceModifiedException;\n import com.azure.core.exception.ResourceNotFoundException;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n import com.azure.core.http.rest.PagedIterable;\n import com.azure.core.util.polling.PollResponse;\n import com.azure.core.util.polling.SyncPoller;\n-import com.azure.security.keyvault.certificates.models.*;\n-import org.junit.jupiter.api.Test;\n \n+import com.azure.security.keyvault.certificates.models.CertificateContact;\n+import com.azure.security.keyvault.certificates.models.CertificateContentType;\n+import com.azure.security.keyvault.certificates.models.CertificateIssuer;\n+import com.azure.security.keyvault.certificates.models.CertificateOperation;\n+import com.azure.security.keyvault.certificates.models.CertificatePolicy;\n+import com.azure.security.keyvault.certificates.models.CertificateProperties;\n+import com.azure.security.keyvault.certificates.models.DeletedCertificate;\n+import com.azure.security.keyvault.certificates.models.IssuerProperties;\n+import com.azure.security.keyvault.certificates.models.KeyVaultCertificate;\n+import com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy;\n+import com.azure.security.keyvault.certificates.models.MergeCertificateOptions;\n import java.io.IOException;\n import java.net.HttpURLConnection;\n import java.security.cert.CertificateException;\n import java.security.cert.X509Certificate;\n-import java.util.*;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n public class CertificateClientTest extends CertificateClientTestBase {\n     private CertificateClient client;\n \n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-\n-            client = clientSetup(pipeline -> new CertificateClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        } else {\n-            client = clientSetup(pipeline -> new CertificateClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        }\n     }\n \n+    private void getCertificateClient(HttpClient httpClient,\n+        CertificateServiceVersion serviceVersion) {\n+        HttpPipeline httpPipeline = getHttpPipeline(httpClient, serviceVersion);\n+        client = new CertificateClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(httpPipeline)\n+            .serviceVersion(serviceVersion)\n+            .buildClient();\n+    }\n \n-    @Test\n-    public void createCertificate() {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"getTestParameters\")\n+    public void createCertificate(HttpClient httpClient, CertificateServiceVersion serviceVersion) {\n+        getCertificateClient(httpClient, serviceVersion);\n         createCertificateRunner((policy) -> {\n+            getCertificateClient(httpClient, serviceVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczOTYwMQ==", "bodyText": "Paste error. Removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391739601", "createdAt": "2020-03-12T16:26:17Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java", "diffHunk": "@@ -6,44 +6,65 @@\n import com.azure.core.exception.HttpResponseException;\n import com.azure.core.exception.ResourceModifiedException;\n import com.azure.core.exception.ResourceNotFoundException;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n import com.azure.core.http.rest.PagedIterable;\n import com.azure.core.util.polling.PollResponse;\n import com.azure.core.util.polling.SyncPoller;\n-import com.azure.security.keyvault.certificates.models.*;\n-import org.junit.jupiter.api.Test;\n \n+import com.azure.security.keyvault.certificates.models.CertificateContact;\n+import com.azure.security.keyvault.certificates.models.CertificateContentType;\n+import com.azure.security.keyvault.certificates.models.CertificateIssuer;\n+import com.azure.security.keyvault.certificates.models.CertificateOperation;\n+import com.azure.security.keyvault.certificates.models.CertificatePolicy;\n+import com.azure.security.keyvault.certificates.models.CertificateProperties;\n+import com.azure.security.keyvault.certificates.models.DeletedCertificate;\n+import com.azure.security.keyvault.certificates.models.IssuerProperties;\n+import com.azure.security.keyvault.certificates.models.KeyVaultCertificate;\n+import com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy;\n+import com.azure.security.keyvault.certificates.models.MergeCertificateOptions;\n import java.io.IOException;\n import java.net.HttpURLConnection;\n import java.security.cert.CertificateException;\n import java.security.cert.X509Certificate;\n-import java.util.*;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n public class CertificateClientTest extends CertificateClientTestBase {\n     private CertificateClient client;\n \n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-\n-            client = clientSetup(pipeline -> new CertificateClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        } else {\n-            client = clientSetup(pipeline -> new CertificateClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        }\n     }\n \n+    private void getCertificateClient(HttpClient httpClient,\n+        CertificateServiceVersion serviceVersion) {\n+        HttpPipeline httpPipeline = getHttpPipeline(httpClient, serviceVersion);\n+        client = new CertificateClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(httpPipeline)\n+            .serviceVersion(serviceVersion)\n+            .buildClient();\n+    }\n \n-    @Test\n-    public void createCertificate() {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"getTestParameters\")\n+    public void createCertificate(HttpClient httpClient, CertificateServiceVersion serviceVersion) {\n+        getCertificateClient(httpClient, serviceVersion);\n         createCertificateRunner((policy) -> {\n+            getCertificateClient(httpClient, serviceVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNzY2OQ=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc0NzE4OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNToyNzoxNFrOF1RpSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoyNToxOFrOF1l18g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNzk0NA==", "bodyText": "Since this is not returning anything, consider renaming this to createCertificateClient() or setCertificateClient()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391407944", "createdAt": "2020-03-12T05:27:14Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java", "diffHunk": "@@ -6,44 +6,65 @@\n import com.azure.core.exception.HttpResponseException;\n import com.azure.core.exception.ResourceModifiedException;\n import com.azure.core.exception.ResourceNotFoundException;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n import com.azure.core.http.rest.PagedIterable;\n import com.azure.core.util.polling.PollResponse;\n import com.azure.core.util.polling.SyncPoller;\n-import com.azure.security.keyvault.certificates.models.*;\n-import org.junit.jupiter.api.Test;\n \n+import com.azure.security.keyvault.certificates.models.CertificateContact;\n+import com.azure.security.keyvault.certificates.models.CertificateContentType;\n+import com.azure.security.keyvault.certificates.models.CertificateIssuer;\n+import com.azure.security.keyvault.certificates.models.CertificateOperation;\n+import com.azure.security.keyvault.certificates.models.CertificatePolicy;\n+import com.azure.security.keyvault.certificates.models.CertificateProperties;\n+import com.azure.security.keyvault.certificates.models.DeletedCertificate;\n+import com.azure.security.keyvault.certificates.models.IssuerProperties;\n+import com.azure.security.keyvault.certificates.models.KeyVaultCertificate;\n+import com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy;\n+import com.azure.security.keyvault.certificates.models.MergeCertificateOptions;\n import java.io.IOException;\n import java.net.HttpURLConnection;\n import java.security.cert.CertificateException;\n import java.security.cert.X509Certificate;\n-import java.util.*;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n public class CertificateClientTest extends CertificateClientTestBase {\n     private CertificateClient client;\n \n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-\n-            client = clientSetup(pipeline -> new CertificateClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        } else {\n-            client = clientSetup(pipeline -> new CertificateClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        }\n     }\n \n+    private void getCertificateClient(HttpClient httpClient,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczODg2Ng==", "bodyText": "Named to createCertificateClient", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391738866", "createdAt": "2020-03-12T16:25:18Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java", "diffHunk": "@@ -6,44 +6,65 @@\n import com.azure.core.exception.HttpResponseException;\n import com.azure.core.exception.ResourceModifiedException;\n import com.azure.core.exception.ResourceNotFoundException;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n import com.azure.core.http.rest.PagedIterable;\n import com.azure.core.util.polling.PollResponse;\n import com.azure.core.util.polling.SyncPoller;\n-import com.azure.security.keyvault.certificates.models.*;\n-import org.junit.jupiter.api.Test;\n \n+import com.azure.security.keyvault.certificates.models.CertificateContact;\n+import com.azure.security.keyvault.certificates.models.CertificateContentType;\n+import com.azure.security.keyvault.certificates.models.CertificateIssuer;\n+import com.azure.security.keyvault.certificates.models.CertificateOperation;\n+import com.azure.security.keyvault.certificates.models.CertificatePolicy;\n+import com.azure.security.keyvault.certificates.models.CertificateProperties;\n+import com.azure.security.keyvault.certificates.models.DeletedCertificate;\n+import com.azure.security.keyvault.certificates.models.IssuerProperties;\n+import com.azure.security.keyvault.certificates.models.KeyVaultCertificate;\n+import com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy;\n+import com.azure.security.keyvault.certificates.models.MergeCertificateOptions;\n import java.io.IOException;\n import java.net.HttpURLConnection;\n import java.security.cert.CertificateException;\n import java.security.cert.X509Certificate;\n-import java.util.*;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n public class CertificateClientTest extends CertificateClientTestBase {\n     private CertificateClient client;\n \n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-\n-            client = clientSetup(pipeline -> new CertificateClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        } else {\n-            client = clientSetup(pipeline -> new CertificateClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        }\n     }\n \n+    private void getCertificateClient(HttpClient httpClient,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNzk0NA=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc1MDM5OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNToyOTozOFrOF1RrQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNToyOTozOFrOF1RrQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwODQ1MA==", "bodyText": "nit: delete this line", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391408450", "createdAt": "2020-03-12T05:29:38Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "diffHunk": "@@ -64,7 +65,8 @@ protected String getTestName() {\n     void beforeTestSetup() {\n     }\n \n-    <T> T clientSetup(Function<HttpPipeline, T> clientBuilder) {\n+    HttpPipeline getHttpPipeline(HttpClient httpClient, CertificateServiceVersion serviceVersion) {\n+   // <T> T clientSetup(Function<HttpPipeline, T> clientBuilder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc1MzQyOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTozMTo0OVrOF1RtTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDozMjo1NlrOF2Xt5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwODk3NQ==", "bodyText": "This should check the environment variable before returning true.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391408975", "createdAt": "2020-03-12T05:31:49Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "diffHunk": "@@ -605,5 +592,31 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(CertificateServiceVersion.values()).filter(\n+                    CertificateClientTestBase::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    static boolean shouldServiceVersionBeTested(CertificateServiceVersion serviceVersion) {\n+        if (Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS) == null) {\n+            return CertificateServiceVersion.getLatest().equals(serviceVersion);\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 428}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NjAwNA==", "bodyText": "This should be updated too.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392556004", "createdAt": "2020-03-14T04:32:56Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "diffHunk": "@@ -605,5 +592,31 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(CertificateServiceVersion.values()).filter(\n+                    CertificateClientTestBase::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    static boolean shouldServiceVersionBeTested(CertificateServiceVersion serviceVersion) {\n+        if (Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS) == null) {\n+            return CertificateServiceVersion.getLatest().equals(serviceVersion);\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwODk3NQ=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 428}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc1NDg1OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTozMjo1M1rOF1RuJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoyODowMVrOF1l9hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwOTE4OQ==", "bodyText": "The file name was changed. Was this intended?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391409189", "createdAt": "2020-03-12T05:32:53Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "diffHunk": "@@ -402,11 +396,11 @@ void importCertificateRunner(Consumer<ImportCertificateOptions> testRunner) {\n     }\n \n     @Test\n-    public abstract  void importPemCertificate() throws IOException;\n+    public abstract  void importPemCertificate(HttpClient httpClient, CertificateServiceVersion serviceVersion) throws IOException;\n \n     void importPemCertificateRunner(Consumer<ImportCertificateOptions> testRunner) throws IOException {\n \n-        byte[] certificateContent = readCertificate(\"pemCert.pem\");\n+        byte[] certificateContent = readCertificate(\"certificate.pem\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 365}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0MDgwNg==", "bodyText": "This is merge issue. Thanks for catching this.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391740806", "createdAt": "2020-03-12T16:28:01Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "diffHunk": "@@ -402,11 +396,11 @@ void importCertificateRunner(Consumer<ImportCertificateOptions> testRunner) {\n     }\n \n     @Test\n-    public abstract  void importPemCertificate() throws IOException;\n+    public abstract  void importPemCertificate(HttpClient httpClient, CertificateServiceVersion serviceVersion) throws IOException;\n \n     void importPemCertificateRunner(Consumer<ImportCertificateOptions> testRunner) throws IOException {\n \n-        byte[] certificateContent = readCertificate(\"pemCert.pem\");\n+        byte[] certificateContent = readCertificate(\"certificate.pem\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwOTE4OQ=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 365}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc1ODkwOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTozNTozNFrOF1RwjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjozMTowMVrOF1mFog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwOTgwNA==", "bodyText": "Why was this change required?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391409804", "createdAt": "2020-03-12T05:35:34Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "diffHunk": "@@ -419,24 +413,17 @@ void importPemCertificateRunner(Consumer<ImportCertificateOptions> testRunner) t\n         testRunner.accept(importCertificateOptions);\n     }\n \n+    @Test\n+    public abstract  void mergeCertificateNotFound(HttpClient httpClient, CertificateServiceVersion serviceVersion);\n+\n     private byte[] readCertificate(String certName) throws IOException {\n         String pemPath = getClass().getClassLoader().getResource(certName).getPath();\n-        String pemCert = \"\";\n-        BufferedReader br = new BufferedReader(new FileReader(pemPath));\n-        try {\n-            String line;\n-            while ((line = br.readLine()) != null) {\n-                pemCert += line + \"\\n\";\n-            }\n-        } finally {\n-            br.close();\n+        if (pemPath.contains(\":\")) {\n+            pemPath = pemPath.substring(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 388}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0Mjg4Mg==", "bodyText": "Not merge the most recent.\nChanged to master one.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391742882", "createdAt": "2020-03-12T16:31:01Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "diffHunk": "@@ -419,24 +413,17 @@ void importPemCertificateRunner(Consumer<ImportCertificateOptions> testRunner) t\n         testRunner.accept(importCertificateOptions);\n     }\n \n+    @Test\n+    public abstract  void mergeCertificateNotFound(HttpClient httpClient, CertificateServiceVersion serviceVersion);\n+\n     private byte[] readCertificate(String certName) throws IOException {\n         String pemPath = getClass().getClassLoader().getResource(certName).getPath();\n-        String pemCert = \"\";\n-        BufferedReader br = new BufferedReader(new FileReader(pemPath));\n-        try {\n-            String line;\n-            while ((line = br.readLine()) != null) {\n-                pemCert += line + \"\\n\";\n-            }\n-        } finally {\n-            br.close();\n+        if (pemPath.contains(\":\")) {\n+            pemPath = pemPath.substring(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwOTgwNA=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 388}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc2MTIzOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTozNjo0OFrOF1Rxxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjozMTo0MVrOF1mHMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMDExOA==", "bodyText": "Since all other --add-opens are in pom.client.xml, it's better to move this there to keep them all in one place.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391410118", "createdAt": "2020-03-12T05:36:48Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/pom.xml", "diffHunk": "@@ -41,6 +41,11 @@\n         <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-surefire-plugin;external_dependency} -->\n         <configuration>\n           <rerunFailingTestsCount>3</rerunFailingTestsCount>\n+          <argLine>\n+            --add-exports com.azure.core/com.azure.core.implementation.http=ALL-UNNAMED\n+            --add-opens com.azure.security.keyvault.keys/com.azure.security.keyvault.keys.cryptography=ALL-UNNAMED\n+            --add-opens com.azure.security.keyvault.keys/com.azure.security.keyvault.keys=ALL-UNNAMED\n+          </argLine>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0MzI4Mw==", "bodyText": "OK. Will move there.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391743283", "createdAt": "2020-03-12T16:31:41Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-keys/pom.xml", "diffHunk": "@@ -41,6 +41,11 @@\n         <version>3.0.0-M3</version> <!-- {x-version-update;org.apache.maven.plugins:maven-surefire-plugin;external_dependency} -->\n         <configuration>\n           <rerunFailingTestsCount>3</rerunFailingTestsCount>\n+          <argLine>\n+            --add-exports com.azure.core/com.azure.core.implementation.http=ALL-UNNAMED\n+            --add-opens com.azure.security.keyvault.keys/com.azure.security.keyvault.keys.cryptography=ALL-UNNAMED\n+            --add-opens com.azure.security.keyvault.keys/com.azure.security.keyvault.keys=ALL-UNNAMED\n+          </argLine>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMDExOA=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc2MzA0OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTozODoxOFrOF1RzCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTozODoxOFrOF1RzCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMDQ0Mw==", "bodyText": "Update name of the method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391410443", "createdAt": "2020-03-12T05:38:18Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java", "diffHunk": "@@ -29,25 +33,25 @@\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n+    }\n \n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildAsyncClient());\n-        } else {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .pipeline(pipeline)\n-                .vaultUrl(getEndpoint())\n-                .buildAsyncClient());\n-        }\n+\n+    private void getKeyAsyncClient(HttpClient httpClient, KeyServiceVersion serviceVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc2NjAwOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo0MDoyNVrOF1R09g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo1MjoxN1rOF1m7Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMDkzNA==", "bodyText": "This method is a duplicate of getTestParameters() method in KeyClientTestBase.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391410934", "createdAt": "2020-03-12T05:40:25Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java", "diffHunk": "@@ -426,4 +475,29 @@ private DeletedKey pollOnKeyPurge(String keyName) {\n         return null;\n     }\n \n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 342}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1NjU5OA==", "bodyText": "Removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391756598", "createdAt": "2020-03-12T16:52:17Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java", "diffHunk": "@@ -426,4 +475,29 @@ private DeletedKey pollOnKeyPurge(String keyName) {\n         return null;\n     }\n \n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMDkzNA=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 342}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc3MzMzOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo0NToxOVrOF1R5eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDozOTozNlrOF3E6vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjA5MA==", "bodyText": "Shouldn't the same pipeline be used for both KeyClient and CryptographyClient?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391412090", "createdAt": "2020-03-12T05:45:19Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTest.java", "diffHunk": "@@ -32,35 +36,34 @@\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        } else {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        }\n     }\n \n-    @Test\n-    public void encryptDecryptRsa() throws Exception {\n+    private void initializeKeyClient(HttpClient httpClient) {\n+        pipeline = getHttpPipeline(httpClient, KeyServiceVersion.getLatest());\n+        client = new KeyClientBuilder()\n+            .pipeline(pipeline)\n+            .vaultUrl(getEndpoint())\n+            .buildClient();\n+    }\n+\n+    private CryptographyClient initializeCryptographyClient(String keyId, HttpClient httpClient, CryptographyServiceVersion serviceVersion) {\n+        pipeline = getHttpPipeline(httpClient, serviceVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0Nzk3OA==", "bodyText": "Not exactly, initializeKeyClient is using the latest KeyServiceVersion, as the main purpose of the test is to test over CryptographyServiceClient, which is using CryptographyServiceVersion. There are some other tests for KeyClient", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391747978", "createdAt": "2020-03-12T16:39:04Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTest.java", "diffHunk": "@@ -32,35 +36,34 @@\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        } else {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        }\n     }\n \n-    @Test\n-    public void encryptDecryptRsa() throws Exception {\n+    private void initializeKeyClient(HttpClient httpClient) {\n+        pipeline = getHttpPipeline(httpClient, KeyServiceVersion.getLatest());\n+        client = new KeyClientBuilder()\n+            .pipeline(pipeline)\n+            .vaultUrl(getEndpoint())\n+            .buildClient();\n+    }\n+\n+    private CryptographyClient initializeCryptographyClient(String keyId, HttpClient httpClient, CryptographyServiceVersion serviceVersion) {\n+        pipeline = getHttpPipeline(httpClient, serviceVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjA5MA=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NjM2NA==", "bodyText": "Before this change, the same pipeline was used for both.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392556364", "createdAt": "2020-03-14T04:40:39Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTest.java", "diffHunk": "@@ -32,35 +36,34 @@\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        } else {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        }\n     }\n \n-    @Test\n-    public void encryptDecryptRsa() throws Exception {\n+    private void initializeKeyClient(HttpClient httpClient) {\n+        pipeline = getHttpPipeline(httpClient, KeyServiceVersion.getLatest());\n+        client = new KeyClientBuilder()\n+            .pipeline(pipeline)\n+            .vaultUrl(getEndpoint())\n+            .buildClient();\n+    }\n+\n+    private CryptographyClient initializeCryptographyClient(String keyId, HttpClient httpClient, CryptographyServiceVersion serviceVersion) {\n+        pipeline = getHttpPipeline(httpClient, serviceVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjA5MA=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5NjU3NA==", "bodyText": "Talked offline. This does not affect the logic for tests. Besides of that, These two do not use exactly same pipelines. UserAgentPolicy are not the same.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393296574", "createdAt": "2020-03-16T20:39:36Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTest.java", "diffHunk": "@@ -32,35 +36,34 @@\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        } else {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        }\n     }\n \n-    @Test\n-    public void encryptDecryptRsa() throws Exception {\n+    private void initializeKeyClient(HttpClient httpClient) {\n+        pipeline = getHttpPipeline(httpClient, KeyServiceVersion.getLatest());\n+        client = new KeyClientBuilder()\n+            .pipeline(pipeline)\n+            .vaultUrl(getEndpoint())\n+            .buildClient();\n+    }\n+\n+    private CryptographyClient initializeCryptographyClient(String keyId, HttpClient httpClient, CryptographyServiceVersion serviceVersion) {\n+        pipeline = getHttpPipeline(httpClient, serviceVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjA5MA=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc3NjAzOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo0NzoxMVrOF1R7Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo0MToyMlrOF1mfAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjUyNw==", "bodyText": "KeyServiceVersion should also be parameterized", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391412527", "createdAt": "2020-03-12T05:47:11Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTest.java", "diffHunk": "@@ -32,35 +36,34 @@\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        } else {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        }\n     }\n \n-    @Test\n-    public void encryptDecryptRsa() throws Exception {\n+    private void initializeKeyClient(HttpClient httpClient) {\n+        pipeline = getHttpPipeline(httpClient, KeyServiceVersion.getLatest());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0OTM3Nw==", "bodyText": "Explained above.\nThe test class is to test over CryptographyServiceClient instead of KeyClient.\nThere are some other test classes which tests KeyClient, and we have parameterized test on KeyServiceVersion over there.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391749377", "createdAt": "2020-03-12T16:41:22Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTest.java", "diffHunk": "@@ -32,35 +36,34 @@\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        } else {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        }\n     }\n \n-    @Test\n-    public void encryptDecryptRsa() throws Exception {\n+    private void initializeKeyClient(HttpClient httpClient) {\n+        pipeline = getHttpPipeline(httpClient, KeyServiceVersion.getLatest());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjUyNw=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc3NzUxOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo0ODoxM1rOF1R8Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo0Mjo1MlrOF1miog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjc1NA==", "bodyText": "Since this is cryptography client test, should this be CryptographServiceVersion?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391412754", "createdAt": "2020-03-12T05:48:13Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTestBase.java", "diffHunk": "@@ -209,4 +202,23 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    protected Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                for (KeyServiceVersion serviceVersion : KeyServiceVersion.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1MDMwNg==", "bodyText": "This is left over. I forgot to remove.\nAll tests here are using the helper method under TestHelper.\nRemoved", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391750306", "createdAt": "2020-03-12T16:42:52Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTestBase.java", "diffHunk": "@@ -209,4 +202,23 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    protected Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                for (KeyServiceVersion serviceVersion : KeyServiceVersion.values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjc1NA=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTc3ODgwOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/KeyEncryptionKeyClientTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNTo0OToxMlrOF1R84Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo0MzoyMVrOF1mjwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjk2MQ==", "bodyText": "Should this also include service versions?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391412961", "createdAt": "2020-03-12T05:49:12Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/KeyEncryptionKeyClientTestBase.java", "diffHunk": "@@ -176,4 +159,21 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    protected Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                argumentsList.add(Arguments.of(httpClient));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1MDU5NA==", "bodyText": "Left over. It is supposed to remove.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391750594", "createdAt": "2020-03-12T16:43:21Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/KeyEncryptionKeyClientTestBase.java", "diffHunk": "@@ -176,4 +159,21 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    protected Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                argumentsList.add(Arguments.of(httpClient));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjk2MQ=="}, "originalCommit": {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwOTE0OnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDoxMDowNFrOF2XpIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDo1MDoxM1rOF2318g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDc4NQ==", "bodyText": "Netty dependency should not be test scoped.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392554785", "createdAt": "2020-03-14T04:10:04Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/pom.xml", "diffHunk": "@@ -36,19 +36,26 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core</artifactId>\n-      <version>1.3.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+      <version>1.4.0-beta.1</version> <!-- {x-version-update;unreleased_com.azure:azure-core;dependency} -->\n     </dependency>\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core-http-netty</artifactId>\n       <version>1.4.0</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->\n+      <scope>test</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA4MjM1NA==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393082354", "createdAt": "2020-03-16T14:50:13Z", "author": {"login": "sima-zhu"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/pom.xml", "diffHunk": "@@ -36,19 +36,26 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core</artifactId>\n-      <version>1.3.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+      <version>1.4.0-beta.1</version> <!-- {x-version-update;unreleased_com.azure:azure-core;dependency} -->\n     </dependency>\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core-http-netty</artifactId>\n       <version>1.4.0</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->\n+      <scope>test</scope>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDc4NQ=="}, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAwOTQ1OnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDoxMDo0NlrOF2XpSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDo1MDo1MFrOF233vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDgyNw==", "bodyText": "This method can now be private.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392554827", "createdAt": "2020-03-14T04:10:46Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java", "diffHunk": "@@ -24,8 +27,8 @@\n     static String connectionString;\n     static TokenCredential tokenCredential;\n \n-    @BeforeEach\n-    public void setup() throws InvalidKeyException, NoSuchAlgorithmException {\n+    public void setup(HttpClient httpClient, ConfigurationServiceVersion serviceVersion)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA4MjgxMg==", "bodyText": "Done.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393082812", "createdAt": "2020-03-16T14:50:50Z", "author": {"login": "sima-zhu"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java", "diffHunk": "@@ -24,8 +27,8 @@\n     static String connectionString;\n     static TokenCredential tokenCredential;\n \n-    @BeforeEach\n-    public void setup() throws InvalidKeyException, NoSuchAlgorithmException {\n+    public void setup(HttpClient httpClient, ConfigurationServiceVersion serviceVersion)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDgyNw=="}, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAxMjYwOnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDoxNzo0MFrOF2XqvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDoxNzozOVrOF3ETtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTE5Nw==", "bodyText": "This should be comma-separated list of versions just like http client env variable and should support \"ALL\".", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392555197", "createdAt": "2020-03-14T04:17:40Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.appconfiguration;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+class TestHelper extends TestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(ConfigurationServiceVersion.values()).filter(TestHelper::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    private static boolean shouldServiceVersionBeTested(ConfigurationServiceVersion serviceVersion) {\n+        String serviceVersionFromEnv = Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwNzk3NQ==", "bodyText": "AZURE_TEST_SERVICE_VERSIONS - should the name of env var be specific to each service?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393207975", "createdAt": "2020-03-16T17:52:50Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.appconfiguration;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+class TestHelper extends TestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(ConfigurationServiceVersion.values()).filter(TestHelper::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    private static boolean shouldServiceVersionBeTested(ConfigurationServiceVersion serviceVersion) {\n+        String serviceVersionFromEnv = Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTE5Nw=="}, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyOTcyNw==", "bodyText": "yes, iirc, the guidelines say to use service specific names for env variables.\nhttps://azure.github.io/azure-sdk/java_implementation.html#service-specific-environment-variables", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393229727", "createdAt": "2020-03-16T18:27:00Z", "author": {"login": "conniey"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.appconfiguration;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+class TestHelper extends TestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(ConfigurationServiceVersion.values()).filter(TestHelper::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    private static boolean shouldServiceVersionBeTested(ConfigurationServiceVersion serviceVersion) {\n+        String serviceVersionFromEnv = Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTE5Nw=="}, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzNDA2OQ==", "bodyText": "Will make the change", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393234069", "createdAt": "2020-03-16T18:35:09Z", "author": {"login": "sima-zhu"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.appconfiguration;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+class TestHelper extends TestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(ConfigurationServiceVersion.values()).filter(TestHelper::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    private static boolean shouldServiceVersionBeTested(ConfigurationServiceVersion serviceVersion) {\n+        String serviceVersionFromEnv = Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTE5Nw=="}, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI0Mjc2NQ==", "bodyText": "Also, don't read from env var every single time shouldServiceVersionBeTested is called. Read it once before and pass the value to this method.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393242765", "createdAt": "2020-03-16T18:51:19Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.appconfiguration;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+class TestHelper extends TestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(ConfigurationServiceVersion.values()).filter(TestHelper::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    private static boolean shouldServiceVersionBeTested(ConfigurationServiceVersion serviceVersion) {\n+        String serviceVersionFromEnv = Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTE5Nw=="}, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI4NjU4Mg==", "bodyText": "Put it to static final field, so we can fetch the value after initialization.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393286582", "createdAt": "2020-03-16T20:17:39Z", "author": {"login": "sima-zhu"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.appconfiguration;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+class TestHelper extends TestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(ConfigurationServiceVersion.values()).filter(TestHelper::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    private static boolean shouldServiceVersionBeTested(ConfigurationServiceVersion serviceVersion) {\n+        String serviceVersionFromEnv = Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTE5Nw=="}, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAxMzQ5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDoyMDoxOVrOF2XrLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTowNjowN1rOF24jdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTMwOQ==", "bodyText": "This is not required", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392555309", "createdAt": "2020-03-14T04:20:19Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "diffHunk": "@@ -23,6 +28,12 @@\n public abstract class TestBase implements BeforeEachCallback {\n     // Environment variable name used to determine the TestMode.\n     private static final String AZURE_TEST_MODE = \"AZURE_TEST_MODE\";\n+    private static final String AZURE_TEST_HTTP_CLIENTS = \"AZURE_TEST_HTTP_CLIENTS\";\n+    protected static final String AZURE_TEST_HTTP_CLIENTS_VALUE_ALL = \"ALL\";\n+    protected static final String AZURE_TEST_HTTP_CLIENTS_VALUE_NETTY = \"NettyAsyncHttpClient\";\n+    protected static final String AZURE_TEST_HTTP_CLIENTS_VALUE_OKHTTP = \"OkHttpAsyncHttpClient\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5NDAwNw==", "bodyText": "Removed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393094007", "createdAt": "2020-03-16T15:06:07Z", "author": {"login": "sima-zhu"}, "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "diffHunk": "@@ -23,6 +28,12 @@\n public abstract class TestBase implements BeforeEachCallback {\n     // Environment variable name used to determine the TestMode.\n     private static final String AZURE_TEST_MODE = \"AZURE_TEST_MODE\";\n+    private static final String AZURE_TEST_HTTP_CLIENTS = \"AZURE_TEST_HTTP_CLIENTS\";\n+    protected static final String AZURE_TEST_HTTP_CLIENTS_VALUE_ALL = \"ALL\";\n+    protected static final String AZURE_TEST_HTTP_CLIENTS_VALUE_NETTY = \"NettyAsyncHttpClient\";\n+    protected static final String AZURE_TEST_HTTP_CLIENTS_VALUE_OKHTTP = \"OkHttpAsyncHttpClient\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTMwOQ=="}, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAxNTE5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDoyNTowMFrOF2XsGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTowNTo1N1rOF24i9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTU0Ng==", "bodyText": "protected and static are contradictory. Change this to public instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392555546", "createdAt": "2020-03-14T04:25:00Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "diffHunk": "@@ -23,6 +28,12 @@\n public abstract class TestBase implements BeforeEachCallback {\n     // Environment variable name used to determine the TestMode.\n     private static final String AZURE_TEST_MODE = \"AZURE_TEST_MODE\";\n+    private static final String AZURE_TEST_HTTP_CLIENTS = \"AZURE_TEST_HTTP_CLIENTS\";\n+    protected static final String AZURE_TEST_HTTP_CLIENTS_VALUE_ALL = \"ALL\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5Mzg3Nw==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393093877", "createdAt": "2020-03-16T15:05:57Z", "author": {"login": "sima-zhu"}, "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "diffHunk": "@@ -23,6 +28,12 @@\n public abstract class TestBase implements BeforeEachCallback {\n     // Environment variable name used to determine the TestMode.\n     private static final String AZURE_TEST_MODE = \"AZURE_TEST_MODE\";\n+    private static final String AZURE_TEST_HTTP_CLIENTS = \"AZURE_TEST_HTTP_CLIENTS\";\n+    protected static final String AZURE_TEST_HTTP_CLIENTS_VALUE_ALL = \"ALL\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTU0Ng=="}, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAxNTM2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDoyNToyOFrOF2XsMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDoyNToyOFrOF2XsMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTU3MA==", "bodyText": "public static instead of protected static.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392555570", "createdAt": "2020-03-14T04:25:28Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "diffHunk": "@@ -121,6 +132,50 @@ protected void beforeTest() {\n     protected void afterTest() {\n     }\n \n+    /**\n+     * Returns a list of {@link HttpClient HttpClients} that should be tested.\n+     * @return A list of {@link HttpClient HttpClients} to be tested.\n+     */\n+    protected static Stream<HttpClient> getHttpClients() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAxOTkxOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDozNjo1OVrOF2XurQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNToxNzoyNVrOF25Bew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NjIwNQ==", "bodyText": "Check the env variable before returning true.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392556205", "createdAt": "2020-03-14T04:36:59Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTestBase.java", "diffHunk": "@@ -413,4 +404,30 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(KeyServiceVersion.values()).filter(KeyClientTestBase::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    private static boolean shouldServiceVersionBeTested(KeyServiceVersion serviceVersion) {\n+        if (Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS) == null) {\n+            return KeyServiceVersion.getLatest().equals(serviceVersion);\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwMTY5MQ==", "bodyText": "Done", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393101691", "createdAt": "2020-03-16T15:17:25Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTestBase.java", "diffHunk": "@@ -413,4 +404,30 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(KeyServiceVersion.values()).filter(KeyClientTestBase::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    private static boolean shouldServiceVersionBeTested(KeyServiceVersion serviceVersion) {\n+        if (Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS) == null) {\n+            return KeyServiceVersion.getLatest().equals(serviceVersion);\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NjIwNQ=="}, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 262}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAyMzM2OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/TestHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDo0NjozNFrOF2Xweg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDo0NjozNFrOF2Xweg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NjY2Ng==", "bodyText": "Check env variable before returning true.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392556666", "createdAt": "2020-03-14T04:46:34Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/TestHelper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+public class TestHelper extends TestBase {\n+    public static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(CryptographyServiceVersion.values()).filter(TestHelper::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    private static boolean shouldServiceVersionBeTested(CryptographyServiceVersion serviceVersion) {\n+        if (Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS) == null) {\n+            return CryptographyServiceVersion.getLatest().equals(serviceVersion);\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzAyMzYxOnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDo0NzozN1rOF2XwpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwNDo0NzozN1rOF2XwpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NjcwOA==", "bodyText": "Same here - check env variable before returning true.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392556708", "createdAt": "2020-03-14T04:47:37Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java", "diffHunk": "@@ -437,4 +430,30 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(SecretServiceVersion.values()).filter(SecretClientTestBase::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    private static boolean shouldServiceVersionBeTested(SecretServiceVersion serviceVersion) {\n+        if (Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS) == null) {\n+            return SecretServiceVersion.getLatest().equals(serviceVersion);\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615"}, "originalPosition": 261}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzM0Mzk4OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/TestHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo1ODozNVrOF2_twA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo1ODozNVrOF2_twA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxMTMyOA==", "bodyText": "Don't need to extend from TestBase", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393211328", "createdAt": "2020-03-16T17:58:35Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/TestHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.security.keyvault.keys.KeyServiceVersion;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+public class TestHelper extends TestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49067af01be0fdf46df842c3b13c807b378e3d33"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODAxNzAzOnYy", "diffSide": "RIGHT", "path": "eng/versioning/version_client.txt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToyOToxMFrOF3GY1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToyOToxMFrOF3GY1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyMDY2MQ==", "bodyText": "@sima-zhu this is the reason you're seeing the analyze step fail. There are two unreleased_com.azure:azure-core;1.4.0-beta.1 entries, one on line 48 and the other on line 43. When a duplicate entry is encountered my script was doing a write-error which apparently caused the wrapper script to exit without flushing the buffer first so it was never seen. I'll be fixing my script so that doesn't happen again.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393320661", "createdAt": "2020-03-16T21:29:10Z", "author": {"login": "JimSuplizio"}, "path": "eng/versioning/version_client.txt", "diffHunk": "@@ -44,6 +44,8 @@ com.azure:perf-test-core;1.0.0-beta.1;1.0.0-beta.1\n # note: The unreleased dependencies will not be manipulated with the automatic PR creation code.\n unreleased_com.azure:azure-core;1.4.0-beta.1\n unreleased_com.azure:azure-core-amqp;1.1.0-beta.1\n+unreleased_com.azure:azure-core-test;1.2.0-beta.1\n+unreleased_com.azure:azure-core;1.4.0-beta.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3efe1d448941a87a46e6474726d11ad5eefebc5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODI5NDY4OnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMzoyMzowM1rOF3JF7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMzoyMzowM1rOF3JF7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2NDk3Mw==", "bodyText": "Name the variable and value as AZURE_APPCONFIG_TEST_SERVICE_VERSIONS as we don't want it to be mistaken for some non-test related env variable.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String AZURE_TEST_SERVICE_VERSIONS = \"AZURE_APPCONFIG_SERVICE_VERSIONS\";\n          \n          \n            \n                private static final String AZURE_APPCONFIG_TEST_SERVICE_VERSIONS = \"AZURE_APPCONFIG_TEST_SERVICE_VERSIONS\";", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393364973", "createdAt": "2020-03-16T23:23:03Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.appconfiguration;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+import static com.azure.core.test.TestBase.getHttpClients;\n+\n+class TestHelper {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+    private static final String AZURE_TEST_SERVICE_VERSIONS = \"AZURE_APPCONFIG_SERVICE_VERSIONS\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b86b20cf00e170b24e46b2c027a58f00b2abda29"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODI5NjY1OnYy", "diffSide": "RIGHT", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMzoyNDowNFrOF3JHBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMzoyNDowNFrOF3JHBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2NTI1NA==", "bodyText": "This can be declared once in TestBase.java in core-test module as ALL can be common for all libraries.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393365254", "createdAt": "2020-03-16T23:24:04Z", "author": {"login": "srnagar"}, "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.appconfiguration;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+import static com.azure.core.test.TestBase.getHttpClients;\n+\n+class TestHelper {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+    private static final String AZURE_TEST_SERVICE_VERSIONS = \"AZURE_APPCONFIG_SERVICE_VERSIONS\";\n+    private static final String serviceVersionFromEnv = Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS);\n+    private static final String AZURE_TEST_SERVICE_VERSIONS_VALUE_ALL = \"ALL\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b86b20cf00e170b24e46b2c027a58f00b2abda29"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODMwNTE0OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMzoyODo0MVrOF3JMBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMzozNToyMlrOF3JTAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2NjUzMg==", "bodyText": "This should be fetched just once instead of reading from env variables for all client-service version combinations. Same for all other clients.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393366532", "createdAt": "2020-03-16T23:28:41Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "diffHunk": "@@ -605,5 +601,53 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(CertificateServiceVersion.values()).filter(\n+                    CertificateClientTestBase::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    /**\n+     * Returns whether the given service version match the rules of test framework.\n+     *\n+     * <ul>\n+     * <li>Using latest service version as default if no environment variable is set.</li>\n+     * <li>If it's set to ALL, all Service versions in {@link CertificateServiceVersion} will be tested.</li>\n+     * <li>Otherwise, Service version string should match env variable.</li>\n+     * </ul>\n+     *\n+     * Environment values currently supported are: \"ALL\", \"${version}\".\n+     * Use comma to separate http clients want to test.\n+     * e.g. {@code set AZURE_TEST_SERVICE_VERSIONS = V1_0, V2_0}\n+     *\n+     * @param serviceVersion ServiceVersion needs to check\n+     * @return Boolean indicates whether filters out the service version or not.\n+     */\n+    private static boolean shouldServiceVersionBeTested(CertificateServiceVersion serviceVersion) {\n+        String serviceVersionFromEnv = Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b86b20cf00e170b24e46b2c027a58f00b2abda29"}, "originalPosition": 436}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2ODMyMw==", "bodyText": "That's a miss. Make the changes.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393368323", "createdAt": "2020-03-16T23:35:22Z", "author": {"login": "sima-zhu"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "diffHunk": "@@ -605,5 +601,53 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(CertificateServiceVersion.values()).filter(\n+                    CertificateClientTestBase::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    /**\n+     * Returns whether the given service version match the rules of test framework.\n+     *\n+     * <ul>\n+     * <li>Using latest service version as default if no environment variable is set.</li>\n+     * <li>If it's set to ALL, all Service versions in {@link CertificateServiceVersion} will be tested.</li>\n+     * <li>Otherwise, Service version string should match env variable.</li>\n+     * </ul>\n+     *\n+     * Environment values currently supported are: \"ALL\", \"${version}\".\n+     * Use comma to separate http clients want to test.\n+     * e.g. {@code set AZURE_TEST_SERVICE_VERSIONS = V1_0, V2_0}\n+     *\n+     * @param serviceVersion ServiceVersion needs to check\n+     * @return Boolean indicates whether filters out the service version or not.\n+     */\n+    private static boolean shouldServiceVersionBeTested(CertificateServiceVersion serviceVersion) {\n+        String serviceVersionFromEnv = Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2NjUzMg=="}, "originalCommit": {"oid": "b86b20cf00e170b24e46b2c027a58f00b2abda29"}, "originalPosition": 436}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODMwNzA5OnYy", "diffSide": "RIGHT", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMzoyOTo0NlrOF3JNKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMzoyOTo0NlrOF3JNKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2NjgyNA==", "bodyText": "Add TEST to the name of env variable so that it's not mistaken to be non-test related config. Same for all other service version env variables used in tests.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393366824", "createdAt": "2020-03-16T23:29:46Z", "author": {"login": "srnagar"}, "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "diffHunk": "@@ -34,27 +34,31 @@\n import com.azure.security.keyvault.certificates.models.LifetimeAction;\n import com.azure.security.keyvault.certificates.models.CertificatePolicyAction;\n import com.azure.security.keyvault.certificates.models.WellKnownIssuerNames;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.util.stream.Stream;\n import org.junit.jupiter.api.Test;\n \n-import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n-import java.io.FileReader;\n import java.io.IOException;\n import java.security.cert.CertificateException;\n import java.security.cert.CertificateFactory;\n import java.security.cert.X509Certificate;\n import java.util.*;\n import java.util.function.Consumer;\n-import java.util.function.Function;\n import java.util.function.BiConsumer;\n+import org.junit.jupiter.params.provider.Arguments;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.fail;\n \n public abstract class CertificateClientTestBase extends TestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n     private static final String SDK_NAME = \"client_name\";\n     private static final String SDK_VERSION = \"client_version\";\n+    private static final String AZURE_TEST_SERVICE_VERSIONS = \"AZURE_KEYVAULT_CERTIFICATE_SERVICE_VERSIONS\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b86b20cf00e170b24e46b2c027a58f00b2abda29"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 312, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}