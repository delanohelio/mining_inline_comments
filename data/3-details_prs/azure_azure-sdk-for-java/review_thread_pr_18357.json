{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NTU2MjI3", "number": 18357, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwOTowMToyNFrOFJIOyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNDoxODowN1rOFJibaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTE2MzYyOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwOTowMToyNFrOILab1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjoxODo1NlrOIMFhMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgzODM1OQ==", "bodyText": "Here and below introduction related with webapi will be udpated by @backwind1233", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18357#discussion_r548838359", "createdAt": "2020-12-25T09:01:24Z", "author": {"login": "yiliuTo"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -27,16 +27,21 @@ With Spring Starter for Azure Active Directory, now you can get started quickly\n [//]: # \"{x-version-update-end}\"\n \n ## Key concepts\n-This package provides 2 ways to integrate with Spring Security and authenticate with Azure Active Directory.\n+This package provides 2 ways to integrate with Spring Security and authenticate with Azure Active Directory, which are designed for scenarios of web application and resource server.\n \n-The authorization flow is composed of 3 phrases:\n+The authorization flow for web application includes:\n+* Login with credentials by self-defined `azure` client registration and trigger **authorization code flow**. Application gets user's consent for all configured scopes except on-demand resources' scopes, and acquires an access token only for scopes of `openid, profile, offline_access, https://graph.microsoft.com/User.Read`.\n+* When other resources are visited, associated clients will be loaded to trigger **refresh token flow** for authorization, and acquire an access token for configured scopes of that resource.\n+* When on-demand resources are visited, associated clients will be loaded and trigger **authorization code flow** like the `azure` client.\n+\n+The authorization flow for resource server:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0f0b3f698aa8fb55935a5324bb9af4587e8f8a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM2MjgwMg==", "bodyText": "@backwind1233 will we create a separate PR for this?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18357#discussion_r549362802", "createdAt": "2020-12-28T14:15:56Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -27,16 +27,21 @@ With Spring Starter for Azure Active Directory, now you can get started quickly\n [//]: # \"{x-version-update-end}\"\n \n ## Key concepts\n-This package provides 2 ways to integrate with Spring Security and authenticate with Azure Active Directory.\n+This package provides 2 ways to integrate with Spring Security and authenticate with Azure Active Directory, which are designed for scenarios of web application and resource server.\n \n-The authorization flow is composed of 3 phrases:\n+The authorization flow for web application includes:\n+* Login with credentials by self-defined `azure` client registration and trigger **authorization code flow**. Application gets user's consent for all configured scopes except on-demand resources' scopes, and acquires an access token only for scopes of `openid, profile, offline_access, https://graph.microsoft.com/User.Read`.\n+* When other resources are visited, associated clients will be loaded to trigger **refresh token flow** for authorization, and acquire an access token for configured scopes of that resource.\n+* When on-demand resources are visited, associated clients will be loaded and trigger **authorization code flow** like the `azure` client.\n+\n+The authorization flow for resource server:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgzODM1OQ=="}, "originalCommit": {"oid": "4c0f0b3f698aa8fb55935a5324bb9af4587e8f8a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NDI0Mw==", "bodyText": "@saragluna  I think so", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18357#discussion_r549544243", "createdAt": "2020-12-29T02:18:56Z", "author": {"login": "backwind1233"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -27,16 +27,21 @@ With Spring Starter for Azure Active Directory, now you can get started quickly\n [//]: # \"{x-version-update-end}\"\n \n ## Key concepts\n-This package provides 2 ways to integrate with Spring Security and authenticate with Azure Active Directory.\n+This package provides 2 ways to integrate with Spring Security and authenticate with Azure Active Directory, which are designed for scenarios of web application and resource server.\n \n-The authorization flow is composed of 3 phrases:\n+The authorization flow for web application includes:\n+* Login with credentials by self-defined `azure` client registration and trigger **authorization code flow**. Application gets user's consent for all configured scopes except on-demand resources' scopes, and acquires an access token only for scopes of `openid, profile, offline_access, https://graph.microsoft.com/User.Read`.\n+* When other resources are visited, associated clients will be loaded to trigger **refresh token flow** for authorization, and acquire an access token for configured scopes of that resource.\n+* When on-demand resources are visited, associated clients will be loaded and trigger **authorization code flow** like the `azure` client.\n+\n+The authorization flow for resource server:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgzODM1OQ=="}, "originalCommit": {"oid": "4c0f0b3f698aa8fb55935a5324bb9af4587e8f8a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDA5NTk4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMDowNzo0NFrOILvPmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMDowNzo0NFrOILvPmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE3OTI5MA==", "bodyText": "The way this starter uses to load users' membership, Delete get", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18357#discussion_r549179290", "createdAt": "2020-12-28T00:07:44Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -27,16 +27,21 @@ With Spring Starter for Azure Active Directory, now you can get started quickly\n [//]: # \"{x-version-update-end}\"\n \n ## Key concepts\n-This package provides 2 ways to integrate with Spring Security and authenticate with Azure Active Directory.\n+This package provides 2 ways to integrate with Spring Security and authenticate with Azure Active Directory, which are designed for scenarios of web application and resource server.\n \n-The authorization flow is composed of 3 phrases:\n+The authorization flow for web application includes:\n+* Login with credentials by self-defined `azure` client registration and trigger **authorization code flow**. Application gets user's consent for all configured scopes except on-demand resources' scopes, and acquires an access token only for scopes of `openid, profile, offline_access, https://graph.microsoft.com/User.Read`.\n+* When other resources are visited, associated clients will be loaded to trigger **refresh token flow** for authorization, and acquire an access token for configured scopes of that resource.\n+* When on-demand resources are visited, associated clients will be loaded and trigger **authorization code flow** like the `azure` client.\n+\n+The authorization flow for resource server:\n * Login with credentials and validate id_token from Azure AD \n * Get On-Behalf-Of token and membership info from Azure AD Graph API\n * Evaluate the permission based on membership info to grant or deny access\n \n ### Group membership\n-The way to get group relationship depends on the graph api used, the default to get membership is the direct group of the user. \n-To get all transitive relationships, the following configuration is required:\n+The way this starter uses to load get users' membership depends on the configured membership URI. By default, the starter uses `https://graph.microsoft.com/v1.0/me/memberOf` to get direct membership of current user. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0f0b3f698aa8fb55935a5324bb9af4587e8f8a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDUyNTQ5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjo0NTowNFrOILyk7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjo0NTowNFrOILyk7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIzMzkwMg==", "bodyText": "redirect-uri-template. Same to other items.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18357#discussion_r549233902", "createdAt": "2020-12-28T06:45:04Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/CHANGELOG.md", "diffHunk": "@@ -5,16 +5,39 @@\n - Change group id from `com.microsoft.azure` to `com.azure.spring`.\n - Change artifact id from `azure-active-directory-spring-boot-starter` to `azure-spring-boot-starter-active-directory`.\n - Deprecate `AADAppRoleStatelessAuthenticationFilter` and `AADAuthenticationFilter`.\n+- Deprecate following `azure-spring-boot-starter-active-directory` configuration properties:\n+    ```\n+    spring.security.oauth2.client.provider.azure.*\n+    spring.security.oauth2.client.registration.azure.*\n+    azure.activedirectory.environment\n+    azure.activedirectory.user-group.key\n+    azure.activedirectory.user-group.value\n+    azure.activedirectory.user-group.object-id-key\n+    ```\n+- Stop support of Azure Active Directory Endpoints.\n \n ### New Features\n-- Support consent multiple client-registration when login.\n-- Support on-demand client-registration.\n-- Support the use of `@RegisteredOAuth2AuthorizedClient` to get `OAuth2AuthorizedClient`.\n-- Support to obtain the claim in access token, such as `scp`, `roles` etc, to carry out permission control.\n-- Support on-behalf-of flow when the `azure-spring-boot-starter-active-directory` used in resource-server.\n-- Provide some AAD specific token validation, such as audience validation, issuer validation.\n-- Expose a flag in the `AzureOAuth2AuthenticatedPrincipal` to tell which account type is being used, work account or personal account.\n-\n+- Support consent of multiple client registrations during user login.\n+- Support on-demand client registrations.\n+- Support the use of `@RegisteredOAuth2AuthorizedClient` annotation to get `OAuth2AuthorizedClient`.\n+- Support access control through users' membership information.\n+- Support on-behalf-of flow in the resource server.\n+- Provide AAD specific token validation of audience validation and issuer validation.\n+- Expose a flag `isPersonalAccount` in `AzureOAuth2AuthenticatedPrincipal` to specify the account type in use: work account or personal account.\n+- Enable loading transitive membership information from Microsoft Graph API.\n+- Enable following `azure-spring-boot-starter-active-directory` configuration properties:\n+    ```yaml\n+    # Redirect URI of authorization server\n+    azure.activedirectory.redirectUriTemplate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19431180ac78db213b9447229d76b5023d25d27e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDUyNzk3OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjo0NjoyMFrOILymHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjo0NjoyMFrOILymHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIzNDIwNQ==", "bodyText": "@backwind1233 , if it's used in resource-server, related dependency should be added.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18357#discussion_r549234205", "createdAt": "2020-12-28T06:46:20Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -16,27 +16,38 @@ With Spring Starter for Azure Active Directory, now you can get started quickly\n * **Create a client secret key for the application**: Go to API ACCESS - Keys to create a secret key (`client-secret`).\n \n ### Include the package\n+To use this starter in an web application, please add following packages:\n+\n [//]: # \"{x-version-update-start;com.azure.spring:azure-spring-boot-starter-active-directory;current}\"\n ```xml\n <dependency>\n     <groupId>com.azure.spring</groupId>\n     <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n     <version>3.0.0-beta.1</version>\n </dependency>\n+<dependency>\n+  <groupId>org.springframework.security</groupId>\n+  <artifactId>spring-security-oauth2-client</artifactId>\n+</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19431180ac78db213b9447229d76b5023d25d27e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDUzMDEzOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjo0NzozNlrOILynSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjo0NzozNlrOILynSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIzNDUwNg==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18357#discussion_r549234506", "createdAt": "2020-12-28T06:47:36Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-starter/CHANGELOG.md", "diffHunk": "@@ -1,7 +1,42 @@\n # Release History\n \n ## 3.0.0-beta.2 (Unreleased)\n+### Breaking Changes\n+- Deprecate `AADAppRoleStatelessAuthenticationFilter` and `AADAuthenticationFilter`.\n+- Change artifact id from `azure-active-directory-spring-boot-starter` to `azure-spring-boot-starter-active-directory`.\n+- Deprecate following `azure-spring-boot-starter-active-directory` configuration properties:\n+    ```\n+    spring.security.oauth2.client.provider.azure.*\n+    spring.security.oauth2.client.registration.azure.*\n+    azure.activedirectory.environment\n+    azure.activedirectory.user-group.key\n+    azure.activedirectory.user-group.value\n+    azure.activedirectory.user-group.object-id-key\n+    ```\n+- Stop support of Azure Active Directory Endpoints.\n \n+### New Features\n+- Support consent of multiple client registrations during user login.\n+- Support on-demand client registrations.\n+- Support the use of `@RegisteredOAuth2AuthorizedClient` annotation to get `OAuth2AuthorizedClient`.\n+- Support access control through users' membership information.\n+- Support on-behalf-of flow in the resource server.\n+- Provide AAD specific token validation methods of audience validation and issuer validation.\n+- Expose a flag `isPersonalAccount` in `AzureOAuth2AuthenticatedPrincipal` to specify the account type in use: work account or personal account.\n+- Enable loading transitive membership information from Microsoft Graph API.\n+- Enable following `azure-spring-boot-starter-active-directory` configuration properties:\n+    ```yaml\n+    # Redirect URI of authorization server\n+    azure.activedirectory.redirectUriTemplate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19431180ac78db213b9447229d76b5023d25d27e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDUzMDQxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjo0Nzo1M1rOILyneg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjo0Nzo1M1rOILyneg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIzNDU1NA==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18357#discussion_r549234554", "createdAt": "2020-12-28T06:47:53Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/CHANGELOG.md", "diffHunk": "@@ -3,17 +3,40 @@\n ## 3.0.0-beta.2 (Unreleased)\n ### Breaking Changes\n - Deprecate `AADAppRoleStatelessAuthenticationFilter` and `AADAuthenticationFilter`.\n-- Support the setting of post logout redirect uri \n+- Change artifact id from `azure-active-directory-spring-boot-starter` to `azure-spring-boot-starter-active-directory`.\n+- Deprecate following `azure-spring-boot-starter-active-directory` configuration properties:\n+    ```\n+    spring.security.oauth2.client.provider.azure.*\n+    spring.security.oauth2.client.registration.azure.*\n+    azure.activedirectory.environment\n+    azure.activedirectory.user-group.key\n+    azure.activedirectory.user-group.value\n+    azure.activedirectory.user-group.object-id-key\n+    ```\n+- Stop support of Azure Active Directory Endpoints.\n \n ### New Features\n-- Support consent multiple client-registration when login.\n-- Support on-demand client-registration.\n-- Support the use of `@RegisteredOAuth2AuthorizedClient` to get `OAuth2AuthorizedClient`.\n-- Support to obtain the claim in access token, such as `scp`, `roles` etc, to carry out permission control.\n-- Support on-behalf-of flow when the `azure-spring-boot-starter-active-directory` used in resource-server.\n-- Provide some AAD specific token validation, such as audience validation, issuer validation.\n-- Expose a flag in the `AzureOAuth2AuthenticatedPrincipal` to tell which account type is being used, work account or personal account.\n-\n+- Support consent of multiple client registrations during user login.\n+- Support on-demand client registrations.\n+- Support the use of `@RegisteredOAuth2AuthorizedClient` annotation to get `OAuth2AuthorizedClient`.\n+- Support access control through users' membership information.\n+- Support on-behalf-of flow in the resource server.\n+- Provide AAD specific token validation methods of audience validation and issuer validation.\n+- Expose a flag `isPersonalAccount` in `AzureOAuth2AuthenticatedPrincipal` to specify the account type in use: work account or personal account.\n+- Enable loading transitive membership information from Microsoft Graph API.\n+- Enable following `azure-spring-boot-starter-active-directory` configuration properties:\n+    ```yaml\n+    # Redirect URI of authorization server\n+    azure.activedirectory.redirectUriTemplate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19431180ac78db213b9447229d76b5023d25d27e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDU2NDI5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNzowODoyNlrOILy5LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNzoxOToyNFrOILzC4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIzOTA4NQ==", "bodyText": "I believe AzureOAuth2AuthenticatedPrincipal  has been renamed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18357#discussion_r549239085", "createdAt": "2020-12-28T07:08:26Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/CHANGELOG.md", "diffHunk": "@@ -5,16 +5,39 @@\n - Change group id from `com.microsoft.azure` to `com.azure.spring`.\n - Change artifact id from `azure-active-directory-spring-boot-starter` to `azure-spring-boot-starter-active-directory`.\n - Deprecate `AADAppRoleStatelessAuthenticationFilter` and `AADAuthenticationFilter`.\n+- Deprecate following `azure-spring-boot-starter-active-directory` configuration properties:\n+    ```\n+    spring.security.oauth2.client.provider.azure.*\n+    spring.security.oauth2.client.registration.azure.*\n+    azure.activedirectory.environment\n+    azure.activedirectory.user-group.key\n+    azure.activedirectory.user-group.value\n+    azure.activedirectory.user-group.object-id-key\n+    ```\n+- Stop support of Azure Active Directory Endpoints.\n \n ### New Features\n-- Support consent multiple client-registration when login.\n-- Support on-demand client-registration.\n-- Support the use of `@RegisteredOAuth2AuthorizedClient` to get `OAuth2AuthorizedClient`.\n-- Support to obtain the claim in access token, such as `scp`, `roles` etc, to carry out permission control.\n-- Support on-behalf-of flow when the `azure-spring-boot-starter-active-directory` used in resource-server.\n-- Provide some AAD specific token validation, such as audience validation, issuer validation.\n-- Expose a flag in the `AzureOAuth2AuthenticatedPrincipal` to tell which account type is being used, work account or personal account.\n-\n+- Support consent of multiple client registrations during user login.\n+- Support on-demand client registrations.\n+- Support the use of `@RegisteredOAuth2AuthorizedClient` annotation to get `OAuth2AuthorizedClient`.\n+- Support access control through users' membership information.\n+- Support on-behalf-of flow in the resource server.\n+- Provide AAD specific token validation of audience validation and issuer validation.\n+- Expose a flag `isPersonalAccount` in `AzureOAuth2AuthenticatedPrincipal` to specify the account type in use: work account or personal account.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "509a46449ba8f20bd687fccdc359cc162f2acfe3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI0MTU2OA==", "bodyText": "Thanks, I have updated them now", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18357#discussion_r549241568", "createdAt": "2020-12-28T07:19:24Z", "author": {"login": "yiliuTo"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/CHANGELOG.md", "diffHunk": "@@ -5,16 +5,39 @@\n - Change group id from `com.microsoft.azure` to `com.azure.spring`.\n - Change artifact id from `azure-active-directory-spring-boot-starter` to `azure-spring-boot-starter-active-directory`.\n - Deprecate `AADAppRoleStatelessAuthenticationFilter` and `AADAuthenticationFilter`.\n+- Deprecate following `azure-spring-boot-starter-active-directory` configuration properties:\n+    ```\n+    spring.security.oauth2.client.provider.azure.*\n+    spring.security.oauth2.client.registration.azure.*\n+    azure.activedirectory.environment\n+    azure.activedirectory.user-group.key\n+    azure.activedirectory.user-group.value\n+    azure.activedirectory.user-group.object-id-key\n+    ```\n+- Stop support of Azure Active Directory Endpoints.\n \n ### New Features\n-- Support consent multiple client-registration when login.\n-- Support on-demand client-registration.\n-- Support the use of `@RegisteredOAuth2AuthorizedClient` to get `OAuth2AuthorizedClient`.\n-- Support to obtain the claim in access token, such as `scp`, `roles` etc, to carry out permission control.\n-- Support on-behalf-of flow when the `azure-spring-boot-starter-active-directory` used in resource-server.\n-- Provide some AAD specific token validation, such as audience validation, issuer validation.\n-- Expose a flag in the `AzureOAuth2AuthenticatedPrincipal` to tell which account type is being used, work account or personal account.\n-\n+- Support consent of multiple client registrations during user login.\n+- Support on-demand client registrations.\n+- Support the use of `@RegisteredOAuth2AuthorizedClient` annotation to get `OAuth2AuthorizedClient`.\n+- Support access control through users' membership information.\n+- Support on-behalf-of flow in the resource server.\n+- Provide AAD specific token validation of audience validation and issuer validation.\n+- Expose a flag `isPersonalAccount` in `AzureOAuth2AuthenticatedPrincipal` to specify the account type in use: work account or personal account.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIzOTA4NQ=="}, "originalCommit": {"oid": "509a46449ba8f20bd687fccdc359cc162f2acfe3"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDU2NzEwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNzoxMDoxM1rOILy6rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNzoxMDoxM1rOILy6rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIzOTQ3MA==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18357#discussion_r549239470", "createdAt": "2020-12-28T07:10:13Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-starter/CHANGELOG.md", "diffHunk": "@@ -1,7 +1,42 @@\n # Release History\n \n ## 3.0.0-beta.2 (Unreleased)\n+### Breaking Changes\n+- Deprecate `AADAppRoleStatelessAuthenticationFilter` and `AADAuthenticationFilter`.\n+- Change artifact id from `azure-active-directory-spring-boot-starter` to `azure-spring-boot-starter-active-directory`.\n+- Deprecate following `azure-spring-boot-starter-active-directory` configuration properties:\n+    ```\n+    spring.security.oauth2.client.provider.azure.*\n+    spring.security.oauth2.client.registration.azure.*\n+    azure.activedirectory.environment\n+    azure.activedirectory.user-group.key\n+    azure.activedirectory.user-group.value\n+    azure.activedirectory.user-group.object-id-key\n+    ```\n+- Stop support of Azure Active Directory Endpoints.\n \n+### New Features\n+- Support consent of multiple client registrations during user login.\n+- Support on-demand client registrations.\n+- Support the use of `@RegisteredOAuth2AuthorizedClient` annotation to get `OAuth2AuthorizedClient`.\n+- Support access control through users' membership information.\n+- Support on-behalf-of flow in the resource server.\n+- Provide AAD specific token validation methods of audience validation and issuer validation.\n+- Expose a flag `isPersonalAccount` in `AzureOAuth2AuthenticatedPrincipal` to specify the account type in use: work account or personal account.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "509a46449ba8f20bd687fccdc359cc162f2acfe3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDU2NzUwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNzoxMDoyOFrOILy64g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNzoxMDoyOFrOILy64g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIzOTUyMg==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18357#discussion_r549239522", "createdAt": "2020-12-28T07:10:28Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/CHANGELOG.md", "diffHunk": "@@ -3,17 +3,40 @@\n ## 3.0.0-beta.2 (Unreleased)\n ### Breaking Changes\n - Deprecate `AADAppRoleStatelessAuthenticationFilter` and `AADAuthenticationFilter`.\n-- Support the setting of post logout redirect uri \n+- Change artifact id from `azure-active-directory-spring-boot-starter` to `azure-spring-boot-starter-active-directory`.\n+- Deprecate following `azure-spring-boot-starter-active-directory` configuration properties:\n+    ```\n+    spring.security.oauth2.client.provider.azure.*\n+    spring.security.oauth2.client.registration.azure.*\n+    azure.activedirectory.environment\n+    azure.activedirectory.user-group.key\n+    azure.activedirectory.user-group.value\n+    azure.activedirectory.user-group.object-id-key\n+    ```\n+- Stop support of Azure Active Directory Endpoints.\n \n ### New Features\n-- Support consent multiple client-registration when login.\n-- Support on-demand client-registration.\n-- Support the use of `@RegisteredOAuth2AuthorizedClient` to get `OAuth2AuthorizedClient`.\n-- Support to obtain the claim in access token, such as `scp`, `roles` etc, to carry out permission control.\n-- Support on-behalf-of flow when the `azure-spring-boot-starter-active-directory` used in resource-server.\n-- Provide some AAD specific token validation, such as audience validation, issuer validation.\n-- Expose a flag in the `AzureOAuth2AuthenticatedPrincipal` to tell which account type is being used, work account or personal account.\n-\n+- Support consent of multiple client registrations during user login.\n+- Support on-demand client registrations.\n+- Support the use of `@RegisteredOAuth2AuthorizedClient` annotation to get `OAuth2AuthorizedClient`.\n+- Support access control through users' membership information.\n+- Support on-behalf-of flow in the resource server.\n+- Provide AAD specific token validation methods of audience validation and issuer validation.\n+- Expose a flag `isPersonalAccount` in `AzureOAuth2AuthenticatedPrincipal` to specify the account type in use: work account or personal account.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "509a46449ba8f20bd687fccdc359cc162f2acfe3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTQ1NTc2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNDoxODowN1rOIL6fag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNToyOToxMlrOIMHTfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM2MzU2Mg==", "bodyText": "Is it only me or does anyone else find this list of properties hard to read?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18357#discussion_r549363562", "createdAt": "2020-12-28T14:18:07Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -16,34 +16,76 @@ With Spring Starter for Azure Active Directory, now you can get started quickly\n * **Create a client secret key for the application**: Go to API ACCESS - Keys to create a secret key (`client-secret`).\n \n ### Include the package\n+To use this starter in an web application, please add following packages:\n+\n [//]: # \"{x-version-update-start;com.azure.spring:azure-spring-boot-starter-active-directory;current}\"\n ```xml\n <dependency>\n     <groupId>com.azure.spring</groupId>\n     <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n     <version>3.0.0-beta.1</version>\n </dependency>\n+<dependency>\n+    <groupId>org.springframework.security</groupId>\n+    <artifactId>spring-security-oauth2-client</artifactId>\n+</dependency>\n ```\n [//]: # \"{x-version-update-end}\"\n \n ## Key concepts\n-This package provides 2 ways to integrate with Spring Security and authenticate with Azure Active Directory.\n+This package provides 2 ways to integrate with Spring Security and authenticate with Azure Active Directory, which are designed for scenarios of web application and resource server.\n \n-The authorization flow is composed of 3 phrases:\n+The authorization flow for web application includes:\n+* Login with credentials by self-defined `azure` client registration and trigger **authorization code flow**. Application gets user's consent for all configured scopes except on-demand resources' scopes, and acquires an access token only for scopes of `openid, profile, offline_access, https://graph.microsoft.com/User.Read`.\n+* When other resources are visited, associated clients will be loaded to trigger **refresh token flow** for authorization, and acquire an access token for configured scopes of that resource.\n+* When on-demand resources are visited, associated clients will be loaded and trigger **authorization code flow** like the `azure` client.\n+\n+The authorization flow for resource server:\n * Login with credentials and validate id_token from Azure AD \n * Get On-Behalf-Of token and membership info from Azure AD Graph API\n * Evaluate the permission based on membership info to grant or deny access\n \n-### Group membership\n-The way to get group relationship depends on the graph api used, the default to get membership is the direct group of the user. \n-To get all transitive relationships, the following configuration is required:\n-\n-```yaml\n-azure:\n-  activedirectory:\n-    graph-membership-uri: https://graph.microsoft.com/v1.0/me/transitiveMemberOf\n-``` \n-\n+### Configurable properties\n+This starter provides following properties to be customized:\n+* azure.activedirectory.client-id:   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13cb9f91e071ec42ec2c1cfe9057181d4d9a5e0d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUzOTc0Ng==", "bodyText": "How about convert this to a table?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18357#discussion_r549539746", "createdAt": "2020-12-29T01:50:01Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -16,34 +16,76 @@ With Spring Starter for Azure Active Directory, now you can get started quickly\n * **Create a client secret key for the application**: Go to API ACCESS - Keys to create a secret key (`client-secret`).\n \n ### Include the package\n+To use this starter in an web application, please add following packages:\n+\n [//]: # \"{x-version-update-start;com.azure.spring:azure-spring-boot-starter-active-directory;current}\"\n ```xml\n <dependency>\n     <groupId>com.azure.spring</groupId>\n     <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n     <version>3.0.0-beta.1</version>\n </dependency>\n+<dependency>\n+    <groupId>org.springframework.security</groupId>\n+    <artifactId>spring-security-oauth2-client</artifactId>\n+</dependency>\n ```\n [//]: # \"{x-version-update-end}\"\n \n ## Key concepts\n-This package provides 2 ways to integrate with Spring Security and authenticate with Azure Active Directory.\n+This package provides 2 ways to integrate with Spring Security and authenticate with Azure Active Directory, which are designed for scenarios of web application and resource server.\n \n-The authorization flow is composed of 3 phrases:\n+The authorization flow for web application includes:\n+* Login with credentials by self-defined `azure` client registration and trigger **authorization code flow**. Application gets user's consent for all configured scopes except on-demand resources' scopes, and acquires an access token only for scopes of `openid, profile, offline_access, https://graph.microsoft.com/User.Read`.\n+* When other resources are visited, associated clients will be loaded to trigger **refresh token flow** for authorization, and acquire an access token for configured scopes of that resource.\n+* When on-demand resources are visited, associated clients will be loaded and trigger **authorization code flow** like the `azure` client.\n+\n+The authorization flow for resource server:\n * Login with credentials and validate id_token from Azure AD \n * Get On-Behalf-Of token and membership info from Azure AD Graph API\n * Evaluate the permission based on membership info to grant or deny access\n \n-### Group membership\n-The way to get group relationship depends on the graph api used, the default to get membership is the direct group of the user. \n-To get all transitive relationships, the following configuration is required:\n-\n-```yaml\n-azure:\n-  activedirectory:\n-    graph-membership-uri: https://graph.microsoft.com/v1.0/me/transitiveMemberOf\n-``` \n-\n+### Configurable properties\n+This starter provides following properties to be customized:\n+* azure.activedirectory.client-id:   ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM2MzU2Mg=="}, "originalCommit": {"oid": "13cb9f91e071ec42ec2c1cfe9057181d4d9a5e0d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0Mzk2Mg==", "bodyText": "what about we using properties format like:\n# Registered application ID in Azure AD.\nazure.activedirectory.client-id=", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18357#discussion_r549543962", "createdAt": "2020-12-29T02:17:12Z", "author": {"login": "yiliuTo"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -16,34 +16,76 @@ With Spring Starter for Azure Active Directory, now you can get started quickly\n * **Create a client secret key for the application**: Go to API ACCESS - Keys to create a secret key (`client-secret`).\n \n ### Include the package\n+To use this starter in an web application, please add following packages:\n+\n [//]: # \"{x-version-update-start;com.azure.spring:azure-spring-boot-starter-active-directory;current}\"\n ```xml\n <dependency>\n     <groupId>com.azure.spring</groupId>\n     <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n     <version>3.0.0-beta.1</version>\n </dependency>\n+<dependency>\n+    <groupId>org.springframework.security</groupId>\n+    <artifactId>spring-security-oauth2-client</artifactId>\n+</dependency>\n ```\n [//]: # \"{x-version-update-end}\"\n \n ## Key concepts\n-This package provides 2 ways to integrate with Spring Security and authenticate with Azure Active Directory.\n+This package provides 2 ways to integrate with Spring Security and authenticate with Azure Active Directory, which are designed for scenarios of web application and resource server.\n \n-The authorization flow is composed of 3 phrases:\n+The authorization flow for web application includes:\n+* Login with credentials by self-defined `azure` client registration and trigger **authorization code flow**. Application gets user's consent for all configured scopes except on-demand resources' scopes, and acquires an access token only for scopes of `openid, profile, offline_access, https://graph.microsoft.com/User.Read`.\n+* When other resources are visited, associated clients will be loaded to trigger **refresh token flow** for authorization, and acquire an access token for configured scopes of that resource.\n+* When on-demand resources are visited, associated clients will be loaded and trigger **authorization code flow** like the `azure` client.\n+\n+The authorization flow for resource server:\n * Login with credentials and validate id_token from Azure AD \n * Get On-Behalf-Of token and membership info from Azure AD Graph API\n * Evaluate the permission based on membership info to grant or deny access\n \n-### Group membership\n-The way to get group relationship depends on the graph api used, the default to get membership is the direct group of the user. \n-To get all transitive relationships, the following configuration is required:\n-\n-```yaml\n-azure:\n-  activedirectory:\n-    graph-membership-uri: https://graph.microsoft.com/v1.0/me/transitiveMemberOf\n-``` \n-\n+### Configurable properties\n+This starter provides following properties to be customized:\n+* azure.activedirectory.client-id:   ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM2MzU2Mg=="}, "originalCommit": {"oid": "13cb9f91e071ec42ec2c1cfe9057181d4d9a5e0d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU3MzUwMg==", "bodyText": "I'll vote for the table.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18357#discussion_r549573502", "createdAt": "2020-12-29T05:29:12Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-starter-active-directory/README.md", "diffHunk": "@@ -16,34 +16,76 @@ With Spring Starter for Azure Active Directory, now you can get started quickly\n * **Create a client secret key for the application**: Go to API ACCESS - Keys to create a secret key (`client-secret`).\n \n ### Include the package\n+To use this starter in an web application, please add following packages:\n+\n [//]: # \"{x-version-update-start;com.azure.spring:azure-spring-boot-starter-active-directory;current}\"\n ```xml\n <dependency>\n     <groupId>com.azure.spring</groupId>\n     <artifactId>azure-spring-boot-starter-active-directory</artifactId>\n     <version>3.0.0-beta.1</version>\n </dependency>\n+<dependency>\n+    <groupId>org.springframework.security</groupId>\n+    <artifactId>spring-security-oauth2-client</artifactId>\n+</dependency>\n ```\n [//]: # \"{x-version-update-end}\"\n \n ## Key concepts\n-This package provides 2 ways to integrate with Spring Security and authenticate with Azure Active Directory.\n+This package provides 2 ways to integrate with Spring Security and authenticate with Azure Active Directory, which are designed for scenarios of web application and resource server.\n \n-The authorization flow is composed of 3 phrases:\n+The authorization flow for web application includes:\n+* Login with credentials by self-defined `azure` client registration and trigger **authorization code flow**. Application gets user's consent for all configured scopes except on-demand resources' scopes, and acquires an access token only for scopes of `openid, profile, offline_access, https://graph.microsoft.com/User.Read`.\n+* When other resources are visited, associated clients will be loaded to trigger **refresh token flow** for authorization, and acquire an access token for configured scopes of that resource.\n+* When on-demand resources are visited, associated clients will be loaded and trigger **authorization code flow** like the `azure` client.\n+\n+The authorization flow for resource server:\n * Login with credentials and validate id_token from Azure AD \n * Get On-Behalf-Of token and membership info from Azure AD Graph API\n * Evaluate the permission based on membership info to grant or deny access\n \n-### Group membership\n-The way to get group relationship depends on the graph api used, the default to get membership is the direct group of the user. \n-To get all transitive relationships, the following configuration is required:\n-\n-```yaml\n-azure:\n-  activedirectory:\n-    graph-membership-uri: https://graph.microsoft.com/v1.0/me/transitiveMemberOf\n-``` \n-\n+### Configurable properties\n+This starter provides following properties to be customized:\n+* azure.activedirectory.client-id:   ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM2MzU2Mg=="}, "originalCommit": {"oid": "13cb9f91e071ec42ec2c1cfe9057181d4d9a5e0d"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2526, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}