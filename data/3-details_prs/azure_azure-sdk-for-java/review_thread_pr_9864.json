{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NDkyNzc5", "number": 9864, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoyOToxOFrODvNXbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjozMjowNVrODvNcMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODI4NjU1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/changefeed/ServiceItemLease.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoyOToxOFrOGBgBBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo0NjozMlrOGBguMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyNjMwOA==", "bodyText": "when a class is annotated with jackson annotation, jackson uses reflection for serialization/deserialization to json.\nreflection is expensive and that being said, If there are pre existing classes in the code which needs to be serialized/deserialized to json we should ideally use a jackson serializer rather than annotating the class with jackson annotation.\n(not necessarily in the scope of this PR, but something to be addressed outside of this PR).", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9864#discussion_r404226308", "createdAt": "2020-04-06T16:29:18Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/changefeed/ServiceItemLease.java", "diffHunk": "@@ -62,7 +62,7 @@ public ServiceItemLease withId(String id) {\n         return this;\n     }\n \n-    @JsonIgnore\n+    @JsonProperty(\"_etag\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0628762a974e2d0eb438b485540d9baa1032f9b3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNzg3Mg==", "bodyText": "In this case the \"_etag\" field was not passed through the serialization and that resulted in \"IF MATCH\" condition to fail when updating the lease document.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9864#discussion_r404237872", "createdAt": "2020-04-06T16:46:32Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/changefeed/ServiceItemLease.java", "diffHunk": "@@ -62,7 +62,7 @@ public ServiceItemLease withId(String id) {\n         return this;\n     }\n \n-    @JsonIgnore\n+    @JsonProperty(\"_etag\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyNjMwOA=="}, "originalCommit": {"oid": "0628762a974e2d0eb438b485540d9baa1032f9b3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODI5ODczOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/changefeed/implementation/PartitionProcessorImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjozMjowNVrOGBgIZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo1NzowMlrOGBhJBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyODE5OQ==", "bodyText": "@milismsft we need to have explicit automated tests for partition split.\nWe have some tests for partition split that you can use as a sample:\nDocumentProducerTest (unit test)\nReadMyWritesConsistencyTest (integration test)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9864#discussion_r404228199", "createdAt": "2020-04-06T16:32:05Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/changefeed/implementation/PartitionProcessorImpl.java", "diffHunk": "@@ -124,18 +124,21 @@ public PartitionProcessorImpl(ChangeFeedObserver observer, ChangeFeedContextClie\n \n                     CosmosClientException clientException = (CosmosClientException) throwable;\n                     logger.warn(\"CosmosClientException: partition {} from thread {}\",\n-                        this.options.partitionKey().getInternalPartitionKey(), Thread.currentThread().getId(), clientException);\n+                        this.settings.getPartitionKeyRangeId(), Thread.currentThread().getId(), clientException);\n                     StatusCodeErrorType docDbError = ExceptionClassifier.classifyClientException(clientException);\n \n                     switch (docDbError) {\n                         case PARTITION_NOT_FOUND: {\n                             this.resultException = new PartitionNotFoundException(\"Partition not found.\", this.lastContinuation);\n+                            break;\n                         }\n                         case PARTITION_SPLIT: {\n                             this.resultException = new PartitionSplitException(\"Partition split.\", this.lastContinuation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0628762a974e2d0eb438b485540d9baa1032f9b3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNTEyNg==", "bodyText": "I've added a specific test for splits in V4 respective change. The challenge is that public emulator does not support splitting so the test must be run against the cloud service.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9864#discussion_r404235126", "createdAt": "2020-04-06T16:42:22Z", "author": {"login": "milismsft"}, "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/changefeed/implementation/PartitionProcessorImpl.java", "diffHunk": "@@ -124,18 +124,21 @@ public PartitionProcessorImpl(ChangeFeedObserver observer, ChangeFeedContextClie\n \n                     CosmosClientException clientException = (CosmosClientException) throwable;\n                     logger.warn(\"CosmosClientException: partition {} from thread {}\",\n-                        this.options.partitionKey().getInternalPartitionKey(), Thread.currentThread().getId(), clientException);\n+                        this.settings.getPartitionKeyRangeId(), Thread.currentThread().getId(), clientException);\n                     StatusCodeErrorType docDbError = ExceptionClassifier.classifyClientException(clientException);\n \n                     switch (docDbError) {\n                         case PARTITION_NOT_FOUND: {\n                             this.resultException = new PartitionNotFoundException(\"Partition not found.\", this.lastContinuation);\n+                            break;\n                         }\n                         case PARTITION_SPLIT: {\n                             this.resultException = new PartitionSplitException(\"Partition split.\", this.lastContinuation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyODE5OQ=="}, "originalCommit": {"oid": "0628762a974e2d0eb438b485540d9baa1032f9b3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0NDc0MA==", "bodyText": "if we add tests on v4 that should be good enough. thanks.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9864#discussion_r404244740", "createdAt": "2020-04-06T16:57:02Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/changefeed/implementation/PartitionProcessorImpl.java", "diffHunk": "@@ -124,18 +124,21 @@ public PartitionProcessorImpl(ChangeFeedObserver observer, ChangeFeedContextClie\n \n                     CosmosClientException clientException = (CosmosClientException) throwable;\n                     logger.warn(\"CosmosClientException: partition {} from thread {}\",\n-                        this.options.partitionKey().getInternalPartitionKey(), Thread.currentThread().getId(), clientException);\n+                        this.settings.getPartitionKeyRangeId(), Thread.currentThread().getId(), clientException);\n                     StatusCodeErrorType docDbError = ExceptionClassifier.classifyClientException(clientException);\n \n                     switch (docDbError) {\n                         case PARTITION_NOT_FOUND: {\n                             this.resultException = new PartitionNotFoundException(\"Partition not found.\", this.lastContinuation);\n+                            break;\n                         }\n                         case PARTITION_SPLIT: {\n                             this.resultException = new PartitionSplitException(\"Partition split.\", this.lastContinuation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyODE5OQ=="}, "originalCommit": {"oid": "0628762a974e2d0eb438b485540d9baa1032f9b3"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1983, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}