{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MjI3NzQ0", "number": 17167, "title": "Support invoices recognition API for Form recognizer", "bodyText": "This PR adds support for recognizing invoices data from documents using Form recognizer API's.", "createdAt": "2020-11-04T08:44:17Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167", "merged": true, "mergeCommit": {"oid": "9e71f5d1e9a96848f33ffe91e633a9157e688766"}, "closed": true, "closedAt": "2020-11-05T22:52:35Z", "author": {"login": "samvaity"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZJwVggH2gAyNTE1MjI3NzQ0OjY2ZTIyYzUzMzVkNTFiN2ZiMDE3MzliZmU1MGE4MzFkZmQ3ZjRjMGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZppYdgH2gAyNTE1MjI3NzQ0OjhhOTRmY2ZlYzhmMGNhYmIzNTNkNzMyYTllODk0MzU5ZjU1MzAxZTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "66e22c5335d51b7fb01739bfe50a831dfd7f4c0c", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/66e22c5335d51b7fb01739bfe50a831dfd7f4c0c", "committedDate": "2020-11-04T08:47:17Z", "message": "invoice feature"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "465ef911a5288eb337ffae05ef7f43cfbddfbb32", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/465ef911a5288eb337ffae05ef7f43cfbddfbb32", "committedDate": "2020-11-04T08:39:51Z", "message": "invoice feature"}, "afterCommit": {"oid": "66e22c5335d51b7fb01739bfe50a831dfd7f4c0c", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/66e22c5335d51b7fb01739bfe50a831dfd7f4c0c", "committedDate": "2020-11-04T08:47:17Z", "message": "invoice feature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "275a1023f14672736a844fb00812df92408ea2be", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/275a1023f14672736a844fb00812df92408ea2be", "committedDate": "2020-11-04T09:00:07Z", "message": "add missed recordings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNjE1MjE1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#pullrequestreview-523615215", "createdAt": "2020-11-04T18:10:36Z", "commit": {"oid": "275a1023f14672736a844fb00812df92408ea2be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODoxMDozNlrOHtj9Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODoxMDozNlrOHtj9Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNzEwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param invoiceUrl The URL of the receipt to analyze.\n          \n          \n            \n                 * @param invoiceUrl The URL of the invoice to analyze.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#discussion_r517537103", "createdAt": "2020-11-04T18:10:36Z", "author": {"login": "kristapratico"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -846,6 +847,183 @@\n         return Mono.just(new PollResponse<>(status, operationResultPollResponse.getValue()));\n     }\n \n+    /**\n+     * Recognizes invoice data using optical character recognition (OCR) and a prebuilt invoice trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * error message indicating absence of cancellation support.</p>\n+     * See <a href=\"https://aka.ms/formrecognizer/invoicefields\">here</a> for fields found on a invoice.\n+     *\n+     * <p><strong>Code sample</strong></p>\n+     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoicesFromUrl#string}\n+     *\n+     * @param invoiceUrl The URL of the receipt to analyze.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275a1023f14672736a844fb00812df92408ea2be"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNjE1MzQz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#pullrequestreview-523615343", "createdAt": "2020-11-04T18:10:46Z", "commit": {"oid": "275a1023f14672736a844fb00812df92408ea2be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODoxMDo0N1rOHtj9wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODoxMDo0N1rOHtj9wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNzIxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return A {@link PollerFlux} that polls the recognize receipt operation until it has completed, has failed,\n          \n          \n            \n                 * @return A {@link PollerFlux} that polls the recognize invoice operation until it has completed, has failed,", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#discussion_r517537217", "createdAt": "2020-11-04T18:10:47Z", "author": {"login": "kristapratico"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -846,6 +847,183 @@\n         return Mono.just(new PollResponse<>(status, operationResultPollResponse.getValue()));\n     }\n \n+    /**\n+     * Recognizes invoice data using optical character recognition (OCR) and a prebuilt invoice trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * error message indicating absence of cancellation support.</p>\n+     * See <a href=\"https://aka.ms/formrecognizer/invoicefields\">here</a> for fields found on a invoice.\n+     *\n+     * <p><strong>Code sample</strong></p>\n+     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoicesFromUrl#string}\n+     *\n+     * @param invoiceUrl The URL of the receipt to analyze.\n+     *\n+     * @return A {@link PollerFlux} that polls the recognize receipt operation until it has completed, has failed,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275a1023f14672736a844fb00812df92408ea2be"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNjgyNDUz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#pullrequestreview-523682453", "createdAt": "2020-11-04T19:45:45Z", "commit": {"oid": "275a1023f14672736a844fb00812df92408ea2be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxOTo0NTo0NVrOHtnLmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxOTo0NTo0NVrOHtnLmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU4OTkxMw==", "bodyText": "nit: should this go higher as it might be more important than other content? like same level as BC", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#discussion_r517589913", "createdAt": "2020-11-04T19:45:45Z", "author": {"login": "maririos"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/CHANGELOG.md", "diffHunk": "@@ -15,6 +15,7 @@ Supported locales include support EN-US, EN-AU, EN-CA, EN-GB, EN-IN.\n This functionality is only available in trained with labels scenarios.\n - When passing `includeFieldElements` as true in `RecognizeCustomFormsOptions`, the property `fieldElements` on `FieldData`\n and `FormTableCell` will also be populated with any selection marks found on the page.\n+- Added support for pre-built invoices recognition.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275a1023f14672736a844fb00812df92408ea2be"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNjkwMjg2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#pullrequestreview-523690286", "createdAt": "2020-11-04T19:57:17Z", "commit": {"oid": "275a1023f14672736a844fb00812df92408ea2be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxOTo1NzoxN1rOHtnjcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxOTo1NzoxN1rOHtnjcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5NjAxNw==", "bodyText": "param is receiptUrl here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#discussion_r517596017", "createdAt": "2020-11-04T19:57:17Z", "author": {"login": "kristapratico"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClient.java", "diffHunk": "@@ -469,4 +470,110 @@\n         return client.beginRecognizeBusinessCards(toFluxByteBuffer(businessCard), length,\n             recognizeBusinessCardsOptions, context).getSyncPoller();\n     }\n+\n+    /**\n+     * Recognizes receipt data from document using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * error message indicating absence of cancellation support</p>\n+     * See <a href=\"https://aka.ms/formrecognizer/receiptfields\">here</a> for fields found on a receipt.\n+     *\n+     * <p><strong>Code sample</strong></p>\n+     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl#string}\n+     *\n+     * @param receiptUrl The URL of the receipt to analyze.\n+     *\n+     * @return A {@link SyncPoller} to poll the progress of the recognize receipt operation until it has completed,\n+     * has failed, or has been cancelled. The completed operation returns a list of {@link RecognizedForm}.\n+     * @throws FormRecognizerException If recognize operation fails and the {@link AnalyzeOperationResult} returned with\n+     * an {@link OperationStatus#FAILED}.\n+     * @throws NullPointerException If {@code receiptUrl} is null.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public SyncPoller<FormRecognizerOperationResult, List<RecognizedForm>>\n+        beginRecognizeInvoicesFromUrl(String receiptUrl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275a1023f14672736a844fb00812df92408ea2be"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNjkxNDM5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#pullrequestreview-523691439", "createdAt": "2020-11-04T19:58:57Z", "commit": {"oid": "275a1023f14672736a844fb00812df92408ea2be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxOTo1ODo1N1rOHtnm4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxOTo1ODo1N1rOHtnm4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5Njg5Nw==", "bodyText": "Paul said that invoices would only support en-US for preview.2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#discussion_r517596897", "createdAt": "2020-11-04T19:58:57Z", "author": {"login": "kristapratico"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/RecognizeInvoicesOptions.java", "diffHunk": "@@ -0,0 +1,108 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.Duration;\n+\n+import static com.azure.ai.formrecognizer.implementation.Utility.DEFAULT_POLL_INTERVAL;\n+\n+/**\n+ * Options that may be passed when using recognize invoice APIs on Form Recognizer client.\n+ */\n+@Fluent\n+public final class RecognizeInvoicesOptions {\n+    private FormContentType contentType;\n+    private boolean includeFieldElements;\n+    private String locale;\n+    private Duration pollInterval = DEFAULT_POLL_INTERVAL;\n+\n+    /**\n+     * Get the type of the form. Supported Media types including .pdf, .jpg, .png or .tiff type file stream.\n+     *\n+     * @return the {@code contentType} value.\n+     */\n+    public FormContentType getContentType() {\n+        return contentType;\n+    }\n+\n+    /**\n+     * Get the boolean which specifies if to include form element references in the result.\n+     *\n+     * @return the {@code includeFieldElements} value.\n+     */\n+    public boolean isFieldElementsIncluded() {\n+        return includeFieldElements;\n+    }\n+\n+    /**\n+     * Get the duration between each poll for the operation status. If none is specified, a default of\n+     * 5 seconds is used.\n+     *\n+     * @return the {@code pollInterval} value.\n+     */\n+    public Duration getPollInterval() {\n+        return pollInterval;\n+    }\n+\n+    /**\n+     * Set the type of the form. Supported Media types including .pdf, .jpg, .png or .tiff type file stream.\n+     *\n+     * @param contentType the provided form content type.\n+     *\n+     * @return the updated {@code RecognizeInvoicesOptions} value.\n+     */\n+    public RecognizeInvoicesOptions setContentType(final FormContentType contentType) {\n+        this.contentType = contentType;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the boolean which specifies if to include form element references in the result.\n+     *\n+     * @param includeFieldElements the boolean to specify if to include form element references in the result.\n+     *\n+     * @return the updated {@code RecognizeInvoicesOptions} value.\n+     */\n+    public RecognizeInvoicesOptions setFieldElementsIncluded(final boolean includeFieldElements) {\n+        this.includeFieldElements = includeFieldElements;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the duration between each poll for the operation status. If none is specified, a default of\n+     * 5 seconds is used.\n+     *\n+     * @param pollInterval the duration to specify between each poll for the operation status.\n+     *\n+     * @return the updated {@code RecognizeInvoicesOptions} value.\n+     */\n+    public RecognizeInvoicesOptions setPollInterval(final Duration pollInterval) {\n+        this.pollInterval = pollInterval == null ? DEFAULT_POLL_INTERVAL : pollInterval;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the locale information for the invoice.\n+     * Supported locales include: en-AU, en-CA, en-GB, en-IN, en-US.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275a1023f14672736a844fb00812df92408ea2be"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNjkzNTUx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#pullrequestreview-523693551", "createdAt": "2020-11-04T20:02:04Z", "commit": {"oid": "275a1023f14672736a844fb00812df92408ea2be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDowMjowNVrOHtntTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDowMjowNVrOHtntTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5ODU0MQ==", "bodyText": "this shows business card", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#discussion_r517598541", "createdAt": "2020-11-04T20:02:05Z", "author": {"login": "kristapratico"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -817,4 +818,154 @@ public void beginRecognizeBusinessCardsWithOptions() throws IOException {\n             });\n         // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCards#Flux-long-RecognizeBusinessCardsOptions\n     }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeInvoicesFromUrl(String)}\n+     */\n+    public void beginRecognizeInvoicesFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoicesFromUrl#string\n+        String invoiceUrl = \"invoice_url\";\n+        // if training polling operation completed, retrieve the final result.\n+        formRecognizerAsyncClient.beginRecognizeInvoicesFromUrl(invoiceUrl)\n+            .flatMap(AsyncPollResponse::getFinalResult)\n+            .subscribe(recognizedInvoices -> {\n+                for (int i = 0; i < recognizedInvoices.size(); i++) {\n+                    RecognizedForm recognizedForm = recognizedInvoices.get(i);\n+                    Map<String, FormField> recognizedFields = recognizedForm.getFields();\n+                    FormField customAddrFormField = recognizedFields.get(\"CustomerAddress\");\n+                    if (customAddrFormField != null) {\n+                        if (FieldValueType.STRING == customAddrFormField.getValue().getValueType()) {\n+                            System.out.printf(\"Customer Address: %s%n\", customAddrFormField.getValue().asString());\n+                        }\n+                    }\n+                    FormField invoiceDateFormField = recognizedFields.get(\"InvoiceDate\");\n+                    if (invoiceDateFormField != null) {\n+                        if (FieldValueType.DATE == invoiceDateFormField.getValue().getValueType()) {\n+                            LocalDate invoiceDate = invoiceDateFormField.getValue().asDate();\n+                            System.out.printf(\"Invoice Date: %s, confidence: %.2f%n\",\n+                                invoiceDate, invoiceDateFormField.getConfidence());\n+                        }\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoicesFromUrl#string\n+    }\n+\n+    /**\n+     * Code snippet for\n+     * {@link FormRecognizerAsyncClient#beginRecognizeInvoicesFromUrl(String, RecognizeInvoicesOptions)}\n+     */\n+    public void beginRecognizeInvoicesFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoicesFromUrl#string-RecognizeInvoicesOptions\n+        String invoiceUrl = \"invoice_url\";\n+        boolean includeFieldElements = true;\n+        // if training polling operation completed, retrieve the final result.\n+        formRecognizerAsyncClient.beginRecognizeInvoicesFromUrl(invoiceUrl,\n+            new RecognizeInvoicesOptions()\n+                .setFieldElementsIncluded(includeFieldElements)\n+                .setPollInterval(Duration.ofSeconds(5)))\n+            .flatMap(AsyncPollResponse::getFinalResult)\n+            .subscribe(recognizedInvoices -> {\n+                for (int i = 0; i < recognizedInvoices.size(); i++) {\n+                    RecognizedForm recognizedForm = recognizedInvoices.get(i);\n+                    Map<String, FormField> recognizedFields = recognizedForm.getFields();\n+                    FormField customAddrFormField = recognizedFields.get(\"CustomerAddress\");\n+                    if (customAddrFormField != null) {\n+                        if (FieldValueType.STRING == customAddrFormField.getValue().getValueType()) {\n+                            System.out.printf(\"Customer Address: %s%n\", customAddrFormField.getValue().asString());\n+                        }\n+                    }\n+                    FormField invoiceDateFormField = recognizedFields.get(\"InvoiceDate\");\n+                    if (invoiceDateFormField != null) {\n+                        if (FieldValueType.DATE == invoiceDateFormField.getValue().getValueType()) {\n+                            LocalDate invoiceDate = invoiceDateFormField.getValue().asDate();\n+                            System.out.printf(\"Invoice Date: %s, confidence: %.2f%n\",\n+                                invoiceDate, invoiceDateFormField.getConfidence());\n+                        }\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoicesFromUrl#string-RecognizeInvoicesOptions\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeInvoices(Flux, long)}\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public void beginRecognizeInvoices() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoices#Flux-long\n+        File invoice = new File(\"local/file_path/invoice.jpg\");\n+        Flux<ByteBuffer> buffer =\n+            toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(invoice.toPath())));\n+        // if training polling operation completed, retrieve the final result.\n+        formRecognizerAsyncClient.beginRecognizeBusinessCards(buffer, invoice.length())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275a1023f14672736a844fb00812df92408ea2be"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNjk1ODE4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#pullrequestreview-523695818", "createdAt": "2020-11-04T20:05:34Z", "commit": {"oid": "275a1023f14672736a844fb00812df92408ea2be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDowNTozNVrOHtn0gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDowNTozNVrOHtn0gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwMDM4NA==", "bodyText": "business cards here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#discussion_r517600384", "createdAt": "2020-11-04T20:05:35Z", "author": {"login": "kristapratico"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java", "diffHunk": "@@ -767,4 +769,145 @@ public void beginRecognizeBusinessCardsWithOptions() throws IOException {\n         }\n         // END: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCards#InputStream-long-RecognizeBusinessCardsOptions-Context\n     }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeInvoicesFromUrl(String)}\n+     */\n+    public void beginRecognizeInvoicesFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoicesFromUrl#string\n+        String invoiceUrl = \"invoice_url\";\n+        // if training polling operation completed, retrieve the final result.\n+        formRecognizerClient.beginRecognizeInvoicesFromUrl(invoiceUrl)\n+            .getFinalResult()\n+            .stream()\n+            .map(RecognizedForm::getFields)\n+            .forEach(recognizedFields -> {\n+                FormField customAddrFormField = recognizedFields.get(\"CustomerAddress\");\n+                if (customAddrFormField != null) {\n+                    if (FieldValueType.STRING == customAddrFormField.getValue().getValueType()) {\n+                        System.out.printf(\"Customer Address: %s%n\", customAddrFormField.getValue().asString());\n+                    }\n+                }\n+                FormField invoiceDateFormField = recognizedFields.get(\"InvoiceDate\");\n+                if (invoiceDateFormField != null) {\n+                    if (FieldValueType.DATE == invoiceDateFormField.getValue().getValueType()) {\n+                        LocalDate invoiceDate = invoiceDateFormField.getValue().asDate();\n+                        System.out.printf(\"Invoice Date: %s, confidence: %.2f%n\",\n+                            invoiceDate, invoiceDateFormField.getConfidence());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoicesFromUrl#string\n+    }\n+\n+    /**\n+     * Code snippet for\n+     * {@link FormRecognizerAsyncClient#beginRecognizeInvoicesFromUrl(String, RecognizeInvoicesOptions)}\n+     */\n+    public void beginRecognizeInvoicesFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoicesFromUrl#string-RecognizeInvoicesOptions-Context\n+        String invoiceUrl = \"invoice_url\";\n+        boolean includeFieldElements = true;\n+        // if training polling operation completed, retrieve the final result.\n+        formRecognizerClient.beginRecognizeInvoicesFromUrl(invoiceUrl,\n+            new RecognizeInvoicesOptions()\n+                .setFieldElementsIncluded(includeFieldElements)\n+                .setPollInterval(Duration.ofSeconds(5)), Context.NONE)\n+            .getFinalResult()\n+            .stream()\n+            .map(RecognizedForm::getFields)\n+            .forEach(recognizedFields -> {\n+                FormField customAddrFormField = recognizedFields.get(\"CustomerAddress\");\n+                if (customAddrFormField != null) {\n+                    if (FieldValueType.STRING == customAddrFormField.getValue().getValueType()) {\n+                        System.out.printf(\"Customer Address: %s%n\", customAddrFormField.getValue().asString());\n+                    }\n+                }\n+                FormField invoiceDateFormField = recognizedFields.get(\"InvoiceDate\");\n+                if (invoiceDateFormField != null) {\n+                    if (FieldValueType.DATE == invoiceDateFormField.getValue().getValueType()) {\n+                        LocalDate invoiceDate = invoiceDateFormField.getValue().asDate();\n+                        System.out.printf(\"Invoice Date: %s, confidence: %.2f%n\",\n+                            invoiceDate, invoiceDateFormField.getConfidence());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoicesFromUrl#string-RecognizeInvoicesOptions-Context\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeInvoices(Flux, long)}\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public void beginRecognizeInvoices() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoices#InputStream-long\n+        File invoice = new File(\"local/file_path/invoice.jpg\");\n+        ByteArrayInputStream inputStream = new ByteArrayInputStream(Files.readAllBytes(invoice.toPath()));\n+        // if training polling operation completed, retrieve the final result.\n+        formRecognizerClient.beginRecognizeBusinessCards(inputStream, invoice.length())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275a1023f14672736a844fb00812df92408ea2be"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "547a1d1d1346cb0db6af74bbede1c22fa9a719d2", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/547a1d1d1346cb0db6af74bbede1c22fa9a719d2", "committedDate": "2020-11-04T21:50:59Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a14f6bedcf1cf5210b8fa7c74d079ae1eaa68e62", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a14f6bedcf1cf5210b8fa7c74d079ae1eaa68e62", "committedDate": "2020-11-05T00:39:26Z", "message": "update multipage recordings and file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b17ab02b0af0c8e08cbf7bc694e8cd643c8be204", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/b17ab02b0af0c8e08cbf7bc694e8cd643c8be204", "committedDate": "2020-11-05T00:58:07Z", "message": "add invoice samples"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NTUzNjMx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#pullrequestreview-524553631", "createdAt": "2020-11-05T18:35:08Z", "commit": {"oid": "b17ab02b0af0c8e08cbf7bc694e8cd643c8be204"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODozNTowOFrOHuRA7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODozNTowOFrOHuRA7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3NTMwOA==", "bodyText": "just curious, what drove this change?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#discussion_r518275308", "createdAt": "2020-11-05T18:35:08Z", "author": {"login": "maririos"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -215,22 +217,26 @@ private Transforms() {\n      * @return The list of per page {@code FormTable}.\n      */\n     static List<FormTable> getPageTables(PageResult pageResultItem, List<ReadResult> readResults, int pageNumber) {\n-        return pageResultItem.getTables().stream()\n-            .map(dataTable ->\n-                new FormTable(dataTable.getRows(), dataTable.getColumns(),\n-                    dataTable.getCells()\n-                        .stream()\n-                        .map(dataTableCell -> new FormTableCell(\n-                            dataTableCell.getRowIndex(), dataTableCell.getColumnIndex(),\n-                            dataTableCell.getRowSpan() == null ? DEFAULT_TABLE_SPAN : dataTableCell.getRowSpan(),\n-                            dataTableCell.getColumnSpan() == null ? DEFAULT_TABLE_SPAN : dataTableCell.getColumnSpan(),\n-                            dataTableCell.getText(), toBoundingBox(dataTableCell.getBoundingBox()),\n-                            dataTableCell.getConfidence(),\n-                            dataTableCell.isHeader() == null ? false : dataTableCell.isHeader(),\n-                            dataTableCell.isFooter() == null ? false : dataTableCell.isFooter(),\n-                            pageNumber, setReferenceElements(dataTableCell.getElements(), readResults)))\n-                        .collect(Collectors.toList()), pageNumber))\n-            .collect(Collectors.toList());\n+        if (pageResultItem.getTables() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b17ab02b0af0c8e08cbf7bc694e8cd643c8be204"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NTU0NTk0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#pullrequestreview-524554594", "createdAt": "2020-11-05T18:36:23Z", "commit": {"oid": "b17ab02b0af0c8e08cbf7bc694e8cd643c8be204"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODozNjoyNFrOHuRD8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODozNjoyNFrOHuRD8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3NjA4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * See fields found on a receipt here:\n          \n          \n            \n             * See fields found on a invoice here:", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#discussion_r518276083", "createdAt": "2020-11-05T18:36:24Z", "author": {"login": "maririos"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeInvoicesAsync.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FieldValueType;\n+import com.azure.ai.formrecognizer.models.FormField;\n+import com.azure.ai.formrecognizer.models.FormRecognizerOperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.time.LocalDate;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.azure.ai.formrecognizer.implementation.Utility.toFluxByteBuffer;\n+\n+/**\n+ * Async sample for recognizing commonly found invoice fields from a local file input stream of an invoice document.\n+ * For a suggested approach to extracting information from a general recognized form, see StronglyTypedRecognizedForm.java.\n+ * See fields found on a receipt here:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b17ab02b0af0c8e08cbf7bc694e8cd643c8be204"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b0dc35e62aa3cbd8ad717e7175f795a8aecdc57", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2b0dc35e62aa3cbd8ad717e7175f795a8aecdc57", "committedDate": "2020-11-05T18:38:59Z", "message": "Update sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeInvoicesAsync.java\n\nCo-authored-by: Mariana Rios Flores <mariari@microsoft.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NTU3Njkw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#pullrequestreview-524557690", "createdAt": "2020-11-05T18:40:30Z", "commit": {"oid": "b17ab02b0af0c8e08cbf7bc694e8cd643c8be204"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NTU5ODAx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#pullrequestreview-524559801", "createdAt": "2020-11-05T18:43:22Z", "commit": {"oid": "2b0dc35e62aa3cbd8ad717e7175f795a8aecdc57"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo0MzoyM1rOHuRTtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo0MzoyM1rOHuRTtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4MDExOQ==", "bodyText": "this docstring uses receipt instead of invoice", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#discussion_r518280119", "createdAt": "2020-11-05T18:43:23Z", "author": {"login": "kristapratico"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClient.java", "diffHunk": "@@ -469,4 +470,110 @@\n         return client.beginRecognizeBusinessCards(toFluxByteBuffer(businessCard), length,\n             recognizeBusinessCardsOptions, context).getSyncPoller();\n     }\n+\n+    /**\n+     * Recognizes receipt data from document using optical character recognition (OCR) and a prebuilt receipt trained", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b0dc35e62aa3cbd8ad717e7175f795a8aecdc57"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NTYwMDkx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#pullrequestreview-524560091", "createdAt": "2020-11-05T18:43:44Z", "commit": {"oid": "2b0dc35e62aa3cbd8ad717e7175f795a8aecdc57"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo0Mzo0NVrOHuRUgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo0Mzo0NVrOHuRUgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4MDMyMA==", "bodyText": "same here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#discussion_r518280320", "createdAt": "2020-11-05T18:43:45Z", "author": {"login": "kristapratico"}, "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClient.java", "diffHunk": "@@ -469,4 +470,110 @@\n         return client.beginRecognizeBusinessCards(toFluxByteBuffer(businessCard), length,\n             recognizeBusinessCardsOptions, context).getSyncPoller();\n     }\n+\n+    /**\n+     * Recognizes receipt data from document using optical character recognition (OCR) and a prebuilt receipt trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * error message indicating absence of cancellation support</p>\n+     * See <a href=\"https://aka.ms/formrecognizer/receiptfields\">here</a> for fields found on a receipt.\n+     *\n+     * <p><strong>Code sample</strong></p>\n+     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl#string}\n+     *\n+     * @param invoiceUrl The URL of the receipt to analyze.\n+     *\n+     * @return A {@link SyncPoller} to poll the progress of the recognize receipt operation until it has completed,\n+     * has failed, or has been cancelled. The completed operation returns a list of {@link RecognizedForm}.\n+     * @throws FormRecognizerException If recognize operation fails and the {@link AnalyzeOperationResult} returned with\n+     * an {@link OperationStatus#FAILED}.\n+     * @throws NullPointerException If {@code invoiceUrl} is null.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public SyncPoller<FormRecognizerOperationResult, List<RecognizedForm>>\n+        beginRecognizeInvoicesFromUrl(String invoiceUrl) {\n+        return beginRecognizeInvoicesFromUrl(invoiceUrl, null, Context.NONE);\n+    }\n+\n+    /**\n+     * Recognizes invoice data from documents using optical character recognition (OCR) and a\n+     * prebuilt invoice trained model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * error message indicating absence of cancellation support</p>\n+     *\n+     * <p><strong>Code sample</strong></p>\n+     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoicesFromUrl#string-RecognizeInvoicesOptions-Context}\n+     *\n+     * @param invoiceUrl The source URL to the input receipt.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b0dc35e62aa3cbd8ad717e7175f795a8aecdc57"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NTYyMDAx", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17167#pullrequestreview-524562001", "createdAt": "2020-11-05T18:46:17Z", "commit": {"oid": "2b0dc35e62aa3cbd8ad717e7175f795a8aecdc57"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c6eac240462e689a15f59173ce486a37fcc7f98", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0c6eac240462e689a15f59173ce486a37fcc7f98", "committedDate": "2020-11-05T21:55:38Z", "message": "update references for receipt with invoices"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a94fcfec8f0cabb353d732a9e894359f55301e9", "author": {"user": {"login": "samvaity", "name": "Sameeksha Vaity"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8a94fcfec8f0cabb353d732a9e894359f55301e9", "committedDate": "2020-11-05T21:56:39Z", "message": "Merge branch 'invoice-feature-p2' of https://github.com/samvaity/azure-sdk-for-java into invoice-feature-p2"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 200, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}