{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MDQ0NTY2", "number": 15135, "title": "Add telemetry samples", "bodyText": "", "createdAt": "2020-09-12T22:33:11Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15135", "merged": true, "mergeCommit": {"oid": "3a9943077bfb2c939d6836d708d1d4f8a7da0a67"}, "closed": true, "closedAt": "2020-09-14T17:06:29Z", "author": {"login": "azabbasi"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdIRytMAH2gAyNDg2MDQ0NTY2Ojc1NTFjYTMwMDI3MzA4YTc2MDllNWM5NWUzOGU4MDgwZjUzY2QyZDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdI2FYjgH2gAyNDg2MDQ0NTY2OmRmNDA0MjkwYzE4MGM2MTg1MmEwMzAwMThkY2RiYjIxNDQ5NDhlOGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7551ca30027308a7609e5c95e38e8080f53cd2d0", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7551ca30027308a7609e5c95e38e8080f53cd2d0", "committedDate": "2020-09-12T22:32:24Z", "message": "Add telemetry samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ea20d8b0abf28586e79c6e6fabb74067b4a7d24", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7ea20d8b0abf28586e79c6e6fabb74067b4a7d24", "committedDate": "2020-09-12T22:35:37Z", "message": "Update logs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3OTUxMjQz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15135#pullrequestreview-487951243", "createdAt": "2020-09-14T16:35:19Z", "commit": {"oid": "7ea20d8b0abf28586e79c6e6fabb74067b4a7d24"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3OTUxOTY4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15135#pullrequestreview-487951968", "createdAt": "2020-09-14T16:36:15Z", "commit": {"oid": "7ea20d8b0abf28586e79c6e6fabb74067b4a7d24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjozNjoxNlrOHRdbwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjozNjoxNlrOHRdbwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MDA4MA==", "bodyText": "Did we remove the extra deserialization to Object that was happening in the CL for these APIs?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15135#discussion_r488070080", "createdAt": "2020-09-14T16:36:16Z", "author": {"login": "abhipsaMisra"}, "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/PublishTelemetrySyncSamples.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+import com.azure.digitaltwins.core.helpers.SamplesConstants;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.models.*;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.function.Function;\n+\n+public class PublishTelemetrySyncSamples {\n+    private static DigitalTwinsClient client;\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    public static Function<Integer, String> randomIntegerStringGenerator = (maxLength) -> {\n+        int randInt = new Random().nextInt((int)Math.pow(10, 8) - 1) + 1;\n+        return String.valueOf(randInt);\n+    };\n+\n+    public static void main(String[] args) throws IOException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .credential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        runPublishTelemetrySample();\n+    }\n+\n+    public static void runPublishTelemetrySample() throws JsonProcessingException {\n+\n+        ConsoleLogger.printHeader(\"Telemetry Samples\");\n+\n+        // For the purpose of this example we will create temporary models using a random model Ids.\n+        // We have to make sure these model Ids are unique within the DT instance.\n+\n+        String componentModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TEMPORARY_COMPONENT_MODEL_PREFIX, client, randomIntegerStringGenerator);\n+        String modelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TEMPORARY_MODEL_PREFIX, client, randomIntegerStringGenerator);\n+        String digitalTwinId = UniqueIdHelper.getUniqueDigitalTwinId(SamplesConstants.TEMPORARY_TWIN_PREFIX, client, randomIntegerStringGenerator);\n+\n+        String newComponentModelPayload = SamplesConstants.TEMPORARY_COMPONENT_MODEL_PAYLOAD\n+            .replace(SamplesConstants.COMPONENT_ID, componentModelId);\n+\n+        String newModelPayload = SamplesConstants.TEMPORARY_MODEL_WITH_COMPONENT_PAYLOAD\n+            .replace(SamplesConstants.MODEL_ID, modelId)\n+            .replace(SamplesConstants.COMPONENT_ID, componentModelId);\n+\n+        List<String> modelsList = new ArrayList<>(Arrays.asList(newComponentModelPayload, newModelPayload));\n+\n+        ConsoleLogger.printHeader(\"Create Models\");\n+        // We now create all the models (including components)\n+        List<ModelData> modelList =  client.createModels(modelsList);\n+\n+        for (ModelData model : modelList) {\n+            ConsoleLogger.print(\"Created model: \" + model.getId());\n+        }\n+\n+        ConsoleLogger.printHeader(\"Create DigitalTwin\");\n+\n+        String twinPayload = SamplesConstants.TEMPORARY_TWIN_PAYLOAD\n+            .replace(SamplesConstants.MODEL_ID, modelId);\n+\n+        client.createDigitalTwin(digitalTwinId, twinPayload);\n+\n+        ConsoleLogger.printSuccess(\"Created digital twin \" + digitalTwinId);\n+        try\n+        {\n+            ConsoleLogger.printHeader(\"Publish Telemetry\");\n+            // construct your json telemetry payload by hand.\n+            client.publishTelemetry(digitalTwinId, \"{\\\"Telemetry1\\\": 5}\");\n+            ConsoleLogger.print(\"Published telemetry message to twin \" + digitalTwinId);\n+\n+            ConsoleLogger.printHeader(\"Publish Component Telemetry\");\n+            PublishTelemetryRequestOptions componentTelemetryRequestOptions = new PublishTelemetryRequestOptions();\n+\n+            // construct your json telemetry payload using a hashtable.\n+            Dictionary<String, Integer> telemetryPayload = new Hashtable<>();\n+            telemetryPayload.put(\"ComponentTelemetry1\", 9);\n+            String telemetryStringPayload = new ObjectMapper().writeValueAsString(telemetryPayload);\n+\n+            Response<Void> publishComponentTelemetryResponse = client.publishComponentTelemetryWithResponse(\n+                digitalTwinId,\n+                \"Component1\",\n+                telemetryStringPayload,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea20d8b0abf28586e79c6e6fabb74067b4a7d24"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8f83638a4f96e34c346911d9c571fbd85bd5136", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f8f83638a4f96e34c346911d9c571fbd85bd5136", "committedDate": "2020-09-14T16:44:57Z", "message": "Update DigitalTwinsAsyncClient.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df404290c180c61852a030018dcdbb2144948e8a", "author": {"user": {"login": "azabbasi", "name": "Azad Abbasi"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/df404290c180c61852a030018dcdbb2144948e8a", "committedDate": "2020-09-14T16:49:23Z", "message": "Update DigitalTwinsAsyncClient.java"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3469, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}