{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2Mzg0Mjg3", "number": 8910, "title": "added some datalake buffered upload samples", "bodyText": "", "createdAt": "2020-03-10T21:57:51Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8910", "merged": true, "mergeCommit": {"oid": "12ccb06a485fd756b49e403407765c2b50b48dd9"}, "closed": true, "closedAt": "2020-03-11T00:05:01Z", "author": {"login": "gapra-msft"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMZzntgH2gAyMzg2Mzg0Mjg3OmRmM2Q2ODNkMGVlYmMxNWIwZTQ0MzE4ZjkyMDMyOTRhZGU2ZGNjOTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMZ-RWgFqTM3MjM1NTgyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "df3d683d0eebc15b0e44318f9203294ade6dcc98", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/df3d683d0eebc15b0e44318f9203294ade6dcc98", "committedDate": "2020-03-10T21:57:11Z", "message": "added some samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01eadfa7eb87a501aed31165682c07ca6636de17", "author": {"user": null}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/01eadfa7eb87a501aed31165682c07ca6636de17", "committedDate": "2020-03-10T21:59:52Z", "message": "removed upload download example"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzUzMzE2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8910#pullrequestreview-372353316", "createdAt": "2020-03-10T22:03:36Z", "commit": {"oid": "01eadfa7eb87a501aed31165682c07ca6636de17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjowMzozNlrOF0in0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjowMzozNlrOF0in0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzNzUyMg==", "bodyText": "This isn't actually necessary, especially since we specify overwrite on downloadToFile.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8910#discussion_r390637522", "createdAt": "2020-03-10T22:03:36Z", "author": {"login": "rickle-msft"}, "path": "sdk/storage/azure-storage-file-datalake/src/samples/java/com/azure/storage/file/datalake/FileTransferExample.java", "diffHunk": "@@ -0,0 +1,174 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake;\n+\n+import com.azure.storage.common.StorageSharedKeyCredential;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Locale;\n+\n+/**\n+ * This class shows how to upload the file as fast as possible in parallel using the optimized upload API.\n+ */\n+public class FileTransferExample {\n+    private static final String LARGE_TEST_FOLDER = \"test-large-files/\";\n+\n+    /**\n+     * Entry point into the file transfer examples for Storage datalake.\n+     * @param args Unused. Arguments to the program.\n+     * @throws IOException If an I/O error occurs\n+     * @throws NoSuchAlgorithmException If {@code MD5} isn't supported\n+     * @throws RuntimeException If the uploaded or downloaded file wasn't found\n+     */\n+    public static void main(String[] args) throws IOException, NoSuchAlgorithmException {\n+\n+        /*\n+         * From the Azure portal, get your Storage account's name and account key.\n+         */\n+        String accountName = SampleHelper.getAccountName();\n+        String accountKey = SampleHelper.getAccountKey();\n+\n+        /*\n+         * Use your Storage account's name and key to create a credential object; this is used to access your account.\n+         */\n+        StorageSharedKeyCredential credential = new StorageSharedKeyCredential(accountName, accountKey);\n+\n+        /*\n+         * From the Azure portal, get your Storage account datalake service URL endpoint.\n+         * The URL typically looks like this:\n+         */\n+        String endPoint = String.format(Locale.ROOT, \"https://%s.dfs.core.windows.net\", accountName);\n+\n+        /*\n+         * Create a DataLakeServiceClient object that wraps the service endpoint, credential and a request pipeline.\n+         * Now you can use the storageClient to perform various file system and path operations.\n+         */\n+        DataLakeServiceClient storageClient = new DataLakeServiceClientBuilder().endpoint(endPoint).credential(credential).buildClient();\n+\n+\n+        /*\n+         * This example shows several common operations just to get you started.\n+         */\n+\n+\n+        /*\n+         * Create a client that references a to-be-created file system in your Azure Storage account. This returns a\n+         * FileSystemClient uses the same endpoint, credential and pipeline from storageClient.\n+         * Note that file system names require lowercase.\n+         */\n+        DataLakeFileSystemClient fileSystemClient = storageClient.getFileSystemClient(\"myjavafilesystemparallelupload\" + System.currentTimeMillis());\n+\n+        /*\n+         * Create a file system in Storage datalake account.\n+         */\n+        fileSystemClient.create();\n+\n+        /*\n+         * Create a FileClient object that wraps a file's endpoint and a default pipeline, the client give us access to upload the file.\n+         */\n+        String filename = \"BigFile.bin\";\n+        DataLakeFileClient fileClient = fileSystemClient.getFileClient(filename);\n+\n+        /*\n+         * Create the empty uploadFile and downloadFile.\n+         */\n+        File largeFile = createTempEmptyFile(filename);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01eadfa7eb87a501aed31165682c07ca6636de17"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzUzMzc4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8910#pullrequestreview-372353378", "createdAt": "2020-03-10T22:03:44Z", "commit": {"oid": "01eadfa7eb87a501aed31165682c07ca6636de17"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzU1ODIw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8910#pullrequestreview-372355820", "createdAt": "2020-03-10T22:08:49Z", "commit": {"oid": "01eadfa7eb87a501aed31165682c07ca6636de17"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 881, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}