{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMzIyOTM4", "number": 17039, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMDowNToxOVrOEz_guA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzo0NTozNFrOE0fJRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTUzNDAwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMDowNToxOVrOHrjTMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMDo1Mjo0M1rOHrjszw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyOTE2OQ==", "bodyText": "getTotalTimeout makes more sense.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17039#discussion_r515429169", "createdAt": "2020-10-31T00:05:19Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -610,7 +611,7 @@ public ServiceBusSenderAsyncClient buildAsyncClient() {\n          * @throws IllegalArgumentException if the entity type is not a queue or a topic.\n          */\n         public ServiceBusSenderClient buildClient() {\n-            return new ServiceBusSenderClient(buildAsyncClient(), retryOptions.getTryTimeout());\n+            return new ServiceBusSenderClient(buildAsyncClient(), MessageUtils.calcTotalTimeout(retryOptions));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483b4dbaf4736fc5af06f9dfac497cbaec6cfdeb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQzNTcyNw==", "bodyText": "Changed to get", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17039#discussion_r515435727", "createdAt": "2020-10-31T00:52:43Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -610,7 +611,7 @@ public ServiceBusSenderAsyncClient buildAsyncClient() {\n          * @throws IllegalArgumentException if the entity type is not a queue or a topic.\n          */\n         public ServiceBusSenderClient buildClient() {\n-            return new ServiceBusSenderClient(buildAsyncClient(), retryOptions.getTryTimeout());\n+            return new ServiceBusSenderClient(buildAsyncClient(), MessageUtils.calcTotalTimeout(retryOptions));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyOTE2OQ=="}, "originalCommit": {"oid": "483b4dbaf4736fc5af06f9dfac497cbaec6cfdeb"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTUzNDcwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/implementation/MessageUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMDowNTo1OVrOHrjTmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMDo1MjoyOVrOHrjssw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyOTI3NQ==", "bodyText": "Can we spell out these abbreviations? calc -> calculate.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17039#discussion_r515429275", "createdAt": "2020-10-31T00:05:59Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/implementation/MessageUtilsTest.java", "diffHunk": "@@ -60,4 +68,33 @@ void convertUUIDToDotNetBytes() {\n         // Assert\n         assertArrayEquals(dotNetGuidBytes, convertedBytes, \"UUID conversion from Java to DotNet failed\");\n     }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"calcTotalTimeoutTestData\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483b4dbaf4736fc5af06f9dfac497cbaec6cfdeb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQzNTY5OQ==", "bodyText": "Spelt out", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17039#discussion_r515435699", "createdAt": "2020-10-31T00:52:29Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/implementation/MessageUtilsTest.java", "diffHunk": "@@ -60,4 +68,33 @@ void convertUUIDToDotNetBytes() {\n         // Assert\n         assertArrayEquals(dotNetGuidBytes, convertedBytes, \"UUID conversion from Java to DotNet failed\");\n     }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"calcTotalTimeoutTestData\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyOTI3NQ=="}, "originalCommit": {"oid": "483b4dbaf4736fc5af06f9dfac497cbaec6cfdeb"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTUzNTM2OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/implementation/MessageUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMDowNjozNlrOHrjT9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMDo1MzowNVrOHrjs8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyOTM2Nw==", "bodyText": "The order is assertEquals(expected, actual)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17039#discussion_r515429367", "createdAt": "2020-10-31T00:06:36Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/implementation/MessageUtilsTest.java", "diffHunk": "@@ -60,4 +68,33 @@ void convertUUIDToDotNetBytes() {\n         // Assert\n         assertArrayEquals(dotNetGuidBytes, convertedBytes, \"UUID conversion from Java to DotNet failed\");\n     }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"calcTotalTimeoutTestData\")\n+    void calcTotalTimeout(List<Object> testData) {\n+        AmqpRetryOptions amqpRetryOptions = (AmqpRetryOptions) testData.get(0);\n+        long expectedResult = (long) testData.get(1);\n+        assertEquals(MessageUtils.calcTotalTimeout(amqpRetryOptions).toMillis(), expectedResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483b4dbaf4736fc5af06f9dfac497cbaec6cfdeb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQzNTc2MA==", "bodyText": "Updated", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17039#discussion_r515435760", "createdAt": "2020-10-31T00:53:05Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/implementation/MessageUtilsTest.java", "diffHunk": "@@ -60,4 +68,33 @@ void convertUUIDToDotNetBytes() {\n         // Assert\n         assertArrayEquals(dotNetGuidBytes, convertedBytes, \"UUID conversion from Java to DotNet failed\");\n     }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"calcTotalTimeoutTestData\")\n+    void calcTotalTimeout(List<Object> testData) {\n+        AmqpRetryOptions amqpRetryOptions = (AmqpRetryOptions) testData.get(0);\n+        long expectedResult = (long) testData.get(1);\n+        assertEquals(MessageUtils.calcTotalTimeout(amqpRetryOptions).toMillis(), expectedResult);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyOTM2Nw=="}, "originalCommit": {"oid": "483b4dbaf4736fc5af06f9dfac497cbaec6cfdeb"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTUzNzQzOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/implementation/MessageUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMDowODo0M1rOHrjVLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMDo1Mzo0NVrOHrjtMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyOTY3OA==", "bodyText": "This is hard to read. You can pass in a Stream and it'll try to deserialize it into the actual typees. Look for uses in our other tests.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17039#discussion_r515429678", "createdAt": "2020-10-31T00:08:43Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/implementation/MessageUtilsTest.java", "diffHunk": "@@ -60,4 +68,33 @@ void convertUUIDToDotNetBytes() {\n         // Assert\n         assertArrayEquals(dotNetGuidBytes, convertedBytes, \"UUID conversion from Java to DotNet failed\");\n     }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"calcTotalTimeoutTestData\")\n+    void calcTotalTimeout(List<Object> testData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483b4dbaf4736fc5af06f9dfac497cbaec6cfdeb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQzNTgyNA==", "bodyText": "Changed to use Arguments.of and auto-deserialize. Thanks for the suggestion.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17039#discussion_r515435824", "createdAt": "2020-10-31T00:53:45Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/implementation/MessageUtilsTest.java", "diffHunk": "@@ -60,4 +68,33 @@ void convertUUIDToDotNetBytes() {\n         // Assert\n         assertArrayEquals(dotNetGuidBytes, convertedBytes, \"UUID conversion from Java to DotNet failed\");\n     }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"calcTotalTimeoutTestData\")\n+    void calcTotalTimeout(List<Object> testData) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyOTY3OA=="}, "originalCommit": {"oid": "483b4dbaf4736fc5af06f9dfac497cbaec6cfdeb"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTcxNDcwOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzo1ODo1OVrOHrksHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMToxODozM1rOHsV-iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTkzNQ==", "bodyText": "The default in AmqpRetryOption is  AmqpRetryMode.EXPONENTIAL  which is what we use in our builder. So by default most of our customer will use EXPONENTIAL and exponent of 2 based on this logic  and this is different from how we will do EXPONENTIAL retry for Connections\nhttps://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/RetryUtil.java#L86\nI am not saying it should be same but I am pointing that it is different.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17039#discussion_r515451935", "createdAt": "2020-10-31T03:58:59Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -68,6 +70,30 @@ public static Duration adjustServerTimeout(Duration clientTimeout) {\n         return clientTimeout.minusMillis(1000);\n     }\n \n+    /**\n+     * Calculate the total time from the retry options assuming all retries are exhausted.\n+     */\n+    public static Duration getTotalTimeout(AmqpRetryOptions retryOptions) {\n+        long tryTimeout = retryOptions.getTryTimeout().toNanos();\n+        long maxDelay = retryOptions.getMaxDelay().toNanos();\n+        long totalTimeout = tryTimeout;  // The original attempt not counted as a retry\n+        if (retryOptions.getMode() == AmqpRetryMode.FIXED) {\n+            totalTimeout += (retryOptions.getDelay().toNanos() + tryTimeout) * retryOptions.getMaxRetries();\n+        } else {\n+            int multiplier = 1;\n+            for (int i = 0; i < retryOptions.getMaxRetries(); i++) {\n+                long retryDelay = retryOptions.getDelay().toNanos() * multiplier;\n+                if (retryDelay >= maxDelay) {\n+                    retryDelay = maxDelay;\n+                    totalTimeout += (tryTimeout + retryDelay) * (retryOptions.getMaxRetries() - i);\n+                    break;\n+                }\n+                multiplier *= 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff955c4251da7a166af6d3d1c70110e9b6dd1bb0"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI1OTQ2NQ==", "bodyText": "RetryUtil calculates the delay (exponential or fixed). This is to calculates the total timeout including the delay.\nThe delay part is the same except that there is a very small random jitter in RetryUtil.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17039#discussion_r516259465", "createdAt": "2020-11-02T21:18:33Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -68,6 +70,30 @@ public static Duration adjustServerTimeout(Duration clientTimeout) {\n         return clientTimeout.minusMillis(1000);\n     }\n \n+    /**\n+     * Calculate the total time from the retry options assuming all retries are exhausted.\n+     */\n+    public static Duration getTotalTimeout(AmqpRetryOptions retryOptions) {\n+        long tryTimeout = retryOptions.getTryTimeout().toNanos();\n+        long maxDelay = retryOptions.getMaxDelay().toNanos();\n+        long totalTimeout = tryTimeout;  // The original attempt not counted as a retry\n+        if (retryOptions.getMode() == AmqpRetryMode.FIXED) {\n+            totalTimeout += (retryOptions.getDelay().toNanos() + tryTimeout) * retryOptions.getMaxRetries();\n+        } else {\n+            int multiplier = 1;\n+            for (int i = 0; i < retryOptions.getMaxRetries(); i++) {\n+                long retryDelay = retryOptions.getDelay().toNanos() * multiplier;\n+                if (retryDelay >= maxDelay) {\n+                    retryDelay = maxDelay;\n+                    totalTimeout += (tryTimeout + retryDelay) * (retryOptions.getMaxRetries() - i);\n+                    break;\n+                }\n+                multiplier *= 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTkzNQ=="}, "originalCommit": {"oid": "ff955c4251da7a166af6d3d1c70110e9b6dd1bb0"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDcxNjg3OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzo0NTozNFrOHsPTCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMToxODowOVrOHsV94Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE1MDAyNQ==", "bodyText": "Can we create an issue to move this logic into as a part of of AMQP Retry policy? It seems like a lot of special logic that could be aggregated into the different retry policies we have.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17039#discussion_r516150025", "createdAt": "2020-11-02T17:45:34Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -68,6 +70,30 @@ public static Duration adjustServerTimeout(Duration clientTimeout) {\n         return clientTimeout.minusMillis(1000);\n     }\n \n+    /**\n+     * Calculate the total time from the retry options assuming all retries are exhausted.\n+     */\n+    public static Duration getTotalTimeout(AmqpRetryOptions retryOptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff955c4251da7a166af6d3d1c70110e9b6dd1bb0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE1MDcwNw==", "bodyText": "One of the things we consider is \"jitter\" to each retry... so this may not be exact. But it may be enough.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17039#discussion_r516150707", "createdAt": "2020-11-02T17:46:44Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -68,6 +70,30 @@ public static Duration adjustServerTimeout(Duration clientTimeout) {\n         return clientTimeout.minusMillis(1000);\n     }\n \n+    /**\n+     * Calculate the total time from the retry options assuming all retries are exhausted.\n+     */\n+    public static Duration getTotalTimeout(AmqpRetryOptions retryOptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE1MDAyNQ=="}, "originalCommit": {"oid": "ff955c4251da7a166af6d3d1c70110e9b6dd1bb0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE1NjY1Ng==", "bodyText": "Will create an issue to for AMQP retry policy and re-considering jitter. Good suggestion.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17039#discussion_r516156656", "createdAt": "2020-11-02T17:56:42Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -68,6 +70,30 @@ public static Duration adjustServerTimeout(Duration clientTimeout) {\n         return clientTimeout.minusMillis(1000);\n     }\n \n+    /**\n+     * Calculate the total time from the retry options assuming all retries are exhausted.\n+     */\n+    public static Duration getTotalTimeout(AmqpRetryOptions retryOptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE1MDAyNQ=="}, "originalCommit": {"oid": "ff955c4251da7a166af6d3d1c70110e9b6dd1bb0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI1OTI5Nw==", "bodyText": "#17072 created", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17039#discussion_r516259297", "createdAt": "2020-11-02T21:18:09Z", "author": {"login": "YijunXieMS"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/MessageUtils.java", "diffHunk": "@@ -68,6 +70,30 @@ public static Duration adjustServerTimeout(Duration clientTimeout) {\n         return clientTimeout.minusMillis(1000);\n     }\n \n+    /**\n+     * Calculate the total time from the retry options assuming all retries are exhausted.\n+     */\n+    public static Duration getTotalTimeout(AmqpRetryOptions retryOptions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE1MDAyNQ=="}, "originalCommit": {"oid": "ff955c4251da7a166af6d3d1c70110e9b6dd1bb0"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3819, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}