{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MDU5OTg5", "number": 17739, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTozODoyNVrOE8Ip-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzo0Mzo0OFrOE8cPiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDkxODMzOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTozODoyNVrOH4FdmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTozODoyNVrOH4FdmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU3MTgwMQ==", "bodyText": "Changing back to How Yijun has done for acceptNextSession. Exactly same way here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17739#discussion_r528571801", "createdAt": "2020-11-23T09:38:25Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java", "diffHunk": "@@ -110,16 +110,17 @@\n         if (CoreUtils.isNullOrEmpty(sessionId)) {\n             return monoError(logger, new IllegalArgumentException(\"'sessionId' cannot be empty\"));\n         }\n+\n         final ReceiverOptions newReceiverOptions = new ReceiverOptions(receiverOptions.getReceiveMode(),\n             receiverOptions.getPrefetchCount(), receiverOptions.getMaxLockRenewDuration(),\n             receiverOptions.isEnableAutoComplete(), sessionId, null);\n+        final ServiceBusSessionManager sessionSpecificManager = new ServiceBusSessionManager(entityPath, entityType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8fe80402f1c4571517c3f8a02c53bda86e2dfb"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzcwNjI1OnYy", "diffSide": "LEFT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMToyMToxNVrOH4f2pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMToyMToxNVrOH4f2pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAwNDE5OQ==", "bodyText": "getMessage(messageId, isSessionEnabled); Already set session id , we do not need this again.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17739#discussion_r529004199", "createdAt": "2020-11-23T21:21:15Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -659,90 +716,90 @@ void receiveAndRenewLock(MessagingEntityType entityType) {\n     @ParameterizedTest\n     void autoRenewLockOnReceiveMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n         // Arrange\n-        setSenderAndReceiver(entityType, 0, isSessionEnabled);\n+        final AtomicInteger lockRenewCount = new AtomicInteger();\n+\n+        setSender(entityType, TestUtils.USE_CASE_DEFAULT, isSessionEnabled);\n \n         final String messageId = UUID.randomUUID().toString();\n         final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n \n-        if (isSessionEnabled) {\n-            message.setSessionId(sessionId);\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70dfb94f7033bc80532fa7d0c07caa907a67060"}, "originalPosition": 467}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzcxNjgyOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMToyNDo0NVrOH4f8_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMToyNDo0NVrOH4f8_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAwNTgyMg==", "bodyText": "Just like we are checking constant values for other properties, I an using fixed value here.  This is to avoid left over messages case.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17739#discussion_r529005822", "createdAt": "2020-11-23T21:24:45Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -819,34 +875,31 @@ void sendReceiveMessageWithVariousPropertyTypes(MessagingEntityType entityType)\n         sentProperties.put(\"FloatProperty\", 5.5f);\n         sentProperties.put(\"DoubleProperty\", 6.6f);\n         sentProperties.put(\"CharProperty\", 'z');\n-        sentProperties.put(\"UUIDProperty\", UUID.randomUUID());\n+        sentProperties.put(\"UUIDProperty\", UUID.fromString(\"38400000-8cf0-11bd-b23e-10b96e4ef00d\"));\n         sentProperties.put(\"StringProperty\", \"string\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70dfb94f7033bc80532fa7d0c07caa907a67060"}, "originalPosition": 608}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODEyNTY4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzo0Mjo1OFrOH4jw7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNDo1OTowN1rOH4sBPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODI2OA==", "bodyText": "Do we really need this to be a member variable? Isn't this only tested in a few test cases.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17739#discussion_r529068268", "createdAt": "2020-11-23T23:42:58Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -63,6 +62,7 @@\n \n     private ServiceBusReceiverAsyncClient receiver;\n     private ServiceBusSenderAsyncClient sender;\n+    private ServiceBusSessionReceiverAsyncClient sessionReceiver;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70783292094639b1fc82d9f274d277310ba5a6e9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwMzUxOA==", "bodyText": "It is used for all the session based test, we have atleaset 8-10 test using it.\nThe session test, use receiver and that receiver is created using this ServiceBusSessionReceiverAsyncClient and we have to close this intermediate builder.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17739#discussion_r529203518", "createdAt": "2020-11-24T04:59:07Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -63,6 +62,7 @@\n \n     private ServiceBusReceiverAsyncClient receiver;\n     private ServiceBusSenderAsyncClient sender;\n+    private ServiceBusSessionReceiverAsyncClient sessionReceiver;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODI2OA=="}, "originalCommit": {"oid": "70783292094639b1fc82d9f274d277310ba5a6e9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODEyNzQ0OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzo0Mzo0OFrOH4jyDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTowMDoyOFrOH4sC6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODU1OA==", "bodyText": "Why are we using concatMap rather than flatMap? I'm confused by this chain.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17739#discussion_r529068558", "createdAt": "2020-11-23T23:43:48Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -124,12 +126,13 @@ void createTransactionAndRollbackMessagesTest(MessagingEntityType entityType) {\n             })\n             .verifyComplete();\n \n-        final ServiceBusReceivedMessage receivedMessage = receiver.receiveMessages().next().block(OPERATION_TIMEOUT);\n-        assertNotNull(receivedMessage);\n+        StepVerifier.create(receiver.receiveMessages()\n+            .concatMap(receivedMessage -> receiver.complete(receivedMessage).thenReturn(receivedMessage)).next())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70783292094639b1fc82d9f274d277310ba5a6e9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwMzk0NA==", "bodyText": "Updated with, flatMap instead.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17739#discussion_r529203944", "createdAt": "2020-11-24T05:00:28Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -124,12 +126,13 @@ void createTransactionAndRollbackMessagesTest(MessagingEntityType entityType) {\n             })\n             .verifyComplete();\n \n-        final ServiceBusReceivedMessage receivedMessage = receiver.receiveMessages().next().block(OPERATION_TIMEOUT);\n-        assertNotNull(receivedMessage);\n+        StepVerifier.create(receiver.receiveMessages()\n+            .concatMap(receivedMessage -> receiver.complete(receivedMessage).thenReturn(receivedMessage)).next())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODU1OA=="}, "originalCommit": {"oid": "70783292094639b1fc82d9f274d277310ba5a6e9"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2804, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}