{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1ODY4Mjc1", "number": 13454, "title": "refactoring to move all encryption hooks outside of SDK", "bodyText": "This PR moves all the encryption hooks (encryption processor, etc) outside of the SDK.\n\nEncryptor is refactored out of EncryptionProcessor\nencryption serialization/deserialization moved out of CosmosContainer to EncryptionContainer", "createdAt": "2020-07-23T17:58:13Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454", "merged": true, "mergeCommit": {"oid": "97ca346a63e2a2c3024fc6569babaadd1c6bde6a"}, "closed": true, "closedAt": "2020-07-24T06:03:13Z", "author": {"login": "moderakh"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc16H_AgH2gAyNDU1ODY4Mjc1OjY5MWY4YjE2MmRkZTg0NDQwZGFmZDdkZDFjMjdlYjM5NzA5OWMzMDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc33d2bAH2gAyNDU1ODY4Mjc1OjZmN2Q1OTBkYzY3OWM4NjVlYjA4MWNjN2M4YjVhY2VhNTBiOTRmZWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "691f8b162dde84440dafd7dd1c27eb397099c308", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/691f8b162dde84440dafd7dd1c27eb397099c308", "committedDate": "2020-07-17T20:47:17Z", "message": "minor cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8eda32c50f77257ea46091b21a02819f253e9faf", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8eda32c50f77257ea46091b21a02819f253e9faf", "committedDate": "2020-07-17T22:12:12Z", "message": "minor cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff37289bdc52b165166b69d2ee91420294818f23", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ff37289bdc52b165166b69d2ee91420294818f23", "committedDate": "2020-07-17T23:02:00Z", "message": "encryptor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77cf2ec44b4f5aa2c9f572af53485db248b22b71", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/77cf2ec44b4f5aa2c9f572af53485db248b22b71", "committedDate": "2020-07-17T23:05:10Z", "message": "static field name correction, fixed pre-condition check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d41cfff387576767afdf515af4587d323eca03e", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5d41cfff387576767afdf515af4587d323eca03e", "committedDate": "2020-07-20T16:38:44Z", "message": "Merge branch 'master' into users/moderakh/encryption-minor-cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51f3cdd0fa68f3d7c072e82951be3014935601ba", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/51f3cdd0fa68f3d7c072e82951be3014935601ba", "committedDate": "2020-07-20T17:14:58Z", "message": "Merge branch 'users/moderakh/encryption-minor-cleanup' into users/moderakh/20200717-encryption"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfc13d2ff2513f21fd461c3a23691de556945c7a", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cfc13d2ff2513f21fd461c3a23691de556945c7a", "committedDate": "2020-07-23T17:42:40Z", "message": "move encryption hooks out of sdk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2caa15601ede91a5ad95708843eb96ecd48cb0eb", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2caa15601ede91a5ad95708843eb96ecd48cb0eb", "committedDate": "2020-07-23T17:54:28Z", "message": "Merge branch 'master' into users/moderakh/20200717-encryption"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MzczMTAy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#pullrequestreview-454373102", "createdAt": "2020-07-23T18:02:14Z", "commit": {"oid": "2caa15601ede91a5ad95708843eb96ecd48cb0eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowMjoxNFrOG2VrBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowMjoxNFrOG2VrBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMTM2NQ==", "bodyText": "making this private shortly.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459631365", "createdAt": "2020-07-23T18:02:14Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosItemResponse.java", "diffHunk": "@@ -22,19 +22,27 @@\n  */\n public class CosmosItemResponse<T> {\n     private final Class<T> itemClassType;\n-    private final byte[] responseBodyAsByteArray;\n     private final ItemDeserializer itemDeserializer;\n+    // TODO: make this non public (blocking for merge to master)\n+\n+    public byte[] responseBodyAsByteArray;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2caa15601ede91a5ad95708843eb96ecd48cb0eb"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MzczMzk3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#pullrequestreview-454373397", "createdAt": "2020-07-23T18:02:39Z", "commit": {"oid": "2caa15601ede91a5ad95708843eb96ecd48cb0eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowMjo0MFrOG2Vr4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowMjo0MFrOG2Vr4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMTU4Ng==", "bodyText": "will drop the public constructor change shortly", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459631586", "createdAt": "2020-07-23T18:02:40Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosItemResponse.java", "diffHunk": "@@ -22,19 +22,27 @@\n  */\n public class CosmosItemResponse<T> {\n     private final Class<T> itemClassType;\n-    private final byte[] responseBodyAsByteArray;\n     private final ItemDeserializer itemDeserializer;\n+    // TODO: make this non public (blocking for merge to master)\n+\n+    public byte[] responseBodyAsByteArray;\n     private T item;\n-    private final ResourceResponse<Document> resourceResponse;\n+    public final ResourceResponse<Document> resourceResponse;\n     private InternalObjectNode props;\n \n-    CosmosItemResponse(ResourceResponse<Document> response, Class<T> classType, ItemDeserializer itemDeserializer) {\n+\n+    public CosmosItemResponse(ResourceResponse<Document> response, Class<T> classType, ItemDeserializer itemDeserializer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2caa15601ede91a5ad95708843eb96ecd48cb0eb"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MzczNDk3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#pullrequestreview-454373497", "createdAt": "2020-07-23T18:02:47Z", "commit": {"oid": "2caa15601ede91a5ad95708843eb96ecd48cb0eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowMjo0N1rOG2VsMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowMjo0N1rOG2VsMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMTY2NA==", "bodyText": "will drop the public constructor change shortly", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459631664", "createdAt": "2020-07-23T18:02:47Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosItemResponse.java", "diffHunk": "@@ -22,19 +22,27 @@\n  */\n public class CosmosItemResponse<T> {\n     private final Class<T> itemClassType;\n-    private final byte[] responseBodyAsByteArray;\n     private final ItemDeserializer itemDeserializer;\n+    // TODO: make this non public (blocking for merge to master)\n+\n+    public byte[] responseBodyAsByteArray;\n     private T item;\n-    private final ResourceResponse<Document> resourceResponse;\n+    public final ResourceResponse<Document> resourceResponse;\n     private InternalObjectNode props;\n \n-    CosmosItemResponse(ResourceResponse<Document> response, Class<T> classType, ItemDeserializer itemDeserializer) {\n+\n+    public CosmosItemResponse(ResourceResponse<Document> response, Class<T> classType, ItemDeserializer itemDeserializer) {\n+        this(response, response.getBodyAsByteArray(), classType, itemDeserializer);\n+    }\n+\n+    public CosmosItemResponse(ResourceResponse<Document> response, byte[] responseBodyAsByteArray, Class<T> classType, ItemDeserializer itemDeserializer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2caa15601ede91a5ad95708843eb96ecd48cb0eb"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b4cd567147799e37418450ed00a2817ced1fdfe", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b4cd567147799e37418450ed00a2817ced1fdfe", "committedDate": "2020-07-23T18:19:14Z", "message": "encryption"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5e6f09d3634df5928ac322f9b6198cd73cbd7de", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e5e6f09d3634df5928ac322f9b6198cd73cbd7de", "committedDate": "2020-07-23T18:22:42Z", "message": "undid public api change to CosmosItemResponse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c17f86d6de14f46671de958b254b3b96d88272b", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5c17f86d6de14f46671de958b254b3b96d88272b", "committedDate": "2020-07-23T18:29:06Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b2e69796dbf9107018009f57ad33e76def18397", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6b2e69796dbf9107018009f57ad33e76def18397", "committedDate": "2020-07-23T18:39:03Z", "message": "cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MzkwMzU5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#pullrequestreview-454390359", "createdAt": "2020-07-23T18:26:51Z", "commit": {"oid": "e5e6f09d3634df5928ac322f9b6198cd73cbd7de"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyNjo1MlrOG2Wgyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo0ODozMVrOG2XQVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NTEzMQ==", "bodyText": "minor typo in classTypee -> classType", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459645131", "createdAt": "2020-07-23T18:26:52Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/CosmosResponseFactory.java", "diffHunk": "@@ -0,0 +1,16 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.models.CosmosItemResponse;\n+\n+/**\n+ * This response factory converts response messages\n+ * to the corresponding type response using the\n+ * CosmosClient serializer\n+ */\n+public interface CosmosResponseFactory {\n+\n+    <T> CosmosItemResponse<T> createItemResponse(CosmosItemResponse<byte[]> responseMessage, Class<T> classTypee);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5e6f09d3634df5928ac322f9b6198cd73cbd7de"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NTg0Ng==", "bodyText": "minor, option ->  requestOptions  to be more consistent with other APIs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459645846", "createdAt": "2020-07-23T18:28:12Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/EncryptionCosmosAsyncContainer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.ItemDeserializer;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.encryption.CosmosResponseFactoryCore;\n+import com.azure.cosmos.implementation.encryption.DecryptionResult;\n+import com.azure.cosmos.implementation.encryption.EncryptionItemRequestOptions;\n+import com.azure.cosmos.implementation.encryption.Encryptor;\n+import com.azure.cosmos.implementation.guava25.base.Preconditions;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.EncryptionBridgeInternal;\n+import com.azure.cosmos.models.PartitionKey;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+\n+import java.util.function.Consumer;\n+\n+// TODO: for now basic functionality is in. some APIs and some logic branch is not complete yet.\n+public class EncryptionCosmosAsyncContainer extends CosmosAsyncContainer {\n+    private final Encryptor encryptor;\n+    private final CosmosResponseFactory resposeFactory = new CosmosResponseFactoryCore();\n+\n+    EncryptionCosmosAsyncContainer(String id, CosmosAsyncDatabase database, Encryptor encryptor) {\n+        super(id, database);\n+        this.encryptor = encryptor;\n+    }\n+\n+    private Mono<CosmosItemResponse<byte[]>> createItemStream(byte[] payload,\n+                                                              PartitionKey partitionKey,\n+                                                              CosmosItemRequestOptions requestOptions) {\n+        Preconditions.checkNotNull(payload, \"payload can't be null\");\n+\n+        // TODO: add diagnostics\n+        EncryptionItemRequestOptions encryptionItemRequestOptions = Utils.as(requestOptions, EncryptionItemRequestOptions.class);\n+        if (encryptionItemRequestOptions != null && encryptionItemRequestOptions.getEncryptionOptions() != null) {\n+\n+            payload = EncryptionProcessor.encryptAsync(payload, encryptor, encryptionItemRequestOptions.getEncryptionOptions());\n+\n+            Mono<CosmosItemResponse<byte[]>> response = super.createItem(payload, partitionKey, requestOptions);\n+\n+            return response\n+                .subscribeOn(Schedulers.elastic())\n+                .publishOn(Schedulers.elastic())\n+                .map(rsp -> {\n+                    EncryptionBridgeInternal.setByteArrayContent(rsp, decryptResponseAsync(EncryptionBridgeInternal.getByteArrayContent(rsp), encryptionItemRequestOptions.getDecryptionResultHandler()));\n+                    return rsp;\n+                }\n+            );\n+\n+        } else {\n+            return null;\n+            // TODO\n+            // return super.createItem()\n+        }\n+    }\n+\n+    // TODO ensure all other apis call this guy\n+    public <T> Mono<CosmosItemResponse<T>> createItem(T item,\n+                                                      PartitionKey partitionKey,\n+                                                      CosmosItemRequestOptions option) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5e6f09d3634df5928ac322f9b6198cd73cbd7de"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NjMyOQ==", "bodyText": "Empty TODOs are dangerous :)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459646329", "createdAt": "2020-07-23T18:29:04Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/EncryptionCosmosAsyncContainer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.ItemDeserializer;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.encryption.CosmosResponseFactoryCore;\n+import com.azure.cosmos.implementation.encryption.DecryptionResult;\n+import com.azure.cosmos.implementation.encryption.EncryptionItemRequestOptions;\n+import com.azure.cosmos.implementation.encryption.Encryptor;\n+import com.azure.cosmos.implementation.guava25.base.Preconditions;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.EncryptionBridgeInternal;\n+import com.azure.cosmos.models.PartitionKey;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+\n+import java.util.function.Consumer;\n+\n+// TODO: for now basic functionality is in. some APIs and some logic branch is not complete yet.\n+public class EncryptionCosmosAsyncContainer extends CosmosAsyncContainer {\n+    private final Encryptor encryptor;\n+    private final CosmosResponseFactory resposeFactory = new CosmosResponseFactoryCore();\n+\n+    EncryptionCosmosAsyncContainer(String id, CosmosAsyncDatabase database, Encryptor encryptor) {\n+        super(id, database);\n+        this.encryptor = encryptor;\n+    }\n+\n+    private Mono<CosmosItemResponse<byte[]>> createItemStream(byte[] payload,\n+                                                              PartitionKey partitionKey,\n+                                                              CosmosItemRequestOptions requestOptions) {\n+        Preconditions.checkNotNull(payload, \"payload can't be null\");\n+\n+        // TODO: add diagnostics\n+        EncryptionItemRequestOptions encryptionItemRequestOptions = Utils.as(requestOptions, EncryptionItemRequestOptions.class);\n+        if (encryptionItemRequestOptions != null && encryptionItemRequestOptions.getEncryptionOptions() != null) {\n+\n+            payload = EncryptionProcessor.encryptAsync(payload, encryptor, encryptionItemRequestOptions.getEncryptionOptions());\n+\n+            Mono<CosmosItemResponse<byte[]>> response = super.createItem(payload, partitionKey, requestOptions);\n+\n+            return response\n+                .subscribeOn(Schedulers.elastic())\n+                .publishOn(Schedulers.elastic())\n+                .map(rsp -> {\n+                    EncryptionBridgeInternal.setByteArrayContent(rsp, decryptResponseAsync(EncryptionBridgeInternal.getByteArrayContent(rsp), encryptionItemRequestOptions.getDecryptionResultHandler()));\n+                    return rsp;\n+                }\n+            );\n+\n+        } else {\n+            return null;\n+            // TODO\n+            // return super.createItem()\n+        }\n+    }\n+\n+    // TODO ensure all other apis call this guy\n+    public <T> Mono<CosmosItemResponse<T>> createItem(T item,\n+                                                      PartitionKey partitionKey,\n+                                                      CosmosItemRequestOptions option) {\n+        Preconditions.checkNotNull(item, \"item\");\n+        if (option == null) {\n+            option = new CosmosItemRequestOptions();\n+        }\n+\n+        EncryptionItemRequestOptions encryptionItemRequestOptions = Utils.as(option, EncryptionItemRequestOptions.class);\n+\n+        if (encryptionItemRequestOptions != null && encryptionItemRequestOptions.getEncryptionOptions() != null) {\n+            Preconditions.checkArgument(partitionKey != null, \"partitionKey cannot be null for operations using EncryptionContainer.\");\n+\n+\n+            byte[] payload = cosmosSerializerToStream(item);\n+\n+            String payloadAsString = new String(payload);\n+\n+\n+            Mono<CosmosItemResponse<byte[]>> result = this.createItemStream(payload, partitionKey, option);\n+\n+\n+            return result.map(rsp -> (CosmosItemResponse<T>) this.resposeFactory.createItemResponse(rsp, item.getClass()));\n+\n+        } else {\n+            return super.createItem(item, partitionKey, option);\n+        }\n+    }\n+\n+    private Mono<CosmosItemResponse<byte[]>> readItemStream(String id,\n+                                                              PartitionKey partitionKey,\n+                                                              CosmosItemRequestOptions requestOptions) {\n+\n+\n+        Mono<CosmosItemResponse<byte[]>> responseMessageAsync = super.readItem(id, partitionKey, requestOptions, byte[].class);\n+\n+        return responseMessageAsync\n+            .publishOn(Schedulers.elastic())\n+            .subscribeOn(Schedulers.elastic())\n+            .map(\n+            responseMessage ->\n+\n+            {\n+                Consumer<DecryptionResult> decryptionErroHandler = null;\n+                EncryptionItemRequestOptions encryptionItemRequestOptions = Utils.as(requestOptions, EncryptionItemRequestOptions.class);\n+\n+                if (encryptionItemRequestOptions != null)\n+                {\n+                    decryptionErroHandler = encryptionItemRequestOptions.getDecryptionResultHandler();\n+                }\n+\n+                EncryptionBridgeInternal.setByteArrayContent(responseMessage, this.decryptResponseAsync(\n+                    EncryptionBridgeInternal.getByteArrayContent(responseMessage), decryptionErroHandler));\n+\n+                return responseMessage;\n+\n+            }\n+        );\n+\n+    }\n+\n+    @Override\n+    public <T> Mono<CosmosItemResponse<T>> readItem(String id,\n+                                                      PartitionKey partitionKey,\n+                                                      CosmosItemRequestOptions option,\n+                                                        Class<T> classType) {\n+        Mono<CosmosItemResponse<byte[]>> asyncResult = readItemStream(id, partitionKey, option);\n+\n+        return asyncResult.map(\n+            responseMessage -> {\n+\n+                return this.resposeFactory.createItemResponse(responseMessage, classType);\n+            }\n+        );\n+    }\n+\n+    private <T> byte[] cosmosSerializerToStream(T item) {\n+        // TODO:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5e6f09d3634df5928ac322f9b6198cd73cbd7de"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0Njg1MQ==", "bodyText": "By the way - this url doesn't work - https://aka.ms/CosmosClientEncryption", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459646851", "createdAt": "2020-07-23T18:29:56Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/implementation/encryption/CosmosEncryptor.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.encryption;\n+\n+import com.azure.cosmos.implementation.encryption.api.DataEncryptionKey;\n+import com.azure.cosmos.implementation.encryption.api.DataEncryptionKeyProvider;\n+import com.azure.cosmos.implementation.guava25.base.Preconditions;\n+\n+/**\n+ * Provides the default implementation for client-side encryption for Cosmos DB.\n+ * See https://aka.ms/CosmosClientEncryption for more information on client-side encryption support in Azure Cosmos DB.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5e6f09d3634df5928ac322f9b6198cd73cbd7de"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0ODAwOQ==", "bodyText": "Please put the warning on this class level as well - I am seeing so many customers using our BridgeInternals.. we need to be more explicit..  like what we have in azure-cosmos\n/**\n\nDO NOT USE.\nThis is meant to be used only internally as a bridge access to classes in implementation\n**/\n@warning(value = INTERNAL_USE_ONLY_WARNING)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459648009", "createdAt": "2020-07-23T18:31:55Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/models/EncryptionBridgeInternal.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.ItemDeserializer;\n+import com.azure.cosmos.implementation.ResourceResponse;\n+import com.azure.cosmos.implementation.Warning;\n+\n+import static com.azure.cosmos.implementation.Warning.INTERNAL_USE_ONLY_WARNING;\n+\n+/**\n+ * This is an internal class in the encryption project\n+ */\n+public class EncryptionBridgeInternal {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5e6f09d3634df5928ac322f9b6198cd73cbd7de"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NzMwMA==", "bodyText": "What is the use case of inheritance here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#discussion_r459657300", "createdAt": "2020-07-23T18:48:31Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/implementation/encryption/EncryptionItemRequestOptions.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+/**\n+ *\n+ * The {@link com.azure.cosmos.models.CosmosItemRequestOptions} that allows to specify options for encryption / decryption.\n+ */\n+package com.azure.cosmos.implementation.encryption;\n+\n+import com.azure.cosmos.implementation.encryption.api.EncryptionOptions;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+\n+import java.util.function.Consumer;\n+\n+// TODO: how invoking setter methods chaining works? parent setters returns CosmosItemRequestOptions\n+// this class setter require EncryptionItemRequestOptions\n+public class EncryptionItemRequestOptions extends CosmosItemRequestOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b2e69796dbf9107018009f57ad33e76def18397"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a6458d95e077faae9e7398237c9461ae57c925d", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/0a6458d95e077faae9e7398237c9461ae57c925d", "committedDate": "2020-07-23T19:02:59Z", "message": "code review comments addressed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDIxNDgy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13454#pullrequestreview-454421482", "createdAt": "2020-07-23T19:11:26Z", "commit": {"oid": "0a6458d95e077faae9e7398237c9461ae57c925d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e9d20761317a111cb17ca10ffe1bba4b7c64b1e", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9e9d20761317a111cb17ca10ffe1bba4b7c64b1e", "committedDate": "2020-07-23T19:16:12Z", "message": "fixed compilation error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f262d5c0dc7059d832be76326dc91cd1ca7484f7", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f262d5c0dc7059d832be76326dc91cd1ca7484f7", "committedDate": "2020-07-23T20:02:10Z", "message": "minor code style cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a12d345d635a31d2e46c2e890257513ce4c1001f", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a12d345d635a31d2e46c2e890257513ce4c1001f", "committedDate": "2020-07-23T22:06:01Z", "message": "check style fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b79a5a8e6dc53abaed90535d10292cd9b99d3ac", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b79a5a8e6dc53abaed90535d10292cd9b99d3ac", "committedDate": "2020-07-23T22:30:53Z", "message": "javadoc fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88e984e4e32d11b6560782be1d86bd130edf9245", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/88e984e4e32d11b6560782be1d86bd130edf9245", "committedDate": "2020-07-23T22:35:26Z", "message": "javadoc fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f7d590dc679c865eb081cc7c8b5acea50b94fec", "author": {"user": {"login": "moderakh", "name": "Mohammad Derakhshani"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6f7d590dc679c865eb081cc7c8b5acea50b94fec", "committedDate": "2020-07-23T22:49:18Z", "message": "check-style"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1100, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}