{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMjMyOTMw", "number": 16088, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjowMjoyNFrOEvhVhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMVQxMDowODo1OFrOGUhtyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjY0NzExOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjowMjoyNFrOHkjRWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODozNjo0M1rOHl9QNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4ODY2NQ==", "bodyText": "Do we need this default log level here for Http logging? I think it's okay to make all HTTP request/response logging informational by default. This will minimize the number of places where log levels are configured.\nIf there's a need to change teh default, then customers have the options of providing customer request/response logger using setRequestLogger() and setResponseLogger().", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r508088665", "createdAt": "2020-10-19T22:02:24Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "diffHunk": "@@ -202,12 +210,92 @@ public boolean isPrettyPrintBody() {\n     /**\n      * Sets flag to allow pretty printing of message bodies.\n      *\n-     * @param prettyPrintBody If true, pretty prints message bodies when logging. If the detailLevel does not\n-     *                        include body logging, this flag does nothing.\n+     * @param prettyPrintBody If true, pretty prints message bodies when logging. If the detailLevel does not include\n+     * body logging, this flag does nothing.\n      * @return The updated HttpLogOptions object.\n      */\n     public HttpLogOptions setPrettyPrintBody(boolean prettyPrintBody) {\n         this.prettyPrintBody = prettyPrintBody;\n         return this;\n     }\n+\n+    /**\n+     * Gets the {@link LogLevel} used by default when logging requests and responses.\n+     * <p>\n+     * {@link HttpRequestLogger#getLogLevel(LogLevel, HttpPipelineCallContext)} and {@link\n+     * HttpResponseLogger#getLogLevel(LogLevel, HttpResponse, Duration)} can be used to set the {@link LogLevel} for\n+     * each request and response being logged.\n+     * <p>\n+     * By default {@link LogLevel#INFORMATIONAL} is used.\n+     *\n+     * @return The {@link LogLevel} used by default when logging requests and responses.\n+     */\n+    public LogLevel getDefaultLogLevel() {\n+        return defaultLogLevel;\n+    }\n+\n+    /**\n+     * Sets the {@link LogLevel} used by default when logging requests and responses.\n+     * <p>\n+     * {@link HttpRequestLogger#getLogLevel(LogLevel, HttpPipelineCallContext)} and {@link\n+     * HttpResponseLogger#getLogLevel(LogLevel, HttpResponse, Duration)} can be used to set the {@link LogLevel} for\n+     * each request and response being logged.\n+     * <p>\n+     * By default {@link LogLevel#INFORMATIONAL} is used.\n+     *\n+     * @param defaultLogLevel The default log level.\n+     * @return The updated HttpLogOptions object.\n+     */\n+    public HttpLogOptions setDefaultLogLevel(LogLevel defaultLogLevel) {\n+        this.defaultLogLevel = defaultLogLevel;\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0633212d2ef3181abbe497f2ac7822688908b91d"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU2MjkzMg==", "bodyText": "This could be added in a non-breaking way in the future. Main purpose was convenience if someone wanted to have all logging done at the VERBOSE level so their log4j, etc, configurations included INFO and request/response logging was too verbose.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509562932", "createdAt": "2020-10-21T18:36:43Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "diffHunk": "@@ -202,12 +210,92 @@ public boolean isPrettyPrintBody() {\n     /**\n      * Sets flag to allow pretty printing of message bodies.\n      *\n-     * @param prettyPrintBody If true, pretty prints message bodies when logging. If the detailLevel does not\n-     *                        include body logging, this flag does nothing.\n+     * @param prettyPrintBody If true, pretty prints message bodies when logging. If the detailLevel does not include\n+     * body logging, this flag does nothing.\n      * @return The updated HttpLogOptions object.\n      */\n     public HttpLogOptions setPrettyPrintBody(boolean prettyPrintBody) {\n         this.prettyPrintBody = prettyPrintBody;\n         return this;\n     }\n+\n+    /**\n+     * Gets the {@link LogLevel} used by default when logging requests and responses.\n+     * <p>\n+     * {@link HttpRequestLogger#getLogLevel(LogLevel, HttpPipelineCallContext)} and {@link\n+     * HttpResponseLogger#getLogLevel(LogLevel, HttpResponse, Duration)} can be used to set the {@link LogLevel} for\n+     * each request and response being logged.\n+     * <p>\n+     * By default {@link LogLevel#INFORMATIONAL} is used.\n+     *\n+     * @return The {@link LogLevel} used by default when logging requests and responses.\n+     */\n+    public LogLevel getDefaultLogLevel() {\n+        return defaultLogLevel;\n+    }\n+\n+    /**\n+     * Sets the {@link LogLevel} used by default when logging requests and responses.\n+     * <p>\n+     * {@link HttpRequestLogger#getLogLevel(LogLevel, HttpPipelineCallContext)} and {@link\n+     * HttpResponseLogger#getLogLevel(LogLevel, HttpResponse, Duration)} can be used to set the {@link LogLevel} for\n+     * each request and response being logged.\n+     * <p>\n+     * By default {@link LogLevel#INFORMATIONAL} is used.\n+     *\n+     * @param defaultLogLevel The default log level.\n+     * @return The updated HttpLogOptions object.\n+     */\n+    public HttpLogOptions setDefaultLogLevel(LogLevel defaultLogLevel) {\n+        this.defaultLogLevel = defaultLogLevel;\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4ODY2NQ=="}, "originalCommit": {"oid": "0633212d2ef3181abbe497f2ac7822688908b91d"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTg0NTQ5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODoxMTo1OVrOHl71jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODozODowNFrOHl9U4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUzOTcyNg==", "bodyText": "Do we need this method? For anyone implementing this interface, they can simply use the logRequest method to log at whatever level they want. We can then make this a functional interface.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509539726", "createdAt": "2020-10-21T18:11:59Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Manages logging HTTP requests in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpRequestLogger {\n+    /**\n+     * Retrieves the {@link LogLevel} used to log the current request.\n+     *\n+     * @param defaultLogLevel The default log level to use.\n+     * @param callContext The contextual information about the request, including headers, body, and metadata.\n+     * @return The {@link LogLevel} used to log the current request.\n+     */\n+    LogLevel getLogLevel(LogLevel defaultLogLevel, HttpPipelineCallContext callContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53882456d596dc733945d804fa96a43d3feafba2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU2NDEyOQ==", "bodyText": "It is meant to cover scenarios where each request could have a different log level. This could be a default interface method that just returns LogLevel.INFORMATIONAL, allowing for it to effectively be a functional interface.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509564129", "createdAt": "2020-10-21T18:38:04Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Manages logging HTTP requests in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpRequestLogger {\n+    /**\n+     * Retrieves the {@link LogLevel} used to log the current request.\n+     *\n+     * @param defaultLogLevel The default log level to use.\n+     * @param callContext The contextual information about the request, including headers, body, and metadata.\n+     * @return The {@link LogLevel} used to log the current request.\n+     */\n+    LogLevel getLogLevel(LogLevel defaultLogLevel, HttpPipelineCallContext callContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUzOTcyNg=="}, "originalCommit": {"oid": "53882456d596dc733945d804fa96a43d3feafba2"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTg0ODM2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODoxMjozM1rOHl73eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODozODoxNFrOHl9VYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU0MDIxOA==", "bodyText": "Same as above. Can we just have the logResponse() method in this interface?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509540218", "createdAt": "2020-10-21T18:12:33Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Manages logging HTTP responses in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpResponseLogger {\n+    /**\n+     * Retrieves the {@link LogLevel} used to log the current response.\n+     *\n+     * @param defaultLogLevel The default log level to use.\n+     * @param response The HTTP response.\n+     * @param responseDuration The duration between sending the request and receiving the response.\n+     * @return The {@link LogLevel} used to log the current request.\n+     */\n+    LogLevel getLogLevel(LogLevel defaultLogLevel, HttpResponse response, Duration responseDuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53882456d596dc733945d804fa96a43d3feafba2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU2NDI1Nw==", "bodyText": "Same answer as above", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509564257", "createdAt": "2020-10-21T18:38:14Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Manages logging HTTP responses in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpResponseLogger {\n+    /**\n+     * Retrieves the {@link LogLevel} used to log the current response.\n+     *\n+     * @param defaultLogLevel The default log level to use.\n+     * @param response The HTTP response.\n+     * @param responseDuration The duration between sending the request and receiving the response.\n+     * @return The {@link LogLevel} used to log the current request.\n+     */\n+    LogLevel getLogLevel(LogLevel defaultLogLevel, HttpResponse response, Duration responseDuration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU0MDIxOA=="}, "originalCommit": {"oid": "53882456d596dc733945d804fa96a43d3feafba2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTg2NzE2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODoxNjoyM1rOHl8D7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODozODo1N1rOHl9YQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU0MzQwNA==", "bodyText": "Why do we need to pass the logLevel here? The HttpRequestLogger implementation should be able to determine what log level to use (from the callContext) instead of the caller passing in the level.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509543404", "createdAt": "2020-10-21T18:16:23Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Manages logging HTTP requests in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpRequestLogger {\n+    /**\n+     * Retrieves the {@link LogLevel} used to log the current request.\n+     *\n+     * @param defaultLogLevel The default log level to use.\n+     * @param callContext The contextual information about the request, including headers, body, and metadata.\n+     * @return The {@link LogLevel} used to log the current request.\n+     */\n+    LogLevel getLogLevel(LogLevel defaultLogLevel, HttpPipelineCallContext callContext);\n+\n+    /**\n+     * Logs the request.\n+     *\n+     * @param logger The {@link ClientLogger} used to log the request.\n+     * @param logLevel The {@link LogLevel} used to loge the request.\n+     * @param callContext The contextual information about the request, including headers, body, and metadata.\n+     * @return A reactive response that will indicate that the response has been logged.\n+     */\n+    Mono<Void> logRequest(ClientLogger logger, LogLevel logLevel, HttpPipelineCallContext callContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53882456d596dc733945d804fa96a43d3feafba2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU2NDk5NA==", "bodyText": "Good catch, will remove LogLevel as a required parameter.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509564994", "createdAt": "2020-10-21T18:38:57Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Manages logging HTTP requests in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpRequestLogger {\n+    /**\n+     * Retrieves the {@link LogLevel} used to log the current request.\n+     *\n+     * @param defaultLogLevel The default log level to use.\n+     * @param callContext The contextual information about the request, including headers, body, and metadata.\n+     * @return The {@link LogLevel} used to log the current request.\n+     */\n+    LogLevel getLogLevel(LogLevel defaultLogLevel, HttpPipelineCallContext callContext);\n+\n+    /**\n+     * Logs the request.\n+     *\n+     * @param logger The {@link ClientLogger} used to log the request.\n+     * @param logLevel The {@link LogLevel} used to loge the request.\n+     * @param callContext The contextual information about the request, including headers, body, and metadata.\n+     * @return A reactive response that will indicate that the response has been logged.\n+     */\n+    Mono<Void> logRequest(ClientLogger logger, LogLevel logLevel, HttpPipelineCallContext callContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU0MzQwNA=="}, "originalCommit": {"oid": "53882456d596dc733945d804fa96a43d3feafba2"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTkyNzc3OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODoyODoyOFrOHl8sKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODo1ODozM1rOHl-uNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1MzcwNA==", "bodyText": "The HttpPipelineCallContext doesn't include the HTTP response. If it did, which seems to have been the intention going by the javadoc on this class, we could have used the HttpPipelineCallContext for passing in the response duration as well.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509553704", "createdAt": "2020-10-21T18:28:28Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Manages logging HTTP responses in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpResponseLogger {\n+    /**\n+     * Retrieves the {@link LogLevel} used to log the current response.\n+     *\n+     * @param defaultLogLevel The default log level to use.\n+     * @param response The HTTP response.\n+     * @param responseDuration The duration between sending the request and receiving the response.\n+     * @return The {@link LogLevel} used to log the current request.\n+     */\n+    LogLevel getLogLevel(LogLevel defaultLogLevel, HttpResponse response, Duration responseDuration);\n+\n+    /**\n+     * Logs the request.\n+     *\n+     * @param logger The {@link ClientLogger} used to log the request.\n+     * @param logLevel The {@link LogLevel} used to loge the request.\n+     * @param response The HTTP response.\n+     * @param responseDuration The duration between sending the request and receiving the response.\n+     * @return A reactive response that will indicate that the response has been logged.\n+     */\n+    Mono<HttpResponse> logResponse(ClientLogger logger, LogLevel logLevel, HttpResponse response,\n+        Duration responseDuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53882456d596dc733945d804fa96a43d3feafba2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU4Njk5OA==", "bodyText": "Will fix the Javadocs for HttpPipelineCallContext as they are misleading.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509586998", "createdAt": "2020-10-21T18:58:33Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Manages logging HTTP responses in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpResponseLogger {\n+    /**\n+     * Retrieves the {@link LogLevel} used to log the current response.\n+     *\n+     * @param defaultLogLevel The default log level to use.\n+     * @param response The HTTP response.\n+     * @param responseDuration The duration between sending the request and receiving the response.\n+     * @return The {@link LogLevel} used to log the current request.\n+     */\n+    LogLevel getLogLevel(LogLevel defaultLogLevel, HttpResponse response, Duration responseDuration);\n+\n+    /**\n+     * Logs the request.\n+     *\n+     * @param logger The {@link ClientLogger} used to log the request.\n+     * @param logLevel The {@link LogLevel} used to loge the request.\n+     * @param response The HTTP response.\n+     * @param responseDuration The duration between sending the request and receiving the response.\n+     * @return A reactive response that will indicate that the response has been logged.\n+     */\n+    Mono<HttpResponse> logResponse(ClientLogger logger, LogLevel logLevel, HttpResponse response,\n+        Duration responseDuration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1MzcwNA=="}, "originalCommit": {"oid": "53882456d596dc733945d804fa96a43d3feafba2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjU2ODEwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDoyMzo0OVrOHmDcJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDozMTozMFrOHmDzgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2NDI5Mw==", "bodyText": "nit; sued -> used", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509664293", "createdAt": "2020-10-21T20:23:49Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "diffHunk": "@@ -202,12 +207,60 @@ public boolean isPrettyPrintBody() {\n     /**\n      * Sets flag to allow pretty printing of message bodies.\n      *\n-     * @param prettyPrintBody If true, pretty prints message bodies when logging. If the detailLevel does not\n-     *                        include body logging, this flag does nothing.\n+     * @param prettyPrintBody If true, pretty prints message bodies when logging. If the detailLevel does not include\n+     * body logging, this flag does nothing.\n      * @return The updated HttpLogOptions object.\n      */\n     public HttpLogOptions setPrettyPrintBody(boolean prettyPrintBody) {\n         this.prettyPrintBody = prettyPrintBody;\n         return this;\n     }\n+\n+    /**\n+     * Gets the {@link HttpRequestLogger} that will be used to log requests.\n+     * <p>\n+     * A default logger will be used if one isn't supplied.\n+     *\n+     * @return The {@link HttpRequestLogger} that will be used to log requests.\n+     */\n+    public HttpRequestLogger getRequestLogger() {\n+        return requestLogger;\n+    }\n+\n+    /**\n+     * Sets the {@link HttpRequestLogger} that will be used to log requests.\n+     * <p>\n+     * A default logger will be used if one isn't supplied.\n+     *\n+     * @param requestLogger The {@link HttpRequestLogger} that will be used to log requests.\n+     * @return The updated HttpLogOptions object.\n+     */\n+    public HttpLogOptions setRequestLogger(HttpRequestLogger requestLogger) {\n+        this.requestLogger = requestLogger;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the {@link HttpResponseLogger} that will be used to log responses.\n+     * <p>\n+     * A default logger will be used if one isn't supplied.\n+     *\n+     * @return The {@link HttpResponseLogger} that will be used to log responses.\n+     */\n+    public HttpResponseLogger getResponseLogger() {\n+        return responseLogger;\n+    }\n+\n+    /**\n+     * Sets the {@link HttpResponseLogger} that will be used to log responses.\n+     * <p>\n+     * A default logger will be sued if one isn't supplied.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec0060c150749bc46dd62311c00aea02bb4bd28a"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY3MDI3NA==", "bodyText": "Good catch, I'll take a good look through the new Javadocs.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509670274", "createdAt": "2020-10-21T20:31:30Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "diffHunk": "@@ -202,12 +207,60 @@ public boolean isPrettyPrintBody() {\n     /**\n      * Sets flag to allow pretty printing of message bodies.\n      *\n-     * @param prettyPrintBody If true, pretty prints message bodies when logging. If the detailLevel does not\n-     *                        include body logging, this flag does nothing.\n+     * @param prettyPrintBody If true, pretty prints message bodies when logging. If the detailLevel does not include\n+     * body logging, this flag does nothing.\n      * @return The updated HttpLogOptions object.\n      */\n     public HttpLogOptions setPrettyPrintBody(boolean prettyPrintBody) {\n         this.prettyPrintBody = prettyPrintBody;\n         return this;\n     }\n+\n+    /**\n+     * Gets the {@link HttpRequestLogger} that will be used to log requests.\n+     * <p>\n+     * A default logger will be used if one isn't supplied.\n+     *\n+     * @return The {@link HttpRequestLogger} that will be used to log requests.\n+     */\n+    public HttpRequestLogger getRequestLogger() {\n+        return requestLogger;\n+    }\n+\n+    /**\n+     * Sets the {@link HttpRequestLogger} that will be used to log requests.\n+     * <p>\n+     * A default logger will be used if one isn't supplied.\n+     *\n+     * @param requestLogger The {@link HttpRequestLogger} that will be used to log requests.\n+     * @return The updated HttpLogOptions object.\n+     */\n+    public HttpLogOptions setRequestLogger(HttpRequestLogger requestLogger) {\n+        this.requestLogger = requestLogger;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the {@link HttpResponseLogger} that will be used to log responses.\n+     * <p>\n+     * A default logger will be used if one isn't supplied.\n+     *\n+     * @return The {@link HttpResponseLogger} that will be used to log responses.\n+     */\n+    public HttpResponseLogger getResponseLogger() {\n+        return responseLogger;\n+    }\n+\n+    /**\n+     * Sets the {@link HttpResponseLogger} that will be used to log responses.\n+     * <p>\n+     * A default logger will be sued if one isn't supplied.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2NDI5Mw=="}, "originalCommit": {"oid": "ec0060c150749bc46dd62311c00aea02bb4bd28a"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjgzMjc5OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzozNTozNFrOHmss2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzozNTozNFrOHmss2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0MDMxNQ==", "bodyText": "Looks like this is unused and can be removed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r510340315", "createdAt": "2020-10-22T17:35:34Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "diffHunk": "@@ -22,6 +23,11 @@\n     private Set<String> allowedHeaderNames;\n     private Set<String> allowedQueryParamNames;\n     private boolean prettyPrintBody;\n+\n+    private LogLevel defaultLogLevel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a241bba9bb42efcbd31e84621af8c3e5397ee561"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjgzOTE2OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzozNzoxMVrOHmsw7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzozNzoxMVrOHmsw7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0MTM1OQ==", "bodyText": "Add @FunctionalInterface annotation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r510341359", "createdAt": "2020-10-22T17:37:11Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Manages logging HTTP requests in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpRequestLogger {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a241bba9bb42efcbd31e84621af8c3e5397ee561"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Njg0MjcwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzozODoxMlrOHmszNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzozODoxMlrOHmszNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0MTk0MQ==", "bodyText": "Add @FunctionalInterface annotation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r510341941", "createdAt": "2020-10-22T17:38:12Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Manages logging HTTP responses in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpResponseLogger {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a241bba9bb42efcbd31e84621af8c3e5397ee561"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Njg0NjcwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzozOToxM1rOHms1sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODoyOTo0OFrOHmupFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0MjU3Ng==", "bodyText": "Does this have to be async? If we don't need this to be async, then users who are not familiar with reactor can also use this to customize logging.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r510342576", "createdAt": "2020-10-22T17:39:13Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Manages logging HTTP requests in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpRequestLogger {\n+    /**\n+     * Gets the {@link LogLevel} used to log the HTTP request.\n+     * <p>\n+     * By default this will return {@link LogLevel#INFORMATIONAL}.\n+     *\n+     * @param callContext The information used to send the HTTP request.\n+     * @return The {@link LogLevel} used to log the HTTP request.\n+     */\n+    default LogLevel getLogLevel(HttpPipelineCallContext callContext) {\n+        return LogLevel.INFORMATIONAL;\n+    }\n+\n+    /**\n+     * Logs the HTTP request.\n+     * <p>\n+     * To get the {@link LogLevel} used to log the HTTP request use {@link #getLogLevel(HttpPipelineCallContext)}.\n+     *\n+     * @param logger The {@link ClientLogger} used to log the HTTP request.\n+     * @param callContext The information used to send the HTTP request.\n+     * @return A reactive response that indicates that the HTTP request has been logged.\n+     */\n+    Mono<Void> logRequest(ClientLogger logger, HttpPipelineCallContext callContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a241bba9bb42efcbd31e84621af8c3e5397ee561"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3MjExOA==", "bodyText": "The response type should be kept async. If the body needs to be read for logging it is only accessible as Flux<ByteBuffer> and we need to keep away from blocking in pipeline policies as it may throw an exception if the reactive thread doesn't allow blocking.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r510372118", "createdAt": "2020-10-22T18:29:48Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Manages logging HTTP requests in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpRequestLogger {\n+    /**\n+     * Gets the {@link LogLevel} used to log the HTTP request.\n+     * <p>\n+     * By default this will return {@link LogLevel#INFORMATIONAL}.\n+     *\n+     * @param callContext The information used to send the HTTP request.\n+     * @return The {@link LogLevel} used to log the HTTP request.\n+     */\n+    default LogLevel getLogLevel(HttpPipelineCallContext callContext) {\n+        return LogLevel.INFORMATIONAL;\n+    }\n+\n+    /**\n+     * Logs the HTTP request.\n+     * <p>\n+     * To get the {@link LogLevel} used to log the HTTP request use {@link #getLogLevel(HttpPipelineCallContext)}.\n+     *\n+     * @param logger The {@link ClientLogger} used to log the HTTP request.\n+     * @param callContext The information used to send the HTTP request.\n+     * @return A reactive response that indicates that the HTTP request has been logged.\n+     */\n+    Mono<Void> logRequest(ClientLogger logger, HttpPipelineCallContext callContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0MjU3Ng=="}, "originalCommit": {"oid": "a241bba9bb42efcbd31e84621af8c3e5397ee561"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Njg3MzEyOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzo0NjowN1rOHmtFzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODoxMjo1MFrOHmuDCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0NjcwMw==", "bodyText": "Wondering if responseDuration is the only criteria for deciding the log level. For e.g. the level maybe decided on the number of retry attempts too. Can we pass this in a context so we can add other data, if necessary? Same for logResponse method too.\ndefault LogLevel getLogLevel(HttpResponse response, Context context)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r510346703", "createdAt": "2020-10-22T17:46:07Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Manages logging HTTP responses in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpResponseLogger {\n+    /**\n+     * Gets the {@link LogLevel} used to log the HTTP response.\n+     * <p>\n+     * By default this will return {@link LogLevel#INFORMATIONAL}.\n+     *\n+     * @param response The HTTP response.\n+     * @param responseDuration The duration between sending the request and receiving the response.\n+     * @return The {@link LogLevel} used to log the HTTP response.\n+     */\n+    default LogLevel getLogLevel(HttpResponse response, Duration responseDuration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a241bba9bb42efcbd31e84621af8c3e5397ee561"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM2MjM3OQ==", "bodyText": "Would we want to create a property bag class to pass options into both interfaces, so if we want to expand the information available in the future we don't need to add new APIs? Or do we believe what is being passed now will stay consistent?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r510362379", "createdAt": "2020-10-22T18:12:50Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Manages logging HTTP responses in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpResponseLogger {\n+    /**\n+     * Gets the {@link LogLevel} used to log the HTTP response.\n+     * <p>\n+     * By default this will return {@link LogLevel#INFORMATIONAL}.\n+     *\n+     * @param response The HTTP response.\n+     * @param responseDuration The duration between sending the request and receiving the response.\n+     * @return The {@link LogLevel} used to log the HTTP response.\n+     */\n+    default LogLevel getLogLevel(HttpResponse response, Duration responseDuration) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0NjcwMw=="}, "originalCommit": {"oid": "a241bba9bb42efcbd31e84621af8c3e5397ee561"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI0MTc3MDEwOnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLoggingOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMVQxMDowODoyMlrOJ8iTRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMVQxMDowODoyMlrOJ8iTRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzQ1NjMyNA==", "bodyText": "We have been using *Options suffix for types that allow customizing requests (with setter methods). Since this is providing additional context for logging requests (read-only), it might be better to name this as HttpRequestLoggingContext.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r667456324", "createdAt": "2021-07-11T10:08:22Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLoggingOptions.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.util.Context;\n+\n+/**\n+ * Options class containing information available during HTTP request logging.\n+ */\n+public final class HttpRequestLoggingOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95813cc1f36085a1f1528bcd92ea14ee27422477"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI0MTc3MDk4OnYy", "diffSide": "RIGHT", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLoggingOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMVQxMDowODo1OVrOJ8iTrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMVQxMDowODo1OVrOJ8iTrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzQ1NjQyOQ==", "bodyText": "Same here - name this as HttpResponseLoggingContext.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r667456429", "createdAt": "2021-07-11T10:08:59Z", "author": {"login": "srnagar"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLoggingOptions.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.Context;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Options class containing information available during HTTP response logging.\n+ */\n+public final class HttpResponseLoggingOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95813cc1f36085a1f1528bcd92ea14ee27422477"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3561, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}