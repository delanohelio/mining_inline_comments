{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMjcyNjcx", "number": 13687, "title": "[TA] Adding support for PII endpoint", "bodyText": "Implementation and javadoc\nTests and recorded JSON files\nSamples, sample README\nCodesnippet, CHANGELOG, README\nfixes: #13417", "createdAt": "2020-07-31T15:57:19Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687", "merged": true, "mergeCommit": {"oid": "0a58771a2aec27a803ff999f29ed8f8f45cc21b3"}, "closed": true, "closedAt": "2020-08-20T23:17:39Z", "author": {"login": "mssfang"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6JXucgH2gAyNDYwMjcyNjcxOjE2NjZmMzk4NmNkYTlkZDM3NWM2MDQyYTI3NDAwY2Y5MDM2ZmJmMmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdA1Ci3gH2gAyNDYwMjcyNjcxOjliMzBlZGU0MGY4NDkxNjE3ZTEwMGE4N2JiNTNjNTQ3ZTU1OTNlODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1666f3986cda9dd375c6042a27400cf9036fbf2a", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1666f3986cda9dd375c6042a27400cf9036fbf2a", "committedDate": "2020-07-31T00:48:45Z", "message": "added pii endpoint support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64a8e75070fb30c99cd5f654ddf38e5e8332f789", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/64a8e75070fb30c99cd5f654ddf38e5e8332f789", "committedDate": "2020-07-31T15:51:27Z", "message": "resolved conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e82b0437b0aa9b1572b40a7c9b57c23ec68aca49", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e82b0437b0aa9b1572b40a7c9b57c23ec68aca49", "committedDate": "2020-07-31T22:00:38Z", "message": "added draft review fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1", "committedDate": "2020-07-31T22:01:54Z", "message": "checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMjI3OTM1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-460227935", "createdAt": "2020-08-03T17:53:40Z", "commit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzo1Mzo0MFrOG7DMag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo1NjoyMVrOG7FFAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MTQ5OA==", "bodyText": "qq: is java only supporting v3.1-preview.1? is v3.0 still supported. My understanding is that both need to be supported.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464571498", "createdAt": "2020-08-03T17:53:40Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/CHANGELOG.md", "diffHunk": "@@ -1,5 +1,7 @@\n # Release History\n ## 5.1.0-beta.1 (Unreleased)\n+**New features**\n+- Added the support for Personally Identifiable Information(PII) entity recognition feature.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MjI3NA==", "bodyText": "If both are supported, you should include this is only availbale for v3.1-preview.1 and up.\nadding a nit here too: you should add the name of the endpoint, which is recognizePiiEntities", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464572274", "createdAt": "2020-08-03T17:55:10Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/CHANGELOG.md", "diffHunk": "@@ -1,5 +1,7 @@\n # Release History\n ## 5.1.0-beta.1 (Unreleased)\n+**New features**\n+- Added the support for Personally Identifiable Information(PII) entity recognition feature.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MTQ5OA=="}, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MjM5Mw==", "bodyText": "the \"that\" shouldn't have been removed", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464572393", "createdAt": "2020-08-03T17:55:26Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -1,11 +1,12 @@\n # Azure Text Analytics client library for Java\n-Text Analytics is a cloud-based service that provides advanced natural language processing over raw text, \n+Text Analytics is a cloud-based service provides advanced natural language processing over raw text, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MzA4Mw==", "bodyText": "this link isn't resolving. try changing #recognize-pii-entities to #recognize-personally-identifiable-information-entities.\nOr you can just change the name to Recognize PII Entities", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464573083", "createdAt": "2020-08-03T17:56:49Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -186,6 +187,7 @@ The following sections provide several code snippets covering some of the most c\n * [Detect Language](#detect-language \"Detect language\")\n * [Extract Key Phrases](#extract-key-phrases \"Extract key phrases\")\n * [Recognize Entities](#recognize-entities \"Recognize entities\")\n+* [Recognize Personally Identifiable Information Entities](#recognize-pii-entities \"Recognize personally identifiable information entities\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MzQwMQ==", "bodyText": "these categories and the link here is incorrect, should be PII specific", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464573401", "createdAt": "2020-08-03T17:57:27Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -262,6 +264,21 @@ textAnalyticsClient.recognizeEntities(document).forEach(entity ->\n For samples on using the production recommended option `RecognizeEntitiesBatch` see [here][recognize_entities_sample].\n Please refer to the service documentation for a conceptual discussion of [named entity recognition][named_entity_recognition].\n \n+### Recognize personally identifiable information entities\n+Run a predictive model to identify a collection of personally identifiable information entities in the passed-in \n+document or batch of documents and categorize those entities into categories such as person, location, or \n+organization.  For more information on available categories, see [Text Analytics Named Entity Categories][named_entities_categories].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3NTc1Ng==", "bodyText": "nit: since this code is used to get warnings, and there's code to getStatistics earlier on, would it be good to move those into a separate util function? i think this is slightly outside the scope of this PR, but was just wondering if this is something that would help clean up the flow", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464575756", "createdAt": "2020-08-03T18:02:03Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizePiiEntityAsyncClient.java", "diffHunk": "@@ -0,0 +1,215 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl;\n+import com.azure.ai.textanalytics.implementation.models.EntitiesResult;\n+import com.azure.ai.textanalytics.implementation.models.MultiLanguageBatchInput;\n+import com.azure.ai.textanalytics.implementation.models.WarningCodeValue;\n+import com.azure.ai.textanalytics.models.EntityCategory;\n+import com.azure.ai.textanalytics.models.PiiEntity;\n+import com.azure.ai.textanalytics.models.PiiEntityCollection;\n+import com.azure.ai.textanalytics.models.RecognizePiiEntitiesResult;\n+import com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions;\n+import com.azure.ai.textanalytics.models.TextAnalyticsWarning;\n+import com.azure.ai.textanalytics.models.TextDocumentInput;\n+import com.azure.ai.textanalytics.models.WarningCode;\n+import com.azure.ai.textanalytics.util.RecognizePiiEntitiesResultCollection;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static com.azure.ai.textanalytics.TextAnalyticsAsyncClient.COGNITIVE_TRACING_NAMESPACE_VALUE;\n+import static com.azure.ai.textanalytics.implementation.Utility.getEmptyErrorIdHttpResponse;\n+import static com.azure.ai.textanalytics.implementation.Utility.inputDocumentsValidation;\n+import static com.azure.ai.textanalytics.implementation.Utility.mapToHttpResponseExceptionIfExist;\n+import static com.azure.ai.textanalytics.implementation.Utility.toBatchStatistics;\n+import static com.azure.ai.textanalytics.implementation.Utility.toMultiLanguageInput;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextAnalyticsError;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextAnalyticsException;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextDocumentStatistics;\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * Helper class for managing recognize personally identifiable information entity endpoint.\n+ */\n+class RecognizePiiEntityAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(RecognizePiiEntityAsyncClient.class);\n+    private final TextAnalyticsClientImpl service;\n+\n+    /**\n+     * Create a {@link RecognizePiiEntityAsyncClient} that sends requests to the Text Analytics services's\n+     * recognize personally identifiable information entity endpoint.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     */\n+    RecognizePiiEntityAsyncClient(TextAnalyticsClientImpl service) {\n+        this.service = service;\n+    }\n+\n+    /**\n+     * Helper function for calling service with max overloaded parameters that returns a {@link Mono}\n+     * which contains {@link PiiEntityCollection}.\n+     *\n+     * @param document A single document.\n+     * @param language The language code.\n+     *\n+     * @return The {@link Mono} of {@link PiiEntityCollection}.\n+     */\n+    Mono<PiiEntityCollection> recognizePiiEntities(String document, String language) {\n+        try {\n+            Objects.requireNonNull(document, \"'document' cannot be null.\");\n+            final TextDocumentInput textDocumentInput = new TextDocumentInput(\"0\", document).setLanguage(language);\n+            return recognizePiiEntitiesBatch(Collections.singletonList(textDocumentInput), null)\n+                .map(resultCollectionResponse -> {\n+                    PiiEntityCollection entityCollection = null;\n+                    // for each loop will have only one entry inside\n+                    for (RecognizePiiEntitiesResult entitiesResult : resultCollectionResponse.getValue()) {\n+                        if (entitiesResult.isError()) {\n+                            throw logger.logExceptionAsError(toTextAnalyticsException(entitiesResult.getError()));\n+                        }\n+                        entityCollection = new PiiEntityCollection(entitiesResult.getEntities(),\n+                            entitiesResult.getEntities().getWarnings());\n+                    }\n+                    return entityCollection;\n+                });\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Helper function for calling service with max overloaded parameters.\n+     *\n+     * @param documents The list of documents to recognize personally identifiable information entities for.\n+     * @param options The {@link TextAnalyticsRequestOptions} request options.\n+     *\n+     * @return A mono {@link Response} that contains {@link RecognizePiiEntitiesResultCollection}.\n+     */\n+    Mono<Response<RecognizePiiEntitiesResultCollection>> recognizePiiEntitiesBatch(\n+        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options) {\n+        try {\n+            inputDocumentsValidation(documents);\n+            return withContext(context -> getRecognizePiiEntitiesResponse(documents, options, context));\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Helper function for calling service with max overloaded parameters with {@link Context} is given.\n+     *\n+     * @param documents The list of documents to recognize personally identifiable information entities for.\n+     * @param options The {@link TextAnalyticsRequestOptions} request options.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     *\n+     * @return A mono {@link Response} that contains {@link RecognizePiiEntitiesResultCollection}.\n+     */\n+    Mono<Response<RecognizePiiEntitiesResultCollection>> recognizePiiEntitiesBatchWithContext(\n+        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context) {\n+        try {\n+            inputDocumentsValidation(documents);\n+            return getRecognizePiiEntitiesResponse(documents, options, context);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Helper method to convert the service response of {@link EntitiesResult} to {@link Response} which contains\n+     * {@link RecognizePiiEntitiesResultCollection}.\n+     *\n+     * @param response the {@link Response} of {@link EntitiesResult} returned by the service.\n+     *\n+     * @return A {@link Response} that contains {@link RecognizePiiEntitiesResultCollection}.\n+     */\n+    private Response<RecognizePiiEntitiesResultCollection> toRecognizePiiEntitiesResultCollectionResponse(\n+        final Response<EntitiesResult> response) {\n+        final EntitiesResult entitiesResult = response.getValue();\n+        // List of documents results\n+        final List<RecognizePiiEntitiesResult> recognizeEntitiesResults = new ArrayList<>();\n+        entitiesResult.getDocuments().forEach(documentEntities ->\n+            recognizeEntitiesResults.add(new RecognizePiiEntitiesResult(\n+                documentEntities.getId(),\n+                documentEntities.getStatistics() == null ? null\n+                    : toTextDocumentStatistics(documentEntities.getStatistics()),\n+                null,\n+                new PiiEntityCollection(\n+                    new IterableStream<>(documentEntities.getEntities().stream().map(entity ->\n+                        new PiiEntity(entity.getText(), EntityCategory.fromString(entity.getCategory()),\n+                            entity.getSubcategory(), entity.getOffset(), entity.getLength(),\n+                            entity.getConfidenceScore()))\n+                        .collect(Collectors.toList())),\n+                    new IterableStream<>(documentEntities.getWarnings().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MzAyNw==", "bodyText": "should link to https://aka.ms/tanerpii instead", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464593027", "createdAt": "2020-08-03T18:36:57Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -364,6 +369,132 @@ public String getDefaultLanguage() {\n         return recognizeEntityAsyncClient.recognizeEntitiesBatch(documents, options);\n     }\n \n+    // PII Entity\n+\n+    /**\n+     * Returns a list of general personally identifiable information entities in the provided document.\n+     *\n+     * For a list of supported entity types, check: <a href=\"https://aka.ms/taner\">this</a>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MzE3Mg==", "bodyText": "nit: recognized PII entity details", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464593172", "createdAt": "2020-08-03T18:37:17Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -364,6 +369,132 @@ public String getDefaultLanguage() {\n         return recognizeEntityAsyncClient.recognizeEntitiesBatch(documents, options);\n     }\n \n+    // PII Entity\n+\n+    /**\n+     * Returns a list of general personally identifiable information entities in the provided document.\n+     *\n+     * For a list of supported entity types, check: <a href=\"https://aka.ms/taner\">this</a>.\n+     * For a list of enabled languages, check: <a href=\"https://aka.ms/talangs\">this</a>.\n+     * This method will use the default language that sets up in\n+     * {@link TextAnalyticsClientBuilder#defaultLanguage(String)}. If none is specified, service will use 'en' as\n+     * the language.\n+     *\n+     * <p><strong>Code sample</strong></p>\n+     * <p>Recognize personally identifiable information entities in a document. Subscribes to the call asynchronously\n+     * and prints out the recognized entity details when a response is received.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwMjM2OQ==", "bodyText": "i don't think this is something we're exposing yet, but i just asked the question in the scrum chat to see if i can get some clairification", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464602369", "createdAt": "2020-08-03T18:56:21Z", "author": {"login": "iscai-msft"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsRequestOptions.java", "diffHunk": "@@ -54,4 +55,24 @@ public TextAnalyticsRequestOptions setIncludeStatistics(boolean includeStatistic\n         this.includeStatistics = includeStatistics;\n         return this;\n     }\n+\n+    /**\n+     * Get the value of {@code domain}.\n+     *\n+     * @return the value of domain.\n+     */\n+    public String getDomain() {\n+        return domain;\n+    }\n+\n+    /**\n+     * Set the value of {@code domain}.\n+     *\n+     * @param domain (Optional) if set to 'PHI', response will contain only PHI entities.\n+     * @return the {@link TextAnalyticsRequestOptions} object itself.\n+     */\n+    public TextAnalyticsRequestOptions setDomain(String domain) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDQ4MzA1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-460448305", "createdAt": "2020-08-04T02:07:17Z", "commit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjowNzoxN1rOG7Ofvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjowNzoxN1rOG7Ofvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1NjY3MQ==", "bodyText": "you should link to specific PII documentation", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464756671", "createdAt": "2020-08-04T02:07:17Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -262,6 +264,21 @@ textAnalyticsClient.recognizeEntities(document).forEach(entity ->\n For samples on using the production recommended option `RecognizeEntitiesBatch` see [here][recognize_entities_sample].\n Please refer to the service documentation for a conceptual discussion of [named entity recognition][named_entity_recognition].\n \n+### Recognize personally identifiable information entities\n+Run a predictive model to identify a collection of personally identifiable information entities in the passed-in \n+document or batch of documents and categorize those entities into categories such as person, location, or \n+organization.  For more information on available categories, see [Text Analytics Named Entity Categories][named_entities_categories].\n+\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L158-L161 -->\n+```java\n+String document = \"My SSN is 555-55-5555\";\n+textAnalyticsClient.recognizePiiEntities(document).forEach(piiEntity ->\n+    System.out.printf(\"Recognized Personally Identifiable Information entity: %s, category: %s, subCategory: %s, score: %f.%n\",\n+        piiEntity.getText(), piiEntity.getCategory(), piiEntity.getSubcategory(), piiEntity.getConfidenceScore()));\n+```\n+For samples on using the production recommended option `RecognizePiiEntitiesBatch` see [here][recognize_pii_entities_sample].\n+Please refer to the service documentation for a conceptual discussion of [PII entity recognition][named_entity_recognition].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDUyMTU5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-460452159", "createdAt": "2020-08-04T02:20:24Z", "commit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjoyMDoyNFrOG7OtBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjoyMDoyNFrOG7OtBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2MDA3MQ==", "bodyText": "we can remove this now :) Azure/azure-sdk-for-net#11946", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464760071", "createdAt": "2020-08-04T02:20:24Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizePiiEntityAsyncClient.java", "diffHunk": "@@ -0,0 +1,215 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl;\n+import com.azure.ai.textanalytics.implementation.models.EntitiesResult;\n+import com.azure.ai.textanalytics.implementation.models.MultiLanguageBatchInput;\n+import com.azure.ai.textanalytics.implementation.models.WarningCodeValue;\n+import com.azure.ai.textanalytics.models.EntityCategory;\n+import com.azure.ai.textanalytics.models.PiiEntity;\n+import com.azure.ai.textanalytics.models.PiiEntityCollection;\n+import com.azure.ai.textanalytics.models.RecognizePiiEntitiesResult;\n+import com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions;\n+import com.azure.ai.textanalytics.models.TextAnalyticsWarning;\n+import com.azure.ai.textanalytics.models.TextDocumentInput;\n+import com.azure.ai.textanalytics.models.WarningCode;\n+import com.azure.ai.textanalytics.util.RecognizePiiEntitiesResultCollection;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static com.azure.ai.textanalytics.TextAnalyticsAsyncClient.COGNITIVE_TRACING_NAMESPACE_VALUE;\n+import static com.azure.ai.textanalytics.implementation.Utility.getEmptyErrorIdHttpResponse;\n+import static com.azure.ai.textanalytics.implementation.Utility.inputDocumentsValidation;\n+import static com.azure.ai.textanalytics.implementation.Utility.mapToHttpResponseExceptionIfExist;\n+import static com.azure.ai.textanalytics.implementation.Utility.toBatchStatistics;\n+import static com.azure.ai.textanalytics.implementation.Utility.toMultiLanguageInput;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextAnalyticsError;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextAnalyticsException;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextDocumentStatistics;\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * Helper class for managing recognize personally identifiable information entity endpoint.\n+ */\n+class RecognizePiiEntityAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(RecognizePiiEntityAsyncClient.class);\n+    private final TextAnalyticsClientImpl service;\n+\n+    /**\n+     * Create a {@link RecognizePiiEntityAsyncClient} that sends requests to the Text Analytics services's\n+     * recognize personally identifiable information entity endpoint.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     */\n+    RecognizePiiEntityAsyncClient(TextAnalyticsClientImpl service) {\n+        this.service = service;\n+    }\n+\n+    /**\n+     * Helper function for calling service with max overloaded parameters that returns a {@link Mono}\n+     * which contains {@link PiiEntityCollection}.\n+     *\n+     * @param document A single document.\n+     * @param language The language code.\n+     *\n+     * @return The {@link Mono} of {@link PiiEntityCollection}.\n+     */\n+    Mono<PiiEntityCollection> recognizePiiEntities(String document, String language) {\n+        try {\n+            Objects.requireNonNull(document, \"'document' cannot be null.\");\n+            final TextDocumentInput textDocumentInput = new TextDocumentInput(\"0\", document).setLanguage(language);\n+            return recognizePiiEntitiesBatch(Collections.singletonList(textDocumentInput), null)\n+                .map(resultCollectionResponse -> {\n+                    PiiEntityCollection entityCollection = null;\n+                    // for each loop will have only one entry inside\n+                    for (RecognizePiiEntitiesResult entitiesResult : resultCollectionResponse.getValue()) {\n+                        if (entitiesResult.isError()) {\n+                            throw logger.logExceptionAsError(toTextAnalyticsException(entitiesResult.getError()));\n+                        }\n+                        entityCollection = new PiiEntityCollection(entitiesResult.getEntities(),\n+                            entitiesResult.getEntities().getWarnings());\n+                    }\n+                    return entityCollection;\n+                });\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Helper function for calling service with max overloaded parameters.\n+     *\n+     * @param documents The list of documents to recognize personally identifiable information entities for.\n+     * @param options The {@link TextAnalyticsRequestOptions} request options.\n+     *\n+     * @return A mono {@link Response} that contains {@link RecognizePiiEntitiesResultCollection}.\n+     */\n+    Mono<Response<RecognizePiiEntitiesResultCollection>> recognizePiiEntitiesBatch(\n+        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options) {\n+        try {\n+            inputDocumentsValidation(documents);\n+            return withContext(context -> getRecognizePiiEntitiesResponse(documents, options, context));\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Helper function for calling service with max overloaded parameters with {@link Context} is given.\n+     *\n+     * @param documents The list of documents to recognize personally identifiable information entities for.\n+     * @param options The {@link TextAnalyticsRequestOptions} request options.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     *\n+     * @return A mono {@link Response} that contains {@link RecognizePiiEntitiesResultCollection}.\n+     */\n+    Mono<Response<RecognizePiiEntitiesResultCollection>> recognizePiiEntitiesBatchWithContext(\n+        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context) {\n+        try {\n+            inputDocumentsValidation(documents);\n+            return getRecognizePiiEntitiesResponse(documents, options, context);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Helper method to convert the service response of {@link EntitiesResult} to {@link Response} which contains\n+     * {@link RecognizePiiEntitiesResultCollection}.\n+     *\n+     * @param response the {@link Response} of {@link EntitiesResult} returned by the service.\n+     *\n+     * @return A {@link Response} that contains {@link RecognizePiiEntitiesResultCollection}.\n+     */\n+    private Response<RecognizePiiEntitiesResultCollection> toRecognizePiiEntitiesResultCollectionResponse(\n+        final Response<EntitiesResult> response) {\n+        final EntitiesResult entitiesResult = response.getValue();\n+        // List of documents results\n+        final List<RecognizePiiEntitiesResult> recognizeEntitiesResults = new ArrayList<>();\n+        entitiesResult.getDocuments().forEach(documentEntities ->\n+            recognizeEntitiesResults.add(new RecognizePiiEntitiesResult(\n+                documentEntities.getId(),\n+                documentEntities.getStatistics() == null ? null\n+                    : toTextDocumentStatistics(documentEntities.getStatistics()),\n+                null,\n+                new PiiEntityCollection(\n+                    new IterableStream<>(documentEntities.getEntities().stream().map(entity ->\n+                        new PiiEntity(entity.getText(), EntityCategory.fromString(entity.getCategory()),\n+                            entity.getSubcategory(), entity.getOffset(), entity.getLength(),\n+                            entity.getConfidenceScore()))\n+                        .collect(Collectors.toList())),\n+                    new IterableStream<>(documentEntities.getWarnings().stream()\n+                        .map(warning -> {\n+                            final WarningCodeValue warningCodeValue = warning.getCode();\n+                            return new TextAnalyticsWarning(\n+                                WarningCode.fromString(warningCodeValue == null ? null : warningCodeValue.toString()),\n+                                warning.getMessage());\n+                        }).collect(Collectors.toList())))\n+            )));\n+        // Document errors\n+        entitiesResult.getErrors().forEach(documentError -> {\n+            /*\n+             *  TODO: Remove this after service update to throw exception.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 167}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDUyNjM0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-460452634", "createdAt": "2020-08-04T02:22:17Z", "commit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjoyMjoxN1rOG7Ou3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjoyMjoxN1rOG7Ou3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2MDU0Mg==", "bodyText": "not sure the word \"general\" provides value here... consider removing", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464760542", "createdAt": "2020-08-04T02:22:17Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -364,6 +369,132 @@ public String getDefaultLanguage() {\n         return recognizeEntityAsyncClient.recognizeEntitiesBatch(documents, options);\n     }\n \n+    // PII Entity\n+\n+    /**\n+     * Returns a list of general personally identifiable information entities in the provided document.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDUzNDQ4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-460453448", "createdAt": "2020-08-04T02:25:20Z", "commit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjoyNToyMFrOG7OxwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjoyNToyMFrOG7OxwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2MTI4MA==", "bodyText": "same here and other places", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464761280", "createdAt": "2020-08-04T02:25:20Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -364,6 +369,132 @@ public String getDefaultLanguage() {\n         return recognizeEntityAsyncClient.recognizeEntitiesBatch(documents, options);\n     }\n \n+    // PII Entity\n+\n+    /**\n+     * Returns a list of general personally identifiable information entities in the provided document.\n+     *\n+     * For a list of supported entity types, check: <a href=\"https://aka.ms/taner\">this</a>.\n+     * For a list of enabled languages, check: <a href=\"https://aka.ms/talangs\">this</a>.\n+     * This method will use the default language that sets up in\n+     * {@link TextAnalyticsClientBuilder#defaultLanguage(String)}. If none is specified, service will use 'en' as\n+     * the language.\n+     *\n+     * <p><strong>Code sample</strong></p>\n+     * <p>Recognize personally identifiable information entities in a document. Subscribes to the call asynchronously\n+     * and prints out the recognized entity details when a response is received.</p>\n+     *\n+     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntities#string}\n+     *\n+     * @param document The document to recognize personally identifiable information entities for.\n+     * For text length limits, maximum batch size, and supported text encoding, see\n+     * <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>.\n+     *\n+     * @return A {@link Mono} contains a\n+     * {@link PiiEntityCollection recognized personally identifiable information entities collection}.\n+     *\n+     * @throws NullPointerException if {@code document} is null.\n+     * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<PiiEntityCollection> recognizePiiEntities(String document) {\n+        return recognizePiiEntities(document, defaultLanguage);\n+    }\n+\n+    /**\n+     * Returns a list of general personally identifiable information entities in the provided document.\n+     *\n+     * For a list of supported entity types, check: <a href=\"https://aka.ms/taner\">this</a>.\n+     * For a list of enabled languages, check: <a href=\"https://aka.ms/talangs\">this</a>.\n+     *\n+     * <p><strong>Code sample</strong></p>\n+     * <p>Recognize personally identifiable information entities in a document with provided language code. Subscribes\n+     * to the call asynchronously and prints out the entity details when a response is received.</p>\n+     *\n+     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntities#string-string}\n+     *\n+     * @param document the text to recognize personally identifiable information entities for.\n+     * For text length limits, maximum batch size, and supported text encoding, see\n+     * <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>.\n+     * @param language The 2 letter ISO 639-1 representation of language. If not set, uses \"en\" for English as\n+     * default.\n+     *\n+     * @return A {@link Mono} contains a\n+     * {@link PiiEntityCollection recognized personally identifiable information entities collection}.\n+     *\n+     * @throws NullPointerException if {@code document} is null.\n+     * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<PiiEntityCollection> recognizePiiEntities(String document, String language) {\n+        return recognizePiiEntityAsyncClient.recognizePiiEntities(document, language);\n+    }\n+\n+    /**\n+     * Returns a list of general personally identifiable information entities for the provided list of documents with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDU0MTgz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-460454183", "createdAt": "2020-08-04T02:27:52Z", "commit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjoyNzo1MlrOG7O0Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjoyNzo1MlrOG7O0Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2MTg3OA==", "bodyText": "Do you think we should have a specific enum for PII entity categories?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464761878", "createdAt": "2020-08-04T02:27:52Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/PiiEntity.java", "diffHunk": "@@ -0,0 +1,116 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The {@link PiiEntity} model.\n+ */\n+@Immutable\n+public final class PiiEntity {\n+    /*\n+     * PiiEntity text as appears in the request.\n+     */\n+    private final String text;\n+\n+    /*\n+     * PiiEntity category, such as Person/Location/Org/SSN etc\n+     */\n+    private final EntityCategory category;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDU0Mjg2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-460454286", "createdAt": "2020-08-04T02:28:14Z", "commit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjoyODoxNFrOG7O0Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjoyODoxNFrOG7O0Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2MTk1NA==", "bodyText": "not sure this subcategories are actually for PII", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464761954", "createdAt": "2020-08-04T02:28:14Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/PiiEntity.java", "diffHunk": "@@ -0,0 +1,116 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The {@link PiiEntity} model.\n+ */\n+@Immutable\n+public final class PiiEntity {\n+    /*\n+     * PiiEntity text as appears in the request.\n+     */\n+    private final String text;\n+\n+    /*\n+     * PiiEntity category, such as Person/Location/Org/SSN etc\n+     */\n+    private final EntityCategory category;\n+\n+    /*\n+     * PiiEntity sub category, such as Age/Year/TimeRange etc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDU0NTEy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-460454512", "createdAt": "2020-08-04T02:29:05Z", "commit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjoyOTowNVrOG7O1Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjoyOTowNVrOG7O1Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2MjE0Ng==", "bodyText": "same here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464762146", "createdAt": "2020-08-04T02:29:05Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/PiiEntity.java", "diffHunk": "@@ -0,0 +1,116 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The {@link PiiEntity} model.\n+ */\n+@Immutable\n+public final class PiiEntity {\n+    /*\n+     * PiiEntity text as appears in the request.\n+     */\n+    private final String text;\n+\n+    /*\n+     * PiiEntity category, such as Person/Location/Org/SSN etc\n+     */\n+    private final EntityCategory category;\n+\n+    /*\n+     * PiiEntity sub category, such as Age/Year/TimeRange etc\n+     */\n+    private final String subcategory;\n+\n+    /*\n+     * Start position for the entity text.\n+     */\n+    private final int offset;\n+\n+    /*\n+     * The length for the entity text.\n+     */\n+    private final int length;\n+\n+    /*\n+     * Confidence score between 0 and 1 of the extracted entity.\n+     */\n+    private final double confidenceScore;\n+\n+    /**\n+     * Creates a {@link PiiEntity} model that describes entity.\n+     *\n+     * @param text The entity text as appears in the request.\n+     * @param category The entity category, such as Person/Location/Org/SSN etc.\n+     * @param subcategory The entity subcategory, such as Age/Year/TimeRange etc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDU0OTM5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-460454939", "createdAt": "2020-08-04T02:30:34Z", "commit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjozMDozNFrOG7O2pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjozMDozNFrOG7O2pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2MjUzMw==", "bodyText": "also, the way it is presented here, it seems like other endpoints could use the domain property too. I'm still unclear of the scope of this property so better leave it out until we fully understand it", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464762533", "createdAt": "2020-08-04T02:30:34Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsRequestOptions.java", "diffHunk": "@@ -54,4 +55,24 @@ public TextAnalyticsRequestOptions setIncludeStatistics(boolean includeStatistic\n         this.includeStatistics = includeStatistics;\n         return this;\n     }\n+\n+    /**\n+     * Get the value of {@code domain}.\n+     *\n+     * @return the value of domain.\n+     */\n+    public String getDomain() {\n+        return domain;\n+    }\n+\n+    /**\n+     * Set the value of {@code domain}.\n+     *\n+     * @param domain (Optional) if set to 'PHI', response will contain only PHI entities.\n+     * @return the {@link TextAnalyticsRequestOptions} object itself.\n+     */\n+    public TextAnalyticsRequestOptions setDomain(String domain) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDU2Mjcy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-460456272", "createdAt": "2020-08-04T02:35:11Z", "commit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjozNToxMVrOG7O7PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjozNToxMVrOG7O7PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2MzcwOQ==", "bodyText": "as we are including offset and length again. should we print that too?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464763709", "createdAt": "2020-08-04T02:35:11Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java", "diffHunk": "@@ -150,4 +150,14 @@ public void extractKeyPhrases() {\n         System.out.println(\"Extracted phrases:\");\n         textAnalyticsClient.extractKeyPhrases(document).forEach(keyPhrase -> System.out.printf(\"%s.%n\", keyPhrase));\n     }\n+\n+    /**\n+     * Code snippet for recognizing Personally Identifiable Information entity in a document.\n+     */\n+    public void recognizePiiEntity() {\n+        String document = \"My SSN is 555-55-5555\";\n+        textAnalyticsClient.recognizePiiEntities(document).forEach(piiEntity ->\n+            System.out.printf(\"Recognized Personally Identifiable Information entity: %s, category: %s, subCategory: %s, score: %f.%n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDU2OTc0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-460456974", "createdAt": "2020-08-04T02:37:30Z", "commit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjozNzozMFrOG7O9iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjozNzozMFrOG7O9iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2NDI5Nw==", "bodyText": "consider using 859-98-0987. Same for other places", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464764297", "createdAt": "2020-08-04T02:37:30Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/RecognizePiiEntities.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.Configuration;\n+\n+/**\n+ * Sample demonstrates how to recognize the Personally Identifiable Information entities of document.\n+ */\n+public class RecognizePiiEntities {\n+    /**\n+     * Main method to invoke this demo about how to recognize the Personally Identifiable Information entities of\n+     * document.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        TextAnalyticsClient client = new TextAnalyticsClientBuilder()\n+            .credential(new AzureKeyCredential(Configuration.getGlobalConfiguration().get(\"AZURE_TEXT_ANALYTICS_API_KEY\")))\n+            .endpoint(Configuration.getGlobalConfiguration().get(\"AZURE_TEXT_ANALYTICS_ENDPOINT\"))\n+            .buildClient();\n+\n+        // The document that needs be analyzed.\n+        String document = \"My SSN is 555-55-5555\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDU3MzQ3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-460457347", "createdAt": "2020-08-04T02:38:42Z", "commit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjozODo0MlrOG7O-oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjozODo0MlrOG7O-oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2NDU3Ng==", "bodyText": "Some places say \"Recognized Personally Identifiable Information entity\" I prefer this one too, but whichever you pick, better to have consistency in the samples", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r464764576", "createdAt": "2020-08-04T02:38:42Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/RecognizePiiEntitiesAsync.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.Configuration;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Sample demonstrates how to recognize the Personally Identifiable Information entities of document.\n+ */\n+public class RecognizePiiEntitiesAsync {\n+    /**\n+     * Main method to invoke this demo about how to recognize the Personally Identifiable Information entities of document.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        TextAnalyticsAsyncClient client = new TextAnalyticsClientBuilder()\n+            .credential(new AzureKeyCredential(Configuration.getGlobalConfiguration().get(\"AZURE_TEXT_ANALYTICS_API_KEY\")))\n+            .endpoint(Configuration.getGlobalConfiguration().get(\"AZURE_TEXT_ANALYTICS_ENDPOINT\"))\n+            .buildAsyncClient();\n+\n+        // The document that needs be analyzed.\n+        String document = \"Microsoft employee with ssn 859-98-0987 is using our awesome API's.\";\n+\n+        client.recognizePiiEntities(document).subscribe(\n+            entityCollection -> entityCollection.forEach(entity -> System.out.printf(\n+                \"Recognized personal identifiable information entity: %s, entity category: %s, entity sub-category: %s, score: %f.%n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e0c5c4e979daad1d854ee42f1a55fcb3583dc1"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09b425ae0c48b79bf884fb06ad3625e1ed82bc28", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/09b425ae0c48b79bf884fb06ad3625e1ed82bc28", "committedDate": "2020-08-07T14:13:05Z", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into TA-PII"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6cf6e707c9d0f5339d289d1f981c166d3233c58e", "committedDate": "2020-08-07T18:04:11Z", "message": "address feedbacks round 1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNTI0MDIz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-463524023", "createdAt": "2020-08-07T18:37:07Z", "commit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODozNzowN1rOG9kCCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODozNzowN1rOG9kCCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNjY2NQ==", "bodyText": "instead of comment out I prefer deleting... better to introduce than to leave dead code in case the service changes the parameter", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r467206665", "createdAt": "2020-08-07T18:37:07Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientTest.java", "diffHunk": "@@ -455,16 +454,16 @@ public void recognizePiiEntitiesTooManyDocuments(HttpClient httpClient, TextAnal\n                 }));\n     }\n \n-    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n-    @MethodSource(\"com.azure.ai.textanalytics.TestUtils#getTestParameters\")\n-    public void recognizePiiEntitiesWithDomain(HttpClient httpClient, TextAnalyticsServiceVersion serviceVersion) {\n-        client = getTextAnalyticsAsyncClient(httpClient, serviceVersion);\n-        recognizePiiEntitiesWithDomainRunner((inputs, options) ->\n-            StepVerifier.create(client.recognizePiiEntitiesBatch(inputs, null, options))\n-                .assertNext(response -> validatePiiEntitiesResultCollection(true,\n-                    getExpectedBatchPiiEntitiesWithDomainSpecified(), response))\n-                .verifyComplete());\n-    }\n+//    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTU5MzM1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-466159335", "createdAt": "2020-08-12T18:14:58Z", "commit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNDo1OFrOG_s9nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozNToyMlrOG_tq3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MDE0MQ==", "bodyText": "in the passed-in provided document", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r469450141", "createdAt": "2020-08-12T18:14:58Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -262,6 +264,22 @@ textAnalyticsClient.recognizeEntities(document).forEach(entity ->\n For samples on using the production recommended option `RecognizeEntitiesBatch` see [here][recognize_entities_sample].\n Please refer to the service documentation for a conceptual discussion of [named entity recognition][named_entity_recognition].\n \n+### Recognize Personally Identifiable Information entities\n+Run a predictive model to identify a collection of Personally Identifiable Information(PII) entities in the passed-in ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MDg0Ng==", "bodyText": "This endpoint is only supported for API versions v3.1-preview.1 and above.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r469450846", "createdAt": "2020-08-12T18:16:14Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -262,6 +264,22 @@ textAnalyticsClient.recognizeEntities(document).forEach(entity ->\n For samples on using the production recommended option `RecognizeEntitiesBatch` see [here][recognize_entities_sample].\n Please refer to the service documentation for a conceptual discussion of [named entity recognition][named_entity_recognition].\n \n+### Recognize Personally Identifiable Information entities\n+Run a predictive model to identify a collection of Personally Identifiable Information(PII) entities in the passed-in \n+document. It recognizes and categorizes PII entities in its input text, such as\n+Social Security Numbers, bank account information, credit card numbers, and more. This endpoint is only available for \n+v3.1-preview.1 and up.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MTc1MQ==", "bodyText": "Didn't check what we are following now for the readme samples. But based on our last discussions these examples should be concise and hence can remove info about length, offset, confidence score.\nWhat do you think?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r469451751", "createdAt": "2020-08-12T18:17:49Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -262,6 +264,22 @@ textAnalyticsClient.recognizeEntities(document).forEach(entity ->\n For samples on using the production recommended option `RecognizeEntitiesBatch` see [here][recognize_entities_sample].\n Please refer to the service documentation for a conceptual discussion of [named entity recognition][named_entity_recognition].\n \n+### Recognize Personally Identifiable Information entities\n+Run a predictive model to identify a collection of Personally Identifiable Information(PII) entities in the passed-in \n+document. It recognizes and categorizes PII entities in its input text, such as\n+Social Security Numbers, bank account information, credit card numbers, and more. This endpoint is only available for \n+v3.1-preview.1 and up.\n+\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L158-L161 -->\n+```java\n+String document = \"My SSN is 555-55-5555\";\n+textAnalyticsClient.recognizePiiEntities(document).forEach(entity -> System.out.printf(\n+    \"Recognized Personally Identifiable Information entity: %s, entity category: %s, entity subcategory: %s, offset: %s, length: %s, confidence score: %f.%n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MjMwNw==", "bodyText": "Do we do this section for all the readme snippets if not consider moving this to Next Steps?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r469452307", "createdAt": "2020-08-12T18:18:51Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/README.md", "diffHunk": "@@ -262,6 +264,22 @@ textAnalyticsClient.recognizeEntities(document).forEach(entity ->\n For samples on using the production recommended option `RecognizeEntitiesBatch` see [here][recognize_entities_sample].\n Please refer to the service documentation for a conceptual discussion of [named entity recognition][named_entity_recognition].\n \n+### Recognize Personally Identifiable Information entities\n+Run a predictive model to identify a collection of Personally Identifiable Information(PII) entities in the passed-in \n+document. It recognizes and categorizes PII entities in its input text, such as\n+Social Security Numbers, bank account information, credit card numbers, and more. This endpoint is only available for \n+v3.1-preview.1 and up.\n+\n+<!-- embedme ./src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java#L158-L161 -->\n+```java\n+String document = \"My SSN is 555-55-5555\";\n+textAnalyticsClient.recognizePiiEntities(document).forEach(entity -> System.out.printf(\n+    \"Recognized Personally Identifiable Information entity: %s, entity category: %s, entity subcategory: %s, offset: %s, length: %s, confidence score: %f.%n\",\n+    entity.getText(), entity.getCategory(), entity.getSubcategory(), entity.getOffset(), entity.getLength(), entity.getConfidenceScore()));\n+```\n+For samples on using the production recommended option `RecognizePiiEntitiesBatch` see [here][recognize_pii_entities_sample].\n+Please refer to the service documentation for [supported PII entity types][pii_entity_recognition].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1Mjk3MA==", "bodyText": "You don't need the service version info here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r469452970", "createdAt": "2020-08-12T18:19:58Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizePiiEntityAsyncClient.java", "diffHunk": "@@ -0,0 +1,205 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl;\n+import com.azure.ai.textanalytics.implementation.models.EntitiesResult;\n+import com.azure.ai.textanalytics.implementation.models.MultiLanguageBatchInput;\n+import com.azure.ai.textanalytics.implementation.models.WarningCodeValue;\n+import com.azure.ai.textanalytics.models.EntityCategory;\n+import com.azure.ai.textanalytics.models.PiiEntity;\n+import com.azure.ai.textanalytics.models.PiiEntityCollection;\n+import com.azure.ai.textanalytics.models.RecognizePiiEntitiesResult;\n+import com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions;\n+import com.azure.ai.textanalytics.models.TextAnalyticsWarning;\n+import com.azure.ai.textanalytics.models.TextDocumentInput;\n+import com.azure.ai.textanalytics.models.WarningCode;\n+import com.azure.ai.textanalytics.util.RecognizePiiEntitiesResultCollection;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static com.azure.ai.textanalytics.TextAnalyticsAsyncClient.COGNITIVE_TRACING_NAMESPACE_VALUE;\n+import static com.azure.ai.textanalytics.implementation.Utility.inputDocumentsValidation;\n+import static com.azure.ai.textanalytics.implementation.Utility.mapToHttpResponseExceptionIfExist;\n+import static com.azure.ai.textanalytics.implementation.Utility.toBatchStatistics;\n+import static com.azure.ai.textanalytics.implementation.Utility.toMultiLanguageInput;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextAnalyticsError;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextAnalyticsException;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextDocumentStatistics;\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * Helper class for managing recognize Personally Identifiable Information entity endpoint.\n+ */\n+class RecognizePiiEntityAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(RecognizePiiEntityAsyncClient.class);\n+    private final TextAnalyticsClientImpl service;\n+\n+    /**\n+     * Create a {@link RecognizePiiEntityAsyncClient} that sends requests to the Text Analytics services's\n+     * recognize Personally Identifiable Information entity endpoint.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     */\n+    RecognizePiiEntityAsyncClient(TextAnalyticsClientImpl service) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MzY0NQ==", "bodyText": "nit: no need for extra variable creation here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r469453645", "createdAt": "2020-08-12T18:21:06Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizePiiEntityAsyncClient.java", "diffHunk": "@@ -0,0 +1,205 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl;\n+import com.azure.ai.textanalytics.implementation.models.EntitiesResult;\n+import com.azure.ai.textanalytics.implementation.models.MultiLanguageBatchInput;\n+import com.azure.ai.textanalytics.implementation.models.WarningCodeValue;\n+import com.azure.ai.textanalytics.models.EntityCategory;\n+import com.azure.ai.textanalytics.models.PiiEntity;\n+import com.azure.ai.textanalytics.models.PiiEntityCollection;\n+import com.azure.ai.textanalytics.models.RecognizePiiEntitiesResult;\n+import com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions;\n+import com.azure.ai.textanalytics.models.TextAnalyticsWarning;\n+import com.azure.ai.textanalytics.models.TextDocumentInput;\n+import com.azure.ai.textanalytics.models.WarningCode;\n+import com.azure.ai.textanalytics.util.RecognizePiiEntitiesResultCollection;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static com.azure.ai.textanalytics.TextAnalyticsAsyncClient.COGNITIVE_TRACING_NAMESPACE_VALUE;\n+import static com.azure.ai.textanalytics.implementation.Utility.inputDocumentsValidation;\n+import static com.azure.ai.textanalytics.implementation.Utility.mapToHttpResponseExceptionIfExist;\n+import static com.azure.ai.textanalytics.implementation.Utility.toBatchStatistics;\n+import static com.azure.ai.textanalytics.implementation.Utility.toMultiLanguageInput;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextAnalyticsError;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextAnalyticsException;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextDocumentStatistics;\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * Helper class for managing recognize Personally Identifiable Information entity endpoint.\n+ */\n+class RecognizePiiEntityAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(RecognizePiiEntityAsyncClient.class);\n+    private final TextAnalyticsClientImpl service;\n+\n+    /**\n+     * Create a {@link RecognizePiiEntityAsyncClient} that sends requests to the Text Analytics services's\n+     * recognize Personally Identifiable Information entity endpoint.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     */\n+    RecognizePiiEntityAsyncClient(TextAnalyticsClientImpl service) {\n+        this.service = service;\n+    }\n+\n+    /**\n+     * Helper function for calling service with max overloaded parameters that returns a {@link Mono}\n+     * which contains {@link PiiEntityCollection}.\n+     *\n+     * @param document A single document.\n+     * @param language The language code.\n+     *\n+     * @return The {@link Mono} of {@link PiiEntityCollection}.\n+     */\n+    Mono<PiiEntityCollection> recognizePiiEntities(String document, String language) {\n+        try {\n+            Objects.requireNonNull(document, \"'document' cannot be null.\");\n+            final TextDocumentInput textDocumentInput = new TextDocumentInput(\"0\", document).setLanguage(language);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1NDI2Ng==", "bodyText": "Should it be fine to log PII information here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r469454266", "createdAt": "2020-08-12T18:22:16Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizePiiEntityAsyncClient.java", "diffHunk": "@@ -0,0 +1,205 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl;\n+import com.azure.ai.textanalytics.implementation.models.EntitiesResult;\n+import com.azure.ai.textanalytics.implementation.models.MultiLanguageBatchInput;\n+import com.azure.ai.textanalytics.implementation.models.WarningCodeValue;\n+import com.azure.ai.textanalytics.models.EntityCategory;\n+import com.azure.ai.textanalytics.models.PiiEntity;\n+import com.azure.ai.textanalytics.models.PiiEntityCollection;\n+import com.azure.ai.textanalytics.models.RecognizePiiEntitiesResult;\n+import com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions;\n+import com.azure.ai.textanalytics.models.TextAnalyticsWarning;\n+import com.azure.ai.textanalytics.models.TextDocumentInput;\n+import com.azure.ai.textanalytics.models.WarningCode;\n+import com.azure.ai.textanalytics.util.RecognizePiiEntitiesResultCollection;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static com.azure.ai.textanalytics.TextAnalyticsAsyncClient.COGNITIVE_TRACING_NAMESPACE_VALUE;\n+import static com.azure.ai.textanalytics.implementation.Utility.inputDocumentsValidation;\n+import static com.azure.ai.textanalytics.implementation.Utility.mapToHttpResponseExceptionIfExist;\n+import static com.azure.ai.textanalytics.implementation.Utility.toBatchStatistics;\n+import static com.azure.ai.textanalytics.implementation.Utility.toMultiLanguageInput;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextAnalyticsError;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextAnalyticsException;\n+import static com.azure.ai.textanalytics.implementation.Utility.toTextDocumentStatistics;\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * Helper class for managing recognize Personally Identifiable Information entity endpoint.\n+ */\n+class RecognizePiiEntityAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(RecognizePiiEntityAsyncClient.class);\n+    private final TextAnalyticsClientImpl service;\n+\n+    /**\n+     * Create a {@link RecognizePiiEntityAsyncClient} that sends requests to the Text Analytics services's\n+     * recognize Personally Identifiable Information entity endpoint.\n+     *\n+     * @param service The proxy service used to perform REST calls.\n+     */\n+    RecognizePiiEntityAsyncClient(TextAnalyticsClientImpl service) {\n+        this.service = service;\n+    }\n+\n+    /**\n+     * Helper function for calling service with max overloaded parameters that returns a {@link Mono}\n+     * which contains {@link PiiEntityCollection}.\n+     *\n+     * @param document A single document.\n+     * @param language The language code.\n+     *\n+     * @return The {@link Mono} of {@link PiiEntityCollection}.\n+     */\n+    Mono<PiiEntityCollection> recognizePiiEntities(String document, String language) {\n+        try {\n+            Objects.requireNonNull(document, \"'document' cannot be null.\");\n+            final TextDocumentInput textDocumentInput = new TextDocumentInput(\"0\", document).setLanguage(language);\n+            return recognizePiiEntitiesBatch(Collections.singletonList(textDocumentInput), null)\n+                .map(resultCollectionResponse -> {\n+                    PiiEntityCollection entityCollection = null;\n+                    // for each loop will have only one entry inside\n+                    for (RecognizePiiEntitiesResult entitiesResult : resultCollectionResponse.getValue()) {\n+                        if (entitiesResult.isError()) {\n+                            throw logger.logExceptionAsError(toTextAnalyticsException(entitiesResult.getError()));\n+                        }\n+                        entityCollection = new PiiEntityCollection(entitiesResult.getEntities(),\n+                            entitiesResult.getEntities().getWarnings());\n+                    }\n+                    return entityCollection;\n+                });\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Helper function for calling service with max overloaded parameters.\n+     *\n+     * @param documents The list of documents to recognize Personally Identifiable Information entities for.\n+     * @param options The {@link TextAnalyticsRequestOptions} request options.\n+     *\n+     * @return A mono {@link Response} that contains {@link RecognizePiiEntitiesResultCollection}.\n+     */\n+    Mono<Response<RecognizePiiEntitiesResultCollection>> recognizePiiEntitiesBatch(\n+        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options) {\n+        try {\n+            inputDocumentsValidation(documents);\n+            return withContext(context -> getRecognizePiiEntitiesResponse(documents, options, context));\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Helper function for calling service with max overloaded parameters with {@link Context} is given.\n+     *\n+     * @param documents The list of documents to recognize Personally Identifiable Information entities for.\n+     * @param options The {@link TextAnalyticsRequestOptions} request options.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     *\n+     * @return A mono {@link Response} that contains {@link RecognizePiiEntitiesResultCollection}.\n+     */\n+    Mono<Response<RecognizePiiEntitiesResultCollection>> recognizePiiEntitiesBatchWithContext(\n+        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context) {\n+        try {\n+            inputDocumentsValidation(documents);\n+            return getRecognizePiiEntitiesResponse(documents, options, context);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Helper method to convert the service response of {@link EntitiesResult} to {@link Response} which contains\n+     * {@link RecognizePiiEntitiesResultCollection}.\n+     *\n+     * @param response the {@link Response} of {@link EntitiesResult} returned by the service.\n+     *\n+     * @return A {@link Response} that contains {@link RecognizePiiEntitiesResultCollection}.\n+     */\n+    private Response<RecognizePiiEntitiesResultCollection> toRecognizePiiEntitiesResultCollectionResponse(\n+        final Response<EntitiesResult> response) {\n+        final EntitiesResult entitiesResult = response.getValue();\n+        // List of documents results\n+        final List<RecognizePiiEntitiesResult> recognizeEntitiesResults = new ArrayList<>();\n+        entitiesResult.getDocuments().forEach(documentEntities -> {\n+            // Pii entities list\n+            final List<PiiEntity> piiEntities = documentEntities.getEntities().stream().map(entity ->\n+                new PiiEntity(entity.getText(), EntityCategory.fromString(entity.getCategory()),\n+                    entity.getSubcategory(), entity.getOffset(), entity.getLength(),\n+                    entity.getConfidenceScore()))\n+                .collect(Collectors.toList());\n+            // Warnings\n+            final List<TextAnalyticsWarning> warnings = documentEntities.getWarnings().stream()\n+                .map(warning -> {\n+                    final WarningCodeValue warningCodeValue = warning.getCode();\n+                    return new TextAnalyticsWarning(\n+                        WarningCode.fromString(warningCodeValue == null ? null : warningCodeValue.toString()),\n+                        warning.getMessage());\n+                }).collect(Collectors.toList());\n+\n+            recognizeEntitiesResults.add(new RecognizePiiEntitiesResult(\n+                documentEntities.getId(),\n+                documentEntities.getStatistics() == null ? null\n+                    : toTextDocumentStatistics(documentEntities.getStatistics()),\n+                null,\n+                new PiiEntityCollection(new IterableStream<>(piiEntities), new IterableStream<>(warnings))\n+            ));\n+        });\n+        // Document errors\n+        entitiesResult.getErrors().forEach(documentError -> {\n+            recognizeEntitiesResults.add(\n+                new RecognizePiiEntitiesResult(documentError.getId(), null,\n+                    toTextAnalyticsError(documentError.getError()), null));\n+        });\n+\n+        return new SimpleResponse<>(response,\n+            new RecognizePiiEntitiesResultCollection(recognizeEntitiesResults, entitiesResult.getModelVersion(),\n+                entitiesResult.getStatistics() == null ? null : toBatchStatistics(entitiesResult.getStatistics())));\n+    }\n+\n+    /**\n+     * Call the service with REST response, convert to a {@link Mono} of {@link Response} that contains\n+     * {@link RecognizePiiEntitiesResultCollection} from a {@link SimpleResponse} of {@link EntitiesResult}.\n+     *\n+     * @param documents The list of documents to recognize Personally Identifiable Information entities for.\n+     * @param options The {@link TextAnalyticsRequestOptions} request options.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     *\n+     * @return A mono {@link Response} that contains {@link RecognizePiiEntitiesResultCollection}.\n+     */\n+    private Mono<Response<RecognizePiiEntitiesResultCollection>> getRecognizePiiEntitiesResponse(\n+        Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context) {\n+        return service.entitiesRecognitionPiiWithResponseAsync(\n+            new MultiLanguageBatchInput().setDocuments(toMultiLanguageInput(documents)),\n+            options == null ? null : options.getModelVersion(),\n+            options == null ? null : options.isIncludeStatistics(),\n+            null,\n+            context.addData(AZ_TRACING_NAMESPACE_KEY, COGNITIVE_TRACING_NAMESPACE_VALUE))\n+            .doOnSubscribe(ignoredValue -> logger.info(\"A batch of documents - {}\", documents.toString()))\n+            .doOnSuccess(response ->\n+                logger.info(\"Recognized Personally Identifiable Information entities for a batch of documents- {}\",\n+                response.getValue()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1NTg3Ng==", "bodyText": "that is set using", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r469455876", "createdAt": "2020-08-12T18:25:05Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -364,7 +369,132 @@ public String getDefaultLanguage() {\n         return recognizeEntityAsyncClient.recognizeEntitiesBatch(documents, options);\n     }\n \n-    // Linked Entity\n+    // PII Entity\n+\n+    /**\n+     * Returns a list of Personally Identifiable Information(PII) entities in the provided document.\n+     *\n+     * For a list of supported entity types, check: <a href=\"https://aka.ms/tanerpii\">this</a>.\n+     * For a list of enabled languages, check: <a href=\"https://aka.ms/talangs\">this</a>. This method will use the\n+     * default language that sets up in {@link TextAnalyticsClientBuilder#defaultLanguage(String)}. If none is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1ODI1OA==", "bodyText": "What happens here if the document is empty?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r469458258", "createdAt": "2020-08-12T18:29:19Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -364,7 +369,132 @@ public String getDefaultLanguage() {\n         return recognizeEntityAsyncClient.recognizeEntitiesBatch(documents, options);\n     }\n \n-    // Linked Entity\n+    // PII Entity\n+\n+    /**\n+     * Returns a list of Personally Identifiable Information(PII) entities in the provided document.\n+     *\n+     * For a list of supported entity types, check: <a href=\"https://aka.ms/tanerpii\">this</a>.\n+     * For a list of enabled languages, check: <a href=\"https://aka.ms/talangs\">this</a>. This method will use the\n+     * default language that sets up in {@link TextAnalyticsClientBuilder#defaultLanguage(String)}. If none is\n+     * specified, service will use 'en' as the language.\n+     *\n+     * <p><strong>Code sample</strong></p>\n+     * <p>Recognize the PII entities details in a document.\n+     * Subscribes to the call asynchronously and prints out the recognized entity details when a response is\n+     * received.</p>\n+     *\n+     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntities#string}\n+     *\n+     * @param document The document to recognize PII entities details for.\n+     * For text length limits, maximum batch size, and supported text encoding, see\n+     * <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>.\n+     *\n+     * @return A {@link Mono} contains a {@link PiiEntityCollection recognized PII entities collection}.\n+     *\n+     * @throws NullPointerException if {@code document} is null.\n+     * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<PiiEntityCollection> recognizePiiEntities(String document) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1ODY5Mg==", "bodyText": "Do we need this check here too?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r469458692", "createdAt": "2020-08-12T18:30:04Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClient.java", "diffHunk": "@@ -289,6 +291,119 @@ public RecognizeEntitiesResultCollection recognizeEntitiesBatch(\n         return client.recognizeEntityAsyncClient.recognizeEntitiesBatchWithContext(documents, options, context).block();\n     }\n \n+    // PII Entity\n+    /**\n+     * Returns a list of Personally Identifiable Information(PII) entities in the provided document.\n+     *\n+     * For a list of supported entity types, check: <a href=\"https://aka.ms/tanerpii\">this</a>\n+     * For a list of enabled languages, check: <a href=\"https://aka.ms/talangs\">this</a>. This method will use the\n+     * default language that sets up in {@link TextAnalyticsClientBuilder#defaultLanguage(String)}. If none is\n+     * specified, service will use 'en' as the language.\n+     *\n+     * <p><strong>Code Sample</strong></p>\n+     * <p>Recognize the PII entities details in a document.</p>\n+     *\n+     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsClient.recognizePiiEntities#String}\n+     *\n+     * @param document The document to recognize PII entities details for.\n+     * For text length limits, maximum batch size, and supported text encoding, see\n+     * <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>.\n+     *\n+     * @return A {@link PiiEntityCollection recognized PII entities collection}.\n+     *\n+     * @throws NullPointerException if {@code document} is null.\n+     * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public PiiEntityCollection recognizePiiEntities(String document) {\n+        return recognizePiiEntities(document, client.getDefaultLanguage());\n+    }\n+\n+    /**\n+     * Returns a list of Personally Identifiable Information(PII) entities in the provided document\n+     * with provided language code.\n+     *\n+     * For a list of supported entity types, check: <a href=\"https://aka.ms/tanerpii\">this</a>\n+     * For a list of enabled languages, check: <a href=\"https://aka.ms/talangs\">this</a>\n+     *\n+     * <p><strong>Code Sample</strong></p>\n+     * <p>Recognizes the PII entities details in a document with a provided language code.</p>\n+     *\n+     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsClient.recognizePiiEntities#String-String}\n+     *\n+     * @param document The document to recognize PII entities details for.\n+     * For text length limits, maximum batch size, and supported text encoding, see\n+     * <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>.\n+     * @param language The 2 letter ISO 639-1 representation of language. If not set, uses \"en\" for English as default.\n+     *\n+     * @return The {@link PiiEntityCollection recognized PII entities collection}.\n+     *\n+     * @throws NullPointerException if {@code document} is null.\n+     * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public PiiEntityCollection recognizePiiEntities(String document, String language) {\n+        Objects.requireNonNull(document, \"'document' cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1OTM5NA==", "bodyText": "recognized", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r469459394", "createdAt": "2020-08-12T18:31:17Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/PiiEntity.java", "diffHunk": "@@ -0,0 +1,116 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The {@link PiiEntity} model.\n+ */\n+@Immutable\n+public final class PiiEntity {\n+    /*\n+     * PiiEntity text as appears in the request.\n+     */\n+    private final String text;\n+\n+    /*\n+     * PiiEntity category, such as Person/Location/Org/SSN etc\n+     */\n+    private final EntityCategory category;\n+\n+    /*\n+     * PiiEntity sub category, such as Medical/Stock exchange/Sports etc\n+     */\n+    private final String subcategory;\n+\n+    /*\n+     * Start position for the entity text.\n+     */\n+    private final int offset;\n+\n+    /*\n+     * The length for the entity text.\n+     */\n+    private final int length;\n+\n+    /*\n+     * Confidence score between 0 and 1 of the extracted entity.\n+     */\n+    private final double confidenceScore;\n+\n+    /**\n+     * Creates a {@link PiiEntity} model that describes entity.\n+     *\n+     * @param text The entity text as appears in the request.\n+     * @param category The entity category, such as Person/Location/Org/SSN etc.\n+     * @param subcategory The entity subcategory, such as Medical/Stock exchange/Sports etc.\n+     * @param offset The start position for the entity text\n+     * @param length The length for the entity text\n+     * @param confidenceScore A confidence score between 0 and 1 of the extracted entity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1OTY1OA==", "bodyText": "recognized", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r469459658", "createdAt": "2020-08-12T18:31:44Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/PiiEntity.java", "diffHunk": "@@ -0,0 +1,116 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The {@link PiiEntity} model.\n+ */\n+@Immutable\n+public final class PiiEntity {\n+    /*\n+     * PiiEntity text as appears in the request.\n+     */\n+    private final String text;\n+\n+    /*\n+     * PiiEntity category, such as Person/Location/Org/SSN etc\n+     */\n+    private final EntityCategory category;\n+\n+    /*\n+     * PiiEntity sub category, such as Medical/Stock exchange/Sports etc\n+     */\n+    private final String subcategory;\n+\n+    /*\n+     * Start position for the entity text.\n+     */\n+    private final int offset;\n+\n+    /*\n+     * The length for the entity text.\n+     */\n+    private final int length;\n+\n+    /*\n+     * Confidence score between 0 and 1 of the extracted entity.\n+     */\n+    private final double confidenceScore;\n+\n+    /**\n+     * Creates a {@link PiiEntity} model that describes entity.\n+     *\n+     * @param text The entity text as appears in the request.\n+     * @param category The entity category, such as Person/Location/Org/SSN etc.\n+     * @param subcategory The entity subcategory, such as Medical/Stock exchange/Sports etc.\n+     * @param offset The start position for the entity text\n+     * @param length The length for the entity text\n+     * @param confidenceScore A confidence score between 0 and 1 of the extracted entity.\n+     */\n+    public PiiEntity(String text, EntityCategory category, String subcategory, int offset, int length,\n+        double confidenceScore) {\n+        this.text = text;\n+        this.category = category;\n+        this.subcategory = subcategory;\n+        this.offset = offset;\n+        this.length = length;\n+        this.confidenceScore = confidenceScore;\n+    }\n+\n+    /**\n+     * Get the text property: PII entity text as appears in the request.\n+     *\n+     * @return The text value.\n+     */\n+    public String getText() {\n+        return this.text;\n+    }\n+\n+    /**\n+     * Get the category property: Categorized entity category, such as Person/Location/Org/SSN etc.\n+     *\n+     * @return The category value.\n+     */\n+    public EntityCategory getCategory() {\n+        return this.category;\n+    }\n+\n+    /**\n+     * Get the subcategory property: Categorized entity sub category, such as Medical/Stock exchange/Sports etc.\n+     *\n+     * @return The subcategory value.\n+     */\n+    public String getSubcategory() {\n+        return this.subcategory;\n+    }\n+\n+    /**\n+     * Get the offset property: the start position for the entity text.\n+     *\n+     * @return The offset value.\n+     */\n+    public int getOffset() {\n+        return this.offset;\n+    }\n+\n+    /**\n+     * Get the length property: the length for the entity text.\n+     *\n+     * @return The length value.\n+     */\n+    public int getLength() {\n+        return this.length;\n+    }\n+\n+    /**\n+     * Get the score property: Confidence score between 0 and 1 of the extracted entity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MDAwMQ==", "bodyText": "For the return statements either include the {@code} value or a complete sentence.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r469460001", "createdAt": "2020-08-12T18:32:24Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/PiiEntity.java", "diffHunk": "@@ -0,0 +1,116 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+\n+/**\n+ * The {@link PiiEntity} model.\n+ */\n+@Immutable\n+public final class PiiEntity {\n+    /*\n+     * PiiEntity text as appears in the request.\n+     */\n+    private final String text;\n+\n+    /*\n+     * PiiEntity category, such as Person/Location/Org/SSN etc\n+     */\n+    private final EntityCategory category;\n+\n+    /*\n+     * PiiEntity sub category, such as Medical/Stock exchange/Sports etc\n+     */\n+    private final String subcategory;\n+\n+    /*\n+     * Start position for the entity text.\n+     */\n+    private final int offset;\n+\n+    /*\n+     * The length for the entity text.\n+     */\n+    private final int length;\n+\n+    /*\n+     * Confidence score between 0 and 1 of the extracted entity.\n+     */\n+    private final double confidenceScore;\n+\n+    /**\n+     * Creates a {@link PiiEntity} model that describes entity.\n+     *\n+     * @param text The entity text as appears in the request.\n+     * @param category The entity category, such as Person/Location/Org/SSN etc.\n+     * @param subcategory The entity subcategory, such as Medical/Stock exchange/Sports etc.\n+     * @param offset The start position for the entity text\n+     * @param length The length for the entity text\n+     * @param confidenceScore A confidence score between 0 and 1 of the extracted entity.\n+     */\n+    public PiiEntity(String text, EntityCategory category, String subcategory, int offset, int length,\n+        double confidenceScore) {\n+        this.text = text;\n+        this.category = category;\n+        this.subcategory = subcategory;\n+        this.offset = offset;\n+        this.length = length;\n+        this.confidenceScore = confidenceScore;\n+    }\n+\n+    /**\n+     * Get the text property: PII entity text as appears in the request.\n+     *\n+     * @return The text value.\n+     */\n+    public String getText() {\n+        return this.text;\n+    }\n+\n+    /**\n+     * Get the category property: Categorized entity category, such as Person/Location/Org/SSN etc.\n+     *\n+     * @return The category value.\n+     */\n+    public EntityCategory getCategory() {\n+        return this.category;\n+    }\n+\n+    /**\n+     * Get the subcategory property: Categorized entity sub category, such as Medical/Stock exchange/Sports etc.\n+     *\n+     * @return The subcategory value.\n+     */\n+    public String getSubcategory() {\n+        return this.subcategory;\n+    }\n+\n+    /**\n+     * Get the offset property: the start position for the entity text.\n+     *\n+     * @return The offset value.\n+     */\n+    public int getOffset() {\n+        return this.offset;\n+    }\n+\n+    /**\n+     * Get the length property: the length for the entity text.\n+     *\n+     * @return The length value.\n+     */\n+    public int getLength() {\n+        return this.length;\n+    }\n+\n+    /**\n+     * Get the score property: Confidence score between 0 and 1 of the extracted entity.\n+     *\n+     * @return The score value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MDUyNg==", "bodyText": "Should add a throws here if the underlying method could potentially throw an exception.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r469460526", "createdAt": "2020-08-12T18:33:18Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/RecognizePiiEntitiesResult.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+import com.azure.core.util.IterableStream;\n+\n+/**\n+ * The {@link RecognizePiiEntitiesResult} model.\n+ */\n+@Immutable\n+public final class RecognizePiiEntitiesResult extends TextAnalyticsResult {\n+    private final PiiEntityCollection entities;\n+\n+    /**\n+     * Creates a {@link RecognizePiiEntitiesResult} model that describes recognized PII entities result.\n+     *\n+     * @param id Unique, non-empty document identifier.\n+     * @param textDocumentStatistics The text document statistics.\n+     * @param error The document error.\n+     * @param entities A {@link PiiEntityCollection} contains entities and warnings.\n+     */\n+    public RecognizePiiEntitiesResult(String id, TextDocumentStatistics textDocumentStatistics,\n+        TextAnalyticsError error, PiiEntityCollection entities) {\n+        super(id, textDocumentStatistics, error);\n+        this.entities = entities;\n+    }\n+\n+    /**\n+     * Get an {@link IterableStream} of {@link PiiEntity}.\n+     *\n+     * @return An {@link IterableStream} of {@link PiiEntity}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MTcyNw==", "bodyText": "make sure to keep this concise as this gets added in between the java docs and could make the docs really verbose!", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r469461727", "createdAt": "2020-08-12T18:35:22Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -234,6 +235,102 @@ public void recognizeBatchEntitiesMaxOverload() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeCategorizedEntitiesBatch#Iterable-TextAnalyticsRequestOptions\n     }\n \n+    // Personally Identifiable Information Entity\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizePiiEntities(String)}\n+     */\n+    public void recognizePiiEntities() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntities#string\n+        String document = \"My SSN is 555-55-5555\";\n+        textAnalyticsAsyncClient.recognizePiiEntities(document).subscribe(piiEntityCollection ->\n+            piiEntityCollection.forEach(entity -> System.out.printf(\n+                \"Recognized Personally Identifiable Information entity: %s, entity category: %s,\"\n+                    + \" entity subcategory: %s, offset: %s, length: %s, confidence score: %f.%n\",\n+                entity.getText(), entity.getCategory(), entity.getSubcategory(), entity.getOffset(),\n+                entity.getLength(), entity.getConfidenceScore())));\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntities#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizePiiEntities(String, String)}\n+     */\n+    public void recognizePiiEntitiesWithLanguage() {\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntities#string-string\n+        String document = \"My SSN is 555-55-5555\";\n+        textAnalyticsAsyncClient.recognizePiiEntities(document, \"en\")\n+            .subscribe(piiEntityCollection -> piiEntityCollection.forEach(entity -> System.out.printf(\n+                \"Recognized Personally Identifiable Information entity: %s, entity category: %s,\"\n+                    + \" entity subcategory: %s, offset: %s, length: %s, confidence score: %f.%n\",\n+                entity.getText(), entity.getCategory(), entity.getSubcategory(), entity.getOffset(),\n+                entity.getLength(), entity.getConfidenceScore())));\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntities#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizePiiEntitiesBatch(Iterable, String, TextAnalyticsRequestOptions)}\n+     */\n+    public void recognizePiiEntitiesStringListWithOptions() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntitiesBatch#Iterable-String-TextAnalyticsRequestOptions\n+        List<String> documents = Arrays.asList(\n+            \"My SSN is 555-55-5555.\",\n+            \"Visa card 0111 1111 1111 1111.\"\n+        );\n+\n+        // Request options: show statistics and model version\n+        TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setIncludeStatistics(true)\n+            .setModelVersion(\"latest\");\n+\n+        textAnalyticsAsyncClient.recognizePiiEntitiesBatch(documents, \"en\", requestOptions)\n+            .subscribe(piiEntitiesResults -> {\n+                // Batch statistics\n+                TextDocumentBatchStatistics batchStatistics = piiEntitiesResults.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n+\n+                piiEntitiesResults.forEach(recognizePiiEntitiesResult ->\n+                    recognizePiiEntitiesResult.getEntities().forEach(entity -> System.out.printf(\n+                        \"Recognized Personally Identifiable Information entity: %s, entity category: %s,\"\n+                            + \" entity subcategory: %s, offset: %s, length: %s, confidence score: %f.%n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8f57718660ca16c016395c900986db12fcc6d53", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/f8f57718660ca16c016395c900986db12fcc6d53", "committedDate": "2020-08-13T04:11:20Z", "message": "resolve conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17092a5ab3adccc1d8cbb0a96c74bfa0a436893b", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/17092a5ab3adccc1d8cbb0a96c74bfa0a436893b", "committedDate": "2020-08-14T06:29:55Z", "message": "address feedbacks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NzI0NDk5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-467724499", "createdAt": "2020-08-14T16:50:19Z", "commit": {"oid": "17092a5ab3adccc1d8cbb0a96c74bfa0a436893b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo1MDoxOVrOHA7qZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo1MDoxOVrOHA7qZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczOTU1Ng==", "bodyText": "Do we always put this in the changelog? It seems redundant to put all the overloads instead of just saying PII functionality is included like you did above.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r470739556", "createdAt": "2020-08-14T16:50:19Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/CHANGELOG.md", "diffHunk": "@@ -5,9 +5,21 @@\n   - `offset` is the offset of the text from the start of the document\n   \n **New features**\n-- Added the support for Personally Identifiable Information(PII) entity recognition feature.\n-  To use this feature, you need to make sure you are using the \n-  service's v3.1-preview.1 API.\n+- Added support for Personally Identifiable Information(PII) entity recognition feature.\n+  To use this feature, you need to make sure you are using the service's v3.1-preview.1 API.\n+  \n+  New synchronous API introduced:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17092a5ab3adccc1d8cbb0a96c74bfa0a436893b"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NzI1OTI4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-467725928", "createdAt": "2020-08-14T16:52:36Z", "commit": {"oid": "17092a5ab3adccc1d8cbb0a96c74bfa0a436893b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo1MjozN1rOHA7u_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo1MjozN1rOHA7u_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0MDczMw==", "bodyText": "that is set using .... is not clear what you mean. consider rewording", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r470740733", "createdAt": "2020-08-14T16:52:37Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -254,7 +254,7 @@ public String getDefaultLanguage() {\n      *\n      * For a list of supported entity types, check: <a href=\"https://aka.ms/taner\">this</a>.\n      * For a list of enabled languages, check: <a href=\"https://aka.ms/talangs\">this</a>.\n-     * This method will use the default language that sets up in\n+     * This method will use the default language that is set using", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17092a5ab3adccc1d8cbb0a96c74bfa0a436893b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NzI2MjM3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-467726237", "createdAt": "2020-08-14T16:53:09Z", "commit": {"oid": "17092a5ab3adccc1d8cbb0a96c74bfa0a436893b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo1MzowOVrOHA7v1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo1MzowOVrOHA7v1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0MDk0OA==", "bodyText": "was this true before and we just forgot to add it in the docstring?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r470740948", "createdAt": "2020-08-14T16:53:09Z", "author": {"login": "maririos"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/AnalyzeSentimentResult.java", "diffHunk": "@@ -30,6 +30,9 @@ public AnalyzeSentimentResult(String id, TextDocumentStatistics textDocumentStat\n      * Get the document sentiment.\n      *\n      * @return The document sentiment.\n+     *\n+     * @throws TextAnalyticsException if result has {@code isError} equals to true and when a non-error property", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17092a5ab3adccc1d8cbb0a96c74bfa0a436893b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NzU3NzI0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-467757724", "createdAt": "2020-08-14T17:44:40Z", "commit": {"oid": "17092a5ab3adccc1d8cbb0a96c74bfa0a436893b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff4f2ad2bb7cda67c903ebdd9c01a2338282c6cb", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ff4f2ad2bb7cda67c903ebdd9c01a2338282c6cb", "committedDate": "2020-08-19T14:56:20Z", "message": "rewording"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNTcyOTEw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-470572910", "createdAt": "2020-08-19T15:26:40Z", "commit": {"oid": "ff4f2ad2bb7cda67c903ebdd9c01a2338282c6cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNToyNjo0MFrOHDMt4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNToyNjo0MFrOHDMt4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzExNjEzMQ==", "bodyText": "can't pass ci because of broken link, so will add them back after the sample merged.\nhttps://dev.azure.com/azure-sdk/public/_build/results?buildId=501818&view=logs&j=36df4387-3551-57fa-098c-b43a23930261&t=3851d55a-4253-57f5-016e-927e8de9d21b", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r473116131", "createdAt": "2020-08-19T15:26:40Z", "author": {"login": "mssfang"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/README.md", "diffHunk": "@@ -82,6 +88,9 @@ This project welcomes contributions and suggestions. Find [more contributing][SD\n [async_sample_entities]: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/RecognizeEntitiesAsync.java\n [async_sample_entities_batch]: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizeEntitiesBatchDocumentsAsync.java\n [async_sample_entities_batch_convenience]: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizeEntitiesBatchStringDocumentsAsync.java\n+[async_sample_pii_entities]: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/RecognizePiiEntitiesAsync.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff4f2ad2bb7cda67c903ebdd9c01a2338282c6cb"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc113911021dca590e350350d7ee1ec9cf16ce30", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cc113911021dca590e350350d7ee1ec9cf16ce30", "committedDate": "2020-08-19T15:38:25Z", "message": "remove uneixit link and will add them back in another pR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjU2OTE3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-470656917", "createdAt": "2020-08-19T16:52:31Z", "commit": {"oid": "cc113911021dca590e350350d7ee1ec9cf16ce30"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "008d594bb630e92699be72cc07b3564db8382424", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/008d594bb630e92699be72cc07b3564db8382424", "committedDate": "2020-08-19T16:53:48Z", "message": "one more broken link in README"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bda0f947808708dcbde090336a89e3b9e66fbd60", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bda0f947808708dcbde090336a89e3b9e66fbd60", "committedDate": "2020-08-19T17:12:00Z", "message": "rerun npx to update the reamde sample"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMjU0MDQz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-471254043", "createdAt": "2020-08-20T05:19:36Z", "commit": {"oid": "bda0f947808708dcbde090336a89e3b9e66fbd60"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNToxOTozNlrOHDqTdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTozNzo0MVrOHDq--A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwMDg4NA==", "bodyText": "Shouldn't this be\n### New Features?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r473600884", "createdAt": "2020-08-20T05:19:36Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/CHANGELOG.md", "diffHunk": "@@ -4,6 +4,10 @@\n   - `length` is the number of characters in the text of these models\n   - `offset` is the offset of the text from the start of the document\n   \n+**New features**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda0f947808708dcbde090336a89e3b9e66fbd60"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwMzYzOA==", "bodyText": "hmm wondering if we know we already know its going to error, should we consider validating this at client side?\ncc: @iscai-msft @maririos", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r473603638", "createdAt": "2020-08-20T05:24:15Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -364,7 +369,132 @@ public String getDefaultLanguage() {\n         return recognizeEntityAsyncClient.recognizeEntitiesBatch(documents, options);\n     }\n \n-    // Linked Entity\n+    // PII Entity\n+\n+    /**\n+     * Returns a list of Personally Identifiable Information(PII) entities in the provided document.\n+     *\n+     * For a list of supported entity types, check: <a href=\"https://aka.ms/tanerpii\">this</a>.\n+     * For a list of enabled languages, check: <a href=\"https://aka.ms/talangs\">this</a>. This method will use the\n+     * default language that sets up in {@link TextAnalyticsClientBuilder#defaultLanguage(String)}. If none is\n+     * specified, service will use 'en' as the language.\n+     *\n+     * <p><strong>Code sample</strong></p>\n+     * <p>Recognize the PII entities details in a document.\n+     * Subscribes to the call asynchronously and prints out the recognized entity details when a response is\n+     * received.</p>\n+     *\n+     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntities#string}\n+     *\n+     * @param document The document to recognize PII entities details for.\n+     * For text length limits, maximum batch size, and supported text encoding, see\n+     * <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>.\n+     *\n+     * @return A {@link Mono} contains a {@link PiiEntityCollection recognized PII entities collection}.\n+     *\n+     * @throws NullPointerException if {@code document} is null.\n+     * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<PiiEntityCollection> recognizePiiEntities(String document) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1ODI1OA=="}, "originalCommit": {"oid": "6cf6e707c9d0f5339d289d1f981c166d3233c58e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwNjI0NA==", "bodyText": "This can call the method on L403.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r473606244", "createdAt": "2020-08-20T05:28:14Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClient.java", "diffHunk": "@@ -289,20 +291,133 @@ public RecognizeEntitiesResultCollection recognizeEntitiesBatch(\n         return client.recognizeEntityAsyncClient.recognizeEntitiesBatchWithContext(documents, options, context).block();\n     }\n \n+    // PII Entity\n+    /**\n+     * Returns a list of Personally Identifiable Information(PII) entities in the provided document.\n+     *\n+     * For a list of supported entity types, check: <a href=\"https://aka.ms/tanerpii\">this</a>\n+     * For a list of enabled languages, check: <a href=\"https://aka.ms/talangs\">this</a>. This method will use the\n+     * default language that is set using {@link TextAnalyticsClientBuilder#defaultLanguage(String)}. If none is\n+     * specified, service will use 'en' as the language.\n+     *\n+     * <p><strong>Code Sample</strong></p>\n+     * <p>Recognize the PII entities details in a document.</p>\n+     *\n+     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsClient.recognizePiiEntities#String}\n+     *\n+     * @param document The document to recognize PII entities details for.\n+     * For text length limits, maximum batch size, and supported text encoding, see\n+     * <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>.\n+     *\n+     * @return A {@link PiiEntityCollection recognized PII entities collection}.\n+     *\n+     * @throws NullPointerException if {@code document} is null.\n+     * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public PiiEntityCollection recognizePiiEntities(String document) {\n+        return recognizePiiEntities(document, client.getDefaultLanguage());\n+    }\n+\n+    /**\n+     * Returns a list of Personally Identifiable Information(PII) entities in the provided document\n+     * with provided language code.\n+     *\n+     * For a list of supported entity types, check: <a href=\"https://aka.ms/tanerpii\">this</a>\n+     * For a list of enabled languages, check: <a href=\"https://aka.ms/talangs\">this</a>\n+     *\n+     * <p><strong>Code Sample</strong></p>\n+     * <p>Recognizes the PII entities details in a document with a provided language code.</p>\n+     *\n+     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsClient.recognizePiiEntities#String-String}\n+     *\n+     * @param document The document to recognize PII entities details for.\n+     * For text length limits, maximum batch size, and supported text encoding, see\n+     * <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>.\n+     * @param language The 2 letter ISO 639-1 representation of language. If not set, uses \"en\" for English as default.\n+     *\n+     * @return The {@link PiiEntityCollection recognized PII entities collection}.\n+     *\n+     * @throws NullPointerException if {@code document} is null.\n+     * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public PiiEntityCollection recognizePiiEntities(String document, String language) {\n+        Objects.requireNonNull(document, \"'document' cannot be null.\");\n+        return client.recognizePiiEntities(document, language).block();\n+    }\n+\n+    /**\n+     * Returns a list of Personally Identifiable Information(PII) entities for the provided list of documents with\n+     * provided language code and request options.\n+     *\n+     * <p><strong>Code Sample</strong></p>\n+     * <p>Recognizes the PII entities details in a list of documents with a provided language code\n+     * and request options.</p>\n+     *\n+     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsClient.recognizePiiEntitiesBatch#Iterable-String-TextAnalyticsRequestOptions}\n+     *\n+     * @param documents A list of documents to recognize PII entities for.\n+     * For text length limits, maximum batch size, and supported text encoding, see\n+     * <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>.\n+     * @param language The 2 letter ISO 639-1 representation of language. If not set, uses \"en\" for English as default.\n+     * @param options The {@link TextAnalyticsRequestOptions options} to configure the scoring model for documents\n+     * and show statistics.\n+     *\n+     * @return A {@link RecognizePiiEntitiesResultCollection}.\n+     *\n+     * @throws NullPointerException if {@code documents} is null.\n+     * @throws IllegalArgumentException if {@code documents} is empty.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RecognizePiiEntitiesResultCollection recognizePiiEntitiesBatch(\n+        Iterable<String> documents, String language, TextAnalyticsRequestOptions options) {\n+        return client.recognizePiiEntitiesBatch(documents, language, options).block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda0f947808708dcbde090336a89e3b9e66fbd60"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwNjU5Mw==", "bodyText": "Can this call the method on L373", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r473606593", "createdAt": "2020-08-20T05:28:45Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClient.java", "diffHunk": "@@ -289,20 +291,133 @@ public RecognizeEntitiesResultCollection recognizeEntitiesBatch(\n         return client.recognizeEntityAsyncClient.recognizeEntitiesBatchWithContext(documents, options, context).block();\n     }\n \n+    // PII Entity\n+    /**\n+     * Returns a list of Personally Identifiable Information(PII) entities in the provided document.\n+     *\n+     * For a list of supported entity types, check: <a href=\"https://aka.ms/tanerpii\">this</a>\n+     * For a list of enabled languages, check: <a href=\"https://aka.ms/talangs\">this</a>. This method will use the\n+     * default language that is set using {@link TextAnalyticsClientBuilder#defaultLanguage(String)}. If none is\n+     * specified, service will use 'en' as the language.\n+     *\n+     * <p><strong>Code Sample</strong></p>\n+     * <p>Recognize the PII entities details in a document.</p>\n+     *\n+     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsClient.recognizePiiEntities#String}\n+     *\n+     * @param document The document to recognize PII entities details for.\n+     * For text length limits, maximum batch size, and supported text encoding, see\n+     * <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>.\n+     *\n+     * @return A {@link PiiEntityCollection recognized PII entities collection}.\n+     *\n+     * @throws NullPointerException if {@code document} is null.\n+     * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public PiiEntityCollection recognizePiiEntities(String document) {\n+        return recognizePiiEntities(document, client.getDefaultLanguage());\n+    }\n+\n+    /**\n+     * Returns a list of Personally Identifiable Information(PII) entities in the provided document\n+     * with provided language code.\n+     *\n+     * For a list of supported entity types, check: <a href=\"https://aka.ms/tanerpii\">this</a>\n+     * For a list of enabled languages, check: <a href=\"https://aka.ms/talangs\">this</a>\n+     *\n+     * <p><strong>Code Sample</strong></p>\n+     * <p>Recognizes the PII entities details in a document with a provided language code.</p>\n+     *\n+     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsClient.recognizePiiEntities#String-String}\n+     *\n+     * @param document The document to recognize PII entities details for.\n+     * For text length limits, maximum batch size, and supported text encoding, see\n+     * <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>.\n+     * @param language The 2 letter ISO 639-1 representation of language. If not set, uses \"en\" for English as default.\n+     *\n+     * @return The {@link PiiEntityCollection recognized PII entities collection}.\n+     *\n+     * @throws NullPointerException if {@code document} is null.\n+     * @throws TextAnalyticsException if the response returned with an {@link TextAnalyticsError error}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public PiiEntityCollection recognizePiiEntities(String document, String language) {\n+        Objects.requireNonNull(document, \"'document' cannot be null.\");\n+        return client.recognizePiiEntities(document, language).block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda0f947808708dcbde090336a89e3b9e66fbd60"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxMjAyNA==", "bodyText": "Does this still need to be commented, could you add a corresponding TODO here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#discussion_r473612024", "createdAt": "2020-08-20T05:37:41Z", "author": {"login": "samvaity"}, "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "diffHunk": "@@ -268,6 +296,57 @@ void recognizeEntitiesTooManyDocumentsRunner(\n             Arrays.asList(documentInput, documentInput, documentInput, documentInput, documentInput, documentInput));\n     }\n \n+    // Personally Identifiable Information Entity runner\n+    void recognizePiiSingleDocumentRunner(Consumer<String> testRunner) {\n+        testRunner.accept(PII_ENTITY_INPUTS.get(0));\n+    }\n+\n+    void recognizePiiLanguageHintRunner(BiConsumer<List<String>, String> testRunner) {\n+        testRunner.accept(PII_ENTITY_INPUTS, \"en\");\n+    }\n+\n+    void recognizeBatchPiiEntityDuplicateIdRunner(Consumer<List<TextDocumentInput>> testRunner) {\n+        testRunner.accept(getDuplicateTextDocumentInputs());\n+    }\n+\n+    void recognizePiiEntitiesLanguageHintRunner(BiConsumer<List<String>, String> testRunner) {\n+        testRunner.accept(PII_ENTITY_INPUTS, \"en\");\n+    }\n+\n+    void recognizeBatchPiiEntitySingleErrorRunner(Consumer<List<TextDocumentInput>> testRunner) {\n+        List<TextDocumentInput> inputs = Collections.singletonList(new TextDocumentInput(\"2\", \" \"));\n+        testRunner.accept(inputs);\n+    }\n+\n+    void recognizeBatchPiiEntitiesRunner(Consumer<List<TextDocumentInput>> testRunner) {\n+        testRunner.accept(TestUtils.getTextDocumentInputs(PII_ENTITY_INPUTS));\n+    }\n+\n+    void recognizeBatchPiiEntitiesShowStatsRunner(\n+        BiConsumer<List<TextDocumentInput>, TextAnalyticsRequestOptions> testRunner) {\n+        final List<TextDocumentInput> textDocumentInputs = TestUtils.getTextDocumentInputs(PII_ENTITY_INPUTS);\n+        TextAnalyticsRequestOptions options = new TextAnalyticsRequestOptions().setIncludeStatistics(true);\n+\n+        testRunner.accept(textDocumentInputs, options);\n+    }\n+\n+    void recognizeStringBatchPiiEntitiesShowStatsRunner(\n+        BiConsumer<List<String>, TextAnalyticsRequestOptions> testRunner) {\n+        testRunner.accept(PII_ENTITY_INPUTS, new TextAnalyticsRequestOptions().setIncludeStatistics(true));\n+    }\n+\n+    void recognizePiiEntitiesTooManyDocumentsRunner(Consumer<List<String>> testRunner) {\n+        final String documentInput = PII_ENTITY_INPUTS.get(0);\n+        // max num of document size is 5\n+        testRunner.accept(\n+            Arrays.asList(documentInput, documentInput, documentInput, documentInput, documentInput, documentInput));\n+    }\n+\n+//    void recognizePiiEntitiesWithDomainRunner(BiConsumer<List<String>, TextAnalyticsRequestOptions> testRunner) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda0f947808708dcbde090336a89e3b9e66fbd60"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMjYxNjMy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13687#pullrequestreview-471261632", "createdAt": "2020-08-20T05:42:23Z", "commit": {"oid": "bda0f947808708dcbde090336a89e3b9e66fbd60"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b30ede40f8491617e100a87bb53c547e5593e88", "author": {"user": {"login": "mssfang", "name": "Shawn Fang"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9b30ede40f8491617e100a87bb53c547e5593e88", "committedDate": "2020-08-20T19:04:59Z", "message": "remove unused test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 900, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}