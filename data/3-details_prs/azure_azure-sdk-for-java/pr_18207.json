{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNjk0NjAx", "number": 18207, "title": "Create obo clientRegistration Repo ", "bodyText": "Create 'AADOboClientRegistrationRepository' and add 'AADOboAuthorizationProperties' for package webApi.", "createdAt": "2020-12-17T08:27:59Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207", "merged": true, "mergeCommit": {"oid": "135bb81a789d9503edbbaf7840c98b29a8c72d56"}, "closed": true, "closedAt": "2020-12-27T02:12:50Z", "author": {"login": "wujack778"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdm-xingH2gAyNTQxNjk0NjAxOmQ1NjZjYjc0MGZlYzExNGU0NzBkZDI2OTJhN2YzMDQwZWNkMjhlOGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdplGyhAH2gAyNTQxNjk0NjAxOjU3ZjNmM2NjZTYzNDBhZGRhZmM4YjViYjRmN2RmOTAxMmQyOWIyZTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d566cb740fec114e470dd2692a7f3040ecd28e8a", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d566cb740fec114e470dd2692a7f3040ecd28e8a", "committedDate": "2020-12-17T07:54:35Z", "message": "Create obo clientRegistration Repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43d54a4a587482df96fa8f25fa88615bb2cbf829", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/43d54a4a587482df96fa8f25fa88615bb2cbf829", "committedDate": "2020-12-17T09:10:46Z", "message": "modify spot bugs 'URF_UNREAD_FIELD' for OboCRRepo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MTIzMTY1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#pullrequestreview-555123165", "createdAt": "2020-12-18T02:01:50Z", "commit": {"oid": "43d54a4a587482df96fa8f25fa88615bb2cbf829"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjowMTo1MFrOIIQKNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjoxMTozNFrOIIQV3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUyNDI3Nw==", "bodyText": "web-api-clients", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r545524277", "createdAt": "2020-12-18T02:01:50Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-obo/src/main/resources/application.yaml", "diffHunk": "@@ -7,7 +7,7 @@ azure:\n     client-secret: [resource-server-application-client-secret]\n     tenant-id: [teanant-id-registered-by-application]\n     app-id-uri: [current-expose-application-id-url]\n-    authorization:\n+    webApiClients:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43d54a4a587482df96fa8f25fa88615bb2cbf829"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUyNDQ2OA==", "bodyText": "Not update exclude item if possible.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r545524468", "createdAt": "2020-12-18T02:02:26Z", "author": {"login": "chenrujun"}, "path": "eng/code-quality-reports/src/main/resources/spotbugs/spotbugs-exclude.xml", "diffHunk": "@@ -2313,6 +2313,11 @@\n     <Bug pattern=\"NP_NULL_ON_SOME_PATH\"/>\n   </Match>\n \n+  <Match>\n+    <Class name=\"com.azure.spring.aad.webapi.OboClientRegistrationRepository\" />\n+    <Bug pattern=\"URF_UNREAD_FIELD\"/>\n+  </Match>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43d54a4a587482df96fa8f25fa88615bb2cbf829"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUyNDYyNg==", "bodyText": "WebAppClientsProperties", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r545524626", "createdAt": "2020-12-18T02:03:04Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java", "diffHunk": "@@ -26,31 +24,30 @@\n @Configuration(proxyBeanMethods = false)\n @ConditionalOnResource(resources = \"classpath:aad.enable.config\")\n @EnableConfigurationProperties({ AADAuthenticationProperties.class })\n-@ConditionalOnClass({BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class})\n+@ConditionalOnClass({ BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class })\n public class AzureActiveDirectoryResourceServerClientConfiguration {\n \n     @Autowired\n-    private AADAuthenticationProperties aadAuthenticationProperties;\n+    private AADAuthenticationProperties properties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43d54a4a587482df96fa8f25fa88615bb2cbf829"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUyNDkwNQ==", "bodyText": "Use name like WebApiClientRegistrationRepository, WebAppClientRegistrationRepository", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r545524905", "createdAt": "2020-12-18T02:03:54Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/OboClientRegistrationRepository.java", "diffHunk": "@@ -0,0 +1,48 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * ClientRegistration Repository for obo flow\n+ */\n+public class OboClientRegistrationRepository implements ClientRegistrationRepository, Iterable<ClientRegistration> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43d54a4a587482df96fa8f25fa88615bb2cbf829"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUyNTQ1MA==", "bodyText": "Use name like AADWebAppOAuth2AuthorizedClientRepository, AADWebApiOAuth2AuthorizedClientRepository", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r545525450", "createdAt": "2020-12-18T02:05:35Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java", "diffHunk": "@@ -26,31 +24,30 @@\n @Configuration(proxyBeanMethods = false)\n @ConditionalOnResource(resources = \"classpath:aad.enable.config\")\n @EnableConfigurationProperties({ AADAuthenticationProperties.class })\n-@ConditionalOnClass({BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class})\n+@ConditionalOnClass({ BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class })\n public class AzureActiveDirectoryResourceServerClientConfiguration {\n \n     @Autowired\n-    private AADAuthenticationProperties aadAuthenticationProperties;\n+    private AADAuthenticationProperties properties;\n \n     @Bean\n-    @ConditionalOnMissingBean({ ClientRegistrationRepository.class, AzureClientRegistrationRepository.class })\n-    public AzureClientRegistrationRepository azureClientRegistrationRepository() {\n-        ClientRegistrationInitialization clientRegistrationInitialization =\n-            new ClientRegistrationInitialization(aadAuthenticationProperties);\n-        return new AzureClientRegistrationRepository(\n-            clientRegistrationInitialization.createDefaultClient(),\n-            clientRegistrationInitialization.createAuthzClients(),\n-            aadAuthenticationProperties);\n+    @ConditionalOnMissingBean({ ClientRegistrationRepository.class, OboClientRegistrationRepository.class })\n+    public OboClientRegistrationRepository oboClientRegistrationRepository() {\n+\n+        ClientRegistrationInitialization clientInitialization = new ClientRegistrationInitialization(properties);\n+\n+        return new OboClientRegistrationRepository(clientInitialization.createAuthzClients(), properties);\n     }\n \n     /**\n-     * Use AzureClientRegistrationRepository to create AADOAuth2OboAuthorizedClientRepository\n+     * Use OboClientRegistrationRepository to create AADOAuth2OboAuthorizedClientRepository\n+     *\n      * @param repo client registration\n      * @return AADOAuth2OboAuthorizedClientRepository Bean\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(AzureClientRegistrationRepository repo) {\n+    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(OboClientRegistrationRepository repo) {\n         return new AADOAuth2OboAuthorizedClientRepository(repo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43d54a4a587482df96fa8f25fa88615bb2cbf829"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUyNzI2MQ==", "bodyText": "Not necessary to create a new class.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r545527261", "createdAt": "2020-12-18T02:11:34Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/ClientRegistrationInitialization.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Client registration initialization based on AAD properties. Web application and resource server will quote.\n+ */\n+public class ClientRegistrationInitialization {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43d54a4a587482df96fa8f25fa88615bb2cbf829"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca54c13b55361f4c7116665a9c85b5793eda9921", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/ca54c13b55361f4c7116665a9c85b5793eda9921", "committedDate": "2020-12-18T08:04:10Z", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into create-obo-clientRegistration-repo\n\n# Conflicts:\n#\tsdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n#\tsdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADWebApiConfiguration.java\n#\tsdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepositoryTest.java\n#\tsdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADWebApiConfigurationTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b2c8a31ce8520871b72a0f28d70935224146f3a", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2b2c8a31ce8520871b72a0f28d70935224146f3a", "committedDate": "2020-12-18T09:28:10Z", "message": "Refactor AADOboClientRegRepo and modify ClassName for Package WebApi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36537f5fe89c296cbeb5bfa8d7e0c3cf065f719f", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/36537f5fe89c296cbeb5bfa8d7e0c3cf065f719f", "committedDate": "2020-12-18T09:31:09Z", "message": "Delete obo above in spotbugs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTAyMjY2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#pullrequestreview-556102266", "createdAt": "2020-12-21T02:48:56Z", "commit": {"oid": "36537f5fe89c296cbeb5bfa8d7e0c3cf065f719f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo0ODo1NlrOIJKtUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo1MjoxNFrOIJKv8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MzUzNw==", "bodyText": "Let's use authorization instead, we won't use two sets of properties for webapi and webapp seperately.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r546483537", "createdAt": "2020-12-21T02:48:56Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-resource-server-obo/README.md", "diffHunk": "@@ -97,10 +97,10 @@ azure:\n     client-secret: [resource-server-application-client-secret]\n     tenant-id: [tenant-id-registered-by-application]\n     app-id-uri: api://sample-client-id\n-    authorization:\n+    web-api-clients:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36537f5fe89c296cbeb5bfa8d7e0c3cf065f719f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MzY2Mw==", "bodyText": "No need for this properties class anymore.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r546483663", "createdAt": "2020-12-21T02:49:33Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOboAuthorizationProperties.java", "diffHunk": "@@ -0,0 +1,22 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import java.util.List;\n+\n+/**\n+ * Authorization Properties for an Web api.\n+ */\n+public class AADOboAuthorizationProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36537f5fe89c296cbeb5bfa8d7e0c3cf065f719f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4Mzc3OA==", "bodyText": "Change the class name to AADResourceServerOboConfiguration", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r546483778", "createdAt": "2020-12-21T02:50:09Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * <p>\n+ * The configuration will not be activated if no {@link OAuth2LoginAuthenticationFilter} class provided.\n+ * </p>\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnResource(resources = \"classpath:aad.enable.config\")\n+@EnableConfigurationProperties({ AADAuthenticationProperties.class })\n+@ConditionalOnClass({ BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class })\n+public class AzureActiveDirectoryResourceServerClientConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36537f5fe89c296cbeb5bfa8d7e0c3cf065f719f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MzkwMQ==", "bodyText": "use meaningful name instead of authz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r546483901", "createdAt": "2020-12-21T02:50:48Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * <p>\n+ * The configuration will not be activated if no {@link OAuth2LoginAuthenticationFilter} class provided.\n+ * </p>\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnResource(resources = \"classpath:aad.enable.config\")\n+@EnableConfigurationProperties({ AADAuthenticationProperties.class })\n+@ConditionalOnClass({ BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class })\n+public class AzureActiveDirectoryResourceServerClientConfiguration {\n+\n+    @Autowired\n+    private AADAuthenticationProperties properties;\n+\n+    @Bean\n+    @ConditionalOnMissingBean({ ClientRegistrationRepository.class, AADOboClientRegistrationRepository.class })\n+    public AADOboClientRegistrationRepository oboClientRegistrationRepository() {\n+        return new AADOboClientRegistrationRepository(createAuthzClients());\n+    }\n+\n+    /**\n+     * Use AADOboClientRegistrationRepository to create AADOAuth2OboAuthorizedClientRepository\n+     * @param repo client registration\n+     * @return AADOAuth2OboAuthorizedClientRepository Bean\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(AADOboClientRegistrationRepository repo) {\n+        return new AADOAuth2OboAuthorizedClientRepository(repo);\n+    }\n+\n+    public List<ClientRegistration> createAuthzClients() {\n+        List<ClientRegistration> result = new ArrayList<>();\n+        for (String name : properties.getWebApiClients().keySet()) {\n+            AADOboAuthorizationProperties authz = properties.getWebApiClients().get(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36537f5fe89c296cbeb5bfa8d7e0c3cf065f719f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NDA1Nw==", "bodyText": "Seems like we don't need this function, we could inline these logic.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r546484057", "createdAt": "2020-12-21T02:51:28Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * <p>\n+ * The configuration will not be activated if no {@link OAuth2LoginAuthenticationFilter} class provided.\n+ * </p>\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnResource(resources = \"classpath:aad.enable.config\")\n+@EnableConfigurationProperties({ AADAuthenticationProperties.class })\n+@ConditionalOnClass({ BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class })\n+public class AzureActiveDirectoryResourceServerClientConfiguration {\n+\n+    @Autowired\n+    private AADAuthenticationProperties properties;\n+\n+    @Bean\n+    @ConditionalOnMissingBean({ ClientRegistrationRepository.class, AADOboClientRegistrationRepository.class })\n+    public AADOboClientRegistrationRepository oboClientRegistrationRepository() {\n+        return new AADOboClientRegistrationRepository(createAuthzClients());\n+    }\n+\n+    /**\n+     * Use AADOboClientRegistrationRepository to create AADOAuth2OboAuthorizedClientRepository\n+     * @param repo client registration\n+     * @return AADOAuth2OboAuthorizedClientRepository Bean\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(AADOboClientRegistrationRepository repo) {\n+        return new AADOAuth2OboAuthorizedClientRepository(repo);\n+    }\n+\n+    public List<ClientRegistration> createAuthzClients() {\n+        List<ClientRegistration> result = new ArrayList<>();\n+        for (String name : properties.getWebApiClients().keySet()) {\n+            AADOboAuthorizationProperties authz = properties.getWebApiClients().get(name);\n+            result.add(createClientBuilder(name, authz));\n+        }\n+        return result;\n+    }\n+\n+    private ClientRegistration createClientBuilder(String id, AADOboAuthorizationProperties authz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36537f5fe89c296cbeb5bfa8d7e0c3cf065f719f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NDEzMg==", "bodyText": "No need for this property field.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r546484132", "createdAt": "2020-12-21T02:51:52Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AADAuthenticationProperties.java", "diffHunk": "@@ -104,6 +105,8 @@\n \n     private Map<String, AuthorizationProperties> authorization = new HashMap<>();\n \n+    private Map<String, AADOboAuthorizationProperties> webApiClients  = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36537f5fe89c296cbeb5bfa8d7e0c3cf065f719f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NDIxMA==", "bodyText": "Please also change this class to AAD prefiex", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r546484210", "createdAt": "2020-12-21T02:52:14Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/resources/META-INF/spring.factories", "diffHunk": "@@ -3,7 +3,7 @@ org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n com.azure.spring.autoconfigure.aad.AADAuthenticationFilterAutoConfiguration,\\\n com.azure.spring.aad.webapp.AADWebAppConfiguration, \\\n com.azure.spring.aad.webapi.AzureActiveDirectoryResourceServerConfiguration, \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36537f5fe89c296cbeb5bfa8d7e0c3cf065f719f"}, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d915c43acd60021d00408635f9eb708627e11ae", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/3d915c43acd60021d00408635f9eb708627e11ae", "committedDate": "2020-12-21T04:31:14Z", "message": "Rename some details for package 'webapi' and refactor 'web-api-clients'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49b3026f73d0e791184df6167c0a4ff1ac0d2d3d", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/49b3026f73d0e791184df6167c0a4ff1ac0d2d3d", "committedDate": "2020-12-21T04:53:43Z", "message": " inline createClientBuilder's logic to createOboClients"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTQyNjQy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#pullrequestreview-556142642", "createdAt": "2020-12-21T05:49:15Z", "commit": {"oid": "49b3026f73d0e791184df6167c0a4ff1ac0d2d3d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNTo0OToxNVrOIJM-fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNTo0OToxNVrOIJM-fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyMDcwMw==", "bodyText": "This is not correct?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r546520703", "createdAt": "2020-12-21T05:49:15Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepositoryTest.java", "diffHunk": "@@ -56,12 +54,12 @@ public void setup() {\n             AAD_PROPERTY_PREFIX + \"tenant-id = fake-tenant-id\",\n             AAD_PROPERTY_PREFIX + \"client-id = fake-client-id\",\n             AAD_PROPERTY_PREFIX + \"client-secret = fake-client-secret\",\n-            AAD_PROPERTY_PREFIX + \"authorization.fake-graph.scopes = https://graph.microsoft.com/.default\"\n+            AAD_PROPERTY_PREFIX + \"webApiClients.fake-graph.scopes = https://graph.microsoft.com/.default\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49b3026f73d0e791184df6167c0a4ff1ac0d2d3d"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55ed418791cb3b36d093ad682260f1cf76398dd9", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/55ed418791cb3b36d093ad682260f1cf76398dd9", "committedDate": "2020-12-21T05:53:21Z", "message": "Modify some detail in obo Repo Ut"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da2871fd226cced17f36b12900e5be04b0a21383", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/da2871fd226cced17f36b12900e5be04b0a21383", "committedDate": "2020-12-21T08:12:28Z", "message": "Modify some detail"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71160f7ca2f514ad2c0db330d20986dff7e94911", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/71160f7ca2f514ad2c0db330d20986dff7e94911", "committedDate": "2020-12-21T09:25:09Z", "message": "Add 'testPropertyNotCorrect'"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NzU3OTE4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#pullrequestreview-556757918", "createdAt": "2020-12-22T01:13:51Z", "commit": {"oid": "71160f7ca2f514ad2c0db330d20986dff7e94911"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODIyODk4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#pullrequestreview-556822898", "createdAt": "2020-12-22T05:12:23Z", "commit": {"oid": "71160f7ca2f514ad2c0db330d20986dff7e94911"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNToxMjoyNFrOIJumqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNToxMjoyNFrOIJumqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3MTY1Nw==", "bodyText": "Can we use InMemoryClientRegistrationRepository instead of create AADOboClientRegistrationRepository?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547071657", "createdAt": "2020-12-22T05:12:24Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOboClientRegistrationRepository.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * ClientRegistration Repository for obo flow\n+ */\n+public class AADOboClientRegistrationRepository implements ClientRegistrationRepository, Iterable<ClientRegistration> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71160f7ca2f514ad2c0db330d20986dff7e94911"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c2582dbac8498b1c0e25b306be2a85e57f7e4f0", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/6c2582dbac8498b1c0e25b306be2a85e57f7e4f0", "committedDate": "2020-12-22T05:56:46Z", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into create-obo-clientRegistration-repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97248748cc4bbd7e0447e249ec5c08f8f50420e4", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/97248748cc4bbd7e0447e249ec5c08f8f50420e4", "committedDate": "2020-12-22T07:52:26Z", "message": " Replace AADOboClientRegistrationRepository with  InMemoryClientRegistrationRepository"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODg2NTMy", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#pullrequestreview-556886532", "createdAt": "2020-12-22T08:02:10Z", "commit": {"oid": "97248748cc4bbd7e0447e249ec5c08f8f50420e4"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e64003c0b23533248807104caea8d4b7f5e4b001", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e64003c0b23533248807104caea8d4b7f5e4b001", "committedDate": "2020-12-22T08:25:36Z", "message": "Modify details for checkStyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDQ1NTk4", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#pullrequestreview-557445598", "createdAt": "2020-12-23T00:46:56Z", "commit": {"oid": "e64003c0b23533248807104caea8d4b7f5e4b001"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMDo0Njo1NlrOIKNZFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMTowOTozMlrOIKN_VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3NjA4NQ==", "bodyText": "Can we assert the value instead of assert size?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547576085", "createdAt": "2020-12-23T00:46:56Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import org.junit.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class AADResourceServerOboConfigurationTest {\n+\n+    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+        .withPropertyValues(\n+            AAD_PROPERTY_PREFIX + \"tenant-id=fake-tenant-id\",\n+            AAD_PROPERTY_PREFIX + \"client-id=fake-client-id\",\n+            AAD_PROPERTY_PREFIX + \"client-secret=fake-client-secret\");\n+\n+    @Test\n+    public void testNotExistBearerTokenAuthenticationToken() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testNotExistOAuth2LoginAuthenticationFilter() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(OAuth2LoginAuthenticationFilter.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testOnlyGraphClient() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withPropertyValues(AAD_PROPERTY_PREFIX + \"authorization.graph.scopes=User.read\")\n+            .run(context -> {\n+                final InMemoryClientRegistrationRepository oboRepo = context.getBean(\n+                    InMemoryClientRegistrationRepository.class);\n+                final OAuth2AuthorizedClientRepository aadOboRepo = context.getBean(\n+                    AADOAuth2OboAuthorizedClientRepository.class);\n+\n+                ClientRegistration graph = oboRepo.findByRegistrationId(\"graph\");\n+                Set<String> graphScopes = graph.getScopes();\n+\n+                assertThat(aadOboRepo).isNotNull();\n+                assertThat(oboRepo).isExactlyInstanceOf(InMemoryClientRegistrationRepository.class);\n+                assertThat(graph).isNotNull();\n+                assertThat(graphScopes).hasSize(1);\n+            });\n+    }\n+\n+    @Test\n+    public void testExistCustomAndGraphClient() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withPropertyValues(AAD_PROPERTY_PREFIX + \"authorization.graph.scopes=User.read\")\n+            .withPropertyValues(AAD_PROPERTY_PREFIX + \"authorization.custom.scopes=User.read\")\n+            .run(context -> {\n+                final InMemoryClientRegistrationRepository oboRepo = context.getBean(\n+                    InMemoryClientRegistrationRepository.class);\n+                final OAuth2AuthorizedClientRepository aadOboRepo = context.getBean(\n+                    AADOAuth2OboAuthorizedClientRepository.class);\n+\n+                ClientRegistration graph = oboRepo.findByRegistrationId(\"graph\");\n+                ClientRegistration custom = oboRepo.findByRegistrationId(\"custom\");\n+                Set<String> graphScopes = graph.getScopes();\n+                Set<String> customScopes = custom.getScopes();\n+\n+                assertThat(aadOboRepo).isNotNull();\n+                assertThat(oboRepo).isExactlyInstanceOf(InMemoryClientRegistrationRepository.class);\n+                assertThat(graph).isNotNull();\n+                assertThat(customScopes).isNotNull();\n+                assertThat(graphScopes).hasSize(1);\n+                assertThat(customScopes).hasSize(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64003c0b23533248807104caea8d4b7f5e4b001"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3NjQ5MA==", "bodyText": "I think AAD_PROPERTY_PREFIX is not necessary.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547576490", "createdAt": "2020-12-23T00:48:26Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import org.junit.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class AADResourceServerOboConfigurationTest {\n+\n+    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64003c0b23533248807104caea8d4b7f5e4b001"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3Njk3NQ==", "bodyText": "After discuss with jialin, we think shorter name will make code easier to read. So I suggest to rename inMemoryClientRegistrationRepository to repository", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547576975", "createdAt": "2020-12-23T00:50:35Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -36,11 +37,11 @@\n \n     private static final String OBO_AUTHORIZEDCLIENT_PREFIX = \"obo_authorizedclient_\";\n \n-    private final AADWebApiClientRegistrationRepository aadWebApiClientRegistrationRepository;\n+    private final InMemoryClientRegistrationRepository inMemoryClientRegistrationRepository;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64003c0b23533248807104caea8d4b7f5e4b001"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3NzMxOQ==", "bodyText": "Reformat this code. For example\npublic OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(\n    InMemoryClientRegistrationRepository repo) {", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547577319", "createdAt": "2020-12-23T00:52:07Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AuthorizationProperties;\n+import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * <p>\n+ * The configuration will not be activated if no {@link OAuth2LoginAuthenticationFilter} class provided.\n+ * </p>\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnResource(resources = \"classpath:aad.enable.config\")\n+@EnableConfigurationProperties({ AADAuthenticationProperties.class })\n+@ConditionalOnClass({ BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class })\n+public class AADResourceServerOboConfiguration {\n+\n+    @Autowired\n+    private AADAuthenticationProperties properties;\n+\n+    @Bean\n+    @ConditionalOnMissingBean({ ClientRegistrationRepository.class, InMemoryClientRegistrationRepository.class })\n+    public ClientRegistrationRepository oboClientRegistrationRepository() {\n+        return new InMemoryClientRegistrationRepository(createOboClients());\n+    }\n+\n+    /**\n+     * Use InMemoryClientRegistrationRepository to create AADOAuth2OboAuthorizedClientRepository\n+     *\n+     * @param repo client registration\n+     * @return AADOAuth2OboAuthorizedClientRepository Bean\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(InMemoryClientRegistrationRepository\n+                                                                                 repo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64003c0b23533248807104caea8d4b7f5e4b001"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3ODcxNA==", "bodyText": "Suggestions:\n\nReuse this part of code.\nAdd tenantId in AuthorizationServerEndpoints, just like baseUri.\nConsider whether we need endSessionEndpoint for resource server.\n\nIt's OK to to these in another PR.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547578714", "createdAt": "2020-12-23T00:57:04Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AuthorizationProperties;\n+import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * <p>\n+ * The configuration will not be activated if no {@link OAuth2LoginAuthenticationFilter} class provided.\n+ * </p>\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnResource(resources = \"classpath:aad.enable.config\")\n+@EnableConfigurationProperties({ AADAuthenticationProperties.class })\n+@ConditionalOnClass({ BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class })\n+public class AADResourceServerOboConfiguration {\n+\n+    @Autowired\n+    private AADAuthenticationProperties properties;\n+\n+    @Bean\n+    @ConditionalOnMissingBean({ ClientRegistrationRepository.class, InMemoryClientRegistrationRepository.class })\n+    public ClientRegistrationRepository oboClientRegistrationRepository() {\n+        return new InMemoryClientRegistrationRepository(createOboClients());\n+    }\n+\n+    /**\n+     * Use InMemoryClientRegistrationRepository to create AADOAuth2OboAuthorizedClientRepository\n+     *\n+     * @param repo client registration\n+     * @return AADOAuth2OboAuthorizedClientRepository Bean\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(InMemoryClientRegistrationRepository\n+                                                                                 repo) {\n+        return new AADOAuth2OboAuthorizedClientRepository(repo);\n+    }\n+\n+    public List<ClientRegistration> createOboClients() {\n+        List<ClientRegistration> result = new ArrayList<>();\n+        for (String name : properties.getAuthorization().keySet()) {\n+            AuthorizationProperties authorizationProperties = properties.getAuthorization().get(name);\n+            ClientRegistration.Builder builder = createClientBuilder(name);\n+            builder.scope(authorizationProperties.getScopes());\n+            result.add(builder.build());\n+        }\n+        return result;\n+    }\n+\n+    private ClientRegistration.Builder createClientBuilder(String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64003c0b23533248807104caea8d4b7f5e4b001"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3ODk4Mg==", "bodyText": "Suggestion: sort lines by alphabet order.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547578982", "createdAt": "2020-12-23T00:58:11Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/main/resources/META-INF/spring.factories", "diffHunk": "@@ -2,8 +2,8 @@ org.springframework.boot.env.EnvironmentPostProcessor=com.azure.spring.cloudfoun\n org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n com.azure.spring.autoconfigure.aad.AADAuthenticationFilterAutoConfiguration,\\\n com.azure.spring.aad.webapp.AADWebAppConfiguration, \\\n-com.azure.spring.aad.webapi.AzureActiveDirectoryResourceServerConfiguration, \\\n-com.azure.spring.aad.webapi.AADWebApiConfiguration,\\\n+com.azure.spring.aad.webapi.AADResourceServerConfiguration, \\\n+com.azure.spring.aad.webapi.AADResourceServerOboConfiguration,\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64003c0b23533248807104caea8d4b7f5e4b001"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3OTExMg==", "bodyText": "Rename aadJwtBearerTokenAuthenticationConverter to converter.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547579112", "createdAt": "2020-12-23T00:58:43Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java", "diffHunk": "@@ -37,11 +37,11 @@ public void init() {\n \n     @Test\n     public void testCreateUserPrincipal() {\n-        AzureJwtBearerTokenAuthenticationConverter azureJwtBearerTokenAuthenticationConverter\n-            = new AzureJwtBearerTokenAuthenticationConverter();\n-        AbstractAuthenticationToken authenticationToken = azureJwtBearerTokenAuthenticationConverter.convert(jwt);\n-        assertThat(authenticationToken.getPrincipal()).isExactlyInstanceOf(AzureOAuth2AuthenticatedPrincipal.class);\n-        AzureOAuth2AuthenticatedPrincipal principal = (AzureOAuth2AuthenticatedPrincipal) authenticationToken\n+        AADJwtBearerTokenAuthenticationConverter aadJwtBearerTokenAuthenticationConverter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64003c0b23533248807104caea8d4b7f5e4b001"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3OTE2Nw==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547579167", "createdAt": "2020-12-23T00:58:52Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java", "diffHunk": "@@ -50,11 +50,11 @@ public void testCreateUserPrincipal() {\n \n     @Test\n     public void testExtractDefaultScopeAuthorities() {\n-        AzureJwtBearerTokenAuthenticationConverter azureJwtBearerTokenAuthenticationConverter\n-            = new AzureJwtBearerTokenAuthenticationConverter();\n-        AbstractAuthenticationToken authenticationToken = azureJwtBearerTokenAuthenticationConverter.convert(jwt);\n-        assertThat(authenticationToken.getPrincipal()).isExactlyInstanceOf(AzureOAuth2AuthenticatedPrincipal.class);\n-        AzureOAuth2AuthenticatedPrincipal principal = (AzureOAuth2AuthenticatedPrincipal) authenticationToken\n+        AADJwtBearerTokenAuthenticationConverter aadJwtBearerTokenAuthenticationConverter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64003c0b23533248807104caea8d4b7f5e4b001"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4Mzc1MQ==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547583751", "createdAt": "2020-12-23T01:05:12Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java", "diffHunk": "@@ -63,11 +63,11 @@ public void testExtractDefaultScopeAuthorities() {\n     @Test\n     public void testExtractCustomScopeAuthorities() {\n         when(jwt.containsClaim(\"roles\")).thenReturn(true);\n-        AzureJwtBearerTokenAuthenticationConverter azureJwtBearerTokenAuthenticationConverter\n-            = new AzureJwtBearerTokenAuthenticationConverter(\"roles\", \"ROLE_\");\n-        AbstractAuthenticationToken authenticationToken = azureJwtBearerTokenAuthenticationConverter.convert(jwt);\n-        assertThat(authenticationToken.getPrincipal()).isExactlyInstanceOf(AzureOAuth2AuthenticatedPrincipal.class);\n-        AzureOAuth2AuthenticatedPrincipal principal = (AzureOAuth2AuthenticatedPrincipal) authenticationToken\n+        AADJwtBearerTokenAuthenticationConverter aadJwtBearerTokenAuthenticationConverter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64003c0b23533248807104caea8d4b7f5e4b001"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4NDgyOA==", "bodyText": "Same here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547584828", "createdAt": "2020-12-23T01:06:30Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import org.junit.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class AADResourceServerOboConfigurationTest {\n+\n+    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+        .withPropertyValues(\n+            AAD_PROPERTY_PREFIX + \"tenant-id=fake-tenant-id\",\n+            AAD_PROPERTY_PREFIX + \"client-id=fake-client-id\",\n+            AAD_PROPERTY_PREFIX + \"client-secret=fake-client-secret\");\n+\n+    @Test\n+    public void testNotExistBearerTokenAuthenticationToken() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testNotExistOAuth2LoginAuthenticationFilter() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(OAuth2LoginAuthenticationFilter.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testOnlyGraphClient() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withPropertyValues(AAD_PROPERTY_PREFIX + \"authorization.graph.scopes=User.read\")\n+            .run(context -> {\n+                final InMemoryClientRegistrationRepository oboRepo = context.getBean(\n+                    InMemoryClientRegistrationRepository.class);\n+                final OAuth2AuthorizedClientRepository aadOboRepo = context.getBean(\n+                    AADOAuth2OboAuthorizedClientRepository.class);\n+\n+                ClientRegistration graph = oboRepo.findByRegistrationId(\"graph\");\n+                Set<String> graphScopes = graph.getScopes();\n+\n+                assertThat(aadOboRepo).isNotNull();\n+                assertThat(oboRepo).isExactlyInstanceOf(InMemoryClientRegistrationRepository.class);\n+                assertThat(graph).isNotNull();\n+                assertThat(graphScopes).hasSize(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64003c0b23533248807104caea8d4b7f5e4b001"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4NTg3Ng==", "bodyText": "User.read -> User.Read. R should be upper case.\nscope value should have prefix. i.e. it should be http://xxx/User.Read\nIt's better use more than one scope to test. Like xxx.scopes=xxx/User.Read, xxx/User.Write.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547585876", "createdAt": "2020-12-23T01:09:32Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import org.junit.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class AADResourceServerOboConfigurationTest {\n+\n+    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+        .withPropertyValues(\n+            AAD_PROPERTY_PREFIX + \"tenant-id=fake-tenant-id\",\n+            AAD_PROPERTY_PREFIX + \"client-id=fake-client-id\",\n+            AAD_PROPERTY_PREFIX + \"client-secret=fake-client-secret\");\n+\n+    @Test\n+    public void testNotExistBearerTokenAuthenticationToken() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testNotExistOAuth2LoginAuthenticationFilter() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(OAuth2LoginAuthenticationFilter.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testOnlyGraphClient() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withPropertyValues(AAD_PROPERTY_PREFIX + \"authorization.graph.scopes=User.read\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64003c0b23533248807104caea8d4b7f5e4b001"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd4951e7dcc0937cd9c65c6bb6258787bb68c7d8", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/bd4951e7dcc0937cd9c65c6bb6258787bb68c7d8", "committedDate": "2020-12-23T02:37:02Z", "message": "Modify obo uts and rename some parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d80a215723e375b9e32c1af46eca06fd9e52f3aa", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d80a215723e375b9e32c1af46eca06fd9e52f3aa", "committedDate": "2020-12-24T04:40:45Z", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into create-obo-clientRegistration-repo\n\n# Conflicts:\n#\tsdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-spring-security-resource-server/README.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4NzI1NzQw", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#pullrequestreview-558725740", "createdAt": "2020-12-25T00:06:42Z", "commit": {"oid": "d80a215723e375b9e32c1af46eca06fd9e52f3aa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwMDowNjo0MlrOILWBRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwMDowNjo0MlrOILWBRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc2NjAyMg==", "bodyText": "@saragluna,\n\nBut how do we achieve that in the unit test?\n\nWe can do like this:\nassertThat(result, Matchers.arrayContaining(expected));\n\nRefs: https://stackoverflow.com/questions/54439629/hamcrest-matcher-to-compare-two-arrays", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r548766022", "createdAt": "2020-12-25T00:06:42Z", "author": {"login": "chenrujun"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import org.junit.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class AADResourceServerOboConfigurationTest {\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+        .withPropertyValues(\n+            \"azure.activedirectory.tenant-id=fake-tenant-id\",\n+            \"azure.activedirectory.client-id=fake-client-id\",\n+            \"azure.activedirectory.client-secret=fake-client-secret\");\n+\n+    @Test\n+    public void testNotExistBearerTokenAuthenticationToken() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testNotExistOAuth2LoginAuthenticationFilter() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(OAuth2LoginAuthenticationFilter.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testOnlyGraphClient() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withPropertyValues(\"azure.activedirectory.authorization.graph.scopes=https://graph.microsoft.com/User\"\n+                + \".Read\")\n+            .run(context -> {\n+                final InMemoryClientRegistrationRepository oboRepo = context.getBean(\n+                    InMemoryClientRegistrationRepository.class);\n+                final OAuth2AuthorizedClientRepository aadOboRepo = context.getBean(\n+                    AADOAuth2OboAuthorizedClientRepository.class);\n+\n+                ClientRegistration graph = oboRepo.findByRegistrationId(\"graph\");\n+                Set<String> graphScopes = graph.getScopes();\n+\n+                assertThat(aadOboRepo).isNotNull();\n+                assertThat(oboRepo).isExactlyInstanceOf(InMemoryClientRegistrationRepository.class);\n+                assertThat(graph).isNotNull();\n+                assertThat(graphScopes).containsOnly(\"https://graph.microsoft.com/User.Read\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d80a215723e375b9e32c1af46eca06fd9e52f3aa"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4NzU3MTQ1", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#pullrequestreview-558757145", "createdAt": "2020-12-25T05:16:35Z", "commit": {"oid": "d80a215723e375b9e32c1af46eca06fd9e52f3aa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eef875ddfe589ff962e519450267f4d1b53049a", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/7eef875ddfe589ff962e519450267f4d1b53049a", "committedDate": "2020-12-25T09:19:26Z", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into create-obo-clientRegistration-repo\n\n# Conflicts:\n#\tsdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2AuthenticatedPrincipal.java\n#\tsdk/spring/azure-spring-boot/src/main/resources/META-INF/spring.factories\n#\tsdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57f3f3cce6340addafc8b5bb4f7df9012d29b2e3", "author": {"user": {"login": "wujack778", "name": null}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/57f3f3cce6340addafc8b5bb4f7df9012d29b2e3", "committedDate": "2020-12-25T09:42:02Z", "message": "slove conflicts"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1297, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}