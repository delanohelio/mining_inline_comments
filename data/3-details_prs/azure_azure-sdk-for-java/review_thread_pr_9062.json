{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3ODY1NTcy", "number": 9062, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToyODoxNFrODoeTJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToyOToyNlrODoeUVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzY2MDUzOnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToyODoxNFrOF3C2tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToyODoxNFrOF3C2tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2Mjc3NQ==", "bodyText": "Try Mono.when(sender.send(message), sender.send(message))", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9062#discussion_r393262775", "createdAt": "2020-03-16T19:28:14Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -96,4 +96,43 @@ void peekFromSequencenumberMessage() {\n             })\n             .verifyComplete();\n     }\n+\n+\n+    /**\n+     * Verifies that we can send and peek a batch of messages.\n+     */\n+    @Test\n+    void peekBatchMessages() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+        int maxMessages = 2;\n+\n+        // Assert & Act\n+        StepVerifier.create(sender.send(message)\n+            .then(sender.send(message))\n+            .thenMany(receiver.peekBatch(maxMessages)))\n+            .expectNextCount(maxMessages)\n+            .verifyComplete();\n+    }\n+    /**\n+     * Verifies that we can send and peek a batch of messages.\n+     */\n+    @Test\n+    void peekBatchMessagesFromSequence() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+        int maxMessages = 2;\n+        int fromSequenceNumber = 1;\n+\n+        // Assert & Act\n+        StepVerifier.create(sender.send(message)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f69a298bfd9530185c297a9c86e11d92939739"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzY2Mjg4OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToyOToxMVrOF3C4WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToyOToxMVrOF3C4WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2MzE5Mg==", "bodyText": "Instead of asserting the number of events, I would try to assert that the messages I expect came back. (ie. message 1 and message 2)", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9062#discussion_r393263192", "createdAt": "2020-03-16T19:29:11Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -210,6 +210,42 @@ void receivesNumberOfEvents() {\n \n     }\n \n+\n+    /**\n+     * Verifies that this peek batch of messages.\n+     */\n+    @Test\n+    void peekBatchMessages() {\n+        // Arrange\n+        final int numberOfEvents = 2;\n+\n+        when(managementNode.peekBatch(numberOfEvents))\n+            .thenReturn(Flux.fromArray(new ServiceBusReceivedMessage[]{message1, message2}));\n+\n+        // Act & Assert\n+        StepVerifier.create(consumer.peekBatch(numberOfEvents))\n+            .expectNextCount(numberOfEvents)\n+            .verifyComplete();\n+    }\n+\n+    /**\n+     * Verifies that this peek batch of messages from a sequence Number.\n+     */\n+    @Test\n+    void peekBatchWithSequenceNumberMessages() {\n+        // Arrange\n+        final int numberOfEvents = 2;\n+        final int fromSequenceNumber = 10;\n+\n+        when(managementNode.peekBatch(numberOfEvents, fromSequenceNumber))\n+            .thenReturn(Flux.fromArray(new ServiceBusReceivedMessage[]{message1, message2}));\n+\n+        // Act & Assert\n+        StepVerifier.create(consumer.peekBatch(numberOfEvents, fromSequenceNumber))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f69a298bfd9530185c297a9c86e11d92939739"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzY2MzU5OnYy", "diffSide": "RIGHT", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToyOToyNlrOF3C41w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToyOToyNlrOF3C41w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2MzMxOQ==", "bodyText": "replace with: Mono.when()", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9062#discussion_r393263319", "createdAt": "2020-03-16T19:29:26Z", "author": {"login": "conniey"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -96,4 +96,43 @@ void peekFromSequencenumberMessage() {\n             })\n             .verifyComplete();\n     }\n+\n+\n+    /**\n+     * Verifies that we can send and peek a batch of messages.\n+     */\n+    @Test\n+    void peekBatchMessages() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+        int maxMessages = 2;\n+\n+        // Assert & Act\n+        StepVerifier.create(sender.send(message)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f69a298bfd9530185c297a9c86e11d92939739"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 206, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}