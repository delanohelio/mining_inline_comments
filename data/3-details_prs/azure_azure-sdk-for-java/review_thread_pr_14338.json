{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNTAxMTQ1", "number": 14338, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOTowNjo0M1rOEbE12g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoyMToyOVrOEbb9og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODI2MzMwOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOTowNjo0M1rOHE4I_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOTowNjo0M1rOHE4I_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NjE1Ng==", "bodyText": "you don't need to pass the content to the request, delete doesn't expect a body. you should pass null here as content.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r474876156", "createdAt": "2020-08-21T19:06:43Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1437,15 +1444,33 @@ void captureSessionToken(RxDocumentServiceRequest request, RxDocumentServiceResp\n             logger.debug(\"Deleting a Document. documentLink: [{}]\", documentLink);\n             String path = Utils.joinPath(documentLink, null);\n             Map<String, String> requestHeaders = this.getRequestHeaders(options, ResourceType.Document, OperationType.Delete);\n-            RxDocumentServiceRequest request = RxDocumentServiceRequest.create(OperationType.Delete,\n-                ResourceType.Document, path, requestHeaders, options);\n+            RxDocumentServiceRequest request;\n+            ByteBuffer content = null;\n+            if (document != null) {\n+                Instant serializationStartTimeUTC = Instant.now();\n+                content = serializeJsonToByteBuffer(document);\n+                Instant serializationEndTime = Instant.now();\n+                SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics = new SerializationDiagnosticsContext.SerializationDiagnostics(\n+                    serializationStartTimeUTC,\n+                    serializationEndTime,\n+                    SerializationDiagnosticsContext.SerializationType.ITEM_SERIALIZATION);\n+                request = RxDocumentServiceRequest.create(OperationType.Delete,\n+                    ResourceType.Document, path, requestHeaders, options, content);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b17a98af674685113297120fddf75981db2c828"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODI3NDUyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToxMDozMlrOHE4PtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToxMDozMlrOHE4PtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3Nzg3Ng==", "bodyText": "you don't need the content for the delete operation.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r474877876", "createdAt": "2020-08-21T19:10:32Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1437,15 +1444,33 @@ void captureSessionToken(RxDocumentServiceRequest request, RxDocumentServiceResp\n             logger.debug(\"Deleting a Document. documentLink: [{}]\", documentLink);\n             String path = Utils.joinPath(documentLink, null);\n             Map<String, String> requestHeaders = this.getRequestHeaders(options, ResourceType.Document, OperationType.Delete);\n-            RxDocumentServiceRequest request = RxDocumentServiceRequest.create(OperationType.Delete,\n-                ResourceType.Document, path, requestHeaders, options);\n+            RxDocumentServiceRequest request;\n+            ByteBuffer content = null;\n+            if (document != null) {\n+                Instant serializationStartTimeUTC = Instant.now();\n+                content = serializeJsonToByteBuffer(document);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b17a98af674685113297120fddf75981db2c828"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODkwNjE3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/InternalObjectNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMTozOTowOVrOHE-jlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMTo0NTowNVrOHE-rFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk4MTI3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return new InternalObjectNode(((InternalObjectNode) cosmosItem).toJson());\n          \n          \n            \n                        return cosmosItem;\n          \n      \n    \n    \n  \n\non this if branch the item is InternalObjectNode you don't need to serialze and deserialize again.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r474981270", "createdAt": "2020-08-21T21:39:09Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/InternalObjectNode.java", "diffHunk": "@@ -64,6 +64,23 @@ public InternalObjectNode(ObjectNode propertyBag) {\n         super(propertyBag);\n     }\n \n+    /**\n+     * fromObjectToInternalObjectNode returns InternalObjectNode\n+     */\n+    public static InternalObjectNode fromObjectToInternalObjectNode(Object cosmosItem) {\n+        if (cosmosItem instanceof InternalObjectNode) {\n+            return new InternalObjectNode(((InternalObjectNode) cosmosItem).toJson());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b38dfde9f6bce4b9630f96e4e5cdb3a57c3b59"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk4MzE4OQ==", "bodyText": "Good catch, fixed.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r474983189", "createdAt": "2020-08-21T21:45:05Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/InternalObjectNode.java", "diffHunk": "@@ -64,6 +64,23 @@ public InternalObjectNode(ObjectNode propertyBag) {\n         super(propertyBag);\n     }\n \n+    /**\n+     * fromObjectToInternalObjectNode returns InternalObjectNode\n+     */\n+    public static InternalObjectNode fromObjectToInternalObjectNode(Object cosmosItem) {\n+        if (cosmosItem instanceof InternalObjectNode) {\n+            return new InternalObjectNode(((InternalObjectNode) cosmosItem).toJson());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk4MTI3MA=="}, "originalCommit": {"oid": "51b38dfde9f6bce4b9630f96e4e5cdb3a57c3b59"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTc4NTkzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosItemTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNToyODozOFrOHFVGZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzoxOTo1N1rOHGDZhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1MDYyOQ==", "bodyText": "Do we need validateItemResponse(properties, itemResponse); here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r475350629", "createdAt": "2020-08-24T05:28:38Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosItemTest.java", "diffHunk": "@@ -127,9 +127,19 @@ public void deleteItem() throws Exception {\n         assertThat(deleteResponse.getStatusCode()).isEqualTo(204);\n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void deleteItemUsingEntity() throws Exception {\n+        InternalObjectNode properties = getDocumentDefinition(UUID.randomUUID().toString());\n+        CosmosItemResponse<InternalObjectNode> itemResponse = container.createItem(properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEwOTE5MQ==", "bodyText": "We don't, as there is no item response here. We validate the delete tests using the status code of the returned response object.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r476109191", "createdAt": "2020-08-25T03:19:57Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosItemTest.java", "diffHunk": "@@ -127,9 +127,19 @@ public void deleteItem() throws Exception {\n         assertThat(deleteResponse.getStatusCode()).isEqualTo(204);\n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void deleteItemUsingEntity() throws Exception {\n+        InternalObjectNode properties = getDocumentDefinition(UUID.randomUUID().toString());\n+        CosmosItemResponse<InternalObjectNode> itemResponse = container.createItem(properties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1MDYyOQ=="}, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTgxMTM3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNTo0MzoxNVrOHFVU_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzoyMDozNFrOHGDbAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1NDM2Ng==", "bodyText": "can we use containerName instead of getContainerName(objectToSave.getClass())?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r475354366", "createdAt": "2020-08-24T05:43:15Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "diffHunk": "@@ -151,11 +149,22 @@ public void setApplicationContext(ApplicationContext applicationContext) throws\n      * @return the inserted item\n      */\n     public <T> T insert(T objectToSave, PartitionKey partitionKey) {\n-        Assert.notNull(objectToSave, \"domainType should not be null\");\n-\n         return insert(getContainerName(objectToSave.getClass()), objectToSave, partitionKey);\n     }\n \n+    /**\n+     * Inserts item into the given container\n+     *\n+     * @param containerName must not be {@literal null}\n+     * @param objectToSave must not be {@literal null}\n+     * @param <T> type class of domain type\n+     * @return the inserted item\n+     */\n+    @Override\n+    public <T> T insert(String containerName, T objectToSave) {\n+        return insert(getContainerName(objectToSave.getClass()), objectToSave, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEwOTU3MQ==", "bodyText": "Yes, we can, updated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r476109571", "createdAt": "2020-08-25T03:20:34Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "diffHunk": "@@ -151,11 +149,22 @@ public void setApplicationContext(ApplicationContext applicationContext) throws\n      * @return the inserted item\n      */\n     public <T> T insert(T objectToSave, PartitionKey partitionKey) {\n-        Assert.notNull(objectToSave, \"domainType should not be null\");\n-\n         return insert(getContainerName(objectToSave.getClass()), objectToSave, partitionKey);\n     }\n \n+    /**\n+     * Inserts item into the given container\n+     *\n+     * @param containerName must not be {@literal null}\n+     * @param objectToSave must not be {@literal null}\n+     * @param <T> type class of domain type\n+     * @return the inserted item\n+     */\n+    @Override\n+    public <T> T insert(String containerName, T objectToSave) {\n+        return insert(getContainerName(objectToSave.getClass()), objectToSave, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1NDM2Ng=="}, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTg1MjM4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjowMzo0MlrOHFVsWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODoxMzoyOFrOHGMumQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MDM0NA==", "bodyText": "return Optional.ofNullable(domainType)\n                .map(d -> d.getAnnotation(Container.class))\n                .map(Container::partitionKeyPath)\n                .filter(s -> !s.isEmpty())\n                .orElse(null);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r475360344", "createdAt": "2020-08-24T06:03:42Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "diffHunk": "@@ -291,15 +294,22 @@ private String getContainerName(Class<?> domainType) {\n \n         final Container annotation = domainType.getAnnotation(Container.class);\n \n-        if (annotation != null\n-                && annotation.containerName() != null\n-                && !annotation.containerName().isEmpty()) {\n+        if (annotation != null && !annotation.containerName().isEmpty()) {\n             customContainerName = resolveExpression(annotation.containerName());\n         }\n \n         return customContainerName;\n     }\n \n+    private String getPartitionKeyPathValue(Class<?> domainType) {\n+        final Container annotation = domainType.getAnnotation(Container.class);\n+\n+        if (annotation != null && !annotation.partitionKeyPath().isEmpty()) {\n+            return annotation.partitionKeyPath();\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjExNzMzMQ==", "bodyText": "Stream logic will make the if condition look harder to read code.\nIn my opinion, we should keep it as it is. Thoughts ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r476117331", "createdAt": "2020-08-25T03:31:42Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "diffHunk": "@@ -291,15 +294,22 @@ private String getContainerName(Class<?> domainType) {\n \n         final Container annotation = domainType.getAnnotation(Container.class);\n \n-        if (annotation != null\n-                && annotation.containerName() != null\n-                && !annotation.containerName().isEmpty()) {\n+        if (annotation != null && !annotation.containerName().isEmpty()) {\n             customContainerName = resolveExpression(annotation.containerName());\n         }\n \n         return customContainerName;\n     }\n \n+    private String getPartitionKeyPathValue(Class<?> domainType) {\n+        final Container annotation = domainType.getAnnotation(Container.class);\n+\n+        if (annotation != null && !annotation.partitionKeyPath().isEmpty()) {\n+            return annotation.partitionKeyPath();\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MDM0NA=="}, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI2MjA0MQ==", "bodyText": "OK", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r476262041", "createdAt": "2020-08-25T08:13:28Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "diffHunk": "@@ -291,15 +294,22 @@ private String getContainerName(Class<?> domainType) {\n \n         final Container annotation = domainType.getAnnotation(Container.class);\n \n-        if (annotation != null\n-                && annotation.containerName() != null\n-                && !annotation.containerName().isEmpty()) {\n+        if (annotation != null && !annotation.containerName().isEmpty()) {\n             customContainerName = resolveExpression(annotation.containerName());\n         }\n \n         return customContainerName;\n     }\n \n+    private String getPartitionKeyPathValue(Class<?> domainType) {\n+        final Container annotation = domainType.getAnnotation(Container.class);\n+\n+        if (annotation != null && !annotation.partitionKeyPath().isEmpty()) {\n+            return annotation.partitionKeyPath();\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MDM0NA=="}, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTg2MDAxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjowNzoxMFrOHFVwqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzoyMzowN1rOHGDhaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MTQ0OQ==", "bodyText": "getPartitionKeyPathInDomainType will make it easier to understand.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r475361449", "createdAt": "2020-08-24T06:07:10Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "diffHunk": "@@ -291,15 +294,22 @@ private String getContainerName(Class<?> domainType) {\n \n         final Container annotation = domainType.getAnnotation(Container.class);\n \n-        if (annotation != null\n-                && annotation.containerName() != null\n-                && !annotation.containerName().isEmpty()) {\n+        if (annotation != null && !annotation.containerName().isEmpty()) {\n             customContainerName = resolveExpression(annotation.containerName());\n         }\n \n         return customContainerName;\n     }\n \n+    private String getPartitionKeyPathValue(Class<?> domainType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjExMTIwOA==", "bodyText": "Updated to a better name.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r476111208", "createdAt": "2020-08-25T03:23:07Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "diffHunk": "@@ -291,15 +294,22 @@ private String getContainerName(Class<?> domainType) {\n \n         final Container annotation = domainType.getAnnotation(Container.class);\n \n-        if (annotation != null\n-                && annotation.containerName() != null\n-                && !annotation.containerName().isEmpty()) {\n+        if (annotation != null && !annotation.containerName().isEmpty()) {\n             customContainerName = resolveExpression(annotation.containerName());\n         }\n \n         return customContainerName;\n     }\n \n+    private String getPartitionKeyPathValue(Class<?> domainType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MTQ0OQ=="}, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTg2MDgxOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjowNzozOVrOHFVxJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzoyNDoyOFrOHGDlBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MTU3NA==", "bodyText": "this.partitionKeyPathInDomainType = getPartitionKeyPathInDomainType(domainType);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r475361574", "createdAt": "2020-08-24T06:07:39Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "diffHunk": "@@ -74,6 +75,8 @@ public CosmosEntityInformation(Class<T> domainType) {\n         this.autoGenerateId = isIdFieldAnnotatedWithGeneratedValue(this.id);\n \n         this.containerName = getContainerName(domainType);\n+        this.partitionKeyPath = getPartitionKeyPathValue(domainType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjExMjEzMg==", "bodyText": "Since the annotation is called as partitionKeyPath , that is the reason I created the field with the same name.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r476112132", "createdAt": "2020-08-25T03:24:28Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "diffHunk": "@@ -74,6 +75,8 @@ public CosmosEntityInformation(Class<T> domainType) {\n         this.autoGenerateId = isIdFieldAnnotatedWithGeneratedValue(this.id);\n \n         this.containerName = getContainerName(domainType);\n+        this.partitionKeyPath = getPartitionKeyPathValue(domainType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MTU3NA=="}, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTg2MTE1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjowNzo0OFrOHFVxWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzozMTo1OFrOHGD6CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MTYyNg==", "bodyText": "partitionKeyPathInDomainType", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r475361626", "createdAt": "2020-08-24T06:07:48Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "diffHunk": "@@ -53,6 +53,7 @@\n     private final Field partitionKeyField;\n     private final Field versionField;\n     private final String containerName;\n+    private final String partitionKeyPath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjExNzUxMw==", "bodyText": "Since the annotation is called as partitionKeyPath , that is the reason I created the field with the same name.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r476117513", "createdAt": "2020-08-25T03:31:58Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "diffHunk": "@@ -53,6 +53,7 @@\n     private final Field partitionKeyField;\n     private final Field versionField;\n     private final String containerName;\n+    private final String partitionKeyPath;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MTYyNg=="}, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTg4NDI5OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjoxODozOFrOHFV_LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzozMzowMFrOHGD8_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2NTE2NQ==", "bodyText": "return \"/\" + Optional.of(partitionKeyField)\n                                 .map(f -> f.getAnnotation(PartitionKey.class))\n                                 .map(PartitionKey::value)\n                                 .filter(s -> !s.isEmpty())\n                                 .orElseGet(partitionKeyField::getName);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r475365165", "createdAt": "2020-08-24T06:18:38Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "diffHunk": "@@ -195,16 +198,16 @@ public String getVersionFieldName() {\n     }\n \n     /**\n-     * Get the field name represented by the supplied partitionKeyField object\n+     * Get the computed partition key path for container\n      *\n-     * @return partition key field name\n+     * @return partition key path\n      */\n-    public String getPartitionKeyFieldName() {\n+    public String getPartitionKeyPath() {\n         if (partitionKeyField == null) {\n-            return null;\n+            return partitionKeyPath == null ? \"/null\" : partitionKeyPath;\n         } else {\n             final PartitionKey partitionKey = partitionKeyField.getAnnotation(PartitionKey.class);\n-            return partitionKey.value().equals(\"\") ? partitionKeyField.getName() : partitionKey.value();\n+            return partitionKey.value().equals(\"\") ? \"/\" + partitionKeyField.getName() : \"/\" + partitionKey.value();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjExODI2OA==", "bodyText": "Same here, right now we have a very straightforward if condition, changing it to this complex stream logic doesn't make sense. We don't really need java Stream's map, filter and orElseGet logic here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r476118268", "createdAt": "2020-08-25T03:33:00Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "diffHunk": "@@ -195,16 +198,16 @@ public String getVersionFieldName() {\n     }\n \n     /**\n-     * Get the field name represented by the supplied partitionKeyField object\n+     * Get the computed partition key path for container\n      *\n-     * @return partition key field name\n+     * @return partition key path\n      */\n-    public String getPartitionKeyFieldName() {\n+    public String getPartitionKeyPath() {\n         if (partitionKeyField == null) {\n-            return null;\n+            return partitionKeyPath == null ? \"/null\" : partitionKeyPath;\n         } else {\n             final PartitionKey partitionKey = partitionKeyField.getAnnotation(PartitionKey.class);\n-            return partitionKey.value().equals(\"\") ? partitionKeyField.getName() : partitionKey.value();\n+            return partitionKey.value().equals(\"\") ? \"/\" + partitionKeyField.getName() : \"/\" + partitionKey.value();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2NTE2NQ=="}, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTg5NjI1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjoyNDowNVrOHFWGVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzozMzozNFrOHGD-Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2Njk5OA==", "bodyText": "return Optional.of(domainType)\n                       .map(d -> d.getAnnotation(Container.class))\n                       .map(Container::containerName)\n                       .filter(s -> !s.isEmpty())\n                       .map(ExpressionResolver::resolveExpression)\n                       .orElseGet(domainType::getSimpleName);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r475366998", "createdAt": "2020-08-24T06:24:05Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "diffHunk": "@@ -291,15 +294,22 @@ private String getContainerName(Class<?> domainType) {\n \n         final Container annotation = domainType.getAnnotation(Container.class);\n \n-        if (annotation != null\n-                && annotation.containerName() != null\n-                && !annotation.containerName().isEmpty()) {\n+        if (annotation != null && !annotation.containerName().isEmpty()) {\n             customContainerName = resolveExpression(annotation.containerName());\n         }\n \n         return customContainerName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjExODYzMA==", "bodyText": "Same here as above, this is very straightforward if condition. Changing this to Stream will be complicating the code in my opinion.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r476118630", "createdAt": "2020-08-25T03:33:34Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/repository/support/CosmosEntityInformation.java", "diffHunk": "@@ -291,15 +294,22 @@ private String getContainerName(Class<?> domainType) {\n \n         final Container annotation = domainType.getAnnotation(Container.class);\n \n-        if (annotation != null\n-                && annotation.containerName() != null\n-                && !annotation.containerName().isEmpty()) {\n+        if (annotation != null && !annotation.containerName().isEmpty()) {\n             customContainerName = resolveExpression(annotation.containerName());\n         }\n \n         return customContainerName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2Njk5OA=="}, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTkwMjM4OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjoyNjozM1rOHFWJ5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzoyNTowMFrOHGDmng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2NzkwOA==", "bodyText": "To keep same code style, please use information.getPartitionKeyPath() directly instead of define partitionKeyPath.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r475367908", "createdAt": "2020-08-24T06:26:33Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "diffHunk": "@@ -441,9 +459,7 @@ public CosmosContainerProperties createContainerIfNotExists(CosmosEntityInformat\n                 CosmosUtils.fillAndProcessResponseDiagnostics(this.responseDiagnosticsProcessor,\n                     cosmosDatabaseResponse.getDiagnostics(), null);\n                 final CosmosContainerProperties cosmosContainerProperties =\n-                    new CosmosContainerProperties(\n-                        information.getContainerName(), \"/\"\n-                        + information.getPartitionKeyFieldName());\n+                    new CosmosContainerProperties(information.getContainerName(), partitionKeyPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjExMjU0Mg==", "bodyText": "Makes sense, updated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r476112542", "createdAt": "2020-08-25T03:25:00Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "diffHunk": "@@ -441,9 +459,7 @@ public CosmosContainerProperties createContainerIfNotExists(CosmosEntityInformat\n                 CosmosUtils.fillAndProcessResponseDiagnostics(this.responseDiagnosticsProcessor,\n                     cosmosDatabaseResponse.getDiagnostics(), null);\n                 final CosmosContainerProperties cosmosContainerProperties =\n-                    new CosmosContainerProperties(\n-                        information.getContainerName(), \"/\"\n-                        + information.getPartitionKeyFieldName());\n+                    new CosmosContainerProperties(information.getContainerName(), partitionKeyPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2NzkwOA=="}, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTkxMjE3OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjozMDo1NlrOHFWP-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzoyNTozOFrOHGDoOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2OTQ2Nw==", "bodyText": "To keep same code style, please use information.getPartitionKeyPath() directly instead of define partitionKeyPath.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r475369467", "createdAt": "2020-08-24T06:30:56Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "diffHunk": "@@ -145,9 +147,7 @@ public void setApplicationContext(@NonNull ApplicationContext applicationContext\n                 CosmosUtils.fillAndProcessResponseDiagnostics(this.responseDiagnosticsProcessor,\n                     cosmosDatabaseResponse.getDiagnostics(), null);\n                 final CosmosContainerProperties cosmosContainerProperties =\n-                    new CosmosContainerProperties(\n-                        information.getContainerName(),\n-                        \"/\" + information.getPartitionKeyFieldName());\n+                    new CosmosContainerProperties(information.getContainerName(), partitionKeyPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjExMjk1Mg==", "bodyText": "Makes sense, updated.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r476112952", "createdAt": "2020-08-25T03:25:38Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "diffHunk": "@@ -145,9 +147,7 @@ public void setApplicationContext(@NonNull ApplicationContext applicationContext\n                 CosmosUtils.fillAndProcessResponseDiagnostics(this.responseDiagnosticsProcessor,\n                     cosmosDatabaseResponse.getDiagnostics(), null);\n                 final CosmosContainerProperties cosmosContainerProperties =\n-                    new CosmosContainerProperties(\n-                        information.getContainerName(),\n-                        \"/\" + information.getPartitionKeyFieldName());\n+                    new CosmosContainerProperties(information.getContainerName(), partitionKeyPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2OTQ2Nw=="}, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjAyMjg0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoxMjo0NlrOHFXRRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjo1NTozNFrOHGhJZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM4NjE4MQ==", "bodyText": "Can we update logic in CosmosAsyncContainer#createItem\nfrom\n    public <T> Mono<CosmosItemResponse<T>> createItem(\n        T item,\n        PartitionKey partitionKey,\n        CosmosItemRequestOptions options) {\n        if (options == null) {\n            options = new CosmosItemRequestOptions();\n        }\n        ModelBridgeInternal.setPartitionKey(options, partitionKey);\n        return createItem(item, options);\n    }\n\nto\n    public <T> Mono<CosmosItemResponse<T>> createItem(\n        T item,\n        PartitionKey partitionKey,\n        CosmosItemRequestOptions options) {\n        if (options == null) {\n            options = new CosmosItemRequestOptions();\n        }\n        if (partitionKey != null) {\n            ModelBridgeInternal.setPartitionKey(options, partitionKey);\n        }\n        return createItem(item, options);\n    }\n\nSo we can delete  if (partitionKey == null) here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r475386181", "createdAt": "2020-08-24T07:12:46Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "diffHunk": "@@ -370,21 +351,37 @@ public void setApplicationContext(@NonNull ApplicationContext applicationContext\n         generateIdIfNullAndAutoGenerationEnabled(objectToSave, domainType);\n         final JsonNode originalItem = prepareToPersistAndConvertToItemProperties(objectToSave);\n         final CosmosItemRequestOptions options = new CosmosItemRequestOptions();\n+        CosmosAsyncContainer cosmosAsyncContainer = cosmosAsyncClient.getDatabase(this.databaseName)\n+                                                                     .getContainer(containerName);\n+        Mono<CosmosItemResponse<JsonNode>> item;\n         if (partitionKey == null) {\n-            partitionKey = PartitionKey.NONE;\n+            //  if the partition key is null, SDK will get the partitionKey from the object\n+            item = cosmosAsyncContainer.createItem(originalItem, options);\n+        } else {\n+            item = cosmosAsyncContainer.createItem(originalItem, partitionKey, options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjExNTQ5Mw==", "bodyText": "It doesn't matter, as if the partitionKey is null, SDK will compute it based on the logic mentioned below.\nI have kept the scope of this PR to touch minimal code in the Cosmos Java SDK layer.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r476115493", "createdAt": "2020-08-25T03:29:08Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "diffHunk": "@@ -370,21 +351,37 @@ public void setApplicationContext(@NonNull ApplicationContext applicationContext\n         generateIdIfNullAndAutoGenerationEnabled(objectToSave, domainType);\n         final JsonNode originalItem = prepareToPersistAndConvertToItemProperties(objectToSave);\n         final CosmosItemRequestOptions options = new CosmosItemRequestOptions();\n+        CosmosAsyncContainer cosmosAsyncContainer = cosmosAsyncClient.getDatabase(this.databaseName)\n+                                                                     .getContainer(containerName);\n+        Mono<CosmosItemResponse<JsonNode>> item;\n         if (partitionKey == null) {\n-            partitionKey = PartitionKey.NONE;\n+            //  if the partition key is null, SDK will get the partitionKey from the object\n+            item = cosmosAsyncContainer.createItem(originalItem, options);\n+        } else {\n+            item = cosmosAsyncContainer.createItem(originalItem, partitionKey, options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM4NjE4MQ=="}, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI2OTcxNQ==", "bodyText": "Then can we update code from\nif (partitionKey == null) {\n    //  if the partition key is null, SDK will get the partitionKey from the object\n    item = cosmosAsyncContainer.createItem(originalItem, options);\n} else {\n    item = cosmosAsyncContainer.createItem(originalItem, partitionKey, options);\n}\n\nto\n // it's OK if partitionKey is null\nitem = cosmosAsyncContainer.createItem(originalItem, partitionKey, options);", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r476269715", "createdAt": "2020-08-25T08:25:42Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "diffHunk": "@@ -370,21 +351,37 @@ public void setApplicationContext(@NonNull ApplicationContext applicationContext\n         generateIdIfNullAndAutoGenerationEnabled(objectToSave, domainType);\n         final JsonNode originalItem = prepareToPersistAndConvertToItemProperties(objectToSave);\n         final CosmosItemRequestOptions options = new CosmosItemRequestOptions();\n+        CosmosAsyncContainer cosmosAsyncContainer = cosmosAsyncClient.getDatabase(this.databaseName)\n+                                                                     .getContainer(containerName);\n+        Mono<CosmosItemResponse<JsonNode>> item;\n         if (partitionKey == null) {\n-            partitionKey = PartitionKey.NONE;\n+            //  if the partition key is null, SDK will get the partitionKey from the object\n+            item = cosmosAsyncContainer.createItem(originalItem, options);\n+        } else {\n+            item = cosmosAsyncContainer.createItem(originalItem, partitionKey, options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM4NjE4MQ=="}, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5NjU4Mw==", "bodyText": "Yes, good suggestion @chenrujun  - I have updated the code.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r476596583", "createdAt": "2020-08-25T16:55:34Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "diffHunk": "@@ -370,21 +351,37 @@ public void setApplicationContext(@NonNull ApplicationContext applicationContext\n         generateIdIfNullAndAutoGenerationEnabled(objectToSave, domainType);\n         final JsonNode originalItem = prepareToPersistAndConvertToItemProperties(objectToSave);\n         final CosmosItemRequestOptions options = new CosmosItemRequestOptions();\n+        CosmosAsyncContainer cosmosAsyncContainer = cosmosAsyncClient.getDatabase(this.databaseName)\n+                                                                     .getContainer(containerName);\n+        Mono<CosmosItemResponse<JsonNode>> item;\n         if (partitionKey == null) {\n-            partitionKey = PartitionKey.NONE;\n+            //  if the partition key is null, SDK will get the partitionKey from the object\n+            item = cosmosAsyncContainer.createItem(originalItem, options);\n+        } else {\n+            item = cosmosAsyncContainer.createItem(originalItem, partitionKey, options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM4NjE4MQ=="}, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjA1MTU0OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoyMToyOVrOHFXhhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzoyNzozOFrOHGDt-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5MDM0MA==", "bodyText": "Where is the code about SDK will get the partitionKey from the object ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r475390340", "createdAt": "2020-08-24T07:21:29Z", "author": {"login": "chenrujun"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "diffHunk": "@@ -370,21 +351,37 @@ public void setApplicationContext(@NonNull ApplicationContext applicationContext\n         generateIdIfNullAndAutoGenerationEnabled(objectToSave, domainType);\n         final JsonNode originalItem = prepareToPersistAndConvertToItemProperties(objectToSave);\n         final CosmosItemRequestOptions options = new CosmosItemRequestOptions();\n+        CosmosAsyncContainer cosmosAsyncContainer = cosmosAsyncClient.getDatabase(this.databaseName)\n+                                                                     .getContainer(containerName);\n+        Mono<CosmosItemResponse<JsonNode>> item;\n         if (partitionKey == null) {\n-            partitionKey = PartitionKey.NONE;\n+            //  if the partition key is null, SDK will get the partitionKey from the object", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjExNDQyNA==", "bodyText": "Here is the logic : https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java#L1031", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14338#discussion_r476114424", "createdAt": "2020-08-25T03:27:38Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-spring-data-cosmos-core/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "diffHunk": "@@ -370,21 +351,37 @@ public void setApplicationContext(@NonNull ApplicationContext applicationContext\n         generateIdIfNullAndAutoGenerationEnabled(objectToSave, domainType);\n         final JsonNode originalItem = prepareToPersistAndConvertToItemProperties(objectToSave);\n         final CosmosItemRequestOptions options = new CosmosItemRequestOptions();\n+        CosmosAsyncContainer cosmosAsyncContainer = cosmosAsyncClient.getDatabase(this.databaseName)\n+                                                                     .getContainer(containerName);\n+        Mono<CosmosItemResponse<JsonNode>> item;\n         if (partitionKey == null) {\n-            partitionKey = PartitionKey.NONE;\n+            //  if the partition key is null, SDK will get the partitionKey from the object", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5MDM0MA=="}, "originalCommit": {"oid": "21ec1522411d738576324fb63fa6ebcb8c8438c6"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1584, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}