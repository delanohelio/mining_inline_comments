{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NTQ2MTA2", "number": 10431, "title": "Add a convenience API to create poller flux error instance", "bodyText": "When creating poller flux, care has to be taken to ensure all activation, cancellation, polling and getFinalResult operations do not throw exceptions directly. This requires having try-catch block in all these methods for even null checks. This PR introduces a convenient API to create a PollerFlux error instance that simply returns an error on subscription. This simplifies the client library code.\nReference PR\nSample use:\npublic PollerFlux<OperationResult, IterableStream<RecognizedForm>>\n\tbeginRecognizeCustomFormsFromUrl(String fileSourceUrl, String modelId, boolean includeTextDetails,\n\tDuration pollInterval) {\n\ttry {\n\t\tfinal Duration interval = pollInterval != null ? pollInterval : DEFAULT_DURATION;\n\t\treturn new PollerFlux<OperationResult, IterableStream<RecognizedForm>>(\n\t\t\tinterval,\n\t\t\tanalyzeFormActivationOperation(fileSourceUrl, modelId, includeTextDetails),\n\t\t\tcreateAnalyzeFormPollOperation(modelId),\n\t\t\t(activationResponse, context) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n\t\t\tfetchAnalyzeFormResultOperation(modelId, includeTextDetails));\n\t} catch (Exception ex) {\n\t\t return PollerFlux.error(ex);\n\t}\n}", "createdAt": "2020-04-22T21:01:31Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431", "merged": true, "mergeCommit": {"oid": "bf28c282a4d04b37cc6f2351c143161b4bf64de7"}, "closed": true, "closedAt": "2020-04-30T21:51:54Z", "author": {"login": "srnagar"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaN9EdgH2gAyNDA3NTQ2MTA2OmM3NDJhMzM0MTk4OWNkMzdkY2JkNzIyOTlmNmQ3MjEwMWJlZGExMDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcczc1ggFqTQwMzg2ODc5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c742a3341989cd37dcbd72299f6d72101beda102", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/c742a3341989cd37dcbd72299f6d72101beda102", "committedDate": "2020-04-22T20:03:35Z", "message": "Add a convenience API to create poller flux error instance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NTk3NjI3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#pullrequestreview-398597627", "createdAt": "2020-04-22T21:19:23Z", "commit": {"oid": "c742a3341989cd37dcbd72299f6d72101beda102"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMToxOToyM1rOGKMTlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMToxOToyM1rOGKMTlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0MDU2Nw==", "bodyText": "so this is the equivalent of Mono.error or Flux.error in PollerFlux.  The activation will never succeeded so all subscriptions are going to get the error from the activation stage. The other functions (finalResult, Poll) will never get called. lgtm.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#discussion_r413340567", "createdAt": "2020-04-22T21:19:23Z", "author": {"login": "anuchandy"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -162,6 +162,22 @@ private PollerFlux(Duration pollInterval,\n         this.syncActivationOperation = cxt -> activationOperation.apply(cxt).block();\n     }\n \n+    /**\n+     * Creates a poller flux instance that returns an error on subscription.\n+     *\n+     * @param ex The exception to be returned on subscription of this {@link PollerFlux}.\n+     * @param <T> The type of poll response value.\n+     * @param <U> The type of the final result of long running operation.\n+     * @return A poller flux instance that returns an error without emitting any data.\n+     *\n+     * @see {@link Mono#error(Throwable)}\n+     * @see {@link Flux#error(Throwable)}\n+     */\n+    public static <T, U> PollerFlux<T, U> error(Exception ex) {\n+        return new PollerFlux<>(Duration.ofMillis(1L), context -> Mono.error(ex), context -> Mono.error(ex),\n+            (context, response) -> Mono.error(ex), context -> Mono.error(ex));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c742a3341989cd37dcbd72299f6d72101beda102"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjA0MDc2", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#pullrequestreview-398604076", "createdAt": "2020-04-22T21:29:56Z", "commit": {"oid": "c742a3341989cd37dcbd72299f6d72101beda102"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjExOTM5", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#pullrequestreview-398611939", "createdAt": "2020-04-22T21:43:39Z", "commit": {"oid": "c742a3341989cd37dcbd72299f6d72101beda102"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjI0NjA3", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#pullrequestreview-398624607", "createdAt": "2020-04-22T22:07:44Z", "commit": {"oid": "c742a3341989cd37dcbd72299f6d72101beda102"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMjowNzo0NFrOGKN27g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMjowOToyMFrOGKN55w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NTk5OA==", "bodyText": "Should this use Throwable instead?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#discussion_r413365998", "createdAt": "2020-04-22T22:07:44Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -162,6 +162,22 @@ private PollerFlux(Duration pollInterval,\n         this.syncActivationOperation = cxt -> activationOperation.apply(cxt).block();\n     }\n \n+    /**\n+     * Creates a poller flux instance that returns an error on subscription.\n+     *\n+     * @param ex The exception to be returned on subscription of this {@link PollerFlux}.\n+     * @param <T> The type of poll response value.\n+     * @param <U> The type of the final result of long running operation.\n+     * @return A poller flux instance that returns an error without emitting any data.\n+     *\n+     * @see {@link Mono#error(Throwable)}\n+     * @see {@link Flux#error(Throwable)}\n+     */\n+    public static <T, U> PollerFlux<T, U> error(Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c742a3341989cd37dcbd72299f6d72101beda102"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NjMwNA==", "bodyText": "Do we want this to take a ClientLogger so the exception can be logged? Or is it expected for the caller to log this exception?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#discussion_r413366304", "createdAt": "2020-04-22T22:08:32Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -162,6 +162,22 @@ private PollerFlux(Duration pollInterval,\n         this.syncActivationOperation = cxt -> activationOperation.apply(cxt).block();\n     }\n \n+    /**\n+     * Creates a poller flux instance that returns an error on subscription.\n+     *\n+     * @param ex The exception to be returned on subscription of this {@link PollerFlux}.\n+     * @param <T> The type of poll response value.\n+     * @param <U> The type of the final result of long running operation.\n+     * @return A poller flux instance that returns an error without emitting any data.\n+     *\n+     * @see {@link Mono#error(Throwable)}\n+     * @see {@link Flux#error(Throwable)}\n+     */\n+    public static <T, U> PollerFlux<T, U> error(Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c742a3341989cd37dcbd72299f6d72101beda102"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2Njc1OQ==", "bodyText": "nit: Consistency with the rest of the Javadocs\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Creates a poller flux instance that returns an error on subscription.\n          \n          \n            \n                 * Creates a PollerFlux instance that returns an error on subscription.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#discussion_r413366759", "createdAt": "2020-04-22T22:09:20Z", "author": {"login": "alzimmermsft"}, "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -162,6 +162,22 @@ private PollerFlux(Duration pollInterval,\n         this.syncActivationOperation = cxt -> activationOperation.apply(cxt).block();\n     }\n \n+    /**\n+     * Creates a poller flux instance that returns an error on subscription.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c742a3341989cd37dcbd72299f6d72101beda102"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88da5494934008c745492d175630703050e826f6", "author": {"user": {"login": "srnagar", "name": "Srikanta"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/88da5494934008c745492d175630703050e826f6", "committedDate": "2020-04-22T22:34:34Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODY4Nzk0", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#pullrequestreview-403868794", "createdAt": "2020-04-30T20:52:37Z", "commit": {"oid": "88da5494934008c745492d175630703050e826f6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4783, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}