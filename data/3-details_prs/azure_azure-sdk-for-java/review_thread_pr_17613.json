{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyMTMzNjA4", "number": 17613, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjoxMDozNFrOE6UDtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzoyNTo1OVrOE9dqNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTgxNDk0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AADJwtIssuerValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjoxMDozNFrOH1TDyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODowODowMFrOH3Emhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0ODg0Mw==", "bodyText": "We should use another name for this field here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r525648843", "createdAt": "2020-11-18T02:10:34Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AADJwtIssuerValidator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.autoconfigure.aad;\n+\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidatorResult;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtClaimValidator;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Validates the \"iss\" claim in a {@link Jwt}, that is matches a configured value\n+ */\n+public class AADJwtIssuerValidator implements OAuth2TokenValidator<Jwt> {\n+\n+    private static final String LOGIN_MICROSOFT_ONLINE_ISSUER = \"https://login.microsoftonline.com/\";\n+    private static final String STS_WINDOWS_ISSUER = \"https://sts.windows.net/\";\n+    private static final String STS_CHINA_CLOUD_API_ISSUER = \"https://sts.chinacloudapi.cn/\";\n+    private static final String COMMON = \"common\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9aa0670c97ebcdaa2110626eb73d72e5d5c8482"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUwOTEyNg==", "bodyText": "You mean the COMMON  field?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r527509126", "createdAt": "2020-11-20T08:08:00Z", "author": {"login": "ZhuXiaoBing-cn"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AADJwtIssuerValidator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.autoconfigure.aad;\n+\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidatorResult;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtClaimValidator;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Validates the \"iss\" claim in a {@link Jwt}, that is matches a configured value\n+ */\n+public class AADJwtIssuerValidator implements OAuth2TokenValidator<Jwt> {\n+\n+    private static final String LOGIN_MICROSOFT_ONLINE_ISSUER = \"https://login.microsoftonline.com/\";\n+    private static final String STS_WINDOWS_ISSUER = \"https://sts.windows.net/\";\n+    private static final String STS_CHINA_CLOUD_API_ISSUER = \"https://sts.chinacloudapi.cn/\";\n+    private static final String COMMON = \"common\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0ODg0Mw=="}, "originalCommit": {"oid": "b9aa0670c97ebcdaa2110626eb73d72e5d5c8482"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjU1NTg0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AADJwtAudienceValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMjozMzo1MlrOH27OnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODozNTo0MlrOH3FjpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM1NTU0OQ==", "bodyText": "Why convert the aud to a list instead of string?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r527355549", "createdAt": "2020-11-20T02:33:52Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AADJwtAudienceValidator.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.autoconfigure.aad;\n+\n+import java.util.List;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidatorResult;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtClaimValidator;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Validates the \"aud\" claim in a {@link Jwt}, that is matches a configured value\n+ */\n+public class AADJwtAudienceValidator implements OAuth2TokenValidator<Jwt> {\n+\n+    private final JwtClaimValidator<List<String>> validator;\n+\n+    /**\n+     * Constructs a {@link AADJwtAudienceValidator} using the provided parameters\n+     *\n+     * @param audiences - The audience that each {@link Jwt} should have.\n+     */\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    public AADJwtAudienceValidator(List<String> audiences) {\n+        Assert.notNull(audiences, \"audiences cannot be null\");\n+        this.validator = new JwtClaimValidator(AADTokenClaim.AUD, aud -> audiences.containsAll((List<String>) aud));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "073274635c3b0060bc54ee9bf640a642dbb8c306"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyNDc3Mw==", "bodyText": "This is a default transformation for Spring Security Resource Server.We can also modify it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r527524773", "createdAt": "2020-11-20T08:35:42Z", "author": {"login": "ZhuXiaoBing-cn"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AADJwtAudienceValidator.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.autoconfigure.aad;\n+\n+import java.util.List;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidatorResult;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtClaimValidator;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Validates the \"aud\" claim in a {@link Jwt}, that is matches a configured value\n+ */\n+public class AADJwtAudienceValidator implements OAuth2TokenValidator<Jwt> {\n+\n+    private final JwtClaimValidator<List<String>> validator;\n+\n+    /**\n+     * Constructs a {@link AADJwtAudienceValidator} using the provided parameters\n+     *\n+     * @param audiences - The audience that each {@link Jwt} should have.\n+     */\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    public AADJwtAudienceValidator(List<String> audiences) {\n+        Assert.notNull(audiences, \"audiences cannot be null\");\n+        this.validator = new JwtClaimValidator(AADTokenClaim.AUD, aud -> audiences.containsAll((List<String>) aud));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM1NTU0OQ=="}, "originalCommit": {"oid": "073274635c3b0060bc54ee9bf640a642dbb8c306"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjU4NTIwOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AzureJwtBearerTokenAuthenticationConverter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMjo0OToxOVrOH27feg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODowMDoyNlrOH3EKsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM1OTg2Ng==", "bodyText": "need any log info here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r527359866", "createdAt": "2020-11-20T02:49:19Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AzureJwtBearerTokenAuthenticationConverter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.azure.spring.autoconfigure.aad;\n+\n+import com.nimbusds.jose.JWSObject;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.JWTClaimsSet.Builder;\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\n+import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;\n+\n+/**\n+ *  A {@link Converter} that takes a {@link Jwt} and converts it into a {@link PreAuthenticatedAuthenticationToken}.\n+ */\n+public class AzureJwtBearerTokenAuthenticationConverter implements Converter<Jwt, AbstractAuthenticationToken> {\n+\n+    private final JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\n+\n+    public AzureJwtBearerTokenAuthenticationConverter() {\n+    }\n+\n+    public AbstractAuthenticationToken convert(Jwt jwt) {\n+        AbstractAuthenticationToken token = this.jwtAuthenticationConverter.convert(jwt);\n+        Collection<GrantedAuthority> authorities = token.getAuthorities();\n+        OAuth2AccessToken accessToken = new OAuth2AccessToken(TokenType.BEARER, jwt.getTokenValue(), jwt.getIssuedAt(),\n+            jwt.getExpiresAt());\n+        Map<String, Object> attributes = jwt.getClaims();\n+        JWTClaimsSet.Builder builder = new Builder();\n+        for (Entry<String, Object> entry : attributes.entrySet()) {\n+            builder.claim(entry.getKey(), entry.getValue());\n+        }\n+        JWSObject jwsObject = null;\n+        try {\n+            jwsObject = JWSObject.parse(accessToken.getTokenValue());\n+        } catch (ParseException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "073274635c3b0060bc54ee9bf640a642dbb8c306"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2MDAwNw==", "bodyText": "should we throw this exception?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r527360007", "createdAt": "2020-11-20T02:49:44Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AzureJwtBearerTokenAuthenticationConverter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.azure.spring.autoconfigure.aad;\n+\n+import com.nimbusds.jose.JWSObject;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.JWTClaimsSet.Builder;\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\n+import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;\n+\n+/**\n+ *  A {@link Converter} that takes a {@link Jwt} and converts it into a {@link PreAuthenticatedAuthenticationToken}.\n+ */\n+public class AzureJwtBearerTokenAuthenticationConverter implements Converter<Jwt, AbstractAuthenticationToken> {\n+\n+    private final JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\n+\n+    public AzureJwtBearerTokenAuthenticationConverter() {\n+    }\n+\n+    public AbstractAuthenticationToken convert(Jwt jwt) {\n+        AbstractAuthenticationToken token = this.jwtAuthenticationConverter.convert(jwt);\n+        Collection<GrantedAuthority> authorities = token.getAuthorities();\n+        OAuth2AccessToken accessToken = new OAuth2AccessToken(TokenType.BEARER, jwt.getTokenValue(), jwt.getIssuedAt(),\n+            jwt.getExpiresAt());\n+        Map<String, Object> attributes = jwt.getClaims();\n+        JWTClaimsSet.Builder builder = new Builder();\n+        for (Entry<String, Object> entry : attributes.entrySet()) {\n+            builder.claim(entry.getKey(), entry.getValue());\n+        }\n+        JWSObject jwsObject = null;\n+        try {\n+            jwsObject = JWSObject.parse(accessToken.getTokenValue());\n+        } catch (ParseException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM1OTg2Ng=="}, "originalCommit": {"oid": "073274635c3b0060bc54ee9bf640a642dbb8c306"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUwMjAwMw==", "bodyText": "We should have a log here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r527502003", "createdAt": "2020-11-20T08:00:26Z", "author": {"login": "ZhuXiaoBing-cn"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AzureJwtBearerTokenAuthenticationConverter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.azure.spring.autoconfigure.aad;\n+\n+import com.nimbusds.jose.JWSObject;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.JWTClaimsSet.Builder;\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\n+import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;\n+\n+/**\n+ *  A {@link Converter} that takes a {@link Jwt} and converts it into a {@link PreAuthenticatedAuthenticationToken}.\n+ */\n+public class AzureJwtBearerTokenAuthenticationConverter implements Converter<Jwt, AbstractAuthenticationToken> {\n+\n+    private final JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\n+\n+    public AzureJwtBearerTokenAuthenticationConverter() {\n+    }\n+\n+    public AbstractAuthenticationToken convert(Jwt jwt) {\n+        AbstractAuthenticationToken token = this.jwtAuthenticationConverter.convert(jwt);\n+        Collection<GrantedAuthority> authorities = token.getAuthorities();\n+        OAuth2AccessToken accessToken = new OAuth2AccessToken(TokenType.BEARER, jwt.getTokenValue(), jwt.getIssuedAt(),\n+            jwt.getExpiresAt());\n+        Map<String, Object> attributes = jwt.getClaims();\n+        JWTClaimsSet.Builder builder = new Builder();\n+        for (Entry<String, Object> entry : attributes.entrySet()) {\n+            builder.claim(entry.getKey(), entry.getValue());\n+        }\n+        JWSObject jwsObject = null;\n+        try {\n+            jwsObject = JWSObject.parse(accessToken.getTokenValue());\n+        } catch (ParseException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM1OTg2Ng=="}, "originalCommit": {"oid": "073274635c3b0060bc54ee9bf640a642dbb8c306"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjU4NzMxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AzureJwtBearerTokenAuthenticationConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMjo1MDoxNlrOH27glg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzo1OToyNFrOH3EIvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2MDE1MA==", "bodyText": "Does this includes both scope_ and role_?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r527360150", "createdAt": "2020-11-20T02:50:16Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AzureJwtBearerTokenAuthenticationConverter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.azure.spring.autoconfigure.aad;\n+\n+import com.nimbusds.jose.JWSObject;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.JWTClaimsSet.Builder;\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\n+import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;\n+\n+/**\n+ *  A {@link Converter} that takes a {@link Jwt} and converts it into a {@link PreAuthenticatedAuthenticationToken}.\n+ */\n+public class AzureJwtBearerTokenAuthenticationConverter implements Converter<Jwt, AbstractAuthenticationToken> {\n+\n+    private final JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\n+\n+    public AzureJwtBearerTokenAuthenticationConverter() {\n+    }\n+\n+    public AbstractAuthenticationToken convert(Jwt jwt) {\n+        AbstractAuthenticationToken token = this.jwtAuthenticationConverter.convert(jwt);\n+        Collection<GrantedAuthority> authorities = token.getAuthorities();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "073274635c3b0060bc54ee9bf640a642dbb8c306"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUwMTUwMQ==", "bodyText": "Here is getting one of the two and seeing which one the user needs.Gets permissions in scp by default.Of course, the user can also be configured to obtain permissions in role.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r527501501", "createdAt": "2020-11-20T07:59:24Z", "author": {"login": "ZhuXiaoBing-cn"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AzureJwtBearerTokenAuthenticationConverter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.azure.spring.autoconfigure.aad;\n+\n+import com.nimbusds.jose.JWSObject;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.JWTClaimsSet.Builder;\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\n+import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;\n+\n+/**\n+ *  A {@link Converter} that takes a {@link Jwt} and converts it into a {@link PreAuthenticatedAuthenticationToken}.\n+ */\n+public class AzureJwtBearerTokenAuthenticationConverter implements Converter<Jwt, AbstractAuthenticationToken> {\n+\n+    private final JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\n+\n+    public AzureJwtBearerTokenAuthenticationConverter() {\n+    }\n+\n+    public AbstractAuthenticationToken convert(Jwt jwt) {\n+        AbstractAuthenticationToken token = this.jwtAuthenticationConverter.convert(jwt);\n+        Collection<GrantedAuthority> authorities = token.getAuthorities();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2MDE1MA=="}, "originalCommit": {"oid": "073274635c3b0060bc54ee9bf640a642dbb8c306"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjU5MDA1OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/autoconfigure/aad/AADResourceServerAutoConfigurationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMjo1MTo0OVrOH27iMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzo1Mzo1N1rOH3D_Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2MDU2MA==", "bodyText": "We need more test cases in this one", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r527360560", "createdAt": "2020-11-20T02:51:49Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/autoconfigure/aad/AADResourceServerAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.autoconfigure.aad;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.azure.spring.autoconfigure.aad.AADResourceServerAutoConfiguration.DefaultAzureOAuth2ResourceServerWebSecurityConfigurerAdapter;\n+import org.junit.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.jwt.JwtDecoder;\n+import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\n+\n+public class AADResourceServerAutoConfigurationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "073274635c3b0060bc54ee9bf640a642dbb8c306"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5OTAxOQ==", "bodyText": "okay.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r527499019", "createdAt": "2020-11-20T07:53:57Z", "author": {"login": "ZhuXiaoBing-cn"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/autoconfigure/aad/AADResourceServerAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.autoconfigure.aad;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.azure.spring.autoconfigure.aad.AADResourceServerAutoConfiguration.DefaultAzureOAuth2ResourceServerWebSecurityConfigurerAdapter;\n+import org.junit.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.jwt.JwtDecoder;\n+import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\n+\n+public class AADResourceServerAutoConfigurationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2MDU2MA=="}, "originalCommit": {"oid": "073274635c3b0060bc54ee9bf640a642dbb8c306"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjU5MDk2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/autoconfigure/aad/AzureJwtBearerTokenAuthenticationConverterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMjo1MjoyMVrOH27isQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzo1MzoxOFrOH3D-Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2MDY4OQ==", "bodyText": "Do we have tid?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r527360689", "createdAt": "2020-11-20T02:52:21Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/autoconfigure/aad/AzureJwtBearerTokenAuthenticationConverterTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.azure.spring.autoconfigure.aad;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.Test;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+\n+public class AzureJwtBearerTokenAuthenticationConverterTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "073274635c3b0060bc54ee9bf640a642dbb8c306"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5ODc4Ng==", "bodyText": "I'm going to add a method to the UserPrincipal to get the tid.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r527498786", "createdAt": "2020-11-20T07:53:18Z", "author": {"login": "ZhuXiaoBing-cn"}, "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/autoconfigure/aad/AzureJwtBearerTokenAuthenticationConverterTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.azure.spring.autoconfigure.aad;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.Test;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+\n+public class AzureJwtBearerTokenAuthenticationConverterTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2MDY4OQ=="}, "originalCommit": {"oid": "073274635c3b0060bc54ee9bf640a642dbb8c306"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDA1ODIxOnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/AzureActiveDirectoryResourceConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMjo1MDo1M1rOH3-BDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToyMDo1MFrOH4E0Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ0OTgwNw==", "bodyText": "better use resource.server here", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r528449807", "createdAt": "2020-11-23T02:50:53Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/AzureActiveDirectoryResourceConfiguration.java", "diffHunk": "@@ -1,8 +1,10 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n-package com.azure.spring.autoconfigure.aad;\n+package com.azure.spring.aad.resource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05d929d46d405ebe6a97a7ae6437a65869afe7fe"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU2MTE3OQ==", "bodyText": "okay", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r528561179", "createdAt": "2020-11-23T09:20:50Z", "author": {"login": "ZhuXiaoBing-cn"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/AzureActiveDirectoryResourceConfiguration.java", "diffHunk": "@@ -1,8 +1,10 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n-package com.azure.spring.autoconfigure.aad;\n+package com.azure.spring.aad.resource;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ0OTgwNw=="}, "originalCommit": {"oid": "05d929d46d405ebe6a97a7ae6437a65869afe7fe"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDA2MDg5OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/AzureActiveDirectoryResourceConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMjo1MzowOVrOH3-Clg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToyMDo1NVrOH4E0Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1MDE5OA==", "bodyText": "Maybe move this line up?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r528450198", "createdAt": "2020-11-23T02:53:09Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/AzureActiveDirectoryResourceConfiguration.java", "diffHunk": "@@ -86,8 +82,11 @@ public JwtDecoder jwtDecoderByJwkKeySetUri() {\n \n         @Override\n         protected void configure(HttpSecurity http) throws Exception {\n-            http.authorizeRequests((requests) -> requests.anyRequest().authenticated());\n-            http.oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);\n+            http\n+                .authorizeRequests((requests) -> requests.anyRequest().authenticated())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05d929d46d405ebe6a97a7ae6437a65869afe7fe"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU2MTIzOA==", "bodyText": "okay", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r528561238", "createdAt": "2020-11-23T09:20:55Z", "author": {"login": "ZhuXiaoBing-cn"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/AzureActiveDirectoryResourceConfiguration.java", "diffHunk": "@@ -86,8 +82,11 @@ public JwtDecoder jwtDecoderByJwkKeySetUri() {\n \n         @Override\n         protected void configure(HttpSecurity http) throws Exception {\n-            http.authorizeRequests((requests) -> requests.anyRequest().authenticated());\n-            http.oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);\n+            http\n+                .authorizeRequests((requests) -> requests.anyRequest().authenticated())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1MDE5OA=="}, "originalCommit": {"oid": "05d929d46d405ebe6a97a7ae6437a65869afe7fe"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDA2MTc2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/AzureJwtAudienceValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMjo1NDoxMVrOH3-DHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMjo1NDoxMVrOH3-DHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1MDMzNQ==", "bodyText": "Why do we choose Azure instead of AAD here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r528450335", "createdAt": "2020-11-23T02:54:11Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/AzureJwtAudienceValidator.java", "diffHunk": "@@ -12,17 +13,17 @@\n /**\n  * Validates the \"aud\" claim in a {@link Jwt}, that is matches a configured value\n  */\n-public class AADJwtAudienceValidator implements OAuth2TokenValidator<Jwt> {\n+public class AzureJwtAudienceValidator implements OAuth2TokenValidator<Jwt> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05d929d46d405ebe6a97a7ae6437a65869afe7fe"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDA2MzA2OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/AzureJwtBearerTokenAuthenticationConverter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwMjo1NTowNVrOH3-D2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToyNzo0NVrOH4FEWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1MDUyMg==", "bodyText": "Shouldn't we also log the exception?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r528450522", "createdAt": "2020-11-23T02:55:05Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/AzureJwtBearerTokenAuthenticationConverter.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.aad.resource;\n+\n+import com.azure.spring.autoconfigure.aad.UserPrincipal;\n+import com.azure.spring.autoconfigure.aad.UserPrincipalManager;\n+import com.nimbusds.jose.JWSObject;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.JWTClaimsSet.Builder;\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Map.Entry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\n+import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;\n+\n+/**\n+ * A {@link Converter} that takes a {@link Jwt} and converts it into a {@link PreAuthenticatedAuthenticationToken}.\n+ */\n+public class AzureJwtBearerTokenAuthenticationConverter implements Converter<Jwt, AbstractAuthenticationToken> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UserPrincipalManager.class);\n+    private final JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\n+\n+    public AzureJwtBearerTokenAuthenticationConverter() {\n+    }\n+\n+    public AbstractAuthenticationToken convert(Jwt jwt) {\n+        AbstractAuthenticationToken token = this.jwtAuthenticationConverter.convert(jwt);\n+        Collection<GrantedAuthority> authorities = token.getAuthorities();\n+        OAuth2AccessToken accessToken = new OAuth2AccessToken(TokenType.BEARER, jwt.getTokenValue(), jwt.getIssuedAt(),\n+            jwt.getExpiresAt());\n+        JWTClaimsSet.Builder builder = new Builder();\n+        for (Entry<String, Object> entry : jwt.getClaims().entrySet()) {\n+            builder.claim(entry.getKey(), entry.getValue());\n+        }\n+        JWTClaimsSet jwtClaimsSet = builder.build();\n+        JWSObject jwsObject = null;\n+        try {\n+            jwsObject = JWSObject.parse(accessToken.getTokenValue());\n+        } catch (ParseException e) {\n+            LOGGER.error(\"When create an instance of JWSObject, an exception is resolved on the access token.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05d929d46d405ebe6a97a7ae6437a65869afe7fe"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1MDY0Mg==", "bodyText": "Should we rethrow the exception here?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r528450642", "createdAt": "2020-11-23T02:55:38Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/AzureJwtBearerTokenAuthenticationConverter.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.aad.resource;\n+\n+import com.azure.spring.autoconfigure.aad.UserPrincipal;\n+import com.azure.spring.autoconfigure.aad.UserPrincipalManager;\n+import com.nimbusds.jose.JWSObject;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.JWTClaimsSet.Builder;\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Map.Entry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\n+import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;\n+\n+/**\n+ * A {@link Converter} that takes a {@link Jwt} and converts it into a {@link PreAuthenticatedAuthenticationToken}.\n+ */\n+public class AzureJwtBearerTokenAuthenticationConverter implements Converter<Jwt, AbstractAuthenticationToken> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UserPrincipalManager.class);\n+    private final JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\n+\n+    public AzureJwtBearerTokenAuthenticationConverter() {\n+    }\n+\n+    public AbstractAuthenticationToken convert(Jwt jwt) {\n+        AbstractAuthenticationToken token = this.jwtAuthenticationConverter.convert(jwt);\n+        Collection<GrantedAuthority> authorities = token.getAuthorities();\n+        OAuth2AccessToken accessToken = new OAuth2AccessToken(TokenType.BEARER, jwt.getTokenValue(), jwt.getIssuedAt(),\n+            jwt.getExpiresAt());\n+        JWTClaimsSet.Builder builder = new Builder();\n+        for (Entry<String, Object> entry : jwt.getClaims().entrySet()) {\n+            builder.claim(entry.getKey(), entry.getValue());\n+        }\n+        JWTClaimsSet jwtClaimsSet = builder.build();\n+        JWSObject jwsObject = null;\n+        try {\n+            jwsObject = JWSObject.parse(accessToken.getTokenValue());\n+        } catch (ParseException e) {\n+            LOGGER.error(\"When create an instance of JWSObject, an exception is resolved on the access token.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1MDUyMg=="}, "originalCommit": {"oid": "05d929d46d405ebe6a97a7ae6437a65869afe7fe"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU2NTMzOQ==", "bodyText": "I'll add the exception record, but we can't throw it.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r528565339", "createdAt": "2020-11-23T09:27:45Z", "author": {"login": "ZhuXiaoBing-cn"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/AzureJwtBearerTokenAuthenticationConverter.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.aad.resource;\n+\n+import com.azure.spring.autoconfigure.aad.UserPrincipal;\n+import com.azure.spring.autoconfigure.aad.UserPrincipalManager;\n+import com.nimbusds.jose.JWSObject;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.JWTClaimsSet.Builder;\n+import java.text.ParseException;\n+import java.util.Collection;\n+import java.util.Map.Entry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\n+import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;\n+\n+/**\n+ * A {@link Converter} that takes a {@link Jwt} and converts it into a {@link PreAuthenticatedAuthenticationToken}.\n+ */\n+public class AzureJwtBearerTokenAuthenticationConverter implements Converter<Jwt, AbstractAuthenticationToken> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(UserPrincipalManager.class);\n+    private final JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\n+\n+    public AzureJwtBearerTokenAuthenticationConverter() {\n+    }\n+\n+    public AbstractAuthenticationToken convert(Jwt jwt) {\n+        AbstractAuthenticationToken token = this.jwtAuthenticationConverter.convert(jwt);\n+        Collection<GrantedAuthority> authorities = token.getAuthorities();\n+        OAuth2AccessToken accessToken = new OAuth2AccessToken(TokenType.BEARER, jwt.getTokenValue(), jwt.getIssuedAt(),\n+            jwt.getExpiresAt());\n+        JWTClaimsSet.Builder builder = new Builder();\n+        for (Entry<String, Object> entry : jwt.getClaims().entrySet()) {\n+            builder.claim(entry.getKey(), entry.getValue());\n+        }\n+        JWTClaimsSet jwtClaimsSet = builder.build();\n+        JWSObject jwsObject = null;\n+        try {\n+            jwsObject = JWSObject.parse(accessToken.getTokenValue());\n+        } catch (ParseException e) {\n+            LOGGER.error(\"When create an instance of JWSObject, an exception is resolved on the access token.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1MDUyMg=="}, "originalCommit": {"oid": "05d929d46d405ebe6a97a7ae6437a65869afe7fe"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODY5ODI4OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/server/AzureJwtBearerTokenAuthenticationConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjo0NTozN1rOH4pqyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjo0NTozN1rOH4pqyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2NTAwMg==", "bodyText": "We should use another method, error(String, Throwable) here.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r529165002", "createdAt": "2020-11-24T02:45:37Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/server/AzureJwtBearerTokenAuthenticationConverter.java", "diffHunk": "@@ -46,7 +45,8 @@ public AbstractAuthenticationToken convert(Jwt jwt) {\n         try {\n             jwsObject = JWSObject.parse(accessToken.getTokenValue());\n         } catch (ParseException e) {\n-            LOGGER.error(\"When create an instance of JWSObject, an exception is resolved on the access token.\");\n+            LOGGER.error(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4d053e2902177133a7a8e8893e60494df3538a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODg0NTM0OnYy", "diffSide": "RIGHT", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/server/AzureJwtBearerTokenAuthenticationConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzoyNTo1OVrOH6KlFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzoyNTo1OVrOH6KlFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1Mjc5MQ==", "bodyText": "Change this doc.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17613#discussion_r530752791", "createdAt": "2020-11-26T03:25:59Z", "author": {"login": "saragluna"}, "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/resource/server/AzureJwtBearerTokenAuthenticationConverter.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.aad.resource.server;\n+\n+import java.util.Collection;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.server.resource.authentication.BearerTokenAuthentication;\n+import org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;\n+import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * A {@link Converter} that takes a {@link Jwt} and converts it into a {@link PreAuthenticatedAuthenticationToken}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd2155b9878f438147b1387fc51b0d412036f6b4"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2875, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}