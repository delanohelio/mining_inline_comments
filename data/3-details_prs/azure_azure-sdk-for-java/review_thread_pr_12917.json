{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NDI1NjQ1", "number": 12917, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxOTowNjowMlrOEMnmyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDoyNDoyMFrOEMpG7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjY3Mjc1OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosSyncStoredProcTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxOTowNjowMlrOGu1jKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxOToxNjowNFrOGu13YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc2NTAzMg==", "bodyText": "Nice.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12917#discussion_r451765032", "createdAt": "2020-07-08T19:06:02Z", "author": {"login": "kirankumarkolli"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosSyncStoredProcTest.java", "diffHunk": "@@ -148,19 +150,59 @@ public void deleteStoredProcedure() throws Exception {\n     }\n     @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n     public void executeStoredProcedure() throws Exception {\n-        CosmosStoredProcedureProperties sproc = new CosmosStoredProcedureProperties(\n+        CosmosStoredProcedureProperties storedProcedure = new CosmosStoredProcedureProperties(\n             UUID.randomUUID().toString(),\n-            \"function() {var x = 10;}\"\n-        );\n-\n-        CosmosStoredProcedureResponse response = container.getScripts().createStoredProcedure(sproc);\n+            \"function() {\" +\n+                \"        var mytext = \\\"x\\\";\" +\n+                \"        var myval = 1;\" +\n+                \"        try {\" +\n+                \"            console.log(\\\"The value of %s is %s.\\\", mytext, myval);\" +\n+                \"            getContext().getResponse().setBody(\\\"Success!\\\");\" +\n+                \"        }\" +\n+                \"        catch(err) {\" +\n+                \"            getContext().getResponse().setBody(\\\"inline err: [\\\" + err.number + \\\"] \\\" + err);\" +\n+                \"        }\" +\n+                \"}\");\n+\n+        container.getScripts().createStoredProcedure(storedProcedure);\n         CosmosStoredProcedureRequestOptions options = new CosmosStoredProcedureRequestOptions();\n         options.setPartitionKey(PartitionKey.NONE);\n         CosmosStoredProcedureResponse executeResponse = container.getScripts()\n-                                                                 .getStoredProcedure(sproc.getId())\n+                                                                 .getStoredProcedure(storedProcedure.getId())\n                                                                  .execute(null, options);\n \n         assertThat(executeResponse.getActivityId()).isNotEmpty();\n+        assertThat(executeResponse.getScriptLog()).isNull();\n+    }\n+\n+    @Test(groups = \"simple\", timeOut = TIMEOUT)\n+    public void executeStoredProcedureWithScriptLoggingEnabled() throws Exception {\n+        // Create a stored procedure\n+        CosmosStoredProcedureProperties storedProcedure = new CosmosStoredProcedureProperties(\n+            UUID.randomUUID().toString(),\n+            \"function() {\" +\n+                \"        var mytext = \\\"x\\\";\" +\n+                \"        var myval = 1;\" +\n+                \"        try {\" +\n+                \"            console.log(\\\"The value of %s is %s.\\\", mytext, myval);\" +\n+                \"            getContext().getResponse().setBody(\\\"Success!\\\");\" +\n+                \"        }\" +\n+                \"        catch(err) {\" +\n+                \"            getContext().getResponse().setBody(\\\"inline err: [\\\" + err.number + \\\"] \\\" + err);\" +\n+                \"        }\" +\n+                \"}\");\n+\n+        container.getScripts().createStoredProcedure(storedProcedure);\n+        CosmosStoredProcedureRequestOptions options = new CosmosStoredProcedureRequestOptions();\n+        options.setScriptLoggingEnabled(true);\n+        options.setPartitionKey(PartitionKey.NONE);\n+\n+        CosmosStoredProcedureResponse executeResponse = container.getScripts()\n+                                                                 .getStoredProcedure(storedProcedure.getId())\n+                                                                 .execute(null, options);\n+\n+        String logResult = \"The value of x is 1.\";\n+        assertThat(URLDecoder.decode(executeResponse.getScriptLog(), StandardCharsets.UTF_8)).isEqualTo(logResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717e551a2a3bc53fa96667765e99c735d2086035"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc3MDIwOQ==", "bodyText": "I wonder whose job it is to do the decoding? is it the SDK job to decode scriptLog or the user?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12917#discussion_r451770209", "createdAt": "2020-07-08T19:16:04Z", "author": {"login": "moderakh"}, "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosSyncStoredProcTest.java", "diffHunk": "@@ -148,19 +150,59 @@ public void deleteStoredProcedure() throws Exception {\n     }\n     @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n     public void executeStoredProcedure() throws Exception {\n-        CosmosStoredProcedureProperties sproc = new CosmosStoredProcedureProperties(\n+        CosmosStoredProcedureProperties storedProcedure = new CosmosStoredProcedureProperties(\n             UUID.randomUUID().toString(),\n-            \"function() {var x = 10;}\"\n-        );\n-\n-        CosmosStoredProcedureResponse response = container.getScripts().createStoredProcedure(sproc);\n+            \"function() {\" +\n+                \"        var mytext = \\\"x\\\";\" +\n+                \"        var myval = 1;\" +\n+                \"        try {\" +\n+                \"            console.log(\\\"The value of %s is %s.\\\", mytext, myval);\" +\n+                \"            getContext().getResponse().setBody(\\\"Success!\\\");\" +\n+                \"        }\" +\n+                \"        catch(err) {\" +\n+                \"            getContext().getResponse().setBody(\\\"inline err: [\\\" + err.number + \\\"] \\\" + err);\" +\n+                \"        }\" +\n+                \"}\");\n+\n+        container.getScripts().createStoredProcedure(storedProcedure);\n         CosmosStoredProcedureRequestOptions options = new CosmosStoredProcedureRequestOptions();\n         options.setPartitionKey(PartitionKey.NONE);\n         CosmosStoredProcedureResponse executeResponse = container.getScripts()\n-                                                                 .getStoredProcedure(sproc.getId())\n+                                                                 .getStoredProcedure(storedProcedure.getId())\n                                                                  .execute(null, options);\n \n         assertThat(executeResponse.getActivityId()).isNotEmpty();\n+        assertThat(executeResponse.getScriptLog()).isNull();\n+    }\n+\n+    @Test(groups = \"simple\", timeOut = TIMEOUT)\n+    public void executeStoredProcedureWithScriptLoggingEnabled() throws Exception {\n+        // Create a stored procedure\n+        CosmosStoredProcedureProperties storedProcedure = new CosmosStoredProcedureProperties(\n+            UUID.randomUUID().toString(),\n+            \"function() {\" +\n+                \"        var mytext = \\\"x\\\";\" +\n+                \"        var myval = 1;\" +\n+                \"        try {\" +\n+                \"            console.log(\\\"The value of %s is %s.\\\", mytext, myval);\" +\n+                \"            getContext().getResponse().setBody(\\\"Success!\\\");\" +\n+                \"        }\" +\n+                \"        catch(err) {\" +\n+                \"            getContext().getResponse().setBody(\\\"inline err: [\\\" + err.number + \\\"] \\\" + err);\" +\n+                \"        }\" +\n+                \"}\");\n+\n+        container.getScripts().createStoredProcedure(storedProcedure);\n+        CosmosStoredProcedureRequestOptions options = new CosmosStoredProcedureRequestOptions();\n+        options.setScriptLoggingEnabled(true);\n+        options.setPartitionKey(PartitionKey.NONE);\n+\n+        CosmosStoredProcedureResponse executeResponse = container.getScripts()\n+                                                                 .getStoredProcedure(storedProcedure.getId())\n+                                                                 .execute(null, options);\n+\n+        String logResult = \"The value of x is 1.\";\n+        assertThat(URLDecoder.decode(executeResponse.getScriptLog(), StandardCharsets.UTF_8)).isEqualTo(logResult);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc2NTAzMg=="}, "originalCommit": {"oid": "717e551a2a3bc53fa96667765e99c735d2086035"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjg5ODUyOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosStoredProcedureRequestOptions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDoxNzo1OVrOGu3w0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDoyMTo1NlrOGu34gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMTI5OQ==", "bodyText": "NIT - add comment for default value", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12917#discussion_r451801299", "createdAt": "2020-07-08T20:17:59Z", "author": {"login": "FabianMeiswinkel"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosStoredProcedureRequestOptions.java", "diffHunk": "@@ -115,13 +116,36 @@ public CosmosStoredProcedureRequestOptions setSessionToken(String sessionToken)\n         return this;\n     }\n \n+    /**\n+     * Gets whether Javascript stored procedure logging is enabled for the current request in the Azure Cosmos DB database\n+     * service or not.\n+     *\n+     * @return true if Javascript stored procedure logging is enabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc28a3389c94243758e75f332f155058f5ffe6bd"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMzI2Nw==", "bodyText": "Good point, added default value to java docs", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12917#discussion_r451803267", "createdAt": "2020-07-08T20:21:56Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosStoredProcedureRequestOptions.java", "diffHunk": "@@ -115,13 +116,36 @@ public CosmosStoredProcedureRequestOptions setSessionToken(String sessionToken)\n         return this;\n     }\n \n+    /**\n+     * Gets whether Javascript stored procedure logging is enabled for the current request in the Azure Cosmos DB database\n+     * service or not.\n+     *\n+     * @return true if Javascript stored procedure logging is enabled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMTI5OQ=="}, "originalCommit": {"oid": "bc28a3389c94243758e75f332f155058f5ffe6bd"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjkxMTIzOnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Utils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDoyMjowMFrOGu34sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDozNzoyNFrOGu4W5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMzMxMw==", "bodyText": "Can we use StringUtils.isEmpty here ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12917#discussion_r451803313", "createdAt": "2020-07-08T20:22:00Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Utils.java", "diffHunk": "@@ -94,6 +100,18 @@ public static String encodeBase64String(byte[] binaryData) {\n         return encodedString;\n     }\n \n+    public static String decodeAsUTF8String(String inputString) {\n+        if (inputString == null || inputString.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc28a3389c94243758e75f332f155058f5ffe6bd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMTA0Nw==", "bodyText": "Yes, we can do that too.\nSince this is implementation detail, will change it in next PR .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12917#discussion_r451811047", "createdAt": "2020-07-08T20:37:24Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Utils.java", "diffHunk": "@@ -94,6 +100,18 @@ public static String encodeBase64String(byte[] binaryData) {\n         return encodedString;\n     }\n \n+    public static String decodeAsUTF8String(String inputString) {\n+        if (inputString == null || inputString.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMzMxMw=="}, "originalCommit": {"oid": "bc28a3389c94243758e75f332f155058f5ffe6bd"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjkxODg2OnYy", "diffSide": "RIGHT", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosStoredProcedureRequestOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDoyNDoyMFrOGu39fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDozNzowNVrOGu4WUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNDU0Mw==", "bodyText": "How about mentioning default value in documentation ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12917#discussion_r451804543", "createdAt": "2020-07-08T20:24:20Z", "author": {"login": "simplynaveen20"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosStoredProcedureRequestOptions.java", "diffHunk": "@@ -115,13 +116,36 @@ public CosmosStoredProcedureRequestOptions setSessionToken(String sessionToken)\n         return this;\n     }\n \n+    /**\n+     * Gets whether Javascript stored procedure logging is enabled for the current request in the Azure Cosmos DB database\n+     * service or not.\n+     *\n+     * @return true if Javascript stored procedure logging is enabled\n+     */\n+    public boolean isScriptLoggingEnabled() {\n+        return scriptLoggingEnabled;\n+    }\n+\n+    /**\n+     * Sets whether Javascript stored procedure logging is enabled for the current request in the Azure Cosmos DB database", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc28a3389c94243758e75f332f155058f5ffe6bd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMDg5Ng==", "bodyText": "Done.", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12917#discussion_r451810896", "createdAt": "2020-07-08T20:37:05Z", "author": {"login": "kushagraThapar"}, "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosStoredProcedureRequestOptions.java", "diffHunk": "@@ -115,13 +116,36 @@ public CosmosStoredProcedureRequestOptions setSessionToken(String sessionToken)\n         return this;\n     }\n \n+    /**\n+     * Gets whether Javascript stored procedure logging is enabled for the current request in the Azure Cosmos DB database\n+     * service or not.\n+     *\n+     * @return true if Javascript stored procedure logging is enabled\n+     */\n+    public boolean isScriptLoggingEnabled() {\n+        return scriptLoggingEnabled;\n+    }\n+\n+    /**\n+     * Sets whether Javascript stored procedure logging is enabled for the current request in the Azure Cosmos DB database", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNDU0Mw=="}, "originalCommit": {"oid": "bc28a3389c94243758e75f332f155058f5ffe6bd"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3591, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}