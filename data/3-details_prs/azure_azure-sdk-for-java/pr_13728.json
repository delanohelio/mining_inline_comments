{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxOTczMzg2", "number": 13728, "title": "Topic and Subscription management changes ", "bodyText": "Add CreateTopicOptions and CreateSubscriptionOptions.\nRename to TopicProperties and SubscriptionProperties.\nRename MessageCount to TotalMessageCount.\n\nRelated to: #13000", "createdAt": "2020-08-03T06:32:57Z", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13728", "merged": true, "mergeCommit": {"oid": "b7d463bf0edf93c671118bf6f2f3934008a7acd8"}, "closed": true, "closedAt": "2020-08-06T08:54:32Z", "author": {"login": "conniey"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7FcYEAH2gAyNDYxOTczMzg2Ojg3MDU3N2YxMzBiMWFjMzYxZGFkNWRjYzYyNjlhZjJmOTA3YTg5NzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8LC-ygH2gAyNDYxOTczMzg2OmNkODkwMTZjNzAzODc2NjhmNGRmYTQyN2RkMmU0ZDA4NjgxYjBiZGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "870577f130b1ac361dad5dcc6269af2f907a8975", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/870577f130b1ac361dad5dcc6269af2f907a8975", "committedDate": "2020-08-02T22:48:08Z", "message": "Updating Service Bus Constants."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c9eeae8154cba40a6cdad6174ede93952f6c4a2", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1c9eeae8154cba40a6cdad6174ede93952f6c4a2", "committedDate": "2020-08-03T04:34:39Z", "message": "Adding CreateTopicOptions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52bd52694dc296ae33b6f058a00450b7dded5ad8", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/52bd52694dc296ae33b6f058a00450b7dded5ad8", "committedDate": "2020-08-03T04:59:27Z", "message": "Adding CreateTopicOptionsTest."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "649d444325bda5013d3af9b73ca273f2561219e4", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/649d444325bda5013d3af9b73ca273f2561219e4", "committedDate": "2020-08-03T04:59:43Z", "message": "Adding TopicAccessor.createTopic."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a194439854a2323f8fd97b6728f17562b565cda", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2a194439854a2323f8fd97b6728f17562b565cda", "committedDate": "2020-08-03T05:12:33Z", "message": "Fixing build breaks and using CreateTopicOptions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8652ecab6408f25348344e70d5567807c11e4be", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/d8652ecab6408f25348344e70d5567807c11e4be", "committedDate": "2020-08-03T05:22:24Z", "message": "Fixing spotbugs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bf7b4d8df5510dc455b9285d82d6a4a81f8379e", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/4bf7b4d8df5510dc455b9285d82d6a4a81f8379e", "committedDate": "2020-08-03T05:23:05Z", "message": "Rename TopicDescription.java to TopicProperties."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "625890de5090b2a1a336fe7139e586fad466f504", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/625890de5090b2a1a336fe7139e586fad466f504", "committedDate": "2020-08-03T05:46:52Z", "message": "Adding CreateSubscriptionOptions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9209f94881db3dfecd7c048291f574b0f0d15084", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9209f94881db3dfecd7c048291f574b0f0d15084", "committedDate": "2020-08-03T06:05:23Z", "message": "Exposing CreateSubscriptionOptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4725eb26bd64516816733ca5a8344e228d7c156", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/e4725eb26bd64516816733ca5a8344e228d7c156", "committedDate": "2020-08-03T06:08:30Z", "message": "Add Status to Topic."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b85081655c2d8120da9d7ea1dc7dcd2557f591b", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b85081655c2d8120da9d7ea1dc7dcd2557f591b", "committedDate": "2020-08-03T06:15:11Z", "message": "Adding tests for entityhelper."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd2eb56e84ff6eb99bd298280eac13af85fd6c55", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/fd2eb56e84ff6eb99bd298280eac13af85fd6c55", "committedDate": "2020-08-03T06:21:24Z", "message": "Rename to SubscriptionProperties."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "719e50a760fce2cdc62f6a92ace6a3c50b69b4b2", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/719e50a760fce2cdc62f6a92ace6a3c50b69b4b2", "committedDate": "2020-08-03T06:30:51Z", "message": "Fix test errors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a66e173c579b3d566ad4a3edd17ab44bcd4a5a8", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1a66e173c579b3d566ad4a3edd17ab44bcd4a5a8", "committedDate": "2020-08-03T06:33:46Z", "message": "Fix checkstyles."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f75052be56060fcfb9eaf4d8e447c6ef67af7e6", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8f75052be56060fcfb9eaf4d8e447c6ef67af7e6", "committedDate": "2020-08-03T06:37:49Z", "message": "Rename to getTotalMessageCount."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMjY2NDYz", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13728#pullrequestreview-460266463", "createdAt": "2020-08-03T18:56:27Z", "commit": {"oid": "8f75052be56060fcfb9eaf4d8e447c6ef67af7e6"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo1NjoyN1rOG7FFMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxOToyNzo1NFrOG7F-yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwMjQxOQ==", "bodyText": "Can we check other properties which are sent in \"arrange\" section  for example  RequiresSession , MaxDeliveryCount", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13728#discussion_r464602419", "createdAt": "2020-08-03T18:56:27Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/implementation/EntityHelperTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.implementation;\n+\n+import com.azure.messaging.servicebus.models.CreateSubscriptionOptions;\n+import com.azure.messaging.servicebus.models.CreateTopicOptions;\n+import com.azure.messaging.servicebus.models.EntityStatus;\n+import com.azure.messaging.servicebus.models.SubscriptionProperties;\n+import com.azure.messaging.servicebus.models.TopicProperties;\n+import org.junit.jupiter.api.Test;\n+\n+import java.time.Duration;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class EntityHelperTest {\n+    @Test\n+    void createTopic() {\n+        // Arrange\n+        final String queueName = \"some-topic\";\n+        final CreateTopicOptions expected = new CreateTopicOptions(queueName)\n+            .setAutoDeleteOnIdle(Duration.ofSeconds(15))\n+            .setDefaultMessageTimeToLive(Duration.ofSeconds(50))\n+            .setDeadLetteringOnMessageExpiration(true)\n+            .setDuplicateDetectionHistoryTimeWindow(Duration.ofSeconds(13))\n+            .setEnableBatchedOperations(false)\n+            .setEnablePartitioning(true)\n+            .setForwardTo(\"Forward-To-This-Queue\")\n+            .setForwardDeadLetteredMessagesTo(\"Dead-Lettered-Forward-To\")\n+            .setLockDuration(Duration.ofSeconds(120))\n+            .setMaxDeliveryCount(15)\n+            .setMaxSizeInMegabytes(2048)\n+            .setRequiresDuplicateDetection(true)\n+            .setRequiresSession(true)\n+            .setStatus(EntityStatus.RECEIVE_DISABLED)\n+            .setUserMetadata(\"Test-queue-Metadata\");\n+\n+        // Act\n+        final TopicProperties actual = EntityHelper.createTopic(expected);\n+\n+        // Assert\n+        assertEquals(expected.getName(), actual.getName());\n+        assertEquals(expected.getAutoDeleteOnIdle(), actual.getAutoDeleteOnIdle());\n+        assertEquals(expected.getDefaultMessageTimeToLive(), actual.getDefaultMessageTimeToLive());\n+        assertEquals(expected.getDuplicateDetectionHistoryTimeWindow(), actual.getDuplicateDetectionHistoryTimeWindow());\n+        assertEquals(expected.enableBatchedOperations(), actual.enableBatchedOperations());\n+        assertEquals(expected.enablePartitioning(), actual.enablePartitioning());\n+        assertEquals(expected.requiresDuplicateDetection(), actual.requiresDuplicateDetection());\n+        assertEquals(expected.getUserMetadata(), actual.getUserMetadata());\n+        assertEquals(expected.getStatus(), actual.getStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75052be56060fcfb9eaf4d8e447c6ef67af7e6"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwMzA5Mg==", "bodyText": "same as above, checking properties which are set in  \"arrange\" section .", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13728#discussion_r464603092", "createdAt": "2020-08-03T18:57:47Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/implementation/EntityHelperTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.implementation;\n+\n+import com.azure.messaging.servicebus.models.CreateSubscriptionOptions;\n+import com.azure.messaging.servicebus.models.CreateTopicOptions;\n+import com.azure.messaging.servicebus.models.EntityStatus;\n+import com.azure.messaging.servicebus.models.SubscriptionProperties;\n+import com.azure.messaging.servicebus.models.TopicProperties;\n+import org.junit.jupiter.api.Test;\n+\n+import java.time.Duration;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class EntityHelperTest {\n+    @Test\n+    void createTopic() {\n+        // Arrange\n+        final String queueName = \"some-topic\";\n+        final CreateTopicOptions expected = new CreateTopicOptions(queueName)\n+            .setAutoDeleteOnIdle(Duration.ofSeconds(15))\n+            .setDefaultMessageTimeToLive(Duration.ofSeconds(50))\n+            .setDeadLetteringOnMessageExpiration(true)\n+            .setDuplicateDetectionHistoryTimeWindow(Duration.ofSeconds(13))\n+            .setEnableBatchedOperations(false)\n+            .setEnablePartitioning(true)\n+            .setForwardTo(\"Forward-To-This-Queue\")\n+            .setForwardDeadLetteredMessagesTo(\"Dead-Lettered-Forward-To\")\n+            .setLockDuration(Duration.ofSeconds(120))\n+            .setMaxDeliveryCount(15)\n+            .setMaxSizeInMegabytes(2048)\n+            .setRequiresDuplicateDetection(true)\n+            .setRequiresSession(true)\n+            .setStatus(EntityStatus.RECEIVE_DISABLED)\n+            .setUserMetadata(\"Test-queue-Metadata\");\n+\n+        // Act\n+        final TopicProperties actual = EntityHelper.createTopic(expected);\n+\n+        // Assert\n+        assertEquals(expected.getName(), actual.getName());\n+        assertEquals(expected.getAutoDeleteOnIdle(), actual.getAutoDeleteOnIdle());\n+        assertEquals(expected.getDefaultMessageTimeToLive(), actual.getDefaultMessageTimeToLive());\n+        assertEquals(expected.getDuplicateDetectionHistoryTimeWindow(), actual.getDuplicateDetectionHistoryTimeWindow());\n+        assertEquals(expected.enableBatchedOperations(), actual.enableBatchedOperations());\n+        assertEquals(expected.enablePartitioning(), actual.enablePartitioning());\n+        assertEquals(expected.requiresDuplicateDetection(), actual.requiresDuplicateDetection());\n+        assertEquals(expected.getUserMetadata(), actual.getUserMetadata());\n+        assertEquals(expected.getStatus(), actual.getStatus());\n+    }\n+\n+    @Test\n+    void setTopicName() {\n+        // Arrange\n+        final String newName = \"I'm a new name\";\n+        final CreateTopicOptions options = new CreateTopicOptions(\"some name\");\n+        final TopicProperties properties = EntityHelper.createTopic(options);\n+\n+        // Act\n+        EntityHelper.setTopicName(properties, newName);\n+\n+        // Assert\n+        assertEquals(newName, properties.getName());\n+    }\n+\n+    @Test\n+    void createSubscription() {\n+        // Arrange\n+        final String topicName = \"topic?\";\n+        final String subscriptionName = \"subscription\";\n+        final CreateSubscriptionOptions expected = new CreateSubscriptionOptions(topicName, subscriptionName)\n+            .setAutoDeleteOnIdle(Duration.ofSeconds(15))\n+            .setDefaultMessageTimeToLive(Duration.ofSeconds(50))\n+            .setDeadLetteringOnMessageExpiration(true)\n+            .setEnableDeadLetteringOnFilterEvaluationExceptions(true)\n+            .setEnableBatchedOperations(false)\n+            .setForwardTo(\"Forward-To-This-Queue\")\n+            .setForwardDeadLetteredMessagesTo(\"Dead-Lettered-Forward-To\")\n+            .setLockDuration(Duration.ofSeconds(120))\n+            .setMaxDeliveryCount(15)\n+            .setRequiresSession(true)\n+            .setStatus(EntityStatus.RECEIVE_DISABLED)\n+            .setUserMetadata(\"Test-queue-Metadata\");\n+\n+        // Act\n+        final SubscriptionProperties actual = EntityHelper.createSubscription(expected);\n+\n+        // Assert\n+        assertEquals(expected.getTopicName(), actual.getTopicName());\n+        assertEquals(expected.getSubscriptionName(), actual.getSubscriptionName());\n+        assertEquals(expected.getAutoDeleteOnIdle(), actual.getAutoDeleteOnIdle());\n+        assertEquals(expected.getDefaultMessageTimeToLive(), actual.getDefaultMessageTimeToLive());\n+        assertEquals(expected.enableDeadLetteringOnFilterEvaluationExceptions(),\n+            actual.enableDeadLetteringOnFilterEvaluationExceptions());\n+        assertEquals(expected.enableBatchedOperations(), actual.enableBatchedOperations());\n+        assertEquals(expected.getUserMetadata(), actual.getUserMetadata());\n+        assertEquals(expected.getStatus(), actual.getStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75052be56060fcfb9eaf4d8e447c6ef67af7e6"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYxNTQ4MA==", "bodyText": "isAutoDeleteOnIdle() ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13728#discussion_r464615480", "createdAt": "2020-08-03T19:24:10Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/models/CreateTopicOptions.java", "diffHunk": "@@ -0,0 +1,464 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.models;\n+\n+\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_DUPLICATE_DETECTION_DURATION;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_LOCK_DURATION;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_MAX_DELIVERY_COUNT;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_TOPIC_SIZE;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.MAX_DURATION;\n+\n+/**\n+ * Represents the set of options that can be specified for the creation of a queue.\n+ */\n+public class CreateTopicOptions {\n+    private final String name;\n+\n+    private Duration autoDeleteOnIdle;\n+    private Duration defaultMessageTimeToLive;\n+    private boolean deadLetteringOnMessageExpiration;\n+    private Duration duplicateDetectionHistoryTimeWindow;\n+    private boolean enableBatchedOperations;\n+    private boolean enablePartitioning;\n+    private String forwardTo;\n+    private String forwardDeadLetteredMessagesTo;\n+    private Duration lockDuration;\n+    private int maxDeliveryCount;\n+    private long maxSizeInMegabytes;\n+    private boolean requiresDuplicateDetection;\n+    private boolean requiresSession;\n+    private EntityStatus status;\n+    private String userMetadata;\n+\n+    /**\n+     * Creates an instance with the name of the topic. Default values for the topic are populated. The properties\n+     * populated with defaults are:\n+     *\n+     * <ul>\n+     *     <li>{@link #setAutoDeleteOnIdle(Duration)} is max duration value.</li>\n+     *     <li>{@link #setDefaultMessageTimeToLive(Duration)} is max duration value.</li>\n+     *     <li>{@link #setDuplicateDetectionHistoryTimeWindow(Duration)} is max duration value, but duplication\n+     *     detection is disabled.</li>\n+     *     <li>{@link #setRequiresDuplicateDetection(boolean)} is false.</li>\n+     *     <li>{@link #setEnableBatchedOperations(boolean)} is true.</li>\n+     *     <li>{@link #setLockDuration(Duration)} is 1 minute.</li>\n+     *     <li>{@link #setMaxDeliveryCount(int)} is 10.</li>\n+     *     <li>{@link #setMaxSizeInMegabytes(long)} is 1024MB.</li>\n+     *     <li>{@link #setRequiresSession(boolean)} is false.</li>\n+     *     <li>{@link #setStatus(EntityStatus)} is {@link EntityStatus#ACTIVE}.</li>\n+     * </ul>\n+     *\n+     * @param topicName Name of the queue.\n+     *\n+     * @throws NullPointerException if {@code topicName} is a null.\n+     * @throws IllegalArgumentException if {@code topicName} is an empty string.\n+     */\n+    public CreateTopicOptions(String topicName) {\n+        Objects.requireNonNull(topicName, \"'topicName' cannot be null.\");\n+\n+        if (topicName.isEmpty()) {\n+            ClientLogger logger = new ClientLogger(CreateTopicOptions.class);\n+            throw logger.logThrowableAsError(new IllegalArgumentException(\"Topic name cannot be empty.\"));\n+        }\n+\n+        this.name = topicName;\n+        this.autoDeleteOnIdle = MAX_DURATION;\n+        this.defaultMessageTimeToLive = MAX_DURATION;\n+        this.duplicateDetectionHistoryTimeWindow = DEFAULT_DUPLICATE_DETECTION_DURATION;\n+        this.enableBatchedOperations = true;\n+        this.enablePartitioning = false;\n+        this.lockDuration = DEFAULT_LOCK_DURATION;\n+        this.maxDeliveryCount = DEFAULT_MAX_DELIVERY_COUNT;\n+        this.maxSizeInMegabytes = DEFAULT_TOPIC_SIZE;\n+        this.requiresDuplicateDetection = false;\n+        this.requiresSession = false;\n+        this.status = EntityStatus.ACTIVE;\n+        this.deadLetteringOnMessageExpiration = false;\n+    }\n+\n+    /**\n+     * Initializes a new instance based on the specified {@link CreateTopicOptions} instance. This is useful for\n+     * creating a new topic based on the properties of an existing topicOptions.\n+     *\n+     * @param topicOptions Existing topicOptions to create options with.\n+     */\n+    public CreateTopicOptions(TopicProperties topicOptions) {\n+        Objects.requireNonNull(topicOptions, \"'topicOptions' cannot be null.\");\n+        Objects.requireNonNull(topicOptions.getName(), \"Topic name cannot be null\");\n+\n+        if (topicOptions.getName().isEmpty()) {\n+            final ClientLogger logger = new ClientLogger(CreateTopicOptions.class);\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"Topic name cannot be empty.\"));\n+        }\n+\n+        this.name = topicOptions.getName();\n+        this.autoDeleteOnIdle = topicOptions.getAutoDeleteOnIdle();\n+        this.defaultMessageTimeToLive = topicOptions.getDefaultMessageTimeToLive();\n+        this.duplicateDetectionHistoryTimeWindow = topicOptions.getDuplicateDetectionHistoryTimeWindow();\n+        this.enableBatchedOperations = topicOptions.enableBatchedOperations();\n+        this.enablePartitioning = topicOptions.enablePartitioning();\n+        this.maxSizeInMegabytes = topicOptions.getMaxSizeInMegabytes();\n+        this.requiresDuplicateDetection = topicOptions.requiresDuplicateDetection();\n+        this.status = topicOptions.getStatus();\n+        this.userMetadata = topicOptions.getUserMetadata();\n+    }\n+\n+    /**\n+     * Gets the name of the queue.\n+     *\n+     * @return The name of the queue.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Get the autoDeleteOnIdle property: ISO 8601 timeSpan idle interval after which the queue is automatically\n+     * deleted. The minimum duration is 5 minutes.\n+     *\n+     * @return the autoDeleteOnIdle value.\n+     */\n+    public Duration getAutoDeleteOnIdle() {\n+        return this.autoDeleteOnIdle;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75052be56060fcfb9eaf4d8e447c6ef67af7e6"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYxNjE1NQ==", "bodyText": "Should we check for mon value or negative value ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13728#discussion_r464616155", "createdAt": "2020-08-03T19:25:32Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/models/CreateTopicOptions.java", "diffHunk": "@@ -0,0 +1,464 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.models;\n+\n+\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_DUPLICATE_DETECTION_DURATION;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_LOCK_DURATION;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_MAX_DELIVERY_COUNT;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_TOPIC_SIZE;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.MAX_DURATION;\n+\n+/**\n+ * Represents the set of options that can be specified for the creation of a queue.\n+ */\n+public class CreateTopicOptions {\n+    private final String name;\n+\n+    private Duration autoDeleteOnIdle;\n+    private Duration defaultMessageTimeToLive;\n+    private boolean deadLetteringOnMessageExpiration;\n+    private Duration duplicateDetectionHistoryTimeWindow;\n+    private boolean enableBatchedOperations;\n+    private boolean enablePartitioning;\n+    private String forwardTo;\n+    private String forwardDeadLetteredMessagesTo;\n+    private Duration lockDuration;\n+    private int maxDeliveryCount;\n+    private long maxSizeInMegabytes;\n+    private boolean requiresDuplicateDetection;\n+    private boolean requiresSession;\n+    private EntityStatus status;\n+    private String userMetadata;\n+\n+    /**\n+     * Creates an instance with the name of the topic. Default values for the topic are populated. The properties\n+     * populated with defaults are:\n+     *\n+     * <ul>\n+     *     <li>{@link #setAutoDeleteOnIdle(Duration)} is max duration value.</li>\n+     *     <li>{@link #setDefaultMessageTimeToLive(Duration)} is max duration value.</li>\n+     *     <li>{@link #setDuplicateDetectionHistoryTimeWindow(Duration)} is max duration value, but duplication\n+     *     detection is disabled.</li>\n+     *     <li>{@link #setRequiresDuplicateDetection(boolean)} is false.</li>\n+     *     <li>{@link #setEnableBatchedOperations(boolean)} is true.</li>\n+     *     <li>{@link #setLockDuration(Duration)} is 1 minute.</li>\n+     *     <li>{@link #setMaxDeliveryCount(int)} is 10.</li>\n+     *     <li>{@link #setMaxSizeInMegabytes(long)} is 1024MB.</li>\n+     *     <li>{@link #setRequiresSession(boolean)} is false.</li>\n+     *     <li>{@link #setStatus(EntityStatus)} is {@link EntityStatus#ACTIVE}.</li>\n+     * </ul>\n+     *\n+     * @param topicName Name of the queue.\n+     *\n+     * @throws NullPointerException if {@code topicName} is a null.\n+     * @throws IllegalArgumentException if {@code topicName} is an empty string.\n+     */\n+    public CreateTopicOptions(String topicName) {\n+        Objects.requireNonNull(topicName, \"'topicName' cannot be null.\");\n+\n+        if (topicName.isEmpty()) {\n+            ClientLogger logger = new ClientLogger(CreateTopicOptions.class);\n+            throw logger.logThrowableAsError(new IllegalArgumentException(\"Topic name cannot be empty.\"));\n+        }\n+\n+        this.name = topicName;\n+        this.autoDeleteOnIdle = MAX_DURATION;\n+        this.defaultMessageTimeToLive = MAX_DURATION;\n+        this.duplicateDetectionHistoryTimeWindow = DEFAULT_DUPLICATE_DETECTION_DURATION;\n+        this.enableBatchedOperations = true;\n+        this.enablePartitioning = false;\n+        this.lockDuration = DEFAULT_LOCK_DURATION;\n+        this.maxDeliveryCount = DEFAULT_MAX_DELIVERY_COUNT;\n+        this.maxSizeInMegabytes = DEFAULT_TOPIC_SIZE;\n+        this.requiresDuplicateDetection = false;\n+        this.requiresSession = false;\n+        this.status = EntityStatus.ACTIVE;\n+        this.deadLetteringOnMessageExpiration = false;\n+    }\n+\n+    /**\n+     * Initializes a new instance based on the specified {@link CreateTopicOptions} instance. This is useful for\n+     * creating a new topic based on the properties of an existing topicOptions.\n+     *\n+     * @param topicOptions Existing topicOptions to create options with.\n+     */\n+    public CreateTopicOptions(TopicProperties topicOptions) {\n+        Objects.requireNonNull(topicOptions, \"'topicOptions' cannot be null.\");\n+        Objects.requireNonNull(topicOptions.getName(), \"Topic name cannot be null\");\n+\n+        if (topicOptions.getName().isEmpty()) {\n+            final ClientLogger logger = new ClientLogger(CreateTopicOptions.class);\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"Topic name cannot be empty.\"));\n+        }\n+\n+        this.name = topicOptions.getName();\n+        this.autoDeleteOnIdle = topicOptions.getAutoDeleteOnIdle();\n+        this.defaultMessageTimeToLive = topicOptions.getDefaultMessageTimeToLive();\n+        this.duplicateDetectionHistoryTimeWindow = topicOptions.getDuplicateDetectionHistoryTimeWindow();\n+        this.enableBatchedOperations = topicOptions.enableBatchedOperations();\n+        this.enablePartitioning = topicOptions.enablePartitioning();\n+        this.maxSizeInMegabytes = topicOptions.getMaxSizeInMegabytes();\n+        this.requiresDuplicateDetection = topicOptions.requiresDuplicateDetection();\n+        this.status = topicOptions.getStatus();\n+        this.userMetadata = topicOptions.getUserMetadata();\n+    }\n+\n+    /**\n+     * Gets the name of the queue.\n+     *\n+     * @return The name of the queue.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Get the autoDeleteOnIdle property: ISO 8601 timeSpan idle interval after which the queue is automatically\n+     * deleted. The minimum duration is 5 minutes.\n+     *\n+     * @return the autoDeleteOnIdle value.\n+     */\n+    public Duration getAutoDeleteOnIdle() {\n+        return this.autoDeleteOnIdle;\n+    }\n+\n+    /**\n+     * Set the autoDeleteOnIdle property: ISO 8601 timeSpan idle interval after which the queue is automatically\n+     * deleted. The minimum duration is 5 minutes.\n+     *\n+     * @param autoDeleteOnIdle the autoDeleteOnIdle value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setAutoDeleteOnIdle(Duration autoDeleteOnIdle) {\n+        this.autoDeleteOnIdle = autoDeleteOnIdle;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the defaultMessageTimeToLive property: ISO 8601 default message timespan to live value. This is the duration\n+     * after which the message expires, starting from when the message is sent to Service Bus. This is the default value\n+     * used when TimeToLive is not set on a message itself.\n+     *\n+     * @return the defaultMessageTimeToLive value.\n+     */\n+    public Duration getDefaultMessageTimeToLive() {\n+        return this.defaultMessageTimeToLive;\n+    }\n+\n+    /**\n+     * Set the defaultMessageTimeToLive property: ISO 8601 default message timespan to live value. This is the duration\n+     * after which the message expires, starting from when the message is sent to Service Bus. This is the default value\n+     * used when TimeToLive is not set on a message itself.\n+     *\n+     * @param defaultMessageTimeToLive the defaultMessageTimeToLive value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setDefaultMessageTimeToLive(Duration defaultMessageTimeToLive) {\n+        this.defaultMessageTimeToLive = defaultMessageTimeToLive;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the deadLetteringOnMessageExpiration property: A value that indicates whether this queue has dead letter\n+     * support when a message expires.\n+     *\n+     * @return the deadLetteringOnMessageExpiration value.\n+     */\n+    public Boolean deadLetteringOnMessageExpiration() {\n+        return this.deadLetteringOnMessageExpiration;\n+    }\n+\n+    /**\n+     * Set the deadLetteringOnMessageExpiration property: A value that indicates whether this queue has dead letter\n+     * support when a message expires.\n+     *\n+     * @param deadLetteringOnMessageExpiration the deadLetteringOnMessageExpiration value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setDeadLetteringOnMessageExpiration(boolean deadLetteringOnMessageExpiration) {\n+        this.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the duplicateDetectionHistoryTimeWindow property: ISO 8601 timeSpan structure that defines the duration of\n+     * the duplicate detection history. The default value is 10 minutes.\n+     *\n+     * @return the duplicateDetectionHistoryTimeWindow value.\n+     */\n+    public Duration getDuplicateDetectionHistoryTimeWindow() {\n+        return this.duplicateDetectionHistoryTimeWindow;\n+    }\n+\n+    /**\n+     * Set the duplicateDetectionHistoryTimeWindow property: ISO 8601 timeSpan structure that defines the duration of\n+     * the duplicate detection history. The default value is 10 minutes.\n+     *\n+     * @param duplicateDetectionHistoryTimeWindow the duplicateDetectionHistoryTimeWindow value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setDuplicateDetectionHistoryTimeWindow(Duration duplicateDetectionHistoryTimeWindow) {\n+        this.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the enableBatchedOperations property: Value that indicates whether server-side batched operations are\n+     * enabled.\n+     *\n+     * @return the enableBatchedOperations value.\n+     */\n+    public Boolean enableBatchedOperations() {\n+        return this.enableBatchedOperations;\n+    }\n+\n+    /**\n+     * Set the enableBatchedOperations property: Value that indicates whether server-side batched operations are\n+     * enabled.\n+     *\n+     * @param enableBatchedOperations the enableBatchedOperations value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setEnableBatchedOperations(boolean enableBatchedOperations) {\n+        this.enableBatchedOperations = enableBatchedOperations;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the enablePartitioning property: A value that indicates whether the queue is to be partitioned across\n+     * multiple message brokers.\n+     *\n+     * @return the enablePartitioning value.\n+     */\n+    public Boolean enablePartitioning() {\n+        return this.enablePartitioning;\n+    }\n+\n+    /**\n+     * Set the enablePartitioning property: A value that indicates whether the queue is to be partitioned across\n+     * multiple message brokers.\n+     *\n+     * @param enablePartitioning the enablePartitioning value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setEnablePartitioning(boolean enablePartitioning) {\n+        this.enablePartitioning = enablePartitioning;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the status property: Status of a Service Bus resource.\n+     *\n+     * @return the status value.\n+     */\n+    public EntityStatus getStatus() {\n+        return this.status;\n+    }\n+\n+    /**\n+     * Set the status property: Status of a Service Bus resource.\n+     *\n+     * @param status the status value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setStatus(EntityStatus status) {\n+        this.status = status;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the forwardTo property: The name of the recipient entity to which all the messages sent to the queue are\n+     * forwarded to.\n+     *\n+     * @return the forwardTo value.\n+     */\n+    public String getForwardTo() {\n+        return this.forwardTo;\n+    }\n+\n+    /**\n+     * Set the forwardTo property: The name of the recipient entity to which all the messages sent to the queue are\n+     * forwarded to.\n+     *\n+     * @param forwardTo the forwardTo value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setForwardTo(String forwardTo) {\n+        this.forwardTo = forwardTo;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the forwardDeadLetteredMessagesTo property: The name of the recipient entity to which all the dead-lettered\n+     * messages of this queue are forwarded to.\n+     *\n+     * @return the forwardDeadLetteredMessagesTo value.\n+     */\n+    public String getForwardDeadLetteredMessagesTo() {\n+        return this.forwardDeadLetteredMessagesTo;\n+    }\n+\n+    /**\n+     * Set the forwardDeadLetteredMessagesTo property: The name of the recipient entity to which all the dead-lettered\n+     * messages of this queue are forwarded to.\n+     *\n+     * @param forwardDeadLetteredMessagesTo the forwardDeadLetteredMessagesTo value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setForwardDeadLetteredMessagesTo(String forwardDeadLetteredMessagesTo) {\n+        this.forwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the lockDuration property: ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the\n+     * message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1\n+     * minute.\n+     *\n+     * @return the lockDuration value.\n+     */\n+    public Duration getLockDuration() {\n+        return this.lockDuration;\n+    }\n+\n+    /**\n+     * Set the lockDuration property: ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the\n+     * message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1\n+     * minute.\n+     *\n+     * @param lockDuration the lockDuration value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setLockDuration(Duration lockDuration) {\n+        this.lockDuration = lockDuration;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the maxDeliveryCount property: The maximum delivery count. A message is automatically deadlettered after this\n+     * number of deliveries. Default value is 10.\n+     *\n+     * @return the maxDeliveryCount value.\n+     */\n+    public int getMaxDeliveryCount() {\n+        return this.maxDeliveryCount;\n+    }\n+\n+    /**\n+     * Set the maxDeliveryCount property: The maximum delivery count. A message is automatically deadlettered after this\n+     * number of deliveries. Default value is 10.\n+     *\n+     * @param maxDeliveryCount the maxDeliveryCount value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setMaxDeliveryCount(int maxDeliveryCount) {\n+        this.maxDeliveryCount = maxDeliveryCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75052be56060fcfb9eaf4d8e447c6ef67af7e6"}, "originalPosition": 373}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYxNjM2OA==", "bodyText": "validation for negative value ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13728#discussion_r464616368", "createdAt": "2020-08-03T19:26:02Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/models/CreateTopicOptions.java", "diffHunk": "@@ -0,0 +1,464 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.models;\n+\n+\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_DUPLICATE_DETECTION_DURATION;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_LOCK_DURATION;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_MAX_DELIVERY_COUNT;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_TOPIC_SIZE;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.MAX_DURATION;\n+\n+/**\n+ * Represents the set of options that can be specified for the creation of a queue.\n+ */\n+public class CreateTopicOptions {\n+    private final String name;\n+\n+    private Duration autoDeleteOnIdle;\n+    private Duration defaultMessageTimeToLive;\n+    private boolean deadLetteringOnMessageExpiration;\n+    private Duration duplicateDetectionHistoryTimeWindow;\n+    private boolean enableBatchedOperations;\n+    private boolean enablePartitioning;\n+    private String forwardTo;\n+    private String forwardDeadLetteredMessagesTo;\n+    private Duration lockDuration;\n+    private int maxDeliveryCount;\n+    private long maxSizeInMegabytes;\n+    private boolean requiresDuplicateDetection;\n+    private boolean requiresSession;\n+    private EntityStatus status;\n+    private String userMetadata;\n+\n+    /**\n+     * Creates an instance with the name of the topic. Default values for the topic are populated. The properties\n+     * populated with defaults are:\n+     *\n+     * <ul>\n+     *     <li>{@link #setAutoDeleteOnIdle(Duration)} is max duration value.</li>\n+     *     <li>{@link #setDefaultMessageTimeToLive(Duration)} is max duration value.</li>\n+     *     <li>{@link #setDuplicateDetectionHistoryTimeWindow(Duration)} is max duration value, but duplication\n+     *     detection is disabled.</li>\n+     *     <li>{@link #setRequiresDuplicateDetection(boolean)} is false.</li>\n+     *     <li>{@link #setEnableBatchedOperations(boolean)} is true.</li>\n+     *     <li>{@link #setLockDuration(Duration)} is 1 minute.</li>\n+     *     <li>{@link #setMaxDeliveryCount(int)} is 10.</li>\n+     *     <li>{@link #setMaxSizeInMegabytes(long)} is 1024MB.</li>\n+     *     <li>{@link #setRequiresSession(boolean)} is false.</li>\n+     *     <li>{@link #setStatus(EntityStatus)} is {@link EntityStatus#ACTIVE}.</li>\n+     * </ul>\n+     *\n+     * @param topicName Name of the queue.\n+     *\n+     * @throws NullPointerException if {@code topicName} is a null.\n+     * @throws IllegalArgumentException if {@code topicName} is an empty string.\n+     */\n+    public CreateTopicOptions(String topicName) {\n+        Objects.requireNonNull(topicName, \"'topicName' cannot be null.\");\n+\n+        if (topicName.isEmpty()) {\n+            ClientLogger logger = new ClientLogger(CreateTopicOptions.class);\n+            throw logger.logThrowableAsError(new IllegalArgumentException(\"Topic name cannot be empty.\"));\n+        }\n+\n+        this.name = topicName;\n+        this.autoDeleteOnIdle = MAX_DURATION;\n+        this.defaultMessageTimeToLive = MAX_DURATION;\n+        this.duplicateDetectionHistoryTimeWindow = DEFAULT_DUPLICATE_DETECTION_DURATION;\n+        this.enableBatchedOperations = true;\n+        this.enablePartitioning = false;\n+        this.lockDuration = DEFAULT_LOCK_DURATION;\n+        this.maxDeliveryCount = DEFAULT_MAX_DELIVERY_COUNT;\n+        this.maxSizeInMegabytes = DEFAULT_TOPIC_SIZE;\n+        this.requiresDuplicateDetection = false;\n+        this.requiresSession = false;\n+        this.status = EntityStatus.ACTIVE;\n+        this.deadLetteringOnMessageExpiration = false;\n+    }\n+\n+    /**\n+     * Initializes a new instance based on the specified {@link CreateTopicOptions} instance. This is useful for\n+     * creating a new topic based on the properties of an existing topicOptions.\n+     *\n+     * @param topicOptions Existing topicOptions to create options with.\n+     */\n+    public CreateTopicOptions(TopicProperties topicOptions) {\n+        Objects.requireNonNull(topicOptions, \"'topicOptions' cannot be null.\");\n+        Objects.requireNonNull(topicOptions.getName(), \"Topic name cannot be null\");\n+\n+        if (topicOptions.getName().isEmpty()) {\n+            final ClientLogger logger = new ClientLogger(CreateTopicOptions.class);\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"Topic name cannot be empty.\"));\n+        }\n+\n+        this.name = topicOptions.getName();\n+        this.autoDeleteOnIdle = topicOptions.getAutoDeleteOnIdle();\n+        this.defaultMessageTimeToLive = topicOptions.getDefaultMessageTimeToLive();\n+        this.duplicateDetectionHistoryTimeWindow = topicOptions.getDuplicateDetectionHistoryTimeWindow();\n+        this.enableBatchedOperations = topicOptions.enableBatchedOperations();\n+        this.enablePartitioning = topicOptions.enablePartitioning();\n+        this.maxSizeInMegabytes = topicOptions.getMaxSizeInMegabytes();\n+        this.requiresDuplicateDetection = topicOptions.requiresDuplicateDetection();\n+        this.status = topicOptions.getStatus();\n+        this.userMetadata = topicOptions.getUserMetadata();\n+    }\n+\n+    /**\n+     * Gets the name of the queue.\n+     *\n+     * @return The name of the queue.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Get the autoDeleteOnIdle property: ISO 8601 timeSpan idle interval after which the queue is automatically\n+     * deleted. The minimum duration is 5 minutes.\n+     *\n+     * @return the autoDeleteOnIdle value.\n+     */\n+    public Duration getAutoDeleteOnIdle() {\n+        return this.autoDeleteOnIdle;\n+    }\n+\n+    /**\n+     * Set the autoDeleteOnIdle property: ISO 8601 timeSpan idle interval after which the queue is automatically\n+     * deleted. The minimum duration is 5 minutes.\n+     *\n+     * @param autoDeleteOnIdle the autoDeleteOnIdle value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setAutoDeleteOnIdle(Duration autoDeleteOnIdle) {\n+        this.autoDeleteOnIdle = autoDeleteOnIdle;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the defaultMessageTimeToLive property: ISO 8601 default message timespan to live value. This is the duration\n+     * after which the message expires, starting from when the message is sent to Service Bus. This is the default value\n+     * used when TimeToLive is not set on a message itself.\n+     *\n+     * @return the defaultMessageTimeToLive value.\n+     */\n+    public Duration getDefaultMessageTimeToLive() {\n+        return this.defaultMessageTimeToLive;\n+    }\n+\n+    /**\n+     * Set the defaultMessageTimeToLive property: ISO 8601 default message timespan to live value. This is the duration\n+     * after which the message expires, starting from when the message is sent to Service Bus. This is the default value\n+     * used when TimeToLive is not set on a message itself.\n+     *\n+     * @param defaultMessageTimeToLive the defaultMessageTimeToLive value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setDefaultMessageTimeToLive(Duration defaultMessageTimeToLive) {\n+        this.defaultMessageTimeToLive = defaultMessageTimeToLive;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the deadLetteringOnMessageExpiration property: A value that indicates whether this queue has dead letter\n+     * support when a message expires.\n+     *\n+     * @return the deadLetteringOnMessageExpiration value.\n+     */\n+    public Boolean deadLetteringOnMessageExpiration() {\n+        return this.deadLetteringOnMessageExpiration;\n+    }\n+\n+    /**\n+     * Set the deadLetteringOnMessageExpiration property: A value that indicates whether this queue has dead letter\n+     * support when a message expires.\n+     *\n+     * @param deadLetteringOnMessageExpiration the deadLetteringOnMessageExpiration value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setDeadLetteringOnMessageExpiration(boolean deadLetteringOnMessageExpiration) {\n+        this.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the duplicateDetectionHistoryTimeWindow property: ISO 8601 timeSpan structure that defines the duration of\n+     * the duplicate detection history. The default value is 10 minutes.\n+     *\n+     * @return the duplicateDetectionHistoryTimeWindow value.\n+     */\n+    public Duration getDuplicateDetectionHistoryTimeWindow() {\n+        return this.duplicateDetectionHistoryTimeWindow;\n+    }\n+\n+    /**\n+     * Set the duplicateDetectionHistoryTimeWindow property: ISO 8601 timeSpan structure that defines the duration of\n+     * the duplicate detection history. The default value is 10 minutes.\n+     *\n+     * @param duplicateDetectionHistoryTimeWindow the duplicateDetectionHistoryTimeWindow value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setDuplicateDetectionHistoryTimeWindow(Duration duplicateDetectionHistoryTimeWindow) {\n+        this.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the enableBatchedOperations property: Value that indicates whether server-side batched operations are\n+     * enabled.\n+     *\n+     * @return the enableBatchedOperations value.\n+     */\n+    public Boolean enableBatchedOperations() {\n+        return this.enableBatchedOperations;\n+    }\n+\n+    /**\n+     * Set the enableBatchedOperations property: Value that indicates whether server-side batched operations are\n+     * enabled.\n+     *\n+     * @param enableBatchedOperations the enableBatchedOperations value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setEnableBatchedOperations(boolean enableBatchedOperations) {\n+        this.enableBatchedOperations = enableBatchedOperations;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the enablePartitioning property: A value that indicates whether the queue is to be partitioned across\n+     * multiple message brokers.\n+     *\n+     * @return the enablePartitioning value.\n+     */\n+    public Boolean enablePartitioning() {\n+        return this.enablePartitioning;\n+    }\n+\n+    /**\n+     * Set the enablePartitioning property: A value that indicates whether the queue is to be partitioned across\n+     * multiple message brokers.\n+     *\n+     * @param enablePartitioning the enablePartitioning value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setEnablePartitioning(boolean enablePartitioning) {\n+        this.enablePartitioning = enablePartitioning;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the status property: Status of a Service Bus resource.\n+     *\n+     * @return the status value.\n+     */\n+    public EntityStatus getStatus() {\n+        return this.status;\n+    }\n+\n+    /**\n+     * Set the status property: Status of a Service Bus resource.\n+     *\n+     * @param status the status value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setStatus(EntityStatus status) {\n+        this.status = status;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the forwardTo property: The name of the recipient entity to which all the messages sent to the queue are\n+     * forwarded to.\n+     *\n+     * @return the forwardTo value.\n+     */\n+    public String getForwardTo() {\n+        return this.forwardTo;\n+    }\n+\n+    /**\n+     * Set the forwardTo property: The name of the recipient entity to which all the messages sent to the queue are\n+     * forwarded to.\n+     *\n+     * @param forwardTo the forwardTo value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setForwardTo(String forwardTo) {\n+        this.forwardTo = forwardTo;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the forwardDeadLetteredMessagesTo property: The name of the recipient entity to which all the dead-lettered\n+     * messages of this queue are forwarded to.\n+     *\n+     * @return the forwardDeadLetteredMessagesTo value.\n+     */\n+    public String getForwardDeadLetteredMessagesTo() {\n+        return this.forwardDeadLetteredMessagesTo;\n+    }\n+\n+    /**\n+     * Set the forwardDeadLetteredMessagesTo property: The name of the recipient entity to which all the dead-lettered\n+     * messages of this queue are forwarded to.\n+     *\n+     * @param forwardDeadLetteredMessagesTo the forwardDeadLetteredMessagesTo value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setForwardDeadLetteredMessagesTo(String forwardDeadLetteredMessagesTo) {\n+        this.forwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the lockDuration property: ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the\n+     * message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1\n+     * minute.\n+     *\n+     * @return the lockDuration value.\n+     */\n+    public Duration getLockDuration() {\n+        return this.lockDuration;\n+    }\n+\n+    /**\n+     * Set the lockDuration property: ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the\n+     * message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1\n+     * minute.\n+     *\n+     * @param lockDuration the lockDuration value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setLockDuration(Duration lockDuration) {\n+        this.lockDuration = lockDuration;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the maxDeliveryCount property: The maximum delivery count. A message is automatically deadlettered after this\n+     * number of deliveries. Default value is 10.\n+     *\n+     * @return the maxDeliveryCount value.\n+     */\n+    public int getMaxDeliveryCount() {\n+        return this.maxDeliveryCount;\n+    }\n+\n+    /**\n+     * Set the maxDeliveryCount property: The maximum delivery count. A message is automatically deadlettered after this\n+     * number of deliveries. Default value is 10.\n+     *\n+     * @param maxDeliveryCount the maxDeliveryCount value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setMaxDeliveryCount(int maxDeliveryCount) {\n+        this.maxDeliveryCount = maxDeliveryCount;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the maxSizeInMegabytes property: The maximum size of the queue in megabytes, which is the size of memory\n+     * allocated for the queue.\n+     *\n+     * @return the maxSizeInMegabytes value.\n+     */\n+    public long getMaxSizeInMegabytes() {\n+        return this.maxSizeInMegabytes;\n+    }\n+\n+    /**\n+     * Set the maxSizeInMegabytes property: The maximum size of the queue in megabytes, which is the size of memory\n+     * allocated for the queue.\n+     *\n+     * @param maxSizeInMegabytes the maxSizeInMegabytes value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setMaxSizeInMegabytes(long maxSizeInMegabytes) {\n+        this.maxSizeInMegabytes = maxSizeInMegabytes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75052be56060fcfb9eaf4d8e447c6ef67af7e6"}, "originalPosition": 396}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYxNjU2MA==", "bodyText": "null check ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13728#discussion_r464616560", "createdAt": "2020-08-03T19:26:30Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/models/CreateTopicOptions.java", "diffHunk": "@@ -0,0 +1,464 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.models;\n+\n+\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_DUPLICATE_DETECTION_DURATION;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_LOCK_DURATION;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_MAX_DELIVERY_COUNT;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_TOPIC_SIZE;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.MAX_DURATION;\n+\n+/**\n+ * Represents the set of options that can be specified for the creation of a queue.\n+ */\n+public class CreateTopicOptions {\n+    private final String name;\n+\n+    private Duration autoDeleteOnIdle;\n+    private Duration defaultMessageTimeToLive;\n+    private boolean deadLetteringOnMessageExpiration;\n+    private Duration duplicateDetectionHistoryTimeWindow;\n+    private boolean enableBatchedOperations;\n+    private boolean enablePartitioning;\n+    private String forwardTo;\n+    private String forwardDeadLetteredMessagesTo;\n+    private Duration lockDuration;\n+    private int maxDeliveryCount;\n+    private long maxSizeInMegabytes;\n+    private boolean requiresDuplicateDetection;\n+    private boolean requiresSession;\n+    private EntityStatus status;\n+    private String userMetadata;\n+\n+    /**\n+     * Creates an instance with the name of the topic. Default values for the topic are populated. The properties\n+     * populated with defaults are:\n+     *\n+     * <ul>\n+     *     <li>{@link #setAutoDeleteOnIdle(Duration)} is max duration value.</li>\n+     *     <li>{@link #setDefaultMessageTimeToLive(Duration)} is max duration value.</li>\n+     *     <li>{@link #setDuplicateDetectionHistoryTimeWindow(Duration)} is max duration value, but duplication\n+     *     detection is disabled.</li>\n+     *     <li>{@link #setRequiresDuplicateDetection(boolean)} is false.</li>\n+     *     <li>{@link #setEnableBatchedOperations(boolean)} is true.</li>\n+     *     <li>{@link #setLockDuration(Duration)} is 1 minute.</li>\n+     *     <li>{@link #setMaxDeliveryCount(int)} is 10.</li>\n+     *     <li>{@link #setMaxSizeInMegabytes(long)} is 1024MB.</li>\n+     *     <li>{@link #setRequiresSession(boolean)} is false.</li>\n+     *     <li>{@link #setStatus(EntityStatus)} is {@link EntityStatus#ACTIVE}.</li>\n+     * </ul>\n+     *\n+     * @param topicName Name of the queue.\n+     *\n+     * @throws NullPointerException if {@code topicName} is a null.\n+     * @throws IllegalArgumentException if {@code topicName} is an empty string.\n+     */\n+    public CreateTopicOptions(String topicName) {\n+        Objects.requireNonNull(topicName, \"'topicName' cannot be null.\");\n+\n+        if (topicName.isEmpty()) {\n+            ClientLogger logger = new ClientLogger(CreateTopicOptions.class);\n+            throw logger.logThrowableAsError(new IllegalArgumentException(\"Topic name cannot be empty.\"));\n+        }\n+\n+        this.name = topicName;\n+        this.autoDeleteOnIdle = MAX_DURATION;\n+        this.defaultMessageTimeToLive = MAX_DURATION;\n+        this.duplicateDetectionHistoryTimeWindow = DEFAULT_DUPLICATE_DETECTION_DURATION;\n+        this.enableBatchedOperations = true;\n+        this.enablePartitioning = false;\n+        this.lockDuration = DEFAULT_LOCK_DURATION;\n+        this.maxDeliveryCount = DEFAULT_MAX_DELIVERY_COUNT;\n+        this.maxSizeInMegabytes = DEFAULT_TOPIC_SIZE;\n+        this.requiresDuplicateDetection = false;\n+        this.requiresSession = false;\n+        this.status = EntityStatus.ACTIVE;\n+        this.deadLetteringOnMessageExpiration = false;\n+    }\n+\n+    /**\n+     * Initializes a new instance based on the specified {@link CreateTopicOptions} instance. This is useful for\n+     * creating a new topic based on the properties of an existing topicOptions.\n+     *\n+     * @param topicOptions Existing topicOptions to create options with.\n+     */\n+    public CreateTopicOptions(TopicProperties topicOptions) {\n+        Objects.requireNonNull(topicOptions, \"'topicOptions' cannot be null.\");\n+        Objects.requireNonNull(topicOptions.getName(), \"Topic name cannot be null\");\n+\n+        if (topicOptions.getName().isEmpty()) {\n+            final ClientLogger logger = new ClientLogger(CreateTopicOptions.class);\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"Topic name cannot be empty.\"));\n+        }\n+\n+        this.name = topicOptions.getName();\n+        this.autoDeleteOnIdle = topicOptions.getAutoDeleteOnIdle();\n+        this.defaultMessageTimeToLive = topicOptions.getDefaultMessageTimeToLive();\n+        this.duplicateDetectionHistoryTimeWindow = topicOptions.getDuplicateDetectionHistoryTimeWindow();\n+        this.enableBatchedOperations = topicOptions.enableBatchedOperations();\n+        this.enablePartitioning = topicOptions.enablePartitioning();\n+        this.maxSizeInMegabytes = topicOptions.getMaxSizeInMegabytes();\n+        this.requiresDuplicateDetection = topicOptions.requiresDuplicateDetection();\n+        this.status = topicOptions.getStatus();\n+        this.userMetadata = topicOptions.getUserMetadata();\n+    }\n+\n+    /**\n+     * Gets the name of the queue.\n+     *\n+     * @return The name of the queue.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Get the autoDeleteOnIdle property: ISO 8601 timeSpan idle interval after which the queue is automatically\n+     * deleted. The minimum duration is 5 minutes.\n+     *\n+     * @return the autoDeleteOnIdle value.\n+     */\n+    public Duration getAutoDeleteOnIdle() {\n+        return this.autoDeleteOnIdle;\n+    }\n+\n+    /**\n+     * Set the autoDeleteOnIdle property: ISO 8601 timeSpan idle interval after which the queue is automatically\n+     * deleted. The minimum duration is 5 minutes.\n+     *\n+     * @param autoDeleteOnIdle the autoDeleteOnIdle value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setAutoDeleteOnIdle(Duration autoDeleteOnIdle) {\n+        this.autoDeleteOnIdle = autoDeleteOnIdle;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the defaultMessageTimeToLive property: ISO 8601 default message timespan to live value. This is the duration\n+     * after which the message expires, starting from when the message is sent to Service Bus. This is the default value\n+     * used when TimeToLive is not set on a message itself.\n+     *\n+     * @return the defaultMessageTimeToLive value.\n+     */\n+    public Duration getDefaultMessageTimeToLive() {\n+        return this.defaultMessageTimeToLive;\n+    }\n+\n+    /**\n+     * Set the defaultMessageTimeToLive property: ISO 8601 default message timespan to live value. This is the duration\n+     * after which the message expires, starting from when the message is sent to Service Bus. This is the default value\n+     * used when TimeToLive is not set on a message itself.\n+     *\n+     * @param defaultMessageTimeToLive the defaultMessageTimeToLive value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setDefaultMessageTimeToLive(Duration defaultMessageTimeToLive) {\n+        this.defaultMessageTimeToLive = defaultMessageTimeToLive;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the deadLetteringOnMessageExpiration property: A value that indicates whether this queue has dead letter\n+     * support when a message expires.\n+     *\n+     * @return the deadLetteringOnMessageExpiration value.\n+     */\n+    public Boolean deadLetteringOnMessageExpiration() {\n+        return this.deadLetteringOnMessageExpiration;\n+    }\n+\n+    /**\n+     * Set the deadLetteringOnMessageExpiration property: A value that indicates whether this queue has dead letter\n+     * support when a message expires.\n+     *\n+     * @param deadLetteringOnMessageExpiration the deadLetteringOnMessageExpiration value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setDeadLetteringOnMessageExpiration(boolean deadLetteringOnMessageExpiration) {\n+        this.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the duplicateDetectionHistoryTimeWindow property: ISO 8601 timeSpan structure that defines the duration of\n+     * the duplicate detection history. The default value is 10 minutes.\n+     *\n+     * @return the duplicateDetectionHistoryTimeWindow value.\n+     */\n+    public Duration getDuplicateDetectionHistoryTimeWindow() {\n+        return this.duplicateDetectionHistoryTimeWindow;\n+    }\n+\n+    /**\n+     * Set the duplicateDetectionHistoryTimeWindow property: ISO 8601 timeSpan structure that defines the duration of\n+     * the duplicate detection history. The default value is 10 minutes.\n+     *\n+     * @param duplicateDetectionHistoryTimeWindow the duplicateDetectionHistoryTimeWindow value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setDuplicateDetectionHistoryTimeWindow(Duration duplicateDetectionHistoryTimeWindow) {\n+        this.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the enableBatchedOperations property: Value that indicates whether server-side batched operations are\n+     * enabled.\n+     *\n+     * @return the enableBatchedOperations value.\n+     */\n+    public Boolean enableBatchedOperations() {\n+        return this.enableBatchedOperations;\n+    }\n+\n+    /**\n+     * Set the enableBatchedOperations property: Value that indicates whether server-side batched operations are\n+     * enabled.\n+     *\n+     * @param enableBatchedOperations the enableBatchedOperations value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setEnableBatchedOperations(boolean enableBatchedOperations) {\n+        this.enableBatchedOperations = enableBatchedOperations;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the enablePartitioning property: A value that indicates whether the queue is to be partitioned across\n+     * multiple message brokers.\n+     *\n+     * @return the enablePartitioning value.\n+     */\n+    public Boolean enablePartitioning() {\n+        return this.enablePartitioning;\n+    }\n+\n+    /**\n+     * Set the enablePartitioning property: A value that indicates whether the queue is to be partitioned across\n+     * multiple message brokers.\n+     *\n+     * @param enablePartitioning the enablePartitioning value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setEnablePartitioning(boolean enablePartitioning) {\n+        this.enablePartitioning = enablePartitioning;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the status property: Status of a Service Bus resource.\n+     *\n+     * @return the status value.\n+     */\n+    public EntityStatus getStatus() {\n+        return this.status;\n+    }\n+\n+    /**\n+     * Set the status property: Status of a Service Bus resource.\n+     *\n+     * @param status the status value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setStatus(EntityStatus status) {\n+        this.status = status;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the forwardTo property: The name of the recipient entity to which all the messages sent to the queue are\n+     * forwarded to.\n+     *\n+     * @return the forwardTo value.\n+     */\n+    public String getForwardTo() {\n+        return this.forwardTo;\n+    }\n+\n+    /**\n+     * Set the forwardTo property: The name of the recipient entity to which all the messages sent to the queue are\n+     * forwarded to.\n+     *\n+     * @param forwardTo the forwardTo value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setForwardTo(String forwardTo) {\n+        this.forwardTo = forwardTo;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the forwardDeadLetteredMessagesTo property: The name of the recipient entity to which all the dead-lettered\n+     * messages of this queue are forwarded to.\n+     *\n+     * @return the forwardDeadLetteredMessagesTo value.\n+     */\n+    public String getForwardDeadLetteredMessagesTo() {\n+        return this.forwardDeadLetteredMessagesTo;\n+    }\n+\n+    /**\n+     * Set the forwardDeadLetteredMessagesTo property: The name of the recipient entity to which all the dead-lettered\n+     * messages of this queue are forwarded to.\n+     *\n+     * @param forwardDeadLetteredMessagesTo the forwardDeadLetteredMessagesTo value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setForwardDeadLetteredMessagesTo(String forwardDeadLetteredMessagesTo) {\n+        this.forwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the lockDuration property: ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the\n+     * message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1\n+     * minute.\n+     *\n+     * @return the lockDuration value.\n+     */\n+    public Duration getLockDuration() {\n+        return this.lockDuration;\n+    }\n+\n+    /**\n+     * Set the lockDuration property: ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the\n+     * message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1\n+     * minute.\n+     *\n+     * @param lockDuration the lockDuration value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setLockDuration(Duration lockDuration) {\n+        this.lockDuration = lockDuration;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the maxDeliveryCount property: The maximum delivery count. A message is automatically deadlettered after this\n+     * number of deliveries. Default value is 10.\n+     *\n+     * @return the maxDeliveryCount value.\n+     */\n+    public int getMaxDeliveryCount() {\n+        return this.maxDeliveryCount;\n+    }\n+\n+    /**\n+     * Set the maxDeliveryCount property: The maximum delivery count. A message is automatically deadlettered after this\n+     * number of deliveries. Default value is 10.\n+     *\n+     * @param maxDeliveryCount the maxDeliveryCount value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setMaxDeliveryCount(int maxDeliveryCount) {\n+        this.maxDeliveryCount = maxDeliveryCount;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the maxSizeInMegabytes property: The maximum size of the queue in megabytes, which is the size of memory\n+     * allocated for the queue.\n+     *\n+     * @return the maxSizeInMegabytes value.\n+     */\n+    public long getMaxSizeInMegabytes() {\n+        return this.maxSizeInMegabytes;\n+    }\n+\n+    /**\n+     * Set the maxSizeInMegabytes property: The maximum size of the queue in megabytes, which is the size of memory\n+     * allocated for the queue.\n+     *\n+     * @param maxSizeInMegabytes the maxSizeInMegabytes value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setMaxSizeInMegabytes(long maxSizeInMegabytes) {\n+        this.maxSizeInMegabytes = maxSizeInMegabytes;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the requiresDuplicateDetection property: A value indicating if this queue requires duplicate detection.\n+     *\n+     * @return the requiresDuplicateDetection value.\n+     */\n+    public Boolean requiresDuplicateDetection() {\n+        return this.requiresDuplicateDetection;\n+    }\n+\n+    /**\n+     * Set the requiresDuplicateDetection property: A value indicating if this queue requires duplicate detection.\n+     *\n+     * @param requiresDuplicateDetection the requiresDuplicateDetection value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setRequiresDuplicateDetection(boolean requiresDuplicateDetection) {\n+        this.requiresDuplicateDetection = requiresDuplicateDetection;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the requiresSession property: A value that indicates whether the queue supports the concept of sessions.\n+     *\n+     * @return the requiresSession value.\n+     */\n+    public Boolean requiresSession() {\n+        return this.requiresSession;\n+    }\n+\n+    /**\n+     * Set the requiresSession property: A value that indicates whether the queue supports the concept of sessions.\n+     *\n+     * @param requiresSession the requiresSession value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setRequiresSession(boolean requiresSession) {\n+        this.requiresSession = requiresSession;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the userMetadata property: Custom metdata that user can associate with the description. Max length is 1024\n+     * chars.\n+     *\n+     * @return the userMetadata value.\n+     */\n+    public String getUserMetadata() {\n+        return this.userMetadata;\n+    }\n+\n+    /**\n+     * Set the userMetadata property: Custom metdata that user can associate with the description. Max length is 1024\n+     * chars.\n+     *\n+     * @param userMetadata the userMetadata value to set.\n+     *\n+     * @return the CreateTopicOptions object itself.\n+     */\n+    public CreateTopicOptions setUserMetadata(String userMetadata) {\n+        this.userMetadata = userMetadata;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75052be56060fcfb9eaf4d8e447c6ef67af7e6"}, "originalPosition": 461}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYxNjk1NQ==", "bodyText": "negative value check ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13728#discussion_r464616955", "createdAt": "2020-08-03T19:27:25Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/models/CreateSubscriptionOptions.java", "diffHunk": "@@ -0,0 +1,420 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.ServiceBusManagementAsyncClient;\n+import com.azure.messaging.servicebus.ServiceBusManagementClient;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_LOCK_DURATION;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_MAX_DELIVERY_COUNT;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.MAX_DURATION;\n+\n+/**\n+ * Options to set when creating a subscription.\n+ *\n+ * @see ServiceBusManagementAsyncClient#createTopic(CreateTopicOptions)\n+ * @see ServiceBusManagementClient#createTopic(CreateTopicOptions)\n+ */\n+@Fluent\n+public class CreateSubscriptionOptions {\n+    private final String topicName;\n+    private final String subscriptionName;\n+\n+    private Duration lockDuration;\n+    private boolean requiresSession;\n+    private Duration defaultMessageTimeToLive;\n+    private boolean deadLetteringOnMessageExpiration;\n+    private boolean deadLetteringOnFilterEvaluationExceptions;\n+    private int maxDeliveryCount;\n+    private boolean enableBatchedOperations;\n+    private EntityStatus status;\n+    private String forwardTo;\n+    private String userMetadata;\n+    private String forwardDeadLetteredMessagesTo;\n+    private Duration autoDeleteOnIdle;\n+\n+    /**\n+     * Creates an instance with the name of the subscription and its associated topic. Default values for the\n+     * subscription are populated. The properties populated with defaults are:\n+     *\n+     * <ul>\n+     *     <li>{@link #setAutoDeleteOnIdle(Duration)} is max duration value.</li>\n+     *     <li>{@link #setDeadLetteringOnMessageExpiration(boolean)} is false.</li>\n+     *     <li>{@link #setDefaultMessageTimeToLive(Duration)} is max duration value.</li>\n+     *     <li>{@link #setEnableBatchedOperations(boolean)} is true.</li>\n+     *     <li>{@link #setEnableDeadLetteringOnFilterEvaluationExceptions(boolean)} is true.</li>\n+     *     <li>{@link #setLockDuration(Duration)} is 1 minute.</li>\n+     *     <li>{@link #setMaxDeliveryCount(int)} is 10.</li>\n+     *     <li>{@link #setRequiresSession(boolean)} is false.</li>\n+     *     <li>{@link #setStatus(EntityStatus)} is {@link EntityStatus#ACTIVE}.</li>\n+     * </ul>\n+     *\n+     * @param topicName Name of the topic associated with this subscription.\n+     * @param subscriptionName Name of the subscription.\n+     *\n+     * @throws NullPointerException if {@code topicName} or {@code subscriptionName} are null.\n+     * @throws IllegalArgumentException if {@code topicName} or {@code subscriptionName} are empty strings.\n+     */\n+    public CreateSubscriptionOptions(String topicName, String subscriptionName) {\n+        final ClientLogger logger = new ClientLogger(CreateSubscriptionOptions.class);\n+        if (topicName == null) {\n+            throw logger.logExceptionAsError(new NullPointerException(\"'topicName' cannot be null.\"));\n+        } else if (topicName.isEmpty()) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"'topicName' cannot be an empty string.\"));\n+        } else if (subscriptionName == null) {\n+            throw logger.logExceptionAsError(new NullPointerException(\"'subscriptionName' cannot be null.\"));\n+        } else if (subscriptionName.isEmpty()) {\n+            throw logger.logExceptionAsError(\n+                new IllegalArgumentException(\"'subscriptionName' cannot be an empty string.\"));\n+        }\n+\n+        this.topicName = topicName;\n+        this.subscriptionName = subscriptionName;\n+\n+        // Defaults copied from .NET's implementation.\n+        this.autoDeleteOnIdle = MAX_DURATION;\n+        this.deadLetteringOnMessageExpiration = false;\n+        this.deadLetteringOnFilterEvaluationExceptions = true;\n+        this.defaultMessageTimeToLive = MAX_DURATION;\n+        this.enableBatchedOperations = true;\n+        this.lockDuration = DEFAULT_LOCK_DURATION;\n+        this.maxDeliveryCount = 10;\n+        this.requiresSession = false;\n+        this.status = EntityStatus.ACTIVE;\n+    }\n+\n+    /**\n+     * Initializes a new instance based on the specified {@link SubscriptionProperties} instance. This is useful for\n+     * creating a new queue based on the properties of an existing subscription.\n+     *\n+     * @param subscription Existing subscription to create options with.\n+     */\n+    public CreateSubscriptionOptions(SubscriptionProperties subscription) {\n+        Objects.requireNonNull(subscription, \"'subscription' cannot be null.\");\n+        Objects.requireNonNull(subscription.getTopicName(), \"Topic name cannot be null.\");\n+        Objects.requireNonNull(subscription.getSubscriptionName(), \"Subscription name cannot be null.\");\n+\n+        this.topicName = subscription.getTopicName();\n+        this.subscriptionName = subscription.getSubscriptionName();\n+        this.autoDeleteOnIdle = subscription.getAutoDeleteOnIdle();\n+        this.deadLetteringOnMessageExpiration = subscription.deadLetteringOnMessageExpiration() != null\n+            ? subscription.deadLetteringOnMessageExpiration()\n+            : false;\n+\n+        this.defaultMessageTimeToLive = subscription.getDefaultMessageTimeToLive();\n+        this.enableBatchedOperations = subscription.enableBatchedOperations() != null\n+            ? subscription.enableBatchedOperations()\n+            : false;\n+        this.forwardTo = subscription.getForwardTo();\n+        this.forwardDeadLetteredMessagesTo = subscription.getForwardDeadLetteredMessagesTo();\n+        this.lockDuration = subscription.getLockDuration();\n+\n+        this.maxDeliveryCount = subscription.getMaxDeliveryCount() != null\n+            ? subscription.getMaxDeliveryCount()\n+            : DEFAULT_MAX_DELIVERY_COUNT;\n+        this.requiresSession = subscription.requiresSession() != null\n+            ? subscription.requiresSession()\n+            : false;\n+        this.status = subscription.getStatus();\n+        this.userMetadata = subscription.getUserMetadata();\n+    }\n+\n+    /**\n+     * Gets the name of the topic under which subscription exists.\n+     *\n+     * @return The name of the topic under which subscription exists.\n+     */\n+    public String getTopicName() {\n+        return topicName;\n+    }\n+\n+    /**\n+     * Gets the name of the subscription.\n+     *\n+     * @return The name of the subscription.\n+     */\n+    public String getSubscriptionName() {\n+        return subscriptionName;\n+    }\n+\n+    /**\n+     * Get the lockDuration property: ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the\n+     * message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1\n+     * minute.\n+     *\n+     * @return the lockDuration value.\n+     */\n+    public Duration getLockDuration() {\n+        return this.lockDuration;\n+    }\n+\n+    /**\n+     * Set the lockDuration property: ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the\n+     * message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1\n+     * minute.\n+     *\n+     * @param lockDuration the lockDuration value to set.\n+     *\n+     * @return the CreateSubscriptionOptions object itself.\n+     */\n+    public CreateSubscriptionOptions setLockDuration(Duration lockDuration) {\n+        this.lockDuration = lockDuration;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the requiresSession property: A value that indicates whether the queue supports the concept of sessions.\n+     *\n+     * @return the requiresSession value.\n+     */\n+    public boolean requiresSession() {\n+        return this.requiresSession;\n+    }\n+\n+    /**\n+     * Set the requiresSession property: A value that indicates whether the queue supports the concept of sessions.\n+     *\n+     * @param requiresSession the requiresSession value to set.\n+     *\n+     * @return the CreateSubscriptionOptions object itself.\n+     */\n+    public CreateSubscriptionOptions setRequiresSession(boolean requiresSession) {\n+        this.requiresSession = requiresSession;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the defaultMessageTimeToLive property: ISO 8601 default message timespan to live value. This is the duration\n+     * after which the message expires, starting from when the message is sent to Service Bus. This is the default value\n+     * used when TimeToLive is not set on a message itself.\n+     *\n+     * @return the defaultMessageTimeToLive value.\n+     */\n+    public Duration getDefaultMessageTimeToLive() {\n+        return this.defaultMessageTimeToLive;\n+    }\n+\n+    /**\n+     * Set the defaultMessageTimeToLive property: ISO 8601 default message timespan to live value. This is the duration\n+     * after which the message expires, starting from when the message is sent to Service Bus. This is the default value\n+     * used when TimeToLive is not set on a message itself.\n+     *\n+     * @param defaultMessageTimeToLive the defaultMessageTimeToLive value to set.\n+     *\n+     * @return the CreateSubscriptionOptions object itself.\n+     */\n+    public CreateSubscriptionOptions setDefaultMessageTimeToLive(Duration defaultMessageTimeToLive) {\n+        this.defaultMessageTimeToLive = defaultMessageTimeToLive;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the deadLetteringOnMessageExpiration property: A value that indicates whether this subscription has dead\n+     * letter support when a message expires.\n+     *\n+     * @return the deadLetteringOnMessageExpiration value.\n+     */\n+    public boolean deadLetteringOnMessageExpiration() {\n+        return this.deadLetteringOnMessageExpiration;\n+    }\n+\n+    /**\n+     * Set the deadLetteringOnMessageExpiration property: A value that indicates whether this subscription has dead\n+     * letter support when a message expires.\n+     *\n+     * @param deadLetteringOnMessageExpiration the deadLetteringOnMessageExpiration value to set.\n+     *\n+     * @return the CreateSubscriptionOptions object itself.\n+     */\n+    public CreateSubscriptionOptions setDeadLetteringOnMessageExpiration(boolean deadLetteringOnMessageExpiration) {\n+        this.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the deadLetteringOnFilterEvaluationExceptions property: A value that indicates whether this subscription has\n+     * dead letter support when a message expires.\n+     *\n+     * @return the deadLetteringOnFilterEvaluationExceptions value.\n+     */\n+    public boolean enableDeadLetteringOnFilterEvaluationExceptions() {\n+        return this.deadLetteringOnFilterEvaluationExceptions;\n+    }\n+\n+    /**\n+     * Set the deadLetteringOnFilterEvaluationExceptions property: A value that indicates whether this subscription has\n+     * dead letter support when a message expires.\n+     *\n+     * @param deadLetteringOnFilterEvaluationExceptions the deadLetteringOnFilterEvaluationExceptions value to set.\n+     *\n+     * @return the CreateSubscriptionOptions object itself.\n+     */\n+    public CreateSubscriptionOptions setEnableDeadLetteringOnFilterEvaluationExceptions(\n+        boolean deadLetteringOnFilterEvaluationExceptions) {\n+        this.deadLetteringOnFilterEvaluationExceptions = deadLetteringOnFilterEvaluationExceptions;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the maxDeliveryCount property: The maximum delivery count. A message is automatically deadlettered after this\n+     * number of deliveries. Default value is 10.\n+     *\n+     * @return the maxDeliveryCount value.\n+     */\n+    public int getMaxDeliveryCount() {\n+        return this.maxDeliveryCount;\n+    }\n+\n+    /**\n+     * Set the maxDeliveryCount property: The maximum delivery count. A message is automatically deadlettered after this\n+     * number of deliveries. Default value is 10.\n+     *\n+     * @param maxDeliveryCount the maxDeliveryCount value to set.\n+     *\n+     * @return the CreateSubscriptionOptions object itself.\n+     */\n+    public CreateSubscriptionOptions setMaxDeliveryCount(int maxDeliveryCount) {\n+        this.maxDeliveryCount = maxDeliveryCount;\n+        return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75052be56060fcfb9eaf4d8e447c6ef67af7e6"}, "originalPosition": 284}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYxNzE2MA==", "bodyText": "null check in all these  setters ?", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13728#discussion_r464617160", "createdAt": "2020-08-03T19:27:54Z", "author": {"login": "hemanttanwar"}, "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/models/CreateSubscriptionOptions.java", "diffHunk": "@@ -0,0 +1,420 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.ServiceBusManagementAsyncClient;\n+import com.azure.messaging.servicebus.ServiceBusManagementClient;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_LOCK_DURATION;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.DEFAULT_MAX_DELIVERY_COUNT;\n+import static com.azure.messaging.servicebus.implementation.ServiceBusConstants.MAX_DURATION;\n+\n+/**\n+ * Options to set when creating a subscription.\n+ *\n+ * @see ServiceBusManagementAsyncClient#createTopic(CreateTopicOptions)\n+ * @see ServiceBusManagementClient#createTopic(CreateTopicOptions)\n+ */\n+@Fluent\n+public class CreateSubscriptionOptions {\n+    private final String topicName;\n+    private final String subscriptionName;\n+\n+    private Duration lockDuration;\n+    private boolean requiresSession;\n+    private Duration defaultMessageTimeToLive;\n+    private boolean deadLetteringOnMessageExpiration;\n+    private boolean deadLetteringOnFilterEvaluationExceptions;\n+    private int maxDeliveryCount;\n+    private boolean enableBatchedOperations;\n+    private EntityStatus status;\n+    private String forwardTo;\n+    private String userMetadata;\n+    private String forwardDeadLetteredMessagesTo;\n+    private Duration autoDeleteOnIdle;\n+\n+    /**\n+     * Creates an instance with the name of the subscription and its associated topic. Default values for the\n+     * subscription are populated. The properties populated with defaults are:\n+     *\n+     * <ul>\n+     *     <li>{@link #setAutoDeleteOnIdle(Duration)} is max duration value.</li>\n+     *     <li>{@link #setDeadLetteringOnMessageExpiration(boolean)} is false.</li>\n+     *     <li>{@link #setDefaultMessageTimeToLive(Duration)} is max duration value.</li>\n+     *     <li>{@link #setEnableBatchedOperations(boolean)} is true.</li>\n+     *     <li>{@link #setEnableDeadLetteringOnFilterEvaluationExceptions(boolean)} is true.</li>\n+     *     <li>{@link #setLockDuration(Duration)} is 1 minute.</li>\n+     *     <li>{@link #setMaxDeliveryCount(int)} is 10.</li>\n+     *     <li>{@link #setRequiresSession(boolean)} is false.</li>\n+     *     <li>{@link #setStatus(EntityStatus)} is {@link EntityStatus#ACTIVE}.</li>\n+     * </ul>\n+     *\n+     * @param topicName Name of the topic associated with this subscription.\n+     * @param subscriptionName Name of the subscription.\n+     *\n+     * @throws NullPointerException if {@code topicName} or {@code subscriptionName} are null.\n+     * @throws IllegalArgumentException if {@code topicName} or {@code subscriptionName} are empty strings.\n+     */\n+    public CreateSubscriptionOptions(String topicName, String subscriptionName) {\n+        final ClientLogger logger = new ClientLogger(CreateSubscriptionOptions.class);\n+        if (topicName == null) {\n+            throw logger.logExceptionAsError(new NullPointerException(\"'topicName' cannot be null.\"));\n+        } else if (topicName.isEmpty()) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"'topicName' cannot be an empty string.\"));\n+        } else if (subscriptionName == null) {\n+            throw logger.logExceptionAsError(new NullPointerException(\"'subscriptionName' cannot be null.\"));\n+        } else if (subscriptionName.isEmpty()) {\n+            throw logger.logExceptionAsError(\n+                new IllegalArgumentException(\"'subscriptionName' cannot be an empty string.\"));\n+        }\n+\n+        this.topicName = topicName;\n+        this.subscriptionName = subscriptionName;\n+\n+        // Defaults copied from .NET's implementation.\n+        this.autoDeleteOnIdle = MAX_DURATION;\n+        this.deadLetteringOnMessageExpiration = false;\n+        this.deadLetteringOnFilterEvaluationExceptions = true;\n+        this.defaultMessageTimeToLive = MAX_DURATION;\n+        this.enableBatchedOperations = true;\n+        this.lockDuration = DEFAULT_LOCK_DURATION;\n+        this.maxDeliveryCount = 10;\n+        this.requiresSession = false;\n+        this.status = EntityStatus.ACTIVE;\n+    }\n+\n+    /**\n+     * Initializes a new instance based on the specified {@link SubscriptionProperties} instance. This is useful for\n+     * creating a new queue based on the properties of an existing subscription.\n+     *\n+     * @param subscription Existing subscription to create options with.\n+     */\n+    public CreateSubscriptionOptions(SubscriptionProperties subscription) {\n+        Objects.requireNonNull(subscription, \"'subscription' cannot be null.\");\n+        Objects.requireNonNull(subscription.getTopicName(), \"Topic name cannot be null.\");\n+        Objects.requireNonNull(subscription.getSubscriptionName(), \"Subscription name cannot be null.\");\n+\n+        this.topicName = subscription.getTopicName();\n+        this.subscriptionName = subscription.getSubscriptionName();\n+        this.autoDeleteOnIdle = subscription.getAutoDeleteOnIdle();\n+        this.deadLetteringOnMessageExpiration = subscription.deadLetteringOnMessageExpiration() != null\n+            ? subscription.deadLetteringOnMessageExpiration()\n+            : false;\n+\n+        this.defaultMessageTimeToLive = subscription.getDefaultMessageTimeToLive();\n+        this.enableBatchedOperations = subscription.enableBatchedOperations() != null\n+            ? subscription.enableBatchedOperations()\n+            : false;\n+        this.forwardTo = subscription.getForwardTo();\n+        this.forwardDeadLetteredMessagesTo = subscription.getForwardDeadLetteredMessagesTo();\n+        this.lockDuration = subscription.getLockDuration();\n+\n+        this.maxDeliveryCount = subscription.getMaxDeliveryCount() != null\n+            ? subscription.getMaxDeliveryCount()\n+            : DEFAULT_MAX_DELIVERY_COUNT;\n+        this.requiresSession = subscription.requiresSession() != null\n+            ? subscription.requiresSession()\n+            : false;\n+        this.status = subscription.getStatus();\n+        this.userMetadata = subscription.getUserMetadata();\n+    }\n+\n+    /**\n+     * Gets the name of the topic under which subscription exists.\n+     *\n+     * @return The name of the topic under which subscription exists.\n+     */\n+    public String getTopicName() {\n+        return topicName;\n+    }\n+\n+    /**\n+     * Gets the name of the subscription.\n+     *\n+     * @return The name of the subscription.\n+     */\n+    public String getSubscriptionName() {\n+        return subscriptionName;\n+    }\n+\n+    /**\n+     * Get the lockDuration property: ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the\n+     * message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1\n+     * minute.\n+     *\n+     * @return the lockDuration value.\n+     */\n+    public Duration getLockDuration() {\n+        return this.lockDuration;\n+    }\n+\n+    /**\n+     * Set the lockDuration property: ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the\n+     * message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1\n+     * minute.\n+     *\n+     * @param lockDuration the lockDuration value to set.\n+     *\n+     * @return the CreateSubscriptionOptions object itself.\n+     */\n+    public CreateSubscriptionOptions setLockDuration(Duration lockDuration) {\n+        this.lockDuration = lockDuration;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the requiresSession property: A value that indicates whether the queue supports the concept of sessions.\n+     *\n+     * @return the requiresSession value.\n+     */\n+    public boolean requiresSession() {\n+        return this.requiresSession;\n+    }\n+\n+    /**\n+     * Set the requiresSession property: A value that indicates whether the queue supports the concept of sessions.\n+     *\n+     * @param requiresSession the requiresSession value to set.\n+     *\n+     * @return the CreateSubscriptionOptions object itself.\n+     */\n+    public CreateSubscriptionOptions setRequiresSession(boolean requiresSession) {\n+        this.requiresSession = requiresSession;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the defaultMessageTimeToLive property: ISO 8601 default message timespan to live value. This is the duration\n+     * after which the message expires, starting from when the message is sent to Service Bus. This is the default value\n+     * used when TimeToLive is not set on a message itself.\n+     *\n+     * @return the defaultMessageTimeToLive value.\n+     */\n+    public Duration getDefaultMessageTimeToLive() {\n+        return this.defaultMessageTimeToLive;\n+    }\n+\n+    /**\n+     * Set the defaultMessageTimeToLive property: ISO 8601 default message timespan to live value. This is the duration\n+     * after which the message expires, starting from when the message is sent to Service Bus. This is the default value\n+     * used when TimeToLive is not set on a message itself.\n+     *\n+     * @param defaultMessageTimeToLive the defaultMessageTimeToLive value to set.\n+     *\n+     * @return the CreateSubscriptionOptions object itself.\n+     */\n+    public CreateSubscriptionOptions setDefaultMessageTimeToLive(Duration defaultMessageTimeToLive) {\n+        this.defaultMessageTimeToLive = defaultMessageTimeToLive;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the deadLetteringOnMessageExpiration property: A value that indicates whether this subscription has dead\n+     * letter support when a message expires.\n+     *\n+     * @return the deadLetteringOnMessageExpiration value.\n+     */\n+    public boolean deadLetteringOnMessageExpiration() {\n+        return this.deadLetteringOnMessageExpiration;\n+    }\n+\n+    /**\n+     * Set the deadLetteringOnMessageExpiration property: A value that indicates whether this subscription has dead\n+     * letter support when a message expires.\n+     *\n+     * @param deadLetteringOnMessageExpiration the deadLetteringOnMessageExpiration value to set.\n+     *\n+     * @return the CreateSubscriptionOptions object itself.\n+     */\n+    public CreateSubscriptionOptions setDeadLetteringOnMessageExpiration(boolean deadLetteringOnMessageExpiration) {\n+        this.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the deadLetteringOnFilterEvaluationExceptions property: A value that indicates whether this subscription has\n+     * dead letter support when a message expires.\n+     *\n+     * @return the deadLetteringOnFilterEvaluationExceptions value.\n+     */\n+    public boolean enableDeadLetteringOnFilterEvaluationExceptions() {\n+        return this.deadLetteringOnFilterEvaluationExceptions;\n+    }\n+\n+    /**\n+     * Set the deadLetteringOnFilterEvaluationExceptions property: A value that indicates whether this subscription has\n+     * dead letter support when a message expires.\n+     *\n+     * @param deadLetteringOnFilterEvaluationExceptions the deadLetteringOnFilterEvaluationExceptions value to set.\n+     *\n+     * @return the CreateSubscriptionOptions object itself.\n+     */\n+    public CreateSubscriptionOptions setEnableDeadLetteringOnFilterEvaluationExceptions(\n+        boolean deadLetteringOnFilterEvaluationExceptions) {\n+        this.deadLetteringOnFilterEvaluationExceptions = deadLetteringOnFilterEvaluationExceptions;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the maxDeliveryCount property: The maximum delivery count. A message is automatically deadlettered after this\n+     * number of deliveries. Default value is 10.\n+     *\n+     * @return the maxDeliveryCount value.\n+     */\n+    public int getMaxDeliveryCount() {\n+        return this.maxDeliveryCount;\n+    }\n+\n+    /**\n+     * Set the maxDeliveryCount property: The maximum delivery count. A message is automatically deadlettered after this\n+     * number of deliveries. Default value is 10.\n+     *\n+     * @param maxDeliveryCount the maxDeliveryCount value to set.\n+     *\n+     * @return the CreateSubscriptionOptions object itself.\n+     */\n+    public CreateSubscriptionOptions setMaxDeliveryCount(int maxDeliveryCount) {\n+        this.maxDeliveryCount = maxDeliveryCount;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the enableBatchedOperations property: Value that indicates whether server-side batched operations are\n+     * enabled.\n+     *\n+     * @return the enableBatchedOperations value.\n+     */\n+    public boolean enableBatchedOperations() {\n+        return this.enableBatchedOperations;\n+    }\n+\n+    /**\n+     * Set the enableBatchedOperations property: Value that indicates whether server-side batched operations are\n+     * enabled.\n+     *\n+     * @param enableBatchedOperations the enableBatchedOperations value to set.\n+     *\n+     * @return the CreateSubscriptionOptions object itself.\n+     */\n+    public CreateSubscriptionOptions setEnableBatchedOperations(boolean enableBatchedOperations) {\n+        this.enableBatchedOperations = enableBatchedOperations;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the status property: Status of a Service Bus resource.\n+     *\n+     * @return the status value.\n+     */\n+    public EntityStatus getStatus() {\n+        return this.status;\n+    }\n+\n+    /**\n+     * Set the status property: Status of a Service Bus resource.\n+     *\n+     * @param status the status value to set.\n+     *\n+     * @return the CreateSubscriptionOptions object itself.\n+     */\n+    public CreateSubscriptionOptions setStatus(EntityStatus status) {\n+        this.status = status;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the forwardTo property: The name of the recipient entity to which all the messages sent to the subscription\n+     * are forwarded to.\n+     *\n+     * @return the forwardTo value.\n+     */\n+    public String getForwardTo() {\n+        return this.forwardTo;\n+    }\n+\n+    /**\n+     * Set the forwardTo property: The name of the recipient entity to which all the messages sent to the subscription\n+     * are forwarded to.\n+     *\n+     * @param forwardTo the forwardTo value to set.\n+     *\n+     * @return the CreateSubscriptionOptions object itself.\n+     */\n+    public CreateSubscriptionOptions setForwardTo(String forwardTo) {\n+        this.forwardTo = forwardTo;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the userMetadata property: Metadata associated with the subscription. Maximum number of characters is 1024.\n+     *\n+     * @return the userMetadata value.\n+     */\n+    public String getUserMetadata() {\n+        return this.userMetadata;\n+    }\n+\n+    /**\n+     * Set the userMetadata property: Metadata associated with the subscription. Maximum number of characters is 1024.\n+     *\n+     * @param userMetadata the userMetadata value to set.\n+     *\n+     * @return the CreateSubscriptionOptions object itself.\n+     */\n+    public CreateSubscriptionOptions setUserMetadata(String userMetadata) {\n+        this.userMetadata = userMetadata;\n+        return this;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75052be56060fcfb9eaf4d8e447c6ef67af7e6"}, "originalPosition": 374}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1616c22ae1829fe703b6e590ecfb7585504533b8", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/1616c22ae1829fe703b6e590ecfb7585504533b8", "committedDate": "2020-08-05T22:01:28Z", "message": "Merge branch 'master' of https://github.com/azure/azure-sdk-for-java into topic-changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a4fd26251f31c6050732615fb6b4b2f374decb1", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/5a4fd26251f31c6050732615fb6b4b2f374decb1", "committedDate": "2020-08-06T01:57:28Z", "message": "Regenerating implementation layer."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71974fde7960db9bb487d26c7f9048ff7b3d5c0b", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/71974fde7960db9bb487d26c7f9048ff7b3d5c0b", "committedDate": "2020-08-06T01:57:57Z", "message": "Adding methods for creating models and implementation of Subscription and Topics."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90b8a21741ca7fc2db31480e52febf4110bfdc7b", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/90b8a21741ca7fc2db31480e52febf4110bfdc7b", "committedDate": "2020-08-06T01:58:26Z", "message": "Adding SubscriptionDescription and TopicDescription."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9767c264e8c304457d5027d1b8e9670224440b19", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/9767c264e8c304457d5027d1b8e9670224440b19", "committedDate": "2020-08-06T01:58:46Z", "message": "Sorting CreateSubscriptionOptions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ac78c462b5546d021d9bb8464125cc3d60150a0", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/2ac78c462b5546d021d9bb8464125cc3d60150a0", "committedDate": "2020-08-06T01:59:04Z", "message": "Add supportOrdering to CreateTopicOptions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bda6d54e40758ed2dbf1e5b5949650e8e17191b", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/8bda6d54e40758ed2dbf1e5b5949650e8e17191b", "committedDate": "2020-08-06T01:59:32Z", "message": "Fix QueueProperties toImplementation method names."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74754ea2ea42a2e56c99f56f1c23ce9eff5bc0c3", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/74754ea2ea42a2e56c99f56f1c23ce9eff5bc0c3", "committedDate": "2020-08-06T07:52:29Z", "message": "Fixing build breaks from using primitives."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd89016c70387668f4dfa427dd2e4d08681b0bdc", "author": {"user": {"login": "conniey", "name": "Connie Yau"}}, "url": "https://github.com/Azure/azure-sdk-for-java/commit/cd89016c70387668f4dfa427dd2e4d08681b0bdc", "committedDate": "2020-08-06T07:53:45Z", "message": "Add suppression for false positives."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 934, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}