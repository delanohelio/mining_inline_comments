{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMTA1MDk5", "number": 774, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDowMToxNFrODrkj7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOToxNzoxM1rODslTcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDE0MzgyOnYy", "diffSide": "RIGHT", "path": "parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnSizeCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDowMToxNFrOF7_Wig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDowMToxNFrOF7_Wig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ0ODI2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // If user inputted columns, only print out size for those columns\n          \n          \n            \n                // If user defined columns, only print out size for those columns", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r398448266", "createdAt": "2020-03-26T10:01:14Z", "author": {"login": "gszadovszky"}, "path": "parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnSizeCommand.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.parquet.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import org.apache.avro.file.SeekableInput;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.cli.BaseCommand;\n+import org.apache.parquet.cli.util.Formats;\n+import org.apache.parquet.format.converter.ParquetMetadataConverter;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.apache.parquet.hadoop.metadata.BlockMetaData;\n+import org.apache.parquet.hadoop.metadata.ColumnChunkMetaData;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.slf4j.Logger;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Parameters(commandDescription=\"Print the column sizes of a parquet file\")\n+public class ColumnSizeCommand extends BaseCommand {\n+\n+  public ColumnSizeCommand(Logger console) {\n+    super(console);\n+  }\n+\n+  @Parameter(description = \"<parquet path>\")\n+  String target;\n+\n+  @Parameter(\n+    names = {\"-c\", \"--column\", \"--columns\"},\n+    description = \"List of columns\",\n+    required = false)\n+  List<String> columns;\n+\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public int run() throws IOException {\n+    Preconditions.checkArgument(target != null,\n+      \"A Parquet file is required.\");\n+\n+    Path inputFile = new Path(target);\n+    Map<String, Long> columnSizes = getColumnSizeInBytes(inputFile);\n+    Map<String, Float> columnPercentage = getColumnPercentage(columnSizes);\n+\n+    // If user inputted columns, only print out size for those columns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "749e5dfff61e1dbbe050dc9ad6916f366bbd8b08"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDIwNTc2OnYy", "diffSide": "RIGHT", "path": "parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnSizeCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDoxNzozOVrOF7_-QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDowMDowMFrOF8qWBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1ODQzMw==", "bodyText": "I think this behavior is misleading. What if the columns in the file are id and identity and you want to query the size of the column id?\nI would suggest checking equality and simply print the result instead of summarizing.", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r398458433", "createdAt": "2020-03-26T10:17:39Z", "author": {"login": "gszadovszky"}, "path": "parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnSizeCommand.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.parquet.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import org.apache.avro.file.SeekableInput;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.cli.BaseCommand;\n+import org.apache.parquet.cli.util.Formats;\n+import org.apache.parquet.format.converter.ParquetMetadataConverter;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.apache.parquet.hadoop.metadata.BlockMetaData;\n+import org.apache.parquet.hadoop.metadata.ColumnChunkMetaData;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.slf4j.Logger;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Parameters(commandDescription=\"Print the column sizes of a parquet file\")\n+public class ColumnSizeCommand extends BaseCommand {\n+\n+  public ColumnSizeCommand(Logger console) {\n+    super(console);\n+  }\n+\n+  @Parameter(description = \"<parquet path>\")\n+  String target;\n+\n+  @Parameter(\n+    names = {\"-c\", \"--column\", \"--columns\"},\n+    description = \"List of columns\",\n+    required = false)\n+  List<String> columns;\n+\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public int run() throws IOException {\n+    Preconditions.checkArgument(target != null,\n+      \"A Parquet file is required.\");\n+\n+    Path inputFile = new Path(target);\n+    Map<String, Long> columnSizes = getColumnSizeInBytes(inputFile);\n+    Map<String, Float> columnPercentage = getColumnPercentage(columnSizes);\n+\n+    // If user inputted columns, only print out size for those columns\n+    if (columns != null && columns.size() > 0) {\n+      for (String inputColumn : columns) {\n+        long size = 0;\n+        float percentage = 0;\n+        for (String column : columnSizes.keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "749e5dfff61e1dbbe050dc9ad6916f366bbd8b08"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0MTkwMw==", "bodyText": "Good finding! What if we change to 'if (column.equals(inputColumn) || column.startsWith(inputColumn + \".\"))'?\nIn some use cases, I see a parent field can have 50+ child fields. If a user wants to see that parent field, it would be cumbersome to input 50+ fields in the command.", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r398641903", "createdAt": "2020-03-26T15:01:10Z", "author": {"login": "shangxinli"}, "path": "parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnSizeCommand.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.parquet.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import org.apache.avro.file.SeekableInput;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.cli.BaseCommand;\n+import org.apache.parquet.cli.util.Formats;\n+import org.apache.parquet.format.converter.ParquetMetadataConverter;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.apache.parquet.hadoop.metadata.BlockMetaData;\n+import org.apache.parquet.hadoop.metadata.ColumnChunkMetaData;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.slf4j.Logger;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Parameters(commandDescription=\"Print the column sizes of a parquet file\")\n+public class ColumnSizeCommand extends BaseCommand {\n+\n+  public ColumnSizeCommand(Logger console) {\n+    super(console);\n+  }\n+\n+  @Parameter(description = \"<parquet path>\")\n+  String target;\n+\n+  @Parameter(\n+    names = {\"-c\", \"--column\", \"--columns\"},\n+    description = \"List of columns\",\n+    required = false)\n+  List<String> columns;\n+\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public int run() throws IOException {\n+    Preconditions.checkArgument(target != null,\n+      \"A Parquet file is required.\");\n+\n+    Path inputFile = new Path(target);\n+    Map<String, Long> columnSizes = getColumnSizeInBytes(inputFile);\n+    Map<String, Float> columnPercentage = getColumnPercentage(columnSizes);\n+\n+    // If user inputted columns, only print out size for those columns\n+    if (columns != null && columns.size() > 0) {\n+      for (String inputColumn : columns) {\n+        long size = 0;\n+        float percentage = 0;\n+        for (String column : columnSizes.keySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1ODQzMw=="}, "originalCommit": {"oid": "749e5dfff61e1dbbe050dc9ad6916f366bbd8b08"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1MjY0NA==", "bodyText": "It sounds good to me. It should be documented in the command line, though.", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r399152644", "createdAt": "2020-03-27T10:00:00Z", "author": {"login": "gszadovszky"}, "path": "parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnSizeCommand.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.parquet.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import org.apache.avro.file.SeekableInput;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.cli.BaseCommand;\n+import org.apache.parquet.cli.util.Formats;\n+import org.apache.parquet.format.converter.ParquetMetadataConverter;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.apache.parquet.hadoop.metadata.BlockMetaData;\n+import org.apache.parquet.hadoop.metadata.ColumnChunkMetaData;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.slf4j.Logger;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Parameters(commandDescription=\"Print the column sizes of a parquet file\")\n+public class ColumnSizeCommand extends BaseCommand {\n+\n+  public ColumnSizeCommand(Logger console) {\n+    super(console);\n+  }\n+\n+  @Parameter(description = \"<parquet path>\")\n+  String target;\n+\n+  @Parameter(\n+    names = {\"-c\", \"--column\", \"--columns\"},\n+    description = \"List of columns\",\n+    required = false)\n+  List<String> columns;\n+\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public int run() throws IOException {\n+    Preconditions.checkArgument(target != null,\n+      \"A Parquet file is required.\");\n+\n+    Path inputFile = new Path(target);\n+    Map<String, Long> columnSizes = getColumnSizeInBytes(inputFile);\n+    Map<String, Float> columnPercentage = getColumnPercentage(columnSizes);\n+\n+    // If user inputted columns, only print out size for those columns\n+    if (columns != null && columns.size() > 0) {\n+      for (String inputColumn : columns) {\n+        long size = 0;\n+        float percentage = 0;\n+        for (String column : columnSizes.keySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ1ODQzMw=="}, "originalCommit": {"oid": "749e5dfff61e1dbbe050dc9ad6916f366bbd8b08"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDIyODk0OnYy", "diffSide": "RIGHT", "path": "parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnSizeCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDoyMzoyNlrOF8AMjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTowNToyM1rOF8LYWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2MjA5Mg==", "bodyText": "I think, one of -c, --column or --columns is missing from here", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r398462092", "createdAt": "2020-03-26T10:23:26Z", "author": {"login": "gszadovszky"}, "path": "parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnSizeCommand.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.parquet.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import org.apache.avro.file.SeekableInput;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.cli.BaseCommand;\n+import org.apache.parquet.cli.util.Formats;\n+import org.apache.parquet.format.converter.ParquetMetadataConverter;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.apache.parquet.hadoop.metadata.BlockMetaData;\n+import org.apache.parquet.hadoop.metadata.ColumnChunkMetaData;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.slf4j.Logger;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Parameters(commandDescription=\"Print the column sizes of a parquet file\")\n+public class ColumnSizeCommand extends BaseCommand {\n+\n+  public ColumnSizeCommand(Logger console) {\n+    super(console);\n+  }\n+\n+  @Parameter(description = \"<parquet path>\")\n+  String target;\n+\n+  @Parameter(\n+    names = {\"-c\", \"--column\", \"--columns\"},\n+    description = \"List of columns\",\n+    required = false)\n+  List<String> columns;\n+\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public int run() throws IOException {\n+    Preconditions.checkArgument(target != null,\n+      \"A Parquet file is required.\");\n+\n+    Path inputFile = new Path(target);\n+    Map<String, Long> columnSizes = getColumnSizeInBytes(inputFile);\n+    Map<String, Float> columnPercentage = getColumnPercentage(columnSizes);\n+\n+    // If user inputted columns, only print out size for those columns\n+    if (columns != null && columns.size() > 0) {\n+      for (String inputColumn : columns) {\n+        long size = 0;\n+        float percentage = 0;\n+        for (String column : columnSizes.keySet()) {\n+          if (column.startsWith(inputColumn)) {\n+            size += columnSizes.get(column);\n+            percentage += columnPercentage.get(column);\n+          }\n+        }\n+        console.info(inputColumn + \"->\" + \" Size In Bytes: \" + size + \" Size In Percentage: \" + percentage);\n+      }\n+    } else {\n+      for (String column : columnSizes.keySet()) {\n+        console.info(column + \"->\" + \" Size In Bytes: \" + columnSizes.get(column)\n+          + \" Size In Percentage: \" + columnPercentage.get(column));\n+      }\n+    }\n+\n+    return 0;\n+  }\n+\n+  @Override\n+  public List<String> getExamples() {\n+    return Lists.newArrayList(\n+        \"# Print every column size in byte and percentage for a Parquet file\",\n+        \"sample.parquet\",\n+        \"sample.parquet col_1 col_2\",\n+        \"sample.parquet col_1 col_2.sub_col_a\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "749e5dfff61e1dbbe050dc9ad6916f366bbd8b08"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0NTMzNg==", "bodyText": "Got it.", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r398645336", "createdAt": "2020-03-26T15:05:23Z", "author": {"login": "shangxinli"}, "path": "parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnSizeCommand.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.parquet.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import org.apache.avro.file.SeekableInput;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.cli.BaseCommand;\n+import org.apache.parquet.cli.util.Formats;\n+import org.apache.parquet.format.converter.ParquetMetadataConverter;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.apache.parquet.hadoop.metadata.BlockMetaData;\n+import org.apache.parquet.hadoop.metadata.ColumnChunkMetaData;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.slf4j.Logger;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Parameters(commandDescription=\"Print the column sizes of a parquet file\")\n+public class ColumnSizeCommand extends BaseCommand {\n+\n+  public ColumnSizeCommand(Logger console) {\n+    super(console);\n+  }\n+\n+  @Parameter(description = \"<parquet path>\")\n+  String target;\n+\n+  @Parameter(\n+    names = {\"-c\", \"--column\", \"--columns\"},\n+    description = \"List of columns\",\n+    required = false)\n+  List<String> columns;\n+\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public int run() throws IOException {\n+    Preconditions.checkArgument(target != null,\n+      \"A Parquet file is required.\");\n+\n+    Path inputFile = new Path(target);\n+    Map<String, Long> columnSizes = getColumnSizeInBytes(inputFile);\n+    Map<String, Float> columnPercentage = getColumnPercentage(columnSizes);\n+\n+    // If user inputted columns, only print out size for those columns\n+    if (columns != null && columns.size() > 0) {\n+      for (String inputColumn : columns) {\n+        long size = 0;\n+        float percentage = 0;\n+        for (String column : columnSizes.keySet()) {\n+          if (column.startsWith(inputColumn)) {\n+            size += columnSizes.get(column);\n+            percentage += columnPercentage.get(column);\n+          }\n+        }\n+        console.info(inputColumn + \"->\" + \" Size In Bytes: \" + size + \" Size In Percentage: \" + percentage);\n+      }\n+    } else {\n+      for (String column : columnSizes.keySet()) {\n+        console.info(column + \"->\" + \" Size In Bytes: \" + columnSizes.get(column)\n+          + \" Size In Percentage: \" + columnPercentage.get(column));\n+      }\n+    }\n+\n+    return 0;\n+  }\n+\n+  @Override\n+  public List<String> getExamples() {\n+    return Lists.newArrayList(\n+        \"# Print every column size in byte and percentage for a Parquet file\",\n+        \"sample.parquet\",\n+        \"sample.parquet col_1 col_2\",\n+        \"sample.parquet col_1 col_2.sub_col_a\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2MjA5Mg=="}, "originalCommit": {"oid": "749e5dfff61e1dbbe050dc9ad6916f366bbd8b08"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDI1ODU1OnYy", "diffSide": "RIGHT", "path": "parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnSizeCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDozMToxN1rOF8AfLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTowODo1OVrOF8Ljyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2Njg2MQ==", "bodyText": "This is not percentage but ratio.", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r398466861", "createdAt": "2020-03-26T10:31:17Z", "author": {"login": "gszadovszky"}, "path": "parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnSizeCommand.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.parquet.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import org.apache.avro.file.SeekableInput;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.cli.BaseCommand;\n+import org.apache.parquet.cli.util.Formats;\n+import org.apache.parquet.format.converter.ParquetMetadataConverter;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.apache.parquet.hadoop.metadata.BlockMetaData;\n+import org.apache.parquet.hadoop.metadata.ColumnChunkMetaData;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.slf4j.Logger;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Parameters(commandDescription=\"Print the column sizes of a parquet file\")\n+public class ColumnSizeCommand extends BaseCommand {\n+\n+  public ColumnSizeCommand(Logger console) {\n+    super(console);\n+  }\n+\n+  @Parameter(description = \"<parquet path>\")\n+  String target;\n+\n+  @Parameter(\n+    names = {\"-c\", \"--column\", \"--columns\"},\n+    description = \"List of columns\",\n+    required = false)\n+  List<String> columns;\n+\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public int run() throws IOException {\n+    Preconditions.checkArgument(target != null,\n+      \"A Parquet file is required.\");\n+\n+    Path inputFile = new Path(target);\n+    Map<String, Long> columnSizes = getColumnSizeInBytes(inputFile);\n+    Map<String, Float> columnPercentage = getColumnPercentage(columnSizes);\n+\n+    // If user inputted columns, only print out size for those columns\n+    if (columns != null && columns.size() > 0) {\n+      for (String inputColumn : columns) {\n+        long size = 0;\n+        float percentage = 0;\n+        for (String column : columnSizes.keySet()) {\n+          if (column.startsWith(inputColumn)) {\n+            size += columnSizes.get(column);\n+            percentage += columnPercentage.get(column);\n+          }\n+        }\n+        console.info(inputColumn + \"->\" + \" Size In Bytes: \" + size + \" Size In Percentage: \" + percentage);\n+      }\n+    } else {\n+      for (String column : columnSizes.keySet()) {\n+        console.info(column + \"->\" + \" Size In Bytes: \" + columnSizes.get(column)\n+          + \" Size In Percentage: \" + columnPercentage.get(column));\n+      }\n+    }\n+\n+    return 0;\n+  }\n+\n+  @Override\n+  public List<String> getExamples() {\n+    return Lists.newArrayList(\n+        \"# Print every column size in byte and percentage for a Parquet file\",\n+        \"sample.parquet\",\n+        \"sample.parquet col_1 col_2\",\n+        \"sample.parquet col_1 col_2.sub_col_a\"\n+    );\n+  }\n+\n+  // Make it public to allow some automation tools to call it\n+  public Map<String, Long> getColumnSizeInBytes(Path inputFile) throws IOException {\n+    Map<String, Long> colSizes = new HashMap<>();\n+    ParquetMetadata pmd = ParquetFileReader.readFooter(new Configuration(), inputFile, ParquetMetadataConverter.NO_FILTER);\n+\n+    for (BlockMetaData block : pmd.getBlocks()) {\n+      for (ColumnChunkMetaData column : block.getColumns()) {\n+        String colName = column.getPath().toDotString();\n+        colSizes.put(colName, column.getTotalSize() + colSizes.getOrDefault(colName, 0L));\n+      }\n+    }\n+\n+    return colSizes;\n+  }\n+\n+  // Make it public to allow some automation tools to call it\n+  public Map<String, Float> getColumnPercentage(Map<String, Long> colSizes) {\n+    long totalSize = colSizes.values().stream().reduce(0L, Long::sum);\n+    Map<String, Float> colPercentage = new HashMap<>();\n+\n+    for (Map.Entry<String, Long> entry : colSizes.entrySet()) {\n+      colPercentage.put(entry.getKey(), ((float) entry.getValue()) / ((float) totalSize));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "749e5dfff61e1dbbe050dc9ad6916f366bbd8b08"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0ODI2Nw==", "bodyText": "changed to ratio", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r398648267", "createdAt": "2020-03-26T15:08:59Z", "author": {"login": "shangxinli"}, "path": "parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnSizeCommand.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.parquet.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import org.apache.avro.file.SeekableInput;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.cli.BaseCommand;\n+import org.apache.parquet.cli.util.Formats;\n+import org.apache.parquet.format.converter.ParquetMetadataConverter;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.apache.parquet.hadoop.metadata.BlockMetaData;\n+import org.apache.parquet.hadoop.metadata.ColumnChunkMetaData;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.slf4j.Logger;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Parameters(commandDescription=\"Print the column sizes of a parquet file\")\n+public class ColumnSizeCommand extends BaseCommand {\n+\n+  public ColumnSizeCommand(Logger console) {\n+    super(console);\n+  }\n+\n+  @Parameter(description = \"<parquet path>\")\n+  String target;\n+\n+  @Parameter(\n+    names = {\"-c\", \"--column\", \"--columns\"},\n+    description = \"List of columns\",\n+    required = false)\n+  List<String> columns;\n+\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public int run() throws IOException {\n+    Preconditions.checkArgument(target != null,\n+      \"A Parquet file is required.\");\n+\n+    Path inputFile = new Path(target);\n+    Map<String, Long> columnSizes = getColumnSizeInBytes(inputFile);\n+    Map<String, Float> columnPercentage = getColumnPercentage(columnSizes);\n+\n+    // If user inputted columns, only print out size for those columns\n+    if (columns != null && columns.size() > 0) {\n+      for (String inputColumn : columns) {\n+        long size = 0;\n+        float percentage = 0;\n+        for (String column : columnSizes.keySet()) {\n+          if (column.startsWith(inputColumn)) {\n+            size += columnSizes.get(column);\n+            percentage += columnPercentage.get(column);\n+          }\n+        }\n+        console.info(inputColumn + \"->\" + \" Size In Bytes: \" + size + \" Size In Percentage: \" + percentage);\n+      }\n+    } else {\n+      for (String column : columnSizes.keySet()) {\n+        console.info(column + \"->\" + \" Size In Bytes: \" + columnSizes.get(column)\n+          + \" Size In Percentage: \" + columnPercentage.get(column));\n+      }\n+    }\n+\n+    return 0;\n+  }\n+\n+  @Override\n+  public List<String> getExamples() {\n+    return Lists.newArrayList(\n+        \"# Print every column size in byte and percentage for a Parquet file\",\n+        \"sample.parquet\",\n+        \"sample.parquet col_1 col_2\",\n+        \"sample.parquet col_1 col_2.sub_col_a\"\n+    );\n+  }\n+\n+  // Make it public to allow some automation tools to call it\n+  public Map<String, Long> getColumnSizeInBytes(Path inputFile) throws IOException {\n+    Map<String, Long> colSizes = new HashMap<>();\n+    ParquetMetadata pmd = ParquetFileReader.readFooter(new Configuration(), inputFile, ParquetMetadataConverter.NO_FILTER);\n+\n+    for (BlockMetaData block : pmd.getBlocks()) {\n+      for (ColumnChunkMetaData column : block.getColumns()) {\n+        String colName = column.getPath().toDotString();\n+        colSizes.put(colName, column.getTotalSize() + colSizes.getOrDefault(colName, 0L));\n+      }\n+    }\n+\n+    return colSizes;\n+  }\n+\n+  // Make it public to allow some automation tools to call it\n+  public Map<String, Float> getColumnPercentage(Map<String, Long> colSizes) {\n+    long totalSize = colSizes.values().stream().reduce(0L, Long::sum);\n+    Map<String, Float> colPercentage = new HashMap<>();\n+\n+    for (Map.Entry<String, Long> entry : colSizes.entrySet()) {\n+      colPercentage.put(entry.getKey(), ((float) entry.getValue()) / ((float) totalSize));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2Njg2MQ=="}, "originalCommit": {"oid": "749e5dfff61e1dbbe050dc9ad6916f366bbd8b08"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDI4NDk0OnYy", "diffSide": "RIGHT", "path": "parquet-tools/src/main/java/org/apache/parquet/tools/command/ColumnSizeCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDozODoxM1rOF8Avgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDozODoxM1rOF8Avgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ3MTA0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \"where <input> is the parquet file to calculate teh column size\" +\n          \n          \n            \n                \"     [<column> ...] are the columns in the case sensitive dot format\" +\n          \n          \n            \n                \"     to be calculated, for example a.b.c. If no columns are input, all the\" +\n          \n          \n            \n                \"     columns will be printed out\"\n          \n          \n            \n                \"where <input> is the parquet file to calculate the column size\" +\n          \n          \n            \n                \"     [<column> ...] are the columns in the case sensitive dot format\" +\n          \n          \n            \n                \"     to be calculated, for example a.b.c. If no columns are set, all the\" +\n          \n          \n            \n                \"     columns will be printed out\"", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r398471043", "createdAt": "2020-03-26T10:38:13Z", "author": {"login": "gszadovszky"}, "path": "parquet-tools/src/main/java/org/apache/parquet/tools/command/ColumnSizeCommand.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.tools.command;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.format.converter.ParquetMetadataConverter;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.apache.parquet.hadoop.metadata.BlockMetaData;\n+import org.apache.parquet.hadoop.metadata.ColumnChunkMetaData;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.apache.parquet.tools.Main;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ColumnSizeCommand extends ArgsOnlyCommand {\n+\n+  public static final String[] USAGE = new String[] {\n+    \"<input>\",\n+    \"where <input> is the parquet file to calculate teh column size\" +\n+    \"     [<column> ...] are the columns in the case sensitive dot format\" +\n+    \"     to be calculated, for example a.b.c. If no columns are input, all the\" +\n+    \"     columns will be printed out\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "749e5dfff61e1dbbe050dc9ad6916f366bbd8b08"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDI5MjU4OnYy", "diffSide": "RIGHT", "path": "parquet-tools/src/main/java/org/apache/parquet/tools/command/ColumnSizeCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDo0MDowN1rOF8A0BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTowOTozOVrOF8Ll5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ3MjE5Nw==", "bodyText": "See my comment at cli.", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r398472197", "createdAt": "2020-03-26T10:40:07Z", "author": {"login": "gszadovszky"}, "path": "parquet-tools/src/main/java/org/apache/parquet/tools/command/ColumnSizeCommand.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.tools.command;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.format.converter.ParquetMetadataConverter;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.apache.parquet.hadoop.metadata.BlockMetaData;\n+import org.apache.parquet.hadoop.metadata.ColumnChunkMetaData;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.apache.parquet.tools.Main;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ColumnSizeCommand extends ArgsOnlyCommand {\n+\n+  public static final String[] USAGE = new String[] {\n+    \"<input>\",\n+    \"where <input> is the parquet file to calculate teh column size\" +\n+    \"     [<column> ...] are the columns in the case sensitive dot format\" +\n+    \"     to be calculated, for example a.b.c. If no columns are input, all the\" +\n+    \"     columns will be printed out\"\n+  };\n+\n+  /**\n+   * Biggest number of columns we can calculate.\n+   */\n+  private static final int MAX_COL_NUM = 100;\n+\n+  public ColumnSizeCommand() {\n+    super(1, 1 + MAX_COL_NUM);\n+  }\n+\n+  @Override\n+  public String[] getUsageDescription() {\n+    return USAGE;\n+  }\n+\n+  @Override\n+  public String getCommandDescription() {\n+    return \"Print out the size in bytes and percentage of column(s) in the input Parquet file\";\n+  }\n+\n+  @Override\n+  public void execute(CommandLine options) throws Exception {\n+    super.execute(options);\n+    List<String> args = options.getArgList();\n+    Path inputFile = new Path(args.get(0));\n+\n+    Map<String, Long> columnSizes = getColumnSizeInBytes(inputFile);\n+    Map<String, Float> columnPercentage = getColumnPercentage(columnSizes);\n+\n+    if (args.size() > 1) {\n+      for (String inputColumn : args.subList(1, args.size())) {\n+        long size = 0;\n+        float percentage = 0;\n+        for (String column : columnSizes.keySet()) {\n+          if (column.startsWith(inputColumn)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "749e5dfff61e1dbbe050dc9ad6916f366bbd8b08"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0ODgwNA==", "bodyText": "Thanks.", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r398648804", "createdAt": "2020-03-26T15:09:39Z", "author": {"login": "shangxinli"}, "path": "parquet-tools/src/main/java/org/apache/parquet/tools/command/ColumnSizeCommand.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.tools.command;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.format.converter.ParquetMetadataConverter;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.apache.parquet.hadoop.metadata.BlockMetaData;\n+import org.apache.parquet.hadoop.metadata.ColumnChunkMetaData;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.apache.parquet.tools.Main;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ColumnSizeCommand extends ArgsOnlyCommand {\n+\n+  public static final String[] USAGE = new String[] {\n+    \"<input>\",\n+    \"where <input> is the parquet file to calculate teh column size\" +\n+    \"     [<column> ...] are the columns in the case sensitive dot format\" +\n+    \"     to be calculated, for example a.b.c. If no columns are input, all the\" +\n+    \"     columns will be printed out\"\n+  };\n+\n+  /**\n+   * Biggest number of columns we can calculate.\n+   */\n+  private static final int MAX_COL_NUM = 100;\n+\n+  public ColumnSizeCommand() {\n+    super(1, 1 + MAX_COL_NUM);\n+  }\n+\n+  @Override\n+  public String[] getUsageDescription() {\n+    return USAGE;\n+  }\n+\n+  @Override\n+  public String getCommandDescription() {\n+    return \"Print out the size in bytes and percentage of column(s) in the input Parquet file\";\n+  }\n+\n+  @Override\n+  public void execute(CommandLine options) throws Exception {\n+    super.execute(options);\n+    List<String> args = options.getArgList();\n+    Path inputFile = new Path(args.get(0));\n+\n+    Map<String, Long> columnSizes = getColumnSizeInBytes(inputFile);\n+    Map<String, Float> columnPercentage = getColumnPercentage(columnSizes);\n+\n+    if (args.size() > 1) {\n+      for (String inputColumn : args.subList(1, args.size())) {\n+        long size = 0;\n+        float percentage = 0;\n+        for (String column : columnSizes.keySet()) {\n+          if (column.startsWith(inputColumn)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ3MjE5Nw=="}, "originalCommit": {"oid": "749e5dfff61e1dbbe050dc9ad6916f366bbd8b08"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDI5MzE1OnYy", "diffSide": "RIGHT", "path": "parquet-tools/src/main/java/org/apache/parquet/tools/command/ColumnSizeCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDo0MDoxNVrOF8A0Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTowOTo0MlrOF8LmFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ3MjI5NA==", "bodyText": "See my comment at cli.", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r398472294", "createdAt": "2020-03-26T10:40:15Z", "author": {"login": "gszadovszky"}, "path": "parquet-tools/src/main/java/org/apache/parquet/tools/command/ColumnSizeCommand.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.tools.command;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.format.converter.ParquetMetadataConverter;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.apache.parquet.hadoop.metadata.BlockMetaData;\n+import org.apache.parquet.hadoop.metadata.ColumnChunkMetaData;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.apache.parquet.tools.Main;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ColumnSizeCommand extends ArgsOnlyCommand {\n+\n+  public static final String[] USAGE = new String[] {\n+    \"<input>\",\n+    \"where <input> is the parquet file to calculate teh column size\" +\n+    \"     [<column> ...] are the columns in the case sensitive dot format\" +\n+    \"     to be calculated, for example a.b.c. If no columns are input, all the\" +\n+    \"     columns will be printed out\"\n+  };\n+\n+  /**\n+   * Biggest number of columns we can calculate.\n+   */\n+  private static final int MAX_COL_NUM = 100;\n+\n+  public ColumnSizeCommand() {\n+    super(1, 1 + MAX_COL_NUM);\n+  }\n+\n+  @Override\n+  public String[] getUsageDescription() {\n+    return USAGE;\n+  }\n+\n+  @Override\n+  public String getCommandDescription() {\n+    return \"Print out the size in bytes and percentage of column(s) in the input Parquet file\";\n+  }\n+\n+  @Override\n+  public void execute(CommandLine options) throws Exception {\n+    super.execute(options);\n+    List<String> args = options.getArgList();\n+    Path inputFile = new Path(args.get(0));\n+\n+    Map<String, Long> columnSizes = getColumnSizeInBytes(inputFile);\n+    Map<String, Float> columnPercentage = getColumnPercentage(columnSizes);\n+\n+    if (args.size() > 1) {\n+      for (String inputColumn : args.subList(1, args.size())) {\n+        long size = 0;\n+        float percentage = 0;\n+        for (String column : columnSizes.keySet()) {\n+          if (column.startsWith(inputColumn)) {\n+            size += columnSizes.get(column);\n+            percentage += columnPercentage.get(column);\n+          }\n+        }\n+        Main.out.println(inputColumn + \"->\" + \" Size In Bytes: \" + size + \" Size In Percentage: \" + percentage);\n+      }\n+    } else {\n+      for (String column : columnSizes.keySet()) {\n+        Main.out.println(column + \"->\" + \" Size In Bytes: \" + columnSizes.get(column)\n+          + \" Size In Percentage: \" + columnPercentage.get(column));\n+      }\n+    }\n+  }\n+\n+  // Make it public to allow some automation tools to call it\n+  public Map<String, Long> getColumnSizeInBytes(Path inputFile) throws IOException {\n+    Map<String, Long> colSizes = new HashMap<>();\n+    ParquetMetadata pmd = ParquetFileReader.readFooter(new Configuration(), inputFile, ParquetMetadataConverter.NO_FILTER);\n+\n+    for (BlockMetaData block : pmd.getBlocks()) {\n+      for (ColumnChunkMetaData column : block.getColumns()) {\n+        String colName = column.getPath().toDotString();\n+        colSizes.put(colName, column.getTotalSize() + colSizes.getOrDefault(colName, 0L));\n+      }\n+    }\n+\n+    return colSizes;\n+  }\n+\n+  // Make it public to allow some automation tools to call it\n+  public Map<String, Float> getColumnPercentage(Map<String, Long> colSizes) {\n+    long totalSize = colSizes.values().stream().reduce(0L, Long::sum);\n+    Map<String, Float> colPercentage = new HashMap<>();\n+\n+    for (Map.Entry<String, Long> entry : colSizes.entrySet()) {\n+      colPercentage.put(entry.getKey(), ((float) entry.getValue()) / ((float) totalSize));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "749e5dfff61e1dbbe050dc9ad6916f366bbd8b08"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0ODg1NQ==", "bodyText": "Thanks.", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r398648855", "createdAt": "2020-03-26T15:09:42Z", "author": {"login": "shangxinli"}, "path": "parquet-tools/src/main/java/org/apache/parquet/tools/command/ColumnSizeCommand.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.tools.command;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.format.converter.ParquetMetadataConverter;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.apache.parquet.hadoop.metadata.BlockMetaData;\n+import org.apache.parquet.hadoop.metadata.ColumnChunkMetaData;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.apache.parquet.tools.Main;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ColumnSizeCommand extends ArgsOnlyCommand {\n+\n+  public static final String[] USAGE = new String[] {\n+    \"<input>\",\n+    \"where <input> is the parquet file to calculate teh column size\" +\n+    \"     [<column> ...] are the columns in the case sensitive dot format\" +\n+    \"     to be calculated, for example a.b.c. If no columns are input, all the\" +\n+    \"     columns will be printed out\"\n+  };\n+\n+  /**\n+   * Biggest number of columns we can calculate.\n+   */\n+  private static final int MAX_COL_NUM = 100;\n+\n+  public ColumnSizeCommand() {\n+    super(1, 1 + MAX_COL_NUM);\n+  }\n+\n+  @Override\n+  public String[] getUsageDescription() {\n+    return USAGE;\n+  }\n+\n+  @Override\n+  public String getCommandDescription() {\n+    return \"Print out the size in bytes and percentage of column(s) in the input Parquet file\";\n+  }\n+\n+  @Override\n+  public void execute(CommandLine options) throws Exception {\n+    super.execute(options);\n+    List<String> args = options.getArgList();\n+    Path inputFile = new Path(args.get(0));\n+\n+    Map<String, Long> columnSizes = getColumnSizeInBytes(inputFile);\n+    Map<String, Float> columnPercentage = getColumnPercentage(columnSizes);\n+\n+    if (args.size() > 1) {\n+      for (String inputColumn : args.subList(1, args.size())) {\n+        long size = 0;\n+        float percentage = 0;\n+        for (String column : columnSizes.keySet()) {\n+          if (column.startsWith(inputColumn)) {\n+            size += columnSizes.get(column);\n+            percentage += columnPercentage.get(column);\n+          }\n+        }\n+        Main.out.println(inputColumn + \"->\" + \" Size In Bytes: \" + size + \" Size In Percentage: \" + percentage);\n+      }\n+    } else {\n+      for (String column : columnSizes.keySet()) {\n+        Main.out.println(column + \"->\" + \" Size In Bytes: \" + columnSizes.get(column)\n+          + \" Size In Percentage: \" + columnPercentage.get(column));\n+      }\n+    }\n+  }\n+\n+  // Make it public to allow some automation tools to call it\n+  public Map<String, Long> getColumnSizeInBytes(Path inputFile) throws IOException {\n+    Map<String, Long> colSizes = new HashMap<>();\n+    ParquetMetadata pmd = ParquetFileReader.readFooter(new Configuration(), inputFile, ParquetMetadataConverter.NO_FILTER);\n+\n+    for (BlockMetaData block : pmd.getBlocks()) {\n+      for (ColumnChunkMetaData column : block.getColumns()) {\n+        String colName = column.getPath().toDotString();\n+        colSizes.put(colName, column.getTotalSize() + colSizes.getOrDefault(colName, 0L));\n+      }\n+    }\n+\n+    return colSizes;\n+  }\n+\n+  // Make it public to allow some automation tools to call it\n+  public Map<String, Float> getColumnPercentage(Map<String, Long> colSizes) {\n+    long totalSize = colSizes.values().stream().reduce(0L, Long::sum);\n+    Map<String, Float> colPercentage = new HashMap<>();\n+\n+    for (Map.Entry<String, Long> entry : colSizes.entrySet()) {\n+      colPercentage.put(entry.getKey(), ((float) entry.getValue()) / ((float) totalSize));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ3MjI5NA=="}, "originalCommit": {"oid": "749e5dfff61e1dbbe050dc9ad6916f366bbd8b08"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDYxMzkwOnYy", "diffSide": "RIGHT", "path": "parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnSizeCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDowMjoyNlrOF8qbIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDowMjoyNlrOF8qbIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1Mzk1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"sample.parquet -column col_2\",\n          \n          \n            \n                    \"sample.parquet -columns col_1 col_2\",\n          \n          \n            \n                    \"sample.parquet -columns col_1 col_2.sub_col_a\"\n          \n          \n            \n                    \"sample.parquet --column col_2\",\n          \n          \n            \n                    \"sample.parquet --columns col_1 col_2\",\n          \n          \n            \n                    \"sample.parquet --columns col_1 col_2.sub_col_a\"", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r399153953", "createdAt": "2020-03-27T10:02:26Z", "author": {"login": "gszadovszky"}, "path": "parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnSizeCommand.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.parquet.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import org.apache.avro.file.SeekableInput;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.cli.BaseCommand;\n+import org.apache.parquet.cli.util.Formats;\n+import org.apache.parquet.format.converter.ParquetMetadataConverter;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.apache.parquet.hadoop.metadata.BlockMetaData;\n+import org.apache.parquet.hadoop.metadata.ColumnChunkMetaData;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.slf4j.Logger;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Parameters(commandDescription=\"Print the column sizes of a parquet file\")\n+public class ColumnSizeCommand extends BaseCommand {\n+\n+  public ColumnSizeCommand(Logger console) {\n+    super(console);\n+  }\n+\n+  @Parameter(description = \"<parquet path>\")\n+  String target;\n+\n+  @Parameter(\n+    names = {\"-c\", \"--column\", \"--columns\"},\n+    description = \"List of columns\",\n+    required = false)\n+  List<String> columns;\n+\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public int run() throws IOException {\n+    Preconditions.checkArgument(target != null,\n+      \"A Parquet file is required.\");\n+\n+    Path inputFile = new Path(target);\n+    Map<String, Long> columnSizes = getColumnSizeInBytes(inputFile);\n+    Map<String, Float> columnRatio = getColumnRatio(columnSizes);\n+\n+    // If user defined columns, only print out size for those columns\n+    if (columns != null && columns.size() > 0) {\n+      for (String inputColumn : columns) {\n+        long size = 0;\n+        float ratio = 0;\n+        for (String column : columnSizes.keySet()) {\n+          if (column.equals(inputColumn) || column.startsWith(inputColumn + \".\")) {\n+            size += columnSizes.get(column);\n+            ratio += columnRatio.get(column);\n+          }\n+        }\n+        console.info(inputColumn + \"->\" + \" Size In Bytes: \" + size + \" Size In Ratio: \" + ratio);\n+      }\n+    } else {\n+      for (String column : columnSizes.keySet()) {\n+        console.info(column + \"->\" + \" Size In Bytes: \" + columnSizes.get(column)\n+          + \" Size In Ratio: \" + columnRatio.get(column));\n+      }\n+    }\n+\n+    return 0;\n+  }\n+\n+  @Override\n+  public List<String> getExamples() {\n+    return Lists.newArrayList(\n+        \"# Print every column size in byte and ratio for a Parquet file\",\n+        \"sample.parquet\",\n+        \"sample.parquet -c col_1\",\n+        \"sample.parquet -column col_2\",\n+        \"sample.parquet -columns col_1 col_2\",\n+        \"sample.parquet -columns col_1 col_2.sub_col_a\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3f2cac3c8a954f4a20fb1026507a011d5151aff"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODgzOTAxOnYy", "diffSide": "RIGHT", "path": "parquet-tools/src/test/java/org/apache/parquet/tools/command/TestColumnSizeCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwOTozNjozN1rOF9QHtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNTo0Mjo0NVrOF9SxVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3MTU3Mg==", "bodyText": "Instead of having this file, we can use a JUnit rule: \n  \n    \n      parquet-mr/parquet-cli/src/test/java/org/apache/parquet/cli/commands/FileTest.java\n    \n    \n         Line 42\n      in\n      c3e1a84\n    \n    \n    \n    \n\n        \n          \n           public TemporaryFolder tempFolder = new TemporaryFolder(); \n        \n    \n  \n\n\nThen we can do: temporaryFolder.newFile(\"test.parquet\");\nWould be nice to keep this consistent", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r399771572", "createdAt": "2020-03-29T09:36:37Z", "author": {"login": "Fokko"}, "path": "parquet-tools/src/test/java/org/apache/parquet/tools/command/TestColumnSizeCommand.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.parquet.tools.command;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.example.data.simple.SimpleGroup;\n+import org.apache.parquet.hadoop.ParquetWriter;\n+import org.apache.parquet.hadoop.example.ExampleParquetWriter;\n+import org.apache.parquet.hadoop.example.GroupWriteSupport;\n+import org.apache.parquet.schema.MessageType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.INT32;\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.INT64;\n+import static org.apache.parquet.schema.Type.Repetition.REQUIRED;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TestColumnSizeCommand {\n+\n+  private final int numRecord = 10000;\n+  private ColumnSizeCommand command = new ColumnSizeCommand();\n+  private Configuration conf = new Configuration();\n+\n+  @Test\n+  public void testColumnSize() throws Exception {\n+    String inputFile = createParquetFile(\"input\");\n+    Map<String, Long> columnSizeInBytes = command.getColumnSizeInBytes(new Path(inputFile));\n+    assertEquals(columnSizeInBytes.size(), 2);\n+    assertTrue(columnSizeInBytes.get(\"DocId\") > columnSizeInBytes.get(\"Num\"));\n+    Map<String, Float> columnRatio = command.getColumnRatio(columnSizeInBytes);\n+    assertTrue(columnRatio.get(\"DocId\") > columnRatio.get(\"Num\"));\n+  }\n+\n+  private String createParquetFile(String prefix) throws IOException {\n+    MessageType schema = new MessageType(\"schema\",\n+      new PrimitiveType(REQUIRED, INT64, \"DocId\"),\n+      new PrimitiveType(REQUIRED, INT32, \"Num\"));\n+\n+    conf.set(GroupWriteSupport.PARQUET_EXAMPLE_SCHEMA, schema.toString());\n+\n+    String file = createTempFile(prefix);\n+    ExampleParquetWriter.Builder builder = ExampleParquetWriter.builder(new Path(file)).withConf(conf);\n+    Random rnd = new Random();\n+    try (ParquetWriter writer = builder.build()) {\n+      for (int i = 0; i < numRecord; i++) {\n+        SimpleGroup g = new SimpleGroup(schema);\n+        g.add(\"DocId\", rnd.nextLong());\n+        g.add(\"Num\", rnd.nextInt());\n+        writer.write(g);\n+      }\n+    }\n+\n+    return file;\n+  }\n+\n+  private static String createTempFile(String prefix) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1be782b2f1609d9aa6386d48aacfd64c622d0035"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxNDk5Nw==", "bodyText": "Sounds good!", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r399814997", "createdAt": "2020-03-29T15:42:45Z", "author": {"login": "shangxinli"}, "path": "parquet-tools/src/test/java/org/apache/parquet/tools/command/TestColumnSizeCommand.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.parquet.tools.command;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.example.data.simple.SimpleGroup;\n+import org.apache.parquet.hadoop.ParquetWriter;\n+import org.apache.parquet.hadoop.example.ExampleParquetWriter;\n+import org.apache.parquet.hadoop.example.GroupWriteSupport;\n+import org.apache.parquet.schema.MessageType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.INT32;\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.INT64;\n+import static org.apache.parquet.schema.Type.Repetition.REQUIRED;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TestColumnSizeCommand {\n+\n+  private final int numRecord = 10000;\n+  private ColumnSizeCommand command = new ColumnSizeCommand();\n+  private Configuration conf = new Configuration();\n+\n+  @Test\n+  public void testColumnSize() throws Exception {\n+    String inputFile = createParquetFile(\"input\");\n+    Map<String, Long> columnSizeInBytes = command.getColumnSizeInBytes(new Path(inputFile));\n+    assertEquals(columnSizeInBytes.size(), 2);\n+    assertTrue(columnSizeInBytes.get(\"DocId\") > columnSizeInBytes.get(\"Num\"));\n+    Map<String, Float> columnRatio = command.getColumnRatio(columnSizeInBytes);\n+    assertTrue(columnRatio.get(\"DocId\") > columnRatio.get(\"Num\"));\n+  }\n+\n+  private String createParquetFile(String prefix) throws IOException {\n+    MessageType schema = new MessageType(\"schema\",\n+      new PrimitiveType(REQUIRED, INT64, \"DocId\"),\n+      new PrimitiveType(REQUIRED, INT32, \"Num\"));\n+\n+    conf.set(GroupWriteSupport.PARQUET_EXAMPLE_SCHEMA, schema.toString());\n+\n+    String file = createTempFile(prefix);\n+    ExampleParquetWriter.Builder builder = ExampleParquetWriter.builder(new Path(file)).withConf(conf);\n+    Random rnd = new Random();\n+    try (ParquetWriter writer = builder.build()) {\n+      for (int i = 0; i < numRecord; i++) {\n+        SimpleGroup g = new SimpleGroup(schema);\n+        g.add(\"DocId\", rnd.nextLong());\n+        g.add(\"Num\", rnd.nextInt());\n+        writer.write(g);\n+      }\n+    }\n+\n+    return file;\n+  }\n+\n+  private static String createTempFile(String prefix) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3MTU3Mg=="}, "originalCommit": {"oid": "1be782b2f1609d9aa6386d48aacfd64c622d0035"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODgzOTYwOnYy", "diffSide": "RIGHT", "path": "parquet-tools/src/main/java/org/apache/parquet/tools/command/ColumnSizeCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwOTozNzoyN1rOF9QH_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwOTozNzoyN1rOF9QH_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3MTY0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Main.out.println(inputColumn + \"->\" + \" Size In Bytes: \" + size + \" Size In Ratio: \" + ratio);\n          \n          \n            \n                    Main.out.println(inputColumn + \"-> Size In Bytes: \" + size + \" Size In Ratio: \" + ratio);", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r399771647", "createdAt": "2020-03-29T09:37:27Z", "author": {"login": "Fokko"}, "path": "parquet-tools/src/main/java/org/apache/parquet/tools/command/ColumnSizeCommand.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.tools.command;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.format.converter.ParquetMetadataConverter;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.apache.parquet.hadoop.metadata.BlockMetaData;\n+import org.apache.parquet.hadoop.metadata.ColumnChunkMetaData;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.apache.parquet.tools.Main;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ColumnSizeCommand extends ArgsOnlyCommand {\n+\n+  public static final String[] USAGE = new String[] {\n+    \"<input>\",\n+    \"where <input> is the parquet file to calculate the column size\" +\n+    \"     [<column> ...] are the columns in the case sensitive dot format\" +\n+    \"     to be calculated, for example a.b.c. If an input column is intermediate\" +\n+    \"     column, all the child columns will be printed out. If no columns are\" +\n+    \"     set, all the columns will be printed out.\"\n+  };\n+\n+  /**\n+   * Biggest number of columns we can calculate.\n+   */\n+  private static final int MAX_COL_NUM = 100;\n+\n+  public ColumnSizeCommand() {\n+    super(1, 1 + MAX_COL_NUM);\n+  }\n+\n+  @Override\n+  public String[] getUsageDescription() {\n+    return USAGE;\n+  }\n+\n+  @Override\n+  public String getCommandDescription() {\n+    return \"Print out the size in bytes and ratio of column(s) in the input Parquet file\";\n+  }\n+\n+  @Override\n+  public void execute(CommandLine options) throws Exception {\n+    super.execute(options);\n+    List<String> args = options.getArgList();\n+    Path inputFile = new Path(args.get(0));\n+\n+    Map<String, Long> columnSizes = getColumnSizeInBytes(inputFile);\n+    Map<String, Float> columnRatio = getColumnRatio(columnSizes);\n+\n+    if (args.size() > 1) {\n+      for (String inputColumn : args.subList(1, args.size())) {\n+        long size = 0;\n+        float ratio = 0;\n+        for (String column : columnSizes.keySet()) {\n+          if (column.equals(inputColumn) || column.startsWith(inputColumn + \".\")) {\n+            size += columnSizes.get(column);\n+            ratio += columnRatio.get(column);\n+          }\n+        }\n+        Main.out.println(inputColumn + \"->\" + \" Size In Bytes: \" + size + \" Size In Ratio: \" + ratio);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1be782b2f1609d9aa6386d48aacfd64c622d0035"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODg0MDM1OnYy", "diffSide": "RIGHT", "path": "parquet-cli/src/test/java/org/apache/parquet/cli/commands/ColumnSizeCommandTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwOTozODoyM1rOF9QIWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNjowMTowM1rOF9S6gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3MTczNw==", "bodyText": "See comment in TestColumnSizeCommand.java \ud83d\udc4d", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r399771737", "createdAt": "2020-03-29T09:38:23Z", "author": {"login": "Fokko"}, "path": "parquet-cli/src/test/java/org/apache/parquet/cli/commands/ColumnSizeCommandTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.cli.commands;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.example.data.simple.SimpleGroup;\n+import org.apache.parquet.hadoop.ParquetWriter;\n+import org.apache.parquet.hadoop.example.ExampleParquetWriter;\n+import org.apache.parquet.hadoop.example.GroupWriteSupport;\n+import org.apache.parquet.schema.MessageType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.INT32;\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.INT64;\n+import static org.apache.parquet.schema.Type.Repetition.REQUIRED;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ColumnSizeCommandTest extends ParquetFileTest {\n+\n+  private final int numRecord = 10000;\n+  private ColumnSizeCommand command = new ColumnSizeCommand(createLogger());\n+  private Configuration conf = new Configuration();\n+\n+  @Test\n+  public void testColumnSizeCommand() throws IOException {\n+    File file = parquetFile();\n+    ColumnSizeCommand command = new ColumnSizeCommand(createLogger());\n+    command.target = file.getAbsolutePath();\n+    command.setConf(new Configuration());\n+    Assert.assertEquals(0, command.run());\n+  }\n+\n+  @Test\n+  public void testColumnSize() throws Exception {\n+    String inputFile = createParquetFile(\"input\");\n+    Map<String, Long> columnSizeInBytes = command.getColumnSizeInBytes(new Path(inputFile));\n+    assertEquals(columnSizeInBytes.size(), 2);\n+    assertTrue(columnSizeInBytes.get(\"DocId\") > columnSizeInBytes.get(\"Num\"));\n+    Map<String, Float> columnRatio = command.getColumnRatio(columnSizeInBytes);\n+    assertTrue(columnRatio.get(\"DocId\") > columnRatio.get(\"Num\"));\n+  }\n+\n+  private String createParquetFile(String prefix) throws IOException {\n+    MessageType schema = new MessageType(\"schema\",\n+      new PrimitiveType(REQUIRED, INT64, \"DocId\"),\n+      new PrimitiveType(REQUIRED, INT32, \"Num\"));\n+\n+    conf.set(GroupWriteSupport.PARQUET_EXAMPLE_SCHEMA, schema.toString());\n+\n+    String file = createTempFile(prefix);\n+    ExampleParquetWriter.Builder builder = ExampleParquetWriter.builder(new Path(file)).withConf(conf);\n+    Random rnd = new Random();\n+    try (ParquetWriter writer = builder.build()) {\n+      for (int i = 0; i < numRecord; i++) {\n+        SimpleGroup g = new SimpleGroup(schema);\n+        g.add(\"DocId\", rnd.nextLong());\n+        g.add(\"Num\", rnd.nextInt());\n+        writer.write(g);\n+      }\n+    }\n+\n+    return file;\n+  }\n+\n+  private static String createTempFile(String prefix) {\n+    try {\n+      return Files.createTempDirectory(prefix).toAbsolutePath().toString() + \"/test.parquet\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1be782b2f1609d9aa6386d48aacfd64c622d0035"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxNzM0NA==", "bodyText": "Sounds good!", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r399817344", "createdAt": "2020-03-29T16:01:03Z", "author": {"login": "shangxinli"}, "path": "parquet-cli/src/test/java/org/apache/parquet/cli/commands/ColumnSizeCommandTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.cli.commands;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.example.data.simple.SimpleGroup;\n+import org.apache.parquet.hadoop.ParquetWriter;\n+import org.apache.parquet.hadoop.example.ExampleParquetWriter;\n+import org.apache.parquet.hadoop.example.GroupWriteSupport;\n+import org.apache.parquet.schema.MessageType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.INT32;\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.INT64;\n+import static org.apache.parquet.schema.Type.Repetition.REQUIRED;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ColumnSizeCommandTest extends ParquetFileTest {\n+\n+  private final int numRecord = 10000;\n+  private ColumnSizeCommand command = new ColumnSizeCommand(createLogger());\n+  private Configuration conf = new Configuration();\n+\n+  @Test\n+  public void testColumnSizeCommand() throws IOException {\n+    File file = parquetFile();\n+    ColumnSizeCommand command = new ColumnSizeCommand(createLogger());\n+    command.target = file.getAbsolutePath();\n+    command.setConf(new Configuration());\n+    Assert.assertEquals(0, command.run());\n+  }\n+\n+  @Test\n+  public void testColumnSize() throws Exception {\n+    String inputFile = createParquetFile(\"input\");\n+    Map<String, Long> columnSizeInBytes = command.getColumnSizeInBytes(new Path(inputFile));\n+    assertEquals(columnSizeInBytes.size(), 2);\n+    assertTrue(columnSizeInBytes.get(\"DocId\") > columnSizeInBytes.get(\"Num\"));\n+    Map<String, Float> columnRatio = command.getColumnRatio(columnSizeInBytes);\n+    assertTrue(columnRatio.get(\"DocId\") > columnRatio.get(\"Num\"));\n+  }\n+\n+  private String createParquetFile(String prefix) throws IOException {\n+    MessageType schema = new MessageType(\"schema\",\n+      new PrimitiveType(REQUIRED, INT64, \"DocId\"),\n+      new PrimitiveType(REQUIRED, INT32, \"Num\"));\n+\n+    conf.set(GroupWriteSupport.PARQUET_EXAMPLE_SCHEMA, schema.toString());\n+\n+    String file = createTempFile(prefix);\n+    ExampleParquetWriter.Builder builder = ExampleParquetWriter.builder(new Path(file)).withConf(conf);\n+    Random rnd = new Random();\n+    try (ParquetWriter writer = builder.build()) {\n+      for (int i = 0; i < numRecord; i++) {\n+        SimpleGroup g = new SimpleGroup(schema);\n+        g.add(\"DocId\", rnd.nextLong());\n+        g.add(\"Num\", rnd.nextInt());\n+        writer.write(g);\n+      }\n+    }\n+\n+    return file;\n+  }\n+\n+  private static String createTempFile(String prefix) {\n+    try {\n+      return Files.createTempDirectory(prefix).toAbsolutePath().toString() + \"/test.parquet\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3MTczNw=="}, "originalCommit": {"oid": "1be782b2f1609d9aa6386d48aacfd64c622d0035"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDc0OTYwOnYy", "diffSide": "RIGHT", "path": "parquet-cli/src/test/java/org/apache/parquet/cli/commands/ColumnSizeCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOToxNjo0NlrOF9gpkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOToxNjo0NlrOF9gpkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MjM4Ng==", "bodyText": "prefix is never used and so it is misleading.\nTravis fails because parquetFile() uses the class name to create the file while there are two test methods invoking it. The file already exist after executing the second test method.\nI would suggest correcting the super class implementation by generating a unique file name each time parquetFile is invoked.", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r400042386", "createdAt": "2020-03-30T09:16:46Z", "author": {"login": "gszadovszky"}, "path": "parquet-cli/src/test/java/org/apache/parquet/cli/commands/ColumnSizeCommandTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.cli.commands;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.example.data.simple.SimpleGroup;\n+import org.apache.parquet.hadoop.ParquetWriter;\n+import org.apache.parquet.hadoop.example.ExampleParquetWriter;\n+import org.apache.parquet.hadoop.example.GroupWriteSupport;\n+import org.apache.parquet.schema.MessageType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.INT32;\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.INT64;\n+import static org.apache.parquet.schema.Type.Repetition.REQUIRED;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ColumnSizeCommandTest extends ParquetFileTest {\n+\n+  private final int numRecord = 10000;\n+  private ColumnSizeCommand command = new ColumnSizeCommand(createLogger());\n+  private Configuration conf = new Configuration();\n+\n+  @Test\n+  public void testColumnSizeCommand() throws IOException {\n+    File file = parquetFile();\n+    ColumnSizeCommand command = new ColumnSizeCommand(createLogger());\n+    command.target = file.getAbsolutePath();\n+    command.setConf(new Configuration());\n+    Assert.assertEquals(0, command.run());\n+  }\n+\n+  @Test\n+  public void testColumnSize() throws Exception {\n+    String inputFile = createParquetFile(\"input\");\n+    Map<String, Long> columnSizeInBytes = command.getColumnSizeInBytes(new Path(inputFile));\n+    assertEquals(columnSizeInBytes.size(), 2);\n+    assertTrue(columnSizeInBytes.get(\"DocId\") > columnSizeInBytes.get(\"Num\"));\n+    Map<String, Float> columnRatio = command.getColumnRatio(columnSizeInBytes);\n+    assertTrue(columnRatio.get(\"DocId\") > columnRatio.get(\"Num\"));\n+  }\n+\n+  private String createParquetFile(String prefix) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01ebbdf6b6a3583a60697e341e82b046aa1bb2d8"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDc1MTIxOnYy", "diffSide": "RIGHT", "path": "parquet-tools/src/test/java/org/apache/parquet/tools/command/TestColumnSizeCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOToxNzoxM1rOF9gqlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOToxNzoxM1rOF9gqlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MjY0NA==", "bodyText": "prefix is not used and so it is misleading.", "url": "https://github.com/apache/parquet-mr/pull/774#discussion_r400042644", "createdAt": "2020-03-30T09:17:13Z", "author": {"login": "gszadovszky"}, "path": "parquet-tools/src/test/java/org/apache/parquet/tools/command/TestColumnSizeCommand.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.parquet.tools.command;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.example.data.simple.SimpleGroup;\n+import org.apache.parquet.hadoop.ParquetWriter;\n+import org.apache.parquet.hadoop.example.ExampleParquetWriter;\n+import org.apache.parquet.hadoop.example.GroupWriteSupport;\n+import org.apache.parquet.schema.MessageType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.INT32;\n+import static org.apache.parquet.schema.PrimitiveType.PrimitiveTypeName.INT64;\n+import static org.apache.parquet.schema.Type.Repetition.REQUIRED;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TestColumnSizeCommand {\n+\n+  private final int numRecord = 10000;\n+  private ColumnSizeCommand command = new ColumnSizeCommand();\n+  private Configuration conf = new Configuration();\n+\n+  @Rule\n+  public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testColumnSize() throws Exception {\n+    String inputFile = createParquetFile(\"input\");\n+    Map<String, Long> columnSizeInBytes = command.getColumnSizeInBytes(new Path(inputFile));\n+    assertEquals(columnSizeInBytes.size(), 2);\n+    assertTrue(columnSizeInBytes.get(\"DocId\") > columnSizeInBytes.get(\"Num\"));\n+    Map<String, Float> columnRatio = command.getColumnRatio(columnSizeInBytes);\n+    assertTrue(columnRatio.get(\"DocId\") > columnRatio.get(\"Num\"));\n+  }\n+\n+  private String createParquetFile(String prefix) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01ebbdf6b6a3583a60697e341e82b046aa1bb2d8"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4748, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}