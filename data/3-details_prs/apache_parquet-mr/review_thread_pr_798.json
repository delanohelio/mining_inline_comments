{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NTMwNjU0", "number": 798, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTo1ODo1MVrOEIVfPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoxOTowMlrOEIV4GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTc2MTI0OnYy", "diffSide": "RIGHT", "path": "parquet-column/src/main/java/org/apache/parquet/schema/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTo1ODo1MVrOGoO_6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNDowMTowNVrOGoqkvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0MTk2Mw==", "bodyText": "I would suggest using ConverstionPatterns.MAP_REPEATED_NAME here as well.", "url": "https://github.com/apache/parquet-mr/pull/798#discussion_r444841963", "createdAt": "2020-06-24T11:58:51Z", "author": {"login": "gszadovszky"}, "path": "parquet-column/src/main/java/org/apache/parquet/schema/Types.java", "diffHunk": "@@ -1179,18 +1181,18 @@ protected Type build(String name) {\n         keyType = STRING_KEY;\n       }\n \n-      GroupBuilder<GroupType> builder = buildGroup(repetition).as(OriginalType.MAP);\n+      GroupBuilder<GroupType> builder = buildGroup(repetition).as(mapType());\n       if (id != null) {\n         builder.id(id.intValue());\n       }\n \n       if (valueType != null) {\n         return builder\n-            .repeatedGroup().addFields(keyType, valueType).named(\"map\")\n+            .repeatedGroup().addFields(keyType, valueType).named(\"key_value\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d075ab55cde82e0637fce171b19bc076520339"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5Mzc1OQ==", "bodyText": "\ud83d\udc4d updated", "url": "https://github.com/apache/parquet-mr/pull/798#discussion_r445293759", "createdAt": "2020-06-25T04:01:05Z", "author": {"login": "maccamlc"}, "path": "parquet-column/src/main/java/org/apache/parquet/schema/Types.java", "diffHunk": "@@ -1179,18 +1181,18 @@ protected Type build(String name) {\n         keyType = STRING_KEY;\n       }\n \n-      GroupBuilder<GroupType> builder = buildGroup(repetition).as(OriginalType.MAP);\n+      GroupBuilder<GroupType> builder = buildGroup(repetition).as(mapType());\n       if (id != null) {\n         builder.id(id.intValue());\n       }\n \n       if (valueType != null) {\n         return builder\n-            .repeatedGroup().addFields(keyType, valueType).named(\"map\")\n+            .repeatedGroup().addFields(keyType, valueType).named(\"key_value\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0MTk2Mw=="}, "originalCommit": {"oid": "e3d075ab55cde82e0637fce171b19bc076520339"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTgyNDg4OnYy", "diffSide": "RIGHT", "path": "parquet-hadoop/src/test/java/org/apache/parquet/format/converter/TestParquetMetadataConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoxOTowMlrOGoPnyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNDowNToyOVrOGoqowA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1MjE2OQ==", "bodyText": "Please, do not organize imports. It makes merge conflicts hard to resolve.", "url": "https://github.com/apache/parquet-mr/pull/798#discussion_r444852169", "createdAt": "2020-06-24T12:19:02Z", "author": {"login": "gszadovszky"}, "path": "parquet-hadoop/src/test/java/org/apache/parquet/format/converter/TestParquetMetadataConverter.java", "diffHunk": "@@ -18,57 +18,9 @@\n  */\n package org.apache.parquet.format.converter;\n \n-import static java.util.Collections.emptyList;\n-import static org.apache.parquet.format.converter.ParquetMetadataConverter.filterFileMetaDataByStart;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.TimeUnit.MICROS;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.TimeUnit.MILLIS;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.TimeUnit.NANOS;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.bsonType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.dateType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.decimalType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.enumType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.intType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.jsonType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.listType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.mapType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.stringType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.timeType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.timestampType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.uuidType;\n-import static org.apache.parquet.schema.MessageTypeParser.parseMessageType;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-import static org.apache.parquet.format.CompressionCodec.UNCOMPRESSED;\n-import static org.apache.parquet.format.Type.INT32;\n-import static org.apache.parquet.format.Util.readPageHeader;\n-import static org.apache.parquet.format.Util.writePageHeader;\n-import static org.apache.parquet.format.converter.ParquetMetadataConverter.filterFileMetaDataByMidpoint;\n-import static org.apache.parquet.format.converter.ParquetMetadataConverter.getOffset;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.math.BigInteger;\n-import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n-import java.security.SecureRandom;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Random;\n-import java.util.Set;\n-import java.util.TreeSet;\n-\n+import com.google.common.collect.Lists;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d075ab55cde82e0637fce171b19bc076520339"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5NDc4NA==", "bodyText": "Didn't notice. Sorry, should be reverted now", "url": "https://github.com/apache/parquet-mr/pull/798#discussion_r445294784", "createdAt": "2020-06-25T04:05:29Z", "author": {"login": "maccamlc"}, "path": "parquet-hadoop/src/test/java/org/apache/parquet/format/converter/TestParquetMetadataConverter.java", "diffHunk": "@@ -18,57 +18,9 @@\n  */\n package org.apache.parquet.format.converter;\n \n-import static java.util.Collections.emptyList;\n-import static org.apache.parquet.format.converter.ParquetMetadataConverter.filterFileMetaDataByStart;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.TimeUnit.MICROS;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.TimeUnit.MILLIS;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.TimeUnit.NANOS;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.bsonType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.dateType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.decimalType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.enumType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.intType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.jsonType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.listType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.mapType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.stringType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.timeType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.timestampType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.uuidType;\n-import static org.apache.parquet.schema.MessageTypeParser.parseMessageType;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-import static org.apache.parquet.format.CompressionCodec.UNCOMPRESSED;\n-import static org.apache.parquet.format.Type.INT32;\n-import static org.apache.parquet.format.Util.readPageHeader;\n-import static org.apache.parquet.format.Util.writePageHeader;\n-import static org.apache.parquet.format.converter.ParquetMetadataConverter.filterFileMetaDataByMidpoint;\n-import static org.apache.parquet.format.converter.ParquetMetadataConverter.getOffset;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.math.BigInteger;\n-import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n-import java.security.SecureRandom;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Random;\n-import java.util.Set;\n-import java.util.TreeSet;\n-\n+import com.google.common.collect.Lists;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1MjE2OQ=="}, "originalCommit": {"oid": "e3d075ab55cde82e0637fce171b19bc076520339"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4779, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}