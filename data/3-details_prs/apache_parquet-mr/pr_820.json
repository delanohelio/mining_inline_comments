{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MDI0NDYz", "number": 820, "title": "PARQUET-1917: Don't write values for oneOf fields that aren't set", "bodyText": "https://issues.apache.org/jira/browse/PARQUET-1917\nJira\n\n My PR addresses the following Parquet Jira issues and references them in the PR title.\n\nTests\n\n My PR adds the following unit tests OR does not need testing for this extremely good reason:\n\nCommits\n\n My commits all reference Jira issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation\n\n In case of new functionality, my PR adds documentation that describes how to use it.\n\nAll the public functions and the classes in the PR contain Javadoc that explain what it does", "createdAt": "2020-09-29T18:38:16Z", "url": "https://github.com/apache/parquet-mr/pull/820", "merged": true, "mergeCommit": {"oid": "14b7a8be8ac98c7f96fc3fd2d5c21cbddf736b64"}, "closed": true, "closedAt": "2020-10-22T14:54:30Z", "author": {"login": "dossett"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNsm17AH2gAyNDk1MDI0NDYzOmU4Njc0Zjg4NWZjMmFmNWIzYmVjMjU3ZjNkYTMyZTUwMzY1YTJmNDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVDPNDAFqTUxNDgyMDcyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e8674f885fc2af5b3bec257f3da32e50365a2f43", "author": {"user": {"login": "dossett", "name": "Aaron Niskode-Dossett"}}, "url": "https://github.com/apache/parquet-mr/commit/e8674f885fc2af5b3bec257f3da32e50365a2f43", "committedDate": "2020-09-29T18:36:30Z", "message": "PARQUET-1917 Don't write values for oneOf fields that aren't actually set"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4Nzc2NTU2", "url": "https://github.com/apache/parquet-mr/pull/820#pullrequestreview-498776556", "createdAt": "2020-09-29T18:43:24Z", "commit": {"oid": "e8674f885fc2af5b3bec257f3da32e50365a2f43"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo0MzoyNFrOHZ7_qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo0MzoyNFrOHZ7_qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1OTQwMA==", "bodyText": "Maybe this approach is too simplistic, but it does seem like exactly the behavior needed.", "url": "https://github.com/apache/parquet-mr/pull/820#discussion_r496959400", "createdAt": "2020-09-29T18:43:24Z", "author": {"login": "dossett"}, "path": "parquet-protobuf/src/main/java/org/apache/parquet/proto/ProtoWriteSupport.java", "diffHunk": "@@ -337,6 +337,12 @@ private void writeAllFields(MessageOrBuilder pb) {\n         List<FieldDescriptor> fieldDescriptors = messageDescriptor.getFields();\n         for (FieldDescriptor fieldDescriptor : fieldDescriptors) {\n           FieldDescriptor.Type type = fieldDescriptor.getType();\n+\n+          //For a field in a oneOf that isn't set don't write anything\n+          if (fieldDescriptor.getContainingOneof() != null && !pb.hasField(fieldDescriptor)) {\n+            continue;\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8674f885fc2af5b3bec257f3da32e50365a2f43"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e81f8e5413142387025d0666f04dcab99180c729", "author": {"user": {"login": "dossett", "name": "Aaron Niskode-Dossett"}}, "url": "https://github.com/apache/parquet-mr/commit/e81f8e5413142387025d0666f04dcab99180c729", "committedDate": "2020-09-29T20:01:44Z", "message": "cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4779149bdd1516d2e92f47f6e519420dd05147b", "author": {"user": {"login": "dossett", "name": "Aaron Niskode-Dossett"}}, "url": "https://github.com/apache/parquet-mr/commit/f4779149bdd1516d2e92f47f6e519420dd05147b", "committedDate": "2020-10-01T15:31:46Z", "message": "add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbf2dfe5f1785c1b54d4aaafca4f9bc28455a189", "author": {"user": {"login": "dossett", "name": "Aaron Niskode-Dossett"}}, "url": "https://github.com/apache/parquet-mr/commit/dbf2dfe5f1785c1b54d4aaafca4f9bc28455a189", "committedDate": "2020-10-01T16:51:25Z", "message": "revise and extend tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d7a36459e928064d6ffaa0df2ddf1609efce0ba", "author": {"user": {"login": "dossett", "name": "Aaron Niskode-Dossett"}}, "url": "https://github.com/apache/parquet-mr/commit/9d7a36459e928064d6ffaa0df2ddf1609efce0ba", "committedDate": "2020-10-01T16:58:10Z", "message": "comment cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMTMxMzkz", "url": "https://github.com/apache/parquet-mr/pull/820#pullrequestreview-501131393", "createdAt": "2020-10-02T13:24:47Z", "commit": {"oid": "9d7a36459e928064d6ffaa0df2ddf1609efce0ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoyNDo0OFrOHbtfhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoyNDo0OFrOHbtfhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxODk1MQ==", "bodyText": "Bit of a nit here, but if you find yourself putting in comments like \"this is test 1, this is test 2, this is test 3, etc.\" that is a clear sign that you need to break the test into multiple test methods.\nIf a test fails, it will be much easier to figure out exactly what broke instead of having to step through all this code.  It also ensure that the tests are testing what is intended and that there aren't any side-effects/artifacts of the other test scenarios interfering.", "url": "https://github.com/apache/parquet-mr/pull/820#discussion_r498818951", "createdAt": "2020-10-02T13:24:48Z", "author": {"login": "belugabehr"}, "path": "parquet-protobuf/src/test/java/org/apache/parquet/proto/ProtoWriteSupportTest.java", "diffHunk": "@@ -913,4 +918,62 @@ public void testMessageWithExtensions() throws Exception {\n \n     instance.write(msg.build());\n   }\n+\n+  @Test\n+  public void testMessageOneOf() {\n+    RecordConsumer readConsumerMock =  Mockito.mock(RecordConsumer.class);\n+    ProtoWriteSupport<TestProto3.OneOfTestMessage> spyWriter = createReadConsumerInstance(TestProto3.OneOfTestMessage.class, readConsumerMock);\n+    final int theInt = 99;\n+\n+    TestProto3.OneOfTestMessage.Builder msg = TestProto3.OneOfTestMessage.newBuilder();\n+    msg.setSecond(theInt);\n+    spyWriter.write(msg.build());\n+\n+    InOrder inOrder = Mockito.inOrder(readConsumerMock);\n+\n+    inOrder.verify(readConsumerMock).startMessage();\n+    inOrder.verify(readConsumerMock).startField(\"second\", 1);\n+    inOrder.verify(readConsumerMock).addInteger(theInt);\n+    inOrder.verify(readConsumerMock).endField(\"second\", 1);\n+    inOrder.verify(readConsumerMock).endMessage();\n+    Mockito.verifyNoMoreInteractions(readConsumerMock);\n+  }\n+\n+  /**\n+   * Ensure that a message with a oneOf gets written out correctly and can be\n+   * read back as expected.\n+   */\n+  @Test\n+  public void testMessageOneOfRoundTrip() throws IOException {\n+\n+    TestProto3.OneOfTestMessage.Builder msgBuilder = TestProto3.OneOfTestMessage.newBuilder();\n+    msgBuilder.setSecond(99);\n+    TestProto3.OneOfTestMessage theMessage = msgBuilder.build();\n+\n+    TestProto3.OneOfTestMessage.Builder msgBuilder2 = TestProto3.OneOfTestMessage.newBuilder();\n+    TestProto3.OneOfTestMessage theMessageNothingSet = msgBuilder2.build();\n+\n+    TestProto3.OneOfTestMessage.Builder msgBuilder3 = TestProto3.OneOfTestMessage.newBuilder();\n+    msgBuilder3.setFirst(42);\n+    TestProto3.OneOfTestMessage theMessageFirstSet = msgBuilder3.build();\n+\n+    //Write them out and read them back\n+    Path tmpFilePath = TestUtils.writeMessages(theMessage, theMessageNothingSet, theMessageFirstSet);\n+    List<TestProto3.OneOfTestMessage> gotBack = TestUtils.readMessages(tmpFilePath, TestProto3.OneOfTestMessage.class);\n+\n+    //First message", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d7a36459e928064d6ffaa0df2ddf1609efce0ba"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0ODE3MTM5", "url": "https://github.com/apache/parquet-mr/pull/820#pullrequestreview-514817139", "createdAt": "2020-10-22T14:52:42Z", "commit": {"oid": "9d7a36459e928064d6ffaa0df2ddf1609efce0ba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0ODIwNzI5", "url": "https://github.com/apache/parquet-mr/pull/820#pullrequestreview-514820729", "createdAt": "2020-10-22T14:55:58Z", "commit": {"oid": "9d7a36459e928064d6ffaa0df2ddf1609efce0ba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2231, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}