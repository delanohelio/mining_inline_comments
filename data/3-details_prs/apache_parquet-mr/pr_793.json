{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNTg4NDc5", "number": 793, "title": "PARQUET-1866: Replace Hadoop ZSTD with JNI-ZSTD", "bodyText": "Make sure you have checked all steps below.\nJira\n\n My PR addresses the following Parquet Jira issues and references them in the PR title. For example, \"PARQUET-1234: My Parquet PR\"\n\nhttps://issues.apache.org/jira/browse/PARQUET-XXX\nIn case you are adding a dependency, check if the license complies with the ASF 3rd Party License Policy.\n\n\n\nTests\n\n My PR adds the following unit tests OR does not need testing for this extremely good reason:\n\nCommits\n\n My commits all reference Jira issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation\n\n In case of new functionality, my PR adds documentation that describes how to use it.\n\nAll the public functions and the classes in the PR contain Javadoc that explain what it does", "createdAt": "2020-05-21T21:11:34Z", "url": "https://github.com/apache/parquet-mr/pull/793", "merged": true, "mergeCommit": {"oid": "dc40b598a003dc8da38cadd576c9a36ece1eea1f"}, "closed": true, "closedAt": "2020-06-03T07:17:16Z", "author": {"login": "shangxinli"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjk-YWgBqjMzNjI0OTI2MTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnkKIxgFqTQyMzI3ODYzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26e6dfbfff857c36426c3c0d1f2cda2a258853d3", "author": {"user": {"login": "shangxinli", "name": "Xinli Shang"}}, "url": "https://github.com/apache/parquet-mr/commit/26e6dfbfff857c36426c3c0d1f2cda2a258853d3", "committedDate": "2020-05-21T21:56:45Z", "message": "Fix failing test"}, "afterCommit": {"oid": "c8169fe3886ed5365e598a80d34ed20518d8baed", "author": {"user": {"login": "shangxinli", "name": "Xinli Shang"}}, "url": "https://github.com/apache/parquet-mr/commit/c8169fe3886ed5365e598a80d34ed20518d8baed", "committedDate": "2020-05-21T21:57:34Z", "message": "PARQUET-1866: Replace Hadoop ZSTD with JNI-ZSTD"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a85adc88b5bc25fdc4da245c891e7539b40d4a8e", "author": {"user": {"login": "shangxinli", "name": "Xinli Shang"}}, "url": "https://github.com/apache/parquet-mr/commit/a85adc88b5bc25fdc4da245c891e7539b40d4a8e", "committedDate": "2020-05-21T23:25:54Z", "message": "Fix failing test"}, "afterCommit": {"oid": "a99c7200d508f38326e58504da1279623f757d1c", "author": {"user": {"login": "shangxinli", "name": "Xinli Shang"}}, "url": "https://github.com/apache/parquet-mr/commit/a99c7200d508f38326e58504da1279623f757d1c", "committedDate": "2020-05-21T23:26:21Z", "message": "PARQUET-1866: Replace Hadoop ZSTD with JNI-ZSTD"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5ebcacb791d3f1cea4699cddefdd0fb4c8b8fe9", "author": {"user": {"login": "shangxinli", "name": "Xinli Shang"}}, "url": "https://github.com/apache/parquet-mr/commit/e5ebcacb791d3f1cea4699cddefdd0fb4c8b8fe9", "committedDate": "2020-05-22T02:07:13Z", "message": "Trigger a new build"}, "afterCommit": {"oid": "4c264fc063fbd17f8e068060d8c1713083bcf3d2", "author": {"user": {"login": "shangxinli", "name": "Xinli Shang"}}, "url": "https://github.com/apache/parquet-mr/commit/4c264fc063fbd17f8e068060d8c1713083bcf3d2", "committedDate": "2020-05-22T02:07:44Z", "message": "PARQUET-1866: Replace Hadoop ZSTD with JNI-ZSTD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c16585f6bcb747e661b6e077a9fe92fde57612d2", "author": {"user": {"login": "shangxinli", "name": "Xinli Shang"}}, "url": "https://github.com/apache/parquet-mr/commit/c16585f6bcb747e661b6e077a9fe92fde57612d2", "committedDate": "2020-05-22T03:48:35Z", "message": "PARQUET-1866: Replace Hadoop ZSTD with JNI-ZSTD"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a55f4fd3186776e90d01295249ab9a0f9197e7b6", "author": {"user": {"login": "shangxinli", "name": "Xinli Shang"}}, "url": "https://github.com/apache/parquet-mr/commit/a55f4fd3186776e90d01295249ab9a0f9197e7b6", "committedDate": "2020-05-22T03:48:00Z", "message": "Trigger a new build"}, "afterCommit": {"oid": "c16585f6bcb747e661b6e077a9fe92fde57612d2", "author": {"user": {"login": "shangxinli", "name": "Xinli Shang"}}, "url": "https://github.com/apache/parquet-mr/commit/c16585f6bcb747e661b6e077a9fe92fde57612d2", "committedDate": "2020-05-22T03:48:35Z", "message": "PARQUET-1866: Replace Hadoop ZSTD with JNI-ZSTD"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NzM1NjQy", "url": "https://github.com/apache/parquet-mr/pull/793#pullrequestreview-416735642", "createdAt": "2020-05-22T08:25:35Z", "commit": {"oid": "c16585f6bcb747e661b6e077a9fe92fde57612d2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODoyNTozNVrOGZO63A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo1NjoxN1rOGZRhzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExMjAyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * one because it requires 1) to set up hadoop on local develop machine;\n          \n          \n            \n             * one because it requires 1) to set up hadoop on local development machine;", "url": "https://github.com/apache/parquet-mr/pull/793#discussion_r429112028", "createdAt": "2020-05-22T08:25:35Z", "author": {"login": "gszadovszky"}, "path": "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/codec/ZstdCodec.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/* \n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.hadoop.codec;\n+\n+import org.apache.hadoop.conf.Configurable;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.io.compress.CompressionCodec;\n+import org.apache.hadoop.io.compress.CompressionInputStream;\n+import org.apache.hadoop.io.compress.CompressionOutputStream;\n+import org.apache.hadoop.io.compress.Compressor;\n+import org.apache.hadoop.io.compress.Decompressor;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+/**\n+ * ZSTD compression codec for Parquet.  We do not use the default hadoop\n+ * one because it requires 1) to set up hadoop on local develop machine;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c16585f6bcb747e661b6e077a9fe92fde57612d2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExMzA0MQ==", "bodyText": "Please, also update the documentation in the README.", "url": "https://github.com/apache/parquet-mr/pull/793#discussion_r429113041", "createdAt": "2020-05-22T08:27:44Z", "author": {"login": "gszadovszky"}, "path": "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/codec/ZstdCodec.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/* \n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.hadoop.codec;\n+\n+import org.apache.hadoop.conf.Configurable;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.io.compress.CompressionCodec;\n+import org.apache.hadoop.io.compress.CompressionInputStream;\n+import org.apache.hadoop.io.compress.CompressionOutputStream;\n+import org.apache.hadoop.io.compress.Compressor;\n+import org.apache.hadoop.io.compress.Decompressor;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+/**\n+ * ZSTD compression codec for Parquet.  We do not use the default hadoop\n+ * one because it requires 1) to set up hadoop on local develop machine;\n+ * 2) to upgrade hadoop to the newer version to have ZSTD support which is\n+ * more cumbersome than upgrading parquet version.\n+ *\n+ * This implementation relies on ZSTD JNI(https://github.com/luben/zstd-jni)\n+ * which is already a dependency for Parquet. ZSTD JNI ZstdOutputStream and\n+ * ZstdInputStream use Zstd internally. So no need to create compressor and\n+ * decompressor in ZstdCodec.\n+ */\n+public class ZstdCodec implements Configurable, CompressionCodec {\n+\n+  public final static String PARQUET_COMPRESS_ZSTD_LEVEL = \"parquet.compression.codec.zstd.level\";\n+  public final static int DEFAULT_PARQUET_COMPRESS_ZSTD_LEVEL = 3;\n+  public final static String PARQUET_COMPRESS_ZSTD_WORKERS = \"parquet.compression.codec.zstd.workers\";\n+  public final static int DEFAULTPARQUET_COMPRESS_ZSTD_WORKERS = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c16585f6bcb747e661b6e077a9fe92fde57612d2"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1NDc2NA==", "bodyText": "I tried to find the code part where we set the hadoop conf to the codec but could not find it. Please, write a high level test where you set compression level and workers in the hadoop conf and executes a file write via e.g. an MR job.", "url": "https://github.com/apache/parquet-mr/pull/793#discussion_r429154764", "createdAt": "2020-05-22T09:56:17Z", "author": {"login": "gszadovszky"}, "path": "parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestZstdCodec.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/* \n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.hadoop;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.io.compress.CompressionOutputStream;\n+import org.apache.parquet.bytes.BytesInput;\n+import org.apache.parquet.hadoop.codec.ZstdCodec;\n+import org.junit.Assert;\n+import org.junit.Test;  \n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Random;\n+\n+public class TestZstdCodec {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c16585f6bcb747e661b6e077a9fe92fde57612d2"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bae6b85eaaa2d9b847d29e579af2c2c602970d28", "author": {"user": {"login": "shangxinli", "name": "Xinli Shang"}}, "url": "https://github.com/apache/parquet-mr/commit/bae6b85eaaa2d9b847d29e579af2c2c602970d28", "committedDate": "2020-05-22T16:00:52Z", "message": "Update parquet-hadoop/src/main/java/org/apache/parquet/hadoop/codec/ZstdCodec.java\n\nCo-authored-by: Gabor Szadovszky <gabor@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc6460fdc295831619cf7896eb160ae00a3903a5", "author": {"user": {"login": "shangxinli", "name": "Xinli Shang"}}, "url": "https://github.com/apache/parquet-mr/commit/dc6460fdc295831619cf7896eb160ae00a3903a5", "committedDate": "2020-05-23T00:22:10Z", "message": "Address feedback: add conf into README.md, add mr job for conf testing, and fix the codec name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "689b3489ec8177082c5248ecbf869d03eee62bf0", "author": {"user": {"login": "shangxinli", "name": "Xinli Shang"}}, "url": "https://github.com/apache/parquet-mr/commit/689b3489ec8177082c5248ecbf869d03eee62bf0", "committedDate": "2020-05-23T00:28:19Z", "message": "Fix class name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5OTYxMjk3", "url": "https://github.com/apache/parquet-mr/pull/793#pullrequestreview-419961297", "createdAt": "2020-05-28T10:05:38Z", "commit": {"oid": "689b3489ec8177082c5248ecbf869d03eee62bf0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDowNTozOFrOGbuW4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDoyMDo0OVrOGbu2jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyNDI1OA==", "bodyText": "In markdown you have to do some extra if you want to force new lines. With a simple linebreak the two lines will be written together. There are some tricks here for enforcing line breaks.\n(You may check the rendered format on github).", "url": "https://github.com/apache/parquet-mr/pull/793#discussion_r431724258", "createdAt": "2020-05-28T10:05:38Z", "author": {"login": "gszadovszky"}, "path": "parquet-hadoop/README.md", "diffHunk": "@@ -324,9 +324,20 @@ ParquetInputFormat to materialize records. It should be a the descendant class o\n **Property:** `parquet.read.schema`  \n **Description:** The read projection schema.\n \n-\n ## Class: UnmaterializableRecordCounter\n \n **Property:** `parquet.read.bad.record.threshold`  \n **Description:** The percentage of bad records to tolerate.  \n **Default value:** `0`\n+\n+## Class: ZstandardCodec\n+\n+**Property:** `parquet.compression.codec.zstd.level`\n+**Description:** The compression level of ZSTD. The valid range is 1~22. Generally the higher compression level, the higher compression ratio can be achieved, but the writing time will be longer.     ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689b3489ec8177082c5248ecbf869d03eee62bf0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTczMTgxNg==", "bodyText": "Thanks for creating an MR test. What I wanted to test with it is if the ZSTD related configuration takes place if set via the configuration. This is not tested currently. I wanted to test it because I am not sure if we have the code in place to pass configuration properties to the codecs.", "url": "https://github.com/apache/parquet-mr/pull/793#discussion_r431731816", "createdAt": "2020-05-28T10:19:49Z", "author": {"login": "gszadovszky"}, "path": "parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestZstandardCodec.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/* \n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.hadoop;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.LongWritable;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.io.compress.CompressionOutputStream;\n+import org.apache.hadoop.mapred.JobClient;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hadoop.mapred.OutputCollector;\n+import org.apache.hadoop.mapred.Reporter;\n+import org.apache.hadoop.mapred.RunningJob;\n+import org.apache.hadoop.mapred.TextInputFormat;\n+import org.apache.parquet.bytes.BytesInput;\n+import org.apache.parquet.example.data.Group;\n+import org.apache.parquet.example.data.simple.SimpleGroupFactory;\n+import org.apache.parquet.hadoop.codec.ZstandardCodec;\n+import org.apache.parquet.hadoop.example.GroupWriteSupport;\n+import org.apache.parquet.hadoop.mapred.DeprecatedParquetOutputFormat;\n+import org.apache.parquet.hadoop.metadata.CompressionCodecName;\n+import org.apache.parquet.schema.MessageTypeParser;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.util.Random;\n+\n+public class TestZstandardCodec {\n+\n+  private final Path inputPath = new Path(\"src/test/java/org/apache/parquet/hadoop/example/TestInputOutputFormat.java\");\n+\n+  @Test\n+  public void testZstdCodec() throws IOException {\n+    ZstandardCodec codec = new ZstandardCodec();\n+    Configuration conf = new Configuration();\n+    int[] levels = {1, 4, 7, 10, 13, 16, 19, 22};\n+    int[] dataSizes = {0, 1, 10, 1024, 1024 * 1024};\n+\n+    for (int i = 0; i < levels.length; i++) {\n+      conf.setInt(ZstandardCodec.PARQUET_COMPRESS_ZSTD_LEVEL, levels[i]);\n+      codec.setConf(conf);\n+      for (int j = 0; j < dataSizes.length; j++) {\n+        testZstd(codec, dataSizes[j]);\n+      }\n+    }\n+  }\n+\n+  private void testZstd(ZstandardCodec codec, int dataSize) throws IOException {\n+    byte[] data = new byte[dataSize];\n+    (new Random()).nextBytes(data);\n+    BytesInput compressedData = compress(codec,  BytesInput.from(data));\n+    BytesInput decompressedData = decompress(codec, compressedData, data.length);\n+    Assert.assertArrayEquals(data, decompressedData.toByteArray());\n+  }\n+\n+  private BytesInput compress(ZstandardCodec codec, BytesInput bytes) throws IOException {\n+    ByteArrayOutputStream compressedOutBuffer = new ByteArrayOutputStream((int)bytes.size());\n+    CompressionOutputStream cos = codec.createOutputStream(compressedOutBuffer, null);\n+    bytes.writeAllTo(cos);\n+    cos.close();\n+    return BytesInput.from(compressedOutBuffer);\n+  }\n+\n+  private BytesInput decompress(ZstandardCodec codec, BytesInput bytes, int uncompressedSize) throws IOException {\n+    BytesInput decompressed;\n+    InputStream is = codec.createInputStream(bytes.toInputStream(), null);\n+    decompressed = BytesInput.from(is, uncompressedSize);\n+    is.close();\n+    return decompressed;\n+  }\n+\n+  @Test\n+  public void testZstdConfWithMr() throws Exception {\n+    JobConf jobConf = new JobConf();\n+    Configuration conf = new Configuration();\n+    jobConf.setInt(ZstandardCodec.PARQUET_COMPRESS_ZSTD_LEVEL, 18);\n+    jobConf.setInt(ZstandardCodec.PARQUET_COMPRESS_ZSTD_LEVEL, 4);\n+    RunningJob mapRedJob = runMapReduceJob(CompressionCodecName.ZSTD, jobConf, conf);\n+    assert(mapRedJob.isSuccessful());\n+  }\n+\n+  private RunningJob runMapReduceJob(CompressionCodecName codec, JobConf jobConf, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689b3489ec8177082c5248ecbf869d03eee62bf0"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTczMjM2NQ==", "bodyText": "You are setting the level twice (and the workers are missing).", "url": "https://github.com/apache/parquet-mr/pull/793#discussion_r431732365", "createdAt": "2020-05-28T10:20:49Z", "author": {"login": "gszadovszky"}, "path": "parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestZstandardCodec.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/* \n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.hadoop;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.LongWritable;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.io.compress.CompressionOutputStream;\n+import org.apache.hadoop.mapred.JobClient;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hadoop.mapred.OutputCollector;\n+import org.apache.hadoop.mapred.Reporter;\n+import org.apache.hadoop.mapred.RunningJob;\n+import org.apache.hadoop.mapred.TextInputFormat;\n+import org.apache.parquet.bytes.BytesInput;\n+import org.apache.parquet.example.data.Group;\n+import org.apache.parquet.example.data.simple.SimpleGroupFactory;\n+import org.apache.parquet.hadoop.codec.ZstandardCodec;\n+import org.apache.parquet.hadoop.example.GroupWriteSupport;\n+import org.apache.parquet.hadoop.mapred.DeprecatedParquetOutputFormat;\n+import org.apache.parquet.hadoop.metadata.CompressionCodecName;\n+import org.apache.parquet.schema.MessageTypeParser;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.util.Random;\n+\n+public class TestZstandardCodec {\n+\n+  private final Path inputPath = new Path(\"src/test/java/org/apache/parquet/hadoop/example/TestInputOutputFormat.java\");\n+\n+  @Test\n+  public void testZstdCodec() throws IOException {\n+    ZstandardCodec codec = new ZstandardCodec();\n+    Configuration conf = new Configuration();\n+    int[] levels = {1, 4, 7, 10, 13, 16, 19, 22};\n+    int[] dataSizes = {0, 1, 10, 1024, 1024 * 1024};\n+\n+    for (int i = 0; i < levels.length; i++) {\n+      conf.setInt(ZstandardCodec.PARQUET_COMPRESS_ZSTD_LEVEL, levels[i]);\n+      codec.setConf(conf);\n+      for (int j = 0; j < dataSizes.length; j++) {\n+        testZstd(codec, dataSizes[j]);\n+      }\n+    }\n+  }\n+\n+  private void testZstd(ZstandardCodec codec, int dataSize) throws IOException {\n+    byte[] data = new byte[dataSize];\n+    (new Random()).nextBytes(data);\n+    BytesInput compressedData = compress(codec,  BytesInput.from(data));\n+    BytesInput decompressedData = decompress(codec, compressedData, data.length);\n+    Assert.assertArrayEquals(data, decompressedData.toByteArray());\n+  }\n+\n+  private BytesInput compress(ZstandardCodec codec, BytesInput bytes) throws IOException {\n+    ByteArrayOutputStream compressedOutBuffer = new ByteArrayOutputStream((int)bytes.size());\n+    CompressionOutputStream cos = codec.createOutputStream(compressedOutBuffer, null);\n+    bytes.writeAllTo(cos);\n+    cos.close();\n+    return BytesInput.from(compressedOutBuffer);\n+  }\n+\n+  private BytesInput decompress(ZstandardCodec codec, BytesInput bytes, int uncompressedSize) throws IOException {\n+    BytesInput decompressed;\n+    InputStream is = codec.createInputStream(bytes.toInputStream(), null);\n+    decompressed = BytesInput.from(is, uncompressedSize);\n+    is.close();\n+    return decompressed;\n+  }\n+\n+  @Test\n+  public void testZstdConfWithMr() throws Exception {\n+    JobConf jobConf = new JobConf();\n+    Configuration conf = new Configuration();\n+    jobConf.setInt(ZstandardCodec.PARQUET_COMPRESS_ZSTD_LEVEL, 18);\n+    jobConf.setInt(ZstandardCodec.PARQUET_COMPRESS_ZSTD_LEVEL, 4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689b3489ec8177082c5248ecbf869d03eee62bf0"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "debb236d674c3ccc2d3fdc2dc6c8f8ded1c5134d", "author": {"user": {"login": "shangxinli", "name": "Xinli Shang"}}, "url": "https://github.com/apache/parquet-mr/commit/debb236d674c3ccc2d3fdc2dc6c8f8ded1c5134d", "committedDate": "2020-05-28T21:47:32Z", "message": "Fix test typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7204a18dc8db359cf5412ece717eaa3fcbc9f990", "author": {"user": {"login": "shangxinli", "name": "Xinli Shang"}}, "url": "https://github.com/apache/parquet-mr/commit/7204a18dc8db359cf5412ece717eaa3fcbc9f990", "committedDate": "2020-05-29T20:00:57Z", "message": "Address feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNDc2MDAz", "url": "https://github.com/apache/parquet-mr/pull/793#pullrequestreview-422476003", "createdAt": "2020-06-02T08:56:00Z", "commit": {"oid": "7204a18dc8db359cf5412ece717eaa3fcbc9f990"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODo1NjowMFrOGdoZhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODo1ODo1M1rOGdogaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcyMzc4Mw==", "bodyText": "Please use the JUnit framework assert functions instead of the assert keyword. The assert keyword is not for unit testing and it is not 100% guaranteed that the assertions are enabled during testing.", "url": "https://github.com/apache/parquet-mr/pull/793#discussion_r433723783", "createdAt": "2020-06-02T08:56:00Z", "author": {"login": "gszadovszky"}, "path": "parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestZstandardCodec.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/* \n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.hadoop;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.LongWritable;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.io.compress.CompressionOutputStream;\n+import org.apache.hadoop.mapred.JobClient;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hadoop.mapred.OutputCollector;\n+import org.apache.hadoop.mapred.Reporter;\n+import org.apache.hadoop.mapred.RunningJob;\n+import org.apache.hadoop.mapred.TextInputFormat;\n+import org.apache.parquet.bytes.BytesInput;\n+import org.apache.parquet.example.data.Group;\n+import org.apache.parquet.example.data.simple.SimpleGroupFactory;\n+import org.apache.parquet.hadoop.codec.ZstandardCodec;\n+import org.apache.parquet.hadoop.example.GroupWriteSupport;\n+import org.apache.parquet.hadoop.mapred.DeprecatedParquetOutputFormat;\n+import org.apache.parquet.hadoop.metadata.CompressionCodecName;\n+import org.apache.parquet.schema.MessageTypeParser;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.util.Random;\n+\n+public class TestZstandardCodec {\n+\n+  private final Path inputPath = new Path(\"src/test/java/org/apache/parquet/hadoop/example/TestInputOutputFormat.java\");\n+\n+  @Test\n+  public void testZstdCodec() throws IOException {\n+    ZstandardCodec codec = new ZstandardCodec();\n+    Configuration conf = new Configuration();\n+    int[] levels = {1, 4, 7, 10, 13, 16, 19, 22};\n+    int[] dataSizes = {0, 1, 10, 1024, 1024 * 1024};\n+\n+    for (int i = 0; i < levels.length; i++) {\n+      conf.setInt(ZstandardCodec.PARQUET_COMPRESS_ZSTD_LEVEL, levels[i]);\n+      codec.setConf(conf);\n+      for (int j = 0; j < dataSizes.length; j++) {\n+        testZstd(codec, dataSizes[j]);\n+      }\n+    }\n+  }\n+\n+  private void testZstd(ZstandardCodec codec, int dataSize) throws IOException {\n+    byte[] data = new byte[dataSize];\n+    (new Random()).nextBytes(data);\n+    BytesInput compressedData = compress(codec,  BytesInput.from(data));\n+    BytesInput decompressedData = decompress(codec, compressedData, data.length);\n+    Assert.assertArrayEquals(data, decompressedData.toByteArray());\n+  }\n+\n+  private BytesInput compress(ZstandardCodec codec, BytesInput bytes) throws IOException {\n+    ByteArrayOutputStream compressedOutBuffer = new ByteArrayOutputStream((int)bytes.size());\n+    CompressionOutputStream cos = codec.createOutputStream(compressedOutBuffer, null);\n+    bytes.writeAllTo(cos);\n+    cos.close();\n+    return BytesInput.from(compressedOutBuffer);\n+  }\n+\n+  private BytesInput decompress(ZstandardCodec codec, BytesInput bytes, int uncompressedSize) throws IOException {\n+    BytesInput decompressed;\n+    InputStream is = codec.createInputStream(bytes.toInputStream(), null);\n+    decompressed = BytesInput.from(is, uncompressedSize);\n+    is.close();\n+    return decompressed;\n+  }\n+\n+  @Test\n+  public void testZstdConfWithMr() throws Exception {\n+    long fileSizeLowLevel = runMrWithConf(1);\n+    // Clear the cache so that a new codec can be created with new configuration\n+    CodecFactory.CODEC_BY_NAME.clear();\n+    long fileSizeHighLevel = runMrWithConf(22);\n+    assert (fileSizeLowLevel > fileSizeHighLevel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7204a18dc8db359cf5412ece717eaa3fcbc9f990"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcyMzg5Nw==", "bodyText": "Same as above", "url": "https://github.com/apache/parquet-mr/pull/793#discussion_r433723897", "createdAt": "2020-06-02T08:56:09Z", "author": {"login": "gszadovszky"}, "path": "parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestZstandardCodec.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/* \n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.hadoop;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.LongWritable;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.io.compress.CompressionOutputStream;\n+import org.apache.hadoop.mapred.JobClient;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hadoop.mapred.OutputCollector;\n+import org.apache.hadoop.mapred.Reporter;\n+import org.apache.hadoop.mapred.RunningJob;\n+import org.apache.hadoop.mapred.TextInputFormat;\n+import org.apache.parquet.bytes.BytesInput;\n+import org.apache.parquet.example.data.Group;\n+import org.apache.parquet.example.data.simple.SimpleGroupFactory;\n+import org.apache.parquet.hadoop.codec.ZstandardCodec;\n+import org.apache.parquet.hadoop.example.GroupWriteSupport;\n+import org.apache.parquet.hadoop.mapred.DeprecatedParquetOutputFormat;\n+import org.apache.parquet.hadoop.metadata.CompressionCodecName;\n+import org.apache.parquet.schema.MessageTypeParser;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.util.Random;\n+\n+public class TestZstandardCodec {\n+\n+  private final Path inputPath = new Path(\"src/test/java/org/apache/parquet/hadoop/example/TestInputOutputFormat.java\");\n+\n+  @Test\n+  public void testZstdCodec() throws IOException {\n+    ZstandardCodec codec = new ZstandardCodec();\n+    Configuration conf = new Configuration();\n+    int[] levels = {1, 4, 7, 10, 13, 16, 19, 22};\n+    int[] dataSizes = {0, 1, 10, 1024, 1024 * 1024};\n+\n+    for (int i = 0; i < levels.length; i++) {\n+      conf.setInt(ZstandardCodec.PARQUET_COMPRESS_ZSTD_LEVEL, levels[i]);\n+      codec.setConf(conf);\n+      for (int j = 0; j < dataSizes.length; j++) {\n+        testZstd(codec, dataSizes[j]);\n+      }\n+    }\n+  }\n+\n+  private void testZstd(ZstandardCodec codec, int dataSize) throws IOException {\n+    byte[] data = new byte[dataSize];\n+    (new Random()).nextBytes(data);\n+    BytesInput compressedData = compress(codec,  BytesInput.from(data));\n+    BytesInput decompressedData = decompress(codec, compressedData, data.length);\n+    Assert.assertArrayEquals(data, decompressedData.toByteArray());\n+  }\n+\n+  private BytesInput compress(ZstandardCodec codec, BytesInput bytes) throws IOException {\n+    ByteArrayOutputStream compressedOutBuffer = new ByteArrayOutputStream((int)bytes.size());\n+    CompressionOutputStream cos = codec.createOutputStream(compressedOutBuffer, null);\n+    bytes.writeAllTo(cos);\n+    cos.close();\n+    return BytesInput.from(compressedOutBuffer);\n+  }\n+\n+  private BytesInput decompress(ZstandardCodec codec, BytesInput bytes, int uncompressedSize) throws IOException {\n+    BytesInput decompressed;\n+    InputStream is = codec.createInputStream(bytes.toInputStream(), null);\n+    decompressed = BytesInput.from(is, uncompressedSize);\n+    is.close();\n+    return decompressed;\n+  }\n+\n+  @Test\n+  public void testZstdConfWithMr() throws Exception {\n+    long fileSizeLowLevel = runMrWithConf(1);\n+    // Clear the cache so that a new codec can be created with new configuration\n+    CodecFactory.CODEC_BY_NAME.clear();\n+    long fileSizeHighLevel = runMrWithConf(22);\n+    assert (fileSizeLowLevel > fileSizeHighLevel);\n+  }\n+\n+  private long runMrWithConf(int level) throws Exception {\n+    JobConf jobConf = new JobConf();\n+    Configuration conf = new Configuration();\n+    jobConf.setInt(ZstandardCodec.PARQUET_COMPRESS_ZSTD_LEVEL, level);\n+    jobConf.setInt(ZstandardCodec.PARQUET_COMPRESS_ZSTD_WORKERS, 4);\n+    Path path = new Path(Files.createTempDirectory(\"zstd\" + level).toAbsolutePath().toString());\n+    RunningJob mapRedJob = runMapReduceJob(CompressionCodecName.ZSTD, jobConf, conf, path);\n+    assert(mapRedJob.isSuccessful());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7204a18dc8db359cf5412ece717eaa3fcbc9f990"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcyNTU0NQ==", "bodyText": "Please, add some comments that the intent of this test is to verify that the properties are passed through from the config to the codec.", "url": "https://github.com/apache/parquet-mr/pull/793#discussion_r433725545", "createdAt": "2020-06-02T08:58:53Z", "author": {"login": "gszadovszky"}, "path": "parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestZstandardCodec.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/* \n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.hadoop;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.LongWritable;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.io.compress.CompressionOutputStream;\n+import org.apache.hadoop.mapred.JobClient;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hadoop.mapred.OutputCollector;\n+import org.apache.hadoop.mapred.Reporter;\n+import org.apache.hadoop.mapred.RunningJob;\n+import org.apache.hadoop.mapred.TextInputFormat;\n+import org.apache.parquet.bytes.BytesInput;\n+import org.apache.parquet.example.data.Group;\n+import org.apache.parquet.example.data.simple.SimpleGroupFactory;\n+import org.apache.parquet.hadoop.codec.ZstandardCodec;\n+import org.apache.parquet.hadoop.example.GroupWriteSupport;\n+import org.apache.parquet.hadoop.mapred.DeprecatedParquetOutputFormat;\n+import org.apache.parquet.hadoop.metadata.CompressionCodecName;\n+import org.apache.parquet.schema.MessageTypeParser;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.util.Random;\n+\n+public class TestZstandardCodec {\n+\n+  private final Path inputPath = new Path(\"src/test/java/org/apache/parquet/hadoop/example/TestInputOutputFormat.java\");\n+\n+  @Test\n+  public void testZstdCodec() throws IOException {\n+    ZstandardCodec codec = new ZstandardCodec();\n+    Configuration conf = new Configuration();\n+    int[] levels = {1, 4, 7, 10, 13, 16, 19, 22};\n+    int[] dataSizes = {0, 1, 10, 1024, 1024 * 1024};\n+\n+    for (int i = 0; i < levels.length; i++) {\n+      conf.setInt(ZstandardCodec.PARQUET_COMPRESS_ZSTD_LEVEL, levels[i]);\n+      codec.setConf(conf);\n+      for (int j = 0; j < dataSizes.length; j++) {\n+        testZstd(codec, dataSizes[j]);\n+      }\n+    }\n+  }\n+\n+  private void testZstd(ZstandardCodec codec, int dataSize) throws IOException {\n+    byte[] data = new byte[dataSize];\n+    (new Random()).nextBytes(data);\n+    BytesInput compressedData = compress(codec,  BytesInput.from(data));\n+    BytesInput decompressedData = decompress(codec, compressedData, data.length);\n+    Assert.assertArrayEquals(data, decompressedData.toByteArray());\n+  }\n+\n+  private BytesInput compress(ZstandardCodec codec, BytesInput bytes) throws IOException {\n+    ByteArrayOutputStream compressedOutBuffer = new ByteArrayOutputStream((int)bytes.size());\n+    CompressionOutputStream cos = codec.createOutputStream(compressedOutBuffer, null);\n+    bytes.writeAllTo(cos);\n+    cos.close();\n+    return BytesInput.from(compressedOutBuffer);\n+  }\n+\n+  private BytesInput decompress(ZstandardCodec codec, BytesInput bytes, int uncompressedSize) throws IOException {\n+    BytesInput decompressed;\n+    InputStream is = codec.createInputStream(bytes.toInputStream(), null);\n+    decompressed = BytesInput.from(is, uncompressedSize);\n+    is.close();\n+    return decompressed;\n+  }\n+\n+  @Test\n+  public void testZstdConfWithMr() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7204a18dc8db359cf5412ece717eaa3fcbc9f990"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0b60960f36d722b779c002a61ea268d6d14354c", "author": {"user": {"login": "shangxinli", "name": "Xinli Shang"}}, "url": "https://github.com/apache/parquet-mr/commit/e0b60960f36d722b779c002a61ea268d6d14354c", "committedDate": "2020-06-02T16:15:18Z", "message": "Fix assert and add comment for test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMjc4NjM5", "url": "https://github.com/apache/parquet-mr/pull/793#pullrequestreview-423278639", "createdAt": "2020-06-03T07:16:47Z", "commit": {"oid": "e0b60960f36d722b779c002a61ea268d6d14354c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2205, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}