{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NTMwNjU0", "number": 798, "title": "PARQUET-1879 MapKeyValue is not a valid Logical Type", "bodyText": "Writing UNKNOWN logical type into the schema, causes a breakage\nwhen parsing the file with Apache Arrow\nInstead use the default, of falling back to null when that backwards-compatibility\nonly logical type is present, but still write the original type\n\nIs this something that could be included in a 1.11.1 ?\nMake sure you have checked all steps below.\nJira\n\n My PR addresses the following Parquet Jira issues and references them in the PR title.\n\nhttps://issues.apache.org/jira/browse/PARQUET-1879\nIn case you are adding a dependency, check if the license complies with the ASF 3rd Party License Policy.\n\n\n\nTests\n\n My PR adds the following unit tests OR does not need testing for this extremely good reason:\n\nAdded a new test into TestParquetMetadataConverter#testMapLogicalType that verifies that when a Map schema is created, it leaves Logical Type as null when writing out the MapKeyValue Converted Type.\nThis is due to the LogicalType being required elsewhere for backwards compatibility, but when writing the Schema to Thrift, it needs to be left out, as writing UNKNOWN as occurs now is causing breakages when later trying to read the file using Apache Arrow in Snowflake Cloud Database.\nCommits\n\n My commits all reference Jira issues in their subject lines. In addition, my commits follow the guidelines from \"How to write a good git commit message\":\n\nSubject is separated from body by a blank line\nSubject is limited to 50 characters (not including Jira issue reference)\nSubject does not end with a period\nSubject uses the imperative mood (\"add\", not \"adding\")\nBody wraps at 72 characters\nBody explains \"what\" and \"why\", not \"how\"\n\n\n\nDocumentation\n\n In case of new functionality, my PR adds documentation that describes how to use it.\n\nAll the public functions and the classes in the PR contain Javadoc that explain what it does\n\n\n\nN/A", "createdAt": "2020-06-23T12:15:12Z", "url": "https://github.com/apache/parquet-mr/pull/798", "merged": true, "mergeCommit": {"oid": "2589cc821d2d470be1e79b86f511eb1f5fee4e5c"}, "closed": true, "closedAt": "2020-07-06T07:32:38Z", "author": {"login": "maccamlc"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuEgJgABqjM0NzI2Njc5MjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuts3gAFqTQzNzQzNzM1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a0bcf2f0504c7442342f34ac28989f6a8785747", "author": {"user": null}, "url": "https://github.com/apache/parquet-mr/commit/6a0bcf2f0504c7442342f34ac28989f6a8785747", "committedDate": "2020-06-23T12:10:28Z", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that backwards-compatibility\n  only logical type is present, but still write the original type"}, "afterCommit": {"oid": "e3d075ab55cde82e0637fce171b19bc076520339", "author": {"user": null}, "url": "https://github.com/apache/parquet-mr/commit/e3d075ab55cde82e0637fce171b19bc076520339", "committedDate": "2020-06-23T12:21:08Z", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that\n  backwards-compatibility only logical type is present, but still\n  write the original type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1OTI0MTE3", "url": "https://github.com/apache/parquet-mr/pull/798#pullrequestreview-435924117", "createdAt": "2020-06-23T15:54:19Z", "commit": {"oid": "e3d075ab55cde82e0637fce171b19bc076520339"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTo1ODo1MVrOGoO_6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoxOTowMlrOGoPnyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0MTk2Mw==", "bodyText": "I would suggest using ConverstionPatterns.MAP_REPEATED_NAME here as well.", "url": "https://github.com/apache/parquet-mr/pull/798#discussion_r444841963", "createdAt": "2020-06-24T11:58:51Z", "author": {"login": "gszadovszky"}, "path": "parquet-column/src/main/java/org/apache/parquet/schema/Types.java", "diffHunk": "@@ -1179,18 +1181,18 @@ protected Type build(String name) {\n         keyType = STRING_KEY;\n       }\n \n-      GroupBuilder<GroupType> builder = buildGroup(repetition).as(OriginalType.MAP);\n+      GroupBuilder<GroupType> builder = buildGroup(repetition).as(mapType());\n       if (id != null) {\n         builder.id(id.intValue());\n       }\n \n       if (valueType != null) {\n         return builder\n-            .repeatedGroup().addFields(keyType, valueType).named(\"map\")\n+            .repeatedGroup().addFields(keyType, valueType).named(\"key_value\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d075ab55cde82e0637fce171b19bc076520339"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1MjE2OQ==", "bodyText": "Please, do not organize imports. It makes merge conflicts hard to resolve.", "url": "https://github.com/apache/parquet-mr/pull/798#discussion_r444852169", "createdAt": "2020-06-24T12:19:02Z", "author": {"login": "gszadovszky"}, "path": "parquet-hadoop/src/test/java/org/apache/parquet/format/converter/TestParquetMetadataConverter.java", "diffHunk": "@@ -18,57 +18,9 @@\n  */\n package org.apache.parquet.format.converter;\n \n-import static java.util.Collections.emptyList;\n-import static org.apache.parquet.format.converter.ParquetMetadataConverter.filterFileMetaDataByStart;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.TimeUnit.MICROS;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.TimeUnit.MILLIS;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.TimeUnit.NANOS;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.bsonType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.dateType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.decimalType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.enumType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.intType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.jsonType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.listType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.mapType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.stringType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.timeType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.timestampType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.uuidType;\n-import static org.apache.parquet.schema.MessageTypeParser.parseMessageType;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-import static org.apache.parquet.format.CompressionCodec.UNCOMPRESSED;\n-import static org.apache.parquet.format.Type.INT32;\n-import static org.apache.parquet.format.Util.readPageHeader;\n-import static org.apache.parquet.format.Util.writePageHeader;\n-import static org.apache.parquet.format.converter.ParquetMetadataConverter.filterFileMetaDataByMidpoint;\n-import static org.apache.parquet.format.converter.ParquetMetadataConverter.getOffset;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.math.BigInteger;\n-import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n-import java.security.SecureRandom;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Random;\n-import java.util.Set;\n-import java.util.TreeSet;\n-\n+import com.google.common.collect.Lists;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d075ab55cde82e0637fce171b19bc076520339"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc9cc5f1fc45fa53d2c14f3c2e048ac898c52a4a", "author": {"user": null}, "url": "https://github.com/apache/parquet-mr/commit/cc9cc5f1fc45fa53d2c14f3c2e048ac898c52a4a", "committedDate": "2020-06-25T03:59:26Z", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that\n  backwards-compatibility only logical type is present, but still\n  write the original type"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3d075ab55cde82e0637fce171b19bc076520339", "author": {"user": null}, "url": "https://github.com/apache/parquet-mr/commit/e3d075ab55cde82e0637fce171b19bc076520339", "committedDate": "2020-06-23T12:21:08Z", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that\n  backwards-compatibility only logical type is present, but still\n  write the original type"}, "afterCommit": {"oid": "cc9cc5f1fc45fa53d2c14f3c2e048ac898c52a4a", "author": {"user": null}, "url": "https://github.com/apache/parquet-mr/commit/cc9cc5f1fc45fa53d2c14f3c2e048ac898c52a4a", "committedDate": "2020-06-25T03:59:26Z", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that\n  backwards-compatibility only logical type is present, but still\n  write the original type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MjYwNjE1", "url": "https://github.com/apache/parquet-mr/pull/798#pullrequestreview-437260615", "createdAt": "2020-06-25T08:06:28Z", "commit": {"oid": "cc9cc5f1fc45fa53d2c14f3c2e048ac898c52a4a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "567f18efc7aeb4e9715331b6bd563557a335b85b", "author": {"user": null}, "url": "https://github.com/apache/parquet-mr/commit/567f18efc7aeb4e9715331b6bd563557a335b85b", "committedDate": "2020-06-25T11:11:40Z", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that\n  backwards-compatibility only logical type is present, but still\n  write the original type"}, "afterCommit": {"oid": "da1d65747d8145e08e0509b0e8bf2abfac9e8b66", "author": {"user": null}, "url": "https://github.com/apache/parquet-mr/commit/da1d65747d8145e08e0509b0e8bf2abfac9e8b66", "committedDate": "2020-06-25T11:16:00Z", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that\n  backwards-compatibility only logical type is present, but still\n  write the original type"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da1d65747d8145e08e0509b0e8bf2abfac9e8b66", "author": {"user": null}, "url": "https://github.com/apache/parquet-mr/commit/da1d65747d8145e08e0509b0e8bf2abfac9e8b66", "committedDate": "2020-06-25T11:16:00Z", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that\n  backwards-compatibility only logical type is present, but still\n  write the original type"}, "afterCommit": {"oid": "bbd7d653b8f29129cf61f84f728a904113ecf4db", "author": {"user": null}, "url": "https://github.com/apache/parquet-mr/commit/bbd7d653b8f29129cf61f84f728a904113ecf4db", "committedDate": "2020-06-25T11:25:01Z", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that\n  backwards-compatibility only logical type is present, but still\n  write the original type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eddaec3966b3d92b94d992f86ed82fa68a45d0c", "author": {"user": null}, "url": "https://github.com/apache/parquet-mr/commit/7eddaec3966b3d92b94d992f86ed82fa68a45d0c", "committedDate": "2020-06-25T11:29:43Z", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that\n  backwards-compatibility only logical type is present, but still\n  write the original type"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bbd7d653b8f29129cf61f84f728a904113ecf4db", "author": {"user": null}, "url": "https://github.com/apache/parquet-mr/commit/bbd7d653b8f29129cf61f84f728a904113ecf4db", "committedDate": "2020-06-25T11:25:01Z", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that\n  backwards-compatibility only logical type is present, but still\n  write the original type"}, "afterCommit": {"oid": "7eddaec3966b3d92b94d992f86ed82fa68a45d0c", "author": {"user": null}, "url": "https://github.com/apache/parquet-mr/commit/7eddaec3966b3d92b94d992f86ed82fa68a45d0c", "committedDate": "2020-06-25T11:29:43Z", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that\n  backwards-compatibility only logical type is present, but still\n  write the original type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NDM3MzU3", "url": "https://github.com/apache/parquet-mr/pull/798#pullrequestreview-437437357", "createdAt": "2020-06-25T12:21:20Z", "commit": {"oid": "7eddaec3966b3d92b94d992f86ed82fa68a45d0c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2211, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}