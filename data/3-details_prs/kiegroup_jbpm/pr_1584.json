{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NzgyNjQy", "number": 1584, "title": "[JBPM-8988] The \"org.jbpm.executor.commands.error.ProcessAutoAckError  Command\" execution fails on Postgres database", "bodyText": "\u2026Command\" execution fails on Postgres database\ntype conversion are not implicit in postgres db\n@lob field needs to be in a tx", "createdAt": "2020-01-24T10:59:55Z", "url": "https://github.com/kiegroup/jbpm/pull/1584", "merged": true, "mergeCommit": {"oid": "8de42913594633a2043779fe8f7f2d93afa81416"}, "closed": true, "closedAt": "2020-02-01T11:50:17Z", "author": {"login": "elguardian"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-sMXnAFqTM0OTE2ODk5OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_rsJpAFqTM1MTM4MDAzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MTY4OTk5", "url": "https://github.com/kiegroup/jbpm/pull/1584#pullrequestreview-349168999", "createdAt": "2020-01-28T07:24:59Z", "commit": {"oid": "6e05bc8cd5cf7ed93dc3796e6322860207723057"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzoyNTowMFrOFibKcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzoyNTowMFrOFibKcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0MDk0Ng==", "bodyText": "It may log a warning message to account there was an issue", "url": "https://github.com/kiegroup/jbpm/pull/1584#discussion_r371640946", "createdAt": "2020-01-28T07:25:00Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/commands/error/ProcessAutoAckErrorCommand.java", "diffHunk": "@@ -40,32 +40,35 @@\n \n     private static final String RULE = \"Process instances that previously failed but now are in different nodes - meaning node where they were was already completed - or completed/aborted\";\n     \n-    @SuppressWarnings(\"unchecked\")\n+\n     @Override\n     protected List<ExecutionErrorInfo> findErrorsToAck(EntityManager em) {\n         List<ExecutionErrorInfo> errorsToAck = new ArrayList<>();\n         \n-        String findProcessErrorsQuery = \"select error from ExecutionErrorInfo error \"\n-                + \"where error.acknowledged =:acknowledged \"\n-                + \"and error.processInstanceId in (select pil.id from ProcessInstanceLog pil where status in (:status))\";\n-        \n-        List<ExecutionErrorInfo> processErrorsToAck = em.createQuery(findProcessErrorsQuery)\n-                .setParameter(\"acknowledged\", new Short(\"0\"))\n-                .setParameter(\"status\", Arrays.asList(ProcessInstance.STATE_COMPLETED, ProcessInstance.STATE_ABORTED))\n-                .getResultList();\n-        errorsToAck.addAll(processErrorsToAck);\n-        \n-        String findNodeErrorsQuery = \"select error from ExecutionErrorInfo error \"\n-                + \"where error.acknowledged =:acknowledged \"\n-                + \"and error.initActivityId in (select nil.nodeInstanceId from NodeInstanceLog nil where nil.processInstanceId = error.processInstanceId and nil.nodeInstanceId = error.initActivityId and nil.type = 1)\";\n-        \n-        List<ExecutionErrorInfo> nodeErrorsToAck = em.createQuery(findNodeErrorsQuery)\n-                .setParameter(\"acknowledged\", new Short(\"0\"))\n-                .getResultList();\n-        errorsToAck.addAll(nodeErrorsToAck);\n-        \n+        em.getTransaction().begin();\n+        try {\n+            String findProcessErrorsQuery = \"select error from ExecutionErrorInfo error where error.acknowledged =:acknowledged \" +\n+                                            \"and error.processInstanceId in (select pil.id from ProcessInstanceLog pil where status in (:status))\";\n+\n+            List<ExecutionErrorInfo> processErrorsToAck = em.createQuery(findProcessErrorsQuery, ExecutionErrorInfo.class)\n+                                                            .setParameter(\"acknowledged\", new Short(\"0\"))\n+                                                            .setParameter(\"status\", Arrays.asList(ProcessInstance.STATE_COMPLETED, ProcessInstance.STATE_ABORTED))\n+                                                            .getResultList();\n+            errorsToAck.addAll(processErrorsToAck);\n+\n+            String findNodeErrorsQuery = \"select error from ExecutionErrorInfo error where error.acknowledged =:acknowledged \" +\n+                                         \"and CAST(error.initActivityId AS string) in (select nil.nodeInstanceId from NodeInstanceLog nil where nil.processInstanceId = error.processInstanceId and nil.nodeInstanceId = CAST(error.initActivityId AS string) and nil.type = '1')\";\n+\n+            List<ExecutionErrorInfo> nodeErrorsToAck = em.createQuery(findNodeErrorsQuery, ExecutionErrorInfo.class)\n+                                                         .setParameter(\"acknowledged\", new Short(\"0\"))\n+                                                         .getResultList();\n+            errorsToAck.addAll(nodeErrorsToAck);\n+            em.getTransaction().commit();\n+        } catch (Exception e) {\n+            em.getTransaction().rollback();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e05bc8cd5cf7ed93dc3796e6322860207723057"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e05bc8cd5cf7ed93dc3796e6322860207723057", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/6e05bc8cd5cf7ed93dc3796e6322860207723057", "committedDate": "2020-01-24T10:58:47Z", "message": "[JBPM-8988] The \"org.jbpm.executor.commands.error.ProcessAutoAckErrorCommand\" execution fails on Postgres database\n\ntype conversion are not implicit in postgres db\n@Lob field needs to be in a tx"}, "afterCommit": {"oid": "83e4142889ee8e7739e639ab1572a89add8b8b88", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/83e4142889ee8e7739e639ab1572a89add8b8b88", "committedDate": "2020-01-29T08:08:59Z", "message": "[JBPM-8988] The \"org.jbpm.executor.commands.error.ProcessAutoAckErrorCommand\" execution fails on Postgres database\n\ntype conversion are not implicit in postgres db\n@Lob field needs to be in a tx"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMDMyNzk1", "url": "https://github.com/kiegroup/jbpm/pull/1584#pullrequestreview-350032795", "createdAt": "2020-01-29T11:20:45Z", "commit": {"oid": "83e4142889ee8e7739e639ab1572a89add8b8b88"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMToyMDo0NlrOFjE92w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMToyMToxNFrOFjE-lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyNTg1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        errorsToAck = em.createQuery(findJobErrorsQuery)\n          \n          \n            \n                        errorsToAck = em.createQuery(findJobErrorsQuery, ExecutionErrorInfo.class)", "url": "https://github.com/kiegroup/jbpm/pull/1584#discussion_r372325851", "createdAt": "2020-01-29T11:20:46Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/commands/error/JobAutoAckErrorCommand.java", "diffHunk": "@@ -40,22 +43,29 @@\n  */\n public class JobAutoAckErrorCommand extends AutoAckErrorCommand {\n \n+    private static final Logger logger = LoggerFactory.getLogger(JobAutoAckErrorCommand.class);\n+\n     private static final String RULE = \"Jobs that previously failed but now are in one of the statuses - queued, completed or cancelled\";\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     protected List<ExecutionErrorInfo> findErrorsToAck(EntityManager em) {\n-        String findJobErrorsQuery = \"select error from ExecutionErrorInfo error \"\n-                + \"where error.type = :type \"\n-                + \"and error.acknowledged =:acknowledged \"\n-                + \"and error.jobId in (select req.id from RequestInfo req where status in (:status))\";\n-        \n-        List<ExecutionErrorInfo> errorsToAck = em.createQuery(findJobErrorsQuery)\n-                .setParameter(\"type\", JobExecutionErrorFilter.TYPE)\n-                .setParameter(\"acknowledged\", new Short(\"0\"))\n-                .setParameter(\"status\", Arrays.asList(STATUS.DONE, STATUS.CANCELLED, STATUS.QUEUED))\n-                .getResultList();\n+        List<ExecutionErrorInfo> errorsToAck = new ArrayList<>();\n+        em.getTransaction().begin();\n+        try {\n+            String findJobErrorsQuery = \"select error from ExecutionErrorInfo error \" + \"where error.type = :type \" + \"and error.acknowledged =:acknowledged \" +\n+                                        \"and error.jobId in (select req.id from RequestInfo req where status in (:status))\";\n \n+            errorsToAck = em.createQuery(findJobErrorsQuery)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83e4142889ee8e7739e639ab1572a89add8b8b88"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyNjAzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        errorsToAck = em.createQuery(findTaskErrorsQuery)\n          \n          \n            \n                        errorsToAck = em.createQuery(findTaskErrorsQuery, ExecutionErrorInfo.class)", "url": "https://github.com/kiegroup/jbpm/pull/1584#discussion_r372326036", "createdAt": "2020-01-29T11:21:14Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/commands/error/TaskAutoAckErrorCommand.java", "diffHunk": "@@ -38,22 +41,30 @@\n  */\n public class TaskAutoAckErrorCommand extends AutoAckErrorCommand {\n \n+    private static final Logger logger = LoggerFactory.getLogger(TaskAutoAckErrorCommand.class);\n+\n     private static final String RULE = \"Tasks that previously failed but now are in one of the statuses - completed, failed, exited, obsolete, error\";\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     protected List<ExecutionErrorInfo> findErrorsToAck(EntityManager em) {\n-        String findTaskErrorsQuery = \"select error from ExecutionErrorInfo error \"\n-                + \"where error.type = :type \"\n-                + \"and error.acknowledged =:acknowledged \"\n-                + \"and error.activityId in (select at.taskId from AuditTaskImpl at where status in (:status))\";\n-        \n-        List<ExecutionErrorInfo> errorsToAck = em.createQuery(findTaskErrorsQuery)\n-                .setParameter(\"type\", TaskExecutionErrorFilter.TYPE)\n-                .setParameter(\"acknowledged\", new Short(\"0\"))\n-                .setParameter(\"status\", Arrays.asList(Status.Completed.toString(), Status.Exited.toString(), Status.Failed.toString(), Status.Obsolete.toString(), Status.Error.toString()))\n-                .getResultList();\n+        List<ExecutionErrorInfo> errorsToAck = new ArrayList<>();\n         \n+        em.getTransaction().begin();\n+        try {\n+            String findTaskErrorsQuery = \"select error from ExecutionErrorInfo error \" + \"where error.type = :type \" + \"and error.acknowledged =:acknowledged \" +\n+                                         \"and error.activityId in (select at.taskId from AuditTaskImpl at where status in (:status))\";\n+\n+            errorsToAck = em.createQuery(findTaskErrorsQuery)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83e4142889ee8e7739e639ab1572a89add8b8b88"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzc0Mjg4", "url": "https://github.com/kiegroup/jbpm/pull/1584#pullrequestreview-350374288", "createdAt": "2020-01-29T19:40:32Z", "commit": {"oid": "83e4142889ee8e7739e639ab1572a89add8b8b88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0MDozM1rOFjVK2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0MDozM1rOFjVK2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MTMyMQ==", "bodyText": "this implies you use a resource local entity manager and thus might cause issues when there is actually JTA entity manager being used. Have this been tested on EAP/WAS/WLS?", "url": "https://github.com/kiegroup/jbpm/pull/1584#discussion_r372591321", "createdAt": "2020-01-29T19:40:33Z", "author": {"login": "mswiderski"}, "path": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/commands/error/JobAutoAckErrorCommand.java", "diffHunk": "@@ -40,22 +43,29 @@\n  */\n public class JobAutoAckErrorCommand extends AutoAckErrorCommand {\n \n+    private static final Logger logger = LoggerFactory.getLogger(JobAutoAckErrorCommand.class);\n+\n     private static final String RULE = \"Jobs that previously failed but now are in one of the statuses - queued, completed or cancelled\";\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     protected List<ExecutionErrorInfo> findErrorsToAck(EntityManager em) {\n-        String findJobErrorsQuery = \"select error from ExecutionErrorInfo error \"\n-                + \"where error.type = :type \"\n-                + \"and error.acknowledged =:acknowledged \"\n-                + \"and error.jobId in (select req.id from RequestInfo req where status in (:status))\";\n-        \n-        List<ExecutionErrorInfo> errorsToAck = em.createQuery(findJobErrorsQuery)\n-                .setParameter(\"type\", JobExecutionErrorFilter.TYPE)\n-                .setParameter(\"acknowledged\", new Short(\"0\"))\n-                .setParameter(\"status\", Arrays.asList(STATUS.DONE, STATUS.CANCELLED, STATUS.QUEUED))\n-                .getResultList();\n+        List<ExecutionErrorInfo> errorsToAck = new ArrayList<>();\n+        em.getTransaction().begin();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83e4142889ee8e7739e639ab1572a89add8b8b88"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e37e1293fd4aa18b89480e87395f76925b71214", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/8e37e1293fd4aa18b89480e87395f76925b71214", "committedDate": "2020-01-30T08:30:11Z", "message": "[JBPM-8988] The \"org.jbpm.executor.commands.error.ProcessAutoAckErrorCommand\" execution fails on Postgres database\n\ntype conversion are not implicit in postgres db\n@Lob field needs to be in a tx"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "83e4142889ee8e7739e639ab1572a89add8b8b88", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/83e4142889ee8e7739e639ab1572a89add8b8b88", "committedDate": "2020-01-29T08:08:59Z", "message": "[JBPM-8988] The \"org.jbpm.executor.commands.error.ProcessAutoAckErrorCommand\" execution fails on Postgres database\n\ntype conversion are not implicit in postgres db\n@Lob field needs to be in a tx"}, "afterCommit": {"oid": "8e37e1293fd4aa18b89480e87395f76925b71214", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/8e37e1293fd4aa18b89480e87395f76925b71214", "committedDate": "2020-01-30T08:30:11Z", "message": "[JBPM-8988] The \"org.jbpm.executor.commands.error.ProcessAutoAckErrorCommand\" execution fails on Postgres database\n\ntype conversion are not implicit in postgres db\n@Lob field needs to be in a tx"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMzgwMDM1", "url": "https://github.com/kiegroup/jbpm/pull/1584#pullrequestreview-351380035", "createdAt": "2020-01-31T09:26:18Z", "commit": {"oid": "8e37e1293fd4aa18b89480e87395f76925b71214"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1020, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}