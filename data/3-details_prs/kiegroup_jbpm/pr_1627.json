{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MTkwNDE3", "number": 1627, "title": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support", "bodyText": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\nNote: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios.", "createdAt": "2020-04-03T13:58:23Z", "url": "https://github.com/kiegroup/jbpm/pull/1627", "merged": true, "mergeCommit": {"oid": "1208c9de620b85658219ca6b60743cc1d6a192ad"}, "closed": true, "closedAt": "2020-06-30T11:14:57Z", "author": {"login": "afalhambra"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUDpBCgBqjMxOTcxNjkxOTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcu88XJAFqTQzODAzNDcwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a02ddb7ce99495fcf212095cecc28ad9bcabd1b0", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/a02ddb7ce99495fcf212095cecc28ad9bcabd1b0", "committedDate": "2020-04-03T12:04:11Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n[JBPM-9069] com.google.inject:guice artifact needs to be upgraded to version 4.2.3\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}, "afterCommit": {"oid": "6ae534db434aafc223479463ba6e1304a08e8964", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/6ae534db434aafc223479463ba6e1304a08e8964", "committedDate": "2020-04-03T16:38:44Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n[JBPM-9069] com.google.inject:guice artifact needs to be upgraded to version 4.2.3\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ae534db434aafc223479463ba6e1304a08e8964", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/6ae534db434aafc223479463ba6e1304a08e8964", "committedDate": "2020-04-03T16:38:44Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n[JBPM-9069] com.google.inject:guice artifact needs to be upgraded to version 4.2.3\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}, "afterCommit": {"oid": "74115b6eb0e830d9e97bd883c7f726525136c79c", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/74115b6eb0e830d9e97bd883c7f726525136c79c", "committedDate": "2020-04-06T07:06:35Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n[JBPM-9069] com.google.inject:guice artifact needs to be upgraded to version 4.2.3\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74115b6eb0e830d9e97bd883c7f726525136c79c", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/74115b6eb0e830d9e97bd883c7f726525136c79c", "committedDate": "2020-04-06T07:06:35Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n[JBPM-9069] com.google.inject:guice artifact needs to be upgraded to version 4.2.3\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}, "afterCommit": {"oid": "3b2ad9f6944fcd92c5b67e2ff216d5f4b74b0188", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/3b2ad9f6944fcd92c5b67e2ff216d5f4b74b0188", "committedDate": "2020-04-06T10:19:16Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n[JBPM-9069] com.google.inject:guice artifact needs to be upgraded to version 4.2.3\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b2ad9f6944fcd92c5b67e2ff216d5f4b74b0188", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/3b2ad9f6944fcd92c5b67e2ff216d5f4b74b0188", "committedDate": "2020-04-06T10:19:16Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n[JBPM-9069] com.google.inject:guice artifact needs to be upgraded to version 4.2.3\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}, "afterCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/1d6e7c21fd347381ebb2f27ce87de367a9a8c79b", "committedDate": "2020-04-06T13:16:36Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n[JBPM-9069] com.google.inject:guice artifact needs to be upgraded to version 4.2.3\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5ODkwNjA1", "url": "https://github.com/kiegroup/jbpm/pull/1627#pullrequestreview-389890605", "createdAt": "2020-04-08T11:35:57Z", "commit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTozNTo1N1rOGCrIaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxMjozOFrOGCxMyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzAwMQ==", "bodyText": "remove line instead of commenting", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405457001", "createdAt": "2020-04-08T11:35:57Z", "author": {"login": "gmunozfe"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/timer/TimerBaseTest.java", "diffHunk": "@@ -16,136 +16,34 @@\n \n package org.jbpm.test.functional.timer;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.sql.Connection;\n-import java.sql.Statement;\n import java.util.Arrays;\n import java.util.List;\n-import java.util.Properties;\n-import java.util.Scanner;\n-import java.util.Set;\n \n-import javax.naming.InitialContext;\n-import javax.sql.DataSource;\n-\n-import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.jbpm.runtime.manager.impl.DefaultRegisterableItemsFactory;\n import org.jbpm.test.AbstractBaseTest;\n-import org.kie.test.util.db.PoolingDataSourceWrapper;\n import org.junit.AfterClass;\n-import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.kie.api.event.process.ProcessEventListener;\n import org.kie.api.event.rule.AgendaEventListener;\n import org.kie.api.runtime.manager.RuntimeEngine;\n import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public abstract class TimerBaseTest extends AbstractBaseTest {\n     private static final Logger logger = LoggerFactory.getLogger(TimerBaseTest.class);\n \t\n \tprivate static PoolingDataSourceWrapper pds;\n-    \n-    protected static final String DATASOURCE_PROPERTIES = \"/datasource.properties\";\n-    \n-    protected static final String MAX_POOL_SIZE = \"maxPoolSize\";\n-    protected static final String ALLOW_LOCAL_TXS = \"allowLocalTransactions\";\n-    \n-    protected static final String DATASOURCE_CLASS_NAME = \"className\";\n-    protected static final String DRIVER_CLASS_NAME = \"driverClassName\";\n-    protected static final String USER = \"user\";\n-    protected static final String PASSWORD = \"password\";\n-    protected static final String JDBC_URL = \"url\";\n-    \n-    public static PoolingDataSourceWrapper setupPoolingDataSource() {\n-        Properties dsProps = getDatasourceProperties();\n-        PoolingDataSourceWrapper pds = null;\n-        try {\n-        \tpds = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-        } catch (Exception e) {\n-        \tlogger.warn(\"DBPOOL_MGR:Looks like there is an issue with creating db pool because of \" + e.getMessage() + \" cleaning up...\");\n-        \tlogger.info(\"DBPOOL_MGR: attempting to create db pool again...\");\n-        \tpds = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-\n-        \tlogger.info(\"DBPOOL_MGR:Pool created after cleanup of leftover resources\");\n-        }\n-        \n-        return pds;\n-    }\n-    \n-    \n-    /**\n-     * This reads in the (maven filtered) datasource properties from the test\n-     * resource directory.\n-     * \n-     * @return Properties containing the datasource properties.\n-     */\n-    private static Properties getDatasourceProperties() { \n-        boolean propertiesNotFound = false;\n-        \n-        // Central place to set additional H2 properties\n-        System.setProperty(\"h2.lobInDatabase\", \"true\");\n-        \n-        InputStream propsInputStream = TimerBaseTest.class.getResourceAsStream(DATASOURCE_PROPERTIES);\n-        Properties props = new Properties();\n-        if (propsInputStream != null) {\n-            try {\n-                props.load(propsInputStream);\n-            } catch (IOException ioe) {\n-                propertiesNotFound = true;\n-                logger.warn(\"Unable to find properties, using default H2 properties: \" + ioe.getMessage());\n-                ioe.printStackTrace();\n-            }\n-        } else {\n-            propertiesNotFound = true;\n-        }\n-\n-        String password = props.getProperty(\"password\");\n-        if (\"${maven.jdbc.password}\".equals(password) || propertiesNotFound) {\n-           logger.warn( \"Unable to load datasource properties [\" + DATASOURCE_PROPERTIES + \"]\" );\n-        }\n-        \n-        // If maven filtering somehow doesn't work the way it should.. \n-        setDefaultProperties(props);\n \n-        return props;\n-    }\n+    protected static final String DB_DDL_SCRIPTS_RESOURCE_PATH = \"/db/ddl-scripts\";\n \n-    /**\n-     * Return the default database/datasource properties - These properties use\n-     * an in-memory H2 database\n-     * \n-     * This is used when the developer is somehow running the tests but\n-     * bypassing the maven filtering that's been turned on in the pom.\n-     * \n-     * @return Properties containing the default properties\n-     */\n-    private static void setDefaultProperties(Properties props) {\n-        String[] keyArr = { \n-                \"serverName\", \"portNumber\", \"databaseName\", JDBC_URL,\n-                USER, PASSWORD,\n-                DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n-                MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n-        String[] defaultPropArr = { \n-                \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",\n-                \"sa\", \"\", \n-                \"org.h2.Driver\", \"org.h2.jdbcx.JdbcDataSource\", \n-                \"5\", \"true\" };\n-        Assert.assertTrue(\"Unequal number of keys for default properties\", keyArr.length == defaultPropArr.length);\n-        for (int i = 0; i < keyArr.length; ++i) {\n-            if( ! props.containsKey(keyArr[i]) ) {\n-                props.put(keyArr[i], defaultPropArr[i]);\n-            }\n-        }\n-    }   \n-    \n     @BeforeClass\n     public static void setUpOnce() {\n         if (pds == null) {\n-            pds = setupPoolingDataSource();\n+            pds = setupPoolingDataSource(datasourceName);\n         }\n+        //ScriptsBase.executeScriptRunner(DB_DDL_SCRIPTS_RESOURCE_PATH, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzE5Mw==", "bodyText": "Same here", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405457193", "createdAt": "2020-04-08T11:36:24Z", "author": {"login": "gmunozfe"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/timer/TimerBaseTest.java", "diffHunk": "@@ -154,23 +52,8 @@ public static void tearDownOnce() {\n             pds.close();\n             pds = null;\n         }\n-    }\n-\n-\n-    protected void testCreateQuartzSchema() {\n-        Scanner scanner = new Scanner(this.getClass().getResourceAsStream(\"/quartz_tables_h2.sql\")).useDelimiter(\";\");\n-        try {\n-            Connection connection = ((DataSource)InitialContext.doLookup(\"jdbc/jbpm-ds\")).getConnection();\n-            Statement stmt = connection.createStatement();\n-            while (scanner.hasNext()) {\n-                String sql = scanner.next();\n-                stmt.executeUpdate(sql);\n-            }\n-            stmt.close();\n-            connection.close();\n-        } catch (Exception e) {\n-\n-        }\n+        //TestsUtil.clearSchema();\n+        //ScriptsBase.executeScriptRunner(DB_DDL_SCRIPTS_RESOURCE_PATH, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1ODY4Ng==", "bodyText": "why setting \"h2:mem\" as default instead of \"h2:tcp\"?\nIn the method comment, it also states \"in-memory H2 database\"", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405458686", "createdAt": "2020-04-08T11:39:14Z", "author": {"login": "gmunozfe"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java", "diffHunk": "@@ -185,22 +196,16 @@ public static PoolingDataSourceWrapper setupPoolingDataSource(Properties dsProps\n      */\n     private static Properties getDefaultProperties() {\n         if (defaultProperties == null) {\n-            String[] keyArr = { \n-                    \"serverName\", \"portNumber\", \"databaseName\", \n-                    \"url\", \n-                    \"user\", \"password\", \n-                    \"driverClassName\",\n-                    \"className\", \n-                    \"maxPoolSize\", \n-                    \"allowLocalTransactions\" };\n-            String[] defaultPropArr = { \n-                    \"\", \"\", \"\", \n-                    \"jdbc:h2:tcp://localhost/target/jbpm-test\", \n-                    \"sa\", \"\", \n-                    \"org.h2.Driver\",\n-                    \"org.h2.jdbcx.JdbcDataSource\", \n-                    \"16\", \n-                    \"true\" };\n+            String[] keyArr = {\n+                    SERVER_NAME, SERVER_PORT, DATABASE_NAME, JDBC_URL,\n+                    USER, PASSWORD,\n+                    DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n+                    MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n+            String[] defaultPropArr = {\n+                    \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1OTQyNA==", "bodyText": "Max_pool_size was previously 16, is there any reason to lower it to 5?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405459424", "createdAt": "2020-04-08T11:40:39Z", "author": {"login": "gmunozfe"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java", "diffHunk": "@@ -185,22 +196,16 @@ public static PoolingDataSourceWrapper setupPoolingDataSource(Properties dsProps\n      */\n     private static Properties getDefaultProperties() {\n         if (defaultProperties == null) {\n-            String[] keyArr = { \n-                    \"serverName\", \"portNumber\", \"databaseName\", \n-                    \"url\", \n-                    \"user\", \"password\", \n-                    \"driverClassName\",\n-                    \"className\", \n-                    \"maxPoolSize\", \n-                    \"allowLocalTransactions\" };\n-            String[] defaultPropArr = { \n-                    \"\", \"\", \"\", \n-                    \"jdbc:h2:tcp://localhost/target/jbpm-test\", \n-                    \"sa\", \"\", \n-                    \"org.h2.Driver\",\n-                    \"org.h2.jdbcx.JdbcDataSource\", \n-                    \"16\", \n-                    \"true\" };\n+            String[] keyArr = {\n+                    SERVER_NAME, SERVER_PORT, DATABASE_NAME, JDBC_URL,\n+                    USER, PASSWORD,\n+                    DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n+                    MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n+            String[] defaultPropArr = {\n+                    \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",\n+                    \"sa\", \"\",\n+                    \"org.h2.Driver\", \"org.h2.jdbcx.JdbcDataSource\",\n+                    \"5\", \"true\" };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0OTIzOA==", "bodyText": "I know this is following the same approach as before (moved from other class), but it's just a single reattempt after catching the exception, no?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405549238", "createdAt": "2020-04-08T14:02:25Z", "author": {"login": "gmunozfe"}, "path": "jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java", "diffHunk": "@@ -16,19 +16,56 @@\n \n package org.jbpm.test;\n \n+import java.util.Properties;\n+\n import org.jbpm.process.instance.impl.util.LoggingPrintStream;\n+import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class AbstractBaseTest {\n-    \n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractBaseTest.class);\n+\n+    protected static String datasourceName = \"jdbc/jbpm-ds\";\n+\n     @BeforeClass\n-    public static void configure() { \n+    public static void configure() {\n         LoggingPrintStream.interceptSysOutSysErr();\n     }\n     \n     @AfterClass\n-    public static void reset() { \n+    public static void reset() {\n         LoggingPrintStream.resetInterceptSysOutSysErr();\n     }\n+\n+    protected String getJndiDatasourceName(){\n+        return datasourceName;\n+    }\n+\n+    protected Properties getDataSourceProperties(){\n+        return PersistenceUtil.getDatasourceProperties();\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(String datasourceName) {\n+        return setupPoolingDataSource(null, datasourceName);\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(Properties properties, String datasourceName) {\n+        Properties dsProps = (properties != null) ? properties : PersistenceUtil.getDatasourceProperties();\n+        PoolingDataSourceWrapper pds;\n+        try {\n+            pds = PersistenceUtil.setupPoolingDataSource(dsProps, datasourceName);\n+        } catch (Exception e) {\n+            logger.warn(\"DBPOOL_MGR:Looks like there is an issue with creating db pool because of {} cleaning up...\", e.getMessage());\n+            logger.info(\"DBPOOL_MGR: attempting to create db pool again...\");\n+            pds = PersistenceUtil.setupPoolingDataSource(dsProps, datasourceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NjQyNw==", "bodyText": "This seems more like a constant (default datasourceName): if it's, there should be besides of static, final and uppercase.\nIf not, it can be confused in the scope of the methods that uses a param with the same name.", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405556427", "createdAt": "2020-04-08T14:12:38Z", "author": {"login": "gmunozfe"}, "path": "jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java", "diffHunk": "@@ -16,19 +16,56 @@\n \n package org.jbpm.test;\n \n+import java.util.Properties;\n+\n import org.jbpm.process.instance.impl.util.LoggingPrintStream;\n+import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class AbstractBaseTest {\n-    \n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractBaseTest.class);\n+\n+    protected static String datasourceName = \"jdbc/jbpm-ds\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyODc0NzIz", "url": "https://github.com/kiegroup/jbpm/pull/1627#pullrequestreview-392874723", "createdAt": "2020-04-14T12:25:11Z", "commit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoyNToxMlrOGFMFIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDowNjo0MFrOGFQXGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5Mzk4Ng==", "bodyText": "There is already this defined in the root pom.xml file with a value jdbc:h2:tcp://localhost/${project.basedir}/target/jbpm-test;MVCC=TRUE, why not to reuse this?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408093986", "createdAt": "2020-04-14T12:25:12Z", "author": {"login": "MarianMacik"}, "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/pom.xml", "diffHunk": "@@ -12,6 +12,7 @@\n \n   <properties>\n     <java.module.name>org.jbpm.casemgmt.impl</java.module.name>\n+    <maven.jdbc.url>jdbc:h2:mem:test;MVCC=true</maven.jdbc.url>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTA0Mw==", "bodyText": "This is left here just because of that POOL_CONNECTIONS custom property for a subset of tests?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408095043", "createdAt": "2020-04-14T12:27:00Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/JbpmTestCase.java", "diffHunk": "@@ -80,12 +80,10 @@ protected void finished(Description description) {\n     );\n \n     @Override\n-    protected PoolingDataSourceWrapper setupPoolingDataSource() {\n+    protected Properties getDataSourceProperties(){\n         Properties dsProps = PersistenceUtil.getDatasourceProperties();\n         dsProps.setProperty(\"POOL_CONNECTIONS\", \"false\");\n-        // Setup the datasource\n-        PoolingDataSourceWrapper ds1 = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-        return ds1;\n+        return dsProps;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTg1NQ==", "bodyText": "Was the validation failing or why was this changed?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408095855", "createdAt": "2020-04-14T12:28:17Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/quartzmockentities/QrtzJobDetails.java", "diffHunk": "@@ -57,6 +57,6 @@\n     private Boolean requestsRecovery;\n \n     @Lob\n-    @Column(name = \"JOB_DATA\")\n+    @Column(name = \"JOB_DATA\", length = 5000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMTc3NA==", "bodyText": "Still can see this commented line :)", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408101774", "createdAt": "2020-04-14T12:37:56Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/timer/TimerBaseTest.java", "diffHunk": "@@ -16,136 +16,34 @@\n \n package org.jbpm.test.functional.timer;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.sql.Connection;\n-import java.sql.Statement;\n import java.util.Arrays;\n import java.util.List;\n-import java.util.Properties;\n-import java.util.Scanner;\n-import java.util.Set;\n \n-import javax.naming.InitialContext;\n-import javax.sql.DataSource;\n-\n-import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.jbpm.runtime.manager.impl.DefaultRegisterableItemsFactory;\n import org.jbpm.test.AbstractBaseTest;\n-import org.kie.test.util.db.PoolingDataSourceWrapper;\n import org.junit.AfterClass;\n-import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.kie.api.event.process.ProcessEventListener;\n import org.kie.api.event.rule.AgendaEventListener;\n import org.kie.api.runtime.manager.RuntimeEngine;\n import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public abstract class TimerBaseTest extends AbstractBaseTest {\n     private static final Logger logger = LoggerFactory.getLogger(TimerBaseTest.class);\n \t\n \tprivate static PoolingDataSourceWrapper pds;\n-    \n-    protected static final String DATASOURCE_PROPERTIES = \"/datasource.properties\";\n-    \n-    protected static final String MAX_POOL_SIZE = \"maxPoolSize\";\n-    protected static final String ALLOW_LOCAL_TXS = \"allowLocalTransactions\";\n-    \n-    protected static final String DATASOURCE_CLASS_NAME = \"className\";\n-    protected static final String DRIVER_CLASS_NAME = \"driverClassName\";\n-    protected static final String USER = \"user\";\n-    protected static final String PASSWORD = \"password\";\n-    protected static final String JDBC_URL = \"url\";\n-    \n-    public static PoolingDataSourceWrapper setupPoolingDataSource() {\n-        Properties dsProps = getDatasourceProperties();\n-        PoolingDataSourceWrapper pds = null;\n-        try {\n-        \tpds = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-        } catch (Exception e) {\n-        \tlogger.warn(\"DBPOOL_MGR:Looks like there is an issue with creating db pool because of \" + e.getMessage() + \" cleaning up...\");\n-        \tlogger.info(\"DBPOOL_MGR: attempting to create db pool again...\");\n-        \tpds = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-\n-        \tlogger.info(\"DBPOOL_MGR:Pool created after cleanup of leftover resources\");\n-        }\n-        \n-        return pds;\n-    }\n-    \n-    \n-    /**\n-     * This reads in the (maven filtered) datasource properties from the test\n-     * resource directory.\n-     * \n-     * @return Properties containing the datasource properties.\n-     */\n-    private static Properties getDatasourceProperties() { \n-        boolean propertiesNotFound = false;\n-        \n-        // Central place to set additional H2 properties\n-        System.setProperty(\"h2.lobInDatabase\", \"true\");\n-        \n-        InputStream propsInputStream = TimerBaseTest.class.getResourceAsStream(DATASOURCE_PROPERTIES);\n-        Properties props = new Properties();\n-        if (propsInputStream != null) {\n-            try {\n-                props.load(propsInputStream);\n-            } catch (IOException ioe) {\n-                propertiesNotFound = true;\n-                logger.warn(\"Unable to find properties, using default H2 properties: \" + ioe.getMessage());\n-                ioe.printStackTrace();\n-            }\n-        } else {\n-            propertiesNotFound = true;\n-        }\n-\n-        String password = props.getProperty(\"password\");\n-        if (\"${maven.jdbc.password}\".equals(password) || propertiesNotFound) {\n-           logger.warn( \"Unable to load datasource properties [\" + DATASOURCE_PROPERTIES + \"]\" );\n-        }\n-        \n-        // If maven filtering somehow doesn't work the way it should.. \n-        setDefaultProperties(props);\n \n-        return props;\n-    }\n+    protected static final String DB_DDL_SCRIPTS_RESOURCE_PATH = \"/db/ddl-scripts\";\n \n-    /**\n-     * Return the default database/datasource properties - These properties use\n-     * an in-memory H2 database\n-     * \n-     * This is used when the developer is somehow running the tests but\n-     * bypassing the maven filtering that's been turned on in the pom.\n-     * \n-     * @return Properties containing the default properties\n-     */\n-    private static void setDefaultProperties(Properties props) {\n-        String[] keyArr = { \n-                \"serverName\", \"portNumber\", \"databaseName\", JDBC_URL,\n-                USER, PASSWORD,\n-                DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n-                MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n-        String[] defaultPropArr = { \n-                \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",\n-                \"sa\", \"\", \n-                \"org.h2.Driver\", \"org.h2.jdbcx.JdbcDataSource\", \n-                \"5\", \"true\" };\n-        Assert.assertTrue(\"Unequal number of keys for default properties\", keyArr.length == defaultPropArr.length);\n-        for (int i = 0; i < keyArr.length; ++i) {\n-            if( ! props.containsKey(keyArr[i]) ) {\n-                props.put(keyArr[i], defaultPropArr[i]);\n-            }\n-        }\n-    }   \n-    \n     @BeforeClass\n     public static void setUpOnce() {\n         if (pds == null) {\n-            pds = setupPoolingDataSource();\n+            pds = setupPoolingDataSource(datasourceName);\n         }\n+        //ScriptsBase.executeScriptRunner(DB_DDL_SCRIPTS_RESOURCE_PATH, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzAwMQ=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMTg4Mw==", "bodyText": "Still can see it here as well.", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408101883", "createdAt": "2020-04-14T12:38:08Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/timer/TimerBaseTest.java", "diffHunk": "@@ -154,23 +52,8 @@ public static void tearDownOnce() {\n             pds.close();\n             pds = null;\n         }\n-    }\n-\n-\n-    protected void testCreateQuartzSchema() {\n-        Scanner scanner = new Scanner(this.getClass().getResourceAsStream(\"/quartz_tables_h2.sql\")).useDelimiter(\";\");\n-        try {\n-            Connection connection = ((DataSource)InitialContext.doLookup(\"jdbc/jbpm-ds\")).getConnection();\n-            Statement stmt = connection.createStatement();\n-            while (scanner.hasNext()) {\n-                String sql = scanner.next();\n-                stmt.executeUpdate(sql);\n-            }\n-            stmt.close();\n-            connection.close();\n-        } catch (Exception e) {\n-\n-        }\n+        //TestsUtil.clearSchema();\n+        //ScriptsBase.executeScriptRunner(DB_DDL_SCRIPTS_RESOURCE_PATH, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzE5Mw=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1NTk0Mg==", "bodyText": "Yes, but is that an issue? We can leave h2:tcp as a default as well. This is anyway used just for scenarios where datasource.properties is missing. Moreover, PersistenceUtil is clever and will start the server for tcp-prefixd connections URLs if you use this method:\n\n  \n    \n      jbpm/jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java\n    \n    \n        Lines 116 to 121\n      in\n      3ce2c81\n    \n    \n    \n    \n\n        \n          \n           public static void startH2TcpServer(Properties datasourceProperties) { \n        \n\n        \n          \n               String jdbcUrl = datasourceProperties.getProperty(\"url\"); \n        \n\n        \n          \n               if (jdbcUrl != null && jdbcUrl.matches(\"jdbc:h2:tcp:.*\")) { \n        \n\n        \n          \n                   h2Server.start(); \n        \n\n        \n          \n               } \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nBut probably even better - we should unify this to always use in-memory one as it is more convenient. Moreover, some modules like jbpm-human-task-core override this to in-memory, so they override what is defined in the root pom.xml", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408155942", "createdAt": "2020-04-14T13:56:11Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java", "diffHunk": "@@ -185,22 +196,16 @@ public static PoolingDataSourceWrapper setupPoolingDataSource(Properties dsProps\n      */\n     private static Properties getDefaultProperties() {\n         if (defaultProperties == null) {\n-            String[] keyArr = { \n-                    \"serverName\", \"portNumber\", \"databaseName\", \n-                    \"url\", \n-                    \"user\", \"password\", \n-                    \"driverClassName\",\n-                    \"className\", \n-                    \"maxPoolSize\", \n-                    \"allowLocalTransactions\" };\n-            String[] defaultPropArr = { \n-                    \"\", \"\", \"\", \n-                    \"jdbc:h2:tcp://localhost/target/jbpm-test\", \n-                    \"sa\", \"\", \n-                    \"org.h2.Driver\",\n-                    \"org.h2.jdbcx.JdbcDataSource\", \n-                    \"16\", \n-                    \"true\" };\n+            String[] keyArr = {\n+                    SERVER_NAME, SERVER_PORT, DATABASE_NAME, JDBC_URL,\n+                    USER, PASSWORD,\n+                    DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n+                    MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n+            String[] defaultPropArr = {\n+                    \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1ODY4Ng=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1NjUyNw==", "bodyText": "+1", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408156527", "createdAt": "2020-04-14T13:56:54Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java", "diffHunk": "@@ -185,22 +196,16 @@ public static PoolingDataSourceWrapper setupPoolingDataSource(Properties dsProps\n      */\n     private static Properties getDefaultProperties() {\n         if (defaultProperties == null) {\n-            String[] keyArr = { \n-                    \"serverName\", \"portNumber\", \"databaseName\", \n-                    \"url\", \n-                    \"user\", \"password\", \n-                    \"driverClassName\",\n-                    \"className\", \n-                    \"maxPoolSize\", \n-                    \"allowLocalTransactions\" };\n-            String[] defaultPropArr = { \n-                    \"\", \"\", \"\", \n-                    \"jdbc:h2:tcp://localhost/target/jbpm-test\", \n-                    \"sa\", \"\", \n-                    \"org.h2.Driver\",\n-                    \"org.h2.jdbcx.JdbcDataSource\", \n-                    \"16\", \n-                    \"true\" };\n+            String[] keyArr = {\n+                    SERVER_NAME, SERVER_PORT, DATABASE_NAME, JDBC_URL,\n+                    USER, PASSWORD,\n+                    DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n+                    MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n+            String[] defaultPropArr = {\n+                    \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",\n+                    \"sa\", \"\",\n+                    \"org.h2.Driver\", \"org.h2.jdbcx.JdbcDataSource\",\n+                    \"5\", \"true\" };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1OTQyNA=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE2NDEyMw==", "bodyText": "Can't we directly use the PersistenceUtil class? We should always use the properties from datasource.properties file so I would delete the option of providing null properties completely.", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408164123", "createdAt": "2020-04-14T14:06:40Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java", "diffHunk": "@@ -16,19 +16,56 @@\n \n package org.jbpm.test;\n \n+import java.util.Properties;\n+\n import org.jbpm.process.instance.impl.util.LoggingPrintStream;\n+import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class AbstractBaseTest {\n-    \n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractBaseTest.class);\n+\n+    protected static String datasourceName = \"jdbc/jbpm-ds\";\n+\n     @BeforeClass\n-    public static void configure() { \n+    public static void configure() {\n         LoggingPrintStream.interceptSysOutSysErr();\n     }\n     \n     @AfterClass\n-    public static void reset() { \n+    public static void reset() {\n         LoggingPrintStream.resetInterceptSysOutSysErr();\n     }\n+\n+    protected String getJndiDatasourceName(){\n+        return datasourceName;\n+    }\n+\n+    protected Properties getDataSourceProperties(){\n+        return PersistenceUtil.getDatasourceProperties();\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(String datasourceName) {\n+        return setupPoolingDataSource(null, datasourceName);\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(Properties properties, String datasourceName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/1d6e7c21fd347381ebb2f27ce87de367a9a8c79b", "committedDate": "2020-04-06T13:16:36Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n[JBPM-9069] com.google.inject:guice artifact needs to be upgraded to version 4.2.3\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}, "afterCommit": {"oid": "561e5ef29231f4fd9c452aacac45866ab73c15b4", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/561e5ef29231f4fd9c452aacac45866ab73c15b4", "committedDate": "2020-04-21T08:30:21Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "561e5ef29231f4fd9c452aacac45866ab73c15b4", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/561e5ef29231f4fd9c452aacac45866ab73c15b4", "committedDate": "2020-04-21T08:30:21Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}, "afterCommit": {"oid": "9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f", "committedDate": "2020-04-21T11:50:04Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNzUwNDg5", "url": "https://github.com/kiegroup/jbpm/pull/1627#pullrequestreview-401750489", "createdAt": "2020-04-28T11:39:42Z", "commit": {"oid": "9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTozOTo0M1rOGNP1Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTozOTo0M1rOGNP1Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0NDAxOA==", "bodyText": "Just checking, here without setting any port, default will be used (or a random, if it's already on use), no? Because previously it was started on 9123.", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r416544018", "createdAt": "2020-04-28T11:39:43Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-executor/src/test/java/org/jbpm/executor/DBUnavilabilityExecutorTest.java", "diffHunk": "@@ -47,33 +46,29 @@\n \n public class DBUnavilabilityExecutorTest{\n \n-    public static final Map<String, Object> cachedEntities = new HashMap<String, Object>();\n+    public static final Map<String, Object> cachedEntities = new HashMap<>();\n     private ExecutorService executorService;\n \n+    private static Properties dsProps;\n \n     private EntityManagerFactory emf = null;\n \n \tprivate PoolingDataSourceWrapper pds;\n \n-\tprivate static Server h2Server;\n-\n \t@BeforeClass\n-    public static void createDBServer() throws Exception {\n-\t    h2Server = Server.createTcpServer(new String[] { \"-tcpPort\", \"9123\" });\n-\t    h2Server.start();\n+    public static void createDBServer() {\n+        dsProps = ExecutorTestUtil.getDatasourceProperties();\n+        dsProps.setProperty(\"url\", \"jdbc:h2:tcp://localhost/target/jbpm-exec-test;MVCC=TRUE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NDY1MTgx", "url": "https://github.com/kiegroup/jbpm/pull/1627#pullrequestreview-425465181", "createdAt": "2020-06-05T16:51:47Z", "commit": {"oid": "9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjo1MTo0OFrOGf1-AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjo1OToyM1rOGf2NKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0MzI2NQ==", "bodyText": "So we changed Quartz scripts for this as an interim solution until we have proper scripts in place?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r436043265", "createdAt": "2020-06-05T16:51:48Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-coverage/src/test/filtered-resources/META-INF/persistence.xml", "diffHunk": "@@ -72,6 +72,21 @@\n \n     <class>org.jbpm.kie.services.impl.query.persistence.QueryDefinitionEntity</class>\n     <class>org.jbpm.kie.services.impl.store.DeploymentStoreEntry</class>\n+\n+    <!-- Quartz -->\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzBlobTriggers</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzCalendars</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzCronTriggers</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzFiredTriggers</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzJobDetails</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzJobListeners</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzLocks</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzPausedTriggerGrps</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzSchedulerState</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzSimpleTriggers</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzTriggerListeners</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzTriggers</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzSimpropTriggers</class>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0NzE0NQ==", "bodyText": "This is here so this PU is defined in the module which uses it directly?\nBTW it seems that until now this PU definition was taken from jbpm-executor test-jar. This dependency seems to be there just for availability of CountDownAsyncJobListener which is defined there. This can be mitigated in the future by putting it into jbpm-test-util among other listeners.", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r436047145", "createdAt": "2020-06-05T16:59:23Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-coverage/src/test/filtered-resources/META-INF/persistence.xml", "diffHunk": "@@ -183,6 +198,76 @@\n         <property name=\"hibernate.transaction.jta.platform\" value=\"org.hibernate.service.jta.platform.internal.JBossStandAloneJtaPlatform\" />\n         <property name=\"hibernate.connection.handling_mode\" value=\"DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION\"/>\n       </properties>        \n-    </persistence-unit>    \n+    </persistence-unit>\n+\n+  <persistence-unit name=\"org.jbpm.persistence.complete\" transaction-type=\"JTA\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f", "committedDate": "2020-04-21T11:50:04Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}, "afterCommit": {"oid": "797443b57bb108938d0c0afebf3b4d87ff0fcb22", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/797443b57bb108938d0c0afebf3b4d87ff0fcb22", "committedDate": "2020-06-09T10:27:31Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "797443b57bb108938d0c0afebf3b4d87ff0fcb22", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/797443b57bb108938d0c0afebf3b4d87ff0fcb22", "committedDate": "2020-06-09T10:27:31Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}, "afterCommit": {"oid": "d2042a0a31d93f04651cd8ec3a56a6a8987ce0e2", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/d2042a0a31d93f04651cd8ec3a56a6a8987ce0e2", "committedDate": "2020-06-10T12:22:50Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d2042a0a31d93f04651cd8ec3a56a6a8987ce0e2", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/d2042a0a31d93f04651cd8ec3a56a6a8987ce0e2", "committedDate": "2020-06-10T12:22:50Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}, "afterCommit": {"oid": "a213a4498b1fb09c61361547a8f6cef9d93ba2c2", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/a213a4498b1fb09c61361547a8f6cef9d93ba2c2", "committedDate": "2020-06-10T17:52:37Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db0bed5934dc16d21e2a06cdfc876ee7a3f6543b", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/db0bed5934dc16d21e2a06cdfc876ee7a3f6543b", "committedDate": "2020-06-18T07:03:16Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a213a4498b1fb09c61361547a8f6cef9d93ba2c2", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/a213a4498b1fb09c61361547a8f6cef9d93ba2c2", "committedDate": "2020-06-10T17:52:37Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}, "afterCommit": {"oid": "db0bed5934dc16d21e2a06cdfc876ee7a3f6543b", "author": {"user": {"login": "afalhambra", "name": "afalhambra"}}, "url": "https://github.com/kiegroup/jbpm/commit/db0bed5934dc16d21e2a06cdfc876ee7a3f6543b", "committedDate": "2020-06-18T07:03:16Z", "message": "[BAQE-1328] Testing and fixing jbpm-test-coverage for DB2 support\n\n- Note: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MDM0NzA1", "url": "https://github.com/kiegroup/jbpm/pull/1627#pullrequestreview-438034705", "createdAt": "2020-06-26T06:06:50Z", "commit": {"oid": "db0bed5934dc16d21e2a06cdfc876ee7a3f6543b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1082, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}