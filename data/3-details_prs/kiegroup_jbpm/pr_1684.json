{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NDQ3NDAy", "number": 1684, "title": "[JBPM-9197] Allow the introduction of emails in Tasks notifications", "bodyText": "allow arbitrary emails notifications through parameter toemails", "createdAt": "2020-06-18T12:43:15Z", "url": "https://github.com/kiegroup/jbpm/pull/1684", "merged": true, "mergeCommit": {"oid": "951346254c8917308cba8dc21ed85978f1c9dea0"}, "closed": true, "closedAt": "2020-07-31T11:19:55Z", "author": {"login": "elguardian"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABct_igZgBqjM0NzEzNTc5ODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6O4dpABqjM2MDcyMDEyNDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be6fd3e55f30d8c646619689da423e4f5658828f", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/be6fd3e55f30d8c646619689da423e4f5658828f", "committedDate": "2020-06-18T12:42:04Z", "message": "[JBPM-9197] Allow the introduction of emails in Tasks notifications"}, "afterCommit": {"oid": "6b5cc652854c041ed24d86c20f21d8905d678394", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/6b5cc652854c041ed24d86c20f21d8905d678394", "committedDate": "2020-06-23T06:34:12Z", "message": "[JBPM-9197] Allow the introduction of emails in Tasks notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b5cc652854c041ed24d86c20f21d8905d678394", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/6b5cc652854c041ed24d86c20f21d8905d678394", "committedDate": "2020-06-23T06:34:12Z", "message": "[JBPM-9197] Allow the introduction of emails in Tasks notifications"}, "afterCommit": {"oid": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73", "committedDate": "2020-06-25T09:32:23Z", "message": "[JBPM-9197] Allow the introduction of emails in Tasks notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MjE3NDY1", "url": "https://github.com/kiegroup/jbpm/pull/1684#pullrequestreview-438217465", "createdAt": "2020-06-26T11:23:53Z", "commit": {"oid": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMToyMzo1NFrOGpdVig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzozNzo1NlrOGphOQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEyNTQ1MA==", "bodyText": "Shouldn't be protected instead?", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446125450", "createdAt": "2020-06-26T11:23:54Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/UserGroupCallbackTaskCommand.java", "diffHunk": "@@ -98,6 +100,14 @@ protected boolean doCallbackUserOperation(String userId, TaskContext context) {\n \n     }\n     \n+    private boolean doCallbackEmailOperation(String emailId, TaskContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzNTcwMw==", "bodyText": "Not really needed\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        list = new ArrayList<OrganizationalEntity>();\n          \n          \n            \n                        list = new ArrayList<>();", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446135703", "createdAt": "2020-06-26T11:49:04Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java", "diffHunk": "@@ -218,28 +221,33 @@ protected URL getAttachemntURL(String attachment) throws MalformedURLException {\n         }\n     }\n     \n-    protected void buildMapByLanguage(Map<String, List<User>> map, Group group, UserInfo userInfo) {\n+    protected void buildMapByLanguage(Map<String, List<OrganizationalEntity>> map, Group group, UserInfo userInfo) {\n     \tIterator<OrganizationalEntity> it = userInfo.getMembersForGroup(group);\n     \tif (it != null) {\n \t    \twhile (it.hasNext()) {\n \t            OrganizationalEntity entity = it.next();\n \t            if (entity instanceof Group) {\n \t                buildMapByLanguage(map, (Group) entity, userInfo);\n \t            } else {\n-\t                buildMapByLanguage(map, (User) entity, userInfo);\n+                    buildMapByLanguage(map, entity, userInfo);\n \t            }\n \t        }\n     \t}\n     }\n \n-    protected void buildMapByLanguage(Map<String, List<User>> map, User user, UserInfo userInfo) {\n-        String language = userInfo.getLanguageForEntity(user);\n-        List<User> list = map.get(language);\n+    protected void buildMapByLanguage(Map<String, List<OrganizationalEntity>> map, OrganizationalEntity user, UserInfo userInfo) {\n+        String language = Optional.ofNullable(userInfo.getLanguageForEntity(user)).orElse(\"en-UK\");\n+        List<OrganizationalEntity> list = map.get(language);\n         if (list == null) {\n-            list = new ArrayList<User>();\n+            list = new ArrayList<OrganizationalEntity>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzNjQ0Nw==", "bodyText": "mailSession doesn't implement toString() so this output will not really display anything useful.", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446136447", "createdAt": "2020-06-26T11:50:49Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java", "diffHunk": "@@ -218,28 +221,33 @@ protected URL getAttachemntURL(String attachment) throws MalformedURLException {\n         }\n     }\n     \n-    protected void buildMapByLanguage(Map<String, List<User>> map, Group group, UserInfo userInfo) {\n+    protected void buildMapByLanguage(Map<String, List<OrganizationalEntity>> map, Group group, UserInfo userInfo) {\n     \tIterator<OrganizationalEntity> it = userInfo.getMembersForGroup(group);\n     \tif (it != null) {\n \t    \twhile (it.hasNext()) {\n \t            OrganizationalEntity entity = it.next();\n \t            if (entity instanceof Group) {\n \t                buildMapByLanguage(map, (Group) entity, userInfo);\n \t            } else {\n-\t                buildMapByLanguage(map, (User) entity, userInfo);\n+                    buildMapByLanguage(map, entity, userInfo);\n \t            }\n \t        }\n     \t}\n     }\n \n-    protected void buildMapByLanguage(Map<String, List<User>> map, User user, UserInfo userInfo) {\n-        String language = userInfo.getLanguageForEntity(user);\n-        List<User> list = map.get(language);\n+    protected void buildMapByLanguage(Map<String, List<OrganizationalEntity>> map, OrganizationalEntity user, UserInfo userInfo) {\n+        String language = Optional.ofNullable(userInfo.getLanguageForEntity(user)).orElse(\"en-UK\");\n+        List<OrganizationalEntity> list = map.get(language);\n         if (list == null) {\n-            list = new ArrayList<User>();\n+            list = new ArrayList<OrganizationalEntity>();\n             map.put(language, list);\n         }\n         list.add(user);\n     }\n \n+    @Override\n+    public String toString() {\n+        return \"EmailNotificationListener (\" + mailSession + \")\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0NDQzMw==", "bodyText": "lines from 240 to 244 could be replaced with computeIfAbsent\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<OrganizationalEntity> list = map.get(language);\n          \n          \n            \n                    List<OrganizationalEntity> list = map.computeIfAbsent(language, k -> new ArrayList<>());", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446144433", "createdAt": "2020-06-26T12:09:24Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java", "diffHunk": "@@ -218,28 +221,33 @@ protected URL getAttachemntURL(String attachment) throws MalformedURLException {\n         }\n     }\n     \n-    protected void buildMapByLanguage(Map<String, List<User>> map, Group group, UserInfo userInfo) {\n+    protected void buildMapByLanguage(Map<String, List<OrganizationalEntity>> map, Group group, UserInfo userInfo) {\n     \tIterator<OrganizationalEntity> it = userInfo.getMembersForGroup(group);\n     \tif (it != null) {\n \t    \twhile (it.hasNext()) {\n \t            OrganizationalEntity entity = it.next();\n \t            if (entity instanceof Group) {\n \t                buildMapByLanguage(map, (Group) entity, userInfo);\n \t            } else {\n-\t                buildMapByLanguage(map, (User) entity, userInfo);\n+                    buildMapByLanguage(map, entity, userInfo);\n \t            }\n \t        }\n     \t}\n     }\n \n-    protected void buildMapByLanguage(Map<String, List<User>> map, User user, UserInfo userInfo) {\n-        String language = userInfo.getLanguageForEntity(user);\n-        List<User> list = map.get(language);\n+    protected void buildMapByLanguage(Map<String, List<OrganizationalEntity>> map, OrganizationalEntity user, UserInfo userInfo) {\n+        String language = Optional.ofNullable(userInfo.getLanguageForEntity(user)).orElse(\"en-UK\");\n+        List<OrganizationalEntity> list = map.get(language);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE1MTQyNA==", "bodyText": "Why do we need this class member?", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446151424", "createdAt": "2020-06-26T12:24:50Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/identity/MvelUserGroupCallbackImpl.java", "diffHunk": "@@ -20,21 +20,27 @@\n import java.io.Reader;\n import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n import org.jbpm.services.task.utils.MVELUtils;\n+import org.kie.api.task.model.Email;\n import org.kie.api.task.model.Group;\n import org.kie.api.task.model.User;\n import org.kie.internal.task.api.UserGroupCallback;\n \n public class MvelUserGroupCallbackImpl implements UserGroupCallback {\n \n+    private Set<Email> emails;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4OTEyMA==", "bodyText": "Message is a little misleading.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new RuntimeException(\"Email already exists with \" + email + \" id, please check that there is no group and user with same id\");\n          \n          \n            \n                        throw new RuntimeException(\"Email already exists with \" + email + \" id, please check that there is email with same id\");", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446189120", "createdAt": "2020-06-26T13:37:56Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-jpa/src/main/java/org/jbpm/services/task/persistence/JPATaskPersistenceContext.java", "diffHunk": "@@ -225,12 +227,49 @@ public User updateUser(User user) {\n \t}\n \n \t@Override\n-\tpublic User removeUser(User user) {\n+    public User removeUser(User user) {\n \t\tcheck();\n-\t\tem.remove( user );\n-\t\treturn user;\n+        em.remove(user);\n+        return user;\n \t}\n \n+    @Override\n+    public Email findEmail(String emailId) {\n+        check();\n+        if (this.pessimisticLocking) {\n+            return this.em.find(EmailImpl.class, emailId, LockModeType.PESSIMISTIC_WRITE);\n+        }\n+        return this.em.find(EmailImpl.class, emailId);\n+    }\n+\n+    @Override\n+    public Email persistEmail(Email email) {\n+        check();\n+        try {\n+            this.em.persist(email);\n+            if (this.pessimisticLocking) {\n+                this.em.flush();\n+                return this.em.find(EmailImpl.class, email.getId(), LockModeType.PESSIMISTIC_WRITE);\n+            }\n+        } catch (EntityExistsException e) {\n+            throw new RuntimeException(\"Email already exists with \" + email + \" id, please check that there is no group and user with same id\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MDQ4MDg2", "url": "https://github.com/kiegroup/jbpm/pull/1684#pullrequestreview-439048086", "createdAt": "2020-06-29T11:32:34Z", "commit": {"oid": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTozMjozNFrOGqMoGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDo0Mzo0NVrOGqUTDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwMDI1MA==", "bodyText": "if the returned email is not used, then, return void in the method.\nAs current implemented, when the persistIfNotExists is invoked, returns an email object that it's not being used for returning it.", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446900250", "createdAt": "2020-06-29T11:32:34Z", "author": {"login": "gmunozfe"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/UserGroupCallbackTaskCommand.java", "diffHunk": "@@ -144,12 +154,22 @@ protected User addUserFromCallbackOperation(String userId, TaskContext context)\n         return user;\n     }\n     \n+    protected Email addEmailFromCallbackOperation(String emailId, TaskContext context) {\n+        Email email = context.getPersistenceContext().findEmail(emailId);\n+        boolean emailExists = email != null;\n+        if (!StringUtils.isEmpty(emailId) && !emailExists) {\n+            persistIfNotExists(TaskModelProvider.getFactory().newEmail(emailId), context);\n+        }\n+\n+        return email;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMTM2NA==", "bodyText": "Check also that it's not empty\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if (emailAddress != null) {\n          \n          \n            \n                                    if (emailAddress != null && !emailAddress.isEmpty()) {", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446921364", "createdAt": "2020-06-29T12:10:36Z", "author": {"login": "gmunozfe"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/email/EmailNotificationListener.java", "diffHunk": "@@ -78,43 +79,37 @@ public void onNotification(NotificationEvent event, UserInfo userInfo) {\n             Task task = event.getTask();\n \n             // group users into languages\n-            Map<String, List<User>> users = new HashMap<String, List<User>>();\n-            for (OrganizationalEntity entity : notification.getBusinessAdministrators()) {\n-                if (entity instanceof Group) {\n-                    buildMapByLanguage(users, (Group) entity, userInfo);\n-                } else {\n-                    buildMapByLanguage(users, (User) entity, userInfo);\n-                }\n-            }\n+            List<OrganizationalEntity> entities = new ArrayList<>();\n+            entities.addAll(notification.getBusinessAdministrators());\n+            entities.addAll(notification.getRecipients());\n \n-            for (OrganizationalEntity entity : notification.getRecipients()) {\n+            Map<String, List<OrganizationalEntity>> users = new HashMap<>();\n+            for (OrganizationalEntity entity : entities) {\n                 if (entity instanceof Group) {\n                     buildMapByLanguage(users, (Group) entity, userInfo);\n                 } else {\n-                    buildMapByLanguage(users, (User) entity, userInfo);\n+                    buildMapByLanguage(users, entity, userInfo);\n                 }\n             }\n \n             Map<String, Object> variables = event.getContent();\n-\n-\n             Map<? extends Language, ? extends EmailNotificationHeader> headers = notification.getEmailHeaders();\n \n-            for (Iterator<Map.Entry<String, List<User>>> it = users.entrySet()\n+            for (Iterator<Map.Entry<String, List<OrganizationalEntity>>> it = users.entrySet()\n                     .iterator(); it.hasNext();) {\n                \n                 try { \n-                    Map.Entry<String, List<User>> entry = it.next();\n+                    Map.Entry<String, List<OrganizationalEntity>> entry = it.next();\n                     Language lang = TaskModelProvider.getFactory().newLanguage();\n                     lang.setMapkey(entry.getKey());\n                     EmailNotificationHeader header = headers.get(lang);\n     \n                     Message msg = new MimeMessage(mailSession);\n                     Set<String> toAddresses = new HashSet<String>();\n-                    for (User user : entry.getValue()) {\n+                    for (OrganizationalEntity user : entry.getValue()) {\n     \n-                        String emailAddress = userInfo.getEmailForEntity(user);\n-                        if (emailAddress != null) {                        \t\n+                        String emailAddress = getEmailFromOrganizationEntity(userInfo, user);\n+                        if (emailAddress != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNDA4MQ==", "bodyText": "Question marks (0..1 repetitions) after asterisks (0..n repetitions) are useless in regex\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Pattern pattern = Pattern.compile(\"\\\\[(.*?)\\\\]@\\\\[(.*?)\\\\]\");\n          \n          \n            \n                        Pattern pattern = Pattern.compile(\"\\\\[(.*)\\\\]@\\\\[(.*)\\\\]\");", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446934081", "createdAt": "2020-06-29T12:32:15Z", "author": {"login": "gmunozfe"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/impl/util/HumanTaskHandlerHelper.java", "diffHunk": "@@ -98,13 +100,17 @@ public static Deadlines setDeadlines(Map<String, Object> parameters, List<Organi\n         }\n         \n         for (String component : allComponents) {\n-\t        String[] mainComponents = component.split(ELEMENT_SEPARATOR);\n-\t        \n-\t        if (mainComponents!= null && mainComponents.length == 2) {\n-\t            String actionComponent = mainComponents[0].substring(1, mainComponents[0].length()-1);\n-\t            String expireComponents = mainComponents[1].substring(1, mainComponents[1].length()-1);\n-\t \n-\t            String[] expireElements = expireComponents.split(ATTRIBUTES_ELEMENTS_SEPARATOR);\n+            Pattern pattern = Pattern.compile(\"\\\\[(.*?)\\\\]@\\\\[(.*?)\\\\]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1NDE2Mw==", "bodyText": "Better trim() before split for making it more robust.\nIn fact, ATTRIBUTES_ELEMENTS_SEPARATOR should be\nATTRIBUTES_ELEMENTS_SEPARATOR = \"\\\\s*,\\\\s*\";\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String[] emailRecipientsIds = emailRecipients.split(ATTRIBUTES_ELEMENTS_SEPARATOR);\n          \n          \n            \n                            String[] emailRecipientsIds = emailRecipients.trim().split(ATTRIBUTES_ELEMENTS_SEPARATOR);\n          \n      \n    \n    \n  \n\nThis will avoid that this considers 3 elements in the actionComponent instead of 2:\n[toemails: salaboy@unkown.com ,  krisv@unknown.com,  ]@[R3/PT4H]", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r446954163", "createdAt": "2020-06-29T13:04:01Z", "author": {"login": "gmunozfe"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/impl/util/HumanTaskHandlerHelper.java", "diffHunk": "@@ -193,27 +199,30 @@ protected static Deadline getNewDeadline(String expiresAt, Date deadlineDate, St\n \t\t\tsubjects.add(subject);\n \t\t\tnames.add(subject);\n \n-\t\t\tString recipients = parameters.get(\"tousers\");\n-\t\t\tif (recipients != null && recipients.trim().length() > 0) {\n-\t\t\t\tString[] recipientsIds = recipients.split(ATTRIBUTES_ELEMENTS_SEPARATOR);\n+            String recipients = parameters.get(\"tousers\");\n+            if (recipients != null && recipients.trim().length() > 0) {\n+                String[] recipientsIds = recipients.split(ATTRIBUTES_ELEMENTS_SEPARATOR);\n+                for (String id : recipientsIds) {\n+                    notificationRecipients.add(TaskModelProvider.getFactory().newUser(id.trim()));\n+                }\n+            }\n \n-\t\t\t\tfor (String id : recipientsIds) {\n-\t\t\t\t\tUser user = TaskModelProvider.getFactory().newUser();\n-                \t((InternalOrganizationalEntity) user).setId(id.trim());\n-\t\t\t\t\tnotificationRecipients.add(user);\n-\t\t\t\t}\n+            String groupRecipients = parameters.get(\"togroups\");\n+            if (groupRecipients != null && groupRecipients.trim().length() > 0) {\n+                String[] groupRecipientsIds = groupRecipients.split(ATTRIBUTES_ELEMENTS_SEPARATOR);\n \n-\t\t\t}\n-\t\t\tString groupRecipients = parameters.get(\"togroups\");\n-\t\t\tif (groupRecipients != null && groupRecipients.trim().length() > 0) {\n-\t\t\t\tString[] groupRecipientsIds = groupRecipients.split(ATTRIBUTES_ELEMENTS_SEPARATOR);\n+                for (String id : groupRecipientsIds) {\n+                    notificationRecipients.add(TaskModelProvider.getFactory().newGroup(id.trim()));\n+                }\n+            }\n \n-\t\t\t\tfor (String id : groupRecipientsIds) {\n-\t\t\t\t\tGroup group = TaskModelProvider.getFactory().newGroup();\n-                \t((InternalOrganizationalEntity) group).setId(id.trim());\n-\t\t\t\t\tnotificationRecipients.add(group);\n-\t\t\t\t}\n-\t\t\t}\n+            String emailRecipients = parameters.get(\"toemails\");\n+            if (emailRecipients != null && emailRecipients.trim().length() > 0) {\n+                String[] emailRecipientsIds = emailRecipients.split(ATTRIBUTES_ELEMENTS_SEPARATOR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxNDc2Nw==", "bodyText": "I cannot see where these methods are invoked and if they are really needed.\nFor persist, at the end, persistIfNotExist calls to tpc.persistOrgEntity(entity);\nCould you clarify if they are needed for persistence?\nI cannot see an analogous scenario to add-group-command for email.", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r447014767", "createdAt": "2020-06-29T14:29:00Z", "author": {"login": "gmunozfe"}, "path": "jbpm-human-task/jbpm-human-task-jpa/src/main/java/org/jbpm/services/task/persistence/JPATaskPersistenceContext.java", "diffHunk": "@@ -225,12 +227,49 @@ public User updateUser(User user) {\n \t}\n \n \t@Override\n-\tpublic User removeUser(User user) {\n+    public User removeUser(User user) {\n \t\tcheck();\n-\t\tem.remove( user );\n-\t\treturn user;\n+        em.remove(user);\n+        return user;\n \t}\n \n+    @Override\n+    public Email findEmail(String emailId) {\n+        check();\n+        if (this.pessimisticLocking) {\n+            return this.em.find(EmailImpl.class, emailId, LockModeType.PESSIMISTIC_WRITE);\n+        }\n+        return this.em.find(EmailImpl.class, emailId);\n+    }\n+\n+    @Override\n+    public Email persistEmail(Email email) {\n+        check();\n+        try {\n+            this.em.persist(email);\n+            if (this.pessimisticLocking) {\n+                this.em.flush();\n+                return this.em.find(EmailImpl.class, email.getId(), LockModeType.PESSIMISTIC_WRITE);\n+            }\n+        } catch (EntityExistsException e) {\n+            throw new RuntimeException(\"Email already exists with \" + email + \" id, please check that there is no group and user with same id\");\n+        }\n+        return email;\n+    }\n+\n+    @Override\n+    public Email updateEmail(Email email) {\n+        check();\n+        return this.em.merge(email);\n+    }\n+\n+    @Override\n+    public Email removeEmail(Email email) {\n+        check();\n+        em.remove(email);\n+        return email;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyNTkzMg==", "bodyText": "This block (L407-420) is repeated also for End Deadlines. Perhaps, now it's a good opportunity to refactor it and extract it into a private method for enhancing maintainability.", "url": "https://github.com/kiegroup/jbpm/pull/1684#discussion_r447025932", "createdAt": "2020-06-29T14:43:45Z", "author": {"login": "gmunozfe"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/UserGroupCallbackTaskCommand.java", "diffHunk": "@@ -391,9 +411,10 @@ protected void doCallbackOperationForTaskDeadlines(Deadlines deadlines, TaskCont\n                                         for(OrganizationalEntity recipient : recipients) {\n                                             if(recipient instanceof User) {\n                                                 doCallbackUserOperation(recipient.getId(), context);\n-                                            }\n-                                            if(recipient instanceof Group) {\n+                                            } else if (recipient instanceof Group) {\n                                                 doCallbackGroupOperation(recipient.getId(), context);\n+                                            } else if (recipient instanceof Email) {\n+                                                doCallbackEmailOperation(recipient.getId(), context);\n                                             }\n                                         }\n                                     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73"}, "originalPosition": 107}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/5f7eb7fe3141b9865279fbb81d4c68adb6dc9d73", "committedDate": "2020-06-25T09:32:23Z", "message": "[JBPM-9197] Allow the introduction of emails in Tasks notifications"}, "afterCommit": {"oid": "6bab2491564197fdf56d339a5513ed011bbc5b1a", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/6bab2491564197fdf56d339a5513ed011bbc5b1a", "committedDate": "2020-06-30T07:14:14Z", "message": "[JBPM-9197] Allow the introduction of emails in Tasks notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5ODkxMDY2", "url": "https://github.com/kiegroup/jbpm/pull/1684#pullrequestreview-439891066", "createdAt": "2020-06-30T10:40:02Z", "commit": {"oid": "6bab2491564197fdf56d339a5513ed011bbc5b1a"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6bab2491564197fdf56d339a5513ed011bbc5b1a", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/6bab2491564197fdf56d339a5513ed011bbc5b1a", "committedDate": "2020-06-30T07:14:14Z", "message": "[JBPM-9197] Allow the introduction of emails in Tasks notifications"}, "afterCommit": {"oid": "a703489a8c2328c905cc4ff85bef373a23723482", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/a703489a8c2328c905cc4ff85bef373a23723482", "committedDate": "2020-07-27T07:08:22Z", "message": "[JBPM-9197] Allow the introduction of emails in Tasks notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MDMyNTgx", "url": "https://github.com/kiegroup/jbpm/pull/1684#pullrequestreview-456032581", "createdAt": "2020-07-27T18:29:51Z", "commit": {"oid": "a703489a8c2328c905cc4ff85bef373a23723482"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NDQwNjUy", "url": "https://github.com/kiegroup/jbpm/pull/1684#pullrequestreview-456440652", "createdAt": "2020-07-28T09:03:17Z", "commit": {"oid": "a703489a8c2328c905cc4ff85bef373a23723482"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "646e821fd42c8881da2291d34ebc21b21f191e2f", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/646e821fd42c8881da2291d34ebc21b21f191e2f", "committedDate": "2020-07-31T06:58:42Z", "message": "[JBPM-9197] Allow the introduction of emails in Tasks notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a703489a8c2328c905cc4ff85bef373a23723482", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/a703489a8c2328c905cc4ff85bef373a23723482", "committedDate": "2020-07-27T07:08:22Z", "message": "[JBPM-9197] Allow the introduction of emails in Tasks notifications"}, "afterCommit": {"oid": "646e821fd42c8881da2291d34ebc21b21f191e2f", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/646e821fd42c8881da2291d34ebc21b21f191e2f", "committedDate": "2020-07-31T06:58:42Z", "message": "[JBPM-9197] Allow the introduction of emails in Tasks notifications"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 950, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}