{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1OTkzMjc1", "number": 1725, "title": "[JBPM-9277]  JMS Audit Data Replication in spring boot", "bodyText": "refactor task listeners and process listener to adapters\nfor data replication", "createdAt": "2020-08-11T09:44:55Z", "url": "https://github.com/kiegroup/jbpm/pull/1725", "merged": true, "mergeCommit": {"oid": "b2139803e0d80f65889143539028526061f80efd"}, "closed": true, "closedAt": "2020-08-26T14:45:51Z", "author": {"login": "elguardian"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc923sTABqjM2NDMxODY5ODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCBPNUAFqTQ3MzM5MjAzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0fbc54884e54c6317c8b62bf33202a63896a93de", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/0fbc54884e54c6317c8b62bf33202a63896a93de", "committedDate": "2020-08-11T09:42:17Z", "message": "[JBPM-9277]  JMS Audit Data Replication in spring boot\n\nrefactor task listeners and process listener to adapters\nfor data replication"}, "afterCommit": {"oid": "52eb3513827c78db0dbb0d54f0dce1ea6e1eb087", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/52eb3513827c78db0dbb0d54f0dce1ea6e1eb087", "committedDate": "2020-08-11T13:30:54Z", "message": "[JBPM-9277]  JMS Audit Data Replication in spring boot\n\nrefactor task listeners and process listener to adapters\nfor data replication"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "52eb3513827c78db0dbb0d54f0dce1ea6e1eb087", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/52eb3513827c78db0dbb0d54f0dce1ea6e1eb087", "committedDate": "2020-08-11T13:30:54Z", "message": "[JBPM-9277]  JMS Audit Data Replication in spring boot\n\nrefactor task listeners and process listener to adapters\nfor data replication"}, "afterCommit": {"oid": "7452ecd92a3e1698cb830a7bcc736749b7596d2b", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/7452ecd92a3e1698cb830a7bcc736749b7596d2b", "committedDate": "2020-08-12T10:31:59Z", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7452ecd92a3e1698cb830a7bcc736749b7596d2b", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/7452ecd92a3e1698cb830a7bcc736749b7596d2b", "committedDate": "2020-08-12T10:31:59Z", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot"}, "afterCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/623854f8d777fa6edbd54844d3a0ace8188f75cc", "committedDate": "2020-08-12T13:28:54Z", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/623854f8d777fa6edbd54844d3a0ace8188f75cc", "committedDate": "2020-08-12T13:28:54Z", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot"}, "afterCommit": {"oid": "658d5d20529b18dbf18bf9703e9056506562fc71", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/658d5d20529b18dbf18bf9703e9056506562fc71", "committedDate": "2020-08-14T14:59:44Z", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NTUzNTIx", "url": "https://github.com/kiegroup/jbpm/pull/1725#pullrequestreview-466553521", "createdAt": "2020-08-13T08:34:01Z", "commit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwODozNDowMlrOHABiDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwOToxNTowOFrOHADHOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc4NzE1MA==", "bodyText": "All entities to be public access modifier for the IDs field, but does it make sense to have them so? I mean, this id is autogenerated by the JPA provider.", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469787150", "createdAt": "2020-08-13T08:34:02Z", "author": {"login": "afalhambra"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/NodeInstanceLog.java", "diffHunk": "@@ -99,7 +99,7 @@ public long getId() {\n     \treturn id;\n     }\n     \n-    void setId(long id) {\n+    public void setId(long id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc4NzkxNA==", "bodyText": "All entities to be public access modifier for the IDs field, but does it make sense to have them so? I mean, this id is autogenerated by the JPA provider.", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469787914", "createdAt": "2020-08-13T08:35:20Z", "author": {"login": "afalhambra"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/ProcessInstanceLog.java", "diffHunk": "@@ -132,7 +132,7 @@ public long getId() {\n     \treturn id;\n     }\n     \n-    void setId(long id) {\n+    public void setId(long id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzI2OA==", "bodyText": "full package name not needed.", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469803268", "createdAt": "2020-08-13T08:59:16Z", "author": {"login": "afalhambra"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.audit;\n+\n+import org.drools.core.WorkingMemory;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.instance.impl.NodeInstanceImpl;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+\n+public abstract class AbstractAuditLoggerAdapter extends AbstractAuditLogger {\n+\n+    public static final String METADATA_PROCESSINTANCE_LOG = \"ProcessInstanceLog\";\n+    public static final String METADATA_NODEINSTANCE_LOG = \"NodeInstanceLog\";\n+    public static final String METADATA_VARIABLEINSTANCE_LOG = \"VariableInstanceLog\";\n+\n+    public AbstractAuditLoggerAdapter() {\n+\n+    }\n+    public AbstractAuditLoggerAdapter(WorkingMemory workingMemory) {\n+        super(workingMemory);\n+    }\n+\n+    public void setProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key, Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzM3Nw==", "bodyText": "same here", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469803377", "createdAt": "2020-08-13T08:59:26Z", "author": {"login": "afalhambra"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.audit;\n+\n+import org.drools.core.WorkingMemory;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.instance.impl.NodeInstanceImpl;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+\n+public abstract class AbstractAuditLoggerAdapter extends AbstractAuditLogger {\n+\n+    public static final String METADATA_PROCESSINTANCE_LOG = \"ProcessInstanceLog\";\n+    public static final String METADATA_NODEINSTANCE_LOG = \"NodeInstanceLog\";\n+    public static final String METADATA_VARIABLEINSTANCE_LOG = \"VariableInstanceLog\";\n+\n+    public AbstractAuditLoggerAdapter() {\n+\n+    }\n+    public AbstractAuditLoggerAdapter(WorkingMemory workingMemory) {\n+        super(workingMemory);\n+    }\n+\n+    public void setProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key, Object value) {\n+        ((ProcessInstanceImpl) pi).getMetaData().put(key, value);\n+    }\n+\n+    public Object getProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzQ5Ng==", "bodyText": "same here", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469803496", "createdAt": "2020-08-13T08:59:35Z", "author": {"login": "afalhambra"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.audit;\n+\n+import org.drools.core.WorkingMemory;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.instance.impl.NodeInstanceImpl;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+\n+public abstract class AbstractAuditLoggerAdapter extends AbstractAuditLogger {\n+\n+    public static final String METADATA_PROCESSINTANCE_LOG = \"ProcessInstanceLog\";\n+    public static final String METADATA_NODEINSTANCE_LOG = \"NodeInstanceLog\";\n+    public static final String METADATA_VARIABLEINSTANCE_LOG = \"VariableInstanceLog\";\n+\n+    public AbstractAuditLoggerAdapter() {\n+\n+    }\n+    public AbstractAuditLoggerAdapter(WorkingMemory workingMemory) {\n+        super(workingMemory);\n+    }\n+\n+    public void setProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key, Object value) {\n+        ((ProcessInstanceImpl) pi).getMetaData().put(key, value);\n+    }\n+\n+    public Object getProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key) {\n+        return ((ProcessInstanceImpl) pi).getMetaData().get(key);\n+    }\n+\n+    public void setNodeInstanceMetadata(org.kie.api.runtime.process.NodeInstance pi, String key, Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzU4Ng==", "bodyText": "same here", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469803586", "createdAt": "2020-08-13T08:59:44Z", "author": {"login": "afalhambra"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.audit;\n+\n+import org.drools.core.WorkingMemory;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.instance.impl.NodeInstanceImpl;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+\n+public abstract class AbstractAuditLoggerAdapter extends AbstractAuditLogger {\n+\n+    public static final String METADATA_PROCESSINTANCE_LOG = \"ProcessInstanceLog\";\n+    public static final String METADATA_NODEINSTANCE_LOG = \"NodeInstanceLog\";\n+    public static final String METADATA_VARIABLEINSTANCE_LOG = \"VariableInstanceLog\";\n+\n+    public AbstractAuditLoggerAdapter() {\n+\n+    }\n+    public AbstractAuditLoggerAdapter(WorkingMemory workingMemory) {\n+        super(workingMemory);\n+    }\n+\n+    public void setProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key, Object value) {\n+        ((ProcessInstanceImpl) pi).getMetaData().put(key, value);\n+    }\n+\n+    public Object getProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key) {\n+        return ((ProcessInstanceImpl) pi).getMetaData().get(key);\n+    }\n+\n+    public void setNodeInstanceMetadata(org.kie.api.runtime.process.NodeInstance pi, String key, Object value) {\n+        ((NodeInstanceImpl) pi).getMetaData().put(key, value);\n+    }\n+\n+    public Object getNodeInstanceMetadata(org.kie.api.runtime.process.NodeInstance pi, String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwNzAyOQ==", "bodyText": "This field is not used/referenced in any place of the code. Do we need it?", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469807029", "createdAt": "2020-08-13T09:05:41Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-audit/src/main/java/org/jbpm/services/task/audit/JPATaskLifeCycleEventListener.java", "diffHunk": "@@ -48,7 +48,11 @@\n  *\n  */\n public class JPATaskLifeCycleEventListener extends PersistableEventListener implements TaskLifeCycleEventListener {\n-    \n+\n+    public static final String METADATA_TASK_EVENT = \"TASK_EVENT\";\n+    public static final String METADATA_AUDIT_TASK = \"TASK_AUDIT_EVENT\";\n+    public static final String METADATA_INPUT_VAR_EVENT = \"TASK_INPUT_VAR_EVENT\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxMTU1Ng==", "bodyText": "Why changing access modifier to protected?", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469811556", "createdAt": "2020-08-13T09:12:48Z", "author": {"login": "afalhambra"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/JPAWorkingMemoryDbLogger.java", "diffHunk": "@@ -57,18 +56,19 @@\n  * Enables history log via JPA.\n  * \n  */\n-public class JPAWorkingMemoryDbLogger extends AbstractAuditLogger {\n+public class JPAWorkingMemoryDbLogger extends AbstractAuditLoggerAdapter {\n \n     private static final Logger logger = LoggerFactory.getLogger(JPAWorkingMemoryDbLogger.class);\n-    \n-    private static final String[] KNOWN_UT_JNDI_KEYS = new String[] {\"UserTransaction\", \"java:jboss/UserTransaction\", System.getProperty(\"jbpm.ut.jndi.lookup\")};\n-    \n+\n+    private static final String[] KNOWN_UT_JNDI_KEYS = new String[]{\"UserTransaction\", \"java:jboss/UserTransaction\", System.getProperty(\"jbpm.ut.jndi.lookup\")};\n+\n     private boolean isJTA = true;\n     private boolean sharedEM = false;\n-    \n+\n     private EntityManagerFactory emf;\n-    \n-    private ProcessIndexerManager indexManager = ProcessIndexerManager.get();\n+\n+    protected ProcessIndexerManager indexManager = ProcessIndexerManager.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxMjUxNQ==", "bodyText": "Same here, not sure why we need to change it to protected?", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469812515", "createdAt": "2020-08-13T09:14:22Z", "author": {"login": "afalhambra"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/JPAWorkingMemoryDbLogger.java", "diffHunk": "@@ -107,154 +107,124 @@ public JPAWorkingMemoryDbLogger(Environment env) {\n         internalSetIsJTA(env);\n     }\n \n-    private void internalSetIsJTA(Environment env) { \n+    protected void internalSetIsJTA(Environment env) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxMzA0OQ==", "bodyText": "Unnecessary unboxing.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        isJTA = bool.booleanValue();\n          \n          \n            \n                        isJTA = bool;", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469813049", "createdAt": "2020-08-13T09:15:08Z", "author": {"login": "afalhambra"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/JPAWorkingMemoryDbLogger.java", "diffHunk": "@@ -107,154 +107,124 @@ public JPAWorkingMemoryDbLogger(Environment env) {\n         internalSetIsJTA(env);\n     }\n \n-    private void internalSetIsJTA(Environment env) { \n+    protected void internalSetIsJTA(Environment env) {\n         Boolean bool = (Boolean) env.get(\"IS_JTA_TRANSACTION\");\n         if (bool != null) {\n-        \tisJTA = bool.booleanValue();\n+            isJTA = bool.booleanValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "658d5d20529b18dbf18bf9703e9056506562fc71", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/658d5d20529b18dbf18bf9703e9056506562fc71", "committedDate": "2020-08-14T14:59:44Z", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot"}, "afterCommit": {"oid": "c0da60e79722573d38b3a3ed85b14a566a05a17f", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/c0da60e79722573d38b3a3ed85b14a566a05a17f", "committedDate": "2020-08-19T10:54:38Z", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0da60e79722573d38b3a3ed85b14a566a05a17f", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/c0da60e79722573d38b3a3ed85b14a566a05a17f", "committedDate": "2020-08-19T10:54:38Z", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot"}, "afterCommit": {"oid": "54cb29d27eb38d932eff223752df799b506e8e36", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/54cb29d27eb38d932eff223752df799b506e8e36", "committedDate": "2020-08-20T09:14:09Z", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "54cb29d27eb38d932eff223752df799b506e8e36", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/54cb29d27eb38d932eff223752df799b506e8e36", "committedDate": "2020-08-20T09:14:09Z", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot"}, "afterCommit": {"oid": "718673cd6ac518d13680976ca6b0d7f7285335fb", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/718673cd6ac518d13680976ca6b0d7f7285335fb", "committedDate": "2020-08-20T09:34:01Z", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52877fb4a2a293e61eb9e11cf9b5783b00d4f8b0", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/52877fb4a2a293e61eb9e11cf9b5783b00d4f8b0", "committedDate": "2020-08-20T10:55:32Z", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "718673cd6ac518d13680976ca6b0d7f7285335fb", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/718673cd6ac518d13680976ca6b0d7f7285335fb", "committedDate": "2020-08-20T09:34:01Z", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot"}, "afterCommit": {"oid": "52877fb4a2a293e61eb9e11cf9b5783b00d4f8b0", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/52877fb4a2a293e61eb9e11cf9b5783b00d4f8b0", "committedDate": "2020-08-20T10:55:32Z", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMzkyMDMy", "url": "https://github.com/kiegroup/jbpm/pull/1725#pullrequestreview-473392032", "createdAt": "2020-08-24T11:51:36Z", "commit": {"oid": "52877fb4a2a293e61eb9e11cf9b5783b00d4f8b0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 991, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}