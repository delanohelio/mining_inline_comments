{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyODAwODg1", "number": 1641, "reviewThreads": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTowNTowNlrOD-Q09Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyMzo0MlrOEAAdwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjE0MDA1OnYy", "diffSide": "RIGHT", "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/impl/CancelNodeInstanceAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTowNTowN1rOGYQYMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOToxNToxOVrOGYr9hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4NzM0NQ==", "bodyText": "I think CancelNodeInstanceAction is used in multiple cases, boundary escalation and boundary error events, not sure I grasp the meaning of TIMED cancel type in this context?", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r428087345", "createdAt": "2020-05-20T15:05:07Z", "author": {"login": "krisv"}, "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/impl/CancelNodeInstanceAction.java", "diffHunk": "@@ -38,7 +40,7 @@ public void execute(ProcessContext context) throws Exception {\n \t\tWorkflowProcessInstance pi = context.getNodeInstance().getProcessInstance();\n \t\tNodeInstance nodeInstance = findNodeByUniqueId(pi.getNodeInstances(), attachedToNodeId);\n \t\tif (nodeInstance != null) {\n-\t\t    ((org.jbpm.workflow.instance.NodeInstance)nodeInstance).cancel();\n+            ((org.jbpm.workflow.instance.NodeInstance) nodeInstance).cancel(TIMED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ed260236a00b5597266ba9b542fe71b46bbe81b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzOTI2OQ==", "bodyText": "You are right. I can use SKIPPED vs OBSOLETE. OBSOLETE means the task has no meaning anymore as the group it belonged is already completted. SKIPPED would mean that another route has been taking.", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r428539269", "createdAt": "2020-05-21T09:15:19Z", "author": {"login": "elguardian"}, "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/impl/CancelNodeInstanceAction.java", "diffHunk": "@@ -38,7 +40,7 @@ public void execute(ProcessContext context) throws Exception {\n \t\tWorkflowProcessInstance pi = context.getNodeInstance().getProcessInstance();\n \t\tNodeInstance nodeInstance = findNodeByUniqueId(pi.getNodeInstances(), attachedToNodeId);\n \t\tif (nodeInstance != null) {\n-\t\t    ((org.jbpm.workflow.instance.NodeInstance)nodeInstance).cancel();\n+            ((org.jbpm.workflow.instance.NodeInstance) nodeInstance).cancel(TIMED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4NzM0NQ=="}, "originalCommit": {"oid": "8ed260236a00b5597266ba9b542fe71b46bbe81b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjE0NzI4OnYy", "diffSide": "RIGHT", "path": "jbpm-flow/src/main/java/org/jbpm/ruleflow/instance/RuleFlowProcessInstance.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTowNjozOVrOGYQczg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOToxNjo0N1rOGYsAYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4ODUyNg==", "bodyText": "What's the point of passing wfp here, isn't this always this?", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r428088526", "createdAt": "2020-05-20T15:06:39Z", "author": {"login": "krisv"}, "path": "jbpm-flow/src/main/java/org/jbpm/ruleflow/instance/RuleFlowProcessInstance.java", "diffHunk": "@@ -46,4 +48,32 @@ public void internalStart(String trigger) {\n     \t    .forEach(austoStartNode -> signalEvent(austoStartNode.getName(), null));\n     }\n \n+\n+    private void trigger(RuleFlowProcessInstance wfp, String nodeId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ed260236a00b5597266ba9b542fe71b46bbe81b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0MDAwMQ==", "bodyText": "sure", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r428540001", "createdAt": "2020-05-21T09:16:47Z", "author": {"login": "elguardian"}, "path": "jbpm-flow/src/main/java/org/jbpm/ruleflow/instance/RuleFlowProcessInstance.java", "diffHunk": "@@ -46,4 +48,32 @@ public void internalStart(String trigger) {\n     \t    .forEach(austoStartNode -> signalEvent(austoStartNode.getName(), null));\n     }\n \n+\n+    private void trigger(RuleFlowProcessInstance wfp, String nodeId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4ODUyNg=="}, "originalCommit": {"oid": "8ed260236a00b5597266ba9b542fe71b46bbe81b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjE1ODE5OnYy", "diffSide": "LEFT", "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/NodeInstanceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTowODo1N1rOGYQjuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOToxODozOVrOGYsDlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5MDI5Nw==", "bodyText": "Node instances are stored as part of the binary state using protobuf, wouldn't we have to keep the aborted field to keep backwards compatibility?  Would we need to generate the protobuf files?  From what I understand this field is just used to pass information around (to the listener generating the logs), so I guess it probably isn't going to be necessary to be serialized (actually aborted node instances should not be serialized), but unless this aborted field was somehow excluded in protobuf marshalling, and/or cancelType will be too?", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r428090297", "createdAt": "2020-05-20T15:08:57Z", "author": {"login": "krisv"}, "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/NodeInstanceImpl.java", "diffHunk": "@@ -78,12 +82,12 @@\n     protected int slaCompliance = ProcessInstance.SLA_NA;\n     protected Date slaDueDate;\n     protected long slaTimerId = -1;\n-    protected boolean aborted = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ed260236a00b5597266ba9b542fe71b46bbe81b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0MDgyMg==", "bodyText": "made it transient.", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r428540822", "createdAt": "2020-05-21T09:18:39Z", "author": {"login": "elguardian"}, "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/NodeInstanceImpl.java", "diffHunk": "@@ -78,12 +82,12 @@\n     protected int slaCompliance = ProcessInstance.SLA_NA;\n     protected Date slaDueDate;\n     protected long slaTimerId = -1;\n-    protected boolean aborted = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5MDI5Nw=="}, "originalCommit": {"oid": "8ed260236a00b5597266ba9b542fe71b46bbe81b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjE4MzY4OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/RuntimeDataServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNToxNDo0NVrOGYQ0bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOToyMzozMlrOGYsM1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5NDU3Mg==", "bodyText": "It seems most of the logic around storying actual object was removed for more review, should this (and similar references in this PR to WithValueObject) still be here?", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r428094572", "createdAt": "2020-05-20T15:14:45Z", "author": {"login": "krisv"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/RuntimeDataServiceImpl.java", "diffHunk": "@@ -761,6 +761,13 @@ public NodeInstanceDesc getNodeInstanceForWorkItem(Long workItemId) {\n         return variablesState;\n     }\n \n+    @Override\n+    public Collection<VariableDesc> getVariablesCurrentStateWithValueObject(Long processInstanceId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ed260236a00b5597266ba9b542fe71b46bbe81b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0MzE5MQ==", "bodyText": "removed. left behind by mistake.", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r428543191", "createdAt": "2020-05-21T09:23:32Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/RuntimeDataServiceImpl.java", "diffHunk": "@@ -761,6 +761,13 @@ public NodeInstanceDesc getNodeInstanceForWorkItem(Long workItemId) {\n         return variablesState;\n     }\n \n+    @Override\n+    public Collection<VariableDesc> getVariablesCurrentStateWithValueObject(Long processInstanceId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5NDU3Mg=="}, "originalCommit": {"oid": "8ed260236a00b5597266ba9b542fe71b46bbe81b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTc2OTQ0OnYy", "diffSide": "RIGHT", "path": "jbpm-human-task/jbpm-human-task-workitems/src/test/java/org/jbpm/services/task/test/TestStatefulKnowledgeSession.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDowMzo0OVrOGY0Cnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoxMzoxM1rOGaTXWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3MTY0Nw==", "bodyText": "Please remove auto-generated TODO comment for consistency across the class methods.", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r428671647", "createdAt": "2020-05-21T14:03:49Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-workitems/src/test/java/org/jbpm/services/task/test/TestStatefulKnowledgeSession.java", "diffHunk": "@@ -312,4 +312,11 @@ public void delete(FactHandle fh, FactHandle.State fhState) {\n     public void destroy() {\n         dispose();        \n     }\n+\n+    @Override\n+    public ProcessInstance startProcessFromNodeIds(String processId, Map<String, Object> params, String... nodeId) {\n+        // TODO Auto-generated method stub", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzMzQzMg==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430233432", "createdAt": "2020-05-26T08:13:13Z", "author": {"login": "elguardian"}, "path": "jbpm-human-task/jbpm-human-task-workitems/src/test/java/org/jbpm/services/task/test/TestStatefulKnowledgeSession.java", "diffHunk": "@@ -312,4 +312,11 @@ public void delete(FactHandle fh, FactHandle.State fhState) {\n     public void destroy() {\n         dispose();        \n     }\n+\n+    @Override\n+    public ProcessInstance startProcessFromNodeIds(String processId, Map<String, Object> params, String... nodeId) {\n+        // TODO Auto-generated method stub", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3MTY0Nw=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTg1NzMzOnYy", "diffSide": "RIGHT", "path": "jbpm-flow/src/main/java/org/jbpm/ruleflow/instance/RuleFlowProcessInstance.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDoyNzoxM1rOGY062g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoxMzo0NlrOGaTYhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4NjA0Mg==", "bodyText": "Same as some others comments, it should be nodeIds to not lead to any confusion.", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r428686042", "createdAt": "2020-05-21T14:27:13Z", "author": {"login": "afalhambra"}, "path": "jbpm-flow/src/main/java/org/jbpm/ruleflow/instance/RuleFlowProcessInstance.java", "diffHunk": "@@ -46,4 +48,31 @@ public void internalStart(String trigger) {\n     \t    .forEach(austoStartNode -> signalEvent(austoStartNode.getName(), null));\n     }\n \n+\n+    public void startProcessFromNodeIds(String[] nodeInstancesIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzMzczNA==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430233734", "createdAt": "2020-05-26T08:13:46Z", "author": {"login": "elguardian"}, "path": "jbpm-flow/src/main/java/org/jbpm/ruleflow/instance/RuleFlowProcessInstance.java", "diffHunk": "@@ -46,4 +48,31 @@ public void internalStart(String trigger) {\n     \t    .forEach(austoStartNode -> signalEvent(austoStartNode.getName(), null));\n     }\n \n+\n+    public void startProcessFromNodeIds(String[] nodeInstancesIds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4NjA0Mg=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTkwNjgzOnYy", "diffSide": "RIGHT", "path": "jbpm-flow/src/main/java/org/jbpm/workflow/core/impl/NodeContainerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDo0MTowMVrOGY1bsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoxNTo1NlrOGaTdbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5NDQ1MQ==", "bodyText": "You could use functional style expression like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return node.isPresent() ? node.get() : null;\n          \n          \n            \n                    return node.orElse(null);", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r428694451", "createdAt": "2020-05-21T14:41:01Z", "author": {"login": "afalhambra"}, "path": "jbpm-flow/src/main/java/org/jbpm/workflow/core/impl/NodeContainerImpl.java", "diffHunk": "@@ -63,6 +64,12 @@ public Node getNode(final long id) {\n         return node; \n     }\n \n+    @Override\n+    public Node getNodeByUniqueId(String nodeId) {\n+        Optional<Node> node = this.nodes.values().stream().filter(e -> e.getNodeUniqueId().equals(nodeId)).findFirst();\n+        return node.isPresent() ? node.get() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzNDk5MQ==", "bodyText": "ok", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430234991", "createdAt": "2020-05-26T08:15:56Z", "author": {"login": "elguardian"}, "path": "jbpm-flow/src/main/java/org/jbpm/workflow/core/impl/NodeContainerImpl.java", "diffHunk": "@@ -63,6 +64,12 @@ public Node getNode(final long id) {\n         return node; \n     }\n \n+    @Override\n+    public Node getNodeByUniqueId(String nodeId) {\n+        Optional<Node> node = this.nodes.values().stream().filter(e -> e.getNodeUniqueId().equals(nodeId)).findFirst();\n+        return node.isPresent() ? node.get() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5NDQ1MQ=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTk2NDk3OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDo1NDoxNlrOGY2Anw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDo1NDoxNlrOGY2Anw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwMzkwMw==", "bodyText": "2020", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r428703903", "createdAt": "2020-05-21T14:54:16Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjM2Mzc2OnYy", "diffSide": "RIGHT", "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/NodeInstanceImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzozNDo0MlrOGZNh5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjoxMjowNlrOGZ_JJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4OTI1Mg==", "bodyText": "Previous version of this class setup this.aborted = true; when calling cancel() method. However this is no longer the case in the new changes. Shouldn't we set also this.aborted = true; when calling cancel() method? Otherwise aborted is never updated in the code (new method setAborted(boolean aborted) is not called in the code).\nThe reason to keep aborted field is to keep backward compatibility only? if so, why you want to mark cancelType as transient", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429089252", "createdAt": "2020-05-22T07:34:42Z", "author": {"login": "afalhambra"}, "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/NodeInstanceImpl.java", "diffHunk": "@@ -149,9 +155,13 @@ public Node getNode() {\n     public boolean isInversionOfControl() {\n         return false;\n     }\n+\n+    public final void cancel() {\n+        cancel(ABORTED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxODA5MQ==", "bodyText": "Field aborted and cancelType aren't necessary to be persisted long-term, but more short-term for data passing.  Probably aborted could have been transient as well, but for backwards compability we probably can't change that now.  So I guess the plan is to just keep the field, nothing more.  I think we have tests that are run as part of QE suite that test portability of process instance binary state across versions, can we make sure these are run to make sure we don't break backwards compatibility with this?", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429218091", "createdAt": "2020-05-22T12:31:01Z", "author": {"login": "krisv"}, "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/NodeInstanceImpl.java", "diffHunk": "@@ -149,9 +155,13 @@ public Node getNode() {\n     public boolean isInversionOfControl() {\n         return false;\n     }\n+\n+    public final void cancel() {\n+        cancel(ABORTED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4OTI1Mg=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2OTkzOA==", "bodyText": "Yes, there are tests as part of a test suite in jbpm-runtime-manager module. However these are related to a migration between different bpm processes. So I'm wondering whether this will be enough or we should add a specific test case for backward compatibility. @krisv, @elguardian wdyt?\nhttps://github.com/kiegroup/jbpm/blob/master/jbpm-runtime-manager/src/test/java/org/jbpm/runtime/manager/impl/migration/MigrationManagerTest.java", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429869938", "createdAt": "2020-05-25T10:50:23Z", "author": {"login": "afalhambra"}, "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/NodeInstanceImpl.java", "diffHunk": "@@ -149,9 +155,13 @@ public Node getNode() {\n     public boolean isInversionOfControl() {\n         return false;\n     }\n+\n+    public final void cancel() {\n+        cancel(ABORTED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4OTI1Mg=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMjExNg==", "bodyText": "This aborted field would be persisted with any node instance, so I think any of those migration tests would be able to detect migration issues caused by this.  There should be sufficient other unit tests for simply testing whether aborting a node instance works well (using cancelType).", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429902116", "createdAt": "2020-05-25T12:12:06Z", "author": {"login": "krisv"}, "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/NodeInstanceImpl.java", "diffHunk": "@@ -149,9 +155,13 @@ public Node getNode() {\n     public boolean isInversionOfControl() {\n         return false;\n     }\n+\n+    public final void cancel() {\n+        cancel(ABORTED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4OTI1Mg=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjYxMzg1OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTowMjoyNVrOGZP-qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyNDo0MlrOGaTwog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyOTM4NA==", "bodyText": "Writing down here some comments about these bpmn files:\n\nName attribute in the processes should be consistent and meaningful. Some of them have \"test2\" and another has \"test\".\nPackage should be consistent and meaningful across them. Some have \"com.myspace.sample\" and others have \"com.myspace.test\"", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429129384", "createdAt": "2020-05-22T09:02:25Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzOTkwNg==", "bodyText": "not relevant", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430239906", "createdAt": "2020-05-26T08:24:42Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyOTM4NA=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjYyNjE3OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-services-api/src/build/revapi-config.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTowNjo0NlrOGZQGWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODo0ODozMVrOGaUopQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzMTM1Mg==", "bodyText": "There is no such methods. Please remove them.", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429131352", "createdAt": "2020-05-22T09:06:46Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-services-api/src/build/revapi-config.json", "diffHunk": "@@ -71,6 +71,42 @@\n                     \"methodName\": \"getExtraData\",\n                     \"elementKind\": \"method\",\n                     \"justification\": \"new extra data for process variables / case variables\"\n+                },\n+                {\n+                    \"code\": \"java.method.addedToInterface\",\n+                    \"new\": \"method java.util.Collection<org.jbpm.services.api.model.VariableDesc> org.jbpm.services.api.RuntimeDataService::getVariablesCurrentStateWithValueObject(java.lang.Long)\",\n+                    \"package\": \"org.jbpm.services.api\",\n+                    \"classSimpleName\": \"RuntimeDataService\",\n+                    \"methodName\": \"getVariablesCurrentStateWithValueObject\",\n+                    \"elementKind\": \"method\",\n+                    \"justification\": \"get the orginal object value for audit purposes\"\n+                },\n+                {\n+                    \"code\": \"java.method.addedToInterface\",\n+                    \"new\": \"method java.lang.Object org.jbpm.services.api.model.VariableDesc::getNewValueObject()\",\n+                    \"package\": \"org.jbpm.services.api.model\",\n+                    \"classSimpleName\": \"VariableDesc\",\n+                    \"methodName\": \"getNewValueObject\",\n+                    \"elementKind\": \"method\",\n+                    \"justification\": \"added for retrieving the original object value and not the string representation\"\n+                },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1NDI0NQ==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430254245", "createdAt": "2020-05-26T08:48:31Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-services-api/src/build/revapi-config.json", "diffHunk": "@@ -71,6 +71,42 @@\n                     \"methodName\": \"getExtraData\",\n                     \"elementKind\": \"method\",\n                     \"justification\": \"new extra data for process variables / case variables\"\n+                },\n+                {\n+                    \"code\": \"java.method.addedToInterface\",\n+                    \"new\": \"method java.util.Collection<org.jbpm.services.api.model.VariableDesc> org.jbpm.services.api.RuntimeDataService::getVariablesCurrentStateWithValueObject(java.lang.Long)\",\n+                    \"package\": \"org.jbpm.services.api\",\n+                    \"classSimpleName\": \"RuntimeDataService\",\n+                    \"methodName\": \"getVariablesCurrentStateWithValueObject\",\n+                    \"elementKind\": \"method\",\n+                    \"justification\": \"get the orginal object value for audit purposes\"\n+                },\n+                {\n+                    \"code\": \"java.method.addedToInterface\",\n+                    \"new\": \"method java.lang.Object org.jbpm.services.api.model.VariableDesc::getNewValueObject()\",\n+                    \"package\": \"org.jbpm.services.api.model\",\n+                    \"classSimpleName\": \"VariableDesc\",\n+                    \"methodName\": \"getNewValueObject\",\n+                    \"elementKind\": \"method\",\n+                    \"justification\": \"added for retrieving the original object value and not the string representation\"\n+                },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzMTM1Mg=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjY0NjY1OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOToxMzo1NlrOGZQTUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODo0OToxNFrOGaUqTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzNDY3NQ==", "bodyText": "nodeIds are not declared in the javadoc section", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429134675", "createdAt": "2020-05-22T09:13:56Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -81,12 +81,39 @@\n     Long startProcess(String deploymentId, String processId, CorrelationKey correlationKey, Map<String, Object> params);\n \n     /**\n-\t * Aborts the specified process\n-\t * \n-\t * @param processInstanceId process instance's unique identifier\n-\t * @throws DeploymentNotFoundException in case deployment unit was not found\n-\t * @throws ProcessInstanceNotFoundException in case process instance with given id was not found\n-\t */\n+     * Starts a process with the values supplied from the current nodes\n+     * \n+     * @param deploymentId deployment information for the process's kjar\n+     * @param processId The process's identifier\n+     * @param params process variables\n+     * @return process instance identifier\n+     * @throws RuntimeException in case of encountered errors\n+     * @throws DeploymentNotFoundException in case deployment with given deployment id does not exist\n+     * @throws DeploymentNotActiveException in case deployment with given deployment id is not active\n+     */\n+    Long startProcessFromNodeIds(String deploymentId, String processId, Map<String, Object> params, String... nodeIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1NDY3MA==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430254670", "createdAt": "2020-05-26T08:49:14Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -81,12 +81,39 @@\n     Long startProcess(String deploymentId, String processId, CorrelationKey correlationKey, Map<String, Object> params);\n \n     /**\n-\t * Aborts the specified process\n-\t * \n-\t * @param processInstanceId process instance's unique identifier\n-\t * @throws DeploymentNotFoundException in case deployment unit was not found\n-\t * @throws ProcessInstanceNotFoundException in case process instance with given id was not found\n-\t */\n+     * Starts a process with the values supplied from the current nodes\n+     * \n+     * @param deploymentId deployment information for the process's kjar\n+     * @param processId The process's identifier\n+     * @param params process variables\n+     * @return process instance identifier\n+     * @throws RuntimeException in case of encountered errors\n+     * @throws DeploymentNotFoundException in case deployment with given deployment id does not exist\n+     * @throws DeploymentNotActiveException in case deployment with given deployment id is not active\n+     */\n+    Long startProcessFromNodeIds(String deploymentId, String processId, Map<String, Object> params, String... nodeIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzNDY3NQ=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjY0ODQwOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOToxNDoyOVrOGZQUbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODo1MDoxOVrOGaUs3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzNDk1Ng==", "bodyText": "same as above", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429134956", "createdAt": "2020-05-22T09:14:29Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -81,12 +81,39 @@\n     Long startProcess(String deploymentId, String processId, CorrelationKey correlationKey, Map<String, Object> params);\n \n     /**\n-\t * Aborts the specified process\n-\t * \n-\t * @param processInstanceId process instance's unique identifier\n-\t * @throws DeploymentNotFoundException in case deployment unit was not found\n-\t * @throws ProcessInstanceNotFoundException in case process instance with given id was not found\n-\t */\n+     * Starts a process with the values supplied from the current nodes\n+     * \n+     * @param deploymentId deployment information for the process's kjar\n+     * @param processId The process's identifier\n+     * @param params process variables\n+     * @return process instance identifier\n+     * @throws RuntimeException in case of encountered errors\n+     * @throws DeploymentNotFoundException in case deployment with given deployment id does not exist\n+     * @throws DeploymentNotActiveException in case deployment with given deployment id is not active\n+     */\n+    Long startProcessFromNodeIds(String deploymentId, String processId, Map<String, Object> params, String... nodeIds);\n+\n+    /**\n+     * Starts a process with the values supplied from the current nodes\n+     * \n+     * @param deploymentId deployment information for the process's kjar\n+     * @param processId The process's identifier\n+     * @param key correlation key (must be unique)\n+     * @param params process variables\n+     * @return process instance identifier\n+     * @throws RuntimeException in case of encountered errors\n+     * @throws DeploymentNotFoundException in case deployment with given deployment id does not exist\n+     * @throws DeploymentNotActiveException in case deployment with given deployment id is not active\n+     */\n+    Long startProcessFromNodeIds(String deploymentId, String processId, CorrelationKey key, Map<String, Object> params, String... nodeIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1NTMyNw==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430255327", "createdAt": "2020-05-26T08:50:19Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -81,12 +81,39 @@\n     Long startProcess(String deploymentId, String processId, CorrelationKey correlationKey, Map<String, Object> params);\n \n     /**\n-\t * Aborts the specified process\n-\t * \n-\t * @param processInstanceId process instance's unique identifier\n-\t * @throws DeploymentNotFoundException in case deployment unit was not found\n-\t * @throws ProcessInstanceNotFoundException in case process instance with given id was not found\n-\t */\n+     * Starts a process with the values supplied from the current nodes\n+     * \n+     * @param deploymentId deployment information for the process's kjar\n+     * @param processId The process's identifier\n+     * @param params process variables\n+     * @return process instance identifier\n+     * @throws RuntimeException in case of encountered errors\n+     * @throws DeploymentNotFoundException in case deployment with given deployment id does not exist\n+     * @throws DeploymentNotActiveException in case deployment with given deployment id is not active\n+     */\n+    Long startProcessFromNodeIds(String deploymentId, String processId, Map<String, Object> params, String... nodeIds);\n+\n+    /**\n+     * Starts a process with the values supplied from the current nodes\n+     * \n+     * @param deploymentId deployment information for the process's kjar\n+     * @param processId The process's identifier\n+     * @param key correlation key (must be unique)\n+     * @param params process variables\n+     * @return process instance identifier\n+     * @throws RuntimeException in case of encountered errors\n+     * @throws DeploymentNotFoundException in case deployment with given deployment id does not exist\n+     * @throws DeploymentNotActiveException in case deployment with given deployment id is not active\n+     */\n+    Long startProcessFromNodeIds(String deploymentId, String processId, CorrelationKey key, Map<String, Object> params, String... nodeIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzNDk1Ng=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjY3MzE4OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOToyMjoxNlrOGZQjpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOToyMjoxNlrOGZQjpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzODg1NA==", "bodyText": "Exception is never thrown within this method.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testStartProcessFromNodeIdsWithTimer() throws Exception {\n          \n          \n            \n                public void testStartProcessFromNodeIdsWithTimer() {", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429138854", "createdAt": "2020-05-22T09:22:16Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIdsWithTimer() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjY5OTA0OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTozMDoyNlrOGZQzYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyNDo1OVrOGaTxXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0Mjg4Mw==", "bodyText": "there are only 2 kjar to be deployed here so I would rename the following:\n\nreleaseId3 to releaseId2\nkJar3 to kJar2\npom3 to pom2\ntarget/kmodule2\n\nQuestion here is: why do we need to deploy same processes but with a different version?", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429142883", "createdAt": "2020-05-22T09:30:26Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0MDA5NA==", "bodyText": "ok", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430240094", "createdAt": "2020-05-26T08:24:59Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0Mjg4Mw=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjczMzE1OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo0MjozOVrOGZRJMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODo0NzoyOVrOGaUmQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0ODQ2NQ==", "bodyText": "I would change it to the below to make it more readable\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Thread.sleep(3000);\n          \n          \n            \n                    TimeUnit.SECONDS.sleep(3);", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429148465", "createdAt": "2020-05-22T09:42:39Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIdsWithTimer() throws Exception {\n+        final String processId = \"simple.restartWithTimer\";\n+        assertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+        assertNotNull(processService);\n+\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), processId, singletonMap(\"var_a\", 3));\n+        assertNotNull(processInstanceId);\n+\n+        Thread.sleep(3000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1MzYzMg==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430253632", "createdAt": "2020-05-26T08:47:29Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIdsWithTimer() throws Exception {\n+        final String processId = \"simple.restartWithTimer\";\n+        assertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+        assertNotNull(processService);\n+\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), processId, singletonMap(\"var_a\", 3));\n+        assertNotNull(processInstanceId);\n+\n+        Thread.sleep(3000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0ODQ2NQ=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mjc0Mjk2OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo0NjowMFrOGZRPWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo0NjowMFrOGZRPWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1MDA0MQ==", "bodyText": "I would use method reference as per below\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n          \n          \n            \n                    String[] nodeIds = logs.stream().map(NodeInstanceDesc::getNodeId).toArray(String[]::new);", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429150041", "createdAt": "2020-05-22T09:46:00Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mjc0NTczOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo0NzowM1rOGZRRLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODo0NTo0NlrOGaUiKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1MDUxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n          \n          \n            \n                    nodeIds = logs.stream().map(NodeInstanceDesc::getNodeId).toArray(String[]::new);", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429150510", "createdAt": "2020-05-22T09:47:03Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1MjU4Ng==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430252586", "createdAt": "2020-05-26T08:45:46Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1MDUxMA=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mjc2MDQ5OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo1MjowN1rOGZRaRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTowMTozM1rOGaVIJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1MjgzOQ==", "bodyText": "EntryType.ABORTED is a new enum entry so I would add an assert to check logs.size, so we ensure correct data is fetched having this new state.", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429152839", "createdAt": "2020-05-22T09:52:07Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI2MjMwOQ==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430262309", "createdAt": "2020-05-26T09:01:33Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1MjgzOQ=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mjk5MTQ2OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMToyMjoyOFrOGZTtQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyOTozMlrOGaT74A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5MDQ2Ng==", "bodyText": "same as before", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429190466", "createdAt": "2020-05-22T11:22:28Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0Mjc4NA==", "bodyText": "the goal of the test is to see if the starts node instance work. not really checking the task works or not.", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430242784", "createdAt": "2020-05-26T08:29:32Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5MDQ2Ng=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzAwMTAyOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMToyNjowMFrOGZTy9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODo0NjozN1rOGaUkKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5MTkyNg==", "bodyText": "Would be worth to have an assert here checking this task name is number 2?", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429191926", "createdAt": "2020-05-22T11:26:00Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1MzA5Ng==", "bodyText": "not the goal of the test.", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430253096", "createdAt": "2020-05-26T08:46:37Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5MTkyNg=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzAwMTQzOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMToyNjowOVrOGZTzMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyOToyNlrOGaT7mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5MTk4Nw==", "bodyText": "Would be worth to have an assert here checking this task name is number 1?", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429191987", "createdAt": "2020-05-22T11:26:09Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0MjcxMw==", "bodyText": "the goal of the test is to see if the starts node instance work. not really checking the task works or not.", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430242713", "createdAt": "2020-05-26T08:29:26Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5MTk4Nw=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzAyMDY5OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTozMzo1OFrOGZT_UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODo0NjoyNVrOGaUjkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NTA4OA==", "bodyText": "Why not to pass an emptyList in the params argument here?\nso by doing that we can later on check add an additional assert checkingthat the process variable var_a is actually set already to 3 (it's been restored properly from previous state)? wdyt?", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429195088", "createdAt": "2020-05-22T11:33:58Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1Mjk0NA==", "bodyText": "there is no previous state.", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430252944", "createdAt": "2020-05-26T08:46:25Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NTA4OA=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzAyNDUyOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTozNTozMFrOGZUBqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyMjozNVrOGaTsEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NTY4OA==", "bodyText": "rename to skipped\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Collection<NodeInstanceDesc> timed = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.SKIPPED, new QueryContext(0, 0));\n          \n          \n            \n                    Collection<NodeInstanceDesc> skipped = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.SKIPPED, new QueryContext(0, 0));", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429195688", "createdAt": "2020-05-22T11:35:30Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIdsWithTimer() throws Exception {\n+        final String processId = \"simple.restartWithTimer\";\n+        assertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+        assertNotNull(processService);\n+\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), processId, singletonMap(\"var_a\", 3));\n+        assertNotNull(processInstanceId);\n+\n+        Thread.sleep(3000);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> timed = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.SKIPPED, new QueryContext(0, 0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzODczNw==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430238737", "createdAt": "2020-05-26T08:22:35Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIdsWithTimer() throws Exception {\n+        final String processId = \"simple.restartWithTimer\";\n+        assertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+        assertNotNull(processService);\n+\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), processId, singletonMap(\"var_a\", 3));\n+        assertNotNull(processInstanceId);\n+\n+        Thread.sleep(3000);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> timed = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.SKIPPED, new QueryContext(0, 0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NTY4OA=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzAyNjY3OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTozNjoyOVrOGZUDFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoxNzozNFrOGaThIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NjA1Mg==", "bodyText": "I'd use method reference here as well.", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429196052", "createdAt": "2020-05-22T11:36:29Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIdsWithTimer() throws Exception {\n+        final String processId = \"simple.restartWithTimer\";\n+        assertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+        assertNotNull(processService);\n+\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), processId, singletonMap(\"var_a\", 3));\n+        assertNotNull(processInstanceId);\n+\n+        Thread.sleep(3000);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> timed = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.SKIPPED, new QueryContext(0, 0));\n+        assertThat(timed.size(), is(1));\n+        Collection<NodeInstanceDesc> aborted = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        assertThat(aborted.size(), is(1));\n+        String[] nodeIds = aborted.stream().map(e -> e.getNodeId()).toArray(String[]::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzNTkzNw==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430235937", "createdAt": "2020-05-26T08:17:34Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/StartProcessFromArbitraryNodesServiceImplTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.RuntimeDataService.EntryType;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.NodeInstanceDesc;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.query.QueryContext;\n+import org.kie.api.task.model.Task;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class StartProcessFromArbitraryNodesServiceImplTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StartProcessFromArbitraryNodesServiceImplTest.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<DeploymentUnit>();\n+\n+    @Before\n+    public void prepare() {\n+    \tconfigureServices();\n+    \tlogger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<String>();\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2\");\n+        processes.add(\"repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom);\n+            fs.write(getPom(releaseId).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+\t\tKieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        ReleaseId releaseId3 = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, \"1.1.0\");\n+\n+        InternalKieModule kJar3 = createKieJar(ks, releaseId3, processes);\n+        File pom3 = new File(\"target/kmodule3\", \"pom.xml\");\n+        pom3.getParentFile().mkdirs();\n+        try {\n+            FileOutputStream fs = new FileOutputStream(pom3);\n+            fs.write(getPom(releaseId3).getBytes());\n+            fs.close();\n+        } catch (Exception e) {\n+\n+        }\n+        repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId3, kJar3, pom3);\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+            \ttry {\n+                deploymentService.undeploy(unit);\n+            \t} catch (Exception e) {\n+            \t\t// do nothing in case of some failed tests to avoid next test to fail as well\n+            \t}\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIds() {\n+    \tassertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+    \tassertNotNull(processService);\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3));\n+    \tassertNotNull(processInstanceId);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        String[] nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        logs = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        nodeIds = logs.stream().map(e -> e.getNodeId()).toArray(String[]::new);\n+        processInstanceId = processService.startProcessFromNodeIds(deploymentUnit.getIdentifier(), \"restart.simple\", singletonMap(\"var_a\", 3), nodeIds);\n+        runtimeDataService.getTasksByProcessInstanceId(processInstanceId).forEach(e -> {\n+            this.userTaskService.start(e, \"john\");\n+            this.userTaskService.complete(e, \"john\", emptyMap());\n+        });\n+\n+        ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+        assertNull(pi);\n+    }\n+\n+    @Test\n+    public void testStartProcessFromNodeIdsWithTimer() throws Exception {\n+        final String processId = \"simple.restartWithTimer\";\n+        assertNotNull(deploymentService);\n+\n+        KModuleDeploymentUnit deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+        assertNotNull(processService);\n+\n+\n+        Long processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), processId, singletonMap(\"var_a\", 3));\n+        assertNotNull(processInstanceId);\n+\n+        Thread.sleep(3000);\n+\n+        processService.abortProcessInstance(processInstanceId);\n+\n+        Collection<NodeInstanceDesc> timed = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.SKIPPED, new QueryContext(0, 0));\n+        assertThat(timed.size(), is(1));\n+        Collection<NodeInstanceDesc> aborted = runtimeDataService.getProcessInstanceFullHistoryByType(processInstanceId, EntryType.ABORTED, new QueryContext(0, 0));\n+        assertThat(aborted.size(), is(1));\n+        String[] nodeIds = aborted.stream().map(e -> e.getNodeId()).toArray(String[]::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NjA1Mg=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzA4MDcyOnYy", "diffSide": "RIGHT", "path": "jbpm-test-util/src/main/java/org/jbpm/test/util/DatabaseScript.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo1ODowNlrOGZUkqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoxODozM1rOGaTjUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNDY1MQ==", "bodyText": "from and to can be null.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"Script \" + this.name + \" from version \" + from + \" to \" + to;\n          \n          \n            \n                    return \"Script \" + this.name + (from != null ? \" from version \" + from : \"\") + (to != null ? \" to \" + to : \"\");", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429204651", "createdAt": "2020-05-22T11:58:06Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/util/DatabaseScript.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.test.util;\n+\n+import java.io.File;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\n+\n+public class DatabaseScript implements Comparable<DatabaseScript> {\n+\n+    private String name;\n+    private Version from;\n+    private Version to;\n+    private File script;\n+\n+    public DatabaseScript(File script) {\n+        this(script.getName());\n+        this.script = script;\n+    }\n+\n+    public DatabaseScript(String value) {\n+        Pattern pattern = Pattern.compile(\"(.*)-(\\\\d+\\\\.\\\\d+)-to-(\\\\d+\\\\.\\\\d+).sql\");\n+        Matcher matcher = pattern.matcher(value);\n+        if (matcher.matches() && matcher.groupCount() == 3) {\n+            this.name = matcher.group(1);\n+            this.from = new Version(matcher.group(2));\n+            this.to = new Version(matcher.group(3));\n+        } else {\n+            this.name = value;\n+        }\n+    }\n+\n+    public File getScript() {\n+        return script;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Version getTo() {\n+        return to;\n+    }\n+\n+    public Version getFrom() {\n+        return from;\n+    }\n+\n+    @Override\n+    public int compareTo(DatabaseScript o) {\n+        if (this.name.equals(o.name)) {\n+            if (from == null || o.from == null) {\n+                return this.name.compareTo(o.name);\n+            }\n+            return from.compareTo(o.from);\n+        } else {\n+            return this.name.compareTo(o.name);\n+        }\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj instanceof DatabaseScript) {\n+            return this.compareTo((DatabaseScript) obj) == 0;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Script \" + this.name + \" from version \" + from + \" to \" + to;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzNjQ5Ng==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430236496", "createdAt": "2020-05-26T08:18:33Z", "author": {"login": "elguardian"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/util/DatabaseScript.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.test.util;\n+\n+import java.io.File;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\n+\n+public class DatabaseScript implements Comparable<DatabaseScript> {\n+\n+    private String name;\n+    private Version from;\n+    private Version to;\n+    private File script;\n+\n+    public DatabaseScript(File script) {\n+        this(script.getName());\n+        this.script = script;\n+    }\n+\n+    public DatabaseScript(String value) {\n+        Pattern pattern = Pattern.compile(\"(.*)-(\\\\d+\\\\.\\\\d+)-to-(\\\\d+\\\\.\\\\d+).sql\");\n+        Matcher matcher = pattern.matcher(value);\n+        if (matcher.matches() && matcher.groupCount() == 3) {\n+            this.name = matcher.group(1);\n+            this.from = new Version(matcher.group(2));\n+            this.to = new Version(matcher.group(3));\n+        } else {\n+            this.name = value;\n+        }\n+    }\n+\n+    public File getScript() {\n+        return script;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Version getTo() {\n+        return to;\n+    }\n+\n+    public Version getFrom() {\n+        return from;\n+    }\n+\n+    @Override\n+    public int compareTo(DatabaseScript o) {\n+        if (this.name.equals(o.name)) {\n+            if (from == null || o.from == null) {\n+                return this.name.compareTo(o.name);\n+            }\n+            return from.compareTo(o.from);\n+        } else {\n+            return this.name.compareTo(o.name);\n+        }\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj instanceof DatabaseScript) {\n+            return this.compareTo((DatabaseScript) obj) == 0;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Script \" + this.name + \" from version \" + from + \" to \" + to;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNDY1MQ=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzEwMzQyOnYy", "diffSide": "RIGHT", "path": "jbpm-test-util/src/main/java/org/jbpm/test/util/Version.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjowNzoyMVrOGZUzCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyMDoyNVrOGaTnXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwODMzMA==", "bodyText": "hasCode method should be implemented, but up to you as this is a test class.", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429208330", "createdAt": "2020-05-22T12:07:21Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/util/Version.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.test.util;\n+\n+public class Version implements Comparable<Version> {\n+\n+    Integer major;\n+    Integer minor;\n+\n+    public Version(String version) {\n+        String[] parts = version.split(\"\\\\.\");\n+        this.major = Integer.parseInt(parts[0]);\n+        this.minor = Integer.parseInt(parts[1]);\n+    }\n+\n+\n+    public int getMajor() {\n+        return major;\n+    }\n+\n+    public int getMinor() {\n+        return minor;\n+    }\n+\n+    @Override\n+    public int compareTo(Version other) {\n+        if (major.equals(other.major)) {\n+            return minor.compareTo(other.minor);\n+        }\n+        return major.compareTo(other.major);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzNzUzNQ==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430237535", "createdAt": "2020-05-26T08:20:25Z", "author": {"login": "elguardian"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/util/Version.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.test.util;\n+\n+public class Version implements Comparable<Version> {\n+\n+    Integer major;\n+    Integer minor;\n+\n+    public Version(String version) {\n+        String[] parts = version.split(\"\\\\.\");\n+        this.major = Integer.parseInt(parts[0]);\n+        this.minor = Integer.parseInt(parts[1]);\n+    }\n+\n+\n+    public int getMajor() {\n+        return major;\n+    }\n+\n+    public int getMinor() {\n+        return minor;\n+    }\n+\n+    @Override\n+    public int compareTo(Version other) {\n+        if (major.equals(other.major)) {\n+            return minor.compareTo(other.minor);\n+        }\n+        return major.compareTo(other.major);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwODMzMA=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzEwMzk1OnYy", "diffSide": "RIGHT", "path": "jbpm-test-util/src/main/java/org/jbpm/test/util/DatabaseScript.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjowNzozM1rOGZUzXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoxOTo0N1rOGaTmBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwODQxMg==", "bodyText": "hasCode method should be implemented, but up to you as this is a test class.", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r429208412", "createdAt": "2020-05-22T12:07:33Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/util/DatabaseScript.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.test.util;\n+\n+import java.io.File;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\n+\n+public class DatabaseScript implements Comparable<DatabaseScript> {\n+\n+    private String name;\n+    private Version from;\n+    private Version to;\n+    private File script;\n+\n+    public DatabaseScript(File script) {\n+        this(script.getName());\n+        this.script = script;\n+    }\n+\n+    public DatabaseScript(String value) {\n+        Pattern pattern = Pattern.compile(\"(.*)-(\\\\d+\\\\.\\\\d+)-to-(\\\\d+\\\\.\\\\d+).sql\");\n+        Matcher matcher = pattern.matcher(value);\n+        if (matcher.matches() && matcher.groupCount() == 3) {\n+            this.name = matcher.group(1);\n+            this.from = new Version(matcher.group(2));\n+            this.to = new Version(matcher.group(3));\n+        } else {\n+            this.name = value;\n+        }\n+    }\n+\n+    public File getScript() {\n+        return script;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Version getTo() {\n+        return to;\n+    }\n+\n+    public Version getFrom() {\n+        return from;\n+    }\n+\n+    @Override\n+    public int compareTo(DatabaseScript o) {\n+        if (this.name.equals(o.name)) {\n+            if (from == null || o.from == null) {\n+                return this.name.compareTo(o.name);\n+            }\n+            return from.compareTo(o.from);\n+        } else {\n+            return this.name.compareTo(o.name);\n+        }\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzNzE4OQ==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430237189", "createdAt": "2020-05-26T08:19:47Z", "author": {"login": "elguardian"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/util/DatabaseScript.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.test.util;\n+\n+import java.io.File;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\n+\n+public class DatabaseScript implements Comparable<DatabaseScript> {\n+\n+    private String name;\n+    private Version from;\n+    private Version to;\n+    private File script;\n+\n+    public DatabaseScript(File script) {\n+        this(script.getName());\n+        this.script = script;\n+    }\n+\n+    public DatabaseScript(String value) {\n+        Pattern pattern = Pattern.compile(\"(.*)-(\\\\d+\\\\.\\\\d+)-to-(\\\\d+\\\\.\\\\d+).sql\");\n+        Matcher matcher = pattern.matcher(value);\n+        if (matcher.matches() && matcher.groupCount() == 3) {\n+            this.name = matcher.group(1);\n+            this.from = new Version(matcher.group(2));\n+            this.to = new Version(matcher.group(3));\n+        } else {\n+            this.name = value;\n+        }\n+    }\n+\n+    public File getScript() {\n+        return script;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Version getTo() {\n+        return to;\n+    }\n+\n+    public Version getFrom() {\n+        return from;\n+    }\n+\n+    @Override\n+    public int compareTo(DatabaseScript o) {\n+        if (this.name.equals(o.name)) {\n+            if (from == null || o.from == null) {\n+                return this.name.compareTo(o.name);\n+            }\n+            return from.compareTo(o.from);\n+        } else {\n+            return this.name.compareTo(o.name);\n+        }\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwODQxMg=="}, "originalCommit": {"oid": "d6599557a1c12a1003d4e312daa5a0da4e784448"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTE4NzUwOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/BPMN2-SimpleRestartTest.bpmn2", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDoyNToxMVrOGagyQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzowMzowOFrOGa79xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1MzMxNQ==", "bodyText": "this id is repeated, so if the bpmn is opened by Eclipse plugin, it complains about it.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  <bpmn2:potentialOwner id=\"_sjFE3NZxEeWhSJ3J-UY8fA\">\n          \n          \n            \n                  <bpmn2:potentialOwner id=\"_sjFE3NZxEeWhSJ3J-UY8fB\">\n          \n      \n    \n    \n  \n\nSame in next 2 lines", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430453315", "createdAt": "2020-05-26T14:25:11Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/BPMN2-SimpleRestartTest.bpmn2", "diffHunk": "@@ -0,0 +1,351 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.omg.org/bpmn20\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:bpsim=\"http://www.bpsim.org/schemas/1.0\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:drools=\"http://www.jboss.org/drools\" id=\"_UVLIkIrNEeqCP7d-9hkcyw\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd http://www.jboss.org/drools drools.xsd http://www.bpsim.org/schemas/1.0 bpsim.xsd http://www.omg.org/spec/DD/20100524/DC DC.xsd http://www.omg.org/spec/DD/20100524/DI DI.xsd \" exporter=\"jBPM Process Modeler\" exporterVersion=\"2.0\" targetNamespace=\"http://www.omg.org/bpmn20\">\n+  <bpmn2:itemDefinition id=\"_var_aItem\" structureRef=\"Integer\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_inInputXItem\" structureRef=\"Integer\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_outOutputXItem\" structureRef=\"Integer\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_inInputXItem\" structureRef=\"Integer\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_outOutputXItem\" structureRef=\"Integer\"/>\n+  <bpmn2:process id=\"restart.simple\" drools:packageName=\"com.myspace.sample\" drools:version=\"1.0\" drools:adHoc=\"false\" name=\"test2\" isExecutable=\"true\">\n+    <bpmn2:property id=\"var_a\" itemSubjectRef=\"_var_aItem\" name=\"var_a\"/>\n+    <bpmn2:sequenceFlow id=\"_588380E3-1A84-46C0-B5B2-CCCF8DA9D012\" sourceRef=\"_58E8825E-A410-4DD6-8C96-8E074BCAA574\" targetRef=\"_A1826972-90C6-4C66-A622-67F3EA5BD034\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_2463681D-0935-4356-A364-846444A58C53\" sourceRef=\"_50FE3D26-B167-4A73-BDB9-C55F2A98AE38\" targetRef=\"_58E8825E-A410-4DD6-8C96-8E074BCAA574\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_1BA95F3E-6E46-4D0F-B414-59D266BFD038\" sourceRef=\"_EBF43ED4-3F23-471E-8356-ACA9F0D246DC\" targetRef=\"_50FE3D26-B167-4A73-BDB9-C55F2A98AE38\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_A22B57AD-3E0F-4E23-A7DD-D0B5403719AC\" sourceRef=\"_D9CE06C2-E636-4E42-A596-FD24335C54E0\" targetRef=\"_EBF43ED4-3F23-471E-8356-ACA9F0D246DC\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_E05B86B1-9C06-4BA8-BCCF-8C2A720D41BD\" sourceRef=\"_A1826972-90C6-4C66-A622-67F3EA5BD034\" targetRef=\"_99974AD8-A406-4155-93A6-A09AE518DDB5\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:scriptTask id=\"_58E8825E-A410-4DD6-8C96-8E074BCAA574\" name=\"Second Script\" scriptFormat=\"http://www.java.com/java\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Second Script]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_2463681D-0935-4356-A364-846444A58C53</bpmn2:incoming>\n+      <bpmn2:outgoing>_588380E3-1A84-46C0-B5B2-CCCF8DA9D012</bpmn2:outgoing>\n+      <bpmn2:script><![CDATA[System.out.println(\"second script\");]]></bpmn2:script>\n+    </bpmn2:scriptTask>\n+    <bpmn2:userTask id=\"_A1826972-90C6-4C66-A622-67F3EA5BD034\" name=\"Second Human Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Second Human Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_588380E3-1A84-46C0-B5B2-CCCF8DA9D012</bpmn2:incoming>\n+      <bpmn2:outgoing>_E05B86B1-9C06-4BA8-BCCF-8C2A720D41BD</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_UVLvoIrNEeqCP7d-9hkcyw\">\n+        <bpmn2:dataInput id=\"_A1826972-90C6-4C66-A622-67F3EA5BD034_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_inInputX\" drools:dtype=\"Integer\" itemSubjectRef=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_inInputXItem\" name=\"ht2_in\"/>\n+        <bpmn2:dataInput id=\"_A1826972-90C6-4C66-A622-67F3EA5BD034_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:dataOutput id=\"_A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_outOutputX\" drools:dtype=\"Integer\" itemSubjectRef=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_outOutputXItem\" name=\"ht2_out\"/>\n+        <bpmn2:inputSet id=\"_UVLvoYrNEeqCP7d-9hkcyw\">\n+          <bpmn2:dataInputRefs>_A1826972-90C6-4C66-A622-67F3EA5BD034_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_inInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_A1826972-90C6-4C66-A622-67F3EA5BD034_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+        <bpmn2:outputSet id=\"_UVLvoorNEeqCP7d-9hkcyw\">\n+          <bpmn2:dataOutputRefs>_A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_outOutputX</bpmn2:dataOutputRefs>\n+        </bpmn2:outputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_UVLvo4rNEeqCP7d-9hkcyw\">\n+        <bpmn2:targetRef>_A1826972-90C6-4C66-A622-67F3EA5BD034_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_UVLvpIrNEeqCP7d-9hkcyw\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvpYrNEeqCP7d-9hkcyw\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvporNEeqCP7d-9hkcyw\">_A1826972-90C6-4C66-A622-67F3EA5BD034_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_UVLvp4rNEeqCP7d-9hkcyw\">\n+        <bpmn2:sourceRef>var_a</bpmn2:sourceRef>\n+        <bpmn2:targetRef>_A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_inInputX</bpmn2:targetRef>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_UVLvqIrNEeqCP7d-9hkcyw\">\n+        <bpmn2:targetRef>_A1826972-90C6-4C66-A622-67F3EA5BD034_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_UVLvqYrNEeqCP7d-9hkcyw\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvqorNEeqCP7d-9hkcyw\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvq4rNEeqCP7d-9hkcyw\">_A1826972-90C6-4C66-A622-67F3EA5BD034_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataOutputAssociation id=\"_UVLvrIrNEeqCP7d-9hkcyw\">\n+        <bpmn2:sourceRef>_A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_outOutputX</bpmn2:sourceRef>\n+        <bpmn2:targetRef>var_a</bpmn2:targetRef>\n+      </bpmn2:dataOutputAssociation>\n+      <bpmn2:potentialOwner id=\"_sjFE3NZxEeWhSJ3J-UY8fA\">\n+        <bpmn2:resourceAssignmentExpression id=\"_sjFE3dZxEeWhSJ3J-UY8fA\">\n+          <bpmn2:formalExpression id=\"_sjFE3tZxEeWhSJ3J-UY8fA\">john</bpmn2:formalExpression>\n+        </bpmn2:resourceAssignmentExpression>\n+      </bpmn2:potentialOwner>\n+    </bpmn2:userTask>\n+    <bpmn2:userTask id=\"_50FE3D26-B167-4A73-BDB9-C55F2A98AE38\" name=\"Human Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Human Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_1BA95F3E-6E46-4D0F-B414-59D266BFD038</bpmn2:incoming>\n+      <bpmn2:outgoing>_2463681D-0935-4356-A364-846444A58C53</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_UVLvrYrNEeqCP7d-9hkcyw\">\n+        <bpmn2:dataInput id=\"_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_inInputX\" drools:dtype=\"Integer\" itemSubjectRef=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_inInputXItem\" name=\"ht_in\"/>\n+        <bpmn2:dataInput id=\"_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:dataOutput id=\"_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_outOutputX\" drools:dtype=\"Integer\" itemSubjectRef=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_outOutputXItem\" name=\"ht_out\"/>\n+        <bpmn2:inputSet id=\"_UVLvrorNEeqCP7d-9hkcyw\">\n+          <bpmn2:dataInputRefs>_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_inInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+        <bpmn2:outputSet id=\"_UVLvr4rNEeqCP7d-9hkcyw\">\n+          <bpmn2:dataOutputRefs>_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_outOutputX</bpmn2:dataOutputRefs>\n+        </bpmn2:outputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_UVLvsIrNEeqCP7d-9hkcyw\">\n+        <bpmn2:targetRef>_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_UVLvsYrNEeqCP7d-9hkcyw\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvsorNEeqCP7d-9hkcyw\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvs4rNEeqCP7d-9hkcyw\">_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_UVLvtIrNEeqCP7d-9hkcyw\">\n+        <bpmn2:sourceRef>var_a</bpmn2:sourceRef>\n+        <bpmn2:targetRef>_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_inInputX</bpmn2:targetRef>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_UVLvtYrNEeqCP7d-9hkcyw\">\n+        <bpmn2:targetRef>_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_UVLvtorNEeqCP7d-9hkcyw\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvt4rNEeqCP7d-9hkcyw\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvuIrNEeqCP7d-9hkcyw\">_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataOutputAssociation id=\"_UVLvuYrNEeqCP7d-9hkcyw\">\n+        <bpmn2:sourceRef>_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_outOutputX</bpmn2:sourceRef>\n+        <bpmn2:targetRef>var_a</bpmn2:targetRef>\n+      </bpmn2:dataOutputAssociation>\n+      <bpmn2:potentialOwner id=\"_sjFE3NZxEeWhSJ3J-UY8fA\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d45c0f871c0a06ace5a78abbe9d9b79a44810ec"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5ODYyOQ==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430898629", "createdAt": "2020-05-27T07:03:08Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/BPMN2-SimpleRestartTest.bpmn2", "diffHunk": "@@ -0,0 +1,351 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.omg.org/bpmn20\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:bpsim=\"http://www.bpsim.org/schemas/1.0\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:drools=\"http://www.jboss.org/drools\" id=\"_UVLIkIrNEeqCP7d-9hkcyw\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd http://www.jboss.org/drools drools.xsd http://www.bpsim.org/schemas/1.0 bpsim.xsd http://www.omg.org/spec/DD/20100524/DC DC.xsd http://www.omg.org/spec/DD/20100524/DI DI.xsd \" exporter=\"jBPM Process Modeler\" exporterVersion=\"2.0\" targetNamespace=\"http://www.omg.org/bpmn20\">\n+  <bpmn2:itemDefinition id=\"_var_aItem\" structureRef=\"Integer\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_inInputXItem\" structureRef=\"Integer\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_outOutputXItem\" structureRef=\"Integer\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_inInputXItem\" structureRef=\"Integer\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_outOutputXItem\" structureRef=\"Integer\"/>\n+  <bpmn2:process id=\"restart.simple\" drools:packageName=\"com.myspace.sample\" drools:version=\"1.0\" drools:adHoc=\"false\" name=\"test2\" isExecutable=\"true\">\n+    <bpmn2:property id=\"var_a\" itemSubjectRef=\"_var_aItem\" name=\"var_a\"/>\n+    <bpmn2:sequenceFlow id=\"_588380E3-1A84-46C0-B5B2-CCCF8DA9D012\" sourceRef=\"_58E8825E-A410-4DD6-8C96-8E074BCAA574\" targetRef=\"_A1826972-90C6-4C66-A622-67F3EA5BD034\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_2463681D-0935-4356-A364-846444A58C53\" sourceRef=\"_50FE3D26-B167-4A73-BDB9-C55F2A98AE38\" targetRef=\"_58E8825E-A410-4DD6-8C96-8E074BCAA574\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_1BA95F3E-6E46-4D0F-B414-59D266BFD038\" sourceRef=\"_EBF43ED4-3F23-471E-8356-ACA9F0D246DC\" targetRef=\"_50FE3D26-B167-4A73-BDB9-C55F2A98AE38\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_A22B57AD-3E0F-4E23-A7DD-D0B5403719AC\" sourceRef=\"_D9CE06C2-E636-4E42-A596-FD24335C54E0\" targetRef=\"_EBF43ED4-3F23-471E-8356-ACA9F0D246DC\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_E05B86B1-9C06-4BA8-BCCF-8C2A720D41BD\" sourceRef=\"_A1826972-90C6-4C66-A622-67F3EA5BD034\" targetRef=\"_99974AD8-A406-4155-93A6-A09AE518DDB5\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:scriptTask id=\"_58E8825E-A410-4DD6-8C96-8E074BCAA574\" name=\"Second Script\" scriptFormat=\"http://www.java.com/java\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Second Script]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_2463681D-0935-4356-A364-846444A58C53</bpmn2:incoming>\n+      <bpmn2:outgoing>_588380E3-1A84-46C0-B5B2-CCCF8DA9D012</bpmn2:outgoing>\n+      <bpmn2:script><![CDATA[System.out.println(\"second script\");]]></bpmn2:script>\n+    </bpmn2:scriptTask>\n+    <bpmn2:userTask id=\"_A1826972-90C6-4C66-A622-67F3EA5BD034\" name=\"Second Human Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Second Human Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_588380E3-1A84-46C0-B5B2-CCCF8DA9D012</bpmn2:incoming>\n+      <bpmn2:outgoing>_E05B86B1-9C06-4BA8-BCCF-8C2A720D41BD</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_UVLvoIrNEeqCP7d-9hkcyw\">\n+        <bpmn2:dataInput id=\"_A1826972-90C6-4C66-A622-67F3EA5BD034_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_inInputX\" drools:dtype=\"Integer\" itemSubjectRef=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_inInputXItem\" name=\"ht2_in\"/>\n+        <bpmn2:dataInput id=\"_A1826972-90C6-4C66-A622-67F3EA5BD034_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:dataOutput id=\"_A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_outOutputX\" drools:dtype=\"Integer\" itemSubjectRef=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_outOutputXItem\" name=\"ht2_out\"/>\n+        <bpmn2:inputSet id=\"_UVLvoYrNEeqCP7d-9hkcyw\">\n+          <bpmn2:dataInputRefs>_A1826972-90C6-4C66-A622-67F3EA5BD034_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_inInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_A1826972-90C6-4C66-A622-67F3EA5BD034_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+        <bpmn2:outputSet id=\"_UVLvoorNEeqCP7d-9hkcyw\">\n+          <bpmn2:dataOutputRefs>_A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_outOutputX</bpmn2:dataOutputRefs>\n+        </bpmn2:outputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_UVLvo4rNEeqCP7d-9hkcyw\">\n+        <bpmn2:targetRef>_A1826972-90C6-4C66-A622-67F3EA5BD034_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_UVLvpIrNEeqCP7d-9hkcyw\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvpYrNEeqCP7d-9hkcyw\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvporNEeqCP7d-9hkcyw\">_A1826972-90C6-4C66-A622-67F3EA5BD034_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_UVLvp4rNEeqCP7d-9hkcyw\">\n+        <bpmn2:sourceRef>var_a</bpmn2:sourceRef>\n+        <bpmn2:targetRef>_A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_inInputX</bpmn2:targetRef>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_UVLvqIrNEeqCP7d-9hkcyw\">\n+        <bpmn2:targetRef>_A1826972-90C6-4C66-A622-67F3EA5BD034_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_UVLvqYrNEeqCP7d-9hkcyw\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvqorNEeqCP7d-9hkcyw\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvq4rNEeqCP7d-9hkcyw\">_A1826972-90C6-4C66-A622-67F3EA5BD034_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataOutputAssociation id=\"_UVLvrIrNEeqCP7d-9hkcyw\">\n+        <bpmn2:sourceRef>_A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_outOutputX</bpmn2:sourceRef>\n+        <bpmn2:targetRef>var_a</bpmn2:targetRef>\n+      </bpmn2:dataOutputAssociation>\n+      <bpmn2:potentialOwner id=\"_sjFE3NZxEeWhSJ3J-UY8fA\">\n+        <bpmn2:resourceAssignmentExpression id=\"_sjFE3dZxEeWhSJ3J-UY8fA\">\n+          <bpmn2:formalExpression id=\"_sjFE3tZxEeWhSJ3J-UY8fA\">john</bpmn2:formalExpression>\n+        </bpmn2:resourceAssignmentExpression>\n+      </bpmn2:potentialOwner>\n+    </bpmn2:userTask>\n+    <bpmn2:userTask id=\"_50FE3D26-B167-4A73-BDB9-C55F2A98AE38\" name=\"Human Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Human Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_1BA95F3E-6E46-4D0F-B414-59D266BFD038</bpmn2:incoming>\n+      <bpmn2:outgoing>_2463681D-0935-4356-A364-846444A58C53</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_UVLvrYrNEeqCP7d-9hkcyw\">\n+        <bpmn2:dataInput id=\"_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_inInputX\" drools:dtype=\"Integer\" itemSubjectRef=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_inInputXItem\" name=\"ht_in\"/>\n+        <bpmn2:dataInput id=\"_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:dataOutput id=\"_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_outOutputX\" drools:dtype=\"Integer\" itemSubjectRef=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_outOutputXItem\" name=\"ht_out\"/>\n+        <bpmn2:inputSet id=\"_UVLvrorNEeqCP7d-9hkcyw\">\n+          <bpmn2:dataInputRefs>_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_inInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+        <bpmn2:outputSet id=\"_UVLvr4rNEeqCP7d-9hkcyw\">\n+          <bpmn2:dataOutputRefs>_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_outOutputX</bpmn2:dataOutputRefs>\n+        </bpmn2:outputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_UVLvsIrNEeqCP7d-9hkcyw\">\n+        <bpmn2:targetRef>_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_UVLvsYrNEeqCP7d-9hkcyw\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvsorNEeqCP7d-9hkcyw\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvs4rNEeqCP7d-9hkcyw\">_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_UVLvtIrNEeqCP7d-9hkcyw\">\n+        <bpmn2:sourceRef>var_a</bpmn2:sourceRef>\n+        <bpmn2:targetRef>_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_inInputX</bpmn2:targetRef>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_UVLvtYrNEeqCP7d-9hkcyw\">\n+        <bpmn2:targetRef>_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_UVLvtorNEeqCP7d-9hkcyw\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvt4rNEeqCP7d-9hkcyw\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvuIrNEeqCP7d-9hkcyw\">_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataOutputAssociation id=\"_UVLvuYrNEeqCP7d-9hkcyw\">\n+        <bpmn2:sourceRef>_50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_outOutputX</bpmn2:sourceRef>\n+        <bpmn2:targetRef>var_a</bpmn2:targetRef>\n+      </bpmn2:dataOutputAssociation>\n+      <bpmn2:potentialOwner id=\"_sjFE3NZxEeWhSJ3J-UY8fA\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1MzMxNQ=="}, "originalCommit": {"oid": "1d45c0f871c0a06ace5a78abbe9d9b79a44810ec"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTIzNTUyOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDozNToxNFrOGahQmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzowODowN1rOGa8GFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ2MTA4MQ==", "bodyText": "Same here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    <bpmn2:resourceAssignmentExpression id=\"_XV3Ii5N3Eeq_IOLSelAS2A\">\n          \n          \n            \n                    <bpmn2:resourceAssignmentExpression id=\"_XV3Ii5N3Eeq_IOLSelAS2A_2\">", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430461081", "createdAt": "2020-05-26T14:35:14Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2", "diffHunk": "@@ -0,0 +1,248 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.omg.org/bpmn20\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:bpsim=\"http://www.bpsim.org/schemas/1.0\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:drools=\"http://www.jboss.org/drools\" id=\"_aai9UJN-Eeq_IOLSelAS2A\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd http://www.jboss.org/drools drools.xsd http://www.bpsim.org/schemas/1.0 bpsim.xsd http://www.omg.org/spec/DD/20100524/DC DC.xsd http://www.omg.org/spec/DD/20100524/DI DI.xsd \" exporter=\"jBPM Process Modeler\" exporterVersion=\"2.0\" targetNamespace=\"http://www.omg.org/bpmn20\">\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:process id=\"restart.simpleObsolete\" drools:packageName=\"com.myspace.test\" drools:version=\"1.0\" drools:adHoc=\"false\" name=\"test2\" isExecutable=\"true\">\n+    <bpmn2:sequenceFlow id=\"_D8CD8010-992B-447D-80D8-89E4B843A1C0\" sourceRef=\"_C51912B8-BAE2-4841-BD98-D00567082BAC\" targetRef=\"_71B8E54A-CB9D-431D-9BD3-5C23C5371F40\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_3A02094A-DCAE-495A-8F89-246756403E63\" sourceRef=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\" targetRef=\"_C51912B8-BAE2-4841-BD98-D00567082BAC\"/>\n+    <bpmn2:sequenceFlow id=\"_6E39142B-945E-43C2-B0B2-D27ED36D26A5\" sourceRef=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\" targetRef=\"_2B0C2902-D947-43BB-8F03-1615434F65FF\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_85B212F7-1001-4FD7-9402-3814BCD42438\" sourceRef=\"_58709295-E375-48ED-B835-BBCBD6C4F752\" targetRef=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\"/>\n+    <bpmn2:sequenceFlow id=\"_0B564073-D481-4768-A89E-90C19FD41459\" sourceRef=\"_2B0C2902-D947-43BB-8F03-1615434F65FF\" targetRef=\"_8AD18C56-2A0F-4A1B-AFAD-4BD505044EDD\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:userTask id=\"_C51912B8-BAE2-4841-BD98-D00567082BAC\" name=\"Second Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Second Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_3A02094A-DCAE-495A-8F89-246756403E63</bpmn2:incoming>\n+      <bpmn2:outgoing>_D8CD8010-992B-447D-80D8-89E4B843A1C0</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_aajkYJN-Eeq_IOLSelAS2A\">\n+        <bpmn2:dataInput id=\"_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:inputSet id=\"_aajkYZN-Eeq_IOLSelAS2A\">\n+          <bpmn2:dataInputRefs>_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_aajkYpN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkY5N-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkZJN-Eeq_IOLSelAS2A\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkZZN-Eeq_IOLSelAS2A\">_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_aajkZpN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkZ5N-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkaJN-Eeq_IOLSelAS2A\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkaZN-Eeq_IOLSelAS2A\">_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:potentialOwner id=\"a0002c84-9cf9-4194-ad87-e38db9d982cf\">\n+        <bpmn2:resourceAssignmentExpression id=\"_XV3Ii5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:formalExpression id=\"_XV3IjJN3Eeq_IOLSelAS2A\">katy</bpmn2:formalExpression>\n+        </bpmn2:resourceAssignmentExpression>\n+      </bpmn2:potentialOwner>\n+    </bpmn2:userTask>\n+    <bpmn2:userTask id=\"_2B0C2902-D947-43BB-8F03-1615434F65FF\" name=\"First Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[First Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_6E39142B-945E-43C2-B0B2-D27ED36D26A5</bpmn2:incoming>\n+      <bpmn2:outgoing>_0B564073-D481-4768-A89E-90C19FD41459</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_aajkapN-Eeq_IOLSelAS2A\">\n+        <bpmn2:dataInput id=\"_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:inputSet id=\"_aajka5N-Eeq_IOLSelAS2A\">\n+          <bpmn2:dataInputRefs>_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_aajkbJN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkbZN-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkbpN-Eeq_IOLSelAS2A\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkb5N-Eeq_IOLSelAS2A\">_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_aajkcJN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkcZN-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkcpN-Eeq_IOLSelAS2A\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkc5N-Eeq_IOLSelAS2A\">_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:potentialOwner id=\"a0002c84-9cf9-4194-ad87-e38db9d982cf\">\n+        <bpmn2:resourceAssignmentExpression id=\"_XV3Ii5N3Eeq_IOLSelAS2A\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d45c0f871c0a06ace5a78abbe9d9b79a44810ec"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMDc1OQ==", "bodyText": "nack", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430900759", "createdAt": "2020-05-27T07:08:07Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2", "diffHunk": "@@ -0,0 +1,248 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.omg.org/bpmn20\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:bpsim=\"http://www.bpsim.org/schemas/1.0\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:drools=\"http://www.jboss.org/drools\" id=\"_aai9UJN-Eeq_IOLSelAS2A\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd http://www.jboss.org/drools drools.xsd http://www.bpsim.org/schemas/1.0 bpsim.xsd http://www.omg.org/spec/DD/20100524/DC DC.xsd http://www.omg.org/spec/DD/20100524/DI DI.xsd \" exporter=\"jBPM Process Modeler\" exporterVersion=\"2.0\" targetNamespace=\"http://www.omg.org/bpmn20\">\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:process id=\"restart.simpleObsolete\" drools:packageName=\"com.myspace.test\" drools:version=\"1.0\" drools:adHoc=\"false\" name=\"test2\" isExecutable=\"true\">\n+    <bpmn2:sequenceFlow id=\"_D8CD8010-992B-447D-80D8-89E4B843A1C0\" sourceRef=\"_C51912B8-BAE2-4841-BD98-D00567082BAC\" targetRef=\"_71B8E54A-CB9D-431D-9BD3-5C23C5371F40\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_3A02094A-DCAE-495A-8F89-246756403E63\" sourceRef=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\" targetRef=\"_C51912B8-BAE2-4841-BD98-D00567082BAC\"/>\n+    <bpmn2:sequenceFlow id=\"_6E39142B-945E-43C2-B0B2-D27ED36D26A5\" sourceRef=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\" targetRef=\"_2B0C2902-D947-43BB-8F03-1615434F65FF\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_85B212F7-1001-4FD7-9402-3814BCD42438\" sourceRef=\"_58709295-E375-48ED-B835-BBCBD6C4F752\" targetRef=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\"/>\n+    <bpmn2:sequenceFlow id=\"_0B564073-D481-4768-A89E-90C19FD41459\" sourceRef=\"_2B0C2902-D947-43BB-8F03-1615434F65FF\" targetRef=\"_8AD18C56-2A0F-4A1B-AFAD-4BD505044EDD\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:userTask id=\"_C51912B8-BAE2-4841-BD98-D00567082BAC\" name=\"Second Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Second Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_3A02094A-DCAE-495A-8F89-246756403E63</bpmn2:incoming>\n+      <bpmn2:outgoing>_D8CD8010-992B-447D-80D8-89E4B843A1C0</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_aajkYJN-Eeq_IOLSelAS2A\">\n+        <bpmn2:dataInput id=\"_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:inputSet id=\"_aajkYZN-Eeq_IOLSelAS2A\">\n+          <bpmn2:dataInputRefs>_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_aajkYpN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkY5N-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkZJN-Eeq_IOLSelAS2A\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkZZN-Eeq_IOLSelAS2A\">_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_aajkZpN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkZ5N-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkaJN-Eeq_IOLSelAS2A\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkaZN-Eeq_IOLSelAS2A\">_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:potentialOwner id=\"a0002c84-9cf9-4194-ad87-e38db9d982cf\">\n+        <bpmn2:resourceAssignmentExpression id=\"_XV3Ii5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:formalExpression id=\"_XV3IjJN3Eeq_IOLSelAS2A\">katy</bpmn2:formalExpression>\n+        </bpmn2:resourceAssignmentExpression>\n+      </bpmn2:potentialOwner>\n+    </bpmn2:userTask>\n+    <bpmn2:userTask id=\"_2B0C2902-D947-43BB-8F03-1615434F65FF\" name=\"First Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[First Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_6E39142B-945E-43C2-B0B2-D27ED36D26A5</bpmn2:incoming>\n+      <bpmn2:outgoing>_0B564073-D481-4768-A89E-90C19FD41459</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_aajkapN-Eeq_IOLSelAS2A\">\n+        <bpmn2:dataInput id=\"_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:inputSet id=\"_aajka5N-Eeq_IOLSelAS2A\">\n+          <bpmn2:dataInputRefs>_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_aajkbJN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkbZN-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkbpN-Eeq_IOLSelAS2A\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkb5N-Eeq_IOLSelAS2A\">_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_aajkcJN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkcZN-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkcpN-Eeq_IOLSelAS2A\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkc5N-Eeq_IOLSelAS2A\">_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:potentialOwner id=\"a0002c84-9cf9-4194-ad87-e38db9d982cf\">\n+        <bpmn2:resourceAssignmentExpression id=\"_XV3Ii5N3Eeq_IOLSelAS2A\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ2MTA4MQ=="}, "originalCommit": {"oid": "1d45c0f871c0a06ace5a78abbe9d9b79a44810ec"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTI1Mjg5OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDozOTowMFrOGahbrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzowNjowMlrOGa8Cbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ2MzkxOA==", "bodyText": "this id is also repeated", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430463918", "createdAt": "2020-05-26T14:39:00Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2", "diffHunk": "@@ -0,0 +1,248 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.omg.org/bpmn20\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:bpsim=\"http://www.bpsim.org/schemas/1.0\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:drools=\"http://www.jboss.org/drools\" id=\"_aai9UJN-Eeq_IOLSelAS2A\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd http://www.jboss.org/drools drools.xsd http://www.bpsim.org/schemas/1.0 bpsim.xsd http://www.omg.org/spec/DD/20100524/DC DC.xsd http://www.omg.org/spec/DD/20100524/DI DI.xsd \" exporter=\"jBPM Process Modeler\" exporterVersion=\"2.0\" targetNamespace=\"http://www.omg.org/bpmn20\">\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:process id=\"restart.simpleObsolete\" drools:packageName=\"com.myspace.test\" drools:version=\"1.0\" drools:adHoc=\"false\" name=\"test2\" isExecutable=\"true\">\n+    <bpmn2:sequenceFlow id=\"_D8CD8010-992B-447D-80D8-89E4B843A1C0\" sourceRef=\"_C51912B8-BAE2-4841-BD98-D00567082BAC\" targetRef=\"_71B8E54A-CB9D-431D-9BD3-5C23C5371F40\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_3A02094A-DCAE-495A-8F89-246756403E63\" sourceRef=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\" targetRef=\"_C51912B8-BAE2-4841-BD98-D00567082BAC\"/>\n+    <bpmn2:sequenceFlow id=\"_6E39142B-945E-43C2-B0B2-D27ED36D26A5\" sourceRef=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\" targetRef=\"_2B0C2902-D947-43BB-8F03-1615434F65FF\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_85B212F7-1001-4FD7-9402-3814BCD42438\" sourceRef=\"_58709295-E375-48ED-B835-BBCBD6C4F752\" targetRef=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\"/>\n+    <bpmn2:sequenceFlow id=\"_0B564073-D481-4768-A89E-90C19FD41459\" sourceRef=\"_2B0C2902-D947-43BB-8F03-1615434F65FF\" targetRef=\"_8AD18C56-2A0F-4A1B-AFAD-4BD505044EDD\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:userTask id=\"_C51912B8-BAE2-4841-BD98-D00567082BAC\" name=\"Second Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Second Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_3A02094A-DCAE-495A-8F89-246756403E63</bpmn2:incoming>\n+      <bpmn2:outgoing>_D8CD8010-992B-447D-80D8-89E4B843A1C0</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_aajkYJN-Eeq_IOLSelAS2A\">\n+        <bpmn2:dataInput id=\"_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:inputSet id=\"_aajkYZN-Eeq_IOLSelAS2A\">\n+          <bpmn2:dataInputRefs>_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_aajkYpN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkY5N-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkZJN-Eeq_IOLSelAS2A\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkZZN-Eeq_IOLSelAS2A\">_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_aajkZpN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkZ5N-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkaJN-Eeq_IOLSelAS2A\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkaZN-Eeq_IOLSelAS2A\">_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:potentialOwner id=\"a0002c84-9cf9-4194-ad87-e38db9d982cf\">\n+        <bpmn2:resourceAssignmentExpression id=\"_XV3Ii5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:formalExpression id=\"_XV3IjJN3Eeq_IOLSelAS2A\">katy</bpmn2:formalExpression>\n+        </bpmn2:resourceAssignmentExpression>\n+      </bpmn2:potentialOwner>\n+    </bpmn2:userTask>\n+    <bpmn2:userTask id=\"_2B0C2902-D947-43BB-8F03-1615434F65FF\" name=\"First Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[First Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_6E39142B-945E-43C2-B0B2-D27ED36D26A5</bpmn2:incoming>\n+      <bpmn2:outgoing>_0B564073-D481-4768-A89E-90C19FD41459</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_aajkapN-Eeq_IOLSelAS2A\">\n+        <bpmn2:dataInput id=\"_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:inputSet id=\"_aajka5N-Eeq_IOLSelAS2A\">\n+          <bpmn2:dataInputRefs>_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_aajkbJN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkbZN-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkbpN-Eeq_IOLSelAS2A\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkb5N-Eeq_IOLSelAS2A\">_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_aajkcJN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkcZN-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkcpN-Eeq_IOLSelAS2A\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkc5N-Eeq_IOLSelAS2A\">_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:potentialOwner id=\"a0002c84-9cf9-4194-ad87-e38db9d982cf\">\n+        <bpmn2:resourceAssignmentExpression id=\"_XV3Ii5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:formalExpression id=\"_XV3IjJN3Eeq_IOLSelAS2A\">katy</bpmn2:formalExpression>\n+        </bpmn2:resourceAssignmentExpression>\n+      </bpmn2:potentialOwner>\n+    </bpmn2:userTask>\n+    <bpmn2:startEvent id=\"_58709295-E375-48ED-B835-BBCBD6C4F752\">\n+      <bpmn2:outgoing>_85B212F7-1001-4FD7-9402-3814BCD42438</bpmn2:outgoing>\n+    </bpmn2:startEvent>\n+    <bpmn2:endEvent id=\"_71B8E54A-CB9D-431D-9BD3-5C23C5371F40\">\n+      <bpmn2:incoming>_D8CD8010-992B-447D-80D8-89E4B843A1C0</bpmn2:incoming>\n+    </bpmn2:endEvent>\n+    <bpmn2:parallelGateway id=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\" gatewayDirection=\"Diverging\">\n+      <bpmn2:incoming>_85B212F7-1001-4FD7-9402-3814BCD42438</bpmn2:incoming>\n+      <bpmn2:outgoing>_6E39142B-945E-43C2-B0B2-D27ED36D26A5</bpmn2:outgoing>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d45c0f871c0a06ace5a78abbe9d9b79a44810ec"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5OTgyMw==", "bodyText": "nak", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430899823", "createdAt": "2020-05-27T07:06:02Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2", "diffHunk": "@@ -0,0 +1,248 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.omg.org/bpmn20\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:bpsim=\"http://www.bpsim.org/schemas/1.0\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:drools=\"http://www.jboss.org/drools\" id=\"_aai9UJN-Eeq_IOLSelAS2A\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd http://www.jboss.org/drools drools.xsd http://www.bpsim.org/schemas/1.0 bpsim.xsd http://www.omg.org/spec/DD/20100524/DC DC.xsd http://www.omg.org/spec/DD/20100524/DI DI.xsd \" exporter=\"jBPM Process Modeler\" exporterVersion=\"2.0\" targetNamespace=\"http://www.omg.org/bpmn20\">\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:process id=\"restart.simpleObsolete\" drools:packageName=\"com.myspace.test\" drools:version=\"1.0\" drools:adHoc=\"false\" name=\"test2\" isExecutable=\"true\">\n+    <bpmn2:sequenceFlow id=\"_D8CD8010-992B-447D-80D8-89E4B843A1C0\" sourceRef=\"_C51912B8-BAE2-4841-BD98-D00567082BAC\" targetRef=\"_71B8E54A-CB9D-431D-9BD3-5C23C5371F40\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_3A02094A-DCAE-495A-8F89-246756403E63\" sourceRef=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\" targetRef=\"_C51912B8-BAE2-4841-BD98-D00567082BAC\"/>\n+    <bpmn2:sequenceFlow id=\"_6E39142B-945E-43C2-B0B2-D27ED36D26A5\" sourceRef=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\" targetRef=\"_2B0C2902-D947-43BB-8F03-1615434F65FF\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_85B212F7-1001-4FD7-9402-3814BCD42438\" sourceRef=\"_58709295-E375-48ED-B835-BBCBD6C4F752\" targetRef=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\"/>\n+    <bpmn2:sequenceFlow id=\"_0B564073-D481-4768-A89E-90C19FD41459\" sourceRef=\"_2B0C2902-D947-43BB-8F03-1615434F65FF\" targetRef=\"_8AD18C56-2A0F-4A1B-AFAD-4BD505044EDD\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:userTask id=\"_C51912B8-BAE2-4841-BD98-D00567082BAC\" name=\"Second Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Second Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_3A02094A-DCAE-495A-8F89-246756403E63</bpmn2:incoming>\n+      <bpmn2:outgoing>_D8CD8010-992B-447D-80D8-89E4B843A1C0</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_aajkYJN-Eeq_IOLSelAS2A\">\n+        <bpmn2:dataInput id=\"_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:inputSet id=\"_aajkYZN-Eeq_IOLSelAS2A\">\n+          <bpmn2:dataInputRefs>_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_aajkYpN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkY5N-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkZJN-Eeq_IOLSelAS2A\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkZZN-Eeq_IOLSelAS2A\">_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_aajkZpN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkZ5N-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkaJN-Eeq_IOLSelAS2A\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkaZN-Eeq_IOLSelAS2A\">_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:potentialOwner id=\"a0002c84-9cf9-4194-ad87-e38db9d982cf\">\n+        <bpmn2:resourceAssignmentExpression id=\"_XV3Ii5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:formalExpression id=\"_XV3IjJN3Eeq_IOLSelAS2A\">katy</bpmn2:formalExpression>\n+        </bpmn2:resourceAssignmentExpression>\n+      </bpmn2:potentialOwner>\n+    </bpmn2:userTask>\n+    <bpmn2:userTask id=\"_2B0C2902-D947-43BB-8F03-1615434F65FF\" name=\"First Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[First Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_6E39142B-945E-43C2-B0B2-D27ED36D26A5</bpmn2:incoming>\n+      <bpmn2:outgoing>_0B564073-D481-4768-A89E-90C19FD41459</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_aajkapN-Eeq_IOLSelAS2A\">\n+        <bpmn2:dataInput id=\"_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:inputSet id=\"_aajka5N-Eeq_IOLSelAS2A\">\n+          <bpmn2:dataInputRefs>_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_aajkbJN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkbZN-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkbpN-Eeq_IOLSelAS2A\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkb5N-Eeq_IOLSelAS2A\">_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_aajkcJN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkcZN-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkcpN-Eeq_IOLSelAS2A\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkc5N-Eeq_IOLSelAS2A\">_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:potentialOwner id=\"a0002c84-9cf9-4194-ad87-e38db9d982cf\">\n+        <bpmn2:resourceAssignmentExpression id=\"_XV3Ii5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:formalExpression id=\"_XV3IjJN3Eeq_IOLSelAS2A\">katy</bpmn2:formalExpression>\n+        </bpmn2:resourceAssignmentExpression>\n+      </bpmn2:potentialOwner>\n+    </bpmn2:userTask>\n+    <bpmn2:startEvent id=\"_58709295-E375-48ED-B835-BBCBD6C4F752\">\n+      <bpmn2:outgoing>_85B212F7-1001-4FD7-9402-3814BCD42438</bpmn2:outgoing>\n+    </bpmn2:startEvent>\n+    <bpmn2:endEvent id=\"_71B8E54A-CB9D-431D-9BD3-5C23C5371F40\">\n+      <bpmn2:incoming>_D8CD8010-992B-447D-80D8-89E4B843A1C0</bpmn2:incoming>\n+    </bpmn2:endEvent>\n+    <bpmn2:parallelGateway id=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\" gatewayDirection=\"Diverging\">\n+      <bpmn2:incoming>_85B212F7-1001-4FD7-9402-3814BCD42438</bpmn2:incoming>\n+      <bpmn2:outgoing>_6E39142B-945E-43C2-B0B2-D27ED36D26A5</bpmn2:outgoing>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ2MzkxOA=="}, "originalCommit": {"oid": "1d45c0f871c0a06ace5a78abbe9d9b79a44810ec"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTI5MjY5OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDo0NzozOVrOGah09Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzowNDoxNFrOGa7_fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3MDM4OQ==", "bodyText": "And this one: formal expression and resource assignment expression has the same id", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430470389", "createdAt": "2020-05-26T14:47:39Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2", "diffHunk": "@@ -0,0 +1,248 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.omg.org/bpmn20\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:bpsim=\"http://www.bpsim.org/schemas/1.0\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:drools=\"http://www.jboss.org/drools\" id=\"_aai9UJN-Eeq_IOLSelAS2A\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd http://www.jboss.org/drools drools.xsd http://www.bpsim.org/schemas/1.0 bpsim.xsd http://www.omg.org/spec/DD/20100524/DC DC.xsd http://www.omg.org/spec/DD/20100524/DI DI.xsd \" exporter=\"jBPM Process Modeler\" exporterVersion=\"2.0\" targetNamespace=\"http://www.omg.org/bpmn20\">\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:process id=\"restart.simpleObsolete\" drools:packageName=\"com.myspace.test\" drools:version=\"1.0\" drools:adHoc=\"false\" name=\"test2\" isExecutable=\"true\">\n+    <bpmn2:sequenceFlow id=\"_D8CD8010-992B-447D-80D8-89E4B843A1C0\" sourceRef=\"_C51912B8-BAE2-4841-BD98-D00567082BAC\" targetRef=\"_71B8E54A-CB9D-431D-9BD3-5C23C5371F40\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_3A02094A-DCAE-495A-8F89-246756403E63\" sourceRef=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\" targetRef=\"_C51912B8-BAE2-4841-BD98-D00567082BAC\"/>\n+    <bpmn2:sequenceFlow id=\"_6E39142B-945E-43C2-B0B2-D27ED36D26A5\" sourceRef=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\" targetRef=\"_2B0C2902-D947-43BB-8F03-1615434F65FF\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_85B212F7-1001-4FD7-9402-3814BCD42438\" sourceRef=\"_58709295-E375-48ED-B835-BBCBD6C4F752\" targetRef=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\"/>\n+    <bpmn2:sequenceFlow id=\"_0B564073-D481-4768-A89E-90C19FD41459\" sourceRef=\"_2B0C2902-D947-43BB-8F03-1615434F65FF\" targetRef=\"_8AD18C56-2A0F-4A1B-AFAD-4BD505044EDD\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:userTask id=\"_C51912B8-BAE2-4841-BD98-D00567082BAC\" name=\"Second Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Second Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_3A02094A-DCAE-495A-8F89-246756403E63</bpmn2:incoming>\n+      <bpmn2:outgoing>_D8CD8010-992B-447D-80D8-89E4B843A1C0</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_aajkYJN-Eeq_IOLSelAS2A\">\n+        <bpmn2:dataInput id=\"_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:inputSet id=\"_aajkYZN-Eeq_IOLSelAS2A\">\n+          <bpmn2:dataInputRefs>_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_aajkYpN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkY5N-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkZJN-Eeq_IOLSelAS2A\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkZZN-Eeq_IOLSelAS2A\">_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_aajkZpN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkZ5N-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkaJN-Eeq_IOLSelAS2A\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkaZN-Eeq_IOLSelAS2A\">_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:potentialOwner id=\"a0002c84-9cf9-4194-ad87-e38db9d982cf\">\n+        <bpmn2:resourceAssignmentExpression id=\"_XV3Ii5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:formalExpression id=\"_XV3IjJN3Eeq_IOLSelAS2A\">katy</bpmn2:formalExpression>\n+        </bpmn2:resourceAssignmentExpression>\n+      </bpmn2:potentialOwner>\n+    </bpmn2:userTask>\n+    <bpmn2:userTask id=\"_2B0C2902-D947-43BB-8F03-1615434F65FF\" name=\"First Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[First Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_6E39142B-945E-43C2-B0B2-D27ED36D26A5</bpmn2:incoming>\n+      <bpmn2:outgoing>_0B564073-D481-4768-A89E-90C19FD41459</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_aajkapN-Eeq_IOLSelAS2A\">\n+        <bpmn2:dataInput id=\"_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:inputSet id=\"_aajka5N-Eeq_IOLSelAS2A\">\n+          <bpmn2:dataInputRefs>_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_aajkbJN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkbZN-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkbpN-Eeq_IOLSelAS2A\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkb5N-Eeq_IOLSelAS2A\">_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_aajkcJN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkcZN-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkcpN-Eeq_IOLSelAS2A\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkc5N-Eeq_IOLSelAS2A\">_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:potentialOwner id=\"a0002c84-9cf9-4194-ad87-e38db9d982cf\">\n+        <bpmn2:resourceAssignmentExpression id=\"_XV3Ii5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:formalExpression id=\"_XV3IjJN3Eeq_IOLSelAS2A\">katy</bpmn2:formalExpression>\n+        </bpmn2:resourceAssignmentExpression>\n+      </bpmn2:potentialOwner>\n+    </bpmn2:userTask>\n+    <bpmn2:startEvent id=\"_58709295-E375-48ED-B835-BBCBD6C4F752\">\n+      <bpmn2:outgoing>_85B212F7-1001-4FD7-9402-3814BCD42438</bpmn2:outgoing>\n+    </bpmn2:startEvent>\n+    <bpmn2:endEvent id=\"_71B8E54A-CB9D-431D-9BD3-5C23C5371F40\">\n+      <bpmn2:incoming>_D8CD8010-992B-447D-80D8-89E4B843A1C0</bpmn2:incoming>\n+    </bpmn2:endEvent>\n+    <bpmn2:parallelGateway id=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\" gatewayDirection=\"Diverging\">\n+      <bpmn2:incoming>_85B212F7-1001-4FD7-9402-3814BCD42438</bpmn2:incoming>\n+      <bpmn2:outgoing>_6E39142B-945E-43C2-B0B2-D27ED36D26A5</bpmn2:outgoing>\n+      <bpmn2:outgoing>_3A02094A-DCAE-495A-8F89-246756403E63</bpmn2:outgoing>\n+    </bpmn2:parallelGateway>\n+    <bpmn2:endEvent id=\"_8AD18C56-2A0F-4A1B-AFAD-4BD505044EDD\">\n+      <bpmn2:incoming>_0B564073-D481-4768-A89E-90C19FD41459</bpmn2:incoming>\n+      <bpmn2:terminateEventDefinition id=\"_aajkdJN-Eeq_IOLSelAS2A\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d45c0f871c0a06ace5a78abbe9d9b79a44810ec"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5OTA3MA==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430899070", "createdAt": "2020-05-27T07:04:14Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/BPMN2-SimpleRestartWithObsoleteTest.bpmn2", "diffHunk": "@@ -0,0 +1,248 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.omg.org/bpmn20\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:bpsim=\"http://www.bpsim.org/schemas/1.0\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:drools=\"http://www.jboss.org/drools\" id=\"_aai9UJN-Eeq_IOLSelAS2A\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd http://www.jboss.org/drools drools.xsd http://www.bpsim.org/schemas/1.0 bpsim.xsd http://www.omg.org/spec/DD/20100524/DC DC.xsd http://www.omg.org/spec/DD/20100524/DI DI.xsd \" exporter=\"jBPM Process Modeler\" exporterVersion=\"2.0\" targetNamespace=\"http://www.omg.org/bpmn20\">\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:process id=\"restart.simpleObsolete\" drools:packageName=\"com.myspace.test\" drools:version=\"1.0\" drools:adHoc=\"false\" name=\"test2\" isExecutable=\"true\">\n+    <bpmn2:sequenceFlow id=\"_D8CD8010-992B-447D-80D8-89E4B843A1C0\" sourceRef=\"_C51912B8-BAE2-4841-BD98-D00567082BAC\" targetRef=\"_71B8E54A-CB9D-431D-9BD3-5C23C5371F40\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_3A02094A-DCAE-495A-8F89-246756403E63\" sourceRef=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\" targetRef=\"_C51912B8-BAE2-4841-BD98-D00567082BAC\"/>\n+    <bpmn2:sequenceFlow id=\"_6E39142B-945E-43C2-B0B2-D27ED36D26A5\" sourceRef=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\" targetRef=\"_2B0C2902-D947-43BB-8F03-1615434F65FF\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_85B212F7-1001-4FD7-9402-3814BCD42438\" sourceRef=\"_58709295-E375-48ED-B835-BBCBD6C4F752\" targetRef=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\"/>\n+    <bpmn2:sequenceFlow id=\"_0B564073-D481-4768-A89E-90C19FD41459\" sourceRef=\"_2B0C2902-D947-43BB-8F03-1615434F65FF\" targetRef=\"_8AD18C56-2A0F-4A1B-AFAD-4BD505044EDD\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:userTask id=\"_C51912B8-BAE2-4841-BD98-D00567082BAC\" name=\"Second Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Second Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_3A02094A-DCAE-495A-8F89-246756403E63</bpmn2:incoming>\n+      <bpmn2:outgoing>_D8CD8010-992B-447D-80D8-89E4B843A1C0</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_aajkYJN-Eeq_IOLSelAS2A\">\n+        <bpmn2:dataInput id=\"_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:inputSet id=\"_aajkYZN-Eeq_IOLSelAS2A\">\n+          <bpmn2:dataInputRefs>_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_aajkYpN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkY5N-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkZJN-Eeq_IOLSelAS2A\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkZZN-Eeq_IOLSelAS2A\">_C51912B8-BAE2-4841-BD98-D00567082BAC_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_aajkZpN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkZ5N-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkaJN-Eeq_IOLSelAS2A\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkaZN-Eeq_IOLSelAS2A\">_C51912B8-BAE2-4841-BD98-D00567082BAC_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:potentialOwner id=\"a0002c84-9cf9-4194-ad87-e38db9d982cf\">\n+        <bpmn2:resourceAssignmentExpression id=\"_XV3Ii5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:formalExpression id=\"_XV3IjJN3Eeq_IOLSelAS2A\">katy</bpmn2:formalExpression>\n+        </bpmn2:resourceAssignmentExpression>\n+      </bpmn2:potentialOwner>\n+    </bpmn2:userTask>\n+    <bpmn2:userTask id=\"_2B0C2902-D947-43BB-8F03-1615434F65FF\" name=\"First Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[First Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_6E39142B-945E-43C2-B0B2-D27ED36D26A5</bpmn2:incoming>\n+      <bpmn2:outgoing>_0B564073-D481-4768-A89E-90C19FD41459</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_aajkapN-Eeq_IOLSelAS2A\">\n+        <bpmn2:dataInput id=\"_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:inputSet id=\"_aajka5N-Eeq_IOLSelAS2A\">\n+          <bpmn2:dataInputRefs>_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_aajkbJN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkbZN-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkbpN-Eeq_IOLSelAS2A\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkb5N-Eeq_IOLSelAS2A\">_2B0C2902-D947-43BB-8F03-1615434F65FF_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_aajkcJN-Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_aajkcZN-Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkcpN-Eeq_IOLSelAS2A\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_aajkc5N-Eeq_IOLSelAS2A\">_2B0C2902-D947-43BB-8F03-1615434F65FF_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:potentialOwner id=\"a0002c84-9cf9-4194-ad87-e38db9d982cf\">\n+        <bpmn2:resourceAssignmentExpression id=\"_XV3Ii5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:formalExpression id=\"_XV3IjJN3Eeq_IOLSelAS2A\">katy</bpmn2:formalExpression>\n+        </bpmn2:resourceAssignmentExpression>\n+      </bpmn2:potentialOwner>\n+    </bpmn2:userTask>\n+    <bpmn2:startEvent id=\"_58709295-E375-48ED-B835-BBCBD6C4F752\">\n+      <bpmn2:outgoing>_85B212F7-1001-4FD7-9402-3814BCD42438</bpmn2:outgoing>\n+    </bpmn2:startEvent>\n+    <bpmn2:endEvent id=\"_71B8E54A-CB9D-431D-9BD3-5C23C5371F40\">\n+      <bpmn2:incoming>_D8CD8010-992B-447D-80D8-89E4B843A1C0</bpmn2:incoming>\n+    </bpmn2:endEvent>\n+    <bpmn2:parallelGateway id=\"_2C427968-15F3-4D6E-AA17-4AB10BAFF96C\" gatewayDirection=\"Diverging\">\n+      <bpmn2:incoming>_85B212F7-1001-4FD7-9402-3814BCD42438</bpmn2:incoming>\n+      <bpmn2:outgoing>_6E39142B-945E-43C2-B0B2-D27ED36D26A5</bpmn2:outgoing>\n+      <bpmn2:outgoing>_3A02094A-DCAE-495A-8F89-246756403E63</bpmn2:outgoing>\n+    </bpmn2:parallelGateway>\n+    <bpmn2:endEvent id=\"_8AD18C56-2A0F-4A1B-AFAD-4BD505044EDD\">\n+      <bpmn2:incoming>_0B564073-D481-4768-A89E-90C19FD41459</bpmn2:incoming>\n+      <bpmn2:terminateEventDefinition id=\"_aajkdJN-Eeq_IOLSelAS2A\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3MDM4OQ=="}, "originalCommit": {"oid": "1d45c0f871c0a06ace5a78abbe9d9b79a44810ec"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTMxNDE5OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDo1MTo1NVrOGaiCSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzowNzo1NlrOGa8Fwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3MzgwMA==", "bodyText": "Unresolved reference test.test", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430473800", "createdAt": "2020-05-26T14:51:55Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2", "diffHunk": "@@ -0,0 +1,352 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.omg.org/bpmn20\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:bpsim=\"http://www.bpsim.org/schemas/1.0\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:drools=\"http://www.jboss.org/drools\" id=\"_XV3IgJN3Eeq_IOLSelAS2A\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd http://www.jboss.org/drools drools.xsd http://www.bpsim.org/schemas/1.0 bpsim.xsd http://www.omg.org/spec/DD/20100524/DC DC.xsd http://www.omg.org/spec/DD/20100524/DI DI.xsd \" exporter=\"jBPM Process Modeler\" exporterVersion=\"2.0\" targetNamespace=\"http://www.omg.org/bpmn20\">\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:process id=\"simple.restartWithTimer\" drools:packageName=\"com.myspace.test\" drools:version=\"1.0\" drools:adHoc=\"false\" name=\"test\" isExecutable=\"true\">\n+    <bpmn2:sequenceFlow id=\"_92EA16BB-8173-46A1-BCF5-1B7F1D629D38\" sourceRef=\"_BAB8152A-00DC-436D-A4FD-0CC4D3DF3DB6\" targetRef=\"_74DA22B8-7EB2-498B-95DD-D7A91F2736EE\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_E7792707-9AAE-42B9-BAD2-7DFD2340ABB9\" sourceRef=\"_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7\" targetRef=\"_0E578713-D2A7-44D7-BBDF-42A09C85D05C\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_1355D7A3-B5F3-43F9-81C4-4AB7C58F9DE9\" sourceRef=\"_1A124FE6-9C2F-425E-807D-BB32FDD1304D\" targetRef=\"_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_C1937BB2-8159-457C-A00E-C574D0C9D11A\" sourceRef=\"_7B4FF6B3-8CFC-4612-AEAA-5E6FB097DD1A\" targetRef=\"_1A124FE6-9C2F-425E-807D-BB32FDD1304D\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_77854F45-13A9-4BAB-A879-767AC813598E\" sourceRef=\"_74DA22B8-7EB2-498B-95DD-D7A91F2736EE\" targetRef=\"_F989620F-B9F4-43C1-8456-EFB2E2B80341\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:userTask id=\"_74DA22B8-7EB2-498B-95DD-D7A91F2736EE\" name=\"Third Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Third Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_92EA16BB-8173-46A1-BCF5-1B7F1D629D38</bpmn2:incoming>\n+      <bpmn2:outgoing>_77854F45-13A9-4BAB-A879-767AC813598E</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_XV3IgZN3Eeq_IOLSelAS2A\">\n+        <bpmn2:dataInput id=\"_74DA22B8-7EB2-498B-95DD-D7A91F2736EE_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_74DA22B8-7EB2-498B-95DD-D7A91F2736EE_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:inputSet id=\"_XV3IgpN3Eeq_IOLSelAS2A\">\n+          <bpmn2:dataInputRefs>_74DA22B8-7EB2-498B-95DD-D7A91F2736EE_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_74DA22B8-7EB2-498B-95DD-D7A91F2736EE_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_XV3Ig5N3Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_74DA22B8-7EB2-498B-95DD-D7A91F2736EE_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_XV3IhJN3Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3IhZN3Eeq_IOLSelAS2A\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3IhpN3Eeq_IOLSelAS2A\">_74DA22B8-7EB2-498B-95DD-D7A91F2736EE_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_XV3Ih5N3Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_74DA22B8-7EB2-498B-95DD-D7A91F2736EE_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_XV3IiJN3Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3IiZN3Eeq_IOLSelAS2A\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3IipN3Eeq_IOLSelAS2A\">_74DA22B8-7EB2-498B-95DD-D7A91F2736EE_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:potentialOwner id=\"a0002c84-9cf9-4194-ad87-e38db9d982cf\">\n+        <bpmn2:resourceAssignmentExpression id=\"_XV3Ii5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:formalExpression id=\"_XV3IjJN3Eeq_IOLSelAS2A\">katy</bpmn2:formalExpression>\n+        </bpmn2:resourceAssignmentExpression>\n+      </bpmn2:potentialOwner>\n+    </bpmn2:userTask>\n+    <bpmn2:endEvent id=\"_0E578713-D2A7-44D7-BBDF-42A09C85D05C\" name=\"Bad End\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Bad End]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_E7792707-9AAE-42B9-BAD2-7DFD2340ABB9</bpmn2:incoming>\n+    </bpmn2:endEvent>\n+    <bpmn2:userTask id=\"_1A124FE6-9C2F-425E-807D-BB32FDD1304D\" name=\"First Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[First Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_C1937BB2-8159-457C-A00E-C574D0C9D11A</bpmn2:incoming>\n+      <bpmn2:outgoing>_1355D7A3-B5F3-43F9-81C4-4AB7C58F9DE9</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_XV3vkJN3Eeq_IOLSelAS2A\">\n+        <bpmn2:dataInput id=\"_1A124FE6-9C2F-425E-807D-BB32FDD1304D_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_1A124FE6-9C2F-425E-807D-BB32FDD1304D_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:inputSet id=\"_XV3vkZN3Eeq_IOLSelAS2A\">\n+          <bpmn2:dataInputRefs>_1A124FE6-9C2F-425E-807D-BB32FDD1304D_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_1A124FE6-9C2F-425E-807D-BB32FDD1304D_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_XV3vkpN3Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_1A124FE6-9C2F-425E-807D-BB32FDD1304D_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_XV3vk5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3vlJN3Eeq_IOLSelAS2A\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3vlZN3Eeq_IOLSelAS2A\">_1A124FE6-9C2F-425E-807D-BB32FDD1304D_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_XV3vlpN3Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_1A124FE6-9C2F-425E-807D-BB32FDD1304D_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_XV3vl5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3vmJN3Eeq_IOLSelAS2A\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3vmZN3Eeq_IOLSelAS2A\">_1A124FE6-9C2F-425E-807D-BB32FDD1304D_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:potentialOwner id=\"97b01683-4696-4b9f-8f8e-c9d3db546628\">\n+        <bpmn2:resourceAssignmentExpression id=\"_XV3vmpN3Eeq_IOLSelAS2A\">\n+          <bpmn2:formalExpression id=\"_XV3vm5N3Eeq_IOLSelAS2A\">katy</bpmn2:formalExpression>\n+        </bpmn2:resourceAssignmentExpression>\n+      </bpmn2:potentialOwner>\n+    </bpmn2:userTask>\n+    <bpmn2:userTask id=\"_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7\" name=\"Second Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Second Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_1355D7A3-B5F3-43F9-81C4-4AB7C58F9DE9</bpmn2:incoming>\n+      <bpmn2:outgoing>_E7792707-9AAE-42B9-BAD2-7DFD2340ABB9</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_XV3vnJN3Eeq_IOLSelAS2A\">\n+        <bpmn2:dataInput id=\"_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:inputSet id=\"_XV3vnZN3Eeq_IOLSelAS2A\">\n+          <bpmn2:dataInputRefs>_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_XV3vnpN3Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_XV3vn5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3voJN3Eeq_IOLSelAS2A\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3voZN3Eeq_IOLSelAS2A\">_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_XV3vopN3Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_XV3vo5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3vpJN3Eeq_IOLSelAS2A\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3vpZN3Eeq_IOLSelAS2A\">_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:potentialOwner id=\"63008d07-472e-4475-a260-35abd321fdab\">\n+        <bpmn2:resourceAssignmentExpression id=\"_XV3vppN3Eeq_IOLSelAS2A\">\n+          <bpmn2:formalExpression id=\"_XV3vp5N3Eeq_IOLSelAS2A\">katy</bpmn2:formalExpression>\n+        </bpmn2:resourceAssignmentExpression>\n+      </bpmn2:potentialOwner>\n+    </bpmn2:userTask>\n+    <bpmn2:startEvent id=\"_7B4FF6B3-8CFC-4612-AEAA-5E6FB097DD1A\" name=\"Start\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Start]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:outgoing>_C1937BB2-8159-457C-A00E-C574D0C9D11A</bpmn2:outgoing>\n+    </bpmn2:startEvent>\n+    <bpmn2:endEvent id=\"_F989620F-B9F4-43C1-8456-EFB2E2B80341\" name=\"Good end\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Good end]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_77854F45-13A9-4BAB-A879-767AC813598E</bpmn2:incoming>\n+    </bpmn2:endEvent>\n+    <bpmn2:boundaryEvent id=\"_BAB8152A-00DC-436D-A4FD-0CC4D3DF3DB6\" drools:boundaryca=\"true\" drools:dockerinfo=\"58.0^74.0|\" attachedToRef=\"_1A124FE6-9C2F-425E-807D-BB32FDD1304D\">\n+      <bpmn2:outgoing>_92EA16BB-8173-46A1-BCF5-1B7F1D629D38</bpmn2:outgoing>\n+      <bpmn2:timerEventDefinition id=\"_XV3vqJN3Eeq_IOLSelAS2A\">\n+        <bpmn2:timeDuration xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3vqZN3Eeq_IOLSelAS2A\">PT2S</bpmn2:timeDuration>\n+      </bpmn2:timerEventDefinition>\n+    </bpmn2:boundaryEvent>\n+  </bpmn2:process>\n+  <bpmndi:BPMNDiagram id=\"_XV3vqpN3Eeq_IOLSelAS2A\">\n+    <bpmndi:BPMNPlane id=\"_XV3vq5N3Eeq_IOLSelAS2A\" bpmnElement=\"test.test\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d45c0f871c0a06ace5a78abbe9d9b79a44810ec"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMDY3NA==", "bodyText": "ok", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430900674", "createdAt": "2020-05-27T07:07:56Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/BPMN2-SimpleRestartWithTimerTest.bpmn2", "diffHunk": "@@ -0,0 +1,352 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.omg.org/bpmn20\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:bpsim=\"http://www.bpsim.org/schemas/1.0\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:drools=\"http://www.jboss.org/drools\" id=\"_XV3IgJN3Eeq_IOLSelAS2A\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd http://www.jboss.org/drools drools.xsd http://www.bpsim.org/schemas/1.0 bpsim.xsd http://www.omg.org/spec/DD/20100524/DC DC.xsd http://www.omg.org/spec/DD/20100524/DI DI.xsd \" exporter=\"jBPM Process Modeler\" exporterVersion=\"2.0\" targetNamespace=\"http://www.omg.org/bpmn20\">\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:process id=\"simple.restartWithTimer\" drools:packageName=\"com.myspace.test\" drools:version=\"1.0\" drools:adHoc=\"false\" name=\"test\" isExecutable=\"true\">\n+    <bpmn2:sequenceFlow id=\"_92EA16BB-8173-46A1-BCF5-1B7F1D629D38\" sourceRef=\"_BAB8152A-00DC-436D-A4FD-0CC4D3DF3DB6\" targetRef=\"_74DA22B8-7EB2-498B-95DD-D7A91F2736EE\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_E7792707-9AAE-42B9-BAD2-7DFD2340ABB9\" sourceRef=\"_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7\" targetRef=\"_0E578713-D2A7-44D7-BBDF-42A09C85D05C\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_1355D7A3-B5F3-43F9-81C4-4AB7C58F9DE9\" sourceRef=\"_1A124FE6-9C2F-425E-807D-BB32FDD1304D\" targetRef=\"_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_C1937BB2-8159-457C-A00E-C574D0C9D11A\" sourceRef=\"_7B4FF6B3-8CFC-4612-AEAA-5E6FB097DD1A\" targetRef=\"_1A124FE6-9C2F-425E-807D-BB32FDD1304D\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_77854F45-13A9-4BAB-A879-767AC813598E\" sourceRef=\"_74DA22B8-7EB2-498B-95DD-D7A91F2736EE\" targetRef=\"_F989620F-B9F4-43C1-8456-EFB2E2B80341\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:userTask id=\"_74DA22B8-7EB2-498B-95DD-D7A91F2736EE\" name=\"Third Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Third Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_92EA16BB-8173-46A1-BCF5-1B7F1D629D38</bpmn2:incoming>\n+      <bpmn2:outgoing>_77854F45-13A9-4BAB-A879-767AC813598E</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_XV3IgZN3Eeq_IOLSelAS2A\">\n+        <bpmn2:dataInput id=\"_74DA22B8-7EB2-498B-95DD-D7A91F2736EE_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_74DA22B8-7EB2-498B-95DD-D7A91F2736EE_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__74DA22B8-7EB2-498B-95DD-D7A91F2736EE_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:inputSet id=\"_XV3IgpN3Eeq_IOLSelAS2A\">\n+          <bpmn2:dataInputRefs>_74DA22B8-7EB2-498B-95DD-D7A91F2736EE_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_74DA22B8-7EB2-498B-95DD-D7A91F2736EE_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_XV3Ig5N3Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_74DA22B8-7EB2-498B-95DD-D7A91F2736EE_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_XV3IhJN3Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3IhZN3Eeq_IOLSelAS2A\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3IhpN3Eeq_IOLSelAS2A\">_74DA22B8-7EB2-498B-95DD-D7A91F2736EE_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_XV3Ih5N3Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_74DA22B8-7EB2-498B-95DD-D7A91F2736EE_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_XV3IiJN3Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3IiZN3Eeq_IOLSelAS2A\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3IipN3Eeq_IOLSelAS2A\">_74DA22B8-7EB2-498B-95DD-D7A91F2736EE_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:potentialOwner id=\"a0002c84-9cf9-4194-ad87-e38db9d982cf\">\n+        <bpmn2:resourceAssignmentExpression id=\"_XV3Ii5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:formalExpression id=\"_XV3IjJN3Eeq_IOLSelAS2A\">katy</bpmn2:formalExpression>\n+        </bpmn2:resourceAssignmentExpression>\n+      </bpmn2:potentialOwner>\n+    </bpmn2:userTask>\n+    <bpmn2:endEvent id=\"_0E578713-D2A7-44D7-BBDF-42A09C85D05C\" name=\"Bad End\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Bad End]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_E7792707-9AAE-42B9-BAD2-7DFD2340ABB9</bpmn2:incoming>\n+    </bpmn2:endEvent>\n+    <bpmn2:userTask id=\"_1A124FE6-9C2F-425E-807D-BB32FDD1304D\" name=\"First Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[First Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_C1937BB2-8159-457C-A00E-C574D0C9D11A</bpmn2:incoming>\n+      <bpmn2:outgoing>_1355D7A3-B5F3-43F9-81C4-4AB7C58F9DE9</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_XV3vkJN3Eeq_IOLSelAS2A\">\n+        <bpmn2:dataInput id=\"_1A124FE6-9C2F-425E-807D-BB32FDD1304D_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_1A124FE6-9C2F-425E-807D-BB32FDD1304D_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__1A124FE6-9C2F-425E-807D-BB32FDD1304D_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:inputSet id=\"_XV3vkZN3Eeq_IOLSelAS2A\">\n+          <bpmn2:dataInputRefs>_1A124FE6-9C2F-425E-807D-BB32FDD1304D_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_1A124FE6-9C2F-425E-807D-BB32FDD1304D_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_XV3vkpN3Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_1A124FE6-9C2F-425E-807D-BB32FDD1304D_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_XV3vk5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3vlJN3Eeq_IOLSelAS2A\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3vlZN3Eeq_IOLSelAS2A\">_1A124FE6-9C2F-425E-807D-BB32FDD1304D_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_XV3vlpN3Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_1A124FE6-9C2F-425E-807D-BB32FDD1304D_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_XV3vl5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3vmJN3Eeq_IOLSelAS2A\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3vmZN3Eeq_IOLSelAS2A\">_1A124FE6-9C2F-425E-807D-BB32FDD1304D_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:potentialOwner id=\"97b01683-4696-4b9f-8f8e-c9d3db546628\">\n+        <bpmn2:resourceAssignmentExpression id=\"_XV3vmpN3Eeq_IOLSelAS2A\">\n+          <bpmn2:formalExpression id=\"_XV3vm5N3Eeq_IOLSelAS2A\">katy</bpmn2:formalExpression>\n+        </bpmn2:resourceAssignmentExpression>\n+      </bpmn2:potentialOwner>\n+    </bpmn2:userTask>\n+    <bpmn2:userTask id=\"_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7\" name=\"Second Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Second Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_1355D7A3-B5F3-43F9-81C4-4AB7C58F9DE9</bpmn2:incoming>\n+      <bpmn2:outgoing>_E7792707-9AAE-42B9-BAD2-7DFD2340ABB9</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_XV3vnJN3Eeq_IOLSelAS2A\">\n+        <bpmn2:dataInput id=\"_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:inputSet id=\"_XV3vnZN3Eeq_IOLSelAS2A\">\n+          <bpmn2:dataInputRefs>_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_XV3vnpN3Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_XV3vn5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3voJN3Eeq_IOLSelAS2A\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3voZN3Eeq_IOLSelAS2A\">_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_XV3vopN3Eeq_IOLSelAS2A\">\n+        <bpmn2:targetRef>_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_XV3vo5N3Eeq_IOLSelAS2A\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3vpJN3Eeq_IOLSelAS2A\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3vpZN3Eeq_IOLSelAS2A\">_CB9B8913-35FE-407B-BBD3-6FA3E84B66B7_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:potentialOwner id=\"63008d07-472e-4475-a260-35abd321fdab\">\n+        <bpmn2:resourceAssignmentExpression id=\"_XV3vppN3Eeq_IOLSelAS2A\">\n+          <bpmn2:formalExpression id=\"_XV3vp5N3Eeq_IOLSelAS2A\">katy</bpmn2:formalExpression>\n+        </bpmn2:resourceAssignmentExpression>\n+      </bpmn2:potentialOwner>\n+    </bpmn2:userTask>\n+    <bpmn2:startEvent id=\"_7B4FF6B3-8CFC-4612-AEAA-5E6FB097DD1A\" name=\"Start\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Start]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:outgoing>_C1937BB2-8159-457C-A00E-C574D0C9D11A</bpmn2:outgoing>\n+    </bpmn2:startEvent>\n+    <bpmn2:endEvent id=\"_F989620F-B9F4-43C1-8456-EFB2E2B80341\" name=\"Good end\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Good end]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_77854F45-13A9-4BAB-A879-767AC813598E</bpmn2:incoming>\n+    </bpmn2:endEvent>\n+    <bpmn2:boundaryEvent id=\"_BAB8152A-00DC-436D-A4FD-0CC4D3DF3DB6\" drools:boundaryca=\"true\" drools:dockerinfo=\"58.0^74.0|\" attachedToRef=\"_1A124FE6-9C2F-425E-807D-BB32FDD1304D\">\n+      <bpmn2:outgoing>_92EA16BB-8173-46A1-BCF5-1B7F1D629D38</bpmn2:outgoing>\n+      <bpmn2:timerEventDefinition id=\"_XV3vqJN3Eeq_IOLSelAS2A\">\n+        <bpmn2:timeDuration xsi:type=\"bpmn2:tFormalExpression\" id=\"_XV3vqZN3Eeq_IOLSelAS2A\">PT2S</bpmn2:timeDuration>\n+      </bpmn2:timerEventDefinition>\n+    </bpmn2:boundaryEvent>\n+  </bpmn2:process>\n+  <bpmndi:BPMNDiagram id=\"_XV3vqpN3Eeq_IOLSelAS2A\">\n+    <bpmndi:BPMNPlane id=\"_XV3vq5N3Eeq_IOLSelAS2A\" bpmnElement=\"test.test\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3MzgwMA=="}, "originalCommit": {"oid": "1d45c0f871c0a06ace5a78abbe9d9b79a44810ec"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjA4MTQ0OnYy", "diffSide": "RIGHT", "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/NodeInstanceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo1MjoyMFrOGapoIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzowNjozNVrOGa8DTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5ODE3OQ==", "bodyText": "Reorder the modifiers to comply with the Java Language Specification", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430598179", "createdAt": "2020-05-26T17:52:20Z", "author": {"login": "gmunozfe"}, "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/NodeInstanceImpl.java", "diffHunk": "@@ -78,12 +82,14 @@\n     protected int slaCompliance = ProcessInstance.SLA_NA;\n     protected Date slaDueDate;\n     protected long slaTimerId = -1;\n-    protected boolean aborted = false;\n+    private boolean aborted = false;\n+    transient protected CancelType cancelType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d45c0f871c0a06ace5a78abbe9d9b79a44810ec"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMDA0Ng==", "bodyText": "ok", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430900046", "createdAt": "2020-05-27T07:06:35Z", "author": {"login": "elguardian"}, "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/NodeInstanceImpl.java", "diffHunk": "@@ -78,12 +82,14 @@\n     protected int slaCompliance = ProcessInstance.SLA_NA;\n     protected Date slaDueDate;\n     protected long slaTimerId = -1;\n-    protected boolean aborted = false;\n+    private boolean aborted = false;\n+    transient protected CancelType cancelType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5ODE3OQ=="}, "originalCommit": {"oid": "1d45c0f871c0a06ace5a78abbe9d9b79a44810ec"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQzMDcyOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/BPMN2-SimpleRestartTest.bpmn2", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyMzo0MlrOGbA6Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyMzo0MlrOGbA6Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3OTY1MA==", "bodyText": "take care of the last char", "url": "https://github.com/kiegroup/jbpm/pull/1641#discussion_r430979650", "createdAt": "2020-05-27T09:23:42Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/BPMN2-SimpleRestartTest.bpmn2", "diffHunk": "@@ -0,0 +1,351 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.omg.org/bpmn20\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:bpsim=\"http://www.bpsim.org/schemas/1.0\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:drools=\"http://www.jboss.org/drools\" id=\"_UVLIkIrNEeqCP7d-9hkcyw\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd http://www.jboss.org/drools drools.xsd http://www.bpsim.org/schemas/1.0 bpsim.xsd http://www.omg.org/spec/DD/20100524/DC DC.xsd http://www.omg.org/spec/DD/20100524/DI DI.xsd \" exporter=\"jBPM Process Modeler\" exporterVersion=\"2.0\" targetNamespace=\"http://www.omg.org/bpmn20\">\n+  <bpmn2:itemDefinition id=\"_var_aItem\" structureRef=\"Integer\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_inInputXItem\" structureRef=\"Integer\"/>\n+  <bpmn2:itemDefinition id=\"__50FE3D26-B167-4A73-BDB9-C55F2A98AE38_ht_outOutputXItem\" structureRef=\"Integer\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_SkippableInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_PriorityInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_CommentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_DescriptionInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_CreatedByInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_TaskNameInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_GroupIdInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_ContentInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_NotStartedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_NotCompletedReassignInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_NotStartedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_NotCompletedNotifyInputXItem\" structureRef=\"Object\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_inInputXItem\" structureRef=\"Integer\"/>\n+  <bpmn2:itemDefinition id=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_outOutputXItem\" structureRef=\"Integer\"/>\n+  <bpmn2:process id=\"restart.simple\" drools:packageName=\"com.myspace.sample\" drools:version=\"1.0\" drools:adHoc=\"false\" name=\"test2\" isExecutable=\"true\">\n+    <bpmn2:property id=\"var_a\" itemSubjectRef=\"_var_aItem\" name=\"var_a\"/>\n+    <bpmn2:sequenceFlow id=\"_588380E3-1A84-46C0-B5B2-CCCF8DA9D012\" sourceRef=\"_58E8825E-A410-4DD6-8C96-8E074BCAA574\" targetRef=\"_A1826972-90C6-4C66-A622-67F3EA5BD034\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_2463681D-0935-4356-A364-846444A58C53\" sourceRef=\"_50FE3D26-B167-4A73-BDB9-C55F2A98AE38\" targetRef=\"_58E8825E-A410-4DD6-8C96-8E074BCAA574\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_1BA95F3E-6E46-4D0F-B414-59D266BFD038\" sourceRef=\"_EBF43ED4-3F23-471E-8356-ACA9F0D246DC\" targetRef=\"_50FE3D26-B167-4A73-BDB9-C55F2A98AE38\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_A22B57AD-3E0F-4E23-A7DD-D0B5403719AC\" sourceRef=\"_D9CE06C2-E636-4E42-A596-FD24335C54E0\" targetRef=\"_EBF43ED4-3F23-471E-8356-ACA9F0D246DC\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:sequenceFlow id=\"_E05B86B1-9C06-4BA8-BCCF-8C2A720D41BD\" sourceRef=\"_A1826972-90C6-4C66-A622-67F3EA5BD034\" targetRef=\"_99974AD8-A406-4155-93A6-A09AE518DDB5\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"isAutoConnection.source\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+        <drools:metaData name=\"isAutoConnection.target\">\n+          <drools:metaValue><![CDATA[true]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+    </bpmn2:sequenceFlow>\n+    <bpmn2:scriptTask id=\"_58E8825E-A410-4DD6-8C96-8E074BCAA574\" name=\"Second Script\" scriptFormat=\"http://www.java.com/java\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Second Script]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_2463681D-0935-4356-A364-846444A58C53</bpmn2:incoming>\n+      <bpmn2:outgoing>_588380E3-1A84-46C0-B5B2-CCCF8DA9D012</bpmn2:outgoing>\n+      <bpmn2:script><![CDATA[System.out.println(\"second script\");]]></bpmn2:script>\n+    </bpmn2:scriptTask>\n+    <bpmn2:userTask id=\"_A1826972-90C6-4C66-A622-67F3EA5BD034\" name=\"Second Human Task\">\n+      <bpmn2:extensionElements>\n+        <drools:metaData name=\"elementname\">\n+          <drools:metaValue><![CDATA[Second Human Task]]></drools:metaValue>\n+        </drools:metaData>\n+      </bpmn2:extensionElements>\n+      <bpmn2:incoming>_588380E3-1A84-46C0-B5B2-CCCF8DA9D012</bpmn2:incoming>\n+      <bpmn2:outgoing>_E05B86B1-9C06-4BA8-BCCF-8C2A720D41BD</bpmn2:outgoing>\n+      <bpmn2:ioSpecification id=\"_UVLvoIrNEeqCP7d-9hkcyw\">\n+        <bpmn2:dataInput id=\"_A1826972-90C6-4C66-A622-67F3EA5BD034_TaskNameInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_TaskNameInputXItem\" name=\"TaskName\"/>\n+        <bpmn2:dataInput id=\"_A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_inInputX\" drools:dtype=\"Integer\" itemSubjectRef=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_inInputXItem\" name=\"ht2_in\"/>\n+        <bpmn2:dataInput id=\"_A1826972-90C6-4C66-A622-67F3EA5BD034_SkippableInputX\" drools:dtype=\"Object\" itemSubjectRef=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_SkippableInputXItem\" name=\"Skippable\"/>\n+        <bpmn2:dataOutput id=\"_A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_outOutputX\" drools:dtype=\"Integer\" itemSubjectRef=\"__A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_outOutputXItem\" name=\"ht2_out\"/>\n+        <bpmn2:inputSet id=\"_UVLvoYrNEeqCP7d-9hkcyw\">\n+          <bpmn2:dataInputRefs>_A1826972-90C6-4C66-A622-67F3EA5BD034_TaskNameInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_inInputX</bpmn2:dataInputRefs>\n+          <bpmn2:dataInputRefs>_A1826972-90C6-4C66-A622-67F3EA5BD034_SkippableInputX</bpmn2:dataInputRefs>\n+        </bpmn2:inputSet>\n+        <bpmn2:outputSet id=\"_UVLvoorNEeqCP7d-9hkcyw\">\n+          <bpmn2:dataOutputRefs>_A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_outOutputX</bpmn2:dataOutputRefs>\n+        </bpmn2:outputSet>\n+      </bpmn2:ioSpecification>\n+      <bpmn2:dataInputAssociation id=\"_UVLvo4rNEeqCP7d-9hkcyw\">\n+        <bpmn2:targetRef>_A1826972-90C6-4C66-A622-67F3EA5BD034_TaskNameInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_UVLvpIrNEeqCP7d-9hkcyw\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvpYrNEeqCP7d-9hkcyw\"><![CDATA[Task]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvporNEeqCP7d-9hkcyw\">_A1826972-90C6-4C66-A622-67F3EA5BD034_TaskNameInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_UVLvp4rNEeqCP7d-9hkcyw\">\n+        <bpmn2:sourceRef>var_a</bpmn2:sourceRef>\n+        <bpmn2:targetRef>_A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_inInputX</bpmn2:targetRef>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataInputAssociation id=\"_UVLvqIrNEeqCP7d-9hkcyw\">\n+        <bpmn2:targetRef>_A1826972-90C6-4C66-A622-67F3EA5BD034_SkippableInputX</bpmn2:targetRef>\n+        <bpmn2:assignment id=\"_UVLvqYrNEeqCP7d-9hkcyw\">\n+          <bpmn2:from xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvqorNEeqCP7d-9hkcyw\"><![CDATA[false]]></bpmn2:from>\n+          <bpmn2:to xsi:type=\"bpmn2:tFormalExpression\" id=\"_UVLvq4rNEeqCP7d-9hkcyw\">_A1826972-90C6-4C66-A622-67F3EA5BD034_SkippableInputX</bpmn2:to>\n+        </bpmn2:assignment>\n+      </bpmn2:dataInputAssociation>\n+      <bpmn2:dataOutputAssociation id=\"_UVLvrIrNEeqCP7d-9hkcyw\">\n+        <bpmn2:sourceRef>_A1826972-90C6-4C66-A622-67F3EA5BD034_ht2_outOutputX</bpmn2:sourceRef>\n+        <bpmn2:targetRef>var_a</bpmn2:targetRef>\n+      </bpmn2:dataOutputAssociation>\n+      <bpmn2:potentialOwner id=\"_sjFE3NZxEeWhSJ3J-UY8fAB\">\n+        <bpmn2:resourceAssignmentExpression id=\"_sjFE3dZxEeWhSJ3J-UY8fAB\">\n+          <bpmn2:formalExpression id=\"_sjFE3tZxEeWhSJ3J-UY8fAB\u00ba\">john</bpmn2:formalExpression>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6af9eeb510dff021ab9d45d252657ff0eab18493"}, "originalPosition": 140}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1683, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}