{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1OTkzMjc1", "number": 1725, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwODozNDowMlrOEX87WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwOToxNTowOFrOEX98ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTUwOTM2OnYy", "diffSide": "RIGHT", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/NodeInstanceLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwODozNDowMlrOHABiDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzo1MzowMlrOHBptVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc4NzE1MA==", "bodyText": "All entities to be public access modifier for the IDs field, but does it make sense to have them so? I mean, this id is autogenerated by the JPA provider.", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469787150", "createdAt": "2020-08-13T08:34:02Z", "author": {"login": "afalhambra"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/NodeInstanceLog.java", "diffHunk": "@@ -99,7 +99,7 @@ public long getId() {\n     \treturn id;\n     }\n     \n-    void setId(long id) {\n+    public void setId(long id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5Mzk3Mg==", "bodyText": "validation fails in jms receiver if those aren't public. Anyways just for coherence. (I override the seq generator)", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r471493972", "createdAt": "2020-08-17T13:53:02Z", "author": {"login": "elguardian"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/NodeInstanceLog.java", "diffHunk": "@@ -99,7 +99,7 @@ public long getId() {\n     \treturn id;\n     }\n     \n-    void setId(long id) {\n+    public void setId(long id) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc4NzE1MA=="}, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTUxNDE4OnYy", "diffSide": "RIGHT", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/ProcessInstanceLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwODozNToyMFrOHABlCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzo1MzoxNVrOHBpt1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc4NzkxNA==", "bodyText": "All entities to be public access modifier for the IDs field, but does it make sense to have them so? I mean, this id is autogenerated by the JPA provider.", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469787914", "createdAt": "2020-08-13T08:35:20Z", "author": {"login": "afalhambra"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/ProcessInstanceLog.java", "diffHunk": "@@ -132,7 +132,7 @@ public long getId() {\n     \treturn id;\n     }\n     \n-    void setId(long id) {\n+    public void setId(long id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5NDEwMQ==", "bodyText": "validation fails in jms receiver if those aren't public. Anyways just for coherence. (I override the seq generator)", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r471494101", "createdAt": "2020-08-17T13:53:15Z", "author": {"login": "elguardian"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/ProcessInstanceLog.java", "diffHunk": "@@ -132,7 +132,7 @@ public long getId() {\n     \treturn id;\n     }\n     \n-    void setId(long id) {\n+    public void setId(long id) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc4NzkxNA=="}, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTYxMDkyOnYy", "diffSide": "RIGHT", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwODo1OToxNlrOHAChBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDo0MToyM1rOHDBmCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzI2OA==", "bodyText": "full package name not needed.", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469803268", "createdAt": "2020-08-13T08:59:16Z", "author": {"login": "afalhambra"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.audit;\n+\n+import org.drools.core.WorkingMemory;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.instance.impl.NodeInstanceImpl;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+\n+public abstract class AbstractAuditLoggerAdapter extends AbstractAuditLogger {\n+\n+    public static final String METADATA_PROCESSINTANCE_LOG = \"ProcessInstanceLog\";\n+    public static final String METADATA_NODEINSTANCE_LOG = \"NodeInstanceLog\";\n+    public static final String METADATA_VARIABLEINSTANCE_LOG = \"VariableInstanceLog\";\n+\n+    public AbstractAuditLoggerAdapter() {\n+\n+    }\n+    public AbstractAuditLoggerAdapter(WorkingMemory workingMemory) {\n+        super(workingMemory);\n+    }\n+\n+    public void setProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key, Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzMzg5Ng==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r472933896", "createdAt": "2020-08-19T10:41:23Z", "author": {"login": "elguardian"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.audit;\n+\n+import org.drools.core.WorkingMemory;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.instance.impl.NodeInstanceImpl;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+\n+public abstract class AbstractAuditLoggerAdapter extends AbstractAuditLogger {\n+\n+    public static final String METADATA_PROCESSINTANCE_LOG = \"ProcessInstanceLog\";\n+    public static final String METADATA_NODEINSTANCE_LOG = \"NodeInstanceLog\";\n+    public static final String METADATA_VARIABLEINSTANCE_LOG = \"VariableInstanceLog\";\n+\n+    public AbstractAuditLoggerAdapter() {\n+\n+    }\n+    public AbstractAuditLoggerAdapter(WorkingMemory workingMemory) {\n+        super(workingMemory);\n+    }\n+\n+    public void setProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key, Object value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzI2OA=="}, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTYxMTU2OnYy", "diffSide": "RIGHT", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwODo1OToyNlrOHAChcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjoxOToyOVrOHDEuaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzM3Nw==", "bodyText": "same here", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469803377", "createdAt": "2020-08-13T08:59:26Z", "author": {"login": "afalhambra"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.audit;\n+\n+import org.drools.core.WorkingMemory;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.instance.impl.NodeInstanceImpl;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+\n+public abstract class AbstractAuditLoggerAdapter extends AbstractAuditLogger {\n+\n+    public static final String METADATA_PROCESSINTANCE_LOG = \"ProcessInstanceLog\";\n+    public static final String METADATA_NODEINSTANCE_LOG = \"NodeInstanceLog\";\n+    public static final String METADATA_VARIABLEINSTANCE_LOG = \"VariableInstanceLog\";\n+\n+    public AbstractAuditLoggerAdapter() {\n+\n+    }\n+    public AbstractAuditLoggerAdapter(WorkingMemory workingMemory) {\n+        super(workingMemory);\n+    }\n+\n+    public void setProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key, Object value) {\n+        ((ProcessInstanceImpl) pi).getMetaData().put(key, value);\n+    }\n+\n+    public Object getProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk4NTE5Mg==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r472985192", "createdAt": "2020-08-19T12:19:29Z", "author": {"login": "elguardian"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.audit;\n+\n+import org.drools.core.WorkingMemory;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.instance.impl.NodeInstanceImpl;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+\n+public abstract class AbstractAuditLoggerAdapter extends AbstractAuditLogger {\n+\n+    public static final String METADATA_PROCESSINTANCE_LOG = \"ProcessInstanceLog\";\n+    public static final String METADATA_NODEINSTANCE_LOG = \"NodeInstanceLog\";\n+    public static final String METADATA_VARIABLEINSTANCE_LOG = \"VariableInstanceLog\";\n+\n+    public AbstractAuditLoggerAdapter() {\n+\n+    }\n+    public AbstractAuditLoggerAdapter(WorkingMemory workingMemory) {\n+        super(workingMemory);\n+    }\n+\n+    public void setProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key, Object value) {\n+        ((ProcessInstanceImpl) pi).getMetaData().put(key, value);\n+    }\n+\n+    public Object getProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzM3Nw=="}, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTYxMjM2OnYy", "diffSide": "RIGHT", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwODo1OTozNVrOHACh6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDo0MToyOVrOHDBmSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzQ5Ng==", "bodyText": "same here", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469803496", "createdAt": "2020-08-13T08:59:35Z", "author": {"login": "afalhambra"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.audit;\n+\n+import org.drools.core.WorkingMemory;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.instance.impl.NodeInstanceImpl;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+\n+public abstract class AbstractAuditLoggerAdapter extends AbstractAuditLogger {\n+\n+    public static final String METADATA_PROCESSINTANCE_LOG = \"ProcessInstanceLog\";\n+    public static final String METADATA_NODEINSTANCE_LOG = \"NodeInstanceLog\";\n+    public static final String METADATA_VARIABLEINSTANCE_LOG = \"VariableInstanceLog\";\n+\n+    public AbstractAuditLoggerAdapter() {\n+\n+    }\n+    public AbstractAuditLoggerAdapter(WorkingMemory workingMemory) {\n+        super(workingMemory);\n+    }\n+\n+    public void setProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key, Object value) {\n+        ((ProcessInstanceImpl) pi).getMetaData().put(key, value);\n+    }\n+\n+    public Object getProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key) {\n+        return ((ProcessInstanceImpl) pi).getMetaData().get(key);\n+    }\n+\n+    public void setNodeInstanceMetadata(org.kie.api.runtime.process.NodeInstance pi, String key, Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzMzk2MQ==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r472933961", "createdAt": "2020-08-19T10:41:29Z", "author": {"login": "elguardian"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.audit;\n+\n+import org.drools.core.WorkingMemory;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.instance.impl.NodeInstanceImpl;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+\n+public abstract class AbstractAuditLoggerAdapter extends AbstractAuditLogger {\n+\n+    public static final String METADATA_PROCESSINTANCE_LOG = \"ProcessInstanceLog\";\n+    public static final String METADATA_NODEINSTANCE_LOG = \"NodeInstanceLog\";\n+    public static final String METADATA_VARIABLEINSTANCE_LOG = \"VariableInstanceLog\";\n+\n+    public AbstractAuditLoggerAdapter() {\n+\n+    }\n+    public AbstractAuditLoggerAdapter(WorkingMemory workingMemory) {\n+        super(workingMemory);\n+    }\n+\n+    public void setProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key, Object value) {\n+        ((ProcessInstanceImpl) pi).getMetaData().put(key, value);\n+    }\n+\n+    public Object getProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key) {\n+        return ((ProcessInstanceImpl) pi).getMetaData().get(key);\n+    }\n+\n+    public void setNodeInstanceMetadata(org.kie.api.runtime.process.NodeInstance pi, String key, Object value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzQ5Ng=="}, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTYxMjk2OnYy", "diffSide": "RIGHT", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwODo1OTo0NFrOHACiQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDo0MTozN1rOHDBmkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzU4Ng==", "bodyText": "same here", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469803586", "createdAt": "2020-08-13T08:59:44Z", "author": {"login": "afalhambra"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.audit;\n+\n+import org.drools.core.WorkingMemory;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.instance.impl.NodeInstanceImpl;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+\n+public abstract class AbstractAuditLoggerAdapter extends AbstractAuditLogger {\n+\n+    public static final String METADATA_PROCESSINTANCE_LOG = \"ProcessInstanceLog\";\n+    public static final String METADATA_NODEINSTANCE_LOG = \"NodeInstanceLog\";\n+    public static final String METADATA_VARIABLEINSTANCE_LOG = \"VariableInstanceLog\";\n+\n+    public AbstractAuditLoggerAdapter() {\n+\n+    }\n+    public AbstractAuditLoggerAdapter(WorkingMemory workingMemory) {\n+        super(workingMemory);\n+    }\n+\n+    public void setProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key, Object value) {\n+        ((ProcessInstanceImpl) pi).getMetaData().put(key, value);\n+    }\n+\n+    public Object getProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key) {\n+        return ((ProcessInstanceImpl) pi).getMetaData().get(key);\n+    }\n+\n+    public void setNodeInstanceMetadata(org.kie.api.runtime.process.NodeInstance pi, String key, Object value) {\n+        ((NodeInstanceImpl) pi).getMetaData().put(key, value);\n+    }\n+\n+    public Object getNodeInstanceMetadata(org.kie.api.runtime.process.NodeInstance pi, String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzNDAzNQ==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r472934035", "createdAt": "2020-08-19T10:41:37Z", "author": {"login": "elguardian"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/AbstractAuditLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.audit;\n+\n+import org.drools.core.WorkingMemory;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.instance.impl.NodeInstanceImpl;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+\n+public abstract class AbstractAuditLoggerAdapter extends AbstractAuditLogger {\n+\n+    public static final String METADATA_PROCESSINTANCE_LOG = \"ProcessInstanceLog\";\n+    public static final String METADATA_NODEINSTANCE_LOG = \"NodeInstanceLog\";\n+    public static final String METADATA_VARIABLEINSTANCE_LOG = \"VariableInstanceLog\";\n+\n+    public AbstractAuditLoggerAdapter() {\n+\n+    }\n+    public AbstractAuditLoggerAdapter(WorkingMemory workingMemory) {\n+        super(workingMemory);\n+    }\n+\n+    public void setProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key, Object value) {\n+        ((ProcessInstanceImpl) pi).getMetaData().put(key, value);\n+    }\n+\n+    public Object getProcessInstanceMetadata(org.kie.api.runtime.process.ProcessInstance pi, String key) {\n+        return ((ProcessInstanceImpl) pi).getMetaData().get(key);\n+    }\n+\n+    public void setNodeInstanceMetadata(org.kie.api.runtime.process.NodeInstance pi, String key, Object value) {\n+        ((NodeInstanceImpl) pi).getMetaData().put(key, value);\n+    }\n+\n+    public Object getNodeInstanceMetadata(org.kie.api.runtime.process.NodeInstance pi, String key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwMzU4Ng=="}, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTYzNTM2OnYy", "diffSide": "RIGHT", "path": "jbpm-human-task/jbpm-human-task-audit/src/main/java/org/jbpm/services/task/audit/JPATaskLifeCycleEventListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwOTowNTo0MVrOHACvtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDo0ODoxOFrOHDB0EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwNzAyOQ==", "bodyText": "This field is not used/referenced in any place of the code. Do we need it?", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469807029", "createdAt": "2020-08-13T09:05:41Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-audit/src/main/java/org/jbpm/services/task/audit/JPATaskLifeCycleEventListener.java", "diffHunk": "@@ -48,7 +48,11 @@\n  *\n  */\n public class JPATaskLifeCycleEventListener extends PersistableEventListener implements TaskLifeCycleEventListener {\n-    \n+\n+    public static final String METADATA_TASK_EVENT = \"TASK_EVENT\";\n+    public static final String METADATA_AUDIT_TASK = \"TASK_AUDIT_EVENT\";\n+    public static final String METADATA_INPUT_VAR_EVENT = \"TASK_INPUT_VAR_EVENT\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzNzQ4OQ==", "bodyText": "it should be reference by indexAndPersistVariables method", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r472937489", "createdAt": "2020-08-19T10:48:18Z", "author": {"login": "elguardian"}, "path": "jbpm-human-task/jbpm-human-task-audit/src/main/java/org/jbpm/services/task/audit/JPATaskLifeCycleEventListener.java", "diffHunk": "@@ -48,7 +48,11 @@\n  *\n  */\n public class JPATaskLifeCycleEventListener extends PersistableEventListener implements TaskLifeCycleEventListener {\n-    \n+\n+    public static final String METADATA_TASK_EVENT = \"TASK_EVENT\";\n+    public static final String METADATA_AUDIT_TASK = \"TASK_AUDIT_EVENT\";\n+    public static final String METADATA_INPUT_VAR_EVENT = \"TASK_INPUT_VAR_EVENT\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwNzAyOQ=="}, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTY2NjAwOnYy", "diffSide": "RIGHT", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/JPAWorkingMemoryDbLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwOToxMjo0OFrOHADBZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDo0NDoxM1rOHDBr3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxMTU1Ng==", "bodyText": "Why changing access modifier to protected?", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469811556", "createdAt": "2020-08-13T09:12:48Z", "author": {"login": "afalhambra"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/JPAWorkingMemoryDbLogger.java", "diffHunk": "@@ -57,18 +56,19 @@\n  * Enables history log via JPA.\n  * \n  */\n-public class JPAWorkingMemoryDbLogger extends AbstractAuditLogger {\n+public class JPAWorkingMemoryDbLogger extends AbstractAuditLoggerAdapter {\n \n     private static final Logger logger = LoggerFactory.getLogger(JPAWorkingMemoryDbLogger.class);\n-    \n-    private static final String[] KNOWN_UT_JNDI_KEYS = new String[] {\"UserTransaction\", \"java:jboss/UserTransaction\", System.getProperty(\"jbpm.ut.jndi.lookup\")};\n-    \n+\n+    private static final String[] KNOWN_UT_JNDI_KEYS = new String[]{\"UserTransaction\", \"java:jboss/UserTransaction\", System.getProperty(\"jbpm.ut.jndi.lookup\")};\n+\n     private boolean isJTA = true;\n     private boolean sharedEM = false;\n-    \n+\n     private EntityManagerFactory emf;\n-    \n-    private ProcessIndexerManager indexManager = ProcessIndexerManager.get();\n+\n+    protected ProcessIndexerManager indexManager = ProcessIndexerManager.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzNTM4OA==", "bodyText": "removed", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r472935388", "createdAt": "2020-08-19T10:44:13Z", "author": {"login": "elguardian"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/JPAWorkingMemoryDbLogger.java", "diffHunk": "@@ -57,18 +56,19 @@\n  * Enables history log via JPA.\n  * \n  */\n-public class JPAWorkingMemoryDbLogger extends AbstractAuditLogger {\n+public class JPAWorkingMemoryDbLogger extends AbstractAuditLoggerAdapter {\n \n     private static final Logger logger = LoggerFactory.getLogger(JPAWorkingMemoryDbLogger.class);\n-    \n-    private static final String[] KNOWN_UT_JNDI_KEYS = new String[] {\"UserTransaction\", \"java:jboss/UserTransaction\", System.getProperty(\"jbpm.ut.jndi.lookup\")};\n-    \n+\n+    private static final String[] KNOWN_UT_JNDI_KEYS = new String[]{\"UserTransaction\", \"java:jboss/UserTransaction\", System.getProperty(\"jbpm.ut.jndi.lookup\")};\n+\n     private boolean isJTA = true;\n     private boolean sharedEM = false;\n-    \n+\n     private EntityManagerFactory emf;\n-    \n-    private ProcessIndexerManager indexManager = ProcessIndexerManager.get();\n+\n+    protected ProcessIndexerManager indexManager = ProcessIndexerManager.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxMTU1Ng=="}, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTY3MjIyOnYy", "diffSide": "RIGHT", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/JPAWorkingMemoryDbLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwOToxNDoyMlrOHADFIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDo0OTowM1rOHDB1rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxMjUxNQ==", "bodyText": "Same here, not sure why we need to change it to protected?", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469812515", "createdAt": "2020-08-13T09:14:22Z", "author": {"login": "afalhambra"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/JPAWorkingMemoryDbLogger.java", "diffHunk": "@@ -107,154 +107,124 @@ public JPAWorkingMemoryDbLogger(Environment env) {\n         internalSetIsJTA(env);\n     }\n \n-    private void internalSetIsJTA(Environment env) { \n+    protected void internalSetIsJTA(Environment env) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzNzkwMQ==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r472937901", "createdAt": "2020-08-19T10:49:03Z", "author": {"login": "elguardian"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/JPAWorkingMemoryDbLogger.java", "diffHunk": "@@ -107,154 +107,124 @@ public JPAWorkingMemoryDbLogger(Environment env) {\n         internalSetIsJTA(env);\n     }\n \n-    private void internalSetIsJTA(Environment env) { \n+    protected void internalSetIsJTA(Environment env) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxMjUxNQ=="}, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTY3NTg5OnYy", "diffSide": "RIGHT", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/JPAWorkingMemoryDbLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwOToxNTowOFrOHADHOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDo0OToxOVrOHDB2Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxMzA0OQ==", "bodyText": "Unnecessary unboxing.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        isJTA = bool.booleanValue();\n          \n          \n            \n                        isJTA = bool;", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r469813049", "createdAt": "2020-08-13T09:15:08Z", "author": {"login": "afalhambra"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/JPAWorkingMemoryDbLogger.java", "diffHunk": "@@ -107,154 +107,124 @@ public JPAWorkingMemoryDbLogger(Environment env) {\n         internalSetIsJTA(env);\n     }\n \n-    private void internalSetIsJTA(Environment env) { \n+    protected void internalSetIsJTA(Environment env) {\n         Boolean bool = (Boolean) env.get(\"IS_JTA_TRANSACTION\");\n         if (bool != null) {\n-        \tisJTA = bool.booleanValue();\n+            isJTA = bool.booleanValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzODA1NA==", "bodyText": "removed the change.", "url": "https://github.com/kiegroup/jbpm/pull/1725#discussion_r472938054", "createdAt": "2020-08-19T10:49:19Z", "author": {"login": "elguardian"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/JPAWorkingMemoryDbLogger.java", "diffHunk": "@@ -107,154 +107,124 @@ public JPAWorkingMemoryDbLogger(Environment env) {\n         internalSetIsJTA(env);\n     }\n \n-    private void internalSetIsJTA(Environment env) { \n+    protected void internalSetIsJTA(Environment env) {\n         Boolean bool = (Boolean) env.get(\"IS_JTA_TRANSACTION\");\n         if (bool != null) {\n-        \tisJTA = bool.booleanValue();\n+            isJTA = bool.booleanValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxMzA0OQ=="}, "originalCommit": {"oid": "623854f8d777fa6edbd54844d3a0ace8188f75cc"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1777, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}