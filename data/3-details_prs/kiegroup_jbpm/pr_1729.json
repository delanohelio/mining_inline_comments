{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4Nzg5MjUz", "number": 1729, "title": "[JBPM-9287] Adding official support for fluent API", "bodyText": "Implementing fluent API in already existing classes\nJIRA:\nJBPM-9287\nreferenced Pull Requests:\nkiegroup/droolsjbpm-knowledge#457", "createdAt": "2020-08-17T12:05:13Z", "url": "https://github.com/kiegroup/jbpm/pull/1729", "merged": true, "mergeCommit": {"oid": "25ce6b153c65f4b1924a13f131a0eb647e7f80ad"}, "closed": true, "closedAt": "2020-08-26T06:42:33Z", "author": {"login": "fjtirado"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc_xeglgBqjM2NjE2MDY3OTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBEQKZABqjM2Nzk0NzUwMjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f54e5229da735ce92c833a949ea0b3d988f652b", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/8f54e5229da735ce92c833a949ea0b3d988f652b", "committedDate": "2020-08-17T11:58:47Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}, "afterCommit": {"oid": "e44b13a803c12380d9f8bf2f1543d80dddbca986", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/e44b13a803c12380d9f8bf2f1543d80dddbca986", "committedDate": "2020-08-17T12:21:42Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e44b13a803c12380d9f8bf2f1543d80dddbca986", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/e44b13a803c12380d9f8bf2f1543d80dddbca986", "committedDate": "2020-08-17T12:21:42Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}, "afterCommit": {"oid": "4319fbfcdbb97aacca6fd6030ff4bffbd8979ae6", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/4319fbfcdbb97aacca6fd6030ff4bffbd8979ae6", "committedDate": "2020-08-17T12:52:24Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4319fbfcdbb97aacca6fd6030ff4bffbd8979ae6", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/4319fbfcdbb97aacca6fd6030ff4bffbd8979ae6", "committedDate": "2020-08-17T12:52:24Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}, "afterCommit": {"oid": "d4c046c8b5ff0141c67cf19622250c4cdf83b565", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/d4c046c8b5ff0141c67cf19622250c4cdf83b565", "committedDate": "2020-08-17T13:19:10Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4c046c8b5ff0141c67cf19622250c4cdf83b565", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/d4c046c8b5ff0141c67cf19622250c4cdf83b565", "committedDate": "2020-08-17T13:19:10Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}, "afterCommit": {"oid": "7098befbba2ebd6c092b99b24d6b3ea93499e44c", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/7098befbba2ebd6c092b99b24d6b3ea93499e44c", "committedDate": "2020-08-17T13:50:30Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7098befbba2ebd6c092b99b24d6b3ea93499e44c", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/7098befbba2ebd6c092b99b24d6b3ea93499e44c", "committedDate": "2020-08-17T13:50:30Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}, "afterCommit": {"oid": "21822e222f97627e0aeec4b46981a246b42dc716", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/21822e222f97627e0aeec4b46981a246b42dc716", "committedDate": "2020-08-17T13:53:07Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21822e222f97627e0aeec4b46981a246b42dc716", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/21822e222f97627e0aeec4b46981a246b42dc716", "committedDate": "2020-08-17T13:53:07Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}, "afterCommit": {"oid": "434810946ed1e5aba7bc206b38948e9b2dc09008", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/434810946ed1e5aba7bc206b38948e9b2dc09008", "committedDate": "2020-08-17T15:43:10Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "434810946ed1e5aba7bc206b38948e9b2dc09008", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/434810946ed1e5aba7bc206b38948e9b2dc09008", "committedDate": "2020-08-17T15:43:10Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}, "afterCommit": {"oid": "a20458b3eab87e8b057296c1148ad69d94ffad4e", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/a20458b3eab87e8b057296c1148ad69d94ffad4e", "committedDate": "2020-08-17T15:54:26Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MDI2NTEz", "url": "https://github.com/kiegroup/jbpm/pull/1729#pullrequestreview-469026513", "createdAt": "2020-08-18T06:31:18Z", "commit": {"oid": "a20458b3eab87e8b057296c1148ad69d94ffad4e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a20458b3eab87e8b057296c1148ad69d94ffad4e", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/a20458b3eab87e8b057296c1148ad69d94ffad4e", "committedDate": "2020-08-17T15:54:26Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}, "afterCommit": {"oid": "8d063285b00934a729a9c6258033ae8d74112d88", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/8d063285b00934a729a9c6258033ae8d74112d88", "committedDate": "2020-08-18T10:06:44Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d063285b00934a729a9c6258033ae8d74112d88", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/8d063285b00934a729a9c6258033ae8d74112d88", "committedDate": "2020-08-18T10:06:44Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}, "afterCommit": {"oid": "1c7274f278b41d36b718fcda35910e3e82fadab5", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/1c7274f278b41d36b718fcda35910e3e82fadab5", "committedDate": "2020-08-18T12:03:58Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c7274f278b41d36b718fcda35910e3e82fadab5", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/1c7274f278b41d36b718fcda35910e3e82fadab5", "committedDate": "2020-08-18T12:03:58Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}, "afterCommit": {"oid": "ebf81cc01fbcef3b12c37f03f8d0095697ca42b9", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/ebf81cc01fbcef3b12c37f03f8d0095697ca42b9", "committedDate": "2020-08-18T14:42:07Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ebf81cc01fbcef3b12c37f03f8d0095697ca42b9", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/ebf81cc01fbcef3b12c37f03f8d0095697ca42b9", "committedDate": "2020-08-18T14:42:07Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}, "afterCommit": {"oid": "282d22e7a723b587a057379d3f39da84909e70a4", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/282d22e7a723b587a057379d3f39da84909e70a4", "committedDate": "2020-08-19T07:28:52Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "282d22e7a723b587a057379d3f39da84909e70a4", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/282d22e7a723b587a057379d3f39da84909e70a4", "committedDate": "2020-08-19T07:28:52Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}, "afterCommit": {"oid": "c2ded3e3011c300e0e4792ca27b46d9c2f3801ca", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/c2ded3e3011c300e0e4792ca27b46d9c2f3801ca", "committedDate": "2020-08-19T07:36:25Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2ded3e3011c300e0e4792ca27b46d9c2f3801ca", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/c2ded3e3011c300e0e4792ca27b46d9c2f3801ca", "committedDate": "2020-08-19T07:36:25Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}, "afterCommit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/f09f70a3604439d9b8fa53a4f1be7360e762c852", "committedDate": "2020-08-19T11:16:57Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMjUyOTk3", "url": "https://github.com/kiegroup/jbpm/pull/1729#pullrequestreview-472252997", "createdAt": "2020-08-21T07:05:26Z", "commit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzowNToyNlrOHEeKDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOTozNDo1N1rOHEmFRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1MDQ0NQ==", "bodyText": "Not a change of yours, but I think we can declare this as final", "url": "https://github.com/kiegroup/jbpm/pull/1729#discussion_r474450445", "createdAt": "2020-08-21T07:05:26Z", "author": {"login": "afalhambra"}, "path": "jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/NodeFactory.java", "diffHunk": "@@ -16,37 +16,50 @@\n \n package org.jbpm.ruleflow.core.factory;\n \n-import org.jbpm.ruleflow.core.RuleFlowNodeContainerFactory;\n import org.jbpm.workflow.core.Node;\n import org.jbpm.workflow.core.NodeContainer;\n+import org.kie.api.fluent.NodeBuilder;\n+import org.kie.api.fluent.NodeContainerBuilder;\n \n-/**\n- *\n- */\n-public abstract class NodeFactory {\n+@SuppressWarnings(\"unchecked\")\n+public abstract class NodeFactory<T extends NodeBuilder<T, P>, P extends NodeContainerBuilder<P, ?>> implements NodeBuilder<T, P> {\n \n-    private Node node;\n+    protected Object node;\n     private NodeContainer nodeContainer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ3NzUyNw==", "bodyText": "may be final", "url": "https://github.com/kiegroup/jbpm/pull/1729#discussion_r474477527", "createdAt": "2020-08-21T07:39:14Z", "author": {"login": "afalhambra"}, "path": "jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/TypeConverter.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.ruleflow.core.factory;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.jbpm.process.core.datatype.DataType;\n+import org.jbpm.process.core.datatype.impl.type.BooleanDataType;\n+import org.jbpm.process.core.datatype.impl.type.EnumDataType;\n+import org.jbpm.process.core.datatype.impl.type.FloatDataType;\n+import org.jbpm.process.core.datatype.impl.type.IntegerDataType;\n+import org.jbpm.process.core.datatype.impl.type.ListDataType;\n+import org.jbpm.process.core.datatype.impl.type.ObjectDataType;\n+import org.jbpm.process.core.datatype.impl.type.StringDataType;\n+\n+public class TypeConverter {\n+\n+    private TypeConverter() {}\n+\n+    private static Map<Class<?>, DataType> classTypeMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ4MjU0NA==", "bodyText": "may be final", "url": "https://github.com/kiegroup/jbpm/pull/1729#discussion_r474482544", "createdAt": "2020-08-21T07:45:05Z", "author": {"login": "afalhambra"}, "path": "jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/DialectConverter.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.ruleflow.core.factory;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+import org.drools.compiler.rule.builder.dialect.java.JavaDialect;\n+import org.kie.api.fluent.Dialect;\n+\n+public class DialectConverter {\n+\n+    private DialectConverter() {}\n+\n+    // this is not stored in the enum to make in independent of the implementation\n+    private static Map<Dialect, String> dialectMap = new EnumMap<>(Dialect.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxMjQzMQ==", "bodyText": "just to double check whether we don't want to expose this outside of this package? default access modifier is ok or should we use public?", "url": "https://github.com/kiegroup/jbpm/pull/1729#discussion_r474512431", "createdAt": "2020-08-21T08:20:06Z", "author": {"login": "afalhambra"}, "path": "jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/AbstractCompositeNodeFactory.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.ruleflow.core.factory;\n+\n+import org.jbpm.process.core.context.variable.Variable;\n+import org.jbpm.process.core.context.variable.VariableScope;\n+import org.jbpm.process.core.datatype.DataType;\n+import org.jbpm.ruleflow.core.RuleFlowNodeContainerFactory;\n+import org.jbpm.workflow.core.Node;\n+import org.jbpm.workflow.core.NodeContainer;\n+import org.jbpm.workflow.core.node.CompositeContextNode;\n+import org.kie.api.fluent.NodeContainerBuilder;\n+\n+abstract class AbstractCompositeNodeFactory<T extends NodeContainerBuilder<T, P>, P extends NodeContainerBuilder<P, ?>> extends RuleFlowNodeContainerFactory<T, P> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxMzQyNg==", "bodyText": "Maybe we can use below to get rid of the unchecked cast warnings\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            abstract class AbstractCompositeNodeFactory<T extends NodeContainerBuilder<T, P>, P extends NodeContainerBuilder<P, ?>> extends RuleFlowNodeContainerFactory<T, P> {\n          \n          \n            \n            @SuppressWarnings(\"unchecked\")\n          \n          \n            \n            abstract class AbstractCompositeNodeFactory<T extends NodeContainerBuilder<T, P>, P extends NodeContainerBuilder<P, ?>> extends RuleFlowNodeContainerFactory<T, P> {", "url": "https://github.com/kiegroup/jbpm/pull/1729#discussion_r474513426", "createdAt": "2020-08-21T08:21:13Z", "author": {"login": "afalhambra"}, "path": "jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/AbstractCompositeNodeFactory.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.ruleflow.core.factory;\n+\n+import org.jbpm.process.core.context.variable.Variable;\n+import org.jbpm.process.core.context.variable.VariableScope;\n+import org.jbpm.process.core.datatype.DataType;\n+import org.jbpm.ruleflow.core.RuleFlowNodeContainerFactory;\n+import org.jbpm.workflow.core.Node;\n+import org.jbpm.workflow.core.NodeContainer;\n+import org.jbpm.workflow.core.node.CompositeContextNode;\n+import org.kie.api.fluent.NodeContainerBuilder;\n+\n+abstract class AbstractCompositeNodeFactory<T extends NodeContainerBuilder<T, P>, P extends NodeContainerBuilder<P, ?>> extends RuleFlowNodeContainerFactory<T, P> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUyNDk3OQ==", "bodyText": "Not a change of yours, but we can change it now as it may be final", "url": "https://github.com/kiegroup/jbpm/pull/1729#discussion_r474524979", "createdAt": "2020-08-21T08:34:25Z", "author": {"login": "afalhambra"}, "path": "jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/BoundaryEventNodeFactory.java", "diffHunk": "@@ -16,62 +16,61 @@\n \n package org.jbpm.ruleflow.core.factory;\n \n+import java.util.function.UnaryOperator;\n+\n import org.jbpm.process.core.event.EventFilter;\n import org.jbpm.process.core.event.EventTransformer;\n import org.jbpm.process.core.event.EventTypeFilter;\n-import org.jbpm.ruleflow.core.RuleFlowNodeContainerFactory;\n-import org.jbpm.workflow.core.Node;\n import org.jbpm.workflow.core.NodeContainer;\n import org.jbpm.workflow.core.node.BoundaryEventNode;\n+import org.kie.api.fluent.BoundaryEventNodeBuilder;\n+import org.kie.api.fluent.Dialect;\n+import org.kie.api.fluent.NodeContainerBuilder;\n \n-public class BoundaryEventNodeFactory extends NodeFactory {\n+public class BoundaryEventNodeFactory<T extends NodeContainerBuilder<T, ?>> extends NodeFactory<BoundaryEventNodeBuilder<T>, T> implements BoundaryEventNodeBuilder<T> {\n \n     private NodeContainer nodeContainer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU0NzA1OA==", "bodyText": "need one space indentation.", "url": "https://github.com/kiegroup/jbpm/pull/1729#discussion_r474547058", "createdAt": "2020-08-21T08:58:05Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java", "diffHunk": "@@ -50,7 +48,7 @@ public void testProcessFactory() throws Exception {\n                 // nodes\n                 .startNode(1).name(\"Start\").done()\n                 .actionNode(2).name(\"Action\")\n-                .action(\"java\",\n+               .action(Dialect.JAVA,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU0NzE4MQ==", "bodyText": "same here", "url": "https://github.com/kiegroup/jbpm/pull/1729#discussion_r474547181", "createdAt": "2020-08-21T08:58:13Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java", "diffHunk": "@@ -78,7 +76,7 @@ public void testCompositeNode() throws Exception {\n                 .compositeNode(2)\n                 .name(\"SubProcess\")\n                 .startNode(1).name(\"SubProcess Start\").done()\n-                .actionNode(2).name(\"SubProcess Action\").action(\"java\",\n+               .actionNode(2).name(\"SubProcess Action\").action(Dialect.JAVA,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU0NzMxOQ==", "bodyText": "same here", "url": "https://github.com/kiegroup/jbpm/pull/1729#discussion_r474547319", "createdAt": "2020-08-21T08:58:23Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java", "diffHunk": "@@ -229,7 +227,7 @@ public void testSignalEvent() throws Exception {\n                           new org.jbpm.process.core.datatype.impl.type.StringDataType())\n                 .startNode(1).name(\"Start\").done()\n                 .eventNode(2).name(\"Event1\").eventType(\"testEvent\").variableName(\"eventData\").done()\n-                .actionNode(3).name(\"simpleActionNode\").action(\"java\",\n+               .actionNode(3).name(\"simpleActionNode\").action(Dialect.JAVA,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU0NzQ2Mw==", "bodyText": "same here", "url": "https://github.com/kiegroup/jbpm/pull/1729#discussion_r474547463", "createdAt": "2020-08-21T08:58:32Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java", "diffHunk": "@@ -269,9 +267,8 @@ public void testActionNodeIsDroolsAction() throws Exception {\n                 .name(\"ActionNodeActionProcess\").version(\"1\")\n                 .startNode(1).name(\"Start\").done()\n                 .endNode(3).name(\"End\").done()\n-                .actionNode(2).name(\"printTextActionNode\").action(\"java\",\n-                                                                  \"System.out.println(\\\"test print\\\");\",\n-                                                                  true).done()\n+               .actionNode(2).name(\"printTextActionNode\").action(Dialect.JAVA,\n+                                                                 \"System.out.println(\\\"test print\\\");\").done()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU0OTkyNA==", "bodyText": "I like pepe - I use the same literal string in my tests :D", "url": "https://github.com/kiegroup/jbpm/pull/1729#discussion_r474549924", "createdAt": "2020-08-21T09:01:14Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/test/java/org/kie/api/fluent/ProcessBuilderTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.api.fluent;\n+\n+import org.jbpm.bpmn2.JbpmBpmn2TestCase;\n+import org.junit.Test;\n+import org.kie.api.KieBase;\n+import org.kie.api.definition.process.Process;\n+import org.kie.api.internal.utils.ServiceRegistry;\n+import org.kie.api.io.KieResources;\n+import org.kie.api.io.Resource;\n+import org.kie.api.runtime.KieSession;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.kie.api.fluent.Variable.var;\n+\n+public class ProcessBuilderTest extends JbpmBpmn2TestCase {\n+\n+    public ProcessBuilderTest() {\n+        super(false);\n+    }\n+\n+    @Test\n+    public void testProcessFactory() throws Exception {\n+        final String processId = \"org.jbpm.process\";\n+        final String processName = \"My process\";\n+        final String packageName = \"org.jbpm\";\n+        ProcessBuilderFactory factory = ProcessBuilderFactories.get();\n+        Process process =\n+                factory.processBuilder(processId)\n+                       // package and name \n+                       .packageName(packageName)\n+                       .name(processName).setMetadata(\"pepe\", true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU1MzQ4NA==", "bodyText": "Maybe testProcessBuilderFactory is more appropriated here to avoid any confusion, wdyt?", "url": "https://github.com/kiegroup/jbpm/pull/1729#discussion_r474553484", "createdAt": "2020-08-21T09:05:13Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/test/java/org/kie/api/fluent/ProcessBuilderTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.api.fluent;\n+\n+import org.jbpm.bpmn2.JbpmBpmn2TestCase;\n+import org.junit.Test;\n+import org.kie.api.KieBase;\n+import org.kie.api.definition.process.Process;\n+import org.kie.api.internal.utils.ServiceRegistry;\n+import org.kie.api.io.KieResources;\n+import org.kie.api.io.Resource;\n+import org.kie.api.runtime.KieSession;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.kie.api.fluent.Variable.var;\n+\n+public class ProcessBuilderTest extends JbpmBpmn2TestCase {\n+\n+    public ProcessBuilderTest() {\n+        super(false);\n+    }\n+\n+    @Test\n+    public void testProcessFactory() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU1NzQ3Ng==", "bodyText": "I would add an assert here making sure that the ProcessInstance object created is not null, just to make test more robust, wdyt?", "url": "https://github.com/kiegroup/jbpm/pull/1729#discussion_r474557476", "createdAt": "2020-08-21T09:09:31Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/test/java/org/kie/api/fluent/ProcessBuilderTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.api.fluent;\n+\n+import org.jbpm.bpmn2.JbpmBpmn2TestCase;\n+import org.junit.Test;\n+import org.kie.api.KieBase;\n+import org.kie.api.definition.process.Process;\n+import org.kie.api.internal.utils.ServiceRegistry;\n+import org.kie.api.io.KieResources;\n+import org.kie.api.io.Resource;\n+import org.kie.api.runtime.KieSession;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.kie.api.fluent.Variable.var;\n+\n+public class ProcessBuilderTest extends JbpmBpmn2TestCase {\n+\n+    public ProcessBuilderTest() {\n+        super(false);\n+    }\n+\n+    @Test\n+    public void testProcessFactory() throws Exception {\n+        final String processId = \"org.jbpm.process\";\n+        final String processName = \"My process\";\n+        final String packageName = \"org.jbpm\";\n+        ProcessBuilderFactory factory = ProcessBuilderFactories.get();\n+        Process process =\n+                factory.processBuilder(processId)\n+                       // package and name \n+                       .packageName(packageName)\n+                       .name(processName).setMetadata(\"pepe\", true)\n+                       // start node\n+                       .startNode(1).name(\"Start\").done()\n+                       // Add variable of type string\n+                       .variable(var(\"pepe\", String.class))\n+                       // Add exception handler\n+                       .exceptionHandler(IllegalArgumentException.class, Dialect.JAVA, \"System.out.println(\\\"Exception\\\");\")\n+                       // script node in Java language that prints \"action\"\n+                       .actionNode(2).name(\"Action\")\n+                       .action(Dialect.JAVA,\n+                               \"System.out.println(\\\"Action\\\");\").done()\n+                       // end node\n+                       .endNode(3).name(\"End\").done()\n+                       // connections\n+                       .connection(1,\n+                                   2)\n+                       .connection(2,\n+                                   3)\n+                       .build();\n+        // Build resource from ProcessBuilder\n+        assertEquals(processId, process.getId());\n+        assertEquals(processName, process.getName());\n+        assertEquals(packageName, process.getPackageName());\n+        assertEquals(true, process.getMetaData().get(\"pepe\"));\n+        KieResources resources = ServiceRegistry.getInstance().get(KieResources.class);\n+        Resource res = resources\n+                                .newByteArrayResource(factory.toBytes(process))\n+                                .setSourcePath(\"/tmp/processFactory.bpmn2\"); // source path or target path must be set to be added into kbase\n+        // Create kie base \n+        KieBase kbase = createKnowledgeBaseFromResources(res);\n+        // Create kie session\n+        KieSession ksession = createKnowledgeSession(kbase);\n+        // execute process\n+        ksession.startProcess(processId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU2MDY2Ng==", "bodyText": "need one more space indentation", "url": "https://github.com/kiegroup/jbpm/pull/1729#discussion_r474560666", "createdAt": "2020-08-21T09:13:13Z", "author": {"login": "afalhambra"}, "path": "jbpm-flow/src/test/java/org/jbpm/process/ProcessFactoryTest.java", "diffHunk": "@@ -32,11 +35,11 @@ public void testProcessFactory() throws Exception {\n         RuleFlowProcessFactory factory = RuleFlowProcessFactory.createProcess(\"org.drools.core.process\");\n         factory\n                 // header\n-                .name(\"My process\").packageName(\"org.drools\")\n+               .name(\"My process\").packageName(\"org.drools\").variable(Variable.var(\"pepe\", String.class))\n                 // nodes\n                 .startNode(1).name(\"Start\").done()\n                 .actionNode(2).name(\"Action\")\n-                .action(\"java\",\n+               .action(Dialect.JAVA,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU2MDc5Mg==", "bodyText": "need one more space indentation", "url": "https://github.com/kiegroup/jbpm/pull/1729#discussion_r474560792", "createdAt": "2020-08-21T09:13:22Z", "author": {"login": "afalhambra"}, "path": "jbpm-flow/src/test/java/org/jbpm/process/ProcessFactoryTest.java", "diffHunk": "@@ -32,11 +35,11 @@ public void testProcessFactory() throws Exception {\n         RuleFlowProcessFactory factory = RuleFlowProcessFactory.createProcess(\"org.drools.core.process\");\n         factory\n                 // header\n-                .name(\"My process\").packageName(\"org.drools\")\n+               .name(\"My process\").packageName(\"org.drools\").variable(Variable.var(\"pepe\", String.class))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU4MDI5Mg==", "bodyText": "It would be good to follow naming convention for type parameters by using one single letter.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private <Scope extends Context> Scope getScope(String scopeType, Class<Scope> scopeClass) {\n          \n          \n            \n                private <S extends Context> S getScope(String scopeType, Class<S> scopeClass) {S", "url": "https://github.com/kiegroup/jbpm/pull/1729#discussion_r474580292", "createdAt": "2020-08-21T09:34:57Z", "author": {"login": "afalhambra"}, "path": "jbpm-flow/src/main/java/org/jbpm/ruleflow/core/RuleFlowNodeContainerFactory.java", "diffHunk": "@@ -27,106 +36,174 @@\n import org.jbpm.ruleflow.core.factory.HumanTaskNodeFactory;\n import org.jbpm.ruleflow.core.factory.JoinFactory;\n import org.jbpm.ruleflow.core.factory.MilestoneNodeFactory;\n+import org.jbpm.ruleflow.core.factory.NodeFactory;\n import org.jbpm.ruleflow.core.factory.RuleSetNodeFactory;\n import org.jbpm.ruleflow.core.factory.SplitFactory;\n import org.jbpm.ruleflow.core.factory.StartNodeFactory;\n import org.jbpm.ruleflow.core.factory.SubProcessNodeFactory;\n import org.jbpm.ruleflow.core.factory.TimerNodeFactory;\n+import org.jbpm.ruleflow.core.factory.TypeConverter;\n import org.jbpm.ruleflow.core.factory.WorkItemNodeFactory;\n import org.jbpm.workflow.core.NodeContainer;\n import org.jbpm.workflow.core.impl.ConnectionImpl;\n+import org.jbpm.workflow.core.impl.DroolsConsequenceAction;\n import org.kie.api.definition.process.Node;\n+import org.kie.api.fluent.Dialect;\n+import org.kie.api.fluent.NodeContainerBuilder;\n+import org.kie.api.fluent.Variable;\n \n-public abstract class RuleFlowNodeContainerFactory {\n+@SuppressWarnings(\"unchecked\")\n+public abstract class RuleFlowNodeContainerFactory<T extends NodeContainerBuilder<T, P>, P extends NodeContainerBuilder<P, ?>> extends NodeFactory<T, P> implements NodeContainerBuilder<T, P> {\n \n-    private NodeContainer nodeContainer;\n \n-    protected void setNodeContainer(NodeContainer nodeContainer) {\n-    \tthis.nodeContainer = nodeContainer;\n-    }\n-    \n-    protected NodeContainer getNodeContainer() {\n-    \treturn nodeContainer;\n+    protected RuleFlowNodeContainerFactory(P nodeContainerFactory, NodeContainer nodeContainer, NodeContainer node, Object id) {\n+        super(nodeContainerFactory, nodeContainer, node, id);\n     }\n \n-    public StartNodeFactory startNode(long id) {\n-        return new StartNodeFactory(this, nodeContainer, id);\n+    @Override\n+    public StartNodeFactory<T> startNode(long id) {\n+        return new StartNodeFactory<>((T) this, (NodeContainer) node, id);\n     }\n \n-    public EndNodeFactory endNode(long id) {\n-        return new EndNodeFactory(this, nodeContainer, id);\n+    @Override\n+    public EndNodeFactory<T> endNode(long id) {\n+        return new EndNodeFactory<>((T) this, (NodeContainer) node, id);\n     }\n \n-    public ActionNodeFactory actionNode(long id) {\n-        return new ActionNodeFactory(this, nodeContainer, id);\n+    @Override\n+    public ActionNodeFactory<T> actionNode(long id) {\n+        return new ActionNodeFactory<>((T) this, (NodeContainer) node, id);\n     }\n \n-    public MilestoneNodeFactory milestoneNode(long id) {\n-        return new MilestoneNodeFactory(this, nodeContainer, id);\n+    @Override\n+    public MilestoneNodeFactory<T> milestoneNode(long id) {\n+        return new MilestoneNodeFactory<>((T) this, (NodeContainer) node, id);\n     }\n \n-    public TimerNodeFactory timerNode(long id) {\n-        return new TimerNodeFactory(this, nodeContainer, id);\n+    @Override\n+    public TimerNodeFactory<T> timerNode(long id) {\n+        return new TimerNodeFactory<>((T) this, (NodeContainer) node, id);\n     }\n \n-    public HumanTaskNodeFactory humanTaskNode(long id) {\n-        return new HumanTaskNodeFactory(this, nodeContainer, id);\n+    @Override\n+    public HumanTaskNodeFactory<T> humanTaskNode(long id) {\n+        return new HumanTaskNodeFactory<>((T) this, (NodeContainer) node, id);\n     }\n \n-    public SubProcessNodeFactory subProcessNode(long id) {\n-        return new SubProcessNodeFactory(this, nodeContainer, id);\n+    @Override\n+    public SubProcessNodeFactory<T> subProcessNode(long id) {\n+        return new SubProcessNodeFactory<>((T) this, (NodeContainer) node, id);\n     }\n \n-    public SplitFactory splitNode(long id) {\n-        return new SplitFactory(this, nodeContainer, id);\n+    @Override\n+    public SplitFactory<T> splitNode(long id) {\n+        return new SplitFactory<>((T) this, (NodeContainer) node, id);\n     }\n \n-    public JoinFactory joinNode(long id) {\n-        return new JoinFactory(this, nodeContainer, id);\n+    @Override\n+    public JoinFactory<T> joinNode(long id) {\n+        return new JoinFactory<>((T) this, (NodeContainer) node, id);\n     }\n \n-    public RuleSetNodeFactory ruleSetNode(long id) {\n-        return new RuleSetNodeFactory(this, nodeContainer, id);\n+    @Override\n+    public RuleSetNodeFactory<T> ruleSetNode(long id) {\n+        return new RuleSetNodeFactory<>((T) this, (NodeContainer) node, id);\n     }\n \n-    public FaultNodeFactory faultNode(long id) {\n-        return new FaultNodeFactory(this, nodeContainer, id);\n+    @Override\n+    public FaultNodeFactory<T> faultNode(long id) {\n+        return new FaultNodeFactory<>((T) this, (NodeContainer) node, id);\n     }\n \n-    public EventNodeFactory eventNode(long id) {\n-        return new EventNodeFactory(this, nodeContainer, id);\n+    @Override\n+    public EventNodeFactory<T> eventNode(long id) {\n+        return new EventNodeFactory<>((T) this, (NodeContainer) node, id);\n     }\n \n-    public BoundaryEventNodeFactory boundaryEventNode(long id) {\n-        return new BoundaryEventNodeFactory(this, nodeContainer, id);\n+    @Override\n+    public BoundaryEventNodeFactory<T> boundaryEventNode(long id) {\n+        return new BoundaryEventNodeFactory<>((T) this, (NodeContainer) node, id);\n     }\n \n-    public CompositeNodeFactory compositeNode(long id) {\n-        return new CompositeNodeFactory(this, nodeContainer, id);\n+    @Override\n+    public CompositeNodeFactory<T> compositeNode(long id) {\n+        return new CompositeNodeFactory<>((T) this, (NodeContainer) node, id);\n     }\n \n-    public ForEachNodeFactory forEachNode(long id) {\n-        return new ForEachNodeFactory(this, nodeContainer, id);\n+    @Override\n+    public ForEachNodeFactory<T> forEachNode(long id) {\n+        return new ForEachNodeFactory<>((T) this, (NodeContainer) node, id);\n     }\n     \n-    public DynamicNodeFactory dynamicNode(long id) {\n-        return new DynamicNodeFactory(this, nodeContainer, id);\n+    @Override\n+    public DynamicNodeFactory<T> dynamicNode(long id) {\n+        return new DynamicNodeFactory<>((T) this, (NodeContainer) node, id);\n     }\n     \n-    public WorkItemNodeFactory workItemNode(long id) {\n-    \treturn new WorkItemNodeFactory(this, nodeContainer, id);\n+    @Override\n+    public WorkItemNodeFactory<T> workItemNode(long id) {\n+        return new WorkItemNodeFactory<>((T) this, (NodeContainer) node, id);\n     }\n \n-    public RuleFlowNodeContainerFactory connection(long fromId, long toId) {\n-        Node from = nodeContainer.getNode(fromId);\n-        Node to = nodeContainer.getNode(toId);\n+    @Override\n+    public T connection(long fromId, long toId) {\n+        Node from = ((NodeContainer) node).getNode(fromId);\n+        Node to = ((NodeContainer) node).getNode(toId);\n         new ConnectionImpl(\n             from, org.jbpm.workflow.core.Node.CONNECTION_DEFAULT_TYPE,\n             to, org.jbpm.workflow.core.Node.CONNECTION_DEFAULT_TYPE);\n-        return this;\n+        return (T) this;\n     }\n     \n-    public abstract RuleFlowNodeContainerFactory done();\n+    @Override\n+    public T exceptionHandler(Class<? extends Throwable> exceptionClass, Dialect dialect, String code) {\n+        return (T) exceptionHandler(exceptionClass.getName(), DialectConverter.fromDialect(dialect), code);\n+    }\n \n+    public RuleFlowNodeContainerFactory<T, P> exceptionHandler(String exception, ExceptionHandler exceptionHandler) {\n+        getScope(ExceptionScope.EXCEPTION_SCOPE, ExceptionScope.class).setExceptionHandler(exception, exceptionHandler);\n+        return this;\n+    }\n+\n+    public RuleFlowNodeContainerFactory<T, P> exceptionHandler(String exception, String dialect, String action) {\n+        ActionExceptionHandler exceptionHandler = new ActionExceptionHandler();\n+        exceptionHandler.setAction(new DroolsConsequenceAction(dialect, action));\n+        return exceptionHandler(exception, exceptionHandler);\n+    }\n+\n+    private <Scope extends Context> Scope getScope(String scopeType, Class<Scope> scopeClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852"}, "originalPosition": 205}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f09f70a3604439d9b8fa53a4f1be7360e762c852", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/f09f70a3604439d9b8fa53a4f1be7360e762c852", "committedDate": "2020-08-19T11:16:57Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}, "afterCommit": {"oid": "d0cd6aed5d49df9605de843c70e1b0680be9174e", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/d0cd6aed5d49df9605de843c70e1b0680be9174e", "committedDate": "2020-08-21T10:49:26Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNDA3NDg4", "url": "https://github.com/kiegroup/jbpm/pull/1729#pullrequestreview-472407488", "createdAt": "2020-08-21T11:16:44Z", "commit": {"oid": "d0cd6aed5d49df9605de843c70e1b0680be9174e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0cd6aed5d49df9605de843c70e1b0680be9174e", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/d0cd6aed5d49df9605de843c70e1b0680be9174e", "committedDate": "2020-08-21T10:49:26Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}, "afterCommit": {"oid": "a3ed99db2e5f098f5bd65a9ae450de5ecbff66ca", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/a3ed99db2e5f098f5bd65a9ae450de5ecbff66ca", "committedDate": "2020-08-21T12:45:05Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d18dd15ac4e4af63e7230ab0eca899e61117b9e9", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/d18dd15ac4e4af63e7230ab0eca899e61117b9e9", "committedDate": "2020-08-21T12:48:15Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3ed99db2e5f098f5bd65a9ae450de5ecbff66ca", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/a3ed99db2e5f098f5bd65a9ae450de5ecbff66ca", "committedDate": "2020-08-21T12:45:05Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}, "afterCommit": {"oid": "d18dd15ac4e4af63e7230ab0eca899e61117b9e9", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/d18dd15ac4e4af63e7230ab0eca899e61117b9e9", "committedDate": "2020-08-21T12:48:15Z", "message": "[JBPM-9287] Adding official support for fluent API\n\nImplementing fluent API in already existing classes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 998, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}