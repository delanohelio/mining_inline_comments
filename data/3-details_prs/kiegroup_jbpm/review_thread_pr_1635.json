{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MjkxNjE4", "number": 1635, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoxNzo1MlrODyk7jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjozMToxN1rODylRFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzYwNDYxOnYy", "diffSide": "RIGHT", "path": "jbpm-audit/src/test/java/org/jbpm/process/audit/jms/AsyncAuditLogProducerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoxNzo1MlrOGGtD9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjozOToyOFrOGHBqig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4MjkzMg==", "bodyText": "May getId be better to use in comparison than getDate ?  Anyway, is it needed to sort the collection?", "url": "https://github.com/kiegroup/jbpm/pull/1635#discussion_r409682932", "createdAt": "2020-04-16T16:17:52Z", "author": {"login": "gmunozfe"}, "path": "jbpm-audit/src/test/java/org/jbpm/process/audit/jms/AsyncAuditLogProducerTest.java", "diffHunk": "@@ -233,12 +235,19 @@ public void testAsyncAuditLoggerComplete() throws Exception {\n         List<ProcessInstanceLog> processInstances = logService.findProcessInstances(\"com.sample.ruleflow\");\n         Assertions.assertThat(processInstances.size()).isEqualTo(1);\n         List<NodeInstanceLog> nodeInstances = logService.findNodeInstances(processInstance.getId());\n+        Collections.sort(nodeInstances, (o1, o2) -> o1.getDate().compareTo(o2.getDate()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805982b7bf61781c02f40044174eff4d3d7915e7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyMDQ5MA==", "bodyText": "that line was  not needed (removed)", "url": "https://github.com/kiegroup/jbpm/pull/1635#discussion_r410020490", "createdAt": "2020-04-17T06:39:28Z", "author": {"login": "elguardian"}, "path": "jbpm-audit/src/test/java/org/jbpm/process/audit/jms/AsyncAuditLogProducerTest.java", "diffHunk": "@@ -233,12 +235,19 @@ public void testAsyncAuditLoggerComplete() throws Exception {\n         List<ProcessInstanceLog> processInstances = logService.findProcessInstances(\"com.sample.ruleflow\");\n         Assertions.assertThat(processInstances.size()).isEqualTo(1);\n         List<NodeInstanceLog> nodeInstances = logService.findNodeInstances(processInstance.getId());\n+        Collections.sort(nodeInstances, (o1, o2) -> o1.getDate().compareTo(o2.getDate()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4MjkzMg=="}, "originalCommit": {"oid": "805982b7bf61781c02f40044174eff4d3d7915e7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzYzNzQ4OnYy", "diffSide": "RIGHT", "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/jms/AsyncAuditLogProducer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoyNTozOVrOGGtYiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjo1MDoxM1rOGHB6Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4ODIwMA==", "bodyText": "It should be BEFORE_NODE_LEFT_EVENT_TYPE, shouldn't it?\nSo, now, it's logging it before leaving the node", "url": "https://github.com/kiegroup/jbpm/pull/1635#discussion_r409688200", "createdAt": "2020-04-16T16:25:39Z", "author": {"login": "gmunozfe"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/jms/AsyncAuditLogProducer.java", "diffHunk": "@@ -161,10 +159,11 @@ public void afterNodeTriggered(ProcessNodeTriggeredEvent event) {\n     \t}\n     }\n \n+\n     @Override\n     public void beforeNodeLeft(ProcessNodeLeftEvent event) {\n-\n-        \n+        NodeInstanceLog log = (NodeInstanceLog) builder.buildEvent(event, null);\n+        sendMessage(log, AFTER_NODE_LEFT_EVENT_TYPE, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805982b7bf61781c02f40044174eff4d3d7915e7"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNDQ2Ng==", "bodyText": "this can cause an incompatibility. So I wouldn't do that at least for now.", "url": "https://github.com/kiegroup/jbpm/pull/1635#discussion_r410024466", "createdAt": "2020-04-17T06:50:13Z", "author": {"login": "elguardian"}, "path": "jbpm-audit/src/main/java/org/jbpm/process/audit/jms/AsyncAuditLogProducer.java", "diffHunk": "@@ -161,10 +159,11 @@ public void afterNodeTriggered(ProcessNodeTriggeredEvent event) {\n     \t}\n     }\n \n+\n     @Override\n     public void beforeNodeLeft(ProcessNodeLeftEvent event) {\n-\n-        \n+        NodeInstanceLog log = (NodeInstanceLog) builder.buildEvent(event, null);\n+        sendMessage(log, AFTER_NODE_LEFT_EVENT_TYPE, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4ODIwMA=="}, "originalCommit": {"oid": "805982b7bf61781c02f40044174eff4d3d7915e7"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzY1MDY3OnYy", "diffSide": "LEFT", "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/NodeInstanceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoyODo1NFrOGGtg_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjo1MTowNFrOGHB7Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY5MDM2NA==", "bodyText": "Setting the level is not longer needed?", "url": "https://github.com/kiegroup/jbpm/pull/1635#discussion_r409690364", "createdAt": "2020-04-16T16:28:54Z", "author": {"login": "gmunozfe"}, "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/NodeInstanceImpl.java", "diffHunk": "@@ -176,15 +175,7 @@ public final void trigger(NodeInstance from, String type) {\n     \t}\n     \t\n     \tif (from != null) {\n-    \t    int level = ((org.jbpm.workflow.instance.NodeInstance)from).getLevel();\n-    \t    ((org.jbpm.workflow.instance.NodeInstanceContainer)getNodeInstanceContainer()).setCurrentLevel(level);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805982b7bf61781c02f40044174eff4d3d7915e7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNDc3OQ==", "bodyText": "nope. this is really complex to explain, but this piece of code creates new NodeInstanceImpl under the good so it is not good either.", "url": "https://github.com/kiegroup/jbpm/pull/1635#discussion_r410024779", "createdAt": "2020-04-17T06:51:04Z", "author": {"login": "elguardian"}, "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/NodeInstanceImpl.java", "diffHunk": "@@ -176,15 +175,7 @@ public final void trigger(NodeInstance from, String type) {\n     \t}\n     \t\n     \tif (from != null) {\n-    \t    int level = ((org.jbpm.workflow.instance.NodeInstance)from).getLevel();\n-    \t    ((org.jbpm.workflow.instance.NodeInstanceContainer)getNodeInstanceContainer()).setCurrentLevel(level);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY5MDM2NA=="}, "originalCommit": {"oid": "805982b7bf61781c02f40044174eff4d3d7915e7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzY1OTczOnYy", "diffSide": "RIGHT", "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/NodeInstanceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjozMToxN1rOGGtm3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjo1MToxM1rOGHB7dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY5MTg2OA==", "bodyText": "\"UniqueId\" could be defined as constant (as it is used three times in this class) (SonarCloud code smell)", "url": "https://github.com/kiegroup/jbpm/pull/1635#discussion_r409691868", "createdAt": "2020-04-16T16:31:17Z", "author": {"login": "gmunozfe"}, "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/NodeInstanceImpl.java", "diffHunk": "@@ -176,15 +175,7 @@ public final void trigger(NodeInstance from, String type) {\n     \t}\n     \t\n     \tif (from != null) {\n-    \t    int level = ((org.jbpm.workflow.instance.NodeInstance)from).getLevel();\n-    \t    ((org.jbpm.workflow.instance.NodeInstanceContainer)getNodeInstanceContainer()).setCurrentLevel(level);\n-\t    \tCollection<Connection> incoming = getNode().getIncomingConnections(type);\n-\t    \tfor (Connection conn : incoming) {\n-\t    \t    if (conn.getFrom().getId() == from.getNodeId()) {\n-\t    \t        this.metaData.put(\"IncomingConnection\", conn.getMetaData().get(\"UniqueId\"));\n-\t    \t        break;\n-\t    \t    }\n-\t    \t}\n+            this.metaData.put(\"IncomingConnection\", from.getNode().getMetaData().get(\"UniqueId\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "805982b7bf61781c02f40044174eff4d3d7915e7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNDgyMw==", "bodyText": "ok", "url": "https://github.com/kiegroup/jbpm/pull/1635#discussion_r410024823", "createdAt": "2020-04-17T06:51:13Z", "author": {"login": "elguardian"}, "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/NodeInstanceImpl.java", "diffHunk": "@@ -176,15 +175,7 @@ public final void trigger(NodeInstance from, String type) {\n     \t}\n     \t\n     \tif (from != null) {\n-    \t    int level = ((org.jbpm.workflow.instance.NodeInstance)from).getLevel();\n-    \t    ((org.jbpm.workflow.instance.NodeInstanceContainer)getNodeInstanceContainer()).setCurrentLevel(level);\n-\t    \tCollection<Connection> incoming = getNode().getIncomingConnections(type);\n-\t    \tfor (Connection conn : incoming) {\n-\t    \t    if (conn.getFrom().getId() == from.getNodeId()) {\n-\t    \t        this.metaData.put(\"IncomingConnection\", conn.getMetaData().get(\"UniqueId\"));\n-\t    \t        break;\n-\t    \t    }\n-\t    \t}\n+            this.metaData.put(\"IncomingConnection\", from.getNode().getMetaData().get(\"UniqueId\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY5MTg2OA=="}, "originalCommit": {"oid": "805982b7bf61781c02f40044174eff4d3d7915e7"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1873, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}