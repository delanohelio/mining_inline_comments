{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MjM0Njk1", "number": 1762, "title": "[RPHAM-3106] Getting error then try to generate classes from WSDL file or URL", "bodyText": "Generating custom class loader with list of jars in case ModuleClassLoader is found in hierachy\nJIRA:  RHPAM-3106", "createdAt": "2020-09-28T15:36:44Z", "url": "https://github.com/kiegroup/jbpm/pull/1762", "merged": true, "mergeCommit": {"oid": "352d7df69097c338ec4d2c3aa7cddf9b163dff5f"}, "closed": true, "closedAt": "2020-10-05T19:25:34Z", "author": {"login": "fjtirado"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNVpzXgBqjM4MTUyNjQxOTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPiTBfgFqTUwMTk3MTIxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f129fbdf3050ce3cb1f072b016bd261c170ec65b", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/f129fbdf3050ce3cb1f072b016bd261c170ec65b", "committedDate": "2020-09-28T15:35:22Z", "message": "[RPHAM-3106] Classloader hack\n\nGenerating custom class loader with list of jars in case\nModuleClassLoader is found in hierachy"}, "afterCommit": {"oid": "d0a979b6ebfbbeaa6a287441d7333b0861ed9f9c", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/d0a979b6ebfbbeaa6a287441d7333b0861ed9f9c", "committedDate": "2020-09-28T15:51:44Z", "message": "[RPHAM-3106] Classloader hack\n\nGenerating custom class loader with list of jars in case\nModuleClassLoader is found in hierachy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0a979b6ebfbbeaa6a287441d7333b0861ed9f9c", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/d0a979b6ebfbbeaa6a287441d7333b0861ed9f9c", "committedDate": "2020-09-28T15:51:44Z", "message": "[RPHAM-3106] Classloader hack\n\nGenerating custom class loader with list of jars in case\nModuleClassLoader is found in hierachy"}, "afterCommit": {"oid": "947c40855aeea7703267a5b0dd32b45f4dd3cd9f", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/947c40855aeea7703267a5b0dd32b45f4dd3cd9f", "committedDate": "2020-09-28T15:52:03Z", "message": "[RPHAM-3106] Classloader hack\n\nGenerating custom class loader with list of jars in case\nModuleClassLoader is found in hierachy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "947c40855aeea7703267a5b0dd32b45f4dd3cd9f", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/947c40855aeea7703267a5b0dd32b45f4dd3cd9f", "committedDate": "2020-09-28T15:52:03Z", "message": "[RPHAM-3106] Classloader hack\n\nGenerating custom class loader with list of jars in case\nModuleClassLoader is found in hierachy"}, "afterCommit": {"oid": "430bce57594e509d3b2375714a495c86e709e99c", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/430bce57594e509d3b2375714a495c86e709e99c", "committedDate": "2020-09-28T15:52:33Z", "message": "[RPHAM-3106] Classloader hack\n\nGenerating custom class loader with list of jars in case\nModuleClassLoader is found in hierachy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "430bce57594e509d3b2375714a495c86e709e99c", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/430bce57594e509d3b2375714a495c86e709e99c", "committedDate": "2020-09-28T15:52:33Z", "message": "[RPHAM-3106] Classloader hack\n\nGenerating custom class loader with list of jars in case\nModuleClassLoader is found in hierachy"}, "afterCommit": {"oid": "5956453ab2476ca4f137db535e016efdc7a9d48c", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/5956453ab2476ca4f137db535e016efdc7a9d48c", "committedDate": "2020-09-28T16:24:09Z", "message": "[RPHAM-3106] Getting error then try to generate classes from WSDL file\n\nGenerating custom class loader with list of jars in case\nModuleClassLoader is found in hierachy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MTUxMTky", "url": "https://github.com/kiegroup/jbpm/pull/1762#pullrequestreview-498151192", "createdAt": "2020-09-29T07:04:17Z", "commit": {"oid": "5956453ab2476ca4f137db535e016efdc7a9d48c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzowNDoxOFrOHZdr6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzowNDoxOFrOHZdr6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2MjgyNw==", "bodyText": "bad naming. this is a classpath phisical location. hackUrls says very little.\nurlLocationClassPathLibs or so", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r496462827", "createdAt": "2020-09-29T07:04:18Z", "author": {"login": "elguardian"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +543,86 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating classpath\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CustomClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CustomClassLoader extends URLClassLoader {\n+\n+        private URL[] hackUrls;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5956453ab2476ca4f137db535e016efdc7a9d48c"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MTUxNzE0", "url": "https://github.com/kiegroup/jbpm/pull/1762#pullrequestreview-498151714", "createdAt": "2020-09-29T07:05:06Z", "commit": {"oid": "5956453ab2476ca4f137db535e016efdc7a9d48c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzowNTowNlrOHZdtkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzowNTowNlrOHZdtkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2MzI0OA==", "bodyText": "says very little. You are bypassing the class loader problem of CXF. what about\nCXFJavaCompilerClassLoader or so ?", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r496463248", "createdAt": "2020-09-29T07:05:06Z", "author": {"login": "elguardian"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +543,86 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating classpath\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CustomClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CustomClassLoader extends URLClassLoader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5956453ab2476ca4f137db535e016efdc7a9d48c"}, "originalPosition": 47}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5956453ab2476ca4f137db535e016efdc7a9d48c", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/5956453ab2476ca4f137db535e016efdc7a9d48c", "committedDate": "2020-09-28T16:24:09Z", "message": "[RPHAM-3106] Getting error then try to generate classes from WSDL file\n\nGenerating custom class loader with list of jars in case\nModuleClassLoader is found in hierachy"}, "afterCommit": {"oid": "cd8b64189ff5afaeee9465bfd530b7669d8df7fa", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/cd8b64189ff5afaeee9465bfd530b7669d8df7fa", "committedDate": "2020-09-29T08:16:54Z", "message": "[RPHAM-3106] Getting error then try to generate classes from WSDL file\n\nGenerating custom class loader with list of jars in case\nModuleClassLoader is found in hierachy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd8b64189ff5afaeee9465bfd530b7669d8df7fa", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/cd8b64189ff5afaeee9465bfd530b7669d8df7fa", "committedDate": "2020-09-29T08:16:54Z", "message": "[RPHAM-3106] Getting error then try to generate classes from WSDL file\n\nGenerating custom class loader with list of jars in case\nModuleClassLoader is found in hierachy"}, "afterCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/8a77c6bf014ff2e148d012b90802128034264457", "committedDate": "2020-09-29T08:20:57Z", "message": "[RPHAM-3106] Getting error then try to generate classes from WSDL file\n\nGenerating custom class loader with list of jars in case\nModuleClassLoader is found in hierachy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MjY3OTI5", "url": "https://github.com/kiegroup/jbpm/pull/1762#pullrequestreview-498267929", "createdAt": "2020-09-29T09:12:28Z", "commit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NDk1NDY4", "url": "https://github.com/kiegroup/jbpm/pull/1762#pullrequestreview-499495468", "createdAt": "2020-09-30T14:30:49Z", "commit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozMDo0OVrOHagfSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNzo0MTowMlrOHa-L_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1NzMyMA==", "bodyText": "as getJarsFromModuleClassLoader method is only valid for ModuleClassLoader maybe it's worth to add this validation inside the method at the beginning and return if the condition is not met.\nBut just a suggestion only, as the method is private there is no really a need for that validation.", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r497557320", "createdAt": "2020-09-30T14:30:49Z", "author": {"login": "afalhambra"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1ODQ0Mg==", "bodyText": "maybe we can log the exception also", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r497558442", "createdAt": "2020-09-30T14:32:12Z", "author": {"login": "afalhambra"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1OTQ0OA==", "bodyText": "what if uris is empty? it could be a problem later on? what do you think?", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r497559448", "createdAt": "2020-09-30T14:33:30Z", "author": {"login": "afalhambra"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CXFJavaCompileClassLoader(uris, cl);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MDM3Nw==", "bodyText": "maybe it's worth logging the exception? or just a e.printStackTrace?", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r497560377", "createdAt": "2020-09-30T14:34:46Z", "author": {"login": "afalhambra"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CXFJavaCompileClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CXFJavaCompileClassLoader extends URLClassLoader {\n+\n+        private URL[] jarUrls;\n+\n+        public CXFJavaCompileClassLoader(Collection<File> files, ClassLoader parent) {\n+            super(new URL[0], parent);\n+            // maybe it makes sense to filter only jaxb ones (there are 256 jars in kie-server)?\n+            this.jarUrls = files.stream().map(CXFJavaCompileClassLoader::toUrl).toArray(URL[]::new);\n+        }\n+        \n+        @Override\n+        public URL[] getURLs() {\n+            return jarUrls;\n+        }\n+\n+        private static URL toUrl(File file) {\n+            try {\n+                return file.toURI().toURL();\n+            } catch (MalformedURLException e) {\n+                throw new IllegalStateException(\"Problem converting file to URL: \"+file,e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2NDI5MQ==", "bodyText": "Just a question - I can't see why we need to go through all parents, is it really possible to have more than one ModuleClassLoader as a class loader parent?", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r497564291", "createdAt": "2020-09-30T14:39:44Z", "author": {"login": "afalhambra"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3MDcyNQ==", "bodyText": "I would make this part of the java doc for this method.", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r497570725", "createdAt": "2020-09-30T14:47:47Z", "author": {"login": "afalhambra"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CXFJavaCompileClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CXFJavaCompileClassLoader extends URLClassLoader {\n+\n+        private URL[] jarUrls;\n+\n+        public CXFJavaCompileClassLoader(Collection<File> files, ClassLoader parent) {\n+            super(new URL[0], parent);\n+            // maybe it makes sense to filter only jaxb ones (there are 256 jars in kie-server)?\n+            this.jarUrls = files.stream().map(CXFJavaCompileClassLoader::toUrl).toArray(URL[]::new);\n+        }\n+        \n+        @Override\n+        public URL[] getURLs() {\n+            return jarUrls;\n+        }\n+\n+        private static URL toUrl(File file) {\n+            try {\n+                return file.toURI().toURL();\n+            } catch (MalformedURLException e) {\n+                throw new IllegalStateException(\"Problem converting file to URL: \"+file,e);\n+            }\n         }\n+    }\n+\n+    private void getJarsFromModuleClassLoader(ClassLoader cl, Collection<File> collector) throws ReflectiveOperationException {\n+        /* This method makes assumptions over the internal structure of ModuleClassLoader. If this class is changed, this method\n+         * will need to change accordingly\n+         */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA0MzMxOQ==", "bodyText": "Maybe a more descriptive method name can be useful? something like getFieldObject?", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r498043319", "createdAt": "2020-10-01T07:39:59Z", "author": {"login": "afalhambra"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CXFJavaCompileClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CXFJavaCompileClassLoader extends URLClassLoader {\n+\n+        private URL[] jarUrls;\n+\n+        public CXFJavaCompileClassLoader(Collection<File> files, ClassLoader parent) {\n+            super(new URL[0], parent);\n+            // maybe it makes sense to filter only jaxb ones (there are 256 jars in kie-server)?\n+            this.jarUrls = files.stream().map(CXFJavaCompileClassLoader::toUrl).toArray(URL[]::new);\n+        }\n+        \n+        @Override\n+        public URL[] getURLs() {\n+            return jarUrls;\n+        }\n+\n+        private static URL toUrl(File file) {\n+            try {\n+                return file.toURI().toURL();\n+            } catch (MalformedURLException e) {\n+                throw new IllegalStateException(\"Problem converting file to URL: \"+file,e);\n+            }\n         }\n+    }\n+\n+    private void getJarsFromModuleClassLoader(ClassLoader cl, Collection<File> collector) throws ReflectiveOperationException {\n+        /* This method makes assumptions over the internal structure of ModuleClassLoader. If this class is changed, this method\n+         * will need to change accordingly\n+         */\n+        AtomicReference paths = (AtomicReference) get(cl, \"paths\");\n+        Object sourceList = get(paths.get(), \"sourceList\");\n+        int size = Array.getLength(sourceList);\n+        Method getVFSResource = null;\n+        Method getPhysicalFile = null;\n+        Field rootField = null;\n+        Field rootNameField = null;\n+        for (int i = 0; i < size; i++) {\n+            Object resource = Array.get(sourceList, i);\n+            if (getVFSResource == null) {\n+                getVFSResource = resource.getClass().getDeclaredMethod(\"getResourceLoader\");\n+                getVFSResource.setAccessible(true);\n+            }\n+            resource = getVFSResource.invoke(resource);\n+            if (rootField == null) {\n+                Class<?> resourceClass = resource.getClass();\n+                rootField = resourceClass.getDeclaredField(\"root\");\n+                rootNameField = resourceClass.getDeclaredField(\"rootName\");\n+                rootField.setAccessible(true);\n+                rootNameField.setAccessible(true);\n+            }\n+            String rootName = (String) rootNameField.get(resource);\n+            if (rootName.endsWith(\"jar\")) {\n+                Object root = rootField.get(resource);\n+                if (getPhysicalFile == null) {\n+                    getPhysicalFile = root.getClass().getDeclaredMethod(\"getPhysicalFile\");\n+                    getPhysicalFile.setAccessible(true);\n+                }\n+                collector.add(new File(((File) getPhysicalFile.invoke(root)).getParentFile(), rootName));\n+            }\n+        }\n+    }\n \n-        return Thread.currentThread().getContextClassLoader();\n+    private Object get(Object container, String fieldName) throws NoSuchFieldException, IllegalAccessException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA0MzkwMw==", "bodyText": "Yep, as per comment, maybe it's worth filtering filenames with \"jaxb\"", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r498043903", "createdAt": "2020-10-01T07:41:02Z", "author": {"login": "afalhambra"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CXFJavaCompileClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CXFJavaCompileClassLoader extends URLClassLoader {\n+\n+        private URL[] jarUrls;\n+\n+        public CXFJavaCompileClassLoader(Collection<File> files, ClassLoader parent) {\n+            super(new URL[0], parent);\n+            // maybe it makes sense to filter only jaxb ones (there are 256 jars in kie-server)?\n+            this.jarUrls = files.stream().map(CXFJavaCompileClassLoader::toUrl).toArray(URL[]::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/8a77c6bf014ff2e148d012b90802128034264457", "committedDate": "2020-09-29T08:20:57Z", "message": "[RPHAM-3106] Getting error then try to generate classes from WSDL file\n\nGenerating custom class loader with list of jars in case\nModuleClassLoader is found in hierachy"}, "afterCommit": {"oid": "3ad585817efe5240a98094ae66923504927fa1d4", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/3ad585817efe5240a98094ae66923504927fa1d4", "committedDate": "2020-10-01T10:33:45Z", "message": "[RPHAM-3106] Getting error then try to generate classes from WSDL file\n\nGenerating custom class loader with list of jars in case\nModuleClassLoader is found in hierachy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMjUxOTYy", "url": "https://github.com/kiegroup/jbpm/pull/1762#pullrequestreview-500251962", "createdAt": "2020-10-01T11:29:43Z", "commit": {"oid": "3ad585817efe5240a98094ae66923504927fa1d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd33069d9989972800f5f18273f569511447d06b", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/fd33069d9989972800f5f18273f569511447d06b", "committedDate": "2020-10-01T18:09:38Z", "message": "[RPHAM-3106] Getting error then try to generate classes from WSDL file\n\nGenerating custom class loader with list of jars in case\nModuleClassLoader is found in hierachy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ad585817efe5240a98094ae66923504927fa1d4", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/3ad585817efe5240a98094ae66923504927fa1d4", "committedDate": "2020-10-01T10:33:45Z", "message": "[RPHAM-3106] Getting error then try to generate classes from WSDL file\n\nGenerating custom class loader with list of jars in case\nModuleClassLoader is found in hierachy"}, "afterCommit": {"oid": "fd33069d9989972800f5f18273f569511447d06b", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/fd33069d9989972800f5f18273f569511447d06b", "committedDate": "2020-10-01T18:09:38Z", "message": "[RPHAM-3106] Getting error then try to generate classes from WSDL file\n\nGenerating custom class loader with list of jars in case\nModuleClassLoader is found in hierachy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMjYxMzQ1", "url": "https://github.com/kiegroup/jbpm/pull/1762#pullrequestreview-501261345", "createdAt": "2020-10-02T16:02:24Z", "commit": {"oid": "fd33069d9989972800f5f18273f569511447d06b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxOTcxMjEw", "url": "https://github.com/kiegroup/jbpm/pull/1762#pullrequestreview-501971210", "createdAt": "2020-10-05T11:43:39Z", "commit": {"oid": "fd33069d9989972800f5f18273f569511447d06b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 773, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}