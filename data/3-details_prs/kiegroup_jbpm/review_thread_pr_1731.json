{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NjQyNTAw", "number": 1731, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzo0NDowNlrOEaYDzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo0Nzo0MFrOEaacTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDkyNjIzOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzo0NDowNlrOHDxCPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOTozMToxNVrOHFcKRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcxMTE2NA==", "bodyText": "This might be simplified as follows:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Iterator<QueryParam> iterator = attributes.iterator();\n          \n          \n            \n                    while(iterator.hasNext()) {\n          \n          \n            \n                        QueryParam param = iterator.next();\n          \n          \n            \n                        if(param.getOperator().equals(\"MODE\")) {\n          \n          \n            \n                            iterator.remove();\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    attributes.removeIf(param -> param.getOperator().equals(\"MODE\"));", "url": "https://github.com/kiegroup/jbpm/pull/1731#discussion_r473711164", "createdAt": "2020-08-20T07:44:06Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -120,6 +149,13 @@ public void setEmf(EntityManagerFactory emf) {\n                                                            BiFunction<List<Number>, String, List<R>> dataCollector) {\n \n         List<QueryParam> attributes = attributesArg != null ? attributesArg : emptyList();\n+        Iterator<QueryParam> iterator = attributes.iterator();\n+        while(iterator.hasNext()) {\n+            QueryParam param = iterator.next();\n+            if(param.getOperator().equals(\"MODE\")) {\n+                iterator.remove();\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c84efb5d91a99d1732ef1901d2ddedd491fc9553"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ2NjMxMA==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1731#discussion_r475466310", "createdAt": "2020-08-24T09:31:15Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -120,6 +149,13 @@ public void setEmf(EntityManagerFactory emf) {\n                                                            BiFunction<List<Number>, String, List<R>> dataCollector) {\n \n         List<QueryParam> attributes = attributesArg != null ? attributesArg : emptyList();\n+        Iterator<QueryParam> iterator = attributes.iterator();\n+        while(iterator.hasNext()) {\n+            QueryParam param = iterator.next();\n+            if(param.getOperator().equals(\"MODE\")) {\n+                iterator.remove();\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcxMTE2NA=="}, "originalCommit": {"oid": "c84efb5d91a99d1732ef1901d2ddedd491fc9553"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTE5MTE4OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/query/model/QueryParam.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODoyNTozNlrOHDzy9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOTozMTozOFrOHFcL0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc1NjQwNg==", "bodyText": "Maybe, we could also use singletonList here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new QueryParam(null, \"MODE\", Arrays.asList(\"HISTORY\"));\n          \n          \n            \n                    return new QueryParam(null, \"MODE\", Collections.singletonList(\"HISTORY\"));", "url": "https://github.com/kiegroup/jbpm/pull/1731#discussion_r473756406", "createdAt": "2020-08-20T08:25:36Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/query/model/QueryParam.java", "diffHunk": "@@ -268,6 +268,10 @@ public static QueryParam max(String column) {\n     public static QueryParam type(String column, Comparable<?> type) {\n         return new QueryParam(column, \"TYPE\", Arrays.asList(type));\n     }\n+\n+    public static QueryParam history() {\n+        return new QueryParam(null, \"MODE\", Arrays.asList(\"HISTORY\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c84efb5d91a99d1732ef1901d2ddedd491fc9553"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ2NjcwNA==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1731#discussion_r475466704", "createdAt": "2020-08-24T09:31:38Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/query/model/QueryParam.java", "diffHunk": "@@ -268,6 +268,10 @@ public static QueryParam max(String column) {\n     public static QueryParam type(String column, Comparable<?> type) {\n         return new QueryParam(column, \"TYPE\", Arrays.asList(type));\n     }\n+\n+    public static QueryParam history() {\n+        return new QueryParam(null, \"MODE\", Arrays.asList(\"HISTORY\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc1NjQwNg=="}, "originalCommit": {"oid": "c84efb5d91a99d1732ef1901d2ddedd491fc9553"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTI4MTQ0OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/AdvanceRuntimeDataServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo0MTozM1rOHD0rPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOTozMzo1OFrOHFcVTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3MDgxNQ==", "bodyText": "I would add some validations/checks on the data returned by the API to make sure the data match with the search criteria specified above.", "url": "https://github.com/kiegroup/jbpm/pull/1731#discussion_r473770815", "createdAt": "2020-08-20T08:41:33Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/AdvanceRuntimeDataServiceImplTest.java", "diffHunk": "@@ -459,5 +460,56 @@ public void testQueryTaskByVariablesWithInputOutput() {\n             assertThat(userTask.getProcessVariables().get(\"var_b\"), is(\"3\"));\n         }\n     }\n+    \n+    @Test\n+    public void testQueryHistoryAllNull() {\n+        List<QueryParam> attributes = list(history());\n+        List<UserTaskInstanceWithPotOwnerDesc> data = advanceVariableDataService.queryUserTasksByVariables(attributes, null, null, null, queryContext);\n+        if (queryContext.getCount() > 0) {\n+            assertThat(data.size(), is(queryContext.getCount()));\n+        } else {\n+            assertThat(data.size(), is(20));\n+        }\n+    }\n+    \n+    @Test\n+    public void testQueryHistoryIsNotNullOperator() {\n+\n+        List<QueryParam> attributes = list(history(), isNull(TASK_ATTR_OWNER));\n+\n+        List<UserTaskInstanceWithPotOwnerDesc> data = advanceVariableDataService.queryUserTasksByVariables(attributes, emptyList(), emptyList(), emptyList(), queryContext);\n+        assertThat(data.size(), is(0));\n+\n+    }\n+\n+    @Test\n+    public void testQueryHistoryProcessByAttributes() {\n+        List<QueryParam> attributes = list(history(), equalsTo(PROCESS_ATTR_DEFINITION_ID, \"test.test_A\"), equalsTo(PROCESS_ATTR_CORRELATION_KEY, \"1\"));\n+\n+        List<ProcessInstanceWithVarsDesc> data = advanceVariableDataService.queryProcessByVariables(attributes, emptyList(), queryContext);\n+        assertThat(data.size(), is(1));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c84efb5d91a99d1732ef1901d2ddedd491fc9553"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ2OTEzNQ==", "bodyText": "I don't see the point at this point as the funcionality is already working. Just chaning the way to get the ids. This test are to check whether this that table fails or not, but audit table and runtime table has the same data.", "url": "https://github.com/kiegroup/jbpm/pull/1731#discussion_r475469135", "createdAt": "2020-08-24T09:33:58Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/AdvanceRuntimeDataServiceImplTest.java", "diffHunk": "@@ -459,5 +460,56 @@ public void testQueryTaskByVariablesWithInputOutput() {\n             assertThat(userTask.getProcessVariables().get(\"var_b\"), is(\"3\"));\n         }\n     }\n+    \n+    @Test\n+    public void testQueryHistoryAllNull() {\n+        List<QueryParam> attributes = list(history());\n+        List<UserTaskInstanceWithPotOwnerDesc> data = advanceVariableDataService.queryUserTasksByVariables(attributes, null, null, null, queryContext);\n+        if (queryContext.getCount() > 0) {\n+            assertThat(data.size(), is(queryContext.getCount()));\n+        } else {\n+            assertThat(data.size(), is(20));\n+        }\n+    }\n+    \n+    @Test\n+    public void testQueryHistoryIsNotNullOperator() {\n+\n+        List<QueryParam> attributes = list(history(), isNull(TASK_ATTR_OWNER));\n+\n+        List<UserTaskInstanceWithPotOwnerDesc> data = advanceVariableDataService.queryUserTasksByVariables(attributes, emptyList(), emptyList(), emptyList(), queryContext);\n+        assertThat(data.size(), is(0));\n+\n+    }\n+\n+    @Test\n+    public void testQueryHistoryProcessByAttributes() {\n+        List<QueryParam> attributes = list(history(), equalsTo(PROCESS_ATTR_DEFINITION_ID, \"test.test_A\"), equalsTo(PROCESS_ATTR_CORRELATION_KEY, \"1\"));\n+\n+        List<ProcessInstanceWithVarsDesc> data = advanceVariableDataService.queryProcessByVariables(attributes, emptyList(), queryContext);\n+        assertThat(data.size(), is(1));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3MDgxNQ=="}, "originalCommit": {"oid": "c84efb5d91a99d1732ef1901d2ddedd491fc9553"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTMxNjYyOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/AdvanceRuntimeDataServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo0Nzo0MFrOHD1CNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOTozNDowM1rOHFcVpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3NjY5NQ==", "bodyText": "I would add some filters to the search criteria and check the data returned by the API call afterwards.", "url": "https://github.com/kiegroup/jbpm/pull/1731#discussion_r473776695", "createdAt": "2020-08-20T08:47:40Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/AdvanceRuntimeDataServiceImplTest.java", "diffHunk": "@@ -459,5 +460,56 @@ public void testQueryTaskByVariablesWithInputOutput() {\n             assertThat(userTask.getProcessVariables().get(\"var_b\"), is(\"3\"));\n         }\n     }\n+    \n+    @Test\n+    public void testQueryHistoryAllNull() {\n+        List<QueryParam> attributes = list(history());\n+        List<UserTaskInstanceWithPotOwnerDesc> data = advanceVariableDataService.queryUserTasksByVariables(attributes, null, null, null, queryContext);\n+        if (queryContext.getCount() > 0) {\n+            assertThat(data.size(), is(queryContext.getCount()));\n+        } else {\n+            assertThat(data.size(), is(20));\n+        }\n+    }\n+    \n+    @Test\n+    public void testQueryHistoryIsNotNullOperator() {\n+\n+        List<QueryParam> attributes = list(history(), isNull(TASK_ATTR_OWNER));\n+\n+        List<UserTaskInstanceWithPotOwnerDesc> data = advanceVariableDataService.queryUserTasksByVariables(attributes, emptyList(), emptyList(), emptyList(), queryContext);\n+        assertThat(data.size(), is(0));\n+\n+    }\n+\n+    @Test\n+    public void testQueryHistoryProcessByAttributes() {\n+        List<QueryParam> attributes = list(history(), equalsTo(PROCESS_ATTR_DEFINITION_ID, \"test.test_A\"), equalsTo(PROCESS_ATTR_CORRELATION_KEY, \"1\"));\n+\n+        List<ProcessInstanceWithVarsDesc> data = advanceVariableDataService.queryProcessByVariables(attributes, emptyList(), queryContext);\n+        assertThat(data.size(), is(1));\n+    }\n+\n+    @Test\n+    public void testQueryHistoryProcessByVariablesAndTask() {\n+        List<QueryParam> attributes = list(history());\n+\n+        List<ProcessInstanceWithVarsDesc> data = advanceVariableDataService.queryProcessByVariablesAndTask(attributes, emptyList(), emptyList(), emptyList(), queryContext);\n+        if (queryContext.getCount() > 0) {\n+            assertThat(data.size(), is(queryContext.getCount()));\n+        } else {\n+            assertThat(data.size(), is(20));\n+        }\n+    }\n+\n+    @Test\n+    public void testQueryProcessByVariablesAndTask() {\n+        List<ProcessInstanceWithVarsDesc> data = advanceVariableDataService.queryProcessByVariablesAndTask(emptyList(), emptyList(), emptyList(), emptyList(), queryContext);\n+        if (queryContext.getCount() > 0) {\n+            assertThat(data.size(), is(queryContext.getCount()));\n+        } else {\n+            assertThat(data.size(), is(20));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c84efb5d91a99d1732ef1901d2ddedd491fc9553"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ2OTIyMQ==", "bodyText": "I don't see the point at this point as the funcionality is already working. Just chaning the way to get the ids. This test are to check whether this that table fails or not, but audit table and runtime table has the same data.", "url": "https://github.com/kiegroup/jbpm/pull/1731#discussion_r475469221", "createdAt": "2020-08-24T09:34:03Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/AdvanceRuntimeDataServiceImplTest.java", "diffHunk": "@@ -459,5 +460,56 @@ public void testQueryTaskByVariablesWithInputOutput() {\n             assertThat(userTask.getProcessVariables().get(\"var_b\"), is(\"3\"));\n         }\n     }\n+    \n+    @Test\n+    public void testQueryHistoryAllNull() {\n+        List<QueryParam> attributes = list(history());\n+        List<UserTaskInstanceWithPotOwnerDesc> data = advanceVariableDataService.queryUserTasksByVariables(attributes, null, null, null, queryContext);\n+        if (queryContext.getCount() > 0) {\n+            assertThat(data.size(), is(queryContext.getCount()));\n+        } else {\n+            assertThat(data.size(), is(20));\n+        }\n+    }\n+    \n+    @Test\n+    public void testQueryHistoryIsNotNullOperator() {\n+\n+        List<QueryParam> attributes = list(history(), isNull(TASK_ATTR_OWNER));\n+\n+        List<UserTaskInstanceWithPotOwnerDesc> data = advanceVariableDataService.queryUserTasksByVariables(attributes, emptyList(), emptyList(), emptyList(), queryContext);\n+        assertThat(data.size(), is(0));\n+\n+    }\n+\n+    @Test\n+    public void testQueryHistoryProcessByAttributes() {\n+        List<QueryParam> attributes = list(history(), equalsTo(PROCESS_ATTR_DEFINITION_ID, \"test.test_A\"), equalsTo(PROCESS_ATTR_CORRELATION_KEY, \"1\"));\n+\n+        List<ProcessInstanceWithVarsDesc> data = advanceVariableDataService.queryProcessByVariables(attributes, emptyList(), queryContext);\n+        assertThat(data.size(), is(1));\n+    }\n+\n+    @Test\n+    public void testQueryHistoryProcessByVariablesAndTask() {\n+        List<QueryParam> attributes = list(history());\n+\n+        List<ProcessInstanceWithVarsDesc> data = advanceVariableDataService.queryProcessByVariablesAndTask(attributes, emptyList(), emptyList(), emptyList(), queryContext);\n+        if (queryContext.getCount() > 0) {\n+            assertThat(data.size(), is(queryContext.getCount()));\n+        } else {\n+            assertThat(data.size(), is(20));\n+        }\n+    }\n+\n+    @Test\n+    public void testQueryProcessByVariablesAndTask() {\n+        List<ProcessInstanceWithVarsDesc> data = advanceVariableDataService.queryProcessByVariablesAndTask(emptyList(), emptyList(), emptyList(), emptyList(), queryContext);\n+        if (queryContext.getCount() > 0) {\n+            assertThat(data.size(), is(queryContext.getCount()));\n+        } else {\n+            assertThat(data.size(), is(20));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3NjY5NQ=="}, "originalCommit": {"oid": "c84efb5d91a99d1732ef1901d2ddedd491fc9553"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1783, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}