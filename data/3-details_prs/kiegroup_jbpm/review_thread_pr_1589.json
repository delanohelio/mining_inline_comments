{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMzQxMTg1", "number": 1589, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0zMVQwOTo0ODowN1rOFsha7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0zMVQxMDo0Mjo1NFrOFsiyiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgyMjI5MjMxOnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/objects/TestWorkItemHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0zMVQwOTo0ODowN1rOJAvR8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QwNzowMzo0N1rOJENQtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDc1NDQxOA==", "bodyText": "This method is not used in the test. Perhaps you could also check in the test that there are 3 aborted items after boundary timer is triggered.", "url": "https://github.com/kiegroup/jbpm/pull/1589#discussion_r604754418", "createdAt": "2021-03-31T09:48:07Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/objects/TestWorkItemHandler.java", "diffHunk": "@@ -45,8 +49,14 @@ public WorkItem getWorkItem() {\n         }\n     }\n \n+    public List<WorkItem> getAbortedWorkItems() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db9d11845a3c7052d7f972ddb8e6339daca54c58"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODM5MTM0OQ==", "bodyText": "added", "url": "https://github.com/kiegroup/jbpm/pull/1589#discussion_r608391349", "createdAt": "2021-04-07T07:03:47Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/objects/TestWorkItemHandler.java", "diffHunk": "@@ -45,8 +49,14 @@ public WorkItem getWorkItem() {\n         }\n     }\n \n+    public List<WorkItem> getAbortedWorkItems() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDc1NDQxOA=="}, "originalCommit": {"oid": "db9d11845a3c7052d7f972ddb8e6339daca54c58"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgyMjI5ODI0OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0zMVQwOTo0OToyOFrOJAvVvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QwNzowMzozN1rOJENQTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDc1NTM5MQ==", "bodyText": "You could also include that getAbortedWorkItems size is 3:\nassertThat(handler.getAbortedWorkItems().size()).isEqualTo(3);", "url": "https://github.com/kiegroup/jbpm/pull/1589#discussion_r604755391", "createdAt": "2021-03-31T09:49:28Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java", "diffHunk": "@@ -2148,6 +2148,29 @@ public void testTimerMultipleInstances() throws Exception {\n         assertProcessInstanceFinished(processInstance, ksession);\n     }\n \n+    @Test\n+    public void testBoundaryTimerMultipleHumanTaskInstances() throws Exception {\n+        NodeLeftCountDownProcessEventListener countDownListener = new NodeLeftCountDownProcessEventListener(\"end1\", 1);\n+        KieBase kbase = createKnowledgeBaseWithoutDumper(\"BPMN2-MultiInstanceLoopHumanTaskWithBoundaryTimer.bpmn2\");\n+\n+        ksession = createKnowledgeSession(kbase);\n+        ksession.addEventListener(countDownListener);\n+        TestWorkItemHandler handler = new TestWorkItemHandler();\n+\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", handler);\n+        ProcessInstance processInstance = ksession.startProcess(\"simple.parallel\");\n+        processInstance.getId();\n+        assertProcessInstanceActive(processInstance);\n+\n+        countDownListener.waitTillCompleted(5000L);\n+\n+        List<WorkItem> workItems = handler.getWorkItems();\n+        assertThat(workItems).isNotNull();\n+        assertThat(workItems.size()).isEqualTo(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db9d11845a3c7052d7f972ddb8e6339daca54c58"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODM5MTI0NQ==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1589#discussion_r608391245", "createdAt": "2021-04-07T07:03:37Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java", "diffHunk": "@@ -2148,6 +2148,29 @@ public void testTimerMultipleInstances() throws Exception {\n         assertProcessInstanceFinished(processInstance, ksession);\n     }\n \n+    @Test\n+    public void testBoundaryTimerMultipleHumanTaskInstances() throws Exception {\n+        NodeLeftCountDownProcessEventListener countDownListener = new NodeLeftCountDownProcessEventListener(\"end1\", 1);\n+        KieBase kbase = createKnowledgeBaseWithoutDumper(\"BPMN2-MultiInstanceLoopHumanTaskWithBoundaryTimer.bpmn2\");\n+\n+        ksession = createKnowledgeSession(kbase);\n+        ksession.addEventListener(countDownListener);\n+        TestWorkItemHandler handler = new TestWorkItemHandler();\n+\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", handler);\n+        ProcessInstance processInstance = ksession.startProcess(\"simple.parallel\");\n+        processInstance.getId();\n+        assertProcessInstanceActive(processInstance);\n+\n+        countDownListener.waitTillCompleted(5000L);\n+\n+        List<WorkItem> workItems = handler.getWorkItems();\n+        assertThat(workItems).isNotNull();\n+        assertThat(workItems.size()).isEqualTo(3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDc1NTM5MQ=="}, "originalCommit": {"oid": "db9d11845a3c7052d7f972ddb8e6339daca54c58"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgyMjQzNzY1OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/objects/TestWorkItemHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0zMVQxMDoyMjozOFrOJAwqSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QwNzowMzoxMVrOJENPaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDc3NzAzMg==", "bodyText": "It could also be added the invocation to abort the workitem:\nmanager.abortWorkItem(workItem.getId());", "url": "https://github.com/kiegroup/jbpm/pull/1589#discussion_r604777032", "createdAt": "2021-03-31T10:22:38Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/objects/TestWorkItemHandler.java", "diffHunk": "@@ -19,17 +19,21 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.kie.api.runtime.process.*;\n+import org.kie.api.runtime.process.WorkItem;\n+import org.kie.api.runtime.process.WorkItemHandler;\n+import org.kie.api.runtime.process.WorkItemManager;\n \n public class TestWorkItemHandler implements WorkItemHandler {\n \n-    private List<WorkItem> workItems = new ArrayList<WorkItem>();\n+    private List<WorkItem> workItems = new ArrayList<>();\n+    private List<WorkItem> abortedWorkItems = new ArrayList<>();\n \n     public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {\n         workItems.add(workItem);\n     }\n \n     public void abortWorkItem(WorkItem workItem, WorkItemManager manager) {\n+        abortedWorkItems.add(workItem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db9d11845a3c7052d7f972ddb8e6339daca54c58"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDgwNzA1MA==", "bodyText": "If all instances are really aborted, then the workItem node is finished and the flow continues also executing by this branch (in fact, there are 2 flows: boundary and workitem output)", "url": "https://github.com/kiegroup/jbpm/pull/1589#discussion_r604807050", "createdAt": "2021-03-31T11:14:32Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/objects/TestWorkItemHandler.java", "diffHunk": "@@ -19,17 +19,21 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.kie.api.runtime.process.*;\n+import org.kie.api.runtime.process.WorkItem;\n+import org.kie.api.runtime.process.WorkItemHandler;\n+import org.kie.api.runtime.process.WorkItemManager;\n \n public class TestWorkItemHandler implements WorkItemHandler {\n \n-    private List<WorkItem> workItems = new ArrayList<WorkItem>();\n+    private List<WorkItem> workItems = new ArrayList<>();\n+    private List<WorkItem> abortedWorkItems = new ArrayList<>();\n \n     public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {\n         workItems.add(workItem);\n     }\n \n     public void abortWorkItem(WorkItem workItem, WorkItemManager manager) {\n+        abortedWorkItems.add(workItem);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDc3NzAzMg=="}, "originalCommit": {"oid": "db9d11845a3c7052d7f972ddb8e6339daca54c58"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODM5MTAxNw==", "bodyText": "if you do this you won't interrupt that flow but keep it. it means abort and complete work item has the same effect to go on with the flow. it works like that.", "url": "https://github.com/kiegroup/jbpm/pull/1589#discussion_r608391017", "createdAt": "2021-04-07T07:03:11Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/objects/TestWorkItemHandler.java", "diffHunk": "@@ -19,17 +19,21 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.kie.api.runtime.process.*;\n+import org.kie.api.runtime.process.WorkItem;\n+import org.kie.api.runtime.process.WorkItemHandler;\n+import org.kie.api.runtime.process.WorkItemManager;\n \n public class TestWorkItemHandler implements WorkItemHandler {\n \n-    private List<WorkItem> workItems = new ArrayList<WorkItem>();\n+    private List<WorkItem> workItems = new ArrayList<>();\n+    private List<WorkItem> abortedWorkItems = new ArrayList<>();\n \n     public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {\n         workItems.add(workItem);\n     }\n \n     public void abortWorkItem(WorkItem workItem, WorkItemManager manager) {\n+        abortedWorkItems.add(workItem);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDc3NzAzMg=="}, "originalCommit": {"oid": "db9d11845a3c7052d7f972ddb8e6339daca54c58"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgyMjUwMTg1OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0zMVQxMDozOTowN1rOJAxQ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QwNjo0ODo1NlrOJEMwRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDc4NjkwNw==", "bodyText": "this line seems useless, it can be removed", "url": "https://github.com/kiegroup/jbpm/pull/1589#discussion_r604786907", "createdAt": "2021-03-31T10:39:07Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java", "diffHunk": "@@ -2148,6 +2148,29 @@ public void testTimerMultipleInstances() throws Exception {\n         assertProcessInstanceFinished(processInstance, ksession);\n     }\n \n+    @Test\n+    public void testBoundaryTimerMultipleHumanTaskInstances() throws Exception {\n+        NodeLeftCountDownProcessEventListener countDownListener = new NodeLeftCountDownProcessEventListener(\"end1\", 1);\n+        KieBase kbase = createKnowledgeBaseWithoutDumper(\"BPMN2-MultiInstanceLoopHumanTaskWithBoundaryTimer.bpmn2\");\n+\n+        ksession = createKnowledgeSession(kbase);\n+        ksession.addEventListener(countDownListener);\n+        TestWorkItemHandler handler = new TestWorkItemHandler();\n+\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", handler);\n+        ProcessInstance processInstance = ksession.startProcess(\"simple.parallel\");\n+        processInstance.getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db9d11845a3c7052d7f972ddb8e6339daca54c58"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODM4MzA0NA==", "bodyText": "removed", "url": "https://github.com/kiegroup/jbpm/pull/1589#discussion_r608383044", "createdAt": "2021-04-07T06:48:56Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java", "diffHunk": "@@ -2148,6 +2148,29 @@ public void testTimerMultipleInstances() throws Exception {\n         assertProcessInstanceFinished(processInstance, ksession);\n     }\n \n+    @Test\n+    public void testBoundaryTimerMultipleHumanTaskInstances() throws Exception {\n+        NodeLeftCountDownProcessEventListener countDownListener = new NodeLeftCountDownProcessEventListener(\"end1\", 1);\n+        KieBase kbase = createKnowledgeBaseWithoutDumper(\"BPMN2-MultiInstanceLoopHumanTaskWithBoundaryTimer.bpmn2\");\n+\n+        ksession = createKnowledgeSession(kbase);\n+        ksession.addEventListener(countDownListener);\n+        TestWorkItemHandler handler = new TestWorkItemHandler();\n+\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", handler);\n+        ProcessInstance processInstance = ksession.startProcess(\"simple.parallel\");\n+        processInstance.getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDc4NjkwNw=="}, "originalCommit": {"oid": "db9d11845a3c7052d7f972ddb8e6339daca54c58"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgyMjUxMjg2OnYy", "diffSide": "RIGHT", "path": "jbpm-test-util/src/main/java/org/jbpm/test/listener/process/DefaultCountDownProcessEventListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0zMVQxMDo0MTo1N1rOJAxXUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QwNjo0ODo0N1rOJEMv5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDc4ODU2MA==", "bodyText": "this method is not used at all, though it can be useful for future use, you can keep it", "url": "https://github.com/kiegroup/jbpm/pull/1589#discussion_r604788560", "createdAt": "2021-03-31T10:41:57Z", "author": {"login": "gmunozfe"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/listener/process/DefaultCountDownProcessEventListener.java", "diffHunk": "@@ -51,6 +51,9 @@ public void waitTillCompleted() {\n         }\n     }\n \n+    public long count() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db9d11845a3c7052d7f972ddb8e6339daca54c58"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODM4Mjk1MQ==", "bodyText": "sure", "url": "https://github.com/kiegroup/jbpm/pull/1589#discussion_r608382951", "createdAt": "2021-04-07T06:48:47Z", "author": {"login": "elguardian"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/listener/process/DefaultCountDownProcessEventListener.java", "diffHunk": "@@ -51,6 +51,9 @@ public void waitTillCompleted() {\n         }\n     }\n \n+    public long count() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDc4ODU2MA=="}, "originalCommit": {"oid": "db9d11845a3c7052d7f972ddb8e6339daca54c58"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgyMjUxNjU2OnYy", "diffSide": "RIGHT", "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/ForEachNodeInstance.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0zMVQxMDo0Mjo1NFrOJAxZaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QwNjo1MjoyMFrOJEM3qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDc4OTA5OQ==", "bodyText": "remove this blank line and add it at the end of the method (nitpicking)", "url": "https://github.com/kiegroup/jbpm/pull/1589#discussion_r604789099", "createdAt": "2021-03-31T10:42:54Z", "author": {"login": "gmunozfe"}, "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/ForEachNodeInstance.java", "diffHunk": "@@ -94,6 +94,16 @@ public ContextContainer getContextContainer() {\n         return getForEachNode().getCompositeNode();\n     }\n \n+    @Override\n+    public void triggerCompleted() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db9d11845a3c7052d7f972ddb8e6339daca54c58"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODM4NDkzOA==", "bodyText": "removed the change.", "url": "https://github.com/kiegroup/jbpm/pull/1589#discussion_r608384938", "createdAt": "2021-04-07T06:52:20Z", "author": {"login": "elguardian"}, "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/ForEachNodeInstance.java", "diffHunk": "@@ -94,6 +94,16 @@ public ContextContainer getContextContainer() {\n         return getForEachNode().getCompositeNode();\n     }\n \n+    @Override\n+    public void triggerCompleted() {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDc4OTA5OQ=="}, "originalCommit": {"oid": "db9d11845a3c7052d7f972ddb8e6339daca54c58"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1803, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}