{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMjE1OTky", "number": 1677, "title": "RHPAM-2980 Update timer of SLA", "bodyText": "", "createdAt": "2020-06-08T15:15:19Z", "url": "https://github.com/kiegroup/jbpm/pull/1677", "merged": true, "mergeCommit": {"oid": "2ed90f89c57266b170fe9e208d5969f6428aad68"}, "closed": true, "closedAt": "2020-06-10T09:51:42Z", "author": {"login": "krisv"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpZGIXAFqTQyNjYzOTQyMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp2ivmAH2gAyNDMxMjE1OTkyOmNmM2RhZmJkOTNmYmQ1MDcyNWQ0ZjE2NTNmNjdhMzZhZmJlMGJkZmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NjM5NDIy", "url": "https://github.com/kiegroup/jbpm/pull/1677#pullrequestreview-426639422", "createdAt": "2020-06-08T21:36:25Z", "commit": {"oid": "08ca6a8354c751ce17b50f6a5c2b53e3a6b8a495"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTozNjoyNVrOGgxS-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzowMzo1NFrOGgzTMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNTI4OA==", "bodyText": "Test is not working properly (passes whatever value the timer is updated: 10, 2, etc.)\nslaViolated is always false due to count of the latch never reaches zero, because countdown method is not called.", "url": "https://github.com/kiegroup/jbpm/pull/1677#discussion_r437015288", "createdAt": "2020-06-08T21:36:25Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java", "diffHunk": "@@ -244,6 +248,67 @@ public void testSLAonUserTaskMet() throws Exception {\n         ksession.dispose();\n     }\n     \n+    @Test\n+    public void testSLAonUserTaskUpdated() throws Exception {\n+    \tCountDownLatch latch = new CountDownLatch(1);\n+        TimerIdListener listener = new TimerIdListener();\n+        KieBase kbase = createKnowledgeBase(\"BPMN2-UserTaskWithSLAOnTask.bpmn2\");\n+        KieSession ksession = createKnowledgeSession(kbase);\n+        TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);        \n+        ksession.addEventListener(listener);\n+        \n+        ProcessInstance processInstance = ksession.startProcess(\"UserTask\");\n+        assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);\n+        \n+        WorkItem workItem = workItemHandler.getWorkItem();\n+        assertNotNull(workItem);\n+        assertEquals(\"john\", workItem.getParameter(\"ActorId\"));\n+                \n+        processInstance = ksession.getProcessInstance(processInstance.getId());\n+        assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);\n+        \n+        Collection<NodeInstance> active = ((WorkflowProcessInstance)processInstance).getNodeInstances();\n+        assertEquals(1, active.size());\n+        \n+        long timerId = listener.getTimerId();\n+        assertNotEquals(-1, timerId);\n+        \n+        ksession.execute(new UpdateTimerCommand(processInstance.getId(), (long) timerId, 10));\n+        \n+        boolean slaViolated = latch.await(5, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08ca6a8354c751ce17b50f6a5c2b53e3a6b8a495"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNTM1NA==", "bodyText": "Instead of defining this attribute, it would be better to invoke countdown for the latch (initialized in the constructor)", "url": "https://github.com/kiegroup/jbpm/pull/1677#discussion_r437015354", "createdAt": "2020-06-08T21:36:34Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java", "diffHunk": "@@ -244,6 +248,67 @@ public void testSLAonUserTaskMet() throws Exception {\n         ksession.dispose();\n     }\n     \n+    @Test\n+    public void testSLAonUserTaskUpdated() throws Exception {\n+    \tCountDownLatch latch = new CountDownLatch(1);\n+        TimerIdListener listener = new TimerIdListener();\n+        KieBase kbase = createKnowledgeBase(\"BPMN2-UserTaskWithSLAOnTask.bpmn2\");\n+        KieSession ksession = createKnowledgeSession(kbase);\n+        TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);        \n+        ksession.addEventListener(listener);\n+        \n+        ProcessInstance processInstance = ksession.startProcess(\"UserTask\");\n+        assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);\n+        \n+        WorkItem workItem = workItemHandler.getWorkItem();\n+        assertNotNull(workItem);\n+        assertEquals(\"john\", workItem.getParameter(\"ActorId\"));\n+                \n+        processInstance = ksession.getProcessInstance(processInstance.getId());\n+        assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);\n+        \n+        Collection<NodeInstance> active = ((WorkflowProcessInstance)processInstance).getNodeInstances();\n+        assertEquals(1, active.size());\n+        \n+        long timerId = listener.getTimerId();\n+        assertNotEquals(-1, timerId);\n+        \n+        ksession.execute(new UpdateTimerCommand(processInstance.getId(), (long) timerId, 10));\n+        \n+        boolean slaViolated = latch.await(5, TimeUnit.SECONDS);\n+        assertFalse(\"SLA should not violated by timer\", slaViolated);\n+        \n+        ksession.dispose();\n+    }\n+    \n+    class TimerIdListener extends DefaultProcessEventListener {\n+\n+    \tprivate long timerId = -1;\n+    \tprivate boolean slaViolated = false;\n+    \t\n+    \t@Override\n+    \tpublic void afterNodeTriggered(ProcessNodeTriggeredEvent event) {\n+            if (event.getNodeInstance() instanceof HumanTaskNodeInstance) {\n+                timerId = ((HumanTaskNodeInstance) event.getNodeInstance()).getSlaTimerId();\n+            }\n+        }\n+    \t\n+    \tpublic long getTimerId() {\n+    \t\treturn timerId;\n+    \t}\n+    \t\n+        @Override\n+        public void afterSLAViolated(SLAViolatedEvent event) {\n+            this.slaViolated = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08ca6a8354c751ce17b50f6a5c2b53e3a6b8a495"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNjYzMA==", "bodyText": "This is never used from the test. If latch is part of the listener, you can define a public await method to return the latch.await result, receiving the timeout and time unit, and check in the test the returned value.", "url": "https://github.com/kiegroup/jbpm/pull/1677#discussion_r437016630", "createdAt": "2020-06-08T21:39:33Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java", "diffHunk": "@@ -244,6 +248,67 @@ public void testSLAonUserTaskMet() throws Exception {\n         ksession.dispose();\n     }\n     \n+    @Test\n+    public void testSLAonUserTaskUpdated() throws Exception {\n+    \tCountDownLatch latch = new CountDownLatch(1);\n+        TimerIdListener listener = new TimerIdListener();\n+        KieBase kbase = createKnowledgeBase(\"BPMN2-UserTaskWithSLAOnTask.bpmn2\");\n+        KieSession ksession = createKnowledgeSession(kbase);\n+        TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);        \n+        ksession.addEventListener(listener);\n+        \n+        ProcessInstance processInstance = ksession.startProcess(\"UserTask\");\n+        assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);\n+        \n+        WorkItem workItem = workItemHandler.getWorkItem();\n+        assertNotNull(workItem);\n+        assertEquals(\"john\", workItem.getParameter(\"ActorId\"));\n+                \n+        processInstance = ksession.getProcessInstance(processInstance.getId());\n+        assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);\n+        \n+        Collection<NodeInstance> active = ((WorkflowProcessInstance)processInstance).getNodeInstances();\n+        assertEquals(1, active.size());\n+        \n+        long timerId = listener.getTimerId();\n+        assertNotEquals(-1, timerId);\n+        \n+        ksession.execute(new UpdateTimerCommand(processInstance.getId(), (long) timerId, 10));\n+        \n+        boolean slaViolated = latch.await(5, TimeUnit.SECONDS);\n+        assertFalse(\"SLA should not violated by timer\", slaViolated);\n+        \n+        ksession.dispose();\n+    }\n+    \n+    class TimerIdListener extends DefaultProcessEventListener {\n+\n+    \tprivate long timerId = -1;\n+    \tprivate boolean slaViolated = false;\n+    \t\n+    \t@Override\n+    \tpublic void afterNodeTriggered(ProcessNodeTriggeredEvent event) {\n+            if (event.getNodeInstance() instanceof HumanTaskNodeInstance) {\n+                timerId = ((HumanTaskNodeInstance) event.getNodeInstance()).getSlaTimerId();\n+            }\n+        }\n+    \t\n+    \tpublic long getTimerId() {\n+    \t\treturn timerId;\n+    \t}\n+    \t\n+        @Override\n+        public void afterSLAViolated(SLAViolatedEvent event) {\n+            this.slaViolated = true;\n+        }\n+        \n+        public boolean isViolated() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08ca6a8354c751ce17b50f6a5c2b53e3a6b8a495"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxOTQzNA==", "bodyText": "Indentation format issue: do not use tabs", "url": "https://github.com/kiegroup/jbpm/pull/1677#discussion_r437019434", "createdAt": "2020-06-08T21:45:56Z", "author": {"login": "gmunozfe"}, "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/command/UpdateTimerCommand.java", "diffHunk": "@@ -117,6 +118,18 @@ public Void execute(Context context ) {\n             throw new IllegalArgumentException(\"Process instance with id \" + processInstanceId + \" not found\");\n         }\n         for (NodeInstance nodeInstance : wfp.getNodeInstances(true)) {\n+        \tlong slaTimerId = ((NodeInstanceImpl) nodeInstance).getSlaTimerId();\n+        \tif (slaTimerId != -1 && slaTimerId == timerId) {\n+            \tTimerInstance timer = tm.getTimerMap().get(timerId);\n+                \n+                TimerInstance newTimer = rescheduleTimer(timer, tm);\n+                logger.debug(\"New timer {} about to be registered\", newTimer);\n+                tm.registerTimer(newTimer, wfp);                        \n+                \n+                ((NodeInstanceImpl) nodeInstance).internalSetSlaTimerId(newTimer.getId());\n+                logger.debug(\"New timer {} successfully registered\", newTimer);\n+                break;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08ca6a8354c751ce17b50f6a5c2b53e3a6b8a495"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0ODExMg==", "bodyText": "Review indentation", "url": "https://github.com/kiegroup/jbpm/pull/1677#discussion_r437048112", "createdAt": "2020-06-08T23:03:54Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/admin/commands/ListTimersCommand.java", "diffHunk": "@@ -100,6 +101,13 @@ private TimerInstanceImpl buildTimer(org.jbpm.process.instance.timer.TimerInstan\n     \n     protected void processNodeInstance(TimerManager tm, NodeInstanceContainer container, List<TimerInstance> timers) {\n     \tfor (NodeInstance nodeInstance : container.getNodeInstances()) {\n+        \tif (((NodeInstanceImpl) nodeInstance).getSlaTimerId() != -1) {\n+    \t\t\torg.jbpm.process.instance.timer.TimerInstance timer = tm.getTimerMap().get(((NodeInstanceImpl) nodeInstance).getSlaTimerId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08ca6a8354c751ce17b50f6a5c2b53e3a6b8a495"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97fde7669486bc2a363c66f293e54051219974d5", "author": {"user": {"login": "krisv", "name": "Kris Verlaenen"}}, "url": "https://github.com/kiegroup/jbpm/commit/97fde7669486bc2a363c66f293e54051219974d5", "committedDate": "2020-06-09T23:40:22Z", "message": "- Update SLA timer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e8653f657f055d4705ae52614a62c48539be784", "author": {"user": {"login": "krisv", "name": "Kris Verlaenen"}}, "url": "https://github.com/kiegroup/jbpm/commit/8e8653f657f055d4705ae52614a62c48539be784", "committedDate": "2020-06-09T23:40:23Z", "message": "- Take SLA timers into account when listing timers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54404142aafc36f6a48fa46723b817141dedd8b8", "author": {"user": {"login": "krisv", "name": "Kris Verlaenen"}}, "url": "https://github.com/kiegroup/jbpm/commit/54404142aafc36f6a48fa46723b817141dedd8b8", "committedDate": "2020-06-09T23:40:23Z", "message": "- further improvements to test and code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08ca6a8354c751ce17b50f6a5c2b53e3a6b8a495", "author": {"user": {"login": "krisv", "name": "Kris Verlaenen"}}, "url": "https://github.com/kiegroup/jbpm/commit/08ca6a8354c751ce17b50f6a5c2b53e3a6b8a495", "committedDate": "2020-06-08T15:38:03Z", "message": "- Take SLA timers into account when listing timers"}, "afterCommit": {"oid": "54404142aafc36f6a48fa46723b817141dedd8b8", "author": {"user": {"login": "krisv", "name": "Kris Verlaenen"}}, "url": "https://github.com/kiegroup/jbpm/commit/54404142aafc36f6a48fa46723b817141dedd8b8", "committedDate": "2020-06-09T23:40:23Z", "message": "- further improvements to test and code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9442540c9d9f19f4cbcba0a56c47f956fb9e2039", "author": {"user": {"login": "krisv", "name": "Kris Verlaenen"}}, "url": "https://github.com/kiegroup/jbpm/commit/9442540c9d9f19f4cbcba0a56c47f956fb9e2039", "committedDate": "2020-06-10T01:38:24Z", "message": "- fixing indentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NzQyNjU4", "url": "https://github.com/kiegroup/jbpm/pull/1677#pullrequestreview-427742658", "createdAt": "2020-06-10T06:24:40Z", "commit": {"oid": "9442540c9d9f19f4cbcba0a56c47f956fb9e2039"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3ODY3Mzc1", "url": "https://github.com/kiegroup/jbpm/pull/1677#pullrequestreview-427867375", "createdAt": "2020-06-10T09:15:52Z", "commit": {"oid": "9442540c9d9f19f4cbcba0a56c47f956fb9e2039"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOToxNTo1MlrOGhsOTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOToxNjoyOVrOGhsPkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk4MDc0OA==", "bodyText": "This is not used", "url": "https://github.com/kiegroup/jbpm/pull/1677#discussion_r437980748", "createdAt": "2020-06-10T09:15:52Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/admin/ProcessInstanceAdminServiceImplTest.java", "diffHunk": "@@ -389,7 +390,31 @@ public void testUpdateTimer() throws Exception {\n         processInstanceId = null;\n     }\n     \n-    \n+    @Test(timeout=10000)\n+    public void testListSLATimer() throws Exception {\n+        processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"UserTaskWithSLAOnTask\");\n+        assertNotNull(processInstanceId);\n+        long scheduleTime = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9442540c9d9f19f4cbcba0a56c47f956fb9e2039"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk4MTA3NQ==", "bodyText": "It seems there's still a tab here", "url": "https://github.com/kiegroup/jbpm/pull/1677#discussion_r437981075", "createdAt": "2020-06-10T09:16:29Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SLAComplianceTest.java", "diffHunk": "@@ -244,6 +248,70 @@ public void testSLAonUserTaskMet() throws Exception {\n         ksession.dispose();\n     }\n     \n+    @Test\n+    public void testSLAonUserTaskUpdated() throws Exception {\n+        CountDownLatch latch = new CountDownLatch(1);\n+        TimerIdListener listener = new TimerIdListener(latch);\n+        KieBase kbase = createKnowledgeBase(\"BPMN2-UserTaskWithSLAOnTask.bpmn2\");\n+        KieSession ksession = createKnowledgeSession(kbase);\n+        TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);        \n+        ksession.addEventListener(listener);\n+        \n+        ProcessInstance processInstance = ksession.startProcess(\"UserTask\");\n+        assertEquals(ProcessInstance.STATE_ACTIVE, processInstance.getState());\n+        \n+        WorkItem workItem = workItemHandler.getWorkItem();\n+        assertNotNull(workItem);\n+        assertEquals(\"john\", workItem.getParameter(\"ActorId\"));\n+                \n+        processInstance = ksession.getProcessInstance(processInstance.getId());\n+        assertEquals(ProcessInstance.STATE_ACTIVE, processInstance.getState());\n+        \n+        Collection<NodeInstance> active = ((WorkflowProcessInstance)processInstance).getNodeInstances();\n+        assertEquals(1, active.size());\n+        \n+        long timerId = listener.getTimerId();\n+        assertNotEquals(-1, timerId);\n+        \n+        System.out.println();\n+        ksession.execute(new UpdateTimerCommand(processInstance.getId(), (long) timerId, 7));\n+        \n+        boolean slaViolated = latch.await(5, TimeUnit.SECONDS);\n+        assertFalse(\"SLA should not be violated by timer\", slaViolated);\n+        \n+        slaViolated = latch.await(5, TimeUnit.SECONDS);\n+        assertTrue(\"SLA should be violated by timer\", slaViolated);\n+        \n+        ksession.dispose();\n+    }\n+    \n+    class TimerIdListener extends DefaultProcessEventListener {\n+\n+        private long timerId = -1;\n+        private CountDownLatch latch;\n+        \n+        public TimerIdListener(CountDownLatch latch) {\n+        \tthis.latch = latch;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9442540c9d9f19f4cbcba0a56c47f956fb9e2039"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf3dafbd93fbd50725d4f1653f67a36afbe0bdfb", "author": {"user": {"login": "krisv", "name": "Kris Verlaenen"}}, "url": "https://github.com/kiegroup/jbpm/commit/cf3dafbd93fbd50725d4f1653f67a36afbe0bdfb", "committedDate": "2020-06-10T09:49:48Z", "message": "- minor fixes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 936, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}