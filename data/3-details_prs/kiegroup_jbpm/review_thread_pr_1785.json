{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5OTI1NTEx", "number": 1785, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1NTozMVrOEzVjww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTozNjo1NVrOE2DW9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjY2MDUxOnYy", "diffSide": "RIGHT", "path": "jbpm-event-emitters/jbpm-event-emitters-kafka/pom.xml", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1NTozMVrOHqf0uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoxMjozNVrOHsn-CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMzY0MA==", "bodyText": "Just out of curiosity, why changing the scope? Is this because it's meant to be only used within a server?", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r514323640", "createdAt": "2020-10-29T14:55:31Z", "author": {"login": "afalhambra"}, "path": "jbpm-event-emitters/jbpm-event-emitters-kafka/pom.xml", "diffHunk": "@@ -29,6 +29,7 @@\n     <dependency>\n       <groupId>org.apache.kafka</groupId>\n       <artifactId>kafka-clients</artifactId>\n+      <scope>provided</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1MDY3MA==", "bodyText": "yes,  this is intended to be used only in kie-server, that now will always have the dependency", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515150670", "createdAt": "2020-10-30T14:47:14Z", "author": {"login": "fjtirado"}, "path": "jbpm-event-emitters/jbpm-event-emitters-kafka/pom.xml", "diffHunk": "@@ -29,6 +29,7 @@\n     <dependency>\n       <groupId>org.apache.kafka</groupId>\n       <artifactId>kafka-clients</artifactId>\n+      <scope>provided</scope>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMzY0MA=="}, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMjAyMA==", "bodyText": "emitters can be used in spring boot envioronment. plz remove this.", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515902020", "createdAt": "2020-11-02T11:14:25Z", "author": {"login": "elguardian"}, "path": "jbpm-event-emitters/jbpm-event-emitters-kafka/pom.xml", "diffHunk": "@@ -29,6 +29,7 @@\n     <dependency>\n       <groupId>org.apache.kafka</groupId>\n       <artifactId>kafka-clients</artifactId>\n+      <scope>provided</scope>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMzY0MA=="}, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NTU3NA==", "bodyText": "as per  @fjtirado this is following the same approach as ES.", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r516545574", "createdAt": "2020-11-03T09:58:53Z", "author": {"login": "elguardian"}, "path": "jbpm-event-emitters/jbpm-event-emitters-kafka/pom.xml", "diffHunk": "@@ -29,6 +29,7 @@\n     <dependency>\n       <groupId>org.apache.kafka</groupId>\n       <artifactId>kafka-clients</artifactId>\n+      <scope>provided</scope>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMzY0MA=="}, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1NDI0OA==", "bodyText": "Kafka dependency (as part of kafka consumer extension) will be available also in Sprinboot (when incorporated) so, in order to keep \"consistency\" with ES emitter (where dependencies with external libraries that are included in kie-server, like Apache connection)  I changed this to provided", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r516554248", "createdAt": "2020-11-03T10:12:35Z", "author": {"login": "fjtirado"}, "path": "jbpm-event-emitters/jbpm-event-emitters-kafka/pom.xml", "diffHunk": "@@ -29,6 +29,7 @@\n     <dependency>\n       <groupId>org.apache.kafka</groupId>\n       <artifactId>kafka-clients</artifactId>\n+      <scope>provided</scope>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMzY0MA=="}, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjc3MzM1OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/bpmn2/ProcessDescriptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToxNzo1N1rOHqg65Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDo0ODo0MlrOHrSW_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MTYwNQ==", "bodyText": "Probably not required, but maybe it's worth checking - clear method in this class, shouldn't also be clearing rest of the member such as signals, signalsMetadata and messages (just for consistency)?", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r514341605", "createdAt": "2020-10-29T15:17:57Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/bpmn2/ProcessDescriptor.java", "diffHunk": "@@ -229,6 +249,8 @@ public ProcessDescriptor clone() {\n         cloned.unqualifiedClasses = new HashSet<String>(this.unqualifiedClasses);\n         cloned.signals = new HashSet<String>(this.signals);\n         cloned.globals = new HashSet<String>(this.globals);\n+        cloned.signalsMetadata = new HashSet<>(this.signalsMetadata);\n+        cloned.messages = new HashSet<>(this.messages);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1MTYxMg==", "bodyText": "Probably, but since Im not sure and they are not related with this JIRA, I refrained myself and decided to not clear them", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515151612", "createdAt": "2020-10-30T14:48:42Z", "author": {"login": "fjtirado"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/bpmn2/ProcessDescriptor.java", "diffHunk": "@@ -229,6 +249,8 @@ public ProcessDescriptor clone() {\n         cloned.unqualifiedClasses = new HashSet<String>(this.unqualifiedClasses);\n         cloned.signals = new HashSet<String>(this.signals);\n         cloned.globals = new HashSet<String>(this.globals);\n+        cloned.signalsMetadata = new HashSet<>(this.signalsMetadata);\n+        cloned.messages = new HashSet<>(this.messages);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MTYwNQ=="}, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjg5MzYwOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/model/ProcessDefinition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTo0MTo1NlrOHqiGfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDo0OToyNVrOHrSY_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2MDk1Nw==", "bodyText": "It's a little ambiguous here - id and name are both the same, so maybe it's worth saying @return name of the signals defined in the process (just avoid confusion)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns process definition signals names.\n          \n          \n            \n                 * @return id of the signals defined in the process\n          \n          \n            \n                 * Returns process definition signals names.\n          \n          \n            \n                 * @return names of the signals defined in the process", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r514360957", "createdAt": "2020-10-29T15:41:56Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/model/ProcessDefinition.java", "diffHunk": "@@ -90,11 +91,17 @@\n     Collection<String> getReusableSubProcesses();\n \n     /**\n-     * Returns process definition signals.\n-     * @return signals\n+     * Returns process definition signals names.\n+     * @return id of the signals defined in the process", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1MjEyNA==", "bodyText": "not the same, id and name might be different and this method is returning the ids", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515152124", "createdAt": "2020-10-30T14:49:25Z", "author": {"login": "fjtirado"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/model/ProcessDefinition.java", "diffHunk": "@@ -90,11 +91,17 @@\n     Collection<String> getReusableSubProcesses();\n \n     /**\n-     * Returns process definition signals.\n-     * @return signals\n+     * Returns process definition signals names.\n+     * @return id of the signals defined in the process", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2MDk1Nw=="}, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjkyNjI3OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/SignalDescImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTo0ODozM1rOHqibKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDo1MDoyM1rOHrSb_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2NjI1MQ==", "bodyText": "Maybe it's worth checking if signal is not null to avoid any potential NPE - wdyt?", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r514366251", "createdAt": "2020-10-29T15:48:33Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/SignalDescImpl.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.kie.services.impl.model;\n+\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.bpmn2.core.Signal;\n+import org.jbpm.services.api.model.SignalDesc;\n+import org.jbpm.services.api.model.SignalType;\n+\n+public class SignalDescImpl implements SignalDesc {\n+\n+    private static final long serialVersionUID = 1L;\n+    private String id;\n+    private String name;\n+    private String structureRef;\n+    private SignalType signalType;\n+\n+    public static SignalDescImpl from(Signal signal) {\n+        return new SignalDescImpl(signal.getId(), signal.getName(), signal.getStructureRef(), SignalType.SIGNAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1Mjg5NQ==", "bodyText": "signal is not expected to be null there, if it is a runtime will be thrown anyway", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515152895", "createdAt": "2020-10-30T14:50:23Z", "author": {"login": "fjtirado"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/SignalDescImpl.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.kie.services.impl.model;\n+\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.bpmn2.core.Signal;\n+import org.jbpm.services.api.model.SignalDesc;\n+import org.jbpm.services.api.model.SignalType;\n+\n+public class SignalDescImpl implements SignalDesc {\n+\n+    private static final long serialVersionUID = 1L;\n+    private String id;\n+    private String name;\n+    private String structureRef;\n+    private SignalType signalType;\n+\n+    public static SignalDescImpl from(Signal signal) {\n+        return new SignalDescImpl(signal.getId(), signal.getName(), signal.getStructureRef(), SignalType.SIGNAL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2NjI1MQ=="}, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjkyNzE1OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/SignalDescImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTo0ODo0MlrOHqibpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDo1MTowOFrOHrSfnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2NjM3Mg==", "bodyText": "same as above", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r514366372", "createdAt": "2020-10-29T15:48:42Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/SignalDescImpl.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.kie.services.impl.model;\n+\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.bpmn2.core.Signal;\n+import org.jbpm.services.api.model.SignalDesc;\n+import org.jbpm.services.api.model.SignalType;\n+\n+public class SignalDescImpl implements SignalDesc {\n+\n+    private static final long serialVersionUID = 1L;\n+    private String id;\n+    private String name;\n+    private String structureRef;\n+    private SignalType signalType;\n+\n+    public static SignalDescImpl from(Signal signal) {\n+        return new SignalDescImpl(signal.getId(), signal.getName(), signal.getStructureRef(), SignalType.SIGNAL);\n+    }\n+\n+    public static SignalDescImpl from(Message message) {\n+        return new SignalDescImpl(message.getId(), message.getName(), message.getType(), SignalType.MESSAGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1MzgyMQ==", "bodyText": "same rationale, message must not be null, since this is unexpected, it is acceptable to have the runtime", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515153821", "createdAt": "2020-10-30T14:51:08Z", "author": {"login": "fjtirado"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/SignalDescImpl.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.kie.services.impl.model;\n+\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.bpmn2.core.Signal;\n+import org.jbpm.services.api.model.SignalDesc;\n+import org.jbpm.services.api.model.SignalType;\n+\n+public class SignalDescImpl implements SignalDesc {\n+\n+    private static final long serialVersionUID = 1L;\n+    private String id;\n+    private String name;\n+    private String structureRef;\n+    private SignalType signalType;\n+\n+    public static SignalDescImpl from(Signal signal) {\n+        return new SignalDescImpl(signal.getId(), signal.getName(), signal.getStructureRef(), SignalType.SIGNAL);\n+    }\n+\n+    public static SignalDescImpl from(Message message) {\n+        return new SignalDescImpl(message.getId(), message.getName(), message.getType(), SignalType.MESSAGE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2NjM3Mg=="}, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjI1NjkwOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/SignalDescImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNzozOTowNFrOHrECUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDo1NDo1MlrOHrSycA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxNjk0NA==", "bodyText": "I like pepe :) but I'd change to something more meaningful so it's easier and quicker to understand what these arguments are meant for at first sight.", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r514916944", "createdAt": "2020-10-30T07:39:04Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/SignalDescImplTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.kie.services.impl;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.bpmn2.core.Signal;\n+import org.jbpm.kie.services.impl.model.SignalDescImpl;\n+import org.jbpm.services.api.model.SignalDesc;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class SignalDescImplTest {\n+\n+    @Test\n+    public void testEqualsHashCode() {\n+        SignalDesc signal1 = SignalDescImpl.from(new Signal(\"pepe\", \"pepe\", \"pepe\"));\n+        SignalDesc signal2 = SignalDescImpl.from(new Signal(\"pepe\", \"pepe\", \"pepe\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1ODY0MA==", "bodyText": "ok, I technically \"abuse\" pepe here, but because I want to emphasize that everything is equals and despite of it, since one SignalDesc come from Signal object and another SignalDesc come from Message, theere are two instances at the end in the set. Changed anyway", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515158640", "createdAt": "2020-10-30T14:54:52Z", "author": {"login": "fjtirado"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/SignalDescImplTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.kie.services.impl;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.bpmn2.core.Signal;\n+import org.jbpm.kie.services.impl.model.SignalDescImpl;\n+import org.jbpm.services.api.model.SignalDesc;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class SignalDescImplTest {\n+\n+    @Test\n+    public void testEqualsHashCode() {\n+        SignalDesc signal1 = SignalDescImpl.from(new Signal(\"pepe\", \"pepe\", \"pepe\"));\n+        SignalDesc signal2 = SignalDescImpl.from(new Signal(\"pepe\", \"pepe\", \"pepe\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxNjk0NA=="}, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjMxMTg2OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNzo1OTo1OVrOHrEiJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoxMTozMFrOHsn7JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNTA5NQ==", "bodyText": "sorry for asking but I can't see any potential backward compatibility issue here, do you mind clarifying? thanks!", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r514925095", "createdAt": "2020-10-30T07:59:59Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java", "diffHunk": "@@ -587,17 +589,26 @@ protected String checkSignalAndConvertToRealSignalNam(ExtensibleXmlParser parser\n         }\n         signalNames.add(signalName);\n \n-        Map<String, Signal> signals = (Map<String, Signal>) buildData.getMetaData(\"Signals\");\n+        Map<String, Signal> signals = (Map<String, Signal>) buildData.getMetaData(SIGNALS);\n         if (signals != null ) {\n             if( signals.containsKey(signalName)) {\n                 Signal signal = signals.get(signalName);\n                 signalName = signal.getName();\n                 if (signalName == null) {\n                     throw new IllegalArgumentException(\"Signal definition must have a name attribute\");\n                 }\n+            } else {\n+                // align signals metadata with signal names \n+                // (for backward compatibility we need to support signals even if not defined)\n+                signals.put(signalName, new Signal(signalName, signalName, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE2MDAxNg==", "bodyText": "Our engine is supporting undefined signals (meaning that you can put a signal name in an intermediate event without a signal definition). I cannot enforce that now (because process that are now considered validated, wont be anymore), so I have to add this comparison in code", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515160016", "createdAt": "2020-10-30T14:56:49Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java", "diffHunk": "@@ -587,17 +589,26 @@ protected String checkSignalAndConvertToRealSignalNam(ExtensibleXmlParser parser\n         }\n         signalNames.add(signalName);\n \n-        Map<String, Signal> signals = (Map<String, Signal>) buildData.getMetaData(\"Signals\");\n+        Map<String, Signal> signals = (Map<String, Signal>) buildData.getMetaData(SIGNALS);\n         if (signals != null ) {\n             if( signals.containsKey(signalName)) {\n                 Signal signal = signals.get(signalName);\n                 signalName = signal.getName();\n                 if (signalName == null) {\n                     throw new IllegalArgumentException(\"Signal definition must have a name attribute\");\n                 }\n+            } else {\n+                // align signals metadata with signal names \n+                // (for backward compatibility we need to support signals even if not defined)\n+                signals.put(signalName, new Signal(signalName, signalName, null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNTA5NQ=="}, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMTgxMQ==", "bodyText": "Any time you create a signal in the bpmn2 modeler should create a signal element. So this should not be needed.\nThis is actually hiding a problem in the bpmn2 modeler IMO if that is happening.\nThere are few cases where signals are used to implement something else. They should not be defined as signals but messages.\nStart Message (implemented as signal)\nBoundary events (messages BoundaryEventHandler)\ncatching events (messages)\nthis should be removed.\nIn spite they are implemented as signal you need to make a difference in objects there.", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515901811", "createdAt": "2020-11-02T11:14:02Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java", "diffHunk": "@@ -587,17 +589,26 @@ protected String checkSignalAndConvertToRealSignalNam(ExtensibleXmlParser parser\n         }\n         signalNames.add(signalName);\n \n-        Map<String, Signal> signals = (Map<String, Signal>) buildData.getMetaData(\"Signals\");\n+        Map<String, Signal> signals = (Map<String, Signal>) buildData.getMetaData(SIGNALS);\n         if (signals != null ) {\n             if( signals.containsKey(signalName)) {\n                 Signal signal = signals.get(signalName);\n                 signalName = signal.getName();\n                 if (signalName == null) {\n                     throw new IllegalArgumentException(\"Signal definition must have a name attribute\");\n                 }\n+            } else {\n+                // align signals metadata with signal names \n+                // (for backward compatibility we need to support signals even if not defined)\n+                signals.put(signalName, new Signal(signalName, signalName, null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNTA5NQ=="}, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUzOTk1MQ==", "bodyText": "There are some processes with have a signal ref, but not define signal object, this code is trying to completate that scenario\nhttps://github.com/kiegroup/jbpm/blob/master/jbpm-services/jbpm-kie-services/src/test/resources/repo/processes/general/signal.bpmn", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r516539951", "createdAt": "2020-11-03T09:50:19Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java", "diffHunk": "@@ -587,17 +589,26 @@ protected String checkSignalAndConvertToRealSignalNam(ExtensibleXmlParser parser\n         }\n         signalNames.add(signalName);\n \n-        Map<String, Signal> signals = (Map<String, Signal>) buildData.getMetaData(\"Signals\");\n+        Map<String, Signal> signals = (Map<String, Signal>) buildData.getMetaData(SIGNALS);\n         if (signals != null ) {\n             if( signals.containsKey(signalName)) {\n                 Signal signal = signals.get(signalName);\n                 signalName = signal.getName();\n                 if (signalName == null) {\n                     throw new IllegalArgumentException(\"Signal definition must have a name attribute\");\n                 }\n+            } else {\n+                // align signals metadata with signal names \n+                // (for backward compatibility we need to support signals even if not defined)\n+                signals.put(signalName, new Signal(signalName, signalName, null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNTA5NQ=="}, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1MzUwOQ==", "bodyText": "After talking with Enrique, this non defined signals should not be exposed externally", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r516553509", "createdAt": "2020-11-03T10:11:30Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java", "diffHunk": "@@ -587,17 +589,26 @@ protected String checkSignalAndConvertToRealSignalNam(ExtensibleXmlParser parser\n         }\n         signalNames.add(signalName);\n \n-        Map<String, Signal> signals = (Map<String, Signal>) buildData.getMetaData(\"Signals\");\n+        Map<String, Signal> signals = (Map<String, Signal>) buildData.getMetaData(SIGNALS);\n         if (signals != null ) {\n             if( signals.containsKey(signalName)) {\n                 Signal signal = signals.get(signalName);\n                 signalName = signal.getName();\n                 if (signalName == null) {\n                     throw new IllegalArgumentException(\"Signal definition must have a name attribute\");\n                 }\n+            } else {\n+                // align signals metadata with signal names \n+                // (for backward compatibility we need to support signals even if not defined)\n+                signals.put(signalName, new Signal(signalName, signalName, null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNTA5NQ=="}, "originalCommit": {"oid": "7bbd95359b1239eaede0e50e32c4272cc227bcec"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzEzMDE5OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/bpmn2/ProcessDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToxNjozMVrOHsAOXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToxNjozMVrOHsAOXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMzA2OA==", "bodyText": "this is redundant as we have the signal object here already.", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515903068", "createdAt": "2020-11-02T11:16:31Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/bpmn2/ProcessDescriptor.java", "diffHunk": "@@ -64,6 +66,8 @@\n     private Set<String> referencedRules = new HashSet<String>(1);\n \n     private Collection<String> signals = Collections.emptySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7b2faa5c551bbd53aee6ae9fd266f3751a4474"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzEzNDE1OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/bpmn2/ProcessDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToxNzo0NlrOHsAQuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToxNzo0NlrOHsAQuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMzY3Mg==", "bodyText": "This objects are coming from bpm2 parser. They should not be here.\nyou have an object already for this SignalDesc.\nI dont see the counter part MessageDesc", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515903672", "createdAt": "2020-11-02T11:17:46Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/bpmn2/ProcessDescriptor.java", "diffHunk": "@@ -64,6 +66,8 @@\n     private Set<String> referencedRules = new HashSet<String>(1);\n \n     private Collection<String> signals = Collections.emptySet();\n+    private Collection<Signal> signalsMetadata = Collections.emptySet();\n+    private Collection<Message> messages = Collections.emptySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7b2faa5c551bbd53aee6ae9fd266f3751a4474"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzEzNzQxOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/bpmn2/ProcessDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToxODo0MVrOHsASkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToxODo0MVrOHsASkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNDE0Nw==", "bodyText": "it is not signal metadata... it is the signal element it self. change for a more descriptive name. i.e signallement or signalobject.", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515904147", "createdAt": "2020-11-02T11:18:41Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/bpmn2/ProcessDescriptor.java", "diffHunk": "@@ -177,6 +181,22 @@ public void setSignals( Collection<String> signals ) {\n        this.signals = signals;\n     }\n \n+    public Collection<Signal> getSignalsMetadata() {\n+        return signalsMetadata;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7b2faa5c551bbd53aee6ae9fd266f3751a4474"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzEzOTc1OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/ProcessAssetDesc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToxOToyMVrOHsAT8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToxOToyMVrOHsAT8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNDQ5OA==", "bodyText": "same as before. change to a more descriptive name. this is not the metadata but  the element itself.", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515904498", "createdAt": "2020-11-02T11:19:21Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/ProcessAssetDesc.java", "diffHunk": "@@ -210,6 +215,23 @@ public void setSignals(Collection<String> signals) {\n         this.signals = signals;\n     }\n \n+    @Override\n+    public Collection<SignalDesc> getSignalsMetadata() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7b2faa5c551bbd53aee6ae9fd266f3751a4474"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzE0MjUyOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/ProcessAssetDesc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToyMDowMFrOHsAVjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToyMDowMFrOHsAVjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNDkxMA==", "bodyText": "this should not be here. create a dependency with the parser.\ntry to put this logic in ServicesProcessDataEventListener", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515904910", "createdAt": "2020-11-02T11:20:00Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/ProcessAssetDesc.java", "diffHunk": "@@ -210,6 +215,23 @@ public void setSignals(Collection<String> signals) {\n         this.signals = signals;\n     }\n \n+    @Override\n+    public Collection<SignalDesc> getSignalsMetadata() {\n+        return signalsDesc;\n+    }\n+\n+    public void setSignalsMetadata(Collection<Signal> signals) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7b2faa5c551bbd53aee6ae9fd266f3751a4474"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzE0Njg0OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/model/SignalDesc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToyMToxOVrOHsAYDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToyMToxOVrOHsAYDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNTU0OQ==", "bodyText": "there is no signal type only id, name and structure ref.", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515905549", "createdAt": "2020-11-02T11:21:19Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/model/SignalDesc.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.services.api.model;\n+\n+import java.io.Serializable;\n+\n+public interface SignalDesc extends Serializable {\n+\n+    String getId();\n+\n+    String getName();\n+\n+    String getStructureRef();\n+\n+    SignalType getSignalType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7b2faa5c551bbd53aee6ae9fd266f3751a4474"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzE2MDI3OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/ProcessAssetDesc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToyNToxNVrOHsAfyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToyNToxNVrOHsAfyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNzUzMQ==", "bodyText": "this should not be here. create a dependency with the parser.\ntry to put this logic in ServicesProcessDataEventListener", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515907531", "createdAt": "2020-11-02T11:25:15Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/ProcessAssetDesc.java", "diffHunk": "@@ -210,6 +215,23 @@ public void setSignals(Collection<String> signals) {\n         this.signals = signals;\n     }\n \n+    @Override\n+    public Collection<SignalDesc> getSignalsMetadata() {\n+        return signalsDesc;\n+    }\n+\n+    public void setSignalsMetadata(Collection<Signal> signals) {\n+        for (Signal signal : signals) {\n+            signalsDesc.add(SignalDescImpl.from(signal));\n+        }\n+    }\n+\n+    public void setMessages(Collection<Message> messages) {\n+        for (Message message : messages) {\n+            signalsDesc.add(SignalDescImpl.from(message));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7b2faa5c551bbd53aee6ae9fd266f3751a4474"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzE2NDkyOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/model/SignalType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToyNjozN1rOHsAieg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToyNjozN1rOHsAieg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwODIxOA==", "bodyText": "not required.", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r515908218", "createdAt": "2020-11-02T11:26:37Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/model/SignalType.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7b2faa5c551bbd53aee6ae9fd266f3751a4474"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDkxMzUxOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/ProcessAssetDesc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDozMjowMlrOHuol7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDozMjowMlrOHuol7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY2MTYxNQ==", "bodyText": "messagesDesc should be also added to the output.", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r518661615", "createdAt": "2020-11-06T10:32:02Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/ProcessAssetDesc.java", "diffHunk": "@@ -313,6 +337,7 @@ public String toString() {\n                 \", forms=\" + forms +\n                 \", roles=\" + roles +\n                 \", signals=\" + signals +\n+                \", signalsDesc=\" + signalsDesc +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDk1NDUzOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/MessageDescImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDo0Mzo0OVrOHuo-2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDo0Mzo0OVrOHuo-2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY2Nzk5Mw==", "bodyText": "typo\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static MessageDescImpl from(Message messasge) {\n          \n          \n            \n                public static MessageDescImpl from(Message message) {", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r518667993", "createdAt": "2020-11-06T10:43:49Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/MessageDescImpl.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.kie.services.impl.model;\n+\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.services.api.model.MessageDesc;\n+\n+public class MessageDescImpl extends SignalDescBaseImpl implements MessageDesc {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public static MessageDescImpl from(Message messasge) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDk5NzM2OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/bpmn2/ProcessDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDo1NTo1MFrOHupY-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDo1NTo1MFrOHupY-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3NDY4MA==", "bodyText": "messagesDesc maybe? just to follow same naming convention as signalsDesc - just an idea\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Collection<MessageDesc> messages = Collections.emptySet();\n          \n          \n            \n                private Collection<MessageDesc> messagesDesc = Collections.emptySet();", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r518674680", "createdAt": "2020-11-06T10:55:50Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/bpmn2/ProcessDescriptor.java", "diffHunk": "@@ -64,6 +66,8 @@\n     private Set<String> referencedRules = new HashSet<String>(1);\n \n     private Collection<String> signals = Collections.emptySet();\n+    private Collection<SignalDesc> signalsDesc = Collections.emptySet();\n+    private Collection<MessageDesc> messages = Collections.emptySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTA2NjE2OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/MessageDescImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMToxNDoxNFrOHuqCtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMToxNDoxNFrOHuqCtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4NTM2NA==", "bodyText": "Shouldn't this test class be located under a package org.jbpm.kie.services.impl.model just to follow same package structure for the class to test?", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r518685364", "createdAt": "2020-11-06T11:14:14Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/MessageDescImplTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTA2Njg2OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/SignalDescImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMToxNDoyNFrOHuqDFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMToxNDoyNFrOHuqDFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4NTQ2MQ==", "bodyText": "Shouldn't this test class be located under a package org.jbpm.kie.services.impl.model just to follow same package structure for the class to test?", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r518685461", "createdAt": "2020-11-06T11:14:24Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/SignalDescImplTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTEwODcxOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/BPMN2DataServicesReferencesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMToyNzozOFrOHuqcVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMToyNzozOFrOHuqcVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5MTkyNQ==", "bodyText": "Checked exception is not thrown within this method\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testSignalsDesc() throws IOException {\n          \n          \n            \n                public void testSignalsDesc() {", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r518691925", "createdAt": "2020-11-06T11:27:38Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/BPMN2DataServicesReferencesTest.java", "diffHunk": "@@ -510,7 +521,41 @@ public void testSignalsAndGlobals() throws IOException {\n                     \"person\".equals(globalName) || \"name\".equals(globalName) );\n         }\n \n+        assertNotNull(\"Signals description should not be null\", procDef.getSignalsDesc());\n+        assertNotNull(\"Messages description should not be null\", procDef.getMessagesDesc());\n+        assertTrue(\"Signal description should be empty\", procDef.getSignalsDesc().isEmpty());\n+        assertTrue(\"Messages description should be empty\", procDef.getMessagesDesc().isEmpty());\n+\n         // cleanup\n         processService.abortProcessInstance(procInstId);\n     }\n+\n+    @Test\n+    public void testSignalsDesc() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTExODQ5OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/BPMN2DataServicesReferencesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTozMDo1MFrOHuqiRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTozMDo1MFrOHuqiRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5MzQ0Nw==", "bodyText": "Should be changed to:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertFalse(\"Signal description should be empty\", signals.isEmpty());\n          \n          \n            \n                    assertFalse(\"Signal description should not be empty\", signals.isEmpty());", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r518693447", "createdAt": "2020-11-06T11:30:50Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/BPMN2DataServicesReferencesTest.java", "diffHunk": "@@ -510,7 +521,41 @@ public void testSignalsAndGlobals() throws IOException {\n                     \"person\".equals(globalName) || \"name\".equals(globalName) );\n         }\n \n+        assertNotNull(\"Signals description should not be null\", procDef.getSignalsDesc());\n+        assertNotNull(\"Messages description should not be null\", procDef.getMessagesDesc());\n+        assertTrue(\"Signal description should be empty\", procDef.getSignalsDesc().isEmpty());\n+        assertTrue(\"Messages description should be empty\", procDef.getMessagesDesc().isEmpty());\n+\n         // cleanup\n         processService.abortProcessInstance(procInstId);\n     }\n+\n+    @Test\n+    public void testSignalsDesc() throws IOException {\n+        ProcessDefinition procDef = bpmn2Service.getProcessDefinition(deploymentId, \"org.jbpm.boundarysignal\");\n+        assertNotNull(procDef);\n+\n+        Collection<SignalDesc> signals = procDef.getSignalsDesc();\n+        assertNotNull(\"Signals description should not be null\", signals);\n+        assertFalse(\"Signal description should be empty\", signals.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTEyODkwOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/BPMN2DataServicesReferencesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTozNDozMVrOHuqovw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTozNDozMVrOHuqovw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5NTEwMw==", "bodyText": "I would add an assert for structRef as well, even if it is null, just to cover all possible attributes\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(\"MySignal\", signal.getName());\n          \n          \n            \n                    assertEquals(\"MySignal\", signal.getName());\n          \n          \n            \n                    assertNull(\"Structure Ref is expected to be null\", signal.getStructureRef());", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r518695103", "createdAt": "2020-11-06T11:34:31Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/BPMN2DataServicesReferencesTest.java", "diffHunk": "@@ -510,7 +521,41 @@ public void testSignalsAndGlobals() throws IOException {\n                     \"person\".equals(globalName) || \"name\".equals(globalName) );\n         }\n \n+        assertNotNull(\"Signals description should not be null\", procDef.getSignalsDesc());\n+        assertNotNull(\"Messages description should not be null\", procDef.getMessagesDesc());\n+        assertTrue(\"Signal description should be empty\", procDef.getSignalsDesc().isEmpty());\n+        assertTrue(\"Messages description should be empty\", procDef.getMessagesDesc().isEmpty());\n+\n         // cleanup\n         processService.abortProcessInstance(procInstId);\n     }\n+\n+    @Test\n+    public void testSignalsDesc() throws IOException {\n+        ProcessDefinition procDef = bpmn2Service.getProcessDefinition(deploymentId, \"org.jbpm.boundarysignal\");\n+        assertNotNull(procDef);\n+\n+        Collection<SignalDesc> signals = procDef.getSignalsDesc();\n+        assertNotNull(\"Signals description should not be null\", signals);\n+        assertFalse(\"Signal description should be empty\", signals.isEmpty());\n+\n+        SignalDesc signal = signals.iterator().next();\n+        assertEquals(\"_3b677877-9be0-3fe7-bfc4-94a862fdc919\", signal.getId());\n+        assertEquals(\"MySignal\", signal.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTEzNTg4OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/BPMN2DataServicesReferencesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTozNjo1NVrOHuqs9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTozNjo1NVrOHuqs9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5NjE4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertFalse(\"Message description should be empty\", signals.isEmpty());\n          \n          \n            \n                    assertFalse(\"Message description should not be empty\", signals.isEmpty());", "url": "https://github.com/kiegroup/jbpm/pull/1785#discussion_r518696181", "createdAt": "2020-11-06T11:36:55Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/BPMN2DataServicesReferencesTest.java", "diffHunk": "@@ -510,7 +521,41 @@ public void testSignalsAndGlobals() throws IOException {\n                     \"person\".equals(globalName) || \"name\".equals(globalName) );\n         }\n \n+        assertNotNull(\"Signals description should not be null\", procDef.getSignalsDesc());\n+        assertNotNull(\"Messages description should not be null\", procDef.getMessagesDesc());\n+        assertTrue(\"Signal description should be empty\", procDef.getSignalsDesc().isEmpty());\n+        assertTrue(\"Messages description should be empty\", procDef.getMessagesDesc().isEmpty());\n+\n         // cleanup\n         processService.abortProcessInstance(procInstId);\n     }\n+\n+    @Test\n+    public void testSignalsDesc() throws IOException {\n+        ProcessDefinition procDef = bpmn2Service.getProcessDefinition(deploymentId, \"org.jbpm.boundarysignal\");\n+        assertNotNull(procDef);\n+\n+        Collection<SignalDesc> signals = procDef.getSignalsDesc();\n+        assertNotNull(\"Signals description should not be null\", signals);\n+        assertFalse(\"Signal description should be empty\", signals.isEmpty());\n+\n+        SignalDesc signal = signals.iterator().next();\n+        assertEquals(\"_3b677877-9be0-3fe7-bfc4-94a862fdc919\", signal.getId());\n+        assertEquals(\"MySignal\", signal.getName());\n+    }\n+\n+    @Test\n+    public void testMessageDesc() throws IOException {\n+        ProcessDefinition procDef = bpmn2Service.getProcessDefinition(deploymentId, \"Minimal\");\n+        assertNotNull(procDef);\n+\n+        Collection<MessageDesc> signals = procDef.getMessagesDesc();\n+        assertNotNull(\"Message description should not be null\", signals);\n+        assertFalse(\"Message description should be empty\", signals.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6c0785df9ce2200ed81e94ee49f07f51867a7f"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1613, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}