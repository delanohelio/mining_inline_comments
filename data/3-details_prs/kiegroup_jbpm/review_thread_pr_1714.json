{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MzczNTMy", "number": 1714, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo0NTozNVrOEUMJRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo0NTozNVrOEUMJRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjA1OTU3OnYy", "diffSide": "RIGHT", "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/util/TestsUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo0NTozNVrOG6VwwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjo0OTo0NFrOG6Y1Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyNzEzNw==", "bodyText": "Just really minor thing that this parameter is actually a file and not a name, but nothing major :)", "url": "https://github.com/kiegroup/jbpm/pull/1714#discussion_r463827137", "createdAt": "2020-07-31T20:45:35Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/util/TestsUtil.java", "diffHunk": "@@ -41,35 +41,36 @@\n      * Gets SQL scripts for selected database type.\n      * @param folderWithDDLs Root folder containing SQL scripts for all database types.\n      * @param databaseType Database type.\n-     * @param sortByName If true, resulting array of SQL script files will be sorted by filename using String\n-     * comparator.\n-     * @param dropFiles If true, return those files that don't contain 'drop' into the name. Otherwise,\n-     * return those containing 'drop'\n+     * @param scriptFilter Indicates the filter to apply, including springboot or not scripts and create/drop scripts\n      * @return Array of SQL script files. If there are no SQL script files found, returns empty array.\n      */\n-    public static File[] getDDLScriptFilesByDatabaseType(final File folderWithDDLs, final DatabaseType databaseType,\n-            final boolean sortByName, final boolean dropFiles) {\n+    public static File[] getDDLScriptFilesByDatabaseType(final File folderWithDDLs,\n+                                                         final DatabaseType databaseType,\n+                                                         final ScriptFilter scriptFilter) {\n         final File folderWithScripts = new File(folderWithDDLs.getPath() + File.separator + databaseType.getScriptsFolderName());\n-        if (folderWithScripts.exists()) {\n-            Predicate<File> filterNew = (name) -> name.getName().toLowerCase().contains(\"springboot\");\n-            Predicate<File> filterExtension = (name) -> name.getName().toLowerCase().endsWith(\".sql\");\n-            Predicate<File> filterName = (name) -> name.getName().contains(\"drop\");\n-            Predicate<File> filter = filterExtension.and((!dropFiles) ? filterName : filterName.negate()).and(filterNew.negate());\n-            File[] foundFiles = Arrays.asList(folderWithScripts.listFiles()).stream().filter(filter).toArray(File[]::new);\n-\n-            if (sortByName) {\n-                foundFiles = Arrays.stream(foundFiles).map(DatabaseScript::new).sorted().map(DatabaseScript::getScript).toArray(File[]::new);\n-\n-                if (databaseType.equals(DatabaseType.POSTGRESQL)) {\n-                    //Returns first schema sql\n-                    Arrays.sort(foundFiles, Comparator.<File, Boolean>comparing(s -> s.getName().contains(\"schema\")).reversed());\n-                }\n-            }\n-\n-            return foundFiles;\n-        } else {\n+        \n+        if (!folderWithScripts.exists()) {\n+            logger.warn(\"Folder with DDLs doesn't exist {}\", folderWithDDLs);\n             return new File[0];\n         }\n+        \n+        Predicate<File> filterExtension = (name) -> name.getName().toLowerCase().endsWith(\".sql\");\n+        Predicate<File> filterSpringboot = (name) -> name.getName().toLowerCase().contains(\"springboot\");\n+        Predicate<File> filterName = (name) -> name.getName().contains(\"drop\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa5cd0545657b0a0d48f4df1b543e38968a7e1e8"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzM3OQ==", "bodyText": "Thanks for your review, updated.", "url": "https://github.com/kiegroup/jbpm/pull/1714#discussion_r463877379", "createdAt": "2020-07-31T22:49:44Z", "author": {"login": "gmunozfe"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/util/TestsUtil.java", "diffHunk": "@@ -41,35 +41,36 @@\n      * Gets SQL scripts for selected database type.\n      * @param folderWithDDLs Root folder containing SQL scripts for all database types.\n      * @param databaseType Database type.\n-     * @param sortByName If true, resulting array of SQL script files will be sorted by filename using String\n-     * comparator.\n-     * @param dropFiles If true, return those files that don't contain 'drop' into the name. Otherwise,\n-     * return those containing 'drop'\n+     * @param scriptFilter Indicates the filter to apply, including springboot or not scripts and create/drop scripts\n      * @return Array of SQL script files. If there are no SQL script files found, returns empty array.\n      */\n-    public static File[] getDDLScriptFilesByDatabaseType(final File folderWithDDLs, final DatabaseType databaseType,\n-            final boolean sortByName, final boolean dropFiles) {\n+    public static File[] getDDLScriptFilesByDatabaseType(final File folderWithDDLs,\n+                                                         final DatabaseType databaseType,\n+                                                         final ScriptFilter scriptFilter) {\n         final File folderWithScripts = new File(folderWithDDLs.getPath() + File.separator + databaseType.getScriptsFolderName());\n-        if (folderWithScripts.exists()) {\n-            Predicate<File> filterNew = (name) -> name.getName().toLowerCase().contains(\"springboot\");\n-            Predicate<File> filterExtension = (name) -> name.getName().toLowerCase().endsWith(\".sql\");\n-            Predicate<File> filterName = (name) -> name.getName().contains(\"drop\");\n-            Predicate<File> filter = filterExtension.and((!dropFiles) ? filterName : filterName.negate()).and(filterNew.negate());\n-            File[] foundFiles = Arrays.asList(folderWithScripts.listFiles()).stream().filter(filter).toArray(File[]::new);\n-\n-            if (sortByName) {\n-                foundFiles = Arrays.stream(foundFiles).map(DatabaseScript::new).sorted().map(DatabaseScript::getScript).toArray(File[]::new);\n-\n-                if (databaseType.equals(DatabaseType.POSTGRESQL)) {\n-                    //Returns first schema sql\n-                    Arrays.sort(foundFiles, Comparator.<File, Boolean>comparing(s -> s.getName().contains(\"schema\")).reversed());\n-                }\n-            }\n-\n-            return foundFiles;\n-        } else {\n+        \n+        if (!folderWithScripts.exists()) {\n+            logger.warn(\"Folder with DDLs doesn't exist {}\", folderWithDDLs);\n             return new File[0];\n         }\n+        \n+        Predicate<File> filterExtension = (name) -> name.getName().toLowerCase().endsWith(\".sql\");\n+        Predicate<File> filterSpringboot = (name) -> name.getName().toLowerCase().contains(\"springboot\");\n+        Predicate<File> filterName = (name) -> name.getName().contains(\"drop\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyNzEzNw=="}, "originalCommit": {"oid": "fa5cd0545657b0a0d48f4df1b543e38968a7e1e8"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1762, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}