{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MzczNTMy", "number": 1714, "title": "[JBPM-9259] Create a test to validate new springboot DDL scripts", "bodyText": "With jbpm#1651 new DDL scripts (named with prefix springboot) were added for postgresql and oracle, generated with the property hibernate.id.new_generator_mappings set to true.\nThese scripts have to be validated against definition in order to keep them always updated.", "createdAt": "2020-07-29T11:21:53Z", "url": "https://github.com/kiegroup/jbpm/pull/1714", "merged": true, "mergeCommit": {"oid": "eec30e9dc2ed775b21f41ae4c49f0e57ee7395b8"}, "closed": true, "closedAt": "2020-08-06T06:52:35Z", "author": {"login": "gmunozfe"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5pWGqgBqjM1OTg2MDE0MDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6nfWnABqjM2MTE3NDYwNTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "caaf6c3f02b30814a7e5b88ede3b2efae5e9519e", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/jbpm/commit/caaf6c3f02b30814a7e5b88ede3b2efae5e9519e", "committedDate": "2020-07-29T11:06:36Z", "message": "[JBPM-9259] Create a test to validate new springboot DDL scripts"}, "afterCommit": {"oid": "fa5cd0545657b0a0d48f4df1b543e38968a7e1e8", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/jbpm/commit/fa5cd0545657b0a0d48f4df1b543e38968a7e1e8", "committedDate": "2020-07-29T11:29:39Z", "message": "[JBPM-9259] Create a test to validate new springboot DDL scripts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NDY1NTc0", "url": "https://github.com/kiegroup/jbpm/pull/1714#pullrequestreview-459465574", "createdAt": "2020-07-31T20:45:35Z", "commit": {"oid": "fa5cd0545657b0a0d48f4df1b543e38968a7e1e8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo0NTozNVrOG6VwwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo0NTozNVrOG6VwwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyNzEzNw==", "bodyText": "Just really minor thing that this parameter is actually a file and not a name, but nothing major :)", "url": "https://github.com/kiegroup/jbpm/pull/1714#discussion_r463827137", "createdAt": "2020-07-31T20:45:35Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/util/TestsUtil.java", "diffHunk": "@@ -41,35 +41,36 @@\n      * Gets SQL scripts for selected database type.\n      * @param folderWithDDLs Root folder containing SQL scripts for all database types.\n      * @param databaseType Database type.\n-     * @param sortByName If true, resulting array of SQL script files will be sorted by filename using String\n-     * comparator.\n-     * @param dropFiles If true, return those files that don't contain 'drop' into the name. Otherwise,\n-     * return those containing 'drop'\n+     * @param scriptFilter Indicates the filter to apply, including springboot or not scripts and create/drop scripts\n      * @return Array of SQL script files. If there are no SQL script files found, returns empty array.\n      */\n-    public static File[] getDDLScriptFilesByDatabaseType(final File folderWithDDLs, final DatabaseType databaseType,\n-            final boolean sortByName, final boolean dropFiles) {\n+    public static File[] getDDLScriptFilesByDatabaseType(final File folderWithDDLs,\n+                                                         final DatabaseType databaseType,\n+                                                         final ScriptFilter scriptFilter) {\n         final File folderWithScripts = new File(folderWithDDLs.getPath() + File.separator + databaseType.getScriptsFolderName());\n-        if (folderWithScripts.exists()) {\n-            Predicate<File> filterNew = (name) -> name.getName().toLowerCase().contains(\"springboot\");\n-            Predicate<File> filterExtension = (name) -> name.getName().toLowerCase().endsWith(\".sql\");\n-            Predicate<File> filterName = (name) -> name.getName().contains(\"drop\");\n-            Predicate<File> filter = filterExtension.and((!dropFiles) ? filterName : filterName.negate()).and(filterNew.negate());\n-            File[] foundFiles = Arrays.asList(folderWithScripts.listFiles()).stream().filter(filter).toArray(File[]::new);\n-\n-            if (sortByName) {\n-                foundFiles = Arrays.stream(foundFiles).map(DatabaseScript::new).sorted().map(DatabaseScript::getScript).toArray(File[]::new);\n-\n-                if (databaseType.equals(DatabaseType.POSTGRESQL)) {\n-                    //Returns first schema sql\n-                    Arrays.sort(foundFiles, Comparator.<File, Boolean>comparing(s -> s.getName().contains(\"schema\")).reversed());\n-                }\n-            }\n-\n-            return foundFiles;\n-        } else {\n+        \n+        if (!folderWithScripts.exists()) {\n+            logger.warn(\"Folder with DDLs doesn't exist {}\", folderWithDDLs);\n             return new File[0];\n         }\n+        \n+        Predicate<File> filterExtension = (name) -> name.getName().toLowerCase().endsWith(\".sql\");\n+        Predicate<File> filterSpringboot = (name) -> name.getName().toLowerCase().contains(\"springboot\");\n+        Predicate<File> filterName = (name) -> name.getName().contains(\"drop\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa5cd0545657b0a0d48f4df1b543e38968a7e1e8"}, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa5cd0545657b0a0d48f4df1b543e38968a7e1e8", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/jbpm/commit/fa5cd0545657b0a0d48f4df1b543e38968a7e1e8", "committedDate": "2020-07-29T11:29:39Z", "message": "[JBPM-9259] Create a test to validate new springboot DDL scripts"}, "afterCommit": {"oid": "577841255d4e0b202c304e7048d8aa0e8250cb49", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/jbpm/commit/577841255d4e0b202c304e7048d8aa0e8250cb49", "committedDate": "2020-07-31T22:45:39Z", "message": "[JBPM-9259] Create a test to validate new springboot DDL scripts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4553aa4f3916755be3aff587d026ab0b6faa3cf", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/jbpm/commit/a4553aa4f3916755be3aff587d026ab0b6faa3cf", "committedDate": "2020-08-01T11:53:49Z", "message": "[JBPM-9259] Create a test to validate new springboot DDL scripts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "577841255d4e0b202c304e7048d8aa0e8250cb49", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/jbpm/commit/577841255d4e0b202c304e7048d8aa0e8250cb49", "committedDate": "2020-07-31T22:45:39Z", "message": "[JBPM-9259] Create a test to validate new springboot DDL scripts"}, "afterCommit": {"oid": "a4553aa4f3916755be3aff587d026ab0b6faa3cf", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/jbpm/commit/a4553aa4f3916755be3aff587d026ab0b6faa3cf", "committedDate": "2020-08-01T11:53:49Z", "message": "[JBPM-9259] Create a test to validate new springboot DDL scripts"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 978, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}