{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2Nzg2MTc4", "number": 1699, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo1MDo0OFrOENWCJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzozOToxNVrOEOQyug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDI3OTQxOnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo1MDo0OFrOGv-abw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODoyMzowNFrOGweCXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1ODgzMQ==", "bodyText": "if human task has no name (compositeNode.getName() will return \"null\"):\nPerhaps, in this scenario, it's better to assign \"\" (as well as logging a WARN trace)", "url": "https://github.com/kiegroup/jbpm/pull/1699#discussion_r452958831", "createdAt": "2020-07-10T16:50:48Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -461,7 +461,8 @@ private static void linkBoundaryTimerEvent(NodeContainer nodeContainer, Node nod\n         String timeCycle = (String) node.getMetaData().get(\"TimeCycle\");\n         String timeDate = (String) node.getMetaData().get(\"TimeDate\");\n         Timer timer = new Timer();\n-        timer.setName(node.getName());\n+        String boundaryEventName = node.getName();\n+        timer.setName(compositeNode.getName() +(boundaryEventName != null ? \"-\"+boundaryEventName : \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "360163550a090b5be9bd0ce706a146a77fcaefef"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ3Njk1Nw==", "bodyText": "This scenario has been taken into account", "url": "https://github.com/kiegroup/jbpm/pull/1699#discussion_r453476957", "createdAt": "2020-07-13T08:23:04Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -461,7 +461,8 @@ private static void linkBoundaryTimerEvent(NodeContainer nodeContainer, Node nod\n         String timeCycle = (String) node.getMetaData().get(\"TimeCycle\");\n         String timeDate = (String) node.getMetaData().get(\"TimeDate\");\n         Timer timer = new Timer();\n-        timer.setName(node.getName());\n+        String boundaryEventName = node.getName();\n+        timer.setName(compositeNode.getName() +(boundaryEventName != null ? \"-\"+boundaryEventName : \"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1ODgzMQ=="}, "originalCommit": {"oid": "360163550a090b5be9bd0ce706a146a77fcaefef"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzkwMjI3OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/admin/ProcessInstanceAdminServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzozODoxMlrOGxUDqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzozODoxMlrOGxUDqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2MjAyNQ==", "bodyText": "Here as well, assertEquals(\"usertask-timer\", timer.getTimerName());", "url": "https://github.com/kiegroup/jbpm/pull/1699#discussion_r454362025", "createdAt": "2020-07-14T13:38:12Z", "author": {"login": "MarianMacik"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/admin/ProcessInstanceAdminServiceImplTest.java", "diffHunk": "@@ -413,6 +414,21 @@ public void testListSLATimer() throws Exception {\n         assertNotNull(timer.getId());\n         assertNotNull(timer.getTimerName());\n     }\n+    \n+    @Test(timeout=10000)\n+    public void testTimerName() throws Exception {\n+        processInstanceId = processService.startProcess(deploymentUnit.getIdentifier(), \"org.jbpm.boundarytimer\");\n+        assertNotNull(processInstanceId);\n+        \n+        Collection<TimerInstance> timers = processAdminService.getTimerInstances(processInstanceId);\n+        assertNotNull(timers);\n+        assertEquals(1, timers.size());\n+        \n+        TimerInstance timer = timers.iterator().next();\n+        assertEquals(\"usertask-timer\",timer.getTimerName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f0aab3053476e985095f937dc7d24eac1b8f49b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzkwNjUwOnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzozOToxNVrOGxUGUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzo1Mjo0OVrOGxUsLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2MjcwNg==", "bodyText": "Just a recommendation for the code style. It should be concatName(String prefix...) (no space) and return prefix.concat('-' + suffix); (space between operator and operands). If you use Eclipse or IntelliJ IDEA, you can find IDE configuration here: https://github.com/kiegroup/droolsjbpm-build-bootstrap/tree/master/ide-configuration", "url": "https://github.com/kiegroup/jbpm/pull/1699#discussion_r454362706", "createdAt": "2020-07-14T13:39:15Z", "author": {"login": "MarianMacik"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -454,14 +454,24 @@ private static void linkBoundaryErrorEvent(NodeContainer nodeContainer, Node nod\n         ((EventNode)node).setActions(EndNode.EVENT_NODE_EXIT, actions);\n     }\n     \n+    private static String concatName (String prefix, String suffix) {\n+        if (prefix == null) {\n+            return suffix;\n+        } else if (suffix == null) {\n+            return prefix;\n+        } else {\n+            return prefix.concat('-'+suffix);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f0aab3053476e985095f937dc7d24eac1b8f49b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM3MjM5Ng==", "bodyText": "Thanks for the advice. I have code style imported in eclipse but apply it manually because some old files do not follow the format and the result of automatic formatting is messy. In this particular case and the previous one, I forgot to format manually.", "url": "https://github.com/kiegroup/jbpm/pull/1699#discussion_r454372396", "createdAt": "2020-07-14T13:52:49Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -454,14 +454,24 @@ private static void linkBoundaryErrorEvent(NodeContainer nodeContainer, Node nod\n         ((EventNode)node).setActions(EndNode.EVENT_NODE_EXIT, actions);\n     }\n     \n+    private static String concatName (String prefix, String suffix) {\n+        if (prefix == null) {\n+            return suffix;\n+        } else if (suffix == null) {\n+            return prefix;\n+        } else {\n+            return prefix.concat('-'+suffix);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2MjcwNg=="}, "originalCommit": {"oid": "3f0aab3053476e985095f937dc7d24eac1b8f49b"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1748, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}