{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxOTAwMjc5", "number": 1592, "title": "RHPAM-2555 - Require the ability to define a set of mandatory case / \u2026", "bodyText": "\u2026process creation variables\n@elguardian @gmunozfe would you mind to have a look?", "createdAt": "2020-02-06T13:30:38Z", "url": "https://github.com/kiegroup/jbpm/pull/1592", "merged": true, "mergeCommit": {"oid": "144b74ed1db46114a11d317407cafd42bc2a2257"}, "closed": true, "closedAt": "2020-02-10T11:51:51Z", "author": {"login": "mswiderski"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBtJUngBqjMwMTQ1MjY2MTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcC61pIgFqTM1NTg0MDUxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff22b1617cd23b57cc797a5ca434d95e2845343f", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/jbpm/commit/ff22b1617cd23b57cc797a5ca434d95e2845343f", "committedDate": "2020-02-06T13:29:31Z", "message": "RHPAM-2555 - Require the ability to define a set of mandatory case / process creation variables"}, "afterCommit": {"oid": "15bb0f4c9f33126aa4aeaab15667c9353cf1b3f4", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/jbpm/commit/15bb0f4c9f33126aa4aeaab15667c9353cf1b3f4", "committedDate": "2020-02-06T16:15:42Z", "message": "RHPAM-2555 - Require the ability to define a set of mandatory case / process creation variables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NTMzMTI0", "url": "https://github.com/kiegroup/jbpm/pull/1592#pullrequestreview-354533124", "createdAt": "2020-02-06T15:20:33Z", "commit": {"oid": "ff22b1617cd23b57cc797a5ca434d95e2845343f"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNToyMDozM1rOFme8eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzoxMzo0NVrOFmjTZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg5NzIxMA==", "bodyText": "This block is common to all tests in this class and could be extracted to a private method, parameterizing the name of the process", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r375897210", "createdAt": "2020-02-06T15:20:33Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+ package org.jbpm.bpmn2;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.jbpm.bpmn2.objects.TestWorkItemHandler;\n+import org.jbpm.process.core.context.variable.VariableViolationException;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.process.WorkItem;\n+\n+@RunWith(Parameterized.class)\n+ public class VariableTagsTest extends JbpmBpmn2TestCase {\n+\n+     @Parameters\n+     public static Collection<Object[]> persistence() {\n+         Object[][] data = new Object[][] { { false }, { true } };\n+         return Arrays.asList(data);\n+     };\n+\n+     private KieSession ksession;\n+     private KieSession ksession2;\n+\n+     public VariableTagsTest(boolean persistence) throws Exception {\n+         super(persistence);\n+     }\n+\n+     @BeforeClass\n+     public static void setup() throws Exception {\n+         setUpDataSource();\n+     }\n+\n+     @After\n+     public void dispose() {\n+         if (ksession != null) {\n+             abortProcessInstances(ksession);\n+             ksession.dispose();\n+             ksession = null;\n+         }\n+         if (ksession2 != null) {\n+             ksession2.dispose();\n+             ksession2 = null;\n+         }\n+     }\n+\n+     @Test\n+     public void testProcessWithMissingRequiredVariable() throws Exception {\n+         KieBase kbase = createKnowledgeBase(\"variable-tags/approval-with-required-variable-tags.bpmn2\");\n+         KieSession ksession = createKnowledgeSession(kbase);\n+         TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+         ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff22b1617cd23b57cc797a5ca434d95e2845343f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwNzE3MA==", "bodyText": "It is not used, you can remove it", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r375907170", "createdAt": "2020-02-06T15:36:18Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+ package org.jbpm.bpmn2;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.jbpm.bpmn2.objects.TestWorkItemHandler;\n+import org.jbpm.process.core.context.variable.VariableViolationException;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.process.WorkItem;\n+\n+@RunWith(Parameterized.class)\n+ public class VariableTagsTest extends JbpmBpmn2TestCase {\n+\n+     @Parameters\n+     public static Collection<Object[]> persistence() {\n+         Object[][] data = new Object[][] { { false }, { true } };\n+         return Arrays.asList(data);\n+     };\n+\n+     private KieSession ksession;\n+     private KieSession ksession2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff22b1617cd23b57cc797a5ca434d95e2845343f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwNzYzOA==", "bodyText": "Same, it can be removed", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r375907638", "createdAt": "2020-02-06T15:36:48Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+ package org.jbpm.bpmn2;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.jbpm.bpmn2.objects.TestWorkItemHandler;\n+import org.jbpm.process.core.context.variable.VariableViolationException;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.process.WorkItem;\n+\n+@RunWith(Parameterized.class)\n+ public class VariableTagsTest extends JbpmBpmn2TestCase {\n+\n+     @Parameters\n+     public static Collection<Object[]> persistence() {\n+         Object[][] data = new Object[][] { { false }, { true } };\n+         return Arrays.asList(data);\n+     };\n+\n+     private KieSession ksession;\n+     private KieSession ksession2;\n+\n+     public VariableTagsTest(boolean persistence) throws Exception {\n+         super(persistence);\n+     }\n+\n+     @BeforeClass\n+     public static void setup() throws Exception {\n+         setUpDataSource();\n+     }\n+\n+     @After\n+     public void dispose() {\n+         if (ksession != null) {\n+             abortProcessInstances(ksession);\n+             ksession.dispose();\n+             ksession = null;\n+         }\n+         if (ksession2 != null) {\n+             ksession2.dispose();\n+             ksession2 = null;\n+         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff22b1617cd23b57cc797a5ca434d95e2845343f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwOTU5OA==", "bodyText": "ksession is already defined as attribute of the class", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r375909598", "createdAt": "2020-02-06T15:39:11Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+ package org.jbpm.bpmn2;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.jbpm.bpmn2.objects.TestWorkItemHandler;\n+import org.jbpm.process.core.context.variable.VariableViolationException;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.process.WorkItem;\n+\n+@RunWith(Parameterized.class)\n+ public class VariableTagsTest extends JbpmBpmn2TestCase {\n+\n+     @Parameters\n+     public static Collection<Object[]> persistence() {\n+         Object[][] data = new Object[][] { { false }, { true } };\n+         return Arrays.asList(data);\n+     };\n+\n+     private KieSession ksession;\n+     private KieSession ksession2;\n+\n+     public VariableTagsTest(boolean persistence) throws Exception {\n+         super(persistence);\n+     }\n+\n+     @BeforeClass\n+     public static void setup() throws Exception {\n+         setUpDataSource();\n+     }\n+\n+     @After\n+     public void dispose() {\n+         if (ksession != null) {\n+             abortProcessInstances(ksession);\n+             ksession.dispose();\n+             ksession = null;\n+         }\n+         if (ksession2 != null) {\n+             ksession2.dispose();\n+             ksession2 = null;\n+         }\n+     }\n+\n+     @Test\n+     public void testProcessWithMissingRequiredVariable() throws Exception {\n+         KieBase kbase = createKnowledgeBase(\"variable-tags/approval-with-required-variable-tags.bpmn2\");\n+         KieSession ksession = createKnowledgeSession(kbase);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff22b1617cd23b57cc797a5ca434d95e2845343f"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkxNzk4NA==", "bodyText": "This is also done in the After method, it can be removed from here", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r375917984", "createdAt": "2020-02-06T15:51:59Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+ package org.jbpm.bpmn2;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.jbpm.bpmn2.objects.TestWorkItemHandler;\n+import org.jbpm.process.core.context.variable.VariableViolationException;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.process.WorkItem;\n+\n+@RunWith(Parameterized.class)\n+ public class VariableTagsTest extends JbpmBpmn2TestCase {\n+\n+     @Parameters\n+     public static Collection<Object[]> persistence() {\n+         Object[][] data = new Object[][] { { false }, { true } };\n+         return Arrays.asList(data);\n+     };\n+\n+     private KieSession ksession;\n+     private KieSession ksession2;\n+\n+     public VariableTagsTest(boolean persistence) throws Exception {\n+         super(persistence);\n+     }\n+\n+     @BeforeClass\n+     public static void setup() throws Exception {\n+         setUpDataSource();\n+     }\n+\n+     @After\n+     public void dispose() {\n+         if (ksession != null) {\n+             abortProcessInstances(ksession);\n+             ksession.dispose();\n+             ksession = null;\n+         }\n+         if (ksession2 != null) {\n+             ksession2.dispose();\n+             ksession2 = null;\n+         }\n+     }\n+\n+     @Test\n+     public void testProcessWithMissingRequiredVariable() throws Exception {\n+         KieBase kbase = createKnowledgeBase(\"variable-tags/approval-with-required-variable-tags.bpmn2\");\n+         KieSession ksession = createKnowledgeSession(kbase);\n+         TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+         ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);\n+\n+         assertThatExceptionOfType(VariableViolationException.class).isThrownBy(() -> ksession.startProcess(\"approvals\"));\n+\n+         ksession.dispose();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff22b1617cd23b57cc797a5ca434d95e2845343f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk2ODUwOQ==", "bodyText": "Not needed", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r375968509", "createdAt": "2020-02-06T17:13:35Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+ package org.jbpm.bpmn2;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.jbpm.bpmn2.objects.TestWorkItemHandler;\n+import org.jbpm.process.core.context.variable.VariableViolationException;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.process.WorkItem;\n+\n+@RunWith(Parameterized.class)\n+ public class VariableTagsTest extends JbpmBpmn2TestCase {\n+\n+     @Parameters\n+     public static Collection<Object[]> persistence() {\n+         Object[][] data = new Object[][] { { false }, { true } };\n+         return Arrays.asList(data);\n+     };\n+\n+     private KieSession ksession;\n+     private KieSession ksession2;\n+\n+     public VariableTagsTest(boolean persistence) throws Exception {\n+         super(persistence);\n+     }\n+\n+     @BeforeClass\n+     public static void setup() throws Exception {\n+         setUpDataSource();\n+     }\n+\n+     @After\n+     public void dispose() {\n+         if (ksession != null) {\n+             abortProcessInstances(ksession);\n+             ksession.dispose();\n+             ksession = null;\n+         }\n+         if (ksession2 != null) {\n+             ksession2.dispose();\n+             ksession2 = null;\n+         }\n+     }\n+\n+     @Test\n+     public void testProcessWithMissingRequiredVariable() throws Exception {\n+         KieBase kbase = createKnowledgeBase(\"variable-tags/approval-with-required-variable-tags.bpmn2\");\n+         KieSession ksession = createKnowledgeSession(kbase);\n+         TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+         ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);\n+\n+         assertThatExceptionOfType(VariableViolationException.class).isThrownBy(() -> ksession.startProcess(\"approvals\"));\n+\n+         ksession.dispose();\n+     }\n+\n+     @Test\n+     public void testProcessWithRequiredVariable() throws Exception {\n+         KieBase kbase = createKnowledgeBase(\"variable-tags/approval-with-required-variable-tags.bpmn2\");\n+         KieSession ksession = createKnowledgeSession(kbase);\n+         TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+         ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);\n+\n+         Map<String, Object> parameters = new HashMap<>();\n+         parameters.put(\"approver\", \"john\");\n+\n+         ProcessInstance processInstance = ksession.startProcess(\"approvals\", parameters);\n+         assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);\n+         ksession = restoreSession(ksession, true);\n+         ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);\n+         WorkItem workItem = workItemHandler.getWorkItem();\n+         assertNotNull(workItem);\n+         ksession.getWorkItemManager().completeWorkItem(workItem.getId(), null);\n+\n+         workItem = workItemHandler.getWorkItem();\n+         assertNotNull(workItem);        \n+         ksession.getWorkItemManager().completeWorkItem(workItem.getId(), null);\n+\n+         assertProcessInstanceFinished(processInstance, ksession);\n+         ksession.dispose();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15bb0f4c9f33126aa4aeaab15667c9353cf1b3f4"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk2ODYxMw==", "bodyText": "Not needed", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r375968613", "createdAt": "2020-02-06T17:13:45Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/VariableTagsTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+ package org.jbpm.bpmn2;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.jbpm.bpmn2.objects.TestWorkItemHandler;\n+import org.jbpm.process.core.context.variable.VariableViolationException;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.api.runtime.process.WorkItem;\n+\n+@RunWith(Parameterized.class)\n+ public class VariableTagsTest extends JbpmBpmn2TestCase {\n+\n+     @Parameters\n+     public static Collection<Object[]> persistence() {\n+         Object[][] data = new Object[][] { { false }, { true } };\n+         return Arrays.asList(data);\n+     };\n+\n+     private KieSession ksession;\n+     private KieSession ksession2;\n+\n+     public VariableTagsTest(boolean persistence) throws Exception {\n+         super(persistence);\n+     }\n+\n+     @BeforeClass\n+     public static void setup() throws Exception {\n+         setUpDataSource();\n+     }\n+\n+     @After\n+     public void dispose() {\n+         if (ksession != null) {\n+             abortProcessInstances(ksession);\n+             ksession.dispose();\n+             ksession = null;\n+         }\n+         if (ksession2 != null) {\n+             ksession2.dispose();\n+             ksession2 = null;\n+         }\n+     }\n+\n+     @Test\n+     public void testProcessWithMissingRequiredVariable() throws Exception {\n+         KieBase kbase = createKnowledgeBase(\"variable-tags/approval-with-required-variable-tags.bpmn2\");\n+         KieSession ksession = createKnowledgeSession(kbase);\n+         TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+         ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);\n+\n+         assertThatExceptionOfType(VariableViolationException.class).isThrownBy(() -> ksession.startProcess(\"approvals\"));\n+\n+         ksession.dispose();\n+     }\n+\n+     @Test\n+     public void testProcessWithRequiredVariable() throws Exception {\n+         KieBase kbase = createKnowledgeBase(\"variable-tags/approval-with-required-variable-tags.bpmn2\");\n+         KieSession ksession = createKnowledgeSession(kbase);\n+         TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+         ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);\n+\n+         Map<String, Object> parameters = new HashMap<>();\n+         parameters.put(\"approver\", \"john\");\n+\n+         ProcessInstance processInstance = ksession.startProcess(\"approvals\", parameters);\n+         assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);\n+         ksession = restoreSession(ksession, true);\n+         ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);\n+         WorkItem workItem = workItemHandler.getWorkItem();\n+         assertNotNull(workItem);\n+         ksession.getWorkItemManager().completeWorkItem(workItem.getId(), null);\n+\n+         workItem = workItemHandler.getWorkItem();\n+         assertNotNull(workItem);        \n+         ksession.getWorkItemManager().completeWorkItem(workItem.getId(), null);\n+\n+         assertProcessInstanceFinished(processInstance, ksession);\n+         ksession.dispose();\n+     }\n+\n+     @Test\n+     public void testProcessWithReadonlyVariable() throws Exception {\n+         KieBase kbase = createKnowledgeBase(\"variable-tags/approval-with-readonly-variable-tags.bpmn2\");\n+         KieSession ksession = createKnowledgeSession(kbase);\n+         TestWorkItemHandler workItemHandler = new TestWorkItemHandler();\n+         ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\", workItemHandler);\n+\n+         Map<String, Object> parameters = new HashMap<>();\n+         parameters.put(\"approver\", \"john\");\n+\n+         ProcessInstance processInstance = ksession.startProcess(\"approvals\", parameters);\n+         assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);        \n+         WorkItem workItem = workItemHandler.getWorkItem();\n+         assertNotNull(workItem);\n+\n+         assertThatExceptionOfType(VariableViolationException.class).isThrownBy(() -> ksession.getWorkItemManager().completeWorkItem(workItem.getId(), Collections.singletonMap(\"ActorId\", \"john\")));\n+         ksession.abortProcessInstance(processInstance.getId());\n+\n+         assertProcessInstanceFinished(processInstance, ksession);\n+         ksession.dispose();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15bb0f4c9f33126aa4aeaab15667c9353cf1b3f4"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0ODM5MjMw", "url": "https://github.com/kiegroup/jbpm/pull/1592#pullrequestreview-354839230", "createdAt": "2020-02-06T23:14:31Z", "commit": {"oid": "89dafa4aab5fb153e07ef030c20e606a7165143d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzoxNDozMVrOFmtecQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzo0MToxOFrOFmuAQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzNTI4MQ==", "bodyText": "Here it's overwriting the errorMessage passed by the caller.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    super(\"Variable '\" + variableName + \"' in process instance '\" + (processInstanceId == null ? \"unknown\" : processInstanceId) + \"' violated\");\n          \n          \n            \n                    super(errorMessage);\n          \n      \n    \n    \n  \n\nCurrently, it's displaying for case scenarios:\nVariable 'caseFile_s' in process instance '1' violated\ninstead of the errorMessage tailored for variables starting with CASE_FILE_PREFIX:\nCase file item 'caseFile_s' is required but not set\nIf the process instance id is useful to be shown, then it may come from the caller itself.", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376135281", "createdAt": "2020-02-06T23:14:31Z", "author": {"login": "gmunozfe"}, "path": "jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/VariableViolationException.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.process.core.context.variable;\n+\n+/**\n+ * Thrown when there is any kind of variable violation such as missing required variable\n+ * or attempt to set already defined readonly variable. \n+ * \n+ */\n+public class VariableViolationException extends RuntimeException {\n+\n+    private static final long serialVersionUID = 8031225233775014572L;\n+\n+    private final Long processInstanceId;\n+    private final String variableName;\n+    private final String errorMessage;\n+\n+    public VariableViolationException(Long processInstanceId, String variableName, String errorMessage) {\n+        super(\"Variable '\" + variableName + \"' in process instance '\" + (processInstanceId == null ? \"unknown\" : processInstanceId) + \"' violated\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89dafa4aab5fb153e07ef030c20e606a7165143d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MDY0OQ==", "bodyText": "variable.getName() is already retrieved at name\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (!findCaseData(variable.getName())) {\n          \n          \n            \n                                if (!findCaseData(name)) {", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376140649", "createdAt": "2020-02-06T23:31:02Z", "author": {"login": "gmunozfe"}, "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java", "diffHunk": "@@ -162,5 +168,41 @@ public void setContextInstanceContainer(ContextInstanceContainer contextInstance\n     \t\tthis.variableInstanceIdPrefix = ((CompositeContextNodeInstance) contextInstanceContainer).getUniqueId();\n     \t}\n \t}\n+    \n+    public void enforceRequiredVariables() {\n+        VariableScope variableScope = getVariableScope();\n+        for (Variable variable : variableScope.getVariables()) {\n+            String name = variable.getName();\n+            if (variableScope.isRequired(name)) {  \n+                // check case file if it is prefixed\n+                if (name.startsWith(VariableScope.CASE_FILE_PREFIX)) {\n+                    if (!findCaseData(variable.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89dafa4aab5fb153e07ef030c20e606a7165143d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MTEyNQ==", "bodyText": "It may be added the processInstanceId into the errorMessage, as this will be pass to the parents.", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376141125", "createdAt": "2020-02-06T23:32:33Z", "author": {"login": "gmunozfe"}, "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java", "diffHunk": "@@ -162,5 +168,41 @@ public void setContextInstanceContainer(ContextInstanceContainer contextInstance\n     \t\tthis.variableInstanceIdPrefix = ((CompositeContextNodeInstance) contextInstanceContainer).getUniqueId();\n     \t}\n \t}\n+    \n+    public void enforceRequiredVariables() {\n+        VariableScope variableScope = getVariableScope();\n+        for (Variable variable : variableScope.getVariables()) {\n+            String name = variable.getName();\n+            if (variableScope.isRequired(name)) {  \n+                // check case file if it is prefixed\n+                if (name.startsWith(VariableScope.CASE_FILE_PREFIX)) {\n+                    if (!findCaseData(variable.getName())) {\n+                        throw new VariableViolationException(getProcessInstance().getId(), name, \"Case file item '\" + name + \"' is required but not set\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89dafa4aab5fb153e07ef030c20e606a7165143d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MjA0Mw==", "bodyText": "Same here, variable.getName() is already at name, and also processInstanceId can be added into the errorMessage", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376142043", "createdAt": "2020-02-06T23:34:58Z", "author": {"login": "gmunozfe"}, "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java", "diffHunk": "@@ -162,5 +168,41 @@ public void setContextInstanceContainer(ContextInstanceContainer contextInstance\n     \t\tthis.variableInstanceIdPrefix = ((CompositeContextNodeInstance) contextInstanceContainer).getUniqueId();\n     \t}\n \t}\n+    \n+    public void enforceRequiredVariables() {\n+        VariableScope variableScope = getVariableScope();\n+        for (Variable variable : variableScope.getVariables()) {\n+            String name = variable.getName();\n+            if (variableScope.isRequired(name)) {  \n+                // check case file if it is prefixed\n+                if (name.startsWith(VariableScope.CASE_FILE_PREFIX)) {\n+                    if (!findCaseData(variable.getName())) {\n+                        throw new VariableViolationException(getProcessInstance().getId(), name, \"Case file item '\" + name + \"' is required but not set\");\n+                        \n+                    }\n+                    // otherwise check variables                    \n+                } else if (!variables.containsKey(name)) {\n+                    throw new VariableViolationException(getProcessInstance().getId(), variable.getName(), \"Variable '\" + variable.getName() + \"' is required but not set\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89dafa4aab5fb153e07ef030c20e606a7165143d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MzkzNg==", "bodyText": "For reducing indentation, it can return if condition is opposite\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (variableScope.isRequired(name)) {  \n          \n          \n            \n                        if (!variableScope.isRequired(name)) {\n          \n          \n            \n                          return;\n          \n          \n            \n                        }", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376143936", "createdAt": "2020-02-06T23:41:18Z", "author": {"login": "gmunozfe"}, "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/context/variable/VariableScopeInstance.java", "diffHunk": "@@ -162,5 +168,41 @@ public void setContextInstanceContainer(ContextInstanceContainer contextInstance\n     \t\tthis.variableInstanceIdPrefix = ((CompositeContextNodeInstance) contextInstanceContainer).getUniqueId();\n     \t}\n \t}\n+    \n+    public void enforceRequiredVariables() {\n+        VariableScope variableScope = getVariableScope();\n+        for (Variable variable : variableScope.getVariables()) {\n+            String name = variable.getName();\n+            if (variableScope.isRequired(name)) {  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89dafa4aab5fb153e07ef030c20e606a7165143d"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0ODcxNTM2", "url": "https://github.com/kiegroup/jbpm/pull/1592#pullrequestreview-354871536", "createdAt": "2020-02-07T00:48:29Z", "commit": {"oid": "89dafa4aab5fb153e07ef030c20e606a7165143d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDo0ODoyOVrOFmvJAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDo0ODoyOVrOFmvJAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MjU2Mw==", "bodyText": "It seems like \"setMetaData\" is never called for \"customTags\" name, so tags is never cached, if this was the purpose of these lines.", "url": "https://github.com/kiegroup/jbpm/pull/1592#discussion_r376162563", "createdAt": "2020-02-07T00:48:29Z", "author": {"login": "gmunozfe"}, "path": "jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java", "diffHunk": "@@ -80,6 +90,9 @@ public void setValue(final Object value) {\n \n     public void setMetaData(String name, Object value) {\n         this.metaData.put(name, value);\n+        if (VARIABLE_TAGS.equals(name) && value != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89dafa4aab5fb153e07ef030c20e606a7165143d"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0ODcxODM1", "url": "https://github.com/kiegroup/jbpm/pull/1592#pullrequestreview-354871835", "createdAt": "2020-02-07T00:49:29Z", "commit": {"oid": "89dafa4aab5fb153e07ef030c20e606a7165143d"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0OTY5MDU1", "url": "https://github.com/kiegroup/jbpm/pull/1592#pullrequestreview-354969055", "createdAt": "2020-02-07T07:25:46Z", "commit": {"oid": "89dafa4aab5fb153e07ef030c20e606a7165143d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "524e04bb35c95cfbd5c624af2828bd352f9ec03c", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/jbpm/commit/524e04bb35c95cfbd5c624af2828bd352f9ec03c", "committedDate": "2020-02-07T13:21:43Z", "message": "RHPAM-2555 - Require the ability to define a set of mandatory case / process creation variables"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89dafa4aab5fb153e07ef030c20e606a7165143d", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/jbpm/commit/89dafa4aab5fb153e07ef030c20e606a7165143d", "committedDate": "2020-02-06T18:25:59Z", "message": "[RHPAM-2555] Add new tests to VariableTagsTest (#15)"}, "afterCommit": {"oid": "524e04bb35c95cfbd5c624af2828bd352f9ec03c", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/jbpm/commit/524e04bb35c95cfbd5c624af2828bd352f9ec03c", "committedDate": "2020-02-07T13:21:43Z", "message": "RHPAM-2555 - Require the ability to define a set of mandatory case / process creation variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf65a96ec233189076503b8efffb027032b025ef", "author": {"user": {"login": "gmunozfe", "name": "Gonzalo Mu\u00f1oz"}}, "url": "https://github.com/kiegroup/jbpm/commit/bf65a96ec233189076503b8efffb027032b025ef", "committedDate": "2020-02-07T13:47:18Z", "message": "Add new tests to VariableTagsTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1ODQwNTEz", "url": "https://github.com/kiegroup/jbpm/pull/1592#pullrequestreview-355840513", "createdAt": "2020-02-10T10:47:01Z", "commit": {"oid": "bf65a96ec233189076503b8efffb027032b025ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1036, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}