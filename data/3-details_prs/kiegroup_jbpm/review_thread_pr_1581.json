{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNzcwMTI2", "number": 1581, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTowNjo1NVrODYwNhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDo0NjoxNFrODYx4Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjgyMzA5OnYy", "diffSide": "RIGHT", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/ReopenCaseCommand.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTowNjo1NVrOFeyorw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMzozODo0MFrOFe5Mbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgzMTIxNQ==", "bodyText": "Hi @mswiderski\nThere are 3 tests failing in CaseServiceImplTest class:\ntestStartThenReopenEmptyCase\ntestStartThenReopenEmptyCaseUpdateData\ntestStartThenReopenEmptyCaseUpdateDescription\nexpected:<[my first case]> but was:<[#{name}]>\nIt seems like when starting the process, {name} variable has no value", "url": "https://github.com/kiegroup/jbpm/pull/1581#discussion_r367831215", "createdAt": "2020-01-17T09:06:55Z", "author": {"login": "gmunozfe"}, "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/ReopenCaseCommand.java", "diffHunk": "@@ -79,20 +79,22 @@ public Void execute(Context context) {\n         \n         caseEventSupport.fireBeforeCaseReopened(caseId, caseFile, deploymentId, caseDefinitionId, data);\n         \n-        logger.debug(\"Updating case file in working memory\");\n+        logger.debug(\"Removing case file from working memory to allow refiring of rules\");\n         FactHandle factHandle = ksession.getFactHandle(caseFile);\n+        ksession.delete(factHandle);\n         ((CaseFileInstanceImpl)caseFile).setCaseReopenDate(new Date());\n         if (data != null && !data.isEmpty()) {\n             caseFile.addAll(data);\n         }\n-        ksession.update(factHandle, caseFile);\n+        \n         \n         logger.debug(\"Starting process instance for case {} and case definition {}\", caseId, caseDefinitionId);\n         CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(caseId);\n         Map<String, Object> params = new HashMap<>();\n         // set case id to allow it to use CaseContext when creating runtime engine\n         params.put(EnvironmentName.CASE_ID, caseId);\n         long processInstanceId = processService.startProcess(deploymentId, caseDefinitionId, correlationKey, params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b7010f0b15373799bb59970b8fcf3faec54902b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg3NDgyOA==", "bodyText": "working on a fix, thanks for checking on it", "url": "https://github.com/kiegroup/jbpm/pull/1581#discussion_r367874828", "createdAt": "2020-01-17T10:47:30Z", "author": {"login": "mswiderski"}, "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/ReopenCaseCommand.java", "diffHunk": "@@ -79,20 +79,22 @@ public Void execute(Context context) {\n         \n         caseEventSupport.fireBeforeCaseReopened(caseId, caseFile, deploymentId, caseDefinitionId, data);\n         \n-        logger.debug(\"Updating case file in working memory\");\n+        logger.debug(\"Removing case file from working memory to allow refiring of rules\");\n         FactHandle factHandle = ksession.getFactHandle(caseFile);\n+        ksession.delete(factHandle);\n         ((CaseFileInstanceImpl)caseFile).setCaseReopenDate(new Date());\n         if (data != null && !data.isEmpty()) {\n             caseFile.addAll(data);\n         }\n-        ksession.update(factHandle, caseFile);\n+        \n         \n         logger.debug(\"Starting process instance for case {} and case definition {}\", caseId, caseDefinitionId);\n         CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(caseId);\n         Map<String, Object> params = new HashMap<>();\n         // set case id to allow it to use CaseContext when creating runtime engine\n         params.put(EnvironmentName.CASE_ID, caseId);\n         long processInstanceId = processService.startProcess(deploymentId, caseDefinitionId, correlationKey, params);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgzMTIxNQ=="}, "originalCommit": {"oid": "4b7010f0b15373799bb59970b8fcf3faec54902b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg3NzkwOQ==", "bodyText": "pushed a fix so let's see how it goes in Jenkins now...", "url": "https://github.com/kiegroup/jbpm/pull/1581#discussion_r367877909", "createdAt": "2020-01-17T10:54:33Z", "author": {"login": "mswiderski"}, "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/ReopenCaseCommand.java", "diffHunk": "@@ -79,20 +79,22 @@ public Void execute(Context context) {\n         \n         caseEventSupport.fireBeforeCaseReopened(caseId, caseFile, deploymentId, caseDefinitionId, data);\n         \n-        logger.debug(\"Updating case file in working memory\");\n+        logger.debug(\"Removing case file from working memory to allow refiring of rules\");\n         FactHandle factHandle = ksession.getFactHandle(caseFile);\n+        ksession.delete(factHandle);\n         ((CaseFileInstanceImpl)caseFile).setCaseReopenDate(new Date());\n         if (data != null && !data.isEmpty()) {\n             caseFile.addAll(data);\n         }\n-        ksession.update(factHandle, caseFile);\n+        \n         \n         logger.debug(\"Starting process instance for case {} and case definition {}\", caseId, caseDefinitionId);\n         CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(caseId);\n         Map<String, Object> params = new HashMap<>();\n         // set case id to allow it to use CaseContext when creating runtime engine\n         params.put(EnvironmentName.CASE_ID, caseId);\n         long processInstanceId = processService.startProcess(deploymentId, caseDefinitionId, correlationKey, params);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgzMTIxNQ=="}, "originalCommit": {"oid": "4b7010f0b15373799bb59970b8fcf3faec54902b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkwODg5OQ==", "bodyText": "I've tested that approach, but some assertions are failing, because expecting 3 variables instead of 4 (because this time -inserting it like that- doesn't have caseId_ prefix):\nvariableId=caseFile_name  vs. variableId=name", "url": "https://github.com/kiegroup/jbpm/pull/1581#discussion_r367908899", "createdAt": "2020-01-17T12:19:09Z", "author": {"login": "gmunozfe"}, "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/ReopenCaseCommand.java", "diffHunk": "@@ -79,20 +79,22 @@ public Void execute(Context context) {\n         \n         caseEventSupport.fireBeforeCaseReopened(caseId, caseFile, deploymentId, caseDefinitionId, data);\n         \n-        logger.debug(\"Updating case file in working memory\");\n+        logger.debug(\"Removing case file from working memory to allow refiring of rules\");\n         FactHandle factHandle = ksession.getFactHandle(caseFile);\n+        ksession.delete(factHandle);\n         ((CaseFileInstanceImpl)caseFile).setCaseReopenDate(new Date());\n         if (data != null && !data.isEmpty()) {\n             caseFile.addAll(data);\n         }\n-        ksession.update(factHandle, caseFile);\n+        \n         \n         logger.debug(\"Starting process instance for case {} and case definition {}\", caseId, caseDefinitionId);\n         CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(caseId);\n         Map<String, Object> params = new HashMap<>();\n         // set case id to allow it to use CaseContext when creating runtime engine\n         params.put(EnvironmentName.CASE_ID, caseId);\n         long processInstanceId = processService.startProcess(deploymentId, caseDefinitionId, correlationKey, params);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgzMTIxNQ=="}, "originalCommit": {"oid": "4b7010f0b15373799bb59970b8fcf3faec54902b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkwOTc3OQ==", "bodyText": "And if add them with the prefix\nfor (Map.Entry<String, Object> entry : caseData.entrySet()) {\nparams.put(VariableScope.CASE_FILE_PREFIX + entry.getKey(), entry.getValue());\n}\nThen, getVariable at VariableScopeInstance class, don't transform it as\ncaseFiles.size() == 0", "url": "https://github.com/kiegroup/jbpm/pull/1581#discussion_r367909779", "createdAt": "2020-01-17T12:21:42Z", "author": {"login": "gmunozfe"}, "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/ReopenCaseCommand.java", "diffHunk": "@@ -79,20 +79,22 @@ public Void execute(Context context) {\n         \n         caseEventSupport.fireBeforeCaseReopened(caseId, caseFile, deploymentId, caseDefinitionId, data);\n         \n-        logger.debug(\"Updating case file in working memory\");\n+        logger.debug(\"Removing case file from working memory to allow refiring of rules\");\n         FactHandle factHandle = ksession.getFactHandle(caseFile);\n+        ksession.delete(factHandle);\n         ((CaseFileInstanceImpl)caseFile).setCaseReopenDate(new Date());\n         if (data != null && !data.isEmpty()) {\n             caseFile.addAll(data);\n         }\n-        ksession.update(factHandle, caseFile);\n+        \n         \n         logger.debug(\"Starting process instance for case {} and case definition {}\", caseId, caseDefinitionId);\n         CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(caseId);\n         Map<String, Object> params = new HashMap<>();\n         // set case id to allow it to use CaseContext when creating runtime engine\n         params.put(EnvironmentName.CASE_ID, caseId);\n         long processInstanceId = processService.startProcess(deploymentId, caseDefinitionId, correlationKey, params);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgzMTIxNQ=="}, "originalCommit": {"oid": "4b7010f0b15373799bb59970b8fcf3faec54902b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkzMTA1NQ==", "bodyText": "you're right, I refactored this to suit both needs, have a look again", "url": "https://github.com/kiegroup/jbpm/pull/1581#discussion_r367931055", "createdAt": "2020-01-17T13:19:59Z", "author": {"login": "mswiderski"}, "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/ReopenCaseCommand.java", "diffHunk": "@@ -79,20 +79,22 @@ public Void execute(Context context) {\n         \n         caseEventSupport.fireBeforeCaseReopened(caseId, caseFile, deploymentId, caseDefinitionId, data);\n         \n-        logger.debug(\"Updating case file in working memory\");\n+        logger.debug(\"Removing case file from working memory to allow refiring of rules\");\n         FactHandle factHandle = ksession.getFactHandle(caseFile);\n+        ksession.delete(factHandle);\n         ((CaseFileInstanceImpl)caseFile).setCaseReopenDate(new Date());\n         if (data != null && !data.isEmpty()) {\n             caseFile.addAll(data);\n         }\n-        ksession.update(factHandle, caseFile);\n+        \n         \n         logger.debug(\"Starting process instance for case {} and case definition {}\", caseId, caseDefinitionId);\n         CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(caseId);\n         Map<String, Object> params = new HashMap<>();\n         // set case id to allow it to use CaseContext when creating runtime engine\n         params.put(EnvironmentName.CASE_ID, caseId);\n         long processInstanceId = processService.startProcess(deploymentId, caseDefinitionId, correlationKey, params);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgzMTIxNQ=="}, "originalCommit": {"oid": "4b7010f0b15373799bb59970b8fcf3faec54902b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkzODY3MA==", "bodyText": "thanks Maciej! It seems now it's working (though let Jenkins to finish)", "url": "https://github.com/kiegroup/jbpm/pull/1581#discussion_r367938670", "createdAt": "2020-01-17T13:38:40Z", "author": {"login": "gmunozfe"}, "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/ReopenCaseCommand.java", "diffHunk": "@@ -79,20 +79,22 @@ public Void execute(Context context) {\n         \n         caseEventSupport.fireBeforeCaseReopened(caseId, caseFile, deploymentId, caseDefinitionId, data);\n         \n-        logger.debug(\"Updating case file in working memory\");\n+        logger.debug(\"Removing case file from working memory to allow refiring of rules\");\n         FactHandle factHandle = ksession.getFactHandle(caseFile);\n+        ksession.delete(factHandle);\n         ((CaseFileInstanceImpl)caseFile).setCaseReopenDate(new Date());\n         if (data != null && !data.isEmpty()) {\n             caseFile.addAll(data);\n         }\n-        ksession.update(factHandle, caseFile);\n+        \n         \n         logger.debug(\"Starting process instance for case {} and case definition {}\", caseId, caseDefinitionId);\n         CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(caseId);\n         Map<String, Object> params = new HashMap<>();\n         // set case id to allow it to use CaseContext when creating runtime engine\n         params.put(EnvironmentName.CASE_ID, caseId);\n         long processInstanceId = processService.startProcess(deploymentId, caseDefinitionId, correlationKey, params);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgzMTIxNQ=="}, "originalCommit": {"oid": "4b7010f0b15373799bb59970b8fcf3faec54902b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzA5NTg3OnYy", "diffSide": "RIGHT", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/ReopenCaseCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDo0NjoxNFrOFe1Q9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDo0NzoxOFrOFe1SyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg3NDI5Mw==", "bodyText": "Shouldn't caseFile be inserted  before starting the process?", "url": "https://github.com/kiegroup/jbpm/pull/1581#discussion_r367874293", "createdAt": "2020-01-17T10:46:14Z", "author": {"login": "gmunozfe"}, "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/ReopenCaseCommand.java", "diffHunk": "@@ -79,20 +79,22 @@ public Void execute(Context context) {\n         \n         caseEventSupport.fireBeforeCaseReopened(caseId, caseFile, deploymentId, caseDefinitionId, data);\n         \n-        logger.debug(\"Updating case file in working memory\");\n+        logger.debug(\"Removing case file from working memory to allow refiring of rules\");\n         FactHandle factHandle = ksession.getFactHandle(caseFile);\n+        ksession.delete(factHandle);\n         ((CaseFileInstanceImpl)caseFile).setCaseReopenDate(new Date());\n         if (data != null && !data.isEmpty()) {\n             caseFile.addAll(data);\n         }\n-        ksession.update(factHandle, caseFile);\n+        \n         \n         logger.debug(\"Starting process instance for case {} and case definition {}\", caseId, caseDefinitionId);\n         CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(caseId);\n         Map<String, Object> params = new HashMap<>();\n         // set case id to allow it to use CaseContext when creating runtime engine\n         params.put(EnvironmentName.CASE_ID, caseId);\n         long processInstanceId = processService.startProcess(deploymentId, caseDefinitionId, correlationKey, params);\n+        ksession.insert(caseFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b7010f0b15373799bb59970b8fcf3faec54902b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg3NDc2MQ==", "bodyText": "no, that's the thing if it is then it will fire rules before any of the listeners is triggered", "url": "https://github.com/kiegroup/jbpm/pull/1581#discussion_r367874761", "createdAt": "2020-01-17T10:47:18Z", "author": {"login": "mswiderski"}, "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/command/ReopenCaseCommand.java", "diffHunk": "@@ -79,20 +79,22 @@ public Void execute(Context context) {\n         \n         caseEventSupport.fireBeforeCaseReopened(caseId, caseFile, deploymentId, caseDefinitionId, data);\n         \n-        logger.debug(\"Updating case file in working memory\");\n+        logger.debug(\"Removing case file from working memory to allow refiring of rules\");\n         FactHandle factHandle = ksession.getFactHandle(caseFile);\n+        ksession.delete(factHandle);\n         ((CaseFileInstanceImpl)caseFile).setCaseReopenDate(new Date());\n         if (data != null && !data.isEmpty()) {\n             caseFile.addAll(data);\n         }\n-        ksession.update(factHandle, caseFile);\n+        \n         \n         logger.debug(\"Starting process instance for case {} and case definition {}\", caseId, caseDefinitionId);\n         CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(caseId);\n         Map<String, Object> params = new HashMap<>();\n         // set case id to allow it to use CaseContext when creating runtime engine\n         params.put(EnvironmentName.CASE_ID, caseId);\n         long processInstanceId = processService.startProcess(deploymentId, caseDefinitionId, correlationKey, params);\n+        ksession.insert(caseFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg3NDI5Mw=="}, "originalCommit": {"oid": "4b7010f0b15373799bb59970b8fcf3faec54902b"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1790, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}