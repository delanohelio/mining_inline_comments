{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NDM2NzIy", "number": 1624, "title": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener", "bodyText": "transitions between task status are not being captured.\nIt is needed to trigger the events in the lifecycle of the task.", "createdAt": "2020-04-02T08:40:24Z", "url": "https://github.com/kiegroup/jbpm/pull/1624", "merged": true, "mergeCommit": {"oid": "c34153d6acc3acd649cd63e92edacac490eb1db2"}, "closed": true, "closedAt": "2020-05-22T07:13:24Z", "author": {"login": "elguardian"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABciZjqMgBqjMzNDU2NzAyMTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjZDuyABqjMzNTk2ODU3ODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0544cfd77900f03e3092bf8c1062675623cef27", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/e0544cfd77900f03e3092bf8c1062675623cef27", "committedDate": "2020-04-02T08:39:47Z", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\ntransitions between task status are not being captured.\nIt is needed to trigger the events in the lifecycle of the task."}, "afterCommit": {"oid": "fb0c815396f4426c93e14552a7fabb73d53728af", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/fb0c815396f4426c93e14552a7fabb73d53728af", "committedDate": "2020-05-17T12:16:13Z", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\nraising and activate operation before calculating new status after adding the task to\nthe persistence tier."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb0c815396f4426c93e14552a7fabb73d53728af", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/fb0c815396f4426c93e14552a7fabb73d53728af", "committedDate": "2020-05-17T12:16:13Z", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\nraising and activate operation before calculating new status after adding the task to\nthe persistence tier."}, "afterCommit": {"oid": "5647b5a8d2d60c3d626ca239dbbc6bd902107841", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/5647b5a8d2d60c3d626ca239dbbc6bd902107841", "committedDate": "2020-05-18T14:42:30Z", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\ntransitions between task status are not being captured.\nIt is needed to trigger the events in the lifecycle of the task."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5647b5a8d2d60c3d626ca239dbbc6bd902107841", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/5647b5a8d2d60c3d626ca239dbbc6bd902107841", "committedDate": "2020-05-18T14:42:30Z", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\ntransitions between task status are not being captured.\nIt is needed to trigger the events in the lifecycle of the task."}, "afterCommit": {"oid": "974db9e7d32b417b70fc32f5fe183d7151d0a190", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/974db9e7d32b417b70fc32f5fe183d7151d0a190", "committedDate": "2020-05-18T14:44:14Z", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\ntransitions between task status are not being captured.\nIt is needed to trigger the events in the lifecycle of the task."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "974db9e7d32b417b70fc32f5fe183d7151d0a190", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/974db9e7d32b417b70fc32f5fe183d7151d0a190", "committedDate": "2020-05-18T14:44:14Z", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\ntransitions between task status are not being captured.\nIt is needed to trigger the events in the lifecycle of the task."}, "afterCommit": {"oid": "3cbfc405762d57dce7f72c994a494b89850f3c49", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/3cbfc405762d57dce7f72c994a494b89850f3c49", "committedDate": "2020-05-18T18:19:41Z", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\ntransitions between task status are not being captured.\nIt is needed to trigger the events in the lifecycle of the task."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3cbfc405762d57dce7f72c994a494b89850f3c49", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/3cbfc405762d57dce7f72c994a494b89850f3c49", "committedDate": "2020-05-18T18:19:41Z", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\ntransitions between task status are not being captured.\nIt is needed to trigger the events in the lifecycle of the task."}, "afterCommit": {"oid": "6feccbf88349380b75bc1015790a8053594edd5f", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/6feccbf88349380b75bc1015790a8053594edd5f", "committedDate": "2020-05-19T06:07:50Z", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\ntransitions between task status are not being captured.\nIt is needed to trigger the events in the lifecycle of the task."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjcyNDg0", "url": "https://github.com/kiegroup/jbpm/pull/1624#pullrequestreview-414672484", "createdAt": "2020-05-19T17:32:54Z", "commit": {"oid": "6feccbf88349380b75bc1015790a8053594edd5f"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzozMjo1NFrOGXrLew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzozNDo1MlrOGXrQeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3Nzg4Mw==", "bodyText": "beforeTaskActivatedEvent could also be implemented to be tested with a different AtomicBoolean", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r427477883", "createdAt": "2020-05-19T17:32:54Z", "author": {"login": "gmunozfe"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/regression/task/HumanTaskTest.java", "diffHunk": "@@ -230,4 +238,31 @@ public void testInputTransformation() {\n         assertProcessInstanceCompleted(pi.getId());\n     }\n \n+    @Test\n+    public void testHumanTaskListener() {\n+        KieSession ksession = createKSession(HUMAN_TASK_LISTENER);\n+        AtomicBoolean triggered = new AtomicBoolean(false);\n+        TaskLifeCycleEventListener listener = new DefaultTaskEventListener() {\n+            @Override\n+            public void afterTaskActivatedEvent(TaskEvent event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6feccbf88349380b75bc1015790a8053594edd5f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3ODc5Nw==", "bodyText": "When completing first task, second task is added, so listener is invoked twice in this scenario", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r427478797", "createdAt": "2020-05-19T17:34:18Z", "author": {"login": "gmunozfe"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/regression/task/HumanTaskTest.java", "diffHunk": "@@ -230,4 +238,31 @@ public void testInputTransformation() {\n         assertProcessInstanceCompleted(pi.getId());\n     }\n \n+    @Test\n+    public void testHumanTaskListener() {\n+        KieSession ksession = createKSession(HUMAN_TASK_LISTENER);\n+        AtomicBoolean triggered = new AtomicBoolean(false);\n+        TaskLifeCycleEventListener listener = new DefaultTaskEventListener() {\n+            @Override\n+            public void afterTaskActivatedEvent(TaskEvent event) {\n+                triggered.set(true);\n+            }\n+\n+        };\n+        RuntimeEngine engine = getRuntimeEngine();\n+        TaskService taskService = engine.getTaskService();\n+        ((EventService<TaskLifeCycleEventListener>) taskService).registerTaskEventListener(listener);\n+        ProcessInstance pi = ksession.startProcess(HUMAN_TASK_LISTENER_ID);\n+        long processInstanceId = pi.getId();\n+\n+        List<Long> idList = taskService.getTasksByProcessInstanceId(processInstanceId);\n+        for (long taskId : idList) {\n+            taskService.start(taskId, \"john\");\n+            taskService.complete(taskId, \"john\", emptyMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6feccbf88349380b75bc1015790a8053594edd5f"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3OTE2Mg==", "bodyText": "This could be part of a finally clause", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r427479162", "createdAt": "2020-05-19T17:34:52Z", "author": {"login": "gmunozfe"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/regression/task/HumanTaskTest.java", "diffHunk": "@@ -230,4 +238,31 @@ public void testInputTransformation() {\n         assertProcessInstanceCompleted(pi.getId());\n     }\n \n+    @Test\n+    public void testHumanTaskListener() {\n+        KieSession ksession = createKSession(HUMAN_TASK_LISTENER);\n+        AtomicBoolean triggered = new AtomicBoolean(false);\n+        TaskLifeCycleEventListener listener = new DefaultTaskEventListener() {\n+            @Override\n+            public void afterTaskActivatedEvent(TaskEvent event) {\n+                triggered.set(true);\n+            }\n+\n+        };\n+        RuntimeEngine engine = getRuntimeEngine();\n+        TaskService taskService = engine.getTaskService();\n+        ((EventService<TaskLifeCycleEventListener>) taskService).registerTaskEventListener(listener);\n+        ProcessInstance pi = ksession.startProcess(HUMAN_TASK_LISTENER_ID);\n+        long processInstanceId = pi.getId();\n+\n+        List<Long> idList = taskService.getTasksByProcessInstanceId(processInstanceId);\n+        for (long taskId : idList) {\n+            taskService.start(taskId, \"john\");\n+            taskService.complete(taskId, \"john\", emptyMap());\n+        }\n+        assertTrue(\"Task should have triggered the event\", triggered.get());\n+\n+        ksession.abortProcessInstance(processInstanceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6feccbf88349380b75bc1015790a8053594edd5f"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MTMzMDMy", "url": "https://github.com/kiegroup/jbpm/pull/1624#pullrequestreview-415133032", "createdAt": "2020-05-20T09:02:20Z", "commit": {"oid": "6feccbf88349380b75bc1015790a8053594edd5f"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOTowMjoyMFrOGYCGxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzo1ODo1NlrOGYNJug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg1MzUxMA==", "bodyText": "Wondering whether it'd be good to update any possible task changes in the DB in case it's been modified by any additional listener done in the fireBeforeTaskActivated?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            this.taskEventSupport.fireBeforeTaskActivated(task, context);\n          \n          \n            \n                            this.taskEventSupport.fireAfterTaskActivated(task, context);\n          \n          \n            \n                            this.taskEventSupport.fireBeforeTaskActivated(task, context);\n          \n          \n            \n                            context.getPersistenceContext().updateTask(task);\n          \n          \n            \n                            this.taskEventSupport.fireAfterTaskActivated(task, context);", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r427853510", "createdAt": "2020-05-20T09:02:20Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/impl/TaskInstanceServiceImpl.java", "diffHunk": "@@ -497,6 +497,17 @@ protected void resolveTaskDetailsForTaskProperties(Task task) {\n         ((InternalTask)task).setFormName((String) replacements.get(\"formName\"));\n     }\n \n-\n+    @Override\n+    public void fireEvent(Operation operation, long taskId) {\n+        Task task = context.getPersistenceContext().findTask(taskId);\n+        switch (operation) {\n+            case Activate:\n+                this.taskEventSupport.fireBeforeTaskActivated(task, context);\n+                this.taskEventSupport.fireAfterTaskActivated(task, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6feccbf88349380b75bc1015790a8053594edd5f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3OTc2Mg==", "bodyText": "Why + 2 activate events? It should've been deleted in line  \n  \n    \n      jbpm/jbpm-human-task/jbpm-human-task-audit/src/test/java/org/jbpm/services/task/audit/service/TaskAuditBaseTest.java\n    \n    \n         Line 139\n      in\n      6feccbf\n    \n    \n    \n    \n\n        \n          \n           taskService.execute(new DeleteAuditEventsCommand(taskId));", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r427879762", "createdAt": "2020-05-20T09:44:38Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-audit/src/test/java/org/jbpm/services/task/audit/service/TaskAuditBaseTest.java", "diffHunk": "@@ -138,7 +138,8 @@ public void testComplete() {\n \n         taskService.execute(new DeleteAuditEventsCommand(taskId));\n         allTaskEvents = taskService.execute(new GetAuditEventsCommand());\n-        assertEquals(numTaskEvents - numFirstTaskEvents, allTaskEvents.size());\n+        // +2 activate events.\n+        assertEquals(numTaskEvents - numFirstTaskEvents + 2, allTaskEvents.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6feccbf88349380b75bc1015790a8053594edd5f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwMDMxMg==", "bodyText": "To avoid any confusion about what this bpm is doing I think we should get rid off the non-sense defined process and task variables along with the system.out.println java statements defined in the \"on entry\" and \"on exit\" sections.", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r427900312", "createdAt": "2020-05-20T10:19:57Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-coverage/src/test/resources/org/jbpm/test/regression/task/HumanTask-Listener.bpmn2", "diffHunk": "@@ -0,0 +1,328 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.omg.org/bpmn20\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:bpsim=\"http://www.bpsim.org/schemas/1.0\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:drools=\"http://www.jboss.org/drools\" id=\"_eq_ZkGhiEeqRIbB9YdC0SQ\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd http://www.jboss.org/drools drools.xsd http://www.bpsim.org/schemas/1.0 bpsim.xsd http://www.omg.org/spec/DD/20100524/DC DC.xsd http://www.omg.org/spec/DD/20100524/DI DI.xsd \" exporter=\"jBPM Process Modeler\" exporterVersion=\"2.0\" targetNamespace=\"http://www.omg.org/bpmn20\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6feccbf88349380b75bc1015790a8053594edd5f"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0OTg0NQ==", "bodyText": "Why this change? is because an event can be created same day (i.e. logtime column)? But as per the column definition itself this is a timestamp, so I think it shouldn't be a problem here - wdyt?\nhttps://github.com/kiegroup/jbpm/blob/master/jbpm-human-task/jbpm-human-task-audit/src/main/java/org/jbpm/services/task/audit/impl/model/TaskEventImpl.java#L73-L74", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r427949845", "createdAt": "2020-05-20T11:55:59Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/UserTaskInstanceWithPotOwnerTest.java", "diffHunk": "@@ -271,16 +271,16 @@ public void testSearchTaskByPotOwnerQueryParamBuilder() {\n     public void testSearchTaskWithModifVarsMapper() {\n         query = new SqlQueryDefinition(\"jbpmGetTaskWithPO\", dataSourceJNDIname);\n         query.setExpression(\"select t.id as TASKID, t.name as NAME,  t.FORMNAME AS FORMNAME, t.subject as SUBJECT, \" +\n-                \"t.actualowner_id as ACTUALOWNER, po.entity_id as POTOWNER, p.processinstancedescription as PROCESSINSTANCEDESCRIPTION, t.CREATEDON as CREATEDON, \" +\n-                \"t.CREATEDBY_ID as CREATEDBY, t.EXPIRATIONTIME as EXPIRATIONTIME, \" +\n-                \"(select max(logtime) from taskevent where processinstanceid = t.processinstanceid and taskid = t.id) as lastmodificationdate, \" +\n-                \"(select userid from taskevent where logtime = (select max(logtime) from taskevent where processinstanceid = t.processinstanceid and taskid = t.id)) as lastmodificationuser, \" +\n-                \"t.priority as PRIORITY, t.STATUS as STATUS, t.PROCESSINSTANCEID as PROCESSINSTANCEID, t.PROCESSID as PROCESSID, \" +\n-                \"t.deploymentid as DEPLOYMENTID, d.name as TVNAME, d.type as TVTYPE, d.value as TVVALUE \" +\n-                \"from TASK t \" +\n-                \"inner join PEOPLEASSIGNMENTS_POTOWNERS po on t.id=po.task_id \" +\n-                \"inner join PROCESSINSTANCELOG p on t.processinstanceid = p.processinstanceid \" +\n-                \"inner join TASKVARIABLEIMPL d on t.id=d.taskid\");\n+                            \"t.actualowner_id as ACTUALOWNER, po.entity_id as POTOWNER, p.processinstancedescription as PROCESSINSTANCEDESCRIPTION, t.CREATEDON as CREATEDON, \" +\n+                            \"t.CREATEDBY_ID as CREATEDBY, t.EXPIRATIONTIME as EXPIRATIONTIME, \" +\n+                            \"(select max(logtime) from taskevent where processinstanceid = t.processinstanceid and taskid = t.id) as lastmodificationdate, \" +\n+                            \"(select a.userid from taskevent a left join taskevent b on a.id < b.id where b.id IS NULL) as lastmodificationuser, \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6feccbf88349380b75bc1015790a8053594edd5f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNDIwNg==", "bodyText": "Agree with @gmunozfe", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r428034206", "createdAt": "2020-05-20T13:58:36Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/regression/task/HumanTaskTest.java", "diffHunk": "@@ -230,4 +238,31 @@ public void testInputTransformation() {\n         assertProcessInstanceCompleted(pi.getId());\n     }\n \n+    @Test\n+    public void testHumanTaskListener() {\n+        KieSession ksession = createKSession(HUMAN_TASK_LISTENER);\n+        AtomicBoolean triggered = new AtomicBoolean(false);\n+        TaskLifeCycleEventListener listener = new DefaultTaskEventListener() {\n+            @Override\n+            public void afterTaskActivatedEvent(TaskEvent event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6feccbf88349380b75bc1015790a8053594edd5f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNDQ5MA==", "bodyText": "same as @gmunozfe - I would make HumanTask-Listener.bpmn2 a litte simpler and cleaner by removing some task/process variables along with some System.out.println stuff in the \"on entry\" and \"on exit\" section of the bpmn.", "url": "https://github.com/kiegroup/jbpm/pull/1624#discussion_r428034490", "createdAt": "2020-05-20T13:58:56Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/regression/task/HumanTaskTest.java", "diffHunk": "@@ -230,4 +238,31 @@ public void testInputTransformation() {\n         assertProcessInstanceCompleted(pi.getId());\n     }\n \n+    @Test\n+    public void testHumanTaskListener() {\n+        KieSession ksession = createKSession(HUMAN_TASK_LISTENER);\n+        AtomicBoolean triggered = new AtomicBoolean(false);\n+        TaskLifeCycleEventListener listener = new DefaultTaskEventListener() {\n+            @Override\n+            public void afterTaskActivatedEvent(TaskEvent event) {\n+                triggered.set(true);\n+            }\n+\n+        };\n+        RuntimeEngine engine = getRuntimeEngine();\n+        TaskService taskService = engine.getTaskService();\n+        ((EventService<TaskLifeCycleEventListener>) taskService).registerTaskEventListener(listener);\n+        ProcessInstance pi = ksession.startProcess(HUMAN_TASK_LISTENER_ID);\n+        long processInstanceId = pi.getId();\n+\n+        List<Long> idList = taskService.getTasksByProcessInstanceId(processInstanceId);\n+        for (long taskId : idList) {\n+            taskService.start(taskId, \"john\");\n+            taskService.complete(taskId, \"john\", emptyMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6feccbf88349380b75bc1015790a8053594edd5f"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffd6774ea47dabb8f3633e1ecfac5e4c71a3cf11", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/ffd6774ea47dabb8f3633e1ecfac5e4c71a3cf11", "committedDate": "2020-05-21T08:04:54Z", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\ntransitions between task status are not being captured.\nIt is needed to trigger the events in the lifecycle of the task."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6feccbf88349380b75bc1015790a8053594edd5f", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/6feccbf88349380b75bc1015790a8053594edd5f", "committedDate": "2020-05-19T06:07:50Z", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\ntransitions between task status are not being captured.\nIt is needed to trigger the events in the lifecycle of the task."}, "afterCommit": {"oid": "ffd6774ea47dabb8f3633e1ecfac5e4c71a3cf11", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/ffd6774ea47dabb8f3633e1ecfac5e4c71a3cf11", "committedDate": "2020-05-21T08:04:54Z", "message": "[RHPAM-2840] issue with afterTaskActivatedEvent method of TaskLifeCycleEventListener\n\ntransitions between task status are not being captured.\nIt is needed to trigger the events in the lifecycle of the task."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1075, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}