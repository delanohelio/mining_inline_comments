{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxNDIxMzMx", "number": 1750, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOToyNjo0N1rOEhKQBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOToyNjo0N1rOEhKQBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjA2NDA2OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOToyNjo0N1rOHOUkCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTozMDo0OFrOHOUuaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc3OTAxOQ==", "bodyText": "Maybe we can use org.kie.api.definition.process.Process instead, just to make it a little more abstract? just like the one used below which is an instance of org.kie.api.definition.process.Node? - wdyt?", "url": "https://github.com/kiegroup/jbpm/pull/1750#discussion_r484779019", "createdAt": "2020-09-08T09:26:47Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -258,28 +260,34 @@ else if (link.isThrowLink()) {\n         // throw exception if any error (this is done at the end of the process to show the user as much errors as possible) \n         StringBuilder errors = new StringBuilder();\n         if (!noNameLinks.isEmpty()) {\n-            formatError(errors,\"These nodes do not have a name \",noNameLinks.stream());\n+            formatError(errors,\"These nodes do not have a name \",noNameLinks.stream(), process);\n         }\n         if (!duplicatedTarget.isEmpty()) {\n-            formatError(errors,\"\\nThere are multiple catch nodes with the same name \",duplicatedTarget.stream());\n+            formatError(errors,\"\\nThere are multiple catch nodes with the same name \",duplicatedTarget.stream(), process);\n         }\n         if (!unconnectedTarget.isEmpty()) {\n-            formatError(errors,\"\\nThere is not connection from any throw link to these catch links \",unconnectedTarget.stream());\n+            formatError(errors,\"\\nThere is not connection from any throw link to these catch links \",unconnectedTarget.stream(), process);\n         }\n         if (!throwLinks.isEmpty()) {\n             formatError(errors,\"\\nThere is not connection from any catch link to these throw links \",throwLinks\n                                                .values()\n                                                .stream()\n-                                               .flatMap(Collection::stream));\n+                                               .flatMap(Collection::stream), process);\n         }\n         if (errors.length() > 0) {\n             throw new IllegalArgumentException (errors.toString());\n         }\n         \n     }\n     \n-    private static void formatError (StringBuilder errors, String message, Stream<IntermediateLink> stream) {\n+    private static void formatError (StringBuilder errors, String message, Stream<IntermediateLink> stream, NodeContainer container) {\n         errors.append(message).append(stream.map(IntermediateLink::getUniqueId).collect(Collectors.joining(\", \",\"{\",\"}\")));\n+        if (container instanceof Process) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9353110c7203fe0e49919055655321b31c026147"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4MTY3NQ==", "bodyText": "you are right, changed", "url": "https://github.com/kiegroup/jbpm/pull/1750#discussion_r484781675", "createdAt": "2020-09-08T09:30:48Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -258,28 +260,34 @@ else if (link.isThrowLink()) {\n         // throw exception if any error (this is done at the end of the process to show the user as much errors as possible) \n         StringBuilder errors = new StringBuilder();\n         if (!noNameLinks.isEmpty()) {\n-            formatError(errors,\"These nodes do not have a name \",noNameLinks.stream());\n+            formatError(errors,\"These nodes do not have a name \",noNameLinks.stream(), process);\n         }\n         if (!duplicatedTarget.isEmpty()) {\n-            formatError(errors,\"\\nThere are multiple catch nodes with the same name \",duplicatedTarget.stream());\n+            formatError(errors,\"\\nThere are multiple catch nodes with the same name \",duplicatedTarget.stream(), process);\n         }\n         if (!unconnectedTarget.isEmpty()) {\n-            formatError(errors,\"\\nThere is not connection from any throw link to these catch links \",unconnectedTarget.stream());\n+            formatError(errors,\"\\nThere is not connection from any throw link to these catch links \",unconnectedTarget.stream(), process);\n         }\n         if (!throwLinks.isEmpty()) {\n             formatError(errors,\"\\nThere is not connection from any catch link to these throw links \",throwLinks\n                                                .values()\n                                                .stream()\n-                                               .flatMap(Collection::stream));\n+                                               .flatMap(Collection::stream), process);\n         }\n         if (errors.length() > 0) {\n             throw new IllegalArgumentException (errors.toString());\n         }\n         \n     }\n     \n-    private static void formatError (StringBuilder errors, String message, Stream<IntermediateLink> stream) {\n+    private static void formatError (StringBuilder errors, String message, Stream<IntermediateLink> stream, NodeContainer container) {\n         errors.append(message).append(stream.map(IntermediateLink::getUniqueId).collect(Collectors.joining(\", \",\"{\",\"}\")));\n+        if (container instanceof Process) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc3OTAxOQ=="}, "originalCommit": {"oid": "9353110c7203fe0e49919055655321b31c026147"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1564, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}