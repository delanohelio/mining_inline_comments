{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NzgyNjQy", "number": 1584, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzoyNTowMFrODbHv4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0MDozM1rODbslIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzY1MDg5OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/commands/error/ProcessAutoAckErrorCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzoyNTowMFrOFibKcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzoyNTowMFrOFibKcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0MDk0Ng==", "bodyText": "It may log a warning message to account there was an issue", "url": "https://github.com/kiegroup/jbpm/pull/1584#discussion_r371640946", "createdAt": "2020-01-28T07:25:00Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/commands/error/ProcessAutoAckErrorCommand.java", "diffHunk": "@@ -40,32 +40,35 @@\n \n     private static final String RULE = \"Process instances that previously failed but now are in different nodes - meaning node where they were was already completed - or completed/aborted\";\n     \n-    @SuppressWarnings(\"unchecked\")\n+\n     @Override\n     protected List<ExecutionErrorInfo> findErrorsToAck(EntityManager em) {\n         List<ExecutionErrorInfo> errorsToAck = new ArrayList<>();\n         \n-        String findProcessErrorsQuery = \"select error from ExecutionErrorInfo error \"\n-                + \"where error.acknowledged =:acknowledged \"\n-                + \"and error.processInstanceId in (select pil.id from ProcessInstanceLog pil where status in (:status))\";\n-        \n-        List<ExecutionErrorInfo> processErrorsToAck = em.createQuery(findProcessErrorsQuery)\n-                .setParameter(\"acknowledged\", new Short(\"0\"))\n-                .setParameter(\"status\", Arrays.asList(ProcessInstance.STATE_COMPLETED, ProcessInstance.STATE_ABORTED))\n-                .getResultList();\n-        errorsToAck.addAll(processErrorsToAck);\n-        \n-        String findNodeErrorsQuery = \"select error from ExecutionErrorInfo error \"\n-                + \"where error.acknowledged =:acknowledged \"\n-                + \"and error.initActivityId in (select nil.nodeInstanceId from NodeInstanceLog nil where nil.processInstanceId = error.processInstanceId and nil.nodeInstanceId = error.initActivityId and nil.type = 1)\";\n-        \n-        List<ExecutionErrorInfo> nodeErrorsToAck = em.createQuery(findNodeErrorsQuery)\n-                .setParameter(\"acknowledged\", new Short(\"0\"))\n-                .getResultList();\n-        errorsToAck.addAll(nodeErrorsToAck);\n-        \n+        em.getTransaction().begin();\n+        try {\n+            String findProcessErrorsQuery = \"select error from ExecutionErrorInfo error where error.acknowledged =:acknowledged \" +\n+                                            \"and error.processInstanceId in (select pil.id from ProcessInstanceLog pil where status in (:status))\";\n+\n+            List<ExecutionErrorInfo> processErrorsToAck = em.createQuery(findProcessErrorsQuery, ExecutionErrorInfo.class)\n+                                                            .setParameter(\"acknowledged\", new Short(\"0\"))\n+                                                            .setParameter(\"status\", Arrays.asList(ProcessInstance.STATE_COMPLETED, ProcessInstance.STATE_ABORTED))\n+                                                            .getResultList();\n+            errorsToAck.addAll(processErrorsToAck);\n+\n+            String findNodeErrorsQuery = \"select error from ExecutionErrorInfo error where error.acknowledged =:acknowledged \" +\n+                                         \"and CAST(error.initActivityId AS string) in (select nil.nodeInstanceId from NodeInstanceLog nil where nil.processInstanceId = error.processInstanceId and nil.nodeInstanceId = CAST(error.initActivityId AS string) and nil.type = '1')\";\n+\n+            List<ExecutionErrorInfo> nodeErrorsToAck = em.createQuery(findNodeErrorsQuery, ExecutionErrorInfo.class)\n+                                                         .setParameter(\"acknowledged\", new Short(\"0\"))\n+                                                         .getResultList();\n+            errorsToAck.addAll(nodeErrorsToAck);\n+            em.getTransaction().commit();\n+        } catch (Exception e) {\n+            em.getTransaction().rollback();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e05bc8cd5cf7ed93dc3796e6322860207723057"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjAxMjI2OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/commands/error/JobAutoAckErrorCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMToyMDo0NlrOFjE92w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMToyMDo0NlrOFjE92w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyNTg1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        errorsToAck = em.createQuery(findJobErrorsQuery)\n          \n          \n            \n                        errorsToAck = em.createQuery(findJobErrorsQuery, ExecutionErrorInfo.class)", "url": "https://github.com/kiegroup/jbpm/pull/1584#discussion_r372325851", "createdAt": "2020-01-29T11:20:46Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/commands/error/JobAutoAckErrorCommand.java", "diffHunk": "@@ -40,22 +43,29 @@\n  */\n public class JobAutoAckErrorCommand extends AutoAckErrorCommand {\n \n+    private static final Logger logger = LoggerFactory.getLogger(JobAutoAckErrorCommand.class);\n+\n     private static final String RULE = \"Jobs that previously failed but now are in one of the statuses - queued, completed or cancelled\";\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     protected List<ExecutionErrorInfo> findErrorsToAck(EntityManager em) {\n-        String findJobErrorsQuery = \"select error from ExecutionErrorInfo error \"\n-                + \"where error.type = :type \"\n-                + \"and error.acknowledged =:acknowledged \"\n-                + \"and error.jobId in (select req.id from RequestInfo req where status in (:status))\";\n-        \n-        List<ExecutionErrorInfo> errorsToAck = em.createQuery(findJobErrorsQuery)\n-                .setParameter(\"type\", JobExecutionErrorFilter.TYPE)\n-                .setParameter(\"acknowledged\", new Short(\"0\"))\n-                .setParameter(\"status\", Arrays.asList(STATUS.DONE, STATUS.CANCELLED, STATUS.QUEUED))\n-                .getResultList();\n+        List<ExecutionErrorInfo> errorsToAck = new ArrayList<>();\n+        em.getTransaction().begin();\n+        try {\n+            String findJobErrorsQuery = \"select error from ExecutionErrorInfo error \" + \"where error.type = :type \" + \"and error.acknowledged =:acknowledged \" +\n+                                        \"and error.jobId in (select req.id from RequestInfo req where status in (:status))\";\n \n+            errorsToAck = em.createQuery(findJobErrorsQuery)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83e4142889ee8e7739e639ab1572a89add8b8b88"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjAxMzQyOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/commands/error/TaskAutoAckErrorCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMToyMToxNFrOFjE-lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMToyMToxNFrOFjE-lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyNjAzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        errorsToAck = em.createQuery(findTaskErrorsQuery)\n          \n          \n            \n                        errorsToAck = em.createQuery(findTaskErrorsQuery, ExecutionErrorInfo.class)", "url": "https://github.com/kiegroup/jbpm/pull/1584#discussion_r372326036", "createdAt": "2020-01-29T11:21:14Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/commands/error/TaskAutoAckErrorCommand.java", "diffHunk": "@@ -38,22 +41,30 @@\n  */\n public class TaskAutoAckErrorCommand extends AutoAckErrorCommand {\n \n+    private static final Logger logger = LoggerFactory.getLogger(TaskAutoAckErrorCommand.class);\n+\n     private static final String RULE = \"Tasks that previously failed but now are in one of the statuses - completed, failed, exited, obsolete, error\";\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     protected List<ExecutionErrorInfo> findErrorsToAck(EntityManager em) {\n-        String findTaskErrorsQuery = \"select error from ExecutionErrorInfo error \"\n-                + \"where error.type = :type \"\n-                + \"and error.acknowledged =:acknowledged \"\n-                + \"and error.activityId in (select at.taskId from AuditTaskImpl at where status in (:status))\";\n-        \n-        List<ExecutionErrorInfo> errorsToAck = em.createQuery(findTaskErrorsQuery)\n-                .setParameter(\"type\", TaskExecutionErrorFilter.TYPE)\n-                .setParameter(\"acknowledged\", new Short(\"0\"))\n-                .setParameter(\"status\", Arrays.asList(Status.Completed.toString(), Status.Exited.toString(), Status.Failed.toString(), Status.Obsolete.toString(), Status.Error.toString()))\n-                .getResultList();\n+        List<ExecutionErrorInfo> errorsToAck = new ArrayList<>();\n         \n+        em.getTransaction().begin();\n+        try {\n+            String findTaskErrorsQuery = \"select error from ExecutionErrorInfo error \" + \"where error.type = :type \" + \"and error.acknowledged =:acknowledged \" +\n+                                         \"and error.activityId in (select at.taskId from AuditTaskImpl at where status in (:status))\";\n+\n+            errorsToAck = em.createQuery(findTaskErrorsQuery)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83e4142889ee8e7739e639ab1572a89add8b8b88"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzY4NTQ2OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/commands/error/JobAutoAckErrorCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0MDozM1rOFjVK2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwODozMjowMVrOFjiyUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MTMyMQ==", "bodyText": "this implies you use a resource local entity manager and thus might cause issues when there is actually JTA entity manager being used. Have this been tested on EAP/WAS/WLS?", "url": "https://github.com/kiegroup/jbpm/pull/1584#discussion_r372591321", "createdAt": "2020-01-29T19:40:33Z", "author": {"login": "mswiderski"}, "path": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/commands/error/JobAutoAckErrorCommand.java", "diffHunk": "@@ -40,22 +43,29 @@\n  */\n public class JobAutoAckErrorCommand extends AutoAckErrorCommand {\n \n+    private static final Logger logger = LoggerFactory.getLogger(JobAutoAckErrorCommand.class);\n+\n     private static final String RULE = \"Jobs that previously failed but now are in one of the statuses - queued, completed or cancelled\";\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     protected List<ExecutionErrorInfo> findErrorsToAck(EntityManager em) {\n-        String findJobErrorsQuery = \"select error from ExecutionErrorInfo error \"\n-                + \"where error.type = :type \"\n-                + \"and error.acknowledged =:acknowledged \"\n-                + \"and error.jobId in (select req.id from RequestInfo req where status in (:status))\";\n-        \n-        List<ExecutionErrorInfo> errorsToAck = em.createQuery(findJobErrorsQuery)\n-                .setParameter(\"type\", JobExecutionErrorFilter.TYPE)\n-                .setParameter(\"acknowledged\", new Short(\"0\"))\n-                .setParameter(\"status\", Arrays.asList(STATUS.DONE, STATUS.CANCELLED, STATUS.QUEUED))\n-                .getResultList();\n+        List<ExecutionErrorInfo> errorsToAck = new ArrayList<>();\n+        em.getTransaction().begin();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83e4142889ee8e7739e639ab1572a89add8b8b88"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxNDQxNg==", "bodyText": "just using the transaction manager coming from drools", "url": "https://github.com/kiegroup/jbpm/pull/1584#discussion_r372814416", "createdAt": "2020-01-30T08:32:01Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/commands/error/JobAutoAckErrorCommand.java", "diffHunk": "@@ -40,22 +43,29 @@\n  */\n public class JobAutoAckErrorCommand extends AutoAckErrorCommand {\n \n+    private static final Logger logger = LoggerFactory.getLogger(JobAutoAckErrorCommand.class);\n+\n     private static final String RULE = \"Jobs that previously failed but now are in one of the statuses - queued, completed or cancelled\";\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     protected List<ExecutionErrorInfo> findErrorsToAck(EntityManager em) {\n-        String findJobErrorsQuery = \"select error from ExecutionErrorInfo error \"\n-                + \"where error.type = :type \"\n-                + \"and error.acknowledged =:acknowledged \"\n-                + \"and error.jobId in (select req.id from RequestInfo req where status in (:status))\";\n-        \n-        List<ExecutionErrorInfo> errorsToAck = em.createQuery(findJobErrorsQuery)\n-                .setParameter(\"type\", JobExecutionErrorFilter.TYPE)\n-                .setParameter(\"acknowledged\", new Short(\"0\"))\n-                .setParameter(\"status\", Arrays.asList(STATUS.DONE, STATUS.CANCELLED, STATUS.QUEUED))\n-                .getResultList();\n+        List<ExecutionErrorInfo> errorsToAck = new ArrayList<>();\n+        em.getTransaction().begin();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MTMyMQ=="}, "originalCommit": {"oid": "83e4142889ee8e7739e639ab1572a89add8b8b88"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1792, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}