{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MTc3MjAy", "number": 1634, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjowNTowOVrODyeICA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOToyMzo0MFrODy1IgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjQ4OTY4OnYy", "diffSide": "RIGHT", "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjowNTowOVrOGGiDJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjoyNTo1MFrOGHBYrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwMjUwMA==", "bodyText": "Missing method header above", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r409502500", "createdAt": "2020-04-16T12:05:09Z", "author": {"login": "gmunozfe"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManagerTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.jbpm.services.task.deadlines.notifications.impl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdd3b518304a23ec778dcd89703b74a8fdc141ee"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxNTkxOQ==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r410015919", "createdAt": "2020-04-17T06:25:50Z", "author": {"login": "elguardian"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManagerTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.jbpm.services.task.deadlines.notifications.impl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwMjUwMA=="}, "originalCommit": {"oid": "bdd3b518304a23ec778dcd89703b74a8fdc141ee"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjUxOTA0OnYy", "diffSide": "RIGHT", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoxMzo1NlrOGGiVWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjoxMzo1NlrOGGiVWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUwNzE2Mg==", "bodyText": "To avoid issues with leading, intermediate or trailing spaces, use trim() and regex into split:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Arrays.asList(name.split(\",\"));\n          \n          \n            \n                    return Arrays.asList(name.trim().split(\"\\\\s*,\\\\s*\"));", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r409507162", "createdAt": "2020-04-16T12:13:56Z", "author": {"login": "gmunozfe"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "diffHunk": "@@ -30,18 +32,59 @@\n  *\n  */\n public class NotificationListenerManager {\n-    \n+\n+    public static final String KIE_LISTENER_EXCLUDE = \"org.kie.jpbm.notification_listeners.exclude\";\n+\n+    public static final String KIE_LISTENER_INCLUDE = \"org.kie.jpbm.notification_listeners.include\";\n+\n     private static final Logger logger = LoggerFactory.getLogger(NotificationListenerManager.class);\n-    \n+\n     private static ServiceLoader<NotificationListener> listenersLoaded = ServiceLoader.load(NotificationListener.class);\n-    \n+\n     private static NotificationListenerManager INSTANCE = new NotificationListenerManager();\n-    \n+\n     private List<NotificationListener> listeners = new ArrayList<NotificationListener>();\n-    \n+\n+    private List<String> excludeLists;\n+\n+    private List<String> includeLists;\n+\n+    public static List<String> propertyToList(String propertyName) {\n+        String name = System.getProperty(propertyName);\n+        if (name == null) {\n+            return null;\n+        }\n+        return Arrays.asList(name.split(\",\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdd3b518304a23ec778dcd89703b74a8fdc141ee"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjcxMTA0OnYy", "diffSide": "RIGHT", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzowMzowNlrOGGkM5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjoyOToxMFrOGHBc3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzNzc2NQ==", "bodyText": "Why not return Collections.emptyList() ?\nThen, at createPredicate you can check against \"is not empty\"...", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r409537765", "createdAt": "2020-04-16T13:03:06Z", "author": {"login": "gmunozfe"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "diffHunk": "@@ -30,18 +32,59 @@\n  *\n  */\n public class NotificationListenerManager {\n-    \n+\n+    public static final String KIE_LISTENER_EXCLUDE = \"org.kie.jpbm.notification_listeners.exclude\";\n+\n+    public static final String KIE_LISTENER_INCLUDE = \"org.kie.jpbm.notification_listeners.include\";\n+\n     private static final Logger logger = LoggerFactory.getLogger(NotificationListenerManager.class);\n-    \n+\n     private static ServiceLoader<NotificationListener> listenersLoaded = ServiceLoader.load(NotificationListener.class);\n-    \n+\n     private static NotificationListenerManager INSTANCE = new NotificationListenerManager();\n-    \n+\n     private List<NotificationListener> listeners = new ArrayList<NotificationListener>();\n-    \n+\n+    private List<String> excludeLists;\n+\n+    private List<String> includeLists;\n+\n+    public static List<String> propertyToList(String propertyName) {\n+        String name = System.getProperty(propertyName);\n+        if (name == null) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdd3b518304a23ec778dcd89703b74a8fdc141ee"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxNjk5MQ==", "bodyText": "not equivalent... empty string is not equivalent to null. Think aboud include = \"\"... this will exclude everthing as the predicate will never test true.", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r410016991", "createdAt": "2020-04-17T06:29:10Z", "author": {"login": "elguardian"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "diffHunk": "@@ -30,18 +32,59 @@\n  *\n  */\n public class NotificationListenerManager {\n-    \n+\n+    public static final String KIE_LISTENER_EXCLUDE = \"org.kie.jpbm.notification_listeners.exclude\";\n+\n+    public static final String KIE_LISTENER_INCLUDE = \"org.kie.jpbm.notification_listeners.include\";\n+\n     private static final Logger logger = LoggerFactory.getLogger(NotificationListenerManager.class);\n-    \n+\n     private static ServiceLoader<NotificationListener> listenersLoaded = ServiceLoader.load(NotificationListener.class);\n-    \n+\n     private static NotificationListenerManager INSTANCE = new NotificationListenerManager();\n-    \n+\n     private List<NotificationListener> listeners = new ArrayList<NotificationListener>();\n-    \n+\n+    private List<String> excludeLists;\n+\n+    private List<String> includeLists;\n+\n+    public static List<String> propertyToList(String propertyName) {\n+        String name = System.getProperty(propertyName);\n+        if (name == null) {\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzNzc2NQ=="}, "originalCommit": {"oid": "bdd3b518304a23ec778dcd89703b74a8fdc141ee"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjcyMTYwOnYy", "diffSide": "RIGHT", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzowNTozM1rOGGkTOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjozMDowNFrOGHBd7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzOTM4Nw==", "bodyText": "Missing a blank after \"if\"\nIf propertyToList returns empty list, check if (!includeLists.isEmpty())", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r409539387", "createdAt": "2020-04-16T13:05:33Z", "author": {"login": "gmunozfe"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "diffHunk": "@@ -30,18 +32,59 @@\n  *\n  */\n public class NotificationListenerManager {\n-    \n+\n+    public static final String KIE_LISTENER_EXCLUDE = \"org.kie.jpbm.notification_listeners.exclude\";\n+\n+    public static final String KIE_LISTENER_INCLUDE = \"org.kie.jpbm.notification_listeners.include\";\n+\n     private static final Logger logger = LoggerFactory.getLogger(NotificationListenerManager.class);\n-    \n+\n     private static ServiceLoader<NotificationListener> listenersLoaded = ServiceLoader.load(NotificationListener.class);\n-    \n+\n     private static NotificationListenerManager INSTANCE = new NotificationListenerManager();\n-    \n+\n     private List<NotificationListener> listeners = new ArrayList<NotificationListener>();\n-    \n+\n+    private List<String> excludeLists;\n+\n+    private List<String> includeLists;\n+\n+    public static List<String> propertyToList(String propertyName) {\n+        String name = System.getProperty(propertyName);\n+        if (name == null) {\n+            return null;\n+        }\n+        return Arrays.asList(name.split(\",\"));\n+    }\n+\n     private NotificationListenerManager() {\n+        init();\n+    }\n+\n+    public void reset() {\n+        init();\n+    }\n+\n+    private void init() {\n+        excludeLists = propertyToList(KIE_LISTENER_EXCLUDE);\n+        includeLists = propertyToList(KIE_LISTENER_INCLUDE);\n+\n+        listeners.clear();\n+        Predicate<String> predicate = createPredicate();\n         for (NotificationListener listener : listenersLoaded) {\n-            listeners.add(listener);\n+            if (predicate.test(listener.getClass().getName())) {\n+                listeners.add(listener);\n+            }\n+        }\n+    }\n+\n+    private Predicate<String> createPredicate() {\n+        if(includeLists != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdd3b518304a23ec778dcd89703b74a8fdc141ee"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxNzI2Mw==", "bodyText": "ok with the if. The other one I already explain why not.", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r410017263", "createdAt": "2020-04-17T06:30:04Z", "author": {"login": "elguardian"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "diffHunk": "@@ -30,18 +32,59 @@\n  *\n  */\n public class NotificationListenerManager {\n-    \n+\n+    public static final String KIE_LISTENER_EXCLUDE = \"org.kie.jpbm.notification_listeners.exclude\";\n+\n+    public static final String KIE_LISTENER_INCLUDE = \"org.kie.jpbm.notification_listeners.include\";\n+\n     private static final Logger logger = LoggerFactory.getLogger(NotificationListenerManager.class);\n-    \n+\n     private static ServiceLoader<NotificationListener> listenersLoaded = ServiceLoader.load(NotificationListener.class);\n-    \n+\n     private static NotificationListenerManager INSTANCE = new NotificationListenerManager();\n-    \n+\n     private List<NotificationListener> listeners = new ArrayList<NotificationListener>();\n-    \n+\n+    private List<String> excludeLists;\n+\n+    private List<String> includeLists;\n+\n+    public static List<String> propertyToList(String propertyName) {\n+        String name = System.getProperty(propertyName);\n+        if (name == null) {\n+            return null;\n+        }\n+        return Arrays.asList(name.split(\",\"));\n+    }\n+\n     private NotificationListenerManager() {\n+        init();\n+    }\n+\n+    public void reset() {\n+        init();\n+    }\n+\n+    private void init() {\n+        excludeLists = propertyToList(KIE_LISTENER_EXCLUDE);\n+        includeLists = propertyToList(KIE_LISTENER_INCLUDE);\n+\n+        listeners.clear();\n+        Predicate<String> predicate = createPredicate();\n         for (NotificationListener listener : listenersLoaded) {\n-            listeners.add(listener);\n+            if (predicate.test(listener.getClass().getName())) {\n+                listeners.add(listener);\n+            }\n+        }\n+    }\n+\n+    private Predicate<String> createPredicate() {\n+        if(includeLists != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzOTM4Nw=="}, "originalCommit": {"oid": "bdd3b518304a23ec778dcd89703b74a8fdc141ee"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjcyNjgxOnYy", "diffSide": "RIGHT", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzowNjo0NVrOGGkWcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjozMDoyM1rOGHBeXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU0MDIwOQ==", "bodyText": "Same here", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r409540209", "createdAt": "2020-04-16T13:06:45Z", "author": {"login": "gmunozfe"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "diffHunk": "@@ -30,18 +32,59 @@\n  *\n  */\n public class NotificationListenerManager {\n-    \n+\n+    public static final String KIE_LISTENER_EXCLUDE = \"org.kie.jpbm.notification_listeners.exclude\";\n+\n+    public static final String KIE_LISTENER_INCLUDE = \"org.kie.jpbm.notification_listeners.include\";\n+\n     private static final Logger logger = LoggerFactory.getLogger(NotificationListenerManager.class);\n-    \n+\n     private static ServiceLoader<NotificationListener> listenersLoaded = ServiceLoader.load(NotificationListener.class);\n-    \n+\n     private static NotificationListenerManager INSTANCE = new NotificationListenerManager();\n-    \n+\n     private List<NotificationListener> listeners = new ArrayList<NotificationListener>();\n-    \n+\n+    private List<String> excludeLists;\n+\n+    private List<String> includeLists;\n+\n+    public static List<String> propertyToList(String propertyName) {\n+        String name = System.getProperty(propertyName);\n+        if (name == null) {\n+            return null;\n+        }\n+        return Arrays.asList(name.split(\",\"));\n+    }\n+\n     private NotificationListenerManager() {\n+        init();\n+    }\n+\n+    public void reset() {\n+        init();\n+    }\n+\n+    private void init() {\n+        excludeLists = propertyToList(KIE_LISTENER_EXCLUDE);\n+        includeLists = propertyToList(KIE_LISTENER_INCLUDE);\n+\n+        listeners.clear();\n+        Predicate<String> predicate = createPredicate();\n         for (NotificationListener listener : listenersLoaded) {\n-            listeners.add(listener);\n+            if (predicate.test(listener.getClass().getName())) {\n+                listeners.add(listener);\n+            }\n+        }\n+    }\n+\n+    private Predicate<String> createPredicate() {\n+        if(includeLists != null) {\n+            return e -> includeLists.contains(e);\n+        } else if (excludeLists != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdd3b518304a23ec778dcd89703b74a8fdc141ee"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxNzM3Mw==", "bodyText": "not the same thing", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r410017373", "createdAt": "2020-04-17T06:30:23Z", "author": {"login": "elguardian"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "diffHunk": "@@ -30,18 +32,59 @@\n  *\n  */\n public class NotificationListenerManager {\n-    \n+\n+    public static final String KIE_LISTENER_EXCLUDE = \"org.kie.jpbm.notification_listeners.exclude\";\n+\n+    public static final String KIE_LISTENER_INCLUDE = \"org.kie.jpbm.notification_listeners.include\";\n+\n     private static final Logger logger = LoggerFactory.getLogger(NotificationListenerManager.class);\n-    \n+\n     private static ServiceLoader<NotificationListener> listenersLoaded = ServiceLoader.load(NotificationListener.class);\n-    \n+\n     private static NotificationListenerManager INSTANCE = new NotificationListenerManager();\n-    \n+\n     private List<NotificationListener> listeners = new ArrayList<NotificationListener>();\n-    \n+\n+    private List<String> excludeLists;\n+\n+    private List<String> includeLists;\n+\n+    public static List<String> propertyToList(String propertyName) {\n+        String name = System.getProperty(propertyName);\n+        if (name == null) {\n+            return null;\n+        }\n+        return Arrays.asList(name.split(\",\"));\n+    }\n+\n     private NotificationListenerManager() {\n+        init();\n+    }\n+\n+    public void reset() {\n+        init();\n+    }\n+\n+    private void init() {\n+        excludeLists = propertyToList(KIE_LISTENER_EXCLUDE);\n+        includeLists = propertyToList(KIE_LISTENER_INCLUDE);\n+\n+        listeners.clear();\n+        Predicate<String> predicate = createPredicate();\n         for (NotificationListener listener : listenersLoaded) {\n-            listeners.add(listener);\n+            if (predicate.test(listener.getClass().getName())) {\n+                listeners.add(listener);\n+            }\n+        }\n+    }\n+\n+    private Predicate<String> createPredicate() {\n+        if(includeLists != null) {\n+            return e -> includeLists.contains(e);\n+        } else if (excludeLists != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU0MDIwOQ=="}, "originalCommit": {"oid": "bdd3b518304a23ec778dcd89703b74a8fdc141ee"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzI0ODczOnYy", "diffSide": "RIGHT", "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDo1Nzo0MFrOGGphwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjozMTozM1rOGHBfyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyNTAyNg==", "bodyText": "Is this method really needed? It's similar to make init public", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r409625026", "createdAt": "2020-04-16T14:57:40Z", "author": {"login": "gmunozfe"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "diffHunk": "@@ -30,18 +32,59 @@\n  *\n  */\n public class NotificationListenerManager {\n-    \n+\n+    public static final String KIE_LISTENER_EXCLUDE = \"org.kie.jpbm.notification_listeners.exclude\";\n+\n+    public static final String KIE_LISTENER_INCLUDE = \"org.kie.jpbm.notification_listeners.include\";\n+\n     private static final Logger logger = LoggerFactory.getLogger(NotificationListenerManager.class);\n-    \n+\n     private static ServiceLoader<NotificationListener> listenersLoaded = ServiceLoader.load(NotificationListener.class);\n-    \n+\n     private static NotificationListenerManager INSTANCE = new NotificationListenerManager();\n-    \n+\n     private List<NotificationListener> listeners = new ArrayList<NotificationListener>();\n-    \n+\n+    private List<String> excludeLists;\n+\n+    private List<String> includeLists;\n+\n+    public static List<String> propertyToList(String propertyName) {\n+        String name = System.getProperty(propertyName);\n+        if (name == null) {\n+            return null;\n+        }\n+        return Arrays.asList(name.split(\",\"));\n+    }\n+\n     private NotificationListenerManager() {\n+        init();\n+    }\n+\n+    public void reset() {\n+        init();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdd3b518304a23ec778dcd89703b74a8fdc141ee"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAxNzczNw==", "bodyText": "done.", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r410017737", "createdAt": "2020-04-17T06:31:33Z", "author": {"login": "elguardian"}, "path": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManager.java", "diffHunk": "@@ -30,18 +32,59 @@\n  *\n  */\n public class NotificationListenerManager {\n-    \n+\n+    public static final String KIE_LISTENER_EXCLUDE = \"org.kie.jpbm.notification_listeners.exclude\";\n+\n+    public static final String KIE_LISTENER_INCLUDE = \"org.kie.jpbm.notification_listeners.include\";\n+\n     private static final Logger logger = LoggerFactory.getLogger(NotificationListenerManager.class);\n-    \n+\n     private static ServiceLoader<NotificationListener> listenersLoaded = ServiceLoader.load(NotificationListener.class);\n-    \n+\n     private static NotificationListenerManager INSTANCE = new NotificationListenerManager();\n-    \n+\n     private List<NotificationListener> listeners = new ArrayList<NotificationListener>();\n-    \n+\n+    private List<String> excludeLists;\n+\n+    private List<String> includeLists;\n+\n+    public static List<String> propertyToList(String propertyName) {\n+        String name = System.getProperty(propertyName);\n+        if (name == null) {\n+            return null;\n+        }\n+        return Arrays.asList(name.split(\",\"));\n+    }\n+\n     private NotificationListenerManager() {\n+        init();\n+    }\n+\n+    public void reset() {\n+        init();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyNTAyNg=="}, "originalCommit": {"oid": "bdd3b518304a23ec778dcd89703b74a8fdc141ee"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjI1OTIwOnYy", "diffSide": "RIGHT", "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOToyMzo0MFrOGHGopg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo0NzozNlrOGHHcOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwMTkyNg==", "bodyText": "What about adding a test which will test excluding/including more than one?", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r410101926", "createdAt": "2020-04-17T09:23:40Z", "author": {"login": "MarianMacik"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManagerTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.services.task.deadlines.notifications.impl;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class NotificationListenerManagerTest {\n+\n+    private static String EMAIL_LISTENER = \"org.jbpm.services.task.deadlines.notifications.impl.email.EmailNotificationListener\";\n+    private static String MOCK_LISTENER = \"org.jbpm.services.task.deadlines.notifications.impl.MockNotificationListener\";\n+\n+    @After\n+    @Before\n+    public void reset() {\n+        System.clearProperty(NotificationListenerManager.KIE_LISTENER_EXCLUDE);\n+        System.clearProperty(NotificationListenerManager.KIE_LISTENER_INCLUDE);\n+        NotificationListenerManager.get().reset();\n+    }\n+\n+    @Test\n+    public void testNoFlagsLists() {\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().size(), is(2));\n+    }\n+\n+    @Test\n+    public void testExcludeLists() {\n+        System.setProperty(NotificationListenerManager.KIE_LISTENER_EXCLUDE, EMAIL_LISTENER);\n+        NotificationListenerManager.get().reset();\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().size(), is(1));\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().get(0).getClass().getName(), is(MOCK_LISTENER));\n+    }\n+\n+    @Test\n+    public void testIncludeLists() {\n+        System.setProperty(NotificationListenerManager.KIE_LISTENER_INCLUDE, MOCK_LISTENER);\n+        NotificationListenerManager.get().reset();\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().size(), is(1));\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().get(0).getClass().getName(), is(MOCK_LISTENER));\n+    }\n+\n+    @Test\n+    public void testBothLists() {\n+        System.setProperty(NotificationListenerManager.KIE_LISTENER_EXCLUDE, EMAIL_LISTENER);\n+        System.setProperty(NotificationListenerManager.KIE_LISTENER_INCLUDE, EMAIL_LISTENER);\n+        NotificationListenerManager.get().reset();\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().size(), is(1));\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().get(0).getClass().getName(), is(EMAIL_LISTENER));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad079384ffd283c7d01306388c73acd363a95008"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExNTEzMA==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1634#discussion_r410115130", "createdAt": "2020-04-17T09:47:36Z", "author": {"login": "elguardian"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/deadlines/notifications/impl/NotificationListenerManagerTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.services.task.deadlines.notifications.impl;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class NotificationListenerManagerTest {\n+\n+    private static String EMAIL_LISTENER = \"org.jbpm.services.task.deadlines.notifications.impl.email.EmailNotificationListener\";\n+    private static String MOCK_LISTENER = \"org.jbpm.services.task.deadlines.notifications.impl.MockNotificationListener\";\n+\n+    @After\n+    @Before\n+    public void reset() {\n+        System.clearProperty(NotificationListenerManager.KIE_LISTENER_EXCLUDE);\n+        System.clearProperty(NotificationListenerManager.KIE_LISTENER_INCLUDE);\n+        NotificationListenerManager.get().reset();\n+    }\n+\n+    @Test\n+    public void testNoFlagsLists() {\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().size(), is(2));\n+    }\n+\n+    @Test\n+    public void testExcludeLists() {\n+        System.setProperty(NotificationListenerManager.KIE_LISTENER_EXCLUDE, EMAIL_LISTENER);\n+        NotificationListenerManager.get().reset();\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().size(), is(1));\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().get(0).getClass().getName(), is(MOCK_LISTENER));\n+    }\n+\n+    @Test\n+    public void testIncludeLists() {\n+        System.setProperty(NotificationListenerManager.KIE_LISTENER_INCLUDE, MOCK_LISTENER);\n+        NotificationListenerManager.get().reset();\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().size(), is(1));\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().get(0).getClass().getName(), is(MOCK_LISTENER));\n+    }\n+\n+    @Test\n+    public void testBothLists() {\n+        System.setProperty(NotificationListenerManager.KIE_LISTENER_EXCLUDE, EMAIL_LISTENER);\n+        System.setProperty(NotificationListenerManager.KIE_LISTENER_INCLUDE, EMAIL_LISTENER);\n+        NotificationListenerManager.get().reset();\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().size(), is(1));\n+        assertThat(NotificationListenerManager.get().getNotificationListeners().get(0).getClass().getName(), is(EMAIL_LISTENER));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwMTkyNg=="}, "originalCommit": {"oid": "ad079384ffd283c7d01306388c73acd363a95008"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1871, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}