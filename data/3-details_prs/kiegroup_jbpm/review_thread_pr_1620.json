{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NTk0MjU3", "number": 1620, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoyNjozOVrODswOIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoyNjozOVrODswOIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjUzOTg3OnYy", "diffSide": "RIGHT", "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/EventSubProcessNodeInstance.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoyNjozOVrOF9x-8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjozNzozNFrOF-yqwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyNjM4Ng==", "bodyText": "May getTimerInstances return null and this line throws a NPE?", "url": "https://github.com/kiegroup/jbpm/pull/1620#discussion_r400326386", "createdAt": "2020-03-30T16:26:39Z", "author": {"login": "gmunozfe"}, "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/EventSubProcessNodeInstance.java", "diffHunk": "@@ -54,14 +56,22 @@ public void signalEvent(String type, Object event) {\n             // start it only if it was not already started - meaning there are node instances\n             if (this.getNodeInstances().isEmpty()) {\n                 StartNode startNode = getCompositeNode().findStartNode();\n-                if (resolveVariables(((EventSubProcessNode) getEventBasedNode()).getEvents()).contains(type) || type.equals(\"timerTriggered\")) {\n+                if (resolveVariables(((EventSubProcessNode) getEventBasedNode()).getEvents()).contains(type) || containsTimerEvent(type, event)) {\n                     NodeInstance nodeInstance = getNodeInstance(startNode);\n                     ((StartNodeInstance) nodeInstance).signalEvent(type, event);\n                 }\n             }\n         }\n         super.signalEvent(type, event);\n     }\n+\n+    private boolean containsTimerEvent(String type, Object event) {\n+        if (!type.equals(\"timerTriggered\") || !(event instanceof TimerInstance)) {\n+            return false;\n+        }\n+        TimerInstance timerInstance = (TimerInstance) event;\n+        return getTimerInstances().contains(timerInstance.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5169d531ebf684c8d52035716be5986c8d39100"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4NjE3Ng==", "bodyText": "u r right. good catch", "url": "https://github.com/kiegroup/jbpm/pull/1620#discussion_r401386176", "createdAt": "2020-04-01T06:37:34Z", "author": {"login": "elguardian"}, "path": "jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/EventSubProcessNodeInstance.java", "diffHunk": "@@ -54,14 +56,22 @@ public void signalEvent(String type, Object event) {\n             // start it only if it was not already started - meaning there are node instances\n             if (this.getNodeInstances().isEmpty()) {\n                 StartNode startNode = getCompositeNode().findStartNode();\n-                if (resolveVariables(((EventSubProcessNode) getEventBasedNode()).getEvents()).contains(type) || type.equals(\"timerTriggered\")) {\n+                if (resolveVariables(((EventSubProcessNode) getEventBasedNode()).getEvents()).contains(type) || containsTimerEvent(type, event)) {\n                     NodeInstance nodeInstance = getNodeInstance(startNode);\n                     ((StartNodeInstance) nodeInstance).signalEvent(type, event);\n                 }\n             }\n         }\n         super.signalEvent(type, event);\n     }\n+\n+    private boolean containsTimerEvent(String type, Object event) {\n+        if (!type.equals(\"timerTriggered\") || !(event instanceof TimerInstance)) {\n+            return false;\n+        }\n+        TimerInstance timerInstance = (TimerInstance) event;\n+        return getTimerInstances().contains(timerInstance.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyNjM4Ng=="}, "originalCommit": {"oid": "d5169d531ebf684c8d52035716be5986c8d39100"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1846, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}