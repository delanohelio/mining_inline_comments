{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMDQ1ODU4", "number": 1806, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTo1Nzo0M1rOE7eJ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTo1NjowMVrOE8n7bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzk1NDk4OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/test/resources/BPMN2-DataInputAssociations-Pojo-Complete.bpmn2", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTo1Nzo0M1rOH3I3UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzozMjowMVrOH3Pwwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3ODk2MQ==", "bodyText": "It would be more robust to consider that address may be null\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      <from>#{instanceMetadata.address.city}</from>\n          \n          \n            \n                      <from>#{instanceMetadata.?address.city}</from>\n          \n      \n    \n    \n  \n\nYou could add a test with address null in the input process variable, that won't fail and assert coId is null.", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r527578961", "createdAt": "2020-11-20T09:57:43Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/resources/BPMN2-DataInputAssociations-Pojo-Complete.bpmn2", "diffHunk": "@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n+<definitions id=\"Definition\"\n+             targetNamespace=\"\"\n+             typeLanguage=\"http://www.java.com/javaTypes\"\n+             expressionLanguage=\"http://www.mvel.org/2.0\"\n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"\n+             xmlns:g=\"http://www.jboss.org/drools/flow/gpd\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n+             xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n+             xmlns:tns=\"http://www.jboss.org/drools\">\n+\n+  <itemDefinition id=\"_instanceMetadataItem\" structureRef=\"org.jbpm.bpmn2.DataTest$Person\" />\n+\n+  <process processType=\"Private\" isExecutable=\"true\" id=\"process\" name=\"process\" >\n+  \n+<!-- process variables -->\n+    <property id=\"instanceMetadata\" itemSubjectRef=\"_instanceMetadataItem\"/>\n+\n+    <!-- nodes -->\n+    <startEvent id=\"_1\" name=\"\" />\n+    <userTask id=\"_2\" name=\"Task\">\n+      <ioSpecification>\n+        <dataInput id='coId' name='coId'/>\n+        <inputSet>\n+          <dataInputRefs>coId</dataInputRefs>\n+        </inputSet>\n+        <outputSet>\n+        </outputSet>\n+      </ioSpecification>\n+      <dataInputAssociation>\n+        <sourceRef>instanceMetadata</sourceRef>\n+        <targetRef>coId</targetRef>\n+        <assignment language=\"http://www.mvel.org/2.0\">\n+          <from>#{instanceMetadata.address.city}</from>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfb8e079fb5954708f508b4847ff81e091fb7c53"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY5MTk3MA==", "bodyText": "Good idea, done", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r527691970", "createdAt": "2020-11-20T13:32:01Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/test/resources/BPMN2-DataInputAssociations-Pojo-Complete.bpmn2", "diffHunk": "@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n+<definitions id=\"Definition\"\n+             targetNamespace=\"\"\n+             typeLanguage=\"http://www.java.com/javaTypes\"\n+             expressionLanguage=\"http://www.mvel.org/2.0\"\n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"\n+             xmlns:g=\"http://www.jboss.org/drools/flow/gpd\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n+             xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n+             xmlns:tns=\"http://www.jboss.org/drools\">\n+\n+  <itemDefinition id=\"_instanceMetadataItem\" structureRef=\"org.jbpm.bpmn2.DataTest$Person\" />\n+\n+  <process processType=\"Private\" isExecutable=\"true\" id=\"process\" name=\"process\" >\n+  \n+<!-- process variables -->\n+    <property id=\"instanceMetadata\" itemSubjectRef=\"_instanceMetadataItem\"/>\n+\n+    <!-- nodes -->\n+    <startEvent id=\"_1\" name=\"\" />\n+    <userTask id=\"_2\" name=\"Task\">\n+      <ioSpecification>\n+        <dataInput id='coId' name='coId'/>\n+        <inputSet>\n+          <dataInputRefs>coId</dataInputRefs>\n+        </inputSet>\n+        <outputSet>\n+        </outputSet>\n+      </ioSpecification>\n+      <dataInputAssociation>\n+        <sourceRef>instanceMetadata</sourceRef>\n+        <targetRef>coId</targetRef>\n+        <assignment language=\"http://www.mvel.org/2.0\">\n+          <from>#{instanceMetadata.address.city}</from>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3ODk2MQ=="}, "originalCommit": {"oid": "cfb8e079fb5954708f508b4847ff81e091fb7c53"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODIyNjM2OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/test/resources/BPMN2-DataInputAssociations-Pojo-Complete.bpmn2", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMToxMDowOFrOH3LY-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzoxOTo0OVrOH3PVpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYyMDM0NQ==", "bodyText": "This value including \"$\" is not valid as QName:\nThe 'structureRef' attribute is invalid - The value 'org.jbpm.bpmn2.DataTest$Person' is invalid according to its datatype 'http://www.w3.org/2001/XMLSchema:QName' - The '$' character, hexadecimal value 0x24, cannot be included in a name.\nwhich it's shown in the parser as an error:\nERROR Node Info: id:_instanceMetadataItem name: \nParser message: (null: 15, 94): cvc-datatype-valid.1.2.1: 'org.jbpm.bpmn2.DataTest$Person' is not a valid value for 'QName'.\n\nthough dollar-sign ($) is the way that mvel 2.0 uses to access nested classes", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r527620345", "createdAt": "2020-11-20T11:10:08Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/resources/BPMN2-DataInputAssociations-Pojo-Complete.bpmn2", "diffHunk": "@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n+<definitions id=\"Definition\"\n+             targetNamespace=\"\"\n+             typeLanguage=\"http://www.java.com/javaTypes\"\n+             expressionLanguage=\"http://www.mvel.org/2.0\"\n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"\n+             xmlns:g=\"http://www.jboss.org/drools/flow/gpd\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n+             xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n+             xmlns:tns=\"http://www.jboss.org/drools\">\n+\n+  <itemDefinition id=\"_instanceMetadataItem\" structureRef=\"org.jbpm.bpmn2.DataTest$Person\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfb8e079fb5954708f508b4847ff81e091fb7c53"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY4NTAyOQ==", "bodyText": "This $ is the name of the inner class, since this is test, I think we can live with it (I will prefer to not make this class available in a different file since it only applies to this test)", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r527685029", "createdAt": "2020-11-20T13:19:49Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/test/resources/BPMN2-DataInputAssociations-Pojo-Complete.bpmn2", "diffHunk": "@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n+<definitions id=\"Definition\"\n+             targetNamespace=\"\"\n+             typeLanguage=\"http://www.java.com/javaTypes\"\n+             expressionLanguage=\"http://www.mvel.org/2.0\"\n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"\n+             xmlns:g=\"http://www.jboss.org/drools/flow/gpd\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n+             xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n+             xmlns:tns=\"http://www.jboss.org/drools\">\n+\n+  <itemDefinition id=\"_instanceMetadataItem\" structureRef=\"org.jbpm.bpmn2.DataTest$Person\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYyMDM0NQ=="}, "originalCommit": {"oid": "cfb8e079fb5954708f508b4847ff81e091fb7c53"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODI0ODcxOnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/test/resources/BPMN2-DataInputAssociations-Pojo-Complete.bpmn2", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMToxNjo1NVrOH3LmUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzoyMzozNFrOH3Pdmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYyMzc2MQ==", "bodyText": "language is not a valid attribute inside tAssignment type:\nThe 'language' attribute is not allowed.", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r527623761", "createdAt": "2020-11-20T11:16:55Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/resources/BPMN2-DataInputAssociations-Pojo-Complete.bpmn2", "diffHunk": "@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n+<definitions id=\"Definition\"\n+             targetNamespace=\"\"\n+             typeLanguage=\"http://www.java.com/javaTypes\"\n+             expressionLanguage=\"http://www.mvel.org/2.0\"\n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"\n+             xmlns:g=\"http://www.jboss.org/drools/flow/gpd\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n+             xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n+             xmlns:tns=\"http://www.jboss.org/drools\">\n+\n+  <itemDefinition id=\"_instanceMetadataItem\" structureRef=\"org.jbpm.bpmn2.DataTest$Person\" />\n+\n+  <process processType=\"Private\" isExecutable=\"true\" id=\"process\" name=\"process\" >\n+  \n+<!-- process variables -->\n+    <property id=\"instanceMetadata\" itemSubjectRef=\"_instanceMetadataItem\"/>\n+\n+    <!-- nodes -->\n+    <startEvent id=\"_1\" name=\"\" />\n+    <userTask id=\"_2\" name=\"Task\">\n+      <ioSpecification>\n+        <dataInput id='coId' name='coId'/>\n+        <inputSet>\n+          <dataInputRefs>coId</dataInputRefs>\n+        </inputSet>\n+        <outputSet>\n+        </outputSet>\n+      </ioSpecification>\n+      <dataInputAssociation>\n+        <sourceRef>instanceMetadata</sourceRef>\n+        <targetRef>coId</targetRef>\n+        <assignment language=\"http://www.mvel.org/2.0\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfb8e079fb5954708f508b4847ff81e091fb7c53"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY4NzA2Ng==", "bodyText": "yes, thats surprising, since bpmn specification https://www.omg.org/spec/BPMN/2.0/PDF, in page 223, states:\nThe Assignment class is used to specify a simple mapping of data elements using a specified Expression language.The default Expression language for all Expressions is specified in the Definitions element, using the expressionLanguage attribute. It can also be overridden on each individual Assignment using the same attribute\nAnyway, I remove language attribute from XMLs and, in order to achieve independence from JIRA https://issues.redhat.com/browse/JBPM-9471, try to deduce if the language used in the assigment  is mvel based on the content of from and to nodes.\nI left the code that search for language attribute in Assignment (which will always be null right now) so it will be eventually executed when both XSD is fixed and Designer sets this attribute.", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r527687066", "createdAt": "2020-11-20T13:23:34Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/test/resources/BPMN2-DataInputAssociations-Pojo-Complete.bpmn2", "diffHunk": "@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n+<definitions id=\"Definition\"\n+             targetNamespace=\"\"\n+             typeLanguage=\"http://www.java.com/javaTypes\"\n+             expressionLanguage=\"http://www.mvel.org/2.0\"\n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"\n+             xmlns:g=\"http://www.jboss.org/drools/flow/gpd\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n+             xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n+             xmlns:tns=\"http://www.jboss.org/drools\">\n+\n+  <itemDefinition id=\"_instanceMetadataItem\" structureRef=\"org.jbpm.bpmn2.DataTest$Person\" />\n+\n+  <process processType=\"Private\" isExecutable=\"true\" id=\"process\" name=\"process\" >\n+  \n+<!-- process variables -->\n+    <property id=\"instanceMetadata\" itemSubjectRef=\"_instanceMetadataItem\"/>\n+\n+    <!-- nodes -->\n+    <startEvent id=\"_1\" name=\"\" />\n+    <userTask id=\"_2\" name=\"Task\">\n+      <ioSpecification>\n+        <dataInput id='coId' name='coId'/>\n+        <inputSet>\n+          <dataInputRefs>coId</dataInputRefs>\n+        </inputSet>\n+        <outputSet>\n+        </outputSet>\n+      </ioSpecification>\n+      <dataInputAssociation>\n+        <sourceRef>instanceMetadata</sourceRef>\n+        <targetRef>coId</targetRef>\n+        <assignment language=\"http://www.mvel.org/2.0\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYyMzc2MQ=="}, "originalCommit": {"oid": "cfb8e079fb5954708f508b4847ff81e091fb7c53"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTIyMTE4OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/test/resources/BPMN2-DataInputAssociations-Pojo.bpmn2", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTozNjo1OVrOH3UvrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNjoxNzoxOFrOH3WYlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3MzYxMw==", "bodyText": "Could you add a comment indicating that language attribute validation against xsd will fail here (though it shouldn't, according to the standard, as you mention before)?\nIt's just to keep in mind in the future that this is a known issue to us in the xsd definition.", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r527773613", "createdAt": "2020-11-20T15:36:59Z", "author": {"login": "gmunozfe"}, "path": "jbpm-bpmn2/src/test/resources/BPMN2-DataInputAssociations-Pojo.bpmn2", "diffHunk": "@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n+<definitions id=\"Definition\"\n+             targetNamespace=\"\"\n+             typeLanguage=\"http://www.java.com/javaTypes\"\n+             expressionLanguage=\"http://www.mvel.org/2.0\"\n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"\n+             xmlns:g=\"http://www.jboss.org/drools/flow/gpd\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n+             xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n+             xmlns:tns=\"http://www.jboss.org/drools\">\n+\n+  <itemDefinition id=\"_instanceMetadataItem\" structureRef=\"org.jbpm.bpmn2.DataTest$Person\" />\n+\n+  <process processType=\"Private\" isExecutable=\"true\" id=\"process\" name=\"process\" >\n+  \n+<!-- process variables -->\n+    <property id=\"instanceMetadata\" itemSubjectRef=\"_instanceMetadataItem\"/>\n+\n+    <!-- nodes -->\n+    <startEvent id=\"_1\" name=\"\" />\n+    <userTask id=\"_2\" name=\"Task\">\n+      <ioSpecification>\n+        <dataInput id='coId' name='coId'/>\n+        <inputSet>\n+          <dataInputRefs>coId</dataInputRefs>\n+        </inputSet>\n+        <outputSet>\n+        </outputSet>\n+      </ioSpecification>\n+      <dataInputAssociation>\n+        <sourceRef>instanceMetadata</sourceRef>\n+        <targetRef>coId</targetRef>\n+        <assignment>\n+          <from language=\"http://www.mvel.org/2.0\">#{address.city}</from>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c4c741d246da4c6050604e3de2d8d435759b927"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgwMDQ2OA==", "bodyText": "This is a typo and should not be there.", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r527800468", "createdAt": "2020-11-20T16:17:18Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/test/resources/BPMN2-DataInputAssociations-Pojo.bpmn2", "diffHunk": "@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n+<definitions id=\"Definition\"\n+             targetNamespace=\"\"\n+             typeLanguage=\"http://www.java.com/javaTypes\"\n+             expressionLanguage=\"http://www.mvel.org/2.0\"\n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"\n+             xmlns:g=\"http://www.jboss.org/drools/flow/gpd\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n+             xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n+             xmlns:tns=\"http://www.jboss.org/drools\">\n+\n+  <itemDefinition id=\"_instanceMetadataItem\" structureRef=\"org.jbpm.bpmn2.DataTest$Person\" />\n+\n+  <process processType=\"Private\" isExecutable=\"true\" id=\"process\" name=\"process\" >\n+  \n+<!-- process variables -->\n+    <property id=\"instanceMetadata\" itemSubjectRef=\"_instanceMetadataItem\"/>\n+\n+    <!-- nodes -->\n+    <startEvent id=\"_1\" name=\"\" />\n+    <userTask id=\"_2\" name=\"Task\">\n+      <ioSpecification>\n+        <dataInput id='coId' name='coId'/>\n+        <inputSet>\n+          <dataInputRefs>coId</dataInputRefs>\n+        </inputSet>\n+        <outputSet>\n+        </outputSet>\n+      </ioSpecification>\n+      <dataInputAssociation>\n+        <sourceRef>instanceMetadata</sourceRef>\n+        <targetRef>coId</targetRef>\n+        <assignment>\n+          <from language=\"http://www.mvel.org/2.0\">#{address.city}</from>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3MzYxMw=="}, "originalCommit": {"oid": "0c4c741d246da4c6050604e3de2d8d435759b927"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjA1NDgwOnYy", "diffSide": "RIGHT", "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/dialect/mvel/MVELAssignmentAction.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDozNTozOFrOH4QI1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo1MTo1N1rOH4TqwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc0NjcwOQ==", "bodyText": "The concept of \".\" as \"this\" is does not feel very standard.\nThe concept of expression [] for arrays is as well very strange without setting the name of the array.\nTo make things a bit more standard we should remove the logic of ensureLocated as you are trying to infer things.\nWe can can set the extra parameters as source/target for instance as a pointer to the object. or even something like\n@source[3].myprop = @target.myprop. This will avoid the problem of having node output express with the same name as target. (Edge case but could happen)\nThis should leave trail in the audit table so I would suggest to add a test about that to evaluate the source expression\ntarget expression\nthe call producer\nin three different steps.\nPlease also remove the need of #{} if the UI is no setting the language you have already more than enough check to work that properly.", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r528746709", "createdAt": "2020-11-23T14:35:38Z", "author": {"login": "elguardian"}, "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/dialect/mvel/MVELAssignmentAction.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.builder.dialect.mvel;\n+\n+import java.util.function.BiFunction;\n+import java.util.regex.Matcher;\n+\n+import org.drools.mvel.MVELSafeHelper;\n+import org.jbpm.process.instance.impl.AssignmentAction;\n+import org.jbpm.process.instance.impl.AssignmentProducer;\n+import org.jbpm.util.PatternConstants;\n+import org.jbpm.workflow.core.node.Assignment;\n+import org.jbpm.workflow.instance.impl.NodeInstanceResolverFactory;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class MVELAssignmentAction implements AssignmentAction {\n+\n+    private String to;\n+    private String from;\n+    private String srcExpr;\n+    private String targetExpr;\n+    private AssignmentProducer producer;\n+    private BiFunction<ProcessContext, NodeInstance, Object> src;\n+    private BiFunction<ProcessContext, NodeInstance, Object> target;\n+\n+    public MVELAssignmentAction(Assignment assignment, String sourceExpr, String targetExpr,\n+                                BiFunction<ProcessContext, NodeInstance, Object> source,\n+                                BiFunction<ProcessContext, NodeInstance, Object> target, AssignmentProducer producer) {\n+\n+        Matcher fromMatcher = PatternConstants.PARAMETER_MATCHER.matcher(assignment.getFrom());\n+        Matcher toMatcher = PatternConstants.PARAMETER_MATCHER.matcher(assignment.getTo());\n+\n+        this.from = fromMatcher.find() ? fromMatcher.group(1) : assignment.getFrom();\n+        this.to = toMatcher.find() ? toMatcher.group(1) : assignment.getTo();\n+        this.src = source;\n+        this.target = target;\n+        this.srcExpr = sourceExpr;\n+        this.targetExpr = targetExpr;\n+        this.producer = producer;\n+    }\n+\n+    @Override\n+    public void execute(NodeInstance nodeInstance, ProcessContext context) throws Exception {\n+        Object targetObject = this.target.apply(context, nodeInstance);\n+        Object srcObject = this.src.apply(context, nodeInstance);\n+        NodeInstanceResolverFactory resolver = new NodeInstanceResolverFactory(\n+                (org.jbpm.workflow.instance.NodeInstance) nodeInstance);\n+\n+        // if just evaluating, not assignment\n+        if (targetObject == null || notEvalTarget()) {\n+            producer.accept(context, nodeInstance, notEvalSrc() ? srcObject : MVELSafeHelper.getEvaluator().eval(\n+                    from, srcObject, resolver));\n+        } else {\n+            resolver.addExtraParameter(srcExpr, srcObject);\n+            resolver.addExtraParameter(targetExpr, targetObject);\n+            MVELSafeHelper.getEvaluator().eval(ensureLocated(targetExpr, to).concat(\"=\").concat(ensureLocated(srcExpr,\n+                    from)), resolver);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abea764b9c06fcddeea7c0407ede5441a05916d0"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwMzM4Mg==", "bodyText": "this keyword introduced to cope with the egde case, if expression has same name than target, this usage is mandatory, otherwise is optional", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r528803382", "createdAt": "2020-11-23T15:50:29Z", "author": {"login": "fjtirado"}, "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/dialect/mvel/MVELAssignmentAction.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.builder.dialect.mvel;\n+\n+import java.util.function.BiFunction;\n+import java.util.regex.Matcher;\n+\n+import org.drools.mvel.MVELSafeHelper;\n+import org.jbpm.process.instance.impl.AssignmentAction;\n+import org.jbpm.process.instance.impl.AssignmentProducer;\n+import org.jbpm.util.PatternConstants;\n+import org.jbpm.workflow.core.node.Assignment;\n+import org.jbpm.workflow.instance.impl.NodeInstanceResolverFactory;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class MVELAssignmentAction implements AssignmentAction {\n+\n+    private String to;\n+    private String from;\n+    private String srcExpr;\n+    private String targetExpr;\n+    private AssignmentProducer producer;\n+    private BiFunction<ProcessContext, NodeInstance, Object> src;\n+    private BiFunction<ProcessContext, NodeInstance, Object> target;\n+\n+    public MVELAssignmentAction(Assignment assignment, String sourceExpr, String targetExpr,\n+                                BiFunction<ProcessContext, NodeInstance, Object> source,\n+                                BiFunction<ProcessContext, NodeInstance, Object> target, AssignmentProducer producer) {\n+\n+        Matcher fromMatcher = PatternConstants.PARAMETER_MATCHER.matcher(assignment.getFrom());\n+        Matcher toMatcher = PatternConstants.PARAMETER_MATCHER.matcher(assignment.getTo());\n+\n+        this.from = fromMatcher.find() ? fromMatcher.group(1) : assignment.getFrom();\n+        this.to = toMatcher.find() ? toMatcher.group(1) : assignment.getTo();\n+        this.src = source;\n+        this.target = target;\n+        this.srcExpr = sourceExpr;\n+        this.targetExpr = targetExpr;\n+        this.producer = producer;\n+    }\n+\n+    @Override\n+    public void execute(NodeInstance nodeInstance, ProcessContext context) throws Exception {\n+        Object targetObject = this.target.apply(context, nodeInstance);\n+        Object srcObject = this.src.apply(context, nodeInstance);\n+        NodeInstanceResolverFactory resolver = new NodeInstanceResolverFactory(\n+                (org.jbpm.workflow.instance.NodeInstance) nodeInstance);\n+\n+        // if just evaluating, not assignment\n+        if (targetObject == null || notEvalTarget()) {\n+            producer.accept(context, nodeInstance, notEvalSrc() ? srcObject : MVELSafeHelper.getEvaluator().eval(\n+                    from, srcObject, resolver));\n+        } else {\n+            resolver.addExtraParameter(srcExpr, srcObject);\n+            resolver.addExtraParameter(targetExpr, targetObject);\n+            MVELSafeHelper.getEvaluator().eval(ensureLocated(targetExpr, to).concat(\"=\").concat(ensureLocated(srcExpr,\n+                    from)), resolver);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc0NjcwOQ=="}, "originalCommit": {"oid": "abea764b9c06fcddeea7c0407ede5441a05916d0"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwMzk2OQ==", "bodyText": "examples edited to not use #{} if language is specified in expression, otherwise it needs to be specified to identify the expression as mvel", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r528803969", "createdAt": "2020-11-23T15:51:15Z", "author": {"login": "fjtirado"}, "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/dialect/mvel/MVELAssignmentAction.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.builder.dialect.mvel;\n+\n+import java.util.function.BiFunction;\n+import java.util.regex.Matcher;\n+\n+import org.drools.mvel.MVELSafeHelper;\n+import org.jbpm.process.instance.impl.AssignmentAction;\n+import org.jbpm.process.instance.impl.AssignmentProducer;\n+import org.jbpm.util.PatternConstants;\n+import org.jbpm.workflow.core.node.Assignment;\n+import org.jbpm.workflow.instance.impl.NodeInstanceResolverFactory;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class MVELAssignmentAction implements AssignmentAction {\n+\n+    private String to;\n+    private String from;\n+    private String srcExpr;\n+    private String targetExpr;\n+    private AssignmentProducer producer;\n+    private BiFunction<ProcessContext, NodeInstance, Object> src;\n+    private BiFunction<ProcessContext, NodeInstance, Object> target;\n+\n+    public MVELAssignmentAction(Assignment assignment, String sourceExpr, String targetExpr,\n+                                BiFunction<ProcessContext, NodeInstance, Object> source,\n+                                BiFunction<ProcessContext, NodeInstance, Object> target, AssignmentProducer producer) {\n+\n+        Matcher fromMatcher = PatternConstants.PARAMETER_MATCHER.matcher(assignment.getFrom());\n+        Matcher toMatcher = PatternConstants.PARAMETER_MATCHER.matcher(assignment.getTo());\n+\n+        this.from = fromMatcher.find() ? fromMatcher.group(1) : assignment.getFrom();\n+        this.to = toMatcher.find() ? toMatcher.group(1) : assignment.getTo();\n+        this.src = source;\n+        this.target = target;\n+        this.srcExpr = sourceExpr;\n+        this.targetExpr = targetExpr;\n+        this.producer = producer;\n+    }\n+\n+    @Override\n+    public void execute(NodeInstance nodeInstance, ProcessContext context) throws Exception {\n+        Object targetObject = this.target.apply(context, nodeInstance);\n+        Object srcObject = this.src.apply(context, nodeInstance);\n+        NodeInstanceResolverFactory resolver = new NodeInstanceResolverFactory(\n+                (org.jbpm.workflow.instance.NodeInstance) nodeInstance);\n+\n+        // if just evaluating, not assignment\n+        if (targetObject == null || notEvalTarget()) {\n+            producer.accept(context, nodeInstance, notEvalSrc() ? srcObject : MVELSafeHelper.getEvaluator().eval(\n+                    from, srcObject, resolver));\n+        } else {\n+            resolver.addExtraParameter(srcExpr, srcObject);\n+            resolver.addExtraParameter(targetExpr, targetObject);\n+            MVELSafeHelper.getEvaluator().eval(ensureLocated(targetExpr, to).concat(\"=\").concat(ensureLocated(srcExpr,\n+                    from)), resolver);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc0NjcwOQ=="}, "originalCommit": {"oid": "abea764b9c06fcddeea7c0407ede5441a05916d0"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwNDU0NA==", "bodyText": "this prefix is now used in list assigment example", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r528804544", "createdAt": "2020-11-23T15:51:57Z", "author": {"login": "fjtirado"}, "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/dialect/mvel/MVELAssignmentAction.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.builder.dialect.mvel;\n+\n+import java.util.function.BiFunction;\n+import java.util.regex.Matcher;\n+\n+import org.drools.mvel.MVELSafeHelper;\n+import org.jbpm.process.instance.impl.AssignmentAction;\n+import org.jbpm.process.instance.impl.AssignmentProducer;\n+import org.jbpm.util.PatternConstants;\n+import org.jbpm.workflow.core.node.Assignment;\n+import org.jbpm.workflow.instance.impl.NodeInstanceResolverFactory;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class MVELAssignmentAction implements AssignmentAction {\n+\n+    private String to;\n+    private String from;\n+    private String srcExpr;\n+    private String targetExpr;\n+    private AssignmentProducer producer;\n+    private BiFunction<ProcessContext, NodeInstance, Object> src;\n+    private BiFunction<ProcessContext, NodeInstance, Object> target;\n+\n+    public MVELAssignmentAction(Assignment assignment, String sourceExpr, String targetExpr,\n+                                BiFunction<ProcessContext, NodeInstance, Object> source,\n+                                BiFunction<ProcessContext, NodeInstance, Object> target, AssignmentProducer producer) {\n+\n+        Matcher fromMatcher = PatternConstants.PARAMETER_MATCHER.matcher(assignment.getFrom());\n+        Matcher toMatcher = PatternConstants.PARAMETER_MATCHER.matcher(assignment.getTo());\n+\n+        this.from = fromMatcher.find() ? fromMatcher.group(1) : assignment.getFrom();\n+        this.to = toMatcher.find() ? toMatcher.group(1) : assignment.getTo();\n+        this.src = source;\n+        this.target = target;\n+        this.srcExpr = sourceExpr;\n+        this.targetExpr = targetExpr;\n+        this.producer = producer;\n+    }\n+\n+    @Override\n+    public void execute(NodeInstance nodeInstance, ProcessContext context) throws Exception {\n+        Object targetObject = this.target.apply(context, nodeInstance);\n+        Object srcObject = this.src.apply(context, nodeInstance);\n+        NodeInstanceResolverFactory resolver = new NodeInstanceResolverFactory(\n+                (org.jbpm.workflow.instance.NodeInstance) nodeInstance);\n+\n+        // if just evaluating, not assignment\n+        if (targetObject == null || notEvalTarget()) {\n+            producer.accept(context, nodeInstance, notEvalSrc() ? srcObject : MVELSafeHelper.getEvaluator().eval(\n+                    from, srcObject, resolver));\n+        } else {\n+            resolver.addExtraParameter(srcExpr, srcObject);\n+            resolver.addExtraParameter(targetExpr, targetObject);\n+            MVELSafeHelper.getEvaluator().eval(ensureLocated(targetExpr, to).concat(\"=\").concat(ensureLocated(srcExpr,\n+                    from)), resolver);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc0NjcwOQ=="}, "originalCommit": {"oid": "abea764b9c06fcddeea7c0407ede5441a05916d0"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjQ0NzA2OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/elements/DataAssociationFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo1NzoxNlrOH4T6aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDo0MTo1MlrOH46KqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwODU1Mg==", "bodyText": "shouldn't we enclose both to and from together within an inner parenthesis? otherwise if dialect == null && PatternConstants.PARAMETER_MATCHER.matcher(from.getTextContent()).matches() gets evaluated to false it might happen that last part PatternConstants.PARAMETER_MATCHER.matcher(to.getTextContent()).matches() is equal true and therefore we might be overriding previous dialect (this is not taken into account in the second part of the condition)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (dialect == null && PatternConstants.PARAMETER_MATCHER.matcher(from.getTextContent()).matches() ||\n          \n          \n            \n                        PatternConstants.PARAMETER_MATCHER.matcher(to.getTextContent()).matches()) {\n          \n          \n            \n                    if (dialect == null && (PatternConstants.PARAMETER_MATCHER.matcher(from.getTextContent()).matches() ||\n          \n          \n            \n                        PatternConstants.PARAMETER_MATCHER.matcher(to.getTextContent()).matches())) {", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r528808552", "createdAt": "2020-11-23T15:57:16Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/elements/DataAssociationFactory.java", "diffHunk": "@@ -79,22 +90,75 @@ public static DataAssociation readDataOutputAssociation(Node xmlNode, Map<String\n         return new DataAssociation(source, target, assignment, transformation);\n     }\n     \n-    private static Assignment readAssignment(Node xmlNode) {\n-        NodeList nodeList = xmlNode.getChildNodes();\n-        String from = null;\n-        String to = null;\n-        for(int i = 0; i < nodeList.getLength(); i++) {\n-            Node subNode = nodeList.item(i);\n-            switch (subNode.getNodeName()) {\n-                case \"from\":\n-                    from = subNode.getTextContent();\n-                    break;\n-                case \"to\":\n-                    to = subNode.getTextContent();\n-                    break;\n+    public static List<Assignment> readAssignments(Node subNode) {\n+        List<Assignment> assignments = new LinkedList<>();\n+        while (subNode != null) {\n+            assignments.add(DataAssociationFactory.readAssignment(subNode));\n+            subNode = subNode.getNextSibling();\n+        }\n+        return assignments;\n+    }\n+\n+    public static Assignment readAssignment(Node xmlNode) {\n+        Node from = xmlNode.getFirstChild();\n+        if (from == null) {\n+            throw new IllegalArgumentException(\"missing from for assignment\");\n+        }\n+        Node to = from.getNextSibling();\n+        if (to == null) {\n+            throw new IllegalArgumentException(\"missing to for assigment\");\n+        }\n+        return new Assignment(getDialect(xmlNode, from, to), from.getTextContent(), to.getTextContent());\n+    }\n+\n+\n+    protected static String getDialect(Node node, Node from, Node to) {\n+        Collection<String> dialects = ProcessDialectRegistry.getDialects();\n+        if (!dialects.equals(dialectPatterns.keySet())) {\n+            dialectPatterns = buildDialectPatterns(dialects);\n+        }\n+\n+        // trying to retrieve dialect from to or from overridden language\n+        String dialect = findDialect(from.getAttributes().getNamedItem(LANG_EXPRESSION_ATTR));\n+        if (dialect == null) {\n+            dialect = findDialect(to.getAttributes().getNamedItem(LANG_EXPRESSION_ATTR));\n+        }\n+\n+        // there are some working process which declares MVEL in definition but use XPATH, in order\n+        // to prevent these files to fail, we check a flag (disable by default) before reading expression \n+        // language from definition\n+        if (dialect == null && Boolean.getBoolean(USE_DEFINITION_LANGUAGE_PROPERTY)) {\n+            Node parentNode;\n+            do {\n+                parentNode = node.getParentNode();\n+            }\n+            while (parentNode != null && !parentNode.getLocalName().equals(\"Definitions\"));\n+            if (parentNode != null) {\n+                dialect = findDialect(parentNode.getAttributes().getNamedItem(\"expressionLanguage\"));\n             }\n         }\n-        return new Assignment(\"XPath\", from, to);\n+        // finally, if still not able to determine language, check if from or to contains a mvel expression \n+        if (dialect == null && PatternConstants.PARAMETER_MATCHER.matcher(from.getTextContent()).matches() ||\n+            PatternConstants.PARAMETER_MATCHER.matcher(to.getTextContent()).matches()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "494be54a81353d4f74a1c7e689a3582f75f7eee7"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQzNTMwNQ==", "bodyText": "Good catch", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r529435305", "createdAt": "2020-11-24T10:41:52Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/elements/DataAssociationFactory.java", "diffHunk": "@@ -79,22 +90,75 @@ public static DataAssociation readDataOutputAssociation(Node xmlNode, Map<String\n         return new DataAssociation(source, target, assignment, transformation);\n     }\n     \n-    private static Assignment readAssignment(Node xmlNode) {\n-        NodeList nodeList = xmlNode.getChildNodes();\n-        String from = null;\n-        String to = null;\n-        for(int i = 0; i < nodeList.getLength(); i++) {\n-            Node subNode = nodeList.item(i);\n-            switch (subNode.getNodeName()) {\n-                case \"from\":\n-                    from = subNode.getTextContent();\n-                    break;\n-                case \"to\":\n-                    to = subNode.getTextContent();\n-                    break;\n+    public static List<Assignment> readAssignments(Node subNode) {\n+        List<Assignment> assignments = new LinkedList<>();\n+        while (subNode != null) {\n+            assignments.add(DataAssociationFactory.readAssignment(subNode));\n+            subNode = subNode.getNextSibling();\n+        }\n+        return assignments;\n+    }\n+\n+    public static Assignment readAssignment(Node xmlNode) {\n+        Node from = xmlNode.getFirstChild();\n+        if (from == null) {\n+            throw new IllegalArgumentException(\"missing from for assignment\");\n+        }\n+        Node to = from.getNextSibling();\n+        if (to == null) {\n+            throw new IllegalArgumentException(\"missing to for assigment\");\n+        }\n+        return new Assignment(getDialect(xmlNode, from, to), from.getTextContent(), to.getTextContent());\n+    }\n+\n+\n+    protected static String getDialect(Node node, Node from, Node to) {\n+        Collection<String> dialects = ProcessDialectRegistry.getDialects();\n+        if (!dialects.equals(dialectPatterns.keySet())) {\n+            dialectPatterns = buildDialectPatterns(dialects);\n+        }\n+\n+        // trying to retrieve dialect from to or from overridden language\n+        String dialect = findDialect(from.getAttributes().getNamedItem(LANG_EXPRESSION_ATTR));\n+        if (dialect == null) {\n+            dialect = findDialect(to.getAttributes().getNamedItem(LANG_EXPRESSION_ATTR));\n+        }\n+\n+        // there are some working process which declares MVEL in definition but use XPATH, in order\n+        // to prevent these files to fail, we check a flag (disable by default) before reading expression \n+        // language from definition\n+        if (dialect == null && Boolean.getBoolean(USE_DEFINITION_LANGUAGE_PROPERTY)) {\n+            Node parentNode;\n+            do {\n+                parentNode = node.getParentNode();\n+            }\n+            while (parentNode != null && !parentNode.getLocalName().equals(\"Definitions\"));\n+            if (parentNode != null) {\n+                dialect = findDialect(parentNode.getAttributes().getNamedItem(\"expressionLanguage\"));\n             }\n         }\n-        return new Assignment(\"XPath\", from, to);\n+        // finally, if still not able to determine language, check if from or to contains a mvel expression \n+        if (dialect == null && PatternConstants.PARAMETER_MATCHER.matcher(from.getTextContent()).matches() ||\n+            PatternConstants.PARAMETER_MATCHER.matcher(to.getTextContent()).matches()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwODU1Mg=="}, "originalCommit": {"oid": "494be54a81353d4f74a1c7e689a3582f75f7eee7"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjQ2NjQ5OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/elements/DataAssociationFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo1OTo0OFrOH4UHIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDo1MDowOVrOH46xjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgxMTgwOA==", "bodyText": "potential infinitive loop? we are not getting latest parentNode when looping, thus we might be in an infinitive loop\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Node parentNode;\n          \n          \n            \n                        do {\n          \n          \n            \n                            parentNode = node.getParentNode();\n          \n          \n            \n                        }\n          \n          \n            \n                        while (parentNode != null && !parentNode.getLocalName().equals(\"Definitions\"));\n          \n          \n            \n                        Node parentNode = node.getParentNode();\n          \n          \n            \n                        while (parentNode != null && !parentNode.getLocalName().equals(\"Definitions\")) {\n          \n          \n            \n                            parentNode = parentNode.getParentNode();\n          \n          \n            \n                        }", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r528811808", "createdAt": "2020-11-23T15:59:48Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/elements/DataAssociationFactory.java", "diffHunk": "@@ -79,22 +90,75 @@ public static DataAssociation readDataOutputAssociation(Node xmlNode, Map<String\n         return new DataAssociation(source, target, assignment, transformation);\n     }\n     \n-    private static Assignment readAssignment(Node xmlNode) {\n-        NodeList nodeList = xmlNode.getChildNodes();\n-        String from = null;\n-        String to = null;\n-        for(int i = 0; i < nodeList.getLength(); i++) {\n-            Node subNode = nodeList.item(i);\n-            switch (subNode.getNodeName()) {\n-                case \"from\":\n-                    from = subNode.getTextContent();\n-                    break;\n-                case \"to\":\n-                    to = subNode.getTextContent();\n-                    break;\n+    public static List<Assignment> readAssignments(Node subNode) {\n+        List<Assignment> assignments = new LinkedList<>();\n+        while (subNode != null) {\n+            assignments.add(DataAssociationFactory.readAssignment(subNode));\n+            subNode = subNode.getNextSibling();\n+        }\n+        return assignments;\n+    }\n+\n+    public static Assignment readAssignment(Node xmlNode) {\n+        Node from = xmlNode.getFirstChild();\n+        if (from == null) {\n+            throw new IllegalArgumentException(\"missing from for assignment\");\n+        }\n+        Node to = from.getNextSibling();\n+        if (to == null) {\n+            throw new IllegalArgumentException(\"missing to for assigment\");\n+        }\n+        return new Assignment(getDialect(xmlNode, from, to), from.getTextContent(), to.getTextContent());\n+    }\n+\n+\n+    protected static String getDialect(Node node, Node from, Node to) {\n+        Collection<String> dialects = ProcessDialectRegistry.getDialects();\n+        if (!dialects.equals(dialectPatterns.keySet())) {\n+            dialectPatterns = buildDialectPatterns(dialects);\n+        }\n+\n+        // trying to retrieve dialect from to or from overridden language\n+        String dialect = findDialect(from.getAttributes().getNamedItem(LANG_EXPRESSION_ATTR));\n+        if (dialect == null) {\n+            dialect = findDialect(to.getAttributes().getNamedItem(LANG_EXPRESSION_ATTR));\n+        }\n+\n+        // there are some working process which declares MVEL in definition but use XPATH, in order\n+        // to prevent these files to fail, we check a flag (disable by default) before reading expression \n+        // language from definition\n+        if (dialect == null && Boolean.getBoolean(USE_DEFINITION_LANGUAGE_PROPERTY)) {\n+            Node parentNode;\n+            do {\n+                parentNode = node.getParentNode();\n+            }\n+            while (parentNode != null && !parentNode.getLocalName().equals(\"Definitions\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "494be54a81353d4f74a1c7e689a3582f75f7eee7"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ0NTI2MA==", "bodyText": "Good catch", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r529445260", "createdAt": "2020-11-24T10:50:09Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/elements/DataAssociationFactory.java", "diffHunk": "@@ -79,22 +90,75 @@ public static DataAssociation readDataOutputAssociation(Node xmlNode, Map<String\n         return new DataAssociation(source, target, assignment, transformation);\n     }\n     \n-    private static Assignment readAssignment(Node xmlNode) {\n-        NodeList nodeList = xmlNode.getChildNodes();\n-        String from = null;\n-        String to = null;\n-        for(int i = 0; i < nodeList.getLength(); i++) {\n-            Node subNode = nodeList.item(i);\n-            switch (subNode.getNodeName()) {\n-                case \"from\":\n-                    from = subNode.getTextContent();\n-                    break;\n-                case \"to\":\n-                    to = subNode.getTextContent();\n-                    break;\n+    public static List<Assignment> readAssignments(Node subNode) {\n+        List<Assignment> assignments = new LinkedList<>();\n+        while (subNode != null) {\n+            assignments.add(DataAssociationFactory.readAssignment(subNode));\n+            subNode = subNode.getNextSibling();\n+        }\n+        return assignments;\n+    }\n+\n+    public static Assignment readAssignment(Node xmlNode) {\n+        Node from = xmlNode.getFirstChild();\n+        if (from == null) {\n+            throw new IllegalArgumentException(\"missing from for assignment\");\n+        }\n+        Node to = from.getNextSibling();\n+        if (to == null) {\n+            throw new IllegalArgumentException(\"missing to for assigment\");\n+        }\n+        return new Assignment(getDialect(xmlNode, from, to), from.getTextContent(), to.getTextContent());\n+    }\n+\n+\n+    protected static String getDialect(Node node, Node from, Node to) {\n+        Collection<String> dialects = ProcessDialectRegistry.getDialects();\n+        if (!dialects.equals(dialectPatterns.keySet())) {\n+            dialectPatterns = buildDialectPatterns(dialects);\n+        }\n+\n+        // trying to retrieve dialect from to or from overridden language\n+        String dialect = findDialect(from.getAttributes().getNamedItem(LANG_EXPRESSION_ATTR));\n+        if (dialect == null) {\n+            dialect = findDialect(to.getAttributes().getNamedItem(LANG_EXPRESSION_ATTR));\n+        }\n+\n+        // there are some working process which declares MVEL in definition but use XPATH, in order\n+        // to prevent these files to fail, we check a flag (disable by default) before reading expression \n+        // language from definition\n+        if (dialect == null && Boolean.getBoolean(USE_DEFINITION_LANGUAGE_PROPERTY)) {\n+            Node parentNode;\n+            do {\n+                parentNode = node.getParentNode();\n+            }\n+            while (parentNode != null && !parentNode.getLocalName().equals(\"Definitions\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgxMTgwOA=="}, "originalCommit": {"oid": "494be54a81353d4f74a1c7e689a3582f75f7eee7"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTI0OTU1OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/elements/DataAssociationFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNzoxOTozMFrOH4u3bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNzoxOTozMFrOH4u3bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI1MDE1Ng==", "bodyText": "typo\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalArgumentException(\"missing to for assigment\");\n          \n          \n            \n                        throw new IllegalArgumentException(\"missing to for assignment\");", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r529250156", "createdAt": "2020-11-24T07:19:30Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/elements/DataAssociationFactory.java", "diffHunk": "@@ -79,22 +90,75 @@ public static DataAssociation readDataOutputAssociation(Node xmlNode, Map<String\n         return new DataAssociation(source, target, assignment, transformation);\n     }\n     \n-    private static Assignment readAssignment(Node xmlNode) {\n-        NodeList nodeList = xmlNode.getChildNodes();\n-        String from = null;\n-        String to = null;\n-        for(int i = 0; i < nodeList.getLength(); i++) {\n-            Node subNode = nodeList.item(i);\n-            switch (subNode.getNodeName()) {\n-                case \"from\":\n-                    from = subNode.getTextContent();\n-                    break;\n-                case \"to\":\n-                    to = subNode.getTextContent();\n-                    break;\n+    public static List<Assignment> readAssignments(Node subNode) {\n+        List<Assignment> assignments = new LinkedList<>();\n+        while (subNode != null) {\n+            assignments.add(DataAssociationFactory.readAssignment(subNode));\n+            subNode = subNode.getNextSibling();\n+        }\n+        return assignments;\n+    }\n+\n+    public static Assignment readAssignment(Node xmlNode) {\n+        Node from = xmlNode.getFirstChild();\n+        if (from == null) {\n+            throw new IllegalArgumentException(\"missing from for assignment\");\n+        }\n+        Node to = from.getNextSibling();\n+        if (to == null) {\n+            throw new IllegalArgumentException(\"missing to for assigment\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "494be54a81353d4f74a1c7e689a3582f75f7eee7"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTI5MTY4OnYy", "diffSide": "RIGHT", "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/dialect/mvel/MVELAssigmentBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNzozMzoxNVrOH4vQzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNzozMzoxNVrOH4vQzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI1NjY1Mw==", "bodyText": "typo (missing n)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class MVELAssigmentBuilder implements AssignmentBuilder {\n          \n          \n            \n            public class MVELAssignmentBuilder implements AssignmentBuilder {", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r529256653", "createdAt": "2020-11-24T07:33:15Z", "author": {"login": "afalhambra"}, "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/dialect/mvel/MVELAssigmentBuilder.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.builder.dialect.mvel;\n+\n+import java.util.function.BiFunction;\n+\n+import org.drools.compiler.rule.builder.PackageBuildContext;\n+import org.jbpm.process.builder.AssignmentBuilder;\n+import org.jbpm.process.instance.impl.AssignmentProducer;\n+import org.jbpm.workflow.core.node.Assignment;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+\n+public class MVELAssigmentBuilder implements AssignmentBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "494be54a81353d4f74a1c7e689a3582f75f7eee7"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTMzNjQ0OnYy", "diffSide": "RIGHT", "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/dialect/mvel/MVELAssignmentAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNzo0NzoxMVrOH4vrrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDo1MTo0MFrOH4647g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI2MzUzMw==", "bodyText": "Even though, throws Exception is declared in the AssignmentAction interface, this method doesn't throw any checked exception, thus it's not really needed, but up to you.", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r529263533", "createdAt": "2020-11-24T07:47:11Z", "author": {"login": "afalhambra"}, "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/dialect/mvel/MVELAssignmentAction.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.builder.dialect.mvel;\n+\n+import java.util.function.BiFunction;\n+import java.util.regex.Matcher;\n+\n+import org.drools.mvel.MVELSafeHelper;\n+import org.jbpm.process.instance.impl.AssignmentAction;\n+import org.jbpm.process.instance.impl.AssignmentProducer;\n+import org.jbpm.util.PatternConstants;\n+import org.jbpm.workflow.core.node.Assignment;\n+import org.jbpm.workflow.instance.impl.NodeInstanceResolverFactory;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class MVELAssignmentAction implements AssignmentAction {\n+\n+    private String to;\n+    private String from;\n+    private String srcExpr;\n+    private String targetExpr;\n+    private AssignmentProducer producer;\n+    private BiFunction<ProcessContext, NodeInstance, Object> src;\n+    private BiFunction<ProcessContext, NodeInstance, Object> target;\n+\n+    private static final String THIS = \"this\";\n+\n+    public MVELAssignmentAction(Assignment assignment, String sourceExpr, String targetExpr,\n+                                BiFunction<ProcessContext, NodeInstance, Object> source,\n+                                BiFunction<ProcessContext, NodeInstance, Object> target, AssignmentProducer producer) {\n+\n+        Matcher fromMatcher = PatternConstants.PARAMETER_MATCHER.matcher(assignment.getFrom());\n+        Matcher toMatcher = PatternConstants.PARAMETER_MATCHER.matcher(assignment.getTo());\n+\n+        this.from = fromMatcher.find() ? fromMatcher.group(1) : assignment.getFrom();\n+        this.to = toMatcher.find() ? toMatcher.group(1) : assignment.getTo();\n+        this.src = source;\n+        this.target = target;\n+        this.srcExpr = sourceExpr;\n+        this.targetExpr = targetExpr;\n+        this.producer = producer;\n+    }\n+\n+    @Override\n+    public void execute(NodeInstance nodeInstance, ProcessContext context) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "494be54a81353d4f74a1c7e689a3582f75f7eee7"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ0NzE1MA==", "bodyText": "good catch", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r529447150", "createdAt": "2020-11-24T10:51:40Z", "author": {"login": "fjtirado"}, "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/dialect/mvel/MVELAssignmentAction.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.builder.dialect.mvel;\n+\n+import java.util.function.BiFunction;\n+import java.util.regex.Matcher;\n+\n+import org.drools.mvel.MVELSafeHelper;\n+import org.jbpm.process.instance.impl.AssignmentAction;\n+import org.jbpm.process.instance.impl.AssignmentProducer;\n+import org.jbpm.util.PatternConstants;\n+import org.jbpm.workflow.core.node.Assignment;\n+import org.jbpm.workflow.instance.impl.NodeInstanceResolverFactory;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class MVELAssignmentAction implements AssignmentAction {\n+\n+    private String to;\n+    private String from;\n+    private String srcExpr;\n+    private String targetExpr;\n+    private AssignmentProducer producer;\n+    private BiFunction<ProcessContext, NodeInstance, Object> src;\n+    private BiFunction<ProcessContext, NodeInstance, Object> target;\n+\n+    private static final String THIS = \"this\";\n+\n+    public MVELAssignmentAction(Assignment assignment, String sourceExpr, String targetExpr,\n+                                BiFunction<ProcessContext, NodeInstance, Object> source,\n+                                BiFunction<ProcessContext, NodeInstance, Object> target, AssignmentProducer producer) {\n+\n+        Matcher fromMatcher = PatternConstants.PARAMETER_MATCHER.matcher(assignment.getFrom());\n+        Matcher toMatcher = PatternConstants.PARAMETER_MATCHER.matcher(assignment.getTo());\n+\n+        this.from = fromMatcher.find() ? fromMatcher.group(1) : assignment.getFrom();\n+        this.to = toMatcher.find() ? toMatcher.group(1) : assignment.getTo();\n+        this.src = source;\n+        this.target = target;\n+        this.srcExpr = sourceExpr;\n+        this.targetExpr = targetExpr;\n+        this.producer = producer;\n+    }\n+\n+    @Override\n+    public void execute(NodeInstance nodeInstance, ProcessContext context) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI2MzUzMw=="}, "originalCommit": {"oid": "494be54a81353d4f74a1c7e689a3582f75f7eee7"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDA0MjA0OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/DataTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTo1NjowMVrOH42wRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTowODoyNFrOH470Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM3OTM5OQ==", "bodyText": "I think it would be good to add a test to prove it works fine when using Maps as Anton's comment in the jira ticket. So we are covering all possible scenarios, wdyt?", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r529379399", "createdAt": "2020-11-24T09:56:01Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/DataTest.java", "diffHunk": "@@ -495,7 +615,109 @@ public void executeWorkItem(WorkItem workItem,\n                 });\n         ProcessInstance processInstance = ksession\n                 .startProcess(\"process\");\n-        \n+\n+    }\n+\n+    @Test\n+    public void testDataOutputAssociationsWithPojo() throws Exception {\n+        KieBase kbase = createKnowledgeBaseWithoutDumper(\"BPMN2-DataOutputAssociations-Pojo.bpmn2\");\n+        ksession = createKnowledgeSession(kbase);\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\",\n+                new WorkItemHandler() {\n+\n+                    public void abortWorkItem(WorkItem manager,\n+                                              WorkItemManager mgr) {\n+\n+                    }\n+\n+                    public void executeWorkItem(WorkItem workItem,\n+                                                WorkItemManager mgr) {\n+                        WorkflowProcessInstance processInstance = (WorkflowProcessInstance) ksession.getProcessInstance(\n+                                workItem.getProcessInstanceId());\n+                        Person person = (Person) processInstance.getVariable(\"instanceMetadata\");\n+                        assertNotNull(person);\n+                        assertEquals(\"Napoleon\", person.getName());\n+                        assertEquals(\"Paris\", person.getAddress().getCity());\n+                        assertEquals(\"France\", person.getAddress().getCountry());\n+                        mgr.completeWorkItem(workItem.getId(), Collections.singletonMap(\"output\", new Person(\n+                                \"Javierito\", new Address(\"Sevilla\", \"Spain\"))));\n+                        assertEquals(\"Napoleon\", person.getName());\n+                        assertEquals(\"Sevilla\", person.getAddress().getCity());\n+                        assertEquals(\"Spain\", person.getAddress().getCountry());\n+                    }\n+\n+                });\n+        ksession.startProcess(\"process\", Collections.singletonMap(\"instanceMetadata\", new Person(\"Napoleon\",\n+                        new Address(\"Paris\", \"France\"))));\n+    }\n+\n+    @Test\n+    public void testDataOutputAssociationsWithPojoEmptyFrom() throws Exception {\n+        KieBase kbase = createKnowledgeBaseWithoutDumper(\"BPMN2-DataOutputAssociations-Pojo-EmptyFrom.bpmn2\");\n+        ksession = createKnowledgeSession(kbase);\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\",\n+                new WorkItemHandler() {\n+\n+                    public void abortWorkItem(WorkItem manager,\n+                                              WorkItemManager mgr) {\n+\n+                    }\n+\n+                    public void executeWorkItem(WorkItem workItem,\n+                                                WorkItemManager mgr) {\n+                        WorkflowProcessInstance processInstance = (WorkflowProcessInstance) ksession.getProcessInstance(\n+                                workItem.getProcessInstanceId());\n+                        Person person = (Person) processInstance.getVariable(\"instanceMetadata\");\n+                        assertNotNull(person);\n+                        assertEquals(\"Napoleon\", person.getName());\n+                        assertEquals(\"Paris\", person.getAddress().getCity());\n+                        assertEquals(\"France\", person.getAddress().getCountry());\n+                        mgr.completeWorkItem(workItem.getId(), Collections.singletonMap(\"instanceAddress\", new Address(\n+                                \"Sevilla\", \"Spain\")));\n+                        assertEquals(\"Napoleon\", person.getName());\n+                        assertEquals(\"Sevilla\", person.getAddress().getCity());\n+                        assertEquals(\"Spain\", person.getAddress().getCountry());\n+                    }\n+\n+                });\n+        ksession.startProcess(\"process\", Collections.singletonMap(\"instanceMetadata\", new Person(\"Napoleon\",\n+                new Address(\"Paris\", \"France\"))));\n+    }\n+\n+    @Test\n+    public void testDataOutputAssociationsWithPojoList() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "494be54a81353d4f74a1c7e689a3582f75f7eee7"}, "originalPosition": 554}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ2MjMxOA==", "bodyText": "Done", "url": "https://github.com/kiegroup/jbpm/pull/1806#discussion_r529462318", "createdAt": "2020-11-24T11:08:24Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/DataTest.java", "diffHunk": "@@ -495,7 +615,109 @@ public void executeWorkItem(WorkItem workItem,\n                 });\n         ProcessInstance processInstance = ksession\n                 .startProcess(\"process\");\n-        \n+\n+    }\n+\n+    @Test\n+    public void testDataOutputAssociationsWithPojo() throws Exception {\n+        KieBase kbase = createKnowledgeBaseWithoutDumper(\"BPMN2-DataOutputAssociations-Pojo.bpmn2\");\n+        ksession = createKnowledgeSession(kbase);\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\",\n+                new WorkItemHandler() {\n+\n+                    public void abortWorkItem(WorkItem manager,\n+                                              WorkItemManager mgr) {\n+\n+                    }\n+\n+                    public void executeWorkItem(WorkItem workItem,\n+                                                WorkItemManager mgr) {\n+                        WorkflowProcessInstance processInstance = (WorkflowProcessInstance) ksession.getProcessInstance(\n+                                workItem.getProcessInstanceId());\n+                        Person person = (Person) processInstance.getVariable(\"instanceMetadata\");\n+                        assertNotNull(person);\n+                        assertEquals(\"Napoleon\", person.getName());\n+                        assertEquals(\"Paris\", person.getAddress().getCity());\n+                        assertEquals(\"France\", person.getAddress().getCountry());\n+                        mgr.completeWorkItem(workItem.getId(), Collections.singletonMap(\"output\", new Person(\n+                                \"Javierito\", new Address(\"Sevilla\", \"Spain\"))));\n+                        assertEquals(\"Napoleon\", person.getName());\n+                        assertEquals(\"Sevilla\", person.getAddress().getCity());\n+                        assertEquals(\"Spain\", person.getAddress().getCountry());\n+                    }\n+\n+                });\n+        ksession.startProcess(\"process\", Collections.singletonMap(\"instanceMetadata\", new Person(\"Napoleon\",\n+                        new Address(\"Paris\", \"France\"))));\n+    }\n+\n+    @Test\n+    public void testDataOutputAssociationsWithPojoEmptyFrom() throws Exception {\n+        KieBase kbase = createKnowledgeBaseWithoutDumper(\"BPMN2-DataOutputAssociations-Pojo-EmptyFrom.bpmn2\");\n+        ksession = createKnowledgeSession(kbase);\n+        ksession.getWorkItemManager().registerWorkItemHandler(\"Human Task\",\n+                new WorkItemHandler() {\n+\n+                    public void abortWorkItem(WorkItem manager,\n+                                              WorkItemManager mgr) {\n+\n+                    }\n+\n+                    public void executeWorkItem(WorkItem workItem,\n+                                                WorkItemManager mgr) {\n+                        WorkflowProcessInstance processInstance = (WorkflowProcessInstance) ksession.getProcessInstance(\n+                                workItem.getProcessInstanceId());\n+                        Person person = (Person) processInstance.getVariable(\"instanceMetadata\");\n+                        assertNotNull(person);\n+                        assertEquals(\"Napoleon\", person.getName());\n+                        assertEquals(\"Paris\", person.getAddress().getCity());\n+                        assertEquals(\"France\", person.getAddress().getCountry());\n+                        mgr.completeWorkItem(workItem.getId(), Collections.singletonMap(\"instanceAddress\", new Address(\n+                                \"Sevilla\", \"Spain\")));\n+                        assertEquals(\"Napoleon\", person.getName());\n+                        assertEquals(\"Sevilla\", person.getAddress().getCity());\n+                        assertEquals(\"Spain\", person.getAddress().getCountry());\n+                    }\n+\n+                });\n+        ksession.startProcess(\"process\", Collections.singletonMap(\"instanceMetadata\", new Person(\"Napoleon\",\n+                new Address(\"Paris\", \"France\"))));\n+    }\n+\n+    @Test\n+    public void testDataOutputAssociationsWithPojoList() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM3OTM5OQ=="}, "originalCommit": {"oid": "494be54a81353d4f74a1c7e689a3582f75f7eee7"}, "originalPosition": 554}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1638, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}