{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NDQ4NjI5", "number": 1603, "title": "[RHPAM-2774] AchievedAtDate for milestone is not preserved when case is reopen", "bodyText": "modify query for milestones as a plain value object", "createdAt": "2020-03-09T08:33:47Z", "url": "https://github.com/kiegroup/jbpm/pull/1603", "merged": true, "mergeCommit": {"oid": "1f9770dfcaac0a4448e11ae98d9fc9ac8c1958cb"}, "closed": true, "closedAt": "2020-03-19T09:08:24Z", "author": {"login": "elguardian"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcL8YXZAFqTM3MTA5NDMzOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOPoFjgBqjMxMzM2NjA4ODQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMDk0MzM5", "url": "https://github.com/kiegroup/jbpm/pull/1603#pullrequestreview-371094339", "createdAt": "2020-03-09T11:39:43Z", "commit": {"oid": "ab35c2b1f9ae9bdde151d414c5017aa31b9febe4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMTozOTo0M1rOFzjvIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMTozOTo0M1rOFzjvIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYwNzIwMw==", "bodyText": "The map contains lists with one element, so ordering is applying to that list and therefore not working.\nPerhaps you can order after generating the list of CaseMilestoneInstance.\nmilestones.sort(Comparator.comparing(CaseMilestoneInstance::getAchievedAt));", "url": "https://github.com/kiegroup/jbpm/pull/1603#discussion_r389607203", "createdAt": "2020-03-09T11:39:43Z", "author": {"login": "gmunozfe"}, "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/CaseRuntimeDataServiceImpl.java", "diffHunk": "@@ -340,43 +340,36 @@ public CaseDefinition getCase(String deploymentId, String caseDefinitionId) {\n \n     @Override\n     public Collection<CaseMilestoneInstance> getCaseInstanceMilestones(String caseId, boolean achievedOnly, QueryContext queryContext) {\n-        ProcessInstanceDesc pi = runtimeDataService.getProcessInstanceByCorrelationKey(correlationKeyFactory.newCorrelationKey(caseId));        \n+        ProcessInstanceDesc pi = runtimeDataService.getProcessInstanceByCorrelationKey(correlationKeyFactory.newCorrelationKey(caseId));\n         if (pi == null || !pi.getState().equals(ProcessInstance.STATE_ACTIVE)) {\n             throw new CaseNotFoundException(\"No case instance found with id \" + caseId + \" or it's not active anymore\");\n         }\n         CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(caseId);\n-        \n-        Collection<org.jbpm.services.api.model.NodeInstanceDesc> nodes = runtimeDataService.getNodeInstancesByCorrelationKeyNodeType(correlationKey, \n-                                                                                                Arrays.asList(ProcessInstance.STATE_ACTIVE), \n-                                                                                                Arrays.asList(\"MilestoneNode\"), \n-                                                                                                queryContext);\n-        \n-        Collection<Long> completedNodes = nodes.stream().filter(n -> ((NodeInstanceDesc)n).getType() == 1).map(n -> n.getId()).collect(toList());\n-        Predicate<org.jbpm.services.api.model.NodeInstanceDesc> filterNodes = null;\n-        if (achievedOnly) {            \n-            filterNodes = n -> ((NodeInstanceDesc)n).getType() == 1;             \n-        } else {\n-            filterNodes = n -> ((NodeInstanceDesc)n).getType() == 0;\n-        }\n-        List<String> foundMilestones = new ArrayList<>();\n-        \n-        List<CaseMilestoneInstance> milestones = nodes.stream()\n-        .filter(filterNodes)\n-        .map(n -> {\n-            foundMilestones.add(n.getName());\n-            return new CaseMilestoneInstanceImpl(String.valueOf(n.getId()), n.getName(), completedNodes.contains(n.getId()), n.getDataTimeStamp());        \n-        })\n-        .collect(toList());\n-        \n+\n+        Collection<org.jbpm.services.api.model.NodeInstanceDesc> nodes = runtimeDataService.getNodeInstancesByCorrelationKeyNodeType(correlationKey,\n+                                                                                                                                     Arrays.asList(ProcessInstance.STATE_ACTIVE, ProcessInstance.STATE_ABORTED),\n+                                                                                                                                     Arrays.asList(\"MilestoneNode\"),\n+                                                                                                                                     queryContext);\n+\n+        // achieved milestones\n+        Map<String, List<CaseMilestoneInstance>> milestonesGroup = nodes.stream()\n+                                                                        .map(n -> (NodeInstanceDesc) n)\n+                                                                        .filter(n -> n.getType() == 1)\n+                                                                        .map(n -> new CaseMilestoneInstanceImpl(String.valueOf(n.getId()), n.getName(), true, n.getDataTimeStamp()))\n+                                                                        .collect(Collectors.groupingBy(CaseMilestoneInstance::getName));\n+\n+        List<CaseMilestoneInstance> milestones = milestonesGroup.values().stream().map(e -> e.stream().min((o1, o2) -> o1.getAchievedAt().compareTo(o2.getAchievedAt())).get()).collect(toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab35c2b1f9ae9bdde151d414c5017aa31b9febe4"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab35c2b1f9ae9bdde151d414c5017aa31b9febe4", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/ab35c2b1f9ae9bdde151d414c5017aa31b9febe4", "committedDate": "2020-03-09T08:32:40Z", "message": "[RHPAM-2774] chievedAtDate for milestone is not preserved when case is reopen\n\nmodify query for milestones as a plain value object"}, "afterCommit": {"oid": "5503483e27a310e097d8211b1ec54b9d4b3d61b1", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/5503483e27a310e097d8211b1ec54b9d4b3d61b1", "committedDate": "2020-03-09T13:29:15Z", "message": "[RHPAM-2774] chievedAtDate for milestone is not preserved when case is reopen\n\nmodify query for milestones as a plain value object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2984b6242c2f740546acede643fe6de892d30d44", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/2984b6242c2f740546acede643fe6de892d30d44", "committedDate": "2020-03-10T11:03:55Z", "message": "[RHPAM-2774] fix"}, "afterCommit": {"oid": "91c7d043d1320f3d92e5273d175329f3237fac3d", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/91c7d043d1320f3d92e5273d175329f3237fac3d", "committedDate": "2020-03-11T15:57:41Z", "message": "[RHPAM-2774] AchievedAtDate for milestone is not preserved when case is reopen\n\nmodify query for milestones as a plain value object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91c7d043d1320f3d92e5273d175329f3237fac3d", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/91c7d043d1320f3d92e5273d175329f3237fac3d", "committedDate": "2020-03-11T15:57:41Z", "message": "[RHPAM-2774] AchievedAtDate for milestone is not preserved when case is reopen\n\nmodify query for milestones as a plain value object"}, "afterCommit": {"oid": "7ac30e55062b2b5f650c74368ed59bd4054f41dc", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/7ac30e55062b2b5f650c74368ed59bd4054f41dc", "committedDate": "2020-03-12T07:39:52Z", "message": "[RHPAM-2774] AchievedAtDate for milestone is not preserved when case is reopen\n\nmodify query for milestones as a plain value object"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNDI5NTk0", "url": "https://github.com/kiegroup/jbpm/pull/1603#pullrequestreview-373429594", "createdAt": "2020-03-12T10:19:08Z", "commit": {"oid": "7ac30e55062b2b5f650c74368ed59bd4054f41dc"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDoxOTowOFrOF1Yn7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDozMzoyNVrOF1ZGeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUyMjI4Nw==", "bodyText": "shouldn't it be \"cancel\"?", "url": "https://github.com/kiegroup/jbpm/pull/1603#discussion_r391522287", "createdAt": "2020-03-12T10:19:08Z", "author": {"login": "gmunozfe"}, "path": "jbpm-installer/src/test/resources/ddl60/postgresql/postgresql-jbpm-schema.sql", "diffHunk": "@@ -130,6 +130,7 @@\n         processInstanceId int8 not null,\n         type int4 not null,\n         workItemId int8,\n+        skipable boolean,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ac30e55062b2b5f650c74368ed59bd4054f41dc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUyMzYzMQ==", "bodyText": "do we need to update ddl60 schemas? my understanding is that this is used to test migration from 6.0 to 7.x", "url": "https://github.com/kiegroup/jbpm/pull/1603#discussion_r391523631", "createdAt": "2020-03-12T10:21:33Z", "author": {"login": "gmunozfe"}, "path": "jbpm-installer/src/test/resources/ddl60/db2/db2-jbpm-schema.sql", "diffHunk": "@@ -130,6 +130,7 @@\n         processInstanceId bigint not null,\n         type integer not null,\n         workItemId bigint,\n+        cancel smallint not null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ac30e55062b2b5f650c74368ed59bd4054f41dc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzMDEwNQ==", "bodyText": "if both are null, shouldn't it return 0?", "url": "https://github.com/kiegroup/jbpm/pull/1603#discussion_r391530105", "createdAt": "2020-03-12T10:33:25Z", "author": {"login": "gmunozfe"}, "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/CaseRuntimeDataServiceImpl.java", "diffHunk": "@@ -340,44 +340,47 @@ public CaseDefinition getCase(String deploymentId, String caseDefinitionId) {\n \n     @Override\n     public Collection<CaseMilestoneInstance> getCaseInstanceMilestones(String caseId, boolean achievedOnly, QueryContext queryContext) {\n-        ProcessInstanceDesc pi = runtimeDataService.getProcessInstanceByCorrelationKey(correlationKeyFactory.newCorrelationKey(caseId));        \n+        ProcessInstanceDesc pi = runtimeDataService.getProcessInstanceByCorrelationKey(correlationKeyFactory.newCorrelationKey(caseId));\n         if (pi == null || !pi.getState().equals(ProcessInstance.STATE_ACTIVE)) {\n             throw new CaseNotFoundException(\"No case instance found with id \" + caseId + \" or it's not active anymore\");\n         }\n         CorrelationKey correlationKey = correlationKeyFactory.newCorrelationKey(caseId);\n-        \n-        Collection<org.jbpm.services.api.model.NodeInstanceDesc> nodes = runtimeDataService.getNodeInstancesByCorrelationKeyNodeType(correlationKey, \n-                                                                                                Arrays.asList(ProcessInstance.STATE_ACTIVE), \n-                                                                                                Arrays.asList(\"MilestoneNode\"), \n-                                                                                                queryContext);\n-        \n-        Collection<Long> completedNodes = nodes.stream().filter(n -> ((NodeInstanceDesc)n).getType() == 1).map(n -> n.getId()).collect(toList());\n-        Predicate<org.jbpm.services.api.model.NodeInstanceDesc> filterNodes = null;\n-        if (achievedOnly) {            \n-            filterNodes = n -> ((NodeInstanceDesc)n).getType() == 1;             \n-        } else {\n-            filterNodes = n -> ((NodeInstanceDesc)n).getType() == 0;\n-        }\n-        List<String> foundMilestones = new ArrayList<>();\n-        \n-        List<CaseMilestoneInstance> milestones = nodes.stream()\n-        .filter(filterNodes)\n-        .map(n -> {\n-            foundMilestones.add(n.getName());\n-            return new CaseMilestoneInstanceImpl(String.valueOf(n.getId()), n.getName(), completedNodes.contains(n.getId()), n.getDataTimeStamp());        \n-        })\n-        .collect(toList());\n-        \n+\n+        Collection<org.jbpm.services.api.model.NodeInstanceDesc> nodes = runtimeDataService.getValidNodeInstancesByCorrelationKeyNodeType(correlationKey,\n+                                                                                                                                     Arrays.asList(ProcessInstance.STATE_ACTIVE, ProcessInstance.STATE_ABORTED),\n+                                                                                                                                     Arrays.asList(\"MilestoneNode\"),\n+                                                                                                                                     queryContext);\n+\n+        // achieved milestones\n+        Map<String, List<CaseMilestoneInstance>> milestonesGroup = nodes.stream()\n+                                                                        .map(n -> (NodeInstanceDesc) n)\n+                                                                        .filter(n -> n.getType() == 1)\n+                                                                        .map(n -> new CaseMilestoneInstanceImpl(String.valueOf(n.getId()), n.getName(), true, n.getDataTimeStamp()))\n+                                                                        .collect(Collectors.groupingBy(CaseMilestoneInstance::getName));\n+\n+        List<CaseMilestoneInstance> milestones = milestonesGroup.values().stream().map(e -> e.stream().min(this::compareMilestones).get()).collect(toList());\n+        List<String> foundMilestones = milestones.stream().map(e -> e.getName()).collect(toList());\n+\n         if (!achievedOnly) {\n             // add other milestones that are present in the definition\n             CaseDefinition caseDef = getCase(pi.getDeploymentId(), pi.getProcessId());\n             caseDef.getCaseMilestones().stream()\n-            .filter(cm -> !foundMilestones.contains(cm.getName()))\n-            .map(cm -> new CaseMilestoneInstanceImpl(cm.getId(), cm.getName(), false, null))\n-            .forEach(cmi -> milestones.add(cmi));\n+                   .filter(cm -> !foundMilestones.contains(cm.getName()))\n+                   .map(cm -> new CaseMilestoneInstanceImpl(cm.getId(), cm.getName(), false, null))\n+                   .forEach(cmi -> milestones.add(cmi));\n         }\n-        \n-        return applyPagination(milestones, queryContext);\n+\n+        List<CaseMilestoneInstance> sortedMilestones = milestones.stream().sorted(this::compareMilestones).collect(toList());\n+        return applyPagination(sortedMilestones, queryContext);\n+    }\n+\n+    private int compareMilestones(CaseMilestoneInstance o1, CaseMilestoneInstance o2) {\n+        if (o1.getAchievedAt() == null) {\n+            return -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ac30e55062b2b5f650c74368ed59bd4054f41dc"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ac30e55062b2b5f650c74368ed59bd4054f41dc", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/7ac30e55062b2b5f650c74368ed59bd4054f41dc", "committedDate": "2020-03-12T07:39:52Z", "message": "[RHPAM-2774] AchievedAtDate for milestone is not preserved when case is reopen\n\nmodify query for milestones as a plain value object"}, "afterCommit": {"oid": "6c384139deb628c178f8b051e4b474d920fb183c", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/6c384139deb628c178f8b051e4b474d920fb183c", "committedDate": "2020-03-16T08:48:45Z", "message": "[RHPAM-2774] AchievedAtDate for milestone is not preserved when case is reopen\n\nadded a new event log for node instance to be able to tell the different when\na node is left or aborted"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4798825109900bef994b10064863666a4dd9ae18", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/4798825109900bef994b10064863666a4dd9ae18", "committedDate": "2020-03-16T15:13:10Z", "message": "[RHPAM-2774] AchievedAtDate for milestone is not preserved when case is reopen\n\nadded a new event log for node instance to be able to tell the different when\na node is left or aborted"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c384139deb628c178f8b051e4b474d920fb183c", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/6c384139deb628c178f8b051e4b474d920fb183c", "committedDate": "2020-03-16T08:48:45Z", "message": "[RHPAM-2774] AchievedAtDate for milestone is not preserved when case is reopen\n\nadded a new event log for node instance to be able to tell the different when\na node is left or aborted"}, "afterCommit": {"oid": "4798825109900bef994b10064863666a4dd9ae18", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/4798825109900bef994b10064863666a4dd9ae18", "committedDate": "2020-03-16T15:13:10Z", "message": "[RHPAM-2774] AchievedAtDate for milestone is not preserved when case is reopen\n\nadded a new event log for node instance to be able to tell the different when\na node is left or aborted"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1049, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}