{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MTA2NTcz", "number": 1644, "title": "[BAPL-1526] added new function to get process by task attributes and variables", "bodyText": "", "createdAt": "2020-05-08T08:05:27Z", "url": "https://github.com/kiegroup/jbpm/pull/1644", "merged": true, "mergeCommit": {"oid": "663505d8ff05fbb196c5a2684624b081b5c306f8"}, "closed": true, "closedAt": "2020-05-18T06:01:08Z", "author": {"login": "elguardian"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgsivvAFqTQxMDEyNDQzMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABchN0M5ABqjMzMzY3MTQyMTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTI0NDMz", "url": "https://github.com/kiegroup/jbpm/pull/1644#pullrequestreview-410124433", "createdAt": "2020-05-12T14:51:47Z", "commit": {"oid": "b4d8f791f2373647e0a13d8545a2859dac528c42"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo1MTo0OFrOGUKj_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoxMTowOVrOGUax4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5Nzc1Nw==", "bodyText": "taskVariables may be null from the API call\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!taskVariables.isEmpty()) {\n          \n          \n            \n                    if (taskVariables!=null && !taskVariables.isEmpty()) {", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r423797757", "createdAt": "2020-05-12T14:51:48Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +56,148 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributes,\n+                                                           List<QueryParam> processVariables,\n+                                                           List<QueryParam> taskVariables,\n+                                                           List<String> owners,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n+        if (!taskVariables.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d8f791f2373647e0a13d8545a2859dac528c42"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5ODc1NA==", "bodyText": "Same here, check if taskVariables are not null to avoid NPE", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r423798754", "createdAt": "2020-05-12T14:53:00Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +56,148 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributes,\n+                                                           List<QueryParam> processVariables,\n+                                                           List<QueryParam> taskVariables,\n+                                                           List<String> owners,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n+        if (!taskVariables.isEmpty()) {\n+            List<String> conditions = new ArrayList<>();\n+            taskVariables.stream().forEach((expr) -> conditions.add(\"(name = :V_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"value\", \":V_VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            String where = String.join(\" OR \", conditions);\n+            derivedTables.append(\"INNER JOIN (\\n\" +\n+                                 \"SELECT taskId \\n\" +\n+                                 \"FROM TaskVariableImpl \\n\" +\n+                                 \"WHERE type = 0 AND (\" + where + \")\\n\" +\n+                                 \"GROUP BY taskId \\n\" +\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_TASKVARS \\n\" +\n+                                 \") TABLE_TASK_VAR ON TABLE_TASK_VAR.taskId = task.id  \\n\");\n+        }\n+\n+        if (!processVariables.isEmpty()) {\n             List<String> conditions = new ArrayList<>();\n-            variables.stream().forEach(expr -> conditions.add(\"(A1.variableId = :NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            processVariables.stream().forEach((expr) -> conditions.add(\"(A1.variableId = :P_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":P_VALUE_\" + expr.getColumn()) + \")\\n\"));\n             String where = String.join(\" OR \", conditions);\n             derivedTables.append(\"INNER JOIN (\" +\n                                  \"SELECT A1.processInstanceId \\n\" +\n                                  \"FROM VariableInstanceLog A1 \\n\" +\n                                  \"LEFT JOIN VariableInstanceLog A2 ON A1.processId = A2.processId AND A1.processInstanceId = A2.processInstanceId AND A1.variableInstanceId = A2.variableInstanceId AND A2.id > A1.id  \\n\" +\n                                  \"WHERE A2.id IS NULL AND (\" + where + \") \" +\n                                  \"GROUP BY A1.processInstanceId \" +\n-                                 \"HAVING COUNT(*) = :NUMBER_OF_VARS \" +\n-                                 \") TABLE_VAR ON TABLE_VAR.processInstanceId = pil.processInstanceId \\n\");\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_PROCVARS \" +\n+                                 \") TABLE_PROC_VAR ON TABLE_PROC_VAR.processInstanceId = pil.processInstanceId \\n\");\n         }\n \n-        StringBuilder globalWhere = new StringBuilder();\n-        attributes.stream().forEach(expr -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n+        if (!owners.isEmpty()) {\n+            derivedTables.append(\"INNER JOIN ( \\n\" +\n+                             \"           SELECT DISTINCT po.task_id \\n\" +\n+                             \"           FROM PeopleAssignments_PotOwners po \\n\" +\n+                             \"           WHERE po.entity_id IN (:owners) \\n\" +\n+                             \"           GROUP BY po.task_id \\n\" +\n+                             \"           HAVING COUNT(po.entity_id) = :num_owners \\n\" +\n+                                 \") pot ON pot.task_id = task.id \");\n+        }\n+\n+        attributes.stream().forEach((expr) -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n \n-        String procSQLString =\n-                \" SELECT DISTINCT pil.processInstanceId \" +\n-                               \" FROM ProcessInstanceLog pil \\n \" +\n-                               derivedTables +\n-                               \" WHERE pil.processType = :processType \" + globalWhere +\n-                               \" ORDER BY pil.processInstanceId ASC \";\n+        String procSQLString = mainSQLproducer.apply(derivedTables, globalWhere);\n \n         Query query = entityManager.createNativeQuery(procSQLString);\n-        variables.stream().forEach(var -> query.setParameter(\"NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n-        variables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"VALUE_\" + var.getColumn(), var.getObjectValue()));\n-        attributes.stream().filter(e -> e.getObjectValue() != null).forEach((entry) -> query.setParameter(\"ATTR_\" + entry.getColumn(), entry.getObjectValue()));\n+        taskVariables.stream().forEach(var -> query.setParameter(\"V_NAME_\" + var.getColumn(), var.getColumn()));\n+        taskVariables.stream().filter(e -> e.getObjectValue() != null).forEach((var) -> query.setParameter(\"V_VALUE_\" + var.getColumn(), var.getObjectValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d8f791f2373647e0a13d8545a2859dac528c42"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyMzAzOA==", "bodyText": "if attributes is null, there's a NPE at translate method loop", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r423823038", "createdAt": "2020-05-12T15:23:45Z", "author": {"login": "gmunozfe"}, "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/AdvanceCaseRuntimeDataServiceImpl.java", "diffHunk": "@@ -44,21 +44,29 @@ public AdvanceCaseRuntimeDataServiceImpl() {\n \n     @Override\n     public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryCaseByVariables(List<QueryParam> attributes,\n-                                                                                              List<QueryParam> variables,\n+                                                                                              List<QueryParam> caseVariables,\n                                                                                               QueryContext queryContext) {\n-        return queryProcessByVariables(translate(translateTable, attributes), variables, CASE_TYPE, CASE_FILE_PREFIX, queryContext);\n+        return queryProcessByVariables(translate(translateTable, attributes), caseVariables, CASE_TYPE, CASE_FILE_PREFIX, queryContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d8f791f2373647e0a13d8545a2859dac528c42"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyNjkzMg==", "bodyText": "Same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!processVariables.isEmpty()) {\n          \n          \n            \n                    if (processVariables!=null && !processVariables.isEmpty()) {", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r423826932", "createdAt": "2020-05-12T15:28:53Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +56,148 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributes,\n+                                                           List<QueryParam> processVariables,\n+                                                           List<QueryParam> taskVariables,\n+                                                           List<String> owners,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n+        if (!taskVariables.isEmpty()) {\n+            List<String> conditions = new ArrayList<>();\n+            taskVariables.stream().forEach((expr) -> conditions.add(\"(name = :V_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"value\", \":V_VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            String where = String.join(\" OR \", conditions);\n+            derivedTables.append(\"INNER JOIN (\\n\" +\n+                                 \"SELECT taskId \\n\" +\n+                                 \"FROM TaskVariableImpl \\n\" +\n+                                 \"WHERE type = 0 AND (\" + where + \")\\n\" +\n+                                 \"GROUP BY taskId \\n\" +\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_TASKVARS \\n\" +\n+                                 \") TABLE_TASK_VAR ON TABLE_TASK_VAR.taskId = task.id  \\n\");\n+        }\n+\n+        if (!processVariables.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d8f791f2373647e0a13d8545a2859dac528c42"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyNzU2Mg==", "bodyText": "Same here for processVariables, check if processVariables are not null to avoid NPE", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r423827562", "createdAt": "2020-05-12T15:29:42Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +56,148 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributes,\n+                                                           List<QueryParam> processVariables,\n+                                                           List<QueryParam> taskVariables,\n+                                                           List<String> owners,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n+        if (!taskVariables.isEmpty()) {\n+            List<String> conditions = new ArrayList<>();\n+            taskVariables.stream().forEach((expr) -> conditions.add(\"(name = :V_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"value\", \":V_VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            String where = String.join(\" OR \", conditions);\n+            derivedTables.append(\"INNER JOIN (\\n\" +\n+                                 \"SELECT taskId \\n\" +\n+                                 \"FROM TaskVariableImpl \\n\" +\n+                                 \"WHERE type = 0 AND (\" + where + \")\\n\" +\n+                                 \"GROUP BY taskId \\n\" +\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_TASKVARS \\n\" +\n+                                 \") TABLE_TASK_VAR ON TABLE_TASK_VAR.taskId = task.id  \\n\");\n+        }\n+\n+        if (!processVariables.isEmpty()) {\n             List<String> conditions = new ArrayList<>();\n-            variables.stream().forEach(expr -> conditions.add(\"(A1.variableId = :NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            processVariables.stream().forEach((expr) -> conditions.add(\"(A1.variableId = :P_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":P_VALUE_\" + expr.getColumn()) + \")\\n\"));\n             String where = String.join(\" OR \", conditions);\n             derivedTables.append(\"INNER JOIN (\" +\n                                  \"SELECT A1.processInstanceId \\n\" +\n                                  \"FROM VariableInstanceLog A1 \\n\" +\n                                  \"LEFT JOIN VariableInstanceLog A2 ON A1.processId = A2.processId AND A1.processInstanceId = A2.processInstanceId AND A1.variableInstanceId = A2.variableInstanceId AND A2.id > A1.id  \\n\" +\n                                  \"WHERE A2.id IS NULL AND (\" + where + \") \" +\n                                  \"GROUP BY A1.processInstanceId \" +\n-                                 \"HAVING COUNT(*) = :NUMBER_OF_VARS \" +\n-                                 \") TABLE_VAR ON TABLE_VAR.processInstanceId = pil.processInstanceId \\n\");\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_PROCVARS \" +\n+                                 \") TABLE_PROC_VAR ON TABLE_PROC_VAR.processInstanceId = pil.processInstanceId \\n\");\n         }\n \n-        StringBuilder globalWhere = new StringBuilder();\n-        attributes.stream().forEach(expr -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n+        if (!owners.isEmpty()) {\n+            derivedTables.append(\"INNER JOIN ( \\n\" +\n+                             \"           SELECT DISTINCT po.task_id \\n\" +\n+                             \"           FROM PeopleAssignments_PotOwners po \\n\" +\n+                             \"           WHERE po.entity_id IN (:owners) \\n\" +\n+                             \"           GROUP BY po.task_id \\n\" +\n+                             \"           HAVING COUNT(po.entity_id) = :num_owners \\n\" +\n+                                 \") pot ON pot.task_id = task.id \");\n+        }\n+\n+        attributes.stream().forEach((expr) -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n \n-        String procSQLString =\n-                \" SELECT DISTINCT pil.processInstanceId \" +\n-                               \" FROM ProcessInstanceLog pil \\n \" +\n-                               derivedTables +\n-                               \" WHERE pil.processType = :processType \" + globalWhere +\n-                               \" ORDER BY pil.processInstanceId ASC \";\n+        String procSQLString = mainSQLproducer.apply(derivedTables, globalWhere);\n \n         Query query = entityManager.createNativeQuery(procSQLString);\n-        variables.stream().forEach(var -> query.setParameter(\"NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n-        variables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"VALUE_\" + var.getColumn(), var.getObjectValue()));\n-        attributes.stream().filter(e -> e.getObjectValue() != null).forEach((entry) -> query.setParameter(\"ATTR_\" + entry.getColumn(), entry.getObjectValue()));\n+        taskVariables.stream().forEach(var -> query.setParameter(\"V_NAME_\" + var.getColumn(), var.getColumn()));\n+        taskVariables.stream().filter(e -> e.getObjectValue() != null).forEach((var) -> query.setParameter(\"V_VALUE_\" + var.getColumn(), var.getObjectValue()));\n \n-        if (!variables.isEmpty()) {\n-            query.setParameter(\"NUMBER_OF_VARS\", variables.size());\n+        if (!taskVariables.isEmpty()) {\n+            query.setParameter(\"NUMBER_OF_TASKVARS\", taskVariables.size());\n         }\n+\n+        processVariables.stream().forEach(var -> query.setParameter(\"P_NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n+        processVariables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"P_VALUE_\" + var.getColumn(), var.getObjectValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d8f791f2373647e0a13d8545a2859dac528c42"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg0MTU4Mg==", "bodyText": "Same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!owners.isEmpty()) {\n          \n          \n            \n                   if (owners!=null && !owners.isEmpty()) {", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r423841582", "createdAt": "2020-05-12T15:48:15Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +56,148 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributes,\n+                                                           List<QueryParam> processVariables,\n+                                                           List<QueryParam> taskVariables,\n+                                                           List<String> owners,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n+        if (!taskVariables.isEmpty()) {\n+            List<String> conditions = new ArrayList<>();\n+            taskVariables.stream().forEach((expr) -> conditions.add(\"(name = :V_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"value\", \":V_VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            String where = String.join(\" OR \", conditions);\n+            derivedTables.append(\"INNER JOIN (\\n\" +\n+                                 \"SELECT taskId \\n\" +\n+                                 \"FROM TaskVariableImpl \\n\" +\n+                                 \"WHERE type = 0 AND (\" + where + \")\\n\" +\n+                                 \"GROUP BY taskId \\n\" +\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_TASKVARS \\n\" +\n+                                 \") TABLE_TASK_VAR ON TABLE_TASK_VAR.taskId = task.id  \\n\");\n+        }\n+\n+        if (!processVariables.isEmpty()) {\n             List<String> conditions = new ArrayList<>();\n-            variables.stream().forEach(expr -> conditions.add(\"(A1.variableId = :NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            processVariables.stream().forEach((expr) -> conditions.add(\"(A1.variableId = :P_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":P_VALUE_\" + expr.getColumn()) + \")\\n\"));\n             String where = String.join(\" OR \", conditions);\n             derivedTables.append(\"INNER JOIN (\" +\n                                  \"SELECT A1.processInstanceId \\n\" +\n                                  \"FROM VariableInstanceLog A1 \\n\" +\n                                  \"LEFT JOIN VariableInstanceLog A2 ON A1.processId = A2.processId AND A1.processInstanceId = A2.processInstanceId AND A1.variableInstanceId = A2.variableInstanceId AND A2.id > A1.id  \\n\" +\n                                  \"WHERE A2.id IS NULL AND (\" + where + \") \" +\n                                  \"GROUP BY A1.processInstanceId \" +\n-                                 \"HAVING COUNT(*) = :NUMBER_OF_VARS \" +\n-                                 \") TABLE_VAR ON TABLE_VAR.processInstanceId = pil.processInstanceId \\n\");\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_PROCVARS \" +\n+                                 \") TABLE_PROC_VAR ON TABLE_PROC_VAR.processInstanceId = pil.processInstanceId \\n\");\n         }\n \n-        StringBuilder globalWhere = new StringBuilder();\n-        attributes.stream().forEach(expr -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n+        if (!owners.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d8f791f2373647e0a13d8545a2859dac528c42"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg0MzE3OA==", "bodyText": "Same here, check if owners are not null to avoid NPE\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!owners.isEmpty()) {\n          \n          \n            \n                   if (owners!=null && !owners.isEmpty()) {", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r423843178", "createdAt": "2020-05-12T15:50:28Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +56,148 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributes,\n+                                                           List<QueryParam> processVariables,\n+                                                           List<QueryParam> taskVariables,\n+                                                           List<String> owners,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n+        if (!taskVariables.isEmpty()) {\n+            List<String> conditions = new ArrayList<>();\n+            taskVariables.stream().forEach((expr) -> conditions.add(\"(name = :V_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"value\", \":V_VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            String where = String.join(\" OR \", conditions);\n+            derivedTables.append(\"INNER JOIN (\\n\" +\n+                                 \"SELECT taskId \\n\" +\n+                                 \"FROM TaskVariableImpl \\n\" +\n+                                 \"WHERE type = 0 AND (\" + where + \")\\n\" +\n+                                 \"GROUP BY taskId \\n\" +\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_TASKVARS \\n\" +\n+                                 \") TABLE_TASK_VAR ON TABLE_TASK_VAR.taskId = task.id  \\n\");\n+        }\n+\n+        if (!processVariables.isEmpty()) {\n             List<String> conditions = new ArrayList<>();\n-            variables.stream().forEach(expr -> conditions.add(\"(A1.variableId = :NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            processVariables.stream().forEach((expr) -> conditions.add(\"(A1.variableId = :P_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":P_VALUE_\" + expr.getColumn()) + \")\\n\"));\n             String where = String.join(\" OR \", conditions);\n             derivedTables.append(\"INNER JOIN (\" +\n                                  \"SELECT A1.processInstanceId \\n\" +\n                                  \"FROM VariableInstanceLog A1 \\n\" +\n                                  \"LEFT JOIN VariableInstanceLog A2 ON A1.processId = A2.processId AND A1.processInstanceId = A2.processInstanceId AND A1.variableInstanceId = A2.variableInstanceId AND A2.id > A1.id  \\n\" +\n                                  \"WHERE A2.id IS NULL AND (\" + where + \") \" +\n                                  \"GROUP BY A1.processInstanceId \" +\n-                                 \"HAVING COUNT(*) = :NUMBER_OF_VARS \" +\n-                                 \") TABLE_VAR ON TABLE_VAR.processInstanceId = pil.processInstanceId \\n\");\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_PROCVARS \" +\n+                                 \") TABLE_PROC_VAR ON TABLE_PROC_VAR.processInstanceId = pil.processInstanceId \\n\");\n         }\n \n-        StringBuilder globalWhere = new StringBuilder();\n-        attributes.stream().forEach(expr -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n+        if (!owners.isEmpty()) {\n+            derivedTables.append(\"INNER JOIN ( \\n\" +\n+                             \"           SELECT DISTINCT po.task_id \\n\" +\n+                             \"           FROM PeopleAssignments_PotOwners po \\n\" +\n+                             \"           WHERE po.entity_id IN (:owners) \\n\" +\n+                             \"           GROUP BY po.task_id \\n\" +\n+                             \"           HAVING COUNT(po.entity_id) = :num_owners \\n\" +\n+                                 \") pot ON pot.task_id = task.id \");\n+        }\n+\n+        attributes.stream().forEach((expr) -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n \n-        String procSQLString =\n-                \" SELECT DISTINCT pil.processInstanceId \" +\n-                               \" FROM ProcessInstanceLog pil \\n \" +\n-                               derivedTables +\n-                               \" WHERE pil.processType = :processType \" + globalWhere +\n-                               \" ORDER BY pil.processInstanceId ASC \";\n+        String procSQLString = mainSQLproducer.apply(derivedTables, globalWhere);\n \n         Query query = entityManager.createNativeQuery(procSQLString);\n-        variables.stream().forEach(var -> query.setParameter(\"NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n-        variables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"VALUE_\" + var.getColumn(), var.getObjectValue()));\n-        attributes.stream().filter(e -> e.getObjectValue() != null).forEach((entry) -> query.setParameter(\"ATTR_\" + entry.getColumn(), entry.getObjectValue()));\n+        taskVariables.stream().forEach(var -> query.setParameter(\"V_NAME_\" + var.getColumn(), var.getColumn()));\n+        taskVariables.stream().filter(e -> e.getObjectValue() != null).forEach((var) -> query.setParameter(\"V_VALUE_\" + var.getColumn(), var.getObjectValue()));\n \n-        if (!variables.isEmpty()) {\n-            query.setParameter(\"NUMBER_OF_VARS\", variables.size());\n+        if (!taskVariables.isEmpty()) {\n+            query.setParameter(\"NUMBER_OF_TASKVARS\", taskVariables.size());\n         }\n+\n+        processVariables.stream().forEach(var -> query.setParameter(\"P_NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n+        processVariables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"P_VALUE_\" + var.getColumn(), var.getObjectValue()));\n+\n+        if (!processVariables.isEmpty()) {\n+            query.setParameter(\"NUMBER_OF_PROCVARS\", processVariables.size());\n+        }\n+\n+        if (!owners.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d8f791f2373647e0a13d8545a2859dac528c42"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzNzExNA==", "bodyText": "Shouldn't close invocation be included into a finally block to get assured that entityManager is always closed (even with an unchecked exception is thrown -e.g. UnsupportedOperationException)?", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r423937114", "createdAt": "2020-05-12T18:14:27Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +56,148 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributes,\n+                                                           List<QueryParam> processVariables,\n+                                                           List<QueryParam> taskVariables,\n+                                                           List<String> owners,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n+        if (!taskVariables.isEmpty()) {\n+            List<String> conditions = new ArrayList<>();\n+            taskVariables.stream().forEach((expr) -> conditions.add(\"(name = :V_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"value\", \":V_VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            String where = String.join(\" OR \", conditions);\n+            derivedTables.append(\"INNER JOIN (\\n\" +\n+                                 \"SELECT taskId \\n\" +\n+                                 \"FROM TaskVariableImpl \\n\" +\n+                                 \"WHERE type = 0 AND (\" + where + \")\\n\" +\n+                                 \"GROUP BY taskId \\n\" +\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_TASKVARS \\n\" +\n+                                 \") TABLE_TASK_VAR ON TABLE_TASK_VAR.taskId = task.id  \\n\");\n+        }\n+\n+        if (!processVariables.isEmpty()) {\n             List<String> conditions = new ArrayList<>();\n-            variables.stream().forEach(expr -> conditions.add(\"(A1.variableId = :NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            processVariables.stream().forEach((expr) -> conditions.add(\"(A1.variableId = :P_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":P_VALUE_\" + expr.getColumn()) + \")\\n\"));\n             String where = String.join(\" OR \", conditions);\n             derivedTables.append(\"INNER JOIN (\" +\n                                  \"SELECT A1.processInstanceId \\n\" +\n                                  \"FROM VariableInstanceLog A1 \\n\" +\n                                  \"LEFT JOIN VariableInstanceLog A2 ON A1.processId = A2.processId AND A1.processInstanceId = A2.processInstanceId AND A1.variableInstanceId = A2.variableInstanceId AND A2.id > A1.id  \\n\" +\n                                  \"WHERE A2.id IS NULL AND (\" + where + \") \" +\n                                  \"GROUP BY A1.processInstanceId \" +\n-                                 \"HAVING COUNT(*) = :NUMBER_OF_VARS \" +\n-                                 \") TABLE_VAR ON TABLE_VAR.processInstanceId = pil.processInstanceId \\n\");\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_PROCVARS \" +\n+                                 \") TABLE_PROC_VAR ON TABLE_PROC_VAR.processInstanceId = pil.processInstanceId \\n\");\n         }\n \n-        StringBuilder globalWhere = new StringBuilder();\n-        attributes.stream().forEach(expr -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n+        if (!owners.isEmpty()) {\n+            derivedTables.append(\"INNER JOIN ( \\n\" +\n+                             \"           SELECT DISTINCT po.task_id \\n\" +\n+                             \"           FROM PeopleAssignments_PotOwners po \\n\" +\n+                             \"           WHERE po.entity_id IN (:owners) \\n\" +\n+                             \"           GROUP BY po.task_id \\n\" +\n+                             \"           HAVING COUNT(po.entity_id) = :num_owners \\n\" +\n+                                 \") pot ON pot.task_id = task.id \");\n+        }\n+\n+        attributes.stream().forEach((expr) -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n \n-        String procSQLString =\n-                \" SELECT DISTINCT pil.processInstanceId \" +\n-                               \" FROM ProcessInstanceLog pil \\n \" +\n-                               derivedTables +\n-                               \" WHERE pil.processType = :processType \" + globalWhere +\n-                               \" ORDER BY pil.processInstanceId ASC \";\n+        String procSQLString = mainSQLproducer.apply(derivedTables, globalWhere);\n \n         Query query = entityManager.createNativeQuery(procSQLString);\n-        variables.stream().forEach(var -> query.setParameter(\"NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n-        variables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"VALUE_\" + var.getColumn(), var.getObjectValue()));\n-        attributes.stream().filter(e -> e.getObjectValue() != null).forEach((entry) -> query.setParameter(\"ATTR_\" + entry.getColumn(), entry.getObjectValue()));\n+        taskVariables.stream().forEach(var -> query.setParameter(\"V_NAME_\" + var.getColumn(), var.getColumn()));\n+        taskVariables.stream().filter(e -> e.getObjectValue() != null).forEach((var) -> query.setParameter(\"V_VALUE_\" + var.getColumn(), var.getObjectValue()));\n \n-        if (!variables.isEmpty()) {\n-            query.setParameter(\"NUMBER_OF_VARS\", variables.size());\n+        if (!taskVariables.isEmpty()) {\n+            query.setParameter(\"NUMBER_OF_TASKVARS\", taskVariables.size());\n         }\n+\n+        processVariables.stream().forEach(var -> query.setParameter(\"P_NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n+        processVariables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"P_VALUE_\" + var.getColumn(), var.getObjectValue()));\n+\n+        if (!processVariables.isEmpty()) {\n+            query.setParameter(\"NUMBER_OF_PROCVARS\", processVariables.size());\n+        }\n+\n+        if (!owners.isEmpty()) {\n+            query.setParameter(\"num_owners\", owners.size());\n+            query.setParameter(\"owners\", owners);\n+        }\n+\n+        attributes.stream().filter(e -> e.getObjectValue() != null).forEach(entry -> query.setParameter(\"ATTR_\" + entry.getColumn(), entry.getObjectValue()));\n         query.setParameter(\"processType\", processType);\n \n         addPagination(query, queryContext);\n+\n         List<Number> ids = query.getResultList();\n         if (ids.isEmpty()) {\n-            return Collections.emptyList();\n+            return emptyList();\n         }\n \n-        // now we get the information\n+        entityManager.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d8f791f2373647e0a13d8545a2859dac528c42"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MzQ1Ng==", "bodyText": "QueryParam with UNARY_OPERAND were filtered out previously to invoke query.setParameter, however they are considered here to set the number for HAVING clause, is it right?\nConsider this example (filter by notEqualsTo and isNotNull for the same variable):\nList<QueryParam> processVariables = list(equalsTo(\"var_b\", \"3\"), notEqualsTo(\"var_c\",\"fake\"), isNotNull(\"var_c\"));\nas var_c is used twice, then HAVING should be only for the distinct variables: 2 instead of 3 (processVariables.size())\nI guess though this is a weird scenario it has sense; probably we should group the variables before counting them:\nlong count = processVariables.stream().collect(Collectors.groupingBy(QueryParam::getColumn, Collectors.counting())).size();\nquery.setParameter(\"NUMBER_OF_PROCVARS\", count);\n\nwdyt?", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424063456", "createdAt": "2020-05-12T22:11:09Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +56,148 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributes,\n+                                                           List<QueryParam> processVariables,\n+                                                           List<QueryParam> taskVariables,\n+                                                           List<String> owners,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        EntityManager entityManager = emf.createEntityManager();\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n+        if (!taskVariables.isEmpty()) {\n+            List<String> conditions = new ArrayList<>();\n+            taskVariables.stream().forEach((expr) -> conditions.add(\"(name = :V_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"value\", \":V_VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            String where = String.join(\" OR \", conditions);\n+            derivedTables.append(\"INNER JOIN (\\n\" +\n+                                 \"SELECT taskId \\n\" +\n+                                 \"FROM TaskVariableImpl \\n\" +\n+                                 \"WHERE type = 0 AND (\" + where + \")\\n\" +\n+                                 \"GROUP BY taskId \\n\" +\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_TASKVARS \\n\" +\n+                                 \") TABLE_TASK_VAR ON TABLE_TASK_VAR.taskId = task.id  \\n\");\n+        }\n+\n+        if (!processVariables.isEmpty()) {\n             List<String> conditions = new ArrayList<>();\n-            variables.stream().forEach(expr -> conditions.add(\"(A1.variableId = :NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":VALUE_\" + expr.getColumn()) + \")\\n\"));\n+            processVariables.stream().forEach((expr) -> conditions.add(\"(A1.variableId = :P_NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":P_VALUE_\" + expr.getColumn()) + \")\\n\"));\n             String where = String.join(\" OR \", conditions);\n             derivedTables.append(\"INNER JOIN (\" +\n                                  \"SELECT A1.processInstanceId \\n\" +\n                                  \"FROM VariableInstanceLog A1 \\n\" +\n                                  \"LEFT JOIN VariableInstanceLog A2 ON A1.processId = A2.processId AND A1.processInstanceId = A2.processInstanceId AND A1.variableInstanceId = A2.variableInstanceId AND A2.id > A1.id  \\n\" +\n                                  \"WHERE A2.id IS NULL AND (\" + where + \") \" +\n                                  \"GROUP BY A1.processInstanceId \" +\n-                                 \"HAVING COUNT(*) = :NUMBER_OF_VARS \" +\n-                                 \") TABLE_VAR ON TABLE_VAR.processInstanceId = pil.processInstanceId \\n\");\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_PROCVARS \" +\n+                                 \") TABLE_PROC_VAR ON TABLE_PROC_VAR.processInstanceId = pil.processInstanceId \\n\");\n         }\n \n-        StringBuilder globalWhere = new StringBuilder();\n-        attributes.stream().forEach(expr -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n+        if (!owners.isEmpty()) {\n+            derivedTables.append(\"INNER JOIN ( \\n\" +\n+                             \"           SELECT DISTINCT po.task_id \\n\" +\n+                             \"           FROM PeopleAssignments_PotOwners po \\n\" +\n+                             \"           WHERE po.entity_id IN (:owners) \\n\" +\n+                             \"           GROUP BY po.task_id \\n\" +\n+                             \"           HAVING COUNT(po.entity_id) = :num_owners \\n\" +\n+                                 \") pot ON pot.task_id = task.id \");\n+        }\n+\n+        attributes.stream().forEach((expr) -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n \n-        String procSQLString =\n-                \" SELECT DISTINCT pil.processInstanceId \" +\n-                               \" FROM ProcessInstanceLog pil \\n \" +\n-                               derivedTables +\n-                               \" WHERE pil.processType = :processType \" + globalWhere +\n-                               \" ORDER BY pil.processInstanceId ASC \";\n+        String procSQLString = mainSQLproducer.apply(derivedTables, globalWhere);\n \n         Query query = entityManager.createNativeQuery(procSQLString);\n-        variables.stream().forEach(var -> query.setParameter(\"NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n-        variables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"VALUE_\" + var.getColumn(), var.getObjectValue()));\n-        attributes.stream().filter(e -> e.getObjectValue() != null).forEach((entry) -> query.setParameter(\"ATTR_\" + entry.getColumn(), entry.getObjectValue()));\n+        taskVariables.stream().forEach(var -> query.setParameter(\"V_NAME_\" + var.getColumn(), var.getColumn()));\n+        taskVariables.stream().filter(e -> e.getObjectValue() != null).forEach((var) -> query.setParameter(\"V_VALUE_\" + var.getColumn(), var.getObjectValue()));\n \n-        if (!variables.isEmpty()) {\n-            query.setParameter(\"NUMBER_OF_VARS\", variables.size());\n+        if (!taskVariables.isEmpty()) {\n+            query.setParameter(\"NUMBER_OF_TASKVARS\", taskVariables.size());\n         }\n+\n+        processVariables.stream().forEach(var -> query.setParameter(\"P_NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n+        processVariables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"P_VALUE_\" + var.getColumn(), var.getObjectValue()));\n+\n+        if (!processVariables.isEmpty()) {\n+            query.setParameter(\"NUMBER_OF_PROCVARS\", processVariables.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d8f791f2373647e0a13d8545a2859dac528c42"}, "originalPosition": 168}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4d8f791f2373647e0a13d8545a2859dac528c42", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/b4d8f791f2373647e0a13d8545a2859dac528c42", "committedDate": "2020-05-08T07:48:19Z", "message": "[BAPL-1526] added new function to get process by task attributes and variables"}, "afterCommit": {"oid": "dd3db6b1891b24bb663ad96686f5c875907ab1e2", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/dd3db6b1891b24bb663ad96686f5c875907ab1e2", "committedDate": "2020-05-13T08:52:17Z", "message": "[BAPL-1526] added new function to get process by task attributes and variables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwODUwNTk3", "url": "https://github.com/kiegroup/jbpm/pull/1644#pullrequestreview-410850597", "createdAt": "2020-05-13T11:58:28Z", "commit": {"oid": "dd3db6b1891b24bb663ad96686f5c875907ab1e2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNzg4Mjg1", "url": "https://github.com/kiegroup/jbpm/pull/1644#pullrequestreview-410788285", "createdAt": "2020-05-13T10:21:24Z", "commit": {"oid": "dd3db6b1891b24bb663ad96686f5c875907ab1e2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyMToyNFrOGUrIhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDo0MzoyOFrOGU1EcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzMTM5Ng==", "bodyText": "Wouldn't be clearer to overload method queryProcessByVariables by adding this new taskVariables parameter instead of creating a new method?", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424331396", "createdAt": "2020-05-13T10:21:24Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/AdvanceRuntimeDataService.java", "diffHunk": "@@ -27,13 +27,28 @@\n \n     String TASK_ATTR_NAME = \"TASK_NAME\";\n     String TASK_ATTR_OWNER = \"TASK_OWNER\";\n+    String TASK_ATTR_STATUS = \"TASK_STATUS\";\n     String PROCESS_ATTR_INSTANCE_ID = \"PROCESS_INSTANCE_ID\";\n     String PROCESS_ATTR_CORRELATION_KEY = \"PROCESS_CORRELATION_KEY\";\n     String PROCESS_ATTR_DEFINITION_ID = \"PROCESS_DEFINITION_ID\";\n     String PROCESS_ATTR_DEPLOYMENT_ID = \"PROCESS_DEPLOYMENT_ID\";\n \n-    List<ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes, List<QueryParam> variables, QueryContext queryContext);\n+    List<ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                              List<QueryParam> processVariables,\n+                                                              QueryContext queryContext);\n+\n+    List<ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3db6b1891b24bb663ad96686f5c875907ab1e2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM0NTEzOQ==", "bodyText": "Why a new test class? wouldn't be better to have this test all together in the same test class AdvanceRuntimeDataServiceImplTest?", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424345139", "createdAt": "2020-05-13T10:48:00Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/AdvanceRuntimeDataServiceImpl2Test.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3db6b1891b24bb663ad96686f5c875907ab1e2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM1OTAyOA==", "bodyText": "why this? there is no task_out_a2 variable defined in any of the three bpm processes. Might look confusing.", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424359028", "createdAt": "2020-05-13T11:16:51Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/test/AdvanceRuntimeDataServiceImpl2Test.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.kie.services.test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.jbpm.kie.services.impl.KModuleDeploymentUnit;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.services.api.ProcessInstanceNotFoundException;\n+import org.jbpm.services.api.model.DeploymentUnit;\n+import org.jbpm.services.api.model.ProcessInstanceWithVarsDesc;\n+import org.jbpm.services.api.model.UserTaskInstanceDesc;\n+import org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc;\n+import org.jbpm.services.api.query.model.QueryParam;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.internal.query.QueryContext;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toList;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.jbpm.services.api.AdvanceRuntimeDataService.TASK_ATTR_NAME;\n+import static org.jbpm.services.api.query.model.QueryParam.equalsTo;\n+import static org.jbpm.services.api.query.model.QueryParam.list;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+public class AdvanceRuntimeDataServiceImpl2Test extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(AdvanceRuntimeDataServiceImpl2Test.class);\n+\n+    private List<DeploymentUnit> units = new ArrayList<>();\n+\n+    private List<Long> processIds;\n+    private KModuleDeploymentUnit deploymentUnit = null;\n+\n+\n+    @Before\n+    public void prepare() {\n+\n+        configureServices();\n+        logger.debug(\"Preparing kjar\");\n+        KieServices ks = KieServices.Factory.get();\n+        ReleaseId releaseId = ks.newReleaseId(GROUP_ID, ARTIFACT_ID, VERSION);\n+        List<String> processes = new ArrayList<>();\n+        processes.add(\"repo/processes/general/SingleHumanTaskWithVarsA.bpmn2\");\n+        processes.add(\"repo/processes/general/SingleHumanTaskWithVarsB.bpmn2\");\n+        processes.add(\"repo/processes/general/SingleHumanTaskWithVarsC.bpmn2\");\n+\n+        InternalKieModule kJar1 = createKieJar(ks, releaseId, processes);\n+        File pom = new File(\"target/kmodule\", \"pom.xml\");\n+        pom.getParentFile().mkdir();\n+        try (FileOutputStream fs = new FileOutputStream(pom);) {\n+            fs.write(getPom(releaseId).getBytes());\n+        } catch (Exception e) {\n+\n+        }\n+        KieMavenRepository repository = getKieMavenRepository();\n+        repository.deployArtifact(releaseId, kJar1, pom);\n+\n+        assertNotNull(deploymentService);\n+\n+        deploymentUnit = new KModuleDeploymentUnit(GROUP_ID, ARTIFACT_ID, VERSION);\n+\n+        deploymentService.deploy(deploymentUnit);\n+        units.add(deploymentUnit);\n+        assertNotNull(processService);\n+\n+        processIds = new ArrayList<>();\n+\n+        Map<String, Object> inputsA1 = new HashMap<>();\n+        inputsA1.put(\"var_a\", \"myvalue\");\n+        inputsA1.put(\"var_b\", \"othervalue\");\n+        processIds.add(processService.startProcess(deploymentUnit.getIdentifier(), \"test.test_A\", inputsA1));\n+\n+        Map<String, Object> inputsB1 = new HashMap<>();\n+        inputsB1.put(\"var_a\", \"somethingelse\");\n+        inputsB1.put(\"var_b\", \"b_var\");\n+        processIds.add(processService.startProcess(deploymentUnit.getIdentifier(), \"test.test_B\", inputsB1));\n+\n+        Map<String, Object> inputsC1 = new HashMap<>();\n+        inputsC1.put(\"var_c\", \"somethingelse\");\n+        inputsC1.put(\"var_b\", \"b_var\");\n+        processIds.add(processService.startProcess(deploymentUnit.getIdentifier(), \"test.test_C\", inputsC1));\n+\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        for (Long processInstanceId : processIds) {\n+            try {\n+                // let's abort process instance to leave the system in clear state\n+                processService.abortProcessInstance(processInstanceId);\n+\n+                ProcessInstance pi = processService.getProcessInstance(processInstanceId);\n+                assertNull(pi);\n+            } catch (ProcessInstanceNotFoundException e) {\n+                // ignore it as it was already completed/aborted\n+            }\n+        }\n+        cleanupSingletonSessionId();\n+        if (units != null && !units.isEmpty()) {\n+            for (DeploymentUnit unit : units) {\n+                try {\n+                    deploymentService.undeploy(unit);\n+                } catch (Exception e) {\n+                    // do nothing in case of some failed tests to avoid next test to fail as well\n+                }\n+            }\n+            units.clear();\n+        }\n+        close();\n+    }\n+\n+    @Test\n+    public void testQueryProcessTaskByVariablesWithOwners() {\n+\n+\n+        List<UserTaskInstanceWithPotOwnerDesc> userTasks = advanceVariableDataService.queryUserTasksByVariables(emptyList(), emptyList(), emptyList(), emptyList(), new QueryContext());\n+\n+        for (UserTaskInstanceWithPotOwnerDesc userTask : userTasks) {\n+            Long taskId = userTask.getTaskId();\n+            String user = userTask.getPotentialOwners().get(0);\n+            userTaskService.start(taskId, user);\n+            Map<String, Object> inputs = userTaskService.getTaskInputContentByTaskId(taskId);\n+            Map<String, Object> output = new HashMap<>(inputs);\n+            output.put(\"task_out_a1\", 3);\n+            output.put(\"task_out_a2\", \"h2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3db6b1891b24bb663ad96686f5c875907ab1e2"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MDA0MQ==", "bodyText": "I would reword this test method to something more meaningful as this is meant to test queryCaseByVariablesAndTask method.", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424440041", "createdAt": "2020-05-13T13:32:37Z", "author": {"login": "afalhambra"}, "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/test/java/org/jbpm/casemgmt/impl/AdvanceCaseRuntimeDataServiceImplTest.java", "diffHunk": "@@ -93,4 +93,24 @@ public void testSearchUserByVariable() {\n \n     }\n \n+    @Test\n+    public void testSearchCaseUserByVariable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3db6b1891b24bb663ad96686f5c875907ab1e2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MDkwMg==", "bodyText": "Just to confirm - Is this a correct and expected behaviour? When no filter is passed as parameter, we are returning all cases/processes.", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424440902", "createdAt": "2020-05-13T13:33:47Z", "author": {"login": "afalhambra"}, "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/test/java/org/jbpm/casemgmt/impl/AdvanceCaseRuntimeDataServiceImplTest.java", "diffHunk": "@@ -93,4 +93,24 @@ public void testSearchUserByVariable() {\n \n     }\n \n+    @Test\n+    public void testSearchCaseUserByVariable() {\n+        Map<String, OrganizationalEntity> roleAssignments = new HashMap<>();\n+        roleAssignments.put(\"owner\", new UserImpl(USER));\n+\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(\"name\", \"my first case\");\n+        CaseFileInstance caseFile = caseService.newCaseFileInstance(deploymentUnit.getIdentifier(), USER_TASK_CASE_P_ID, data, roleAssignments);\n+\n+        String caseId = caseService.startCase(deploymentUnit.getIdentifier(), USER_TASK_CASE_P_ID, caseFile);\n+\n+        List<ProcessInstanceWithVarsDesc> process = advanceCaseRuntimeDataService.queryCaseByVariablesAndTask(emptyList(), emptyList(), emptyList(), emptyList(), new QueryContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3db6b1891b24bb663ad96686f5c875907ab1e2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NTI3MQ==", "bodyText": "Shouldn't we add a task and a variable attribute filter for this test?\nReason for asking is that at the moment, same functionality is tested in the AdvanceRuntimeDataServiceImpl2Test java test class cause it's calling the same methods/apis internally, so it might sound redundant to test here again...\nbut this might not be always the case in future necessarily and the internal implementation might change or could be split it for instance into several impls, for instance, 1 particular impl for processes and another imp for cases for whatever reason.\nwdyt?", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424445271", "createdAt": "2020-05-13T13:39:40Z", "author": {"login": "afalhambra"}, "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/test/java/org/jbpm/casemgmt/impl/AdvanceCaseRuntimeDataServiceImplTest.java", "diffHunk": "@@ -93,4 +93,24 @@ public void testSearchUserByVariable() {\n \n     }\n \n+    @Test\n+    public void testSearchCaseUserByVariable() {\n+        Map<String, OrganizationalEntity> roleAssignments = new HashMap<>();\n+        roleAssignments.put(\"owner\", new UserImpl(USER));\n+\n+        Map<String, Object> data = new HashMap<>();\n+        data.put(\"name\", \"my first case\");\n+        CaseFileInstance caseFile = caseService.newCaseFileInstance(deploymentUnit.getIdentifier(), USER_TASK_CASE_P_ID, data, roleAssignments);\n+\n+        String caseId = caseService.startCase(deploymentUnit.getIdentifier(), USER_TASK_CASE_P_ID, caseFile);\n+\n+        List<ProcessInstanceWithVarsDesc> process = advanceCaseRuntimeDataService.queryCaseByVariablesAndTask(emptyList(), emptyList(), emptyList(), emptyList(), new QueryContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3db6b1891b24bb663ad96686f5c875907ab1e2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3MDM5NQ==", "bodyText": "I would use TaskVariable.VariableType.INPUT instead of hardcoding values in the query.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                             \"WHERE type = 0 AND (\" + where + \")\\n\" +\n          \n          \n            \n                                             \"WHERE type = \" + TaskVariable.VariableType.INPUT + \" AND (\" + where + \")\\n\" +", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424470395", "createdAt": "2020-05-13T14:12:53Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +58,155 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributesArg,\n+                                                           List<QueryParam> processVariablesArg,\n+                                                           List<QueryParam> taskVariablesArg,\n+                                                           List<String> ownersArg,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        List<QueryParam> attributes = attributesArg != null ? attributesArg : emptyList();\n+        List<QueryParam> processVariables = processVariablesArg != null ? processVariablesArg : emptyList();\n+        List<QueryParam> taskVariables = taskVariablesArg != null ? taskVariablesArg : emptyList();\n+        List<String> owners = ownersArg != null ? ownersArg : emptyList();\n+\n+\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n-            List<String> conditions = new ArrayList<>();\n-            variables.stream().forEach(expr -> conditions.add(\"(A1.variableId = :NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":VALUE_\" + expr.getColumn()) + \")\\n\"));\n-            String where = String.join(\" OR \", conditions);\n+        if (!taskVariables.isEmpty()) {\n+            String where = computeVariableExpression(taskVariables, \"V\", \"name\", \"value\");\n+            derivedTables.append(\"INNER JOIN (\\n\" +\n+                                 \"SELECT taskId \\n\" +\n+                                 \"FROM TaskVariableImpl \\n\" +\n+                                 \"WHERE type = 0 AND (\" + where + \")\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3db6b1891b24bb663ad96686f5c875907ab1e2"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5NDE5Mg==", "bodyText": "what if List<String> owners contains a duplicate owner? the query won't return any data as per query                              HAVING COUNT(po.entity_id) = :num_owners\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            query.setParameter(\"num_owners\", owners.size());\n          \n          \n            \n                            query.setParameter(\"num_owners\", owners.stream().distinct().collect(Collectors.toList()));", "url": "https://github.com/kiegroup/jbpm/pull/1644#discussion_r424494192", "createdAt": "2020-05-13T14:43:28Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/AbstractAdvanceRuntimeDataServiceImpl.java", "diffHunk": "@@ -55,58 +58,155 @@ public void setEmf(EntityManagerFactory emf) {\n         this.emf = emf;\n     }\n \n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n+                                                                                                    List<QueryParam> processVariables,\n+                                                                                                    int processType,\n+                                                                                                    String varPrefix,\n+                                                                                                    QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM ProcessInstanceLog pil \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+        return queryProcessUserTasksByVariables(attributes, processVariables, emptyList(), emptyList(), processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+    }\n \n-    public List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariables(List<QueryParam> attributes,\n-                                                                                                 List<QueryParam> variables,\n-                                                                                                 int processType,\n-                                                                                                 String varPrefix,\n-                                                                                                 QueryContext queryContext) {\n-        EntityManager entityManager = emf.createEntityManager();\n \n-        // first step is to filter the data creating a derived tables and pivoting var - rows to columns (only the variables we are interested to filter)\n+\n+    protected List<org.jbpm.services.api.model.ProcessInstanceWithVarsDesc> queryProcessByVariablesAndTask(List<QueryParam> attributes,\n+                                                                                                                  List<QueryParam> processVariables,\n+                                                                                                                  List<QueryParam> taskVariables,\n+                                                                                                                  List<String> owners,\n+                                                                                                                  int processType,\n+                                                                                                                  String varPrefix,\n+                                                                                                                  QueryContext queryContext) {\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT pil.processInstanceId \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY pil.processInstanceId ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectProcessData);\n+\n+    }\n+\n+    protected List<org.jbpm.services.api.model.UserTaskInstanceWithPotOwnerDesc> queryUserTasksByVariables(List<QueryParam> attributes,\n+                                                                                                           List<QueryParam> processVariables,\n+                                                                                                           List<QueryParam> taskVariables,\n+                                                                                                           List<String> owners,\n+                                                                                                           int processType,\n+                                                                                                           String varPrefix,\n+                                                                                                           QueryContext queryContext) {\n+\n+        BiFunction<StringBuilder, StringBuilder, String> mainSQLProducer = (derivedTables, globalWhere) -> \"SELECT DISTINCT task.id \" +\n+                                                                                                           \" FROM Task task \" +\n+                                                                                                           \" INNER JOIN ProcessInstanceLog pil ON pil.processInstanceId = task.processInstanceId \\n \" +\n+                                                                                                           derivedTables +\n+                                                                                                           \" WHERE  pil.processType = :processType \" + globalWhere +\n+                                                                                                           \" ORDER BY task.id ASC \";\n+\n+        return queryProcessUserTasksByVariables(attributes, processVariables, taskVariables, owners, processType, varPrefix, queryContext, mainSQLProducer, this::collectUserTaskData);\n+\n+    }\n+\n+\n+    protected <R> List<R> queryProcessUserTasksByVariables(List<QueryParam> attributesArg,\n+                                                           List<QueryParam> processVariablesArg,\n+                                                           List<QueryParam> taskVariablesArg,\n+                                                           List<String> ownersArg,\n+                                                           int processType,\n+                                                           String varPrefix,\n+                                                           QueryContext queryContext,\n+                                                           BiFunction<StringBuilder, StringBuilder, String> mainSQLproducer,\n+                                                           BiFunction<List<Number>, String, List<R>> dataCollector) {\n+\n+        List<QueryParam> attributes = attributesArg != null ? attributesArg : emptyList();\n+        List<QueryParam> processVariables = processVariablesArg != null ? processVariablesArg : emptyList();\n+        List<QueryParam> taskVariables = taskVariablesArg != null ? taskVariablesArg : emptyList();\n+        List<String> owners = ownersArg != null ? ownersArg : emptyList();\n+\n+\n+        StringBuilder globalWhere = new StringBuilder();\n         StringBuilder derivedTables = new StringBuilder();\n-        if (!variables.isEmpty()) {\n-            List<String> conditions = new ArrayList<>();\n-            variables.stream().forEach(expr -> conditions.add(\"(A1.variableId = :NAME_\" + expr.getColumn() + \" AND \" + computeExpression(expr, \"A1.value\", \":VALUE_\" + expr.getColumn()) + \")\\n\"));\n-            String where = String.join(\" OR \", conditions);\n+        if (!taskVariables.isEmpty()) {\n+            String where = computeVariableExpression(taskVariables, \"V\", \"name\", \"value\");\n+            derivedTables.append(\"INNER JOIN (\\n\" +\n+                                 \"SELECT taskId \\n\" +\n+                                 \"FROM TaskVariableImpl \\n\" +\n+                                 \"WHERE type = 0 AND (\" + where + \")\\n\" +\n+                                 \"GROUP BY taskId \\n\" +\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_TASKVARS \\n\" +\n+                                 \") TABLE_TASK_VAR ON TABLE_TASK_VAR.taskId = task.id  \\n\");\n+        }\n+\n+        if (!processVariables.isEmpty()) {\n+            String where = computeVariableExpression(processVariables, \"P\", \"A1.variableId\", \"A1.value\");\n             derivedTables.append(\"INNER JOIN (\" +\n                                  \"SELECT A1.processInstanceId \\n\" +\n                                  \"FROM VariableInstanceLog A1 \\n\" +\n                                  \"LEFT JOIN VariableInstanceLog A2 ON A1.processId = A2.processId AND A1.processInstanceId = A2.processInstanceId AND A1.variableInstanceId = A2.variableInstanceId AND A2.id > A1.id  \\n\" +\n                                  \"WHERE A2.id IS NULL AND (\" + where + \") \" +\n                                  \"GROUP BY A1.processInstanceId \" +\n-                                 \"HAVING COUNT(*) = :NUMBER_OF_VARS \" +\n-                                 \") TABLE_VAR ON TABLE_VAR.processInstanceId = pil.processInstanceId \\n\");\n+                                 \"HAVING COUNT(*) = :NUMBER_OF_PROCVARS \" +\n+                                 \") TABLE_PROC_VAR ON TABLE_PROC_VAR.processInstanceId = pil.processInstanceId \\n\");\n         }\n \n-        StringBuilder globalWhere = new StringBuilder();\n-        attributes.stream().forEach(expr -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n-\n-        String procSQLString =\n-                \" SELECT DISTINCT pil.processInstanceId \" +\n-                               \" FROM ProcessInstanceLog pil \\n \" +\n-                               derivedTables +\n-                               \" WHERE pil.processType = :processType \" + globalWhere +\n-                               \" ORDER BY pil.processInstanceId ASC \";\n-\n-        Query query = entityManager.createNativeQuery(procSQLString);\n-        variables.stream().forEach(var -> query.setParameter(\"NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n-        variables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"VALUE_\" + var.getColumn(), var.getObjectValue()));\n-        attributes.stream().filter(e -> e.getObjectValue() != null).forEach((entry) -> query.setParameter(\"ATTR_\" + entry.getColumn(), entry.getObjectValue()));\n-\n-        if (!variables.isEmpty()) {\n-            query.setParameter(\"NUMBER_OF_VARS\", variables.size());\n+        if (!owners.isEmpty()) {\n+            derivedTables.append(\"INNER JOIN ( \\n\" +\n+                             \"           SELECT DISTINCT po.task_id \\n\" +\n+                             \"           FROM PeopleAssignments_PotOwners po \\n\" +\n+                             \"           WHERE po.entity_id IN (:owners) \\n\" +\n+                             \"           GROUP BY po.task_id \\n\" +\n+                             \"           HAVING COUNT(po.entity_id) = :num_owners \\n\" +\n+                                 \") pot ON pot.task_id = task.id \");\n         }\n-        query.setParameter(\"processType\", processType);\n \n-        addPagination(query, queryContext);\n-        List<Number> ids = query.getResultList();\n-        if (ids.isEmpty()) {\n-            return Collections.emptyList();\n-        }\n+        attributes.stream().forEach((expr) -> globalWhere.append(\" AND \" + computeExpression(expr, expr.getColumn(), \":ATTR_\" + expr.getColumn())));\n+\n+        String procSQLString = mainSQLproducer.apply(derivedTables, globalWhere);\n \n-        // now we get the information\n+        List<Number> ids = emptyList();\n+        EntityManager entityManager = emf.createEntityManager();\n+        try {\n+            Query query = entityManager.createNativeQuery(procSQLString);\n+            taskVariables.stream().forEach(var -> query.setParameter(\"V_NAME_\" + var.getColumn(), var.getColumn()));\n+            taskVariables.stream().filter(e -> e.getObjectValue() != null).forEach((var) -> query.setParameter(\"V_VALUE_\" + var.getColumn(), var.getObjectValue()));\n+\n+            if (!taskVariables.isEmpty()) {\n+                query.setParameter(\"NUMBER_OF_TASKVARS\", taskVariables.stream().map(QueryParam::getColumn).distinct().count());\n+            }\n \n+            processVariables.stream().forEach(var -> query.setParameter(\"P_NAME_\" + var.getColumn(), varPrefix + var.getColumn()));\n+            processVariables.stream().filter(e -> e.getObjectValue() != null).forEach(var -> query.setParameter(\"P_VALUE_\" + var.getColumn(), var.getObjectValue()));\n+\n+            if (!processVariables.isEmpty()) {\n+                query.setParameter(\"NUMBER_OF_PROCVARS\", processVariables.stream().map(QueryParam::getColumn).distinct().count());\n+            }\n+\n+            if (!owners.isEmpty()) {\n+                query.setParameter(\"num_owners\", owners.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3db6b1891b24bb663ad96686f5c875907ab1e2"}, "originalPosition": 192}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd3db6b1891b24bb663ad96686f5c875907ab1e2", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/dd3db6b1891b24bb663ad96686f5c875907ab1e2", "committedDate": "2020-05-13T08:52:17Z", "message": "[BAPL-1526] added new function to get process by task attributes and variables"}, "afterCommit": {"oid": "10990ebf75498ec1d7b40116c219ad19f265ace1", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/10990ebf75498ec1d7b40116c219ad19f265ace1", "committedDate": "2020-05-14T08:10:49Z", "message": "[BAPL-1526] added new function to get process by task attributes and variables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNjExMTQy", "url": "https://github.com/kiegroup/jbpm/pull/1644#pullrequestreview-411611142", "createdAt": "2020-05-14T09:10:22Z", "commit": {"oid": "10990ebf75498ec1d7b40116c219ad19f265ace1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "10990ebf75498ec1d7b40116c219ad19f265ace1", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/10990ebf75498ec1d7b40116c219ad19f265ace1", "committedDate": "2020-05-14T08:10:49Z", "message": "[BAPL-1526] added new function to get process by task attributes and variables"}, "afterCommit": {"oid": "562519bde5fb373fa6afbaa36867b73619cb3c92", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/562519bde5fb373fa6afbaa36867b73619cb3c92", "committedDate": "2020-05-14T13:31:23Z", "message": "[BAPL-1526] added new function to get process by task attributes and variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d6b013e2d7cd0cb08acb39f954981186d84ad00", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/3d6b013e2d7cd0cb08acb39f954981186d84ad00", "committedDate": "2020-05-14T13:50:27Z", "message": "[BAPL-1526] added new function to get process by task attributes and variables"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "562519bde5fb373fa6afbaa36867b73619cb3c92", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/562519bde5fb373fa6afbaa36867b73619cb3c92", "committedDate": "2020-05-14T13:31:23Z", "message": "[BAPL-1526] added new function to get process by task attributes and variables"}, "afterCommit": {"oid": "3d6b013e2d7cd0cb08acb39f954981186d84ad00", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/3d6b013e2d7cd0cb08acb39f954981186d84ad00", "committedDate": "2020-05-14T13:50:27Z", "message": "[BAPL-1526] added new function to get process by task attributes and variables"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 896, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}