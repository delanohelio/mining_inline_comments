{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMTg2MzEw", "number": 1779, "title": "[JBPM-9426] No tasks returned when userId == null, exlOwner !=null and groups !=null", "bodyText": "Jira: https://issues.redhat.com/browse/JBPM-9426", "createdAt": "2020-10-14T07:56:55Z", "url": "https://github.com/kiegroup/jbpm/pull/1779", "merged": true, "mergeCommit": {"oid": "6958c9d0b5bb3af86e358e204cd8b6d331233edf"}, "closed": true, "closedAt": "2020-11-03T14:19:15Z", "author": {"login": "elguardian"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWWGbTAFqTUxNjg5NzI5Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYlfeWgBqjM5NDgzOTE3MDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODk3Mjk3", "url": "https://github.com/kiegroup/jbpm/pull/1779#pullrequestreview-516897297", "createdAt": "2020-10-26T15:28:30Z", "commit": {"oid": "68daaa379a7137c403f9277d4ba7ab3f44dbc44f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68daaa379a7137c403f9277d4ba7ab3f44dbc44f", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/68daaa379a7137c403f9277d4ba7ab3f44dbc44f", "committedDate": "2020-10-14T07:56:10Z", "message": "[JBPM-9426] No tasks returned when userId == null, exlOwner !=null and groups !=null"}, "afterCommit": {"oid": "0988f090af152241644e4c71ec279db8193d8bec", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/0988f090af152241644e4c71ec279db8193d8bec", "committedDate": "2020-10-28T11:53:54Z", "message": "[JBPM-9426] No tasks returned when userId == null, exlOwner !=null and groups !=null"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5OTMwMjA2", "url": "https://github.com/kiegroup/jbpm/pull/1779#pullrequestreview-519930206", "createdAt": "2020-10-29T17:52:44Z", "commit": {"oid": "0988f090af152241644e4c71ec279db8193d8bec"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo1Mjo0NVrOHqn2zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo1Mjo0NVrOHqn2zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1NTI0Ng==", "bodyText": "typo", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r514455246", "createdAt": "2020-10-29T17:52:45Z", "author": {"login": "gmunozfe"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "diffHunk": "@@ -532,7 +768,7 @@ public void testGetTasksAssignedByGroupsWithGroupsLangNoTask() {\n     \n     @Test\n     public void testGetTasksAssignedByGroupsWithGroupsLangOneTask() {\n-        // One potential owner, should go straight to state Reserved\n+        // One potential owner, should go straight to s)tate Reserved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0988f090af152241644e4c71ec279db8193d8bec"}, "originalPosition": 270}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0988f090af152241644e4c71ec279db8193d8bec", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/0988f090af152241644e4c71ec279db8193d8bec", "committedDate": "2020-10-28T11:53:54Z", "message": "[JBPM-9426] No tasks returned when userId == null, exlOwner !=null and groups !=null"}, "afterCommit": {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/20678522eed6bd03f535c8a85b4be5c62cca3902", "committedDate": "2020-11-02T08:13:18Z", "message": "[JBPM-9426] No tasks returned when userId == null, exlOwner !=null and groups !=null"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNTQzNjcy", "url": "https://github.com/kiegroup/jbpm/pull/1779#pullrequestreview-521543672", "createdAt": "2020-11-02T11:23:11Z", "commit": {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToyMzoxMVrOHsAbng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMTo0NTowNFrOHsBGiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNjQ2Mg==", "bodyText": "No longer throwing a checked exception", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r515906462", "createdAt": "2020-11-02T11:23:11Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/jaxb/JaxbTaskSerializationTest.java", "diffHunk": "@@ -118,21 +119,20 @@ public void taskCmdUniqueRootElementTest() throws Exception {\n \n     @Test\n     public void taskCommandSubTypesCanBeSerialized() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNjg0NQ==", "bodyText": "Not really needed\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Constructor<?> construct = jaxbClass.getConstructor(new Class[] {});\n          \n          \n            \n                            Object jaxbInst = construct.newInstance(new Object[] {});\n          \n          \n            \n                            Constructor<?> construct = jaxbClass.getConstructor();\n          \n          \n            \n                            Object jaxbInst = construct.newInstance();", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r515906845", "createdAt": "2020-11-02T11:23:56Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/jaxb/JaxbTaskSerializationTest.java", "diffHunk": "@@ -118,21 +119,20 @@ public void taskCmdUniqueRootElementTest() throws Exception {\n \n     @Test\n     public void taskCommandSubTypesCanBeSerialized() throws Exception {\n-        for (Class<?> jaxbClass : reflections.getSubTypesOf(TaskCommand.class)) {\n-            if (jaxbClass.equals(UserGroupCallbackTaskCommand.class)\n-            \t\t|| jaxbClass.equals(GetCurrentTxTasksCommand.class)) {\n-                continue;\n+        reflections.getSubTypesOf(TaskCommand.class).stream().filter(e -> !e.getName().contains(\"$\")).forEach(jaxbClass ->  {\n+            if (jaxbClass.equals(UserGroupCallbackTaskCommand.class) || jaxbClass.equals(GetCurrentTxTasksCommand.class)) {\n+                return;\n             }\n-            addClassesToSerializationContext(jaxbClass);\n-            Constructor<?> construct = jaxbClass.getConstructor(new Class[] {});\n             try {\n+                addClassesToSerializationContext(jaxbClass);\n+                Constructor<?> construct = jaxbClass.getConstructor(new Class[] {});\n                 Object jaxbInst = construct.newInstance(new Object[] {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNzc1Mw==", "bodyText": "Please remove unused imports", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r515907753", "createdAt": "2020-11-02T11:25:44Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "diffHunk": "@@ -23,21 +23,29 @@\n import java.io.StringReader;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n import javax.naming.InitialContext;\n import javax.transaction.UserTransaction;\n \n+import org.jbpm.services.task.commands.TaskCommand;\n+import org.jbpm.services.task.commands.TaskContext;\n import org.jbpm.services.task.impl.factories.TaskFactory;\n import org.jbpm.services.task.impl.model.TaskDataImpl;\n+import org.jbpm.services.task.utils.ClassUtil;\n import org.junit.Ignore;\n import org.junit.Test;\n+import org.kie.api.command.ExecutableCommand;\n+import org.kie.api.runtime.Context;\n import org.kie.api.task.model.I18NText;\n import org.kie.api.task.model.Status;\n import org.kie.api.task.model.Task;\n import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.executor.api.Command;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxNjQyMQ==", "bodyText": "Redundant cast\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return (List<TaskSummary>) context.getPersistenceContext()\n          \n          \n            \n                            return context.getPersistenceContext()", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r515916421", "createdAt": "2020-11-02T11:43:08Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "diffHunk": "@@ -270,6 +278,234 @@ public void testGetTasksAssignedAsPotentialOwnerWithUserGroupsLangStatus() {\n     }\n     \n     \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerWithNoUserGroupsLangStatus() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"status\", status);\n+        params.put(\"groupIds\", groups);\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerByStatusByGroup\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerWithGroups() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerWithGroups\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerByStatusWithGroups() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"status\", status);\n+        params.put(\"groupIds\", groups);\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerByStatusWithGroups\", params);\n+\n+    }\n+\n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerStatusByExpirationDate() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"status\", status);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerStatusByExpirationDate\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerStatusByExpirationDateOptional() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"status\", status);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerStatusByExpirationDateOptional\", params);\n+\n+    }\n+    \n+    \n+    @Test\n+    public void testGetSubTasksAssignedAsPotentialOwner() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"parentId\", 2L);\n+        endBaseTest(\"SubTasksAssignedAsPotentialOwner\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetQuickTasksAssignedAsPotentialOwnerWithGroupsByStatus() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        endBaseTest(\"QuickTasksAssignedAsPotentialOwnerWithGroupsByStatus\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetQuickTasksAssignedAsPotentialOwnerStatusByExpirationDateOptional() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"QuickTasksAssignedAsPotentialOwnerStatusByExpirationDateOptional\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetQuickTasksAssignedAsPotentialOwnerStatusByExpirationDate() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"QuickTasksAssignedAsPotentialOwnerStatusByExpirationDate\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetNewTasksAssignedAsPotentialOwner() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        endBaseTest(\"NewTasksAssignedAsPotentialOwner\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetNewTasksAssignedAsPotentialOwnerByExpirationDateOptional() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"NewTasksAssignedAsPotentialOwnerByExpirationDateOptional\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetNewTasksAssignedAsPotentialOwnerByExpirationDate() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"NewTasksAssignedAsPotentialOwnerByExpirationDate\", params);\n+\n+    }\n+    \n+    private Task startBaseTest() {\n+        String str = \"(with (new Task()) { priority = 55, taskData = (with( new TaskData() ) { expirationTime = new Date( ), parentId = 2} ), \";\n+        str += \"peopleAssignments = (with ( new PeopleAssignments() ) { \" +\n+                \"   potentialOwners = [new Group('Crusaders'), ], \" +\n+                \"   excludedOwners = [new Group('Administrators'), ], \" +\n+                \"   businessAdministrators = [ new User('Administrator') ], }),\";\n+        str += \"name =  'This is my task name' })\";\n+        Task task = TaskFactory.evalTask(new StringReader(str));\n+        taskService.addTask(task, new HashMap<String, Object>());\n+        return task;\n+    }\n+    private void endBaseTest(String query, Map<String, Object> params) {\n+        \n+        List<TaskSummary> tasks = taskService.execute(new TaskCommand<List<TaskSummary>> () {\n+\n+\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            public List<TaskSummary> execute(Context cntxt) {\n+                TaskContext context = (TaskContext) cntxt;\n+                \n+                return (List<TaskSummary>) context.getPersistenceContext()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxNzQ0OQ==", "bodyText": "Explicit type argument not really needed\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final List<String> groups = new ArrayList<String>();\n          \n          \n            \n                    final List<String> groups = new ArrayList<>();", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r515917449", "createdAt": "2020-11-02T11:45:04Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "diffHunk": "@@ -270,6 +278,234 @@ public void testGetTasksAssignedAsPotentialOwnerWithUserGroupsLangStatus() {\n     }\n     \n     \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerWithNoUserGroupsLangStatus() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a12fb5793bb3034f9d765419367293b0cf29ebc", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/3a12fb5793bb3034f9d765419367293b0cf29ebc", "committedDate": "2020-11-02T14:32:06Z", "message": "[JBPM-9426] No tasks returned when userId == null, exlOwner !=null and groups !=null"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/20678522eed6bd03f535c8a85b4be5c62cca3902", "committedDate": "2020-11-02T08:13:18Z", "message": "[JBPM-9426] No tasks returned when userId == null, exlOwner !=null and groups !=null"}, "afterCommit": {"oid": "3a12fb5793bb3034f9d765419367293b0cf29ebc", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/3a12fb5793bb3034f9d765419367293b0cf29ebc", "committedDate": "2020-11-02T14:32:06Z", "message": "[JBPM-9426] No tasks returned when userId == null, exlOwner !=null and groups !=null"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 809, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}