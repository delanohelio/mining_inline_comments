{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NzM3MDE1", "number": 1808, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0Nzo0NFrOE9jn7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo1NDoxN1rOE_fhiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTgyMjU1OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0Nzo0NFrOH6TkxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzozMTo0MlrOH6zjvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMDE2NA==", "bodyText": "increase indentation\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String TRANSFORMATION = \"Transformation\";\n          \n          \n            \n                  private static final String TRANSFORMATION = \"Transformation\";", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530900164", "createdAt": "2020-11-26T09:47:44Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -50,6 +57,7 @@\n \tpublic static final String LINK_NAME = \"linkName\";\n \tpublic static final String LINK_SOURCE = \"source\";\n \tpublic static final String LINK_TARGET = \"target\";\n+    private static final String TRANSFORMATION = \"Transformation\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzODA0NA==", "bodyText": "Problem here is that this file is old and is using old formatting.\nOld line uses tabs, new lines use spaces, thats why is indented differently\nI can format all lines, but this will make difficult to track changes related with this jira.\nI do not think using old format is a wise choise, so Ill leave up to you, format old code or leave it that way", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531138044", "createdAt": "2020-11-26T16:34:41Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -50,6 +57,7 @@\n \tpublic static final String LINK_NAME = \"linkName\";\n \tpublic static final String LINK_SOURCE = \"source\";\n \tpublic static final String LINK_TARGET = \"target\";\n+    private static final String TRANSFORMATION = \"Transformation\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMDE2NA=="}, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNDE5MA==", "bodyText": "ok, agree - I wasn't aware of this old format. Thanks.", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531424190", "createdAt": "2020-11-27T07:31:42Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -50,6 +57,7 @@\n \tpublic static final String LINK_NAME = \"linkName\";\n \tpublic static final String LINK_SOURCE = \"source\";\n \tpublic static final String LINK_TARGET = \"target\";\n+    private static final String TRANSFORMATION = \"Transformation\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMDE2NA=="}, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTgzMDI0OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0OTozN1rOH6Tpdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjo0MDowMlrOH6iPgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMTM2Nw==", "bodyText": "If we compare change in this line for this PR with current code, string comparation is not exactly the same (upper T in literal TRANSFORMATION). We could add something like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (subNode != null && TRANSFORMATION.equals(subNode.getNodeName())) {\n          \n          \n            \n                        if (subNode != null && TRANSFORMATION.equalsIgnoreCase(subNode.getNodeName())) {", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530901367", "createdAt": "2020-11-26T09:49:37Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -362,7 +359,7 @@ protected void readDataInputAssociation(org.w3c.dom.Node xmlNode,\n             // transformation\n             Transformation transformation = null;\n             subNode = subNode.getNextSibling();\n-            if (subNode != null && \"transformation\".equals(subNode.getNodeName())) {\n+            if (subNode != null && TRANSFORMATION.equals(subNode.getNodeName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0MDQ4MA==", "bodyText": "Good catch, rather than equalIgnoreCase I will use the old string, which is different from the metadata key", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531140480", "createdAt": "2020-11-26T16:40:02Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -362,7 +359,7 @@ protected void readDataInputAssociation(org.w3c.dom.Node xmlNode,\n             // transformation\n             Transformation transformation = null;\n             subNode = subNode.getNextSibling();\n-            if (subNode != null && \"transformation\".equals(subNode.getNodeName())) {\n+            if (subNode != null && TRANSFORMATION.equals(subNode.getNodeName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMTM2Nw=="}, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDAwMDYwOnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDozMDoxOVrOH6VRzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjo0MDo0MFrOH6iQlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyODA3OQ==", "bodyText": "shouldn't we call fireOnMessage instead?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .getProcessEventSupport().fireOnSignal(kcontext.getProcessInstance(), kcontext\n          \n          \n            \n                                .getProcessEventSupport().fireOnMessage(kcontext.getProcessInstance(), kcontext", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530928079", "createdAt": "2020-11-26T10:30:19Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -251,40 +253,35 @@ public void handleMessageNode(final Node node, final Element element,\n \t\t\t\t\tthrow new IllegalArgumentException(\n \t\t\t\t\t\t\t\"Could not find message \" + messageRef);\n \t\t\t\t}\n-                String variable = (String) actionNode.getMetaData(\"MappingVariable\");\n+                message.addOutgoingNode(node);\n+                String mappingVariable = (String) actionNode.getMetaData(\"MappingVariable\");\n                 Variable v = (Variable) ((ProcessBuildData) parser.getData()).getMetaData(\"Variable\");\n-                if (v != null) {\n-                    variable = (String) v.getMetaData(variable);\n-                }\n-\t\t\t\tactionNode.setMetaData(\"MessageType\", message.getType());\n-\t\t\t\tactionNode\n-\t\t\t\t\t\t.setAction(new DroolsConsequenceAction(\n-\t\t\t\t\t\t\t\t\"java\",\n-\t\t\t\t\t\t\t\t\" Object tVariable = \"+ (variable == null ? \"null\" : variable)+\";\"\n-\t\t\t\t\t\t\t\t+ \"org.jbpm.workflow.core.node.Transformation transformation = (org.jbpm.workflow.core.node.Transformation)kcontext.getNodeInstance().getNode().getMetaData().get(\\\"Transformation\\\");\"\n-\t\t\t\t\t\t\t\t+ \"if (transformation != null) {\"\n-\t\t\t\t\t\t\t\t+ \"  tVariable = new org.jbpm.process.core.event.EventTransformerImpl(transformation)\"\n-\t\t\t\t\t\t\t\t+ \"  .transformEvent(\"+(variable == null ? \"null\" : variable)+\");\"\n-\t\t\t\t\t\t\t\t+ \"}\"\n-\t\t\t\t\t\t\t\t+ \"org.drools.core.process.instance.impl.WorkItemImpl workItem = new org.drools.core.process.instance.impl.WorkItemImpl();\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setName(\\\"Send Task\\\");\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setParameter(\\\"MessageType\\\", \\\"\"\n-\t\t\t\t\t\t\t\t\t\t+ message.getType()\n-\t\t\t\t\t\t\t\t\t\t+ \"\\\");\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setDeploymentId((String) kcontext.getKnowledgeRuntime().getEnvironment().get(\\\"deploymentId\\\"));\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ (variable == null ? \"\"\n-\t\t\t\t\t\t\t\t\t\t\t\t: \"workItem.setParameter(\\\"Message\\\", tVariable);\" + EOL)\n-\t\t\t\t\t\t\t\t\t\t+ \"((org.drools.core.process.instance.WorkItemManager) kcontext.getKnowledgeRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\"));\n+                String varName = v != null ? (String) v.getMetaData(mappingVariable) : mappingVariable;\n+                actionNode.setMetaData(\"MessageType\", message.getType());\n+                actionNode.setAction(new JavaDroolsAction(kcontext -> {\n+                    Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode().getMetaData()\n+                            .get(TRANSFORMATION);\n+                    Object tVariable = transformation != null ? new EventTransformerImpl(transformation).transformEvent(\n+                            kcontext.getVariable(varName)) : kcontext.getVariable(varName);\n+                    WorkItemImpl workItem = new WorkItemImpl();\n+                    workItem.setName(\"Send Task\");\n+                    workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+                    workItem.setParameter(\"MessageType\", message.getType());\n+                    workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+                    workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+                    workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\n+                            \"deploymentId\"));\n+                    if (tVariable != null) {\n+                        workItem.setParameter(\"Message\", tVariable);\n+                    }\n+                    ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())\n+                    .getProcessEventSupport().fireOnSignal(kcontext.getProcessInstance(), kcontext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0MDc1OQ==", "bodyText": "thank you", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531140759", "createdAt": "2020-11-26T16:40:40Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -251,40 +253,35 @@ public void handleMessageNode(final Node node, final Element element,\n \t\t\t\t\tthrow new IllegalArgumentException(\n \t\t\t\t\t\t\t\"Could not find message \" + messageRef);\n \t\t\t\t}\n-                String variable = (String) actionNode.getMetaData(\"MappingVariable\");\n+                message.addOutgoingNode(node);\n+                String mappingVariable = (String) actionNode.getMetaData(\"MappingVariable\");\n                 Variable v = (Variable) ((ProcessBuildData) parser.getData()).getMetaData(\"Variable\");\n-                if (v != null) {\n-                    variable = (String) v.getMetaData(variable);\n-                }\n-\t\t\t\tactionNode.setMetaData(\"MessageType\", message.getType());\n-\t\t\t\tactionNode\n-\t\t\t\t\t\t.setAction(new DroolsConsequenceAction(\n-\t\t\t\t\t\t\t\t\"java\",\n-\t\t\t\t\t\t\t\t\" Object tVariable = \"+ (variable == null ? \"null\" : variable)+\";\"\n-\t\t\t\t\t\t\t\t+ \"org.jbpm.workflow.core.node.Transformation transformation = (org.jbpm.workflow.core.node.Transformation)kcontext.getNodeInstance().getNode().getMetaData().get(\\\"Transformation\\\");\"\n-\t\t\t\t\t\t\t\t+ \"if (transformation != null) {\"\n-\t\t\t\t\t\t\t\t+ \"  tVariable = new org.jbpm.process.core.event.EventTransformerImpl(transformation)\"\n-\t\t\t\t\t\t\t\t+ \"  .transformEvent(\"+(variable == null ? \"null\" : variable)+\");\"\n-\t\t\t\t\t\t\t\t+ \"}\"\n-\t\t\t\t\t\t\t\t+ \"org.drools.core.process.instance.impl.WorkItemImpl workItem = new org.drools.core.process.instance.impl.WorkItemImpl();\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setName(\\\"Send Task\\\");\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setParameter(\\\"MessageType\\\", \\\"\"\n-\t\t\t\t\t\t\t\t\t\t+ message.getType()\n-\t\t\t\t\t\t\t\t\t\t+ \"\\\");\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setDeploymentId((String) kcontext.getKnowledgeRuntime().getEnvironment().get(\\\"deploymentId\\\"));\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ (variable == null ? \"\"\n-\t\t\t\t\t\t\t\t\t\t\t\t: \"workItem.setParameter(\\\"Message\\\", tVariable);\" + EOL)\n-\t\t\t\t\t\t\t\t\t\t+ \"((org.drools.core.process.instance.WorkItemManager) kcontext.getKnowledgeRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\"));\n+                String varName = v != null ? (String) v.getMetaData(mappingVariable) : mappingVariable;\n+                actionNode.setMetaData(\"MessageType\", message.getType());\n+                actionNode.setAction(new JavaDroolsAction(kcontext -> {\n+                    Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode().getMetaData()\n+                            .get(TRANSFORMATION);\n+                    Object tVariable = transformation != null ? new EventTransformerImpl(transformation).transformEvent(\n+                            kcontext.getVariable(varName)) : kcontext.getVariable(varName);\n+                    WorkItemImpl workItem = new WorkItemImpl();\n+                    workItem.setName(\"Send Task\");\n+                    workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+                    workItem.setParameter(\"MessageType\", message.getType());\n+                    workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+                    workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+                    workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\n+                            \"deploymentId\"));\n+                    if (tVariable != null) {\n+                        workItem.setParameter(\"Message\", tVariable);\n+                    }\n+                    ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())\n+                    .getProcessEventSupport().fireOnSignal(kcontext.getProcessInstance(), kcontext", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyODA3OQ=="}, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDAxOTQ4OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/core/Message.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDozNTowN1rOH6Vdvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjo1MTozOVrOH6ikpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMTEzNA==", "bodyText": "just thinking aloud and wondering whether it's safe to return a mutable collection here? wdyt?", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530931134", "createdAt": "2020-11-26T10:35:07Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/core/Message.java", "diffHunk": "@@ -50,4 +56,19 @@ public void setName(String name) {\n \t\tthis.name = name;\n \t}\n \n+    public void addIncomingNode(Node node) {\n+        incomingNodes.add(node);\n+    }\n+\n+    public void addOutgoingNode(Node node) {\n+        outgoingNodes.add(node);\n+    }\n+\n+    public Collection<Node> getIncomingNodes() {\n+        return incomingNodes;\n+    }\n+\n+    public Collection<Node> getOutgoingNodes() {\n+        return outgoingNodes;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0NTg5Mw==", "bodyText": "sure, changing it", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531145893", "createdAt": "2020-11-26T16:51:39Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/core/Message.java", "diffHunk": "@@ -50,4 +56,19 @@ public void setName(String name) {\n \t\tthis.name = name;\n \t}\n \n+    public void addIncomingNode(Node node) {\n+        incomingNodes.add(node);\n+    }\n+\n+    public void addOutgoingNode(Node node) {\n+        outgoingNodes.add(node);\n+    }\n+\n+    public Collection<Node> getIncomingNodes() {\n+        return incomingNodes;\n+    }\n+\n+    public Collection<Node> getOutgoingNodes() {\n+        return outgoingNodes;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMTEzNA=="}, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDAyNDkwOnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/core/Signal.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDozNjoyNlrOH6Vg_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjo0NzoyNFrOH6icyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMTk2Ng==", "bodyText": "just thinking aloud and wondering whether it's safe to return a mutable collection here? wdyt?", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530931966", "createdAt": "2020-11-26T10:36:26Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/core/Signal.java", "diffHunk": "@@ -48,4 +54,19 @@ public String getName() {\n \t\treturn name;\n \t}\n \n+    public void addIncomingNode(Node node) {\n+        incomingNodes.add(node);\n+    }\n+\n+    public void addOutgoingNode(Node node) {\n+        outgoingNodes.add(node);\n+    }\n+\n+    public Collection<Node> getIncomingNodes() {\n+        return incomingNodes;\n+    }\n+\n+    public Collection<Node> getOutgoingNodes() {\n+        return outgoingNodes;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0Mzg4MA==", "bodyText": "and in message, yes, doing it", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531143880", "createdAt": "2020-11-26T16:47:24Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/core/Signal.java", "diffHunk": "@@ -48,4 +54,19 @@ public String getName() {\n \t\treturn name;\n \t}\n \n+    public void addIncomingNode(Node node) {\n+        incomingNodes.add(node);\n+    }\n+\n+    public void addOutgoingNode(Node node) {\n+        outgoingNodes.add(node);\n+    }\n+\n+    public Collection<Node> getIncomingNodes() {\n+        return incomingNodes;\n+    }\n+\n+    public Collection<Node> getOutgoingNodes() {\n+        return outgoingNodes;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMTk2Ng=="}, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDE1MjczOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/SignalDescBaseImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTowOToyMVrOH6Wvsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzozMjo1OVrOH6zlvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1MjExNQ==", "bodyText": "I think hashCode and equals methods might need to change to reflect these two new members.\nAlso toString should also accommodate these two new members", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530952115", "createdAt": "2020-11-26T11:09:21Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/SignalDescBaseImpl.java", "diffHunk": "@@ -46,6 +55,16 @@ public String getStructureRef() {\n         return structureRef;\n     }\n \n+    @Override\n+    public Collection<Node> getIncomingNodes() {\n+        return incomingNodes;\n+    }\n+\n+    @Override\n+    public Collection<Node> getOutgoingNodes() {\n+        return outgoingNodes;\n+    }\n+\n     @Override\n     public int hashCode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0NDUxOA==", "bodyText": "hmmmm, toString yes, but these two fields are not part of the identity of the class, so they should not be included in equals and hashnode (besides performance reasons)", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531144518", "createdAt": "2020-11-26T16:48:48Z", "author": {"login": "fjtirado"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/SignalDescBaseImpl.java", "diffHunk": "@@ -46,6 +55,16 @@ public String getStructureRef() {\n         return structureRef;\n     }\n \n+    @Override\n+    public Collection<Node> getIncomingNodes() {\n+        return incomingNodes;\n+    }\n+\n+    @Override\n+    public Collection<Node> getOutgoingNodes() {\n+        return outgoingNodes;\n+    }\n+\n     @Override\n     public int hashCode() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1MjExNQ=="}, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNDcwMQ==", "bodyText": "ok, thanks", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531424701", "createdAt": "2020-11-27T07:32:59Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/SignalDescBaseImpl.java", "diffHunk": "@@ -46,6 +55,16 @@ public String getStructureRef() {\n         return structureRef;\n     }\n \n+    @Override\n+    public Collection<Node> getIncomingNodes() {\n+        return incomingNodes;\n+    }\n+\n+    @Override\n+    public Collection<Node> getOutgoingNodes() {\n+        return outgoingNodes;\n+    }\n+\n     @Override\n     public int hashCode() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1MjExNQ=="}, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDE3MDE3OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMToxNDoxMFrOH6W6fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzozNDoyMlrOH6zncg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1NDg3OA==", "bodyText": "maybe default can avoid any backward issues? wdyt?", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530954878", "createdAt": "2020-11-26T11:14:10Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -498,8 +499,17 @@\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n+    /**\n+     * Adds a process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void addProcessEventListener(String deploymentId, ProcessEventListener listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0Mjc0MA==", "bodyText": "Yes, I thought about this, but in this case this method do not have a proper empty implementation. Also this is a service, I mean internal to JBPM, so we knoe we have just one implementation", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531142740", "createdAt": "2020-11-26T16:44:57Z", "author": {"login": "fjtirado"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -498,8 +499,17 @@\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n+    /**\n+     * Adds a process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void addProcessEventListener(String deploymentId, ProcessEventListener listener);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1NDg3OA=="}, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNTEzOA==", "bodyText": "ok", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531425138", "createdAt": "2020-11-27T07:34:22Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -498,8 +499,17 @@\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n+    /**\n+     * Adds a process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void addProcessEventListener(String deploymentId, ProcessEventListener listener);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1NDg3OA=="}, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDE3MDcxOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMToxNDoxOFrOH6W61w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjo0NzowN1rOH6icMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1NDk2Nw==", "bodyText": "same as above", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530954967", "createdAt": "2020-11-26T11:14:18Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -498,8 +499,17 @@\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n+    /**\n+     * Adds a process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void addProcessEventListener(String deploymentId, ProcessEventListener listener);\n \n-\n-\n-\n+    /**\n+     * Remove process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void removeProcessEventListener(String deploymentId, ProcessEventListener listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0MzcyOA==", "bodyText": "same rationale as above", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531143728", "createdAt": "2020-11-26T16:47:07Z", "author": {"login": "fjtirado"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -498,8 +499,17 @@\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n+    /**\n+     * Adds a process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void addProcessEventListener(String deploymentId, ProcessEventListener listener);\n \n-\n-\n-\n+    /**\n+     * Remove process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void removeProcessEventListener(String deploymentId, ProcessEventListener listener);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1NDk2Nw=="}, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDI1MzQzOnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTozNzoxNFrOH6Xtcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzozMToyMVrOH6jntw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NzkyMg==", "bodyText": "Shouldn't we replace below code DroolsConsequenceAction with JavaDroolsAction new class instead? so we can follow the same approach as per IntermidiateEventHandler class?\n\n  \n    \n      jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\n    \n    \n        Lines 188 to 197\n      in\n      7266943\n    \n    \n    \n    \n\n        \n          \n                      actions.add(new DroolsConsequenceAction(\"java\", \n        \n\n        \n          \n                          \"org.drools.core.process.instance.impl.WorkItemImpl workItem = new org.drools.core.process.instance.impl.WorkItemImpl();\" + EOL + \n        \n\n        \n          \n                          \"workItem.setName(\\\"Send Task\\\");\" + EOL + \n        \n\n        \n          \n                          \"workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\" + EOL + \n        \n\n        \n          \n                          \"workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\" + EOL + \n        \n\n        \n          \n                          \"workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\" + EOL + \n        \n\n        \n          \n                          \"workItem.setParameter(\\\"MessageType\\\", \\\"\" + message.getType() + \"\\\");\" + EOL + \n        \n\n        \n          \n                          (variable == null ? \"\" : \"workItem.setParameter(\\\"Message\\\", \" + variable + \");\" + EOL) + \n        \n\n        \n          \n           \"workItem.setDeploymentId((String) kcontext.getKnowledgeRuntime().getEnvironment().get(\\\"deploymentId\\\"));\" + EOL + \n        \n\n        \n          \n                          \"((org.drools.core.process.instance.WorkItemManager) kcontext.getKnowledgeRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\")); \n        \n    \n  \n\n\nwith some similar approach to this we've used below?\n\n  \n    \n      jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n    \n    \n        Lines 261 to 284\n      in\n      7266943\n    \n    \n    \n    \n\n        \n          \n           actionNode.setAction(new JavaDroolsAction(kcontext -> { \n        \n\n        \n          \n               Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode().getMetaData() \n        \n\n        \n          \n                       .get(TRANSFORMATION); \n        \n\n        \n          \n               Object tVariable = transformation != null ? new EventTransformerImpl(transformation).transformEvent( \n        \n\n        \n          \n                       kcontext.getVariable(varName)) : kcontext.getVariable(varName); \n        \n\n        \n          \n               WorkItemImpl workItem = new WorkItemImpl(); \n        \n\n        \n          \n               workItem.setName(\"Send Task\"); \n        \n\n        \n          \n               workItem.setProcessInstanceId(kcontext.getProcessInstance().getId()); \n        \n\n        \n          \n               workItem.setParameter(\"MessageType\", message.getType()); \n        \n\n        \n          \n               workItem.setNodeInstanceId(kcontext.getNodeInstance().getId()); \n        \n\n        \n          \n               workItem.setNodeId(kcontext.getNodeInstance().getNodeId()); \n        \n\n        \n          \n               workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get( \n        \n\n        \n          \n                       \"deploymentId\")); \n        \n\n        \n          \n               if (tVariable != null) { \n        \n\n        \n          \n                   workItem.setParameter(\"Message\", tVariable); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime()) \n        \n\n        \n          \n               .getProcessEventSupport().fireOnSignal(kcontext.getProcessInstance(), kcontext \n        \n\n        \n          \n                       .getNodeInstance(), kcontext.getKieRuntime(), message.getName(), tVariable); \n        \n\n        \n          \n                \n        \n\n        \n          \n               ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem( \n        \n\n        \n          \n                       workItem); \n        \n\n        \n          \n             \n        \n\n        \n          \n           }));", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530967922", "createdAt": "2020-11-26T11:37:14Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java", "diffHunk": "@@ -181,6 +180,7 @@ public void handleMessageNode(final Node node, final Element element, final Stri\n                 if (message == null) {\n                     throw new IllegalArgumentException(\"Could not find message \" + messageRef);\n                 }\n+                message.addOutgoingNode(node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0MzE5NA==", "bodyText": "you are right", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531143194", "createdAt": "2020-11-26T16:45:51Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java", "diffHunk": "@@ -181,6 +180,7 @@ public void handleMessageNode(final Node node, final Element element, final Stri\n                 if (message == null) {\n                     throw new IllegalArgumentException(\"Could not find message \" + messageRef);\n                 }\n+                message.addOutgoingNode(node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NzkyMg=="}, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2MzA2Mw==", "bodyText": "Fixed for message, but studying how to do it for signal", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531163063", "createdAt": "2020-11-26T17:31:21Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java", "diffHunk": "@@ -181,6 +180,7 @@ public void handleMessageNode(final Node node, final Element element, final Stri\n                 if (message == null) {\n                     throw new IllegalArgumentException(\"Could not find message \" + messageRef);\n                 }\n+                message.addOutgoingNode(node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NzkyMg=="}, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDI5MTAxOnYy", "diffSide": "RIGHT", "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/ActionNodeBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTo0Nzo0OVrOH6YERg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzozNToyMlrOH6zozA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3Mzc2Ng==", "bodyText": "I'm just wondering what if the action is not an instance of DroolsConsequenceAction? it's ok if we don't do anything in that case (like JavaDroolsAction)? wdyt?", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530973766", "createdAt": "2020-11-26T11:47:49Z", "author": {"login": "afalhambra"}, "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/ActionNodeBuilder.java", "diffHunk": "@@ -41,13 +41,15 @@ public void build(Process process,\n                       Node node) {\n     \tsuper.build(process, processDescr, context, node);\n         ActionNode actionNode = ( ActionNode ) node;\n-        DroolsConsequenceAction action = (DroolsConsequenceAction) actionNode.getAction();\n-        ActionDescr actionDescr = new ActionDescr();\n-        actionDescr.setText( action.getConsequence() );\n-        actionDescr.setResource(processDescr.getResource());\n+        if (actionNode.getAction() instanceof DroolsConsequenceAction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0MzU5Ng==", "bodyText": "Good question. If the action is not a droolsconsequenceaction we do not need to build it, it is already built", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531143596", "createdAt": "2020-11-26T16:46:48Z", "author": {"login": "fjtirado"}, "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/ActionNodeBuilder.java", "diffHunk": "@@ -41,13 +41,15 @@ public void build(Process process,\n                       Node node) {\n     \tsuper.build(process, processDescr, context, node);\n         ActionNode actionNode = ( ActionNode ) node;\n-        DroolsConsequenceAction action = (DroolsConsequenceAction) actionNode.getAction();\n-        ActionDescr actionDescr = new ActionDescr();\n-        actionDescr.setText( action.getConsequence() );\n-        actionDescr.setResource(processDescr.getResource());\n+        if (actionNode.getAction() instanceof DroolsConsequenceAction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3Mzc2Ng=="}, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNTQ4NA==", "bodyText": "ok, thanks for clarifying.", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531425484", "createdAt": "2020-11-27T07:35:22Z", "author": {"login": "afalhambra"}, "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/ActionNodeBuilder.java", "diffHunk": "@@ -41,13 +41,15 @@ public void build(Process process,\n                       Node node) {\n     \tsuper.build(process, processDescr, context, node);\n         ActionNode actionNode = ( ActionNode ) node;\n-        DroolsConsequenceAction action = (DroolsConsequenceAction) actionNode.getAction();\n-        ActionDescr actionDescr = new ActionDescr();\n-        actionDescr.setText( action.getConsequence() );\n-        actionDescr.setResource(processDescr.getResource());\n+        if (actionNode.getAction() instanceof DroolsConsequenceAction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3Mzc2Ng=="}, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDEyNzY4OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTo0ODo0MFrOH67jCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo0MjoyOVrOH9OAvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1NTA4MQ==", "bodyText": "Signal use External Send Task", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531555081", "createdAt": "2020-11-27T11:48:40Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.impl.NodeImpl;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.manager.RuntimeManager;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendSignalAction implements Action {\n+\n+    private String signalName;\n+    private String varName;\n+    private boolean isAsync;\n+    private NodeImpl node;\n+\n+    public SendSignalAction(NodeImpl node, String variable, String signalName, boolean isAsync) {\n+        this.node = node;\n+        this.varName = variable;\n+        this.signalName = signalName;\n+        this.isAsync = isAsync;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = kcontext.getVariable(varName);\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode()\n+                .getMetaData().get(\"Transformation\");\n+        if (transformation != null) {\n+            tVariable = new EventTransformerImpl(transformation).transformEvent(tVariable);\n+        }\n+        String signalType = VariableUtil.resolveVariable(isAsync ? \"ASYNC-\" + signalName : signalName, kcontext\n+                .getNodeInstance());\n+        String scope = (String) node.getMetaData(\"customScope\");\n+        if (\"processInstance\".equalsIgnoreCase(scope)) {\n+            kcontext.getProcessInstance().signalEvent(signalType, tVariable);\n+        } else if (\"runtimeManager\".equalsIgnoreCase(scope) || \"project\".equalsIgnoreCase(scope)) {\n+            ((RuntimeManager) kcontext.getKieRuntime().getEnvironment().get(\"RuntimeManager\")).signalEvent(signalType,\n+                    tVariable);\n+        } else if (\"external\".equalsIgnoreCase(scope)) {\n+            ((InternalProcessRuntime) kcontext.getKieRuntime()).getProcessEventSupport().fireOnSignal(kcontext\n+                    .getProcessInstance(), kcontext.getNodeInstance(), kcontext.getKieRuntime(), signalName, tVariable);\n+            WorkItemImpl workItem = new WorkItemImpl();\n+            workItem.setName(\"External Send Task\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36998ac342552e193506c1ee55e89e09887c1160"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1NDc0OQ==", "bodyText": "the work item handler is not required. remove it.", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533954749", "createdAt": "2020-12-02T07:42:29Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.impl.NodeImpl;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.manager.RuntimeManager;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendSignalAction implements Action {\n+\n+    private String signalName;\n+    private String varName;\n+    private boolean isAsync;\n+    private NodeImpl node;\n+\n+    public SendSignalAction(NodeImpl node, String variable, String signalName, boolean isAsync) {\n+        this.node = node;\n+        this.varName = variable;\n+        this.signalName = signalName;\n+        this.isAsync = isAsync;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = kcontext.getVariable(varName);\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode()\n+                .getMetaData().get(\"Transformation\");\n+        if (transformation != null) {\n+            tVariable = new EventTransformerImpl(transformation).transformEvent(tVariable);\n+        }\n+        String signalType = VariableUtil.resolveVariable(isAsync ? \"ASYNC-\" + signalName : signalName, kcontext\n+                .getNodeInstance());\n+        String scope = (String) node.getMetaData(\"customScope\");\n+        if (\"processInstance\".equalsIgnoreCase(scope)) {\n+            kcontext.getProcessInstance().signalEvent(signalType, tVariable);\n+        } else if (\"runtimeManager\".equalsIgnoreCase(scope) || \"project\".equalsIgnoreCase(scope)) {\n+            ((RuntimeManager) kcontext.getKieRuntime().getEnvironment().get(\"RuntimeManager\")).signalEvent(signalType,\n+                    tVariable);\n+        } else if (\"external\".equalsIgnoreCase(scope)) {\n+            ((InternalProcessRuntime) kcontext.getKieRuntime()).getProcessEventSupport().fireOnSignal(kcontext\n+                    .getProcessInstance(), kcontext.getNodeInstance(), kcontext.getKieRuntime(), signalName, tVariable);\n+            WorkItemImpl workItem = new WorkItemImpl();\n+            workItem.setName(\"External Send Task\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1NTA4MQ=="}, "originalCommit": {"oid": "36998ac342552e193506c1ee55e89e09887c1160"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDEyOTE2OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTo0OTowM1rOH67j3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTo0OTowM1rOH67j3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1NTI5Mw==", "bodyText": "Should we catch WorkItemHandlerNotFoundException in case user has not registered a handler for signal?", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531555293", "createdAt": "2020-11-27T11:49:03Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.impl.NodeImpl;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.manager.RuntimeManager;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendSignalAction implements Action {\n+\n+    private String signalName;\n+    private String varName;\n+    private boolean isAsync;\n+    private NodeImpl node;\n+\n+    public SendSignalAction(NodeImpl node, String variable, String signalName, boolean isAsync) {\n+        this.node = node;\n+        this.varName = variable;\n+        this.signalName = signalName;\n+        this.isAsync = isAsync;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = kcontext.getVariable(varName);\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode()\n+                .getMetaData().get(\"Transformation\");\n+        if (transformation != null) {\n+            tVariable = new EventTransformerImpl(transformation).transformEvent(tVariable);\n+        }\n+        String signalType = VariableUtil.resolveVariable(isAsync ? \"ASYNC-\" + signalName : signalName, kcontext\n+                .getNodeInstance());\n+        String scope = (String) node.getMetaData(\"customScope\");\n+        if (\"processInstance\".equalsIgnoreCase(scope)) {\n+            kcontext.getProcessInstance().signalEvent(signalType, tVariable);\n+        } else if (\"runtimeManager\".equalsIgnoreCase(scope) || \"project\".equalsIgnoreCase(scope)) {\n+            ((RuntimeManager) kcontext.getKieRuntime().getEnvironment().get(\"RuntimeManager\")).signalEvent(signalType,\n+                    tVariable);\n+        } else if (\"external\".equalsIgnoreCase(scope)) {\n+            ((InternalProcessRuntime) kcontext.getKieRuntime()).getProcessEventSupport().fireOnSignal(kcontext\n+                    .getProcessInstance(), kcontext.getNodeInstance(), kcontext.getKieRuntime(), signalName, tVariable);\n+            WorkItemImpl workItem = new WorkItemImpl();\n+            workItem.setName(\"External Send Task\");\n+            workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+            workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+            workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+            workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\"deploymentId\"));\n+            workItem.setParameter(\"Signal\", signalType);\n+            workItem.setParameter(\"SignalProcessInstanceId\", kcontext.getVariable(\"SignalProcessInstanceId\"));\n+            workItem.setParameter(\"SignalWorkItemId\", kcontext.getVariable(\"SignalWorkItemId\"));\n+            workItem.setParameter(\"SignalDeploymentId\", kcontext.getVariable(\"SignalDeploymentId\"));\n+            if (tVariable != null) {\n+                workItem.setParameter(\"Data\", tVariable);\n+            }\n+            ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36998ac342552e193506c1ee55e89e09887c1160"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDEzMTI4OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTo0OTozNlrOH67lBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTo0OTozNlrOH67lBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1NTU5MQ==", "bodyText": "Message use Send Task", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531555591", "createdAt": "2020-11-27T11:49:36Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendMessageAction implements Action {\n+\n+    private String varName;\n+    private Message message;\n+\n+    public SendMessageAction(String varName, Message message) {\n+        this.varName = varName;\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode().getMetaData()\n+                .get(\"Transformation\");\n+        Object tVariable = transformation != null ? new EventTransformerImpl(transformation).transformEvent(\n+                kcontext.getVariable(varName)) : kcontext.getVariable(varName);\n+        WorkItemImpl workItem = new WorkItemImpl();\n+        workItem.setName(\"Send Task\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36998ac342552e193506c1ee55e89e09887c1160"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDEzMjM1OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTo0OTo1NlrOH67lqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo0Njo0NFrOH9OIUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1NTc1NA==", "bodyText": "Should we catch WorkItemHandlerNotFoundException in case user has not registered a handler for message?", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531555754", "createdAt": "2020-11-27T11:49:56Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendMessageAction implements Action {\n+\n+    private String varName;\n+    private Message message;\n+\n+    public SendMessageAction(String varName, Message message) {\n+        this.varName = varName;\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode().getMetaData()\n+                .get(\"Transformation\");\n+        Object tVariable = transformation != null ? new EventTransformerImpl(transformation).transformEvent(\n+                kcontext.getVariable(varName)) : kcontext.getVariable(varName);\n+        WorkItemImpl workItem = new WorkItemImpl();\n+        workItem.setName(\"Send Task\");\n+        workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+        workItem.setParameter(\"MessageType\", message.getType());\n+        workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+        workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+        workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\"deploymentId\"));\n+        if (tVariable != null) {\n+            workItem.setParameter(\"Message\", tVariable);\n+        }\n+        ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())\n+                .getProcessEventSupport().fireOnMessage(kcontext.getProcessInstance(), kcontext\n+                        .getNodeInstance(), kcontext.getKieRuntime(), message.getName(), tVariable);\n+        ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36998ac342552e193506c1ee55e89e09887c1160"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1NjY5MQ==", "bodyText": "put the signal fire at the begining and before executing the work item check if it is registered", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533956691", "createdAt": "2020-12-02T07:46:44Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendMessageAction implements Action {\n+\n+    private String varName;\n+    private Message message;\n+\n+    public SendMessageAction(String varName, Message message) {\n+        this.varName = varName;\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode().getMetaData()\n+                .get(\"Transformation\");\n+        Object tVariable = transformation != null ? new EventTransformerImpl(transformation).transformEvent(\n+                kcontext.getVariable(varName)) : kcontext.getVariable(varName);\n+        WorkItemImpl workItem = new WorkItemImpl();\n+        workItem.setName(\"Send Task\");\n+        workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+        workItem.setParameter(\"MessageType\", message.getType());\n+        workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+        workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+        workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\"deploymentId\"));\n+        if (tVariable != null) {\n+            workItem.setParameter(\"Message\", tVariable);\n+        }\n+        ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())\n+                .getProcessEventSupport().fireOnMessage(kcontext.getProcessInstance(), kcontext\n+                        .getNodeInstance(), kcontext.getKieRuntime(), message.getName(), tVariable);\n+        ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1NTc1NA=="}, "originalCommit": {"oid": "36998ac342552e193506c1ee55e89e09887c1160"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNTMxNzE1OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxOTowMToyNVrOH7Gf3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo0MTozNVrOH9N_DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTczNDQ5Mw==", "bodyText": "Please note that event is fired only if the signal has scope external", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531734493", "createdAt": "2020-11-27T19:01:25Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.compiler.compiler.xml.XmlDumper;\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.Node;\n+import org.jbpm.workflow.core.impl.NodeImpl;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.manager.RuntimeManager;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendSignalAction implements Action {\n+\n+    private String signalName;\n+    private String varName;\n+    private boolean isAsync;\n+    private NodeImpl node;\n+\n+    public SendSignalAction(NodeImpl node, String variable, String signalName, boolean isAsync) {\n+        this.node = node;\n+        this.varName = variable;\n+        this.signalName = signalName;\n+        this.isAsync = isAsync;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = kcontext.getVariable(varName);\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode()\n+                .getMetaData().get(\"Transformation\");\n+        if (transformation != null) {\n+            tVariable = new EventTransformerImpl(transformation).transformEvent(tVariable);\n+        }\n+        String signalType = VariableUtil.resolveVariable(isAsync ? \"ASYNC-\" + signalName : signalName, kcontext\n+                .getNodeInstance());\n+        String scope = (String) node.getMetaData(\"customScope\");\n+        if (\"processInstance\".equalsIgnoreCase(scope)) {\n+            kcontext.getProcessInstance().signalEvent(signalType, tVariable);\n+        } else if (\"runtimeManager\".equalsIgnoreCase(scope) || \"project\".equalsIgnoreCase(scope)) {\n+            ((RuntimeManager) kcontext.getKieRuntime().getEnvironment().get(\"RuntimeManager\")).signalEvent(signalType,\n+                    tVariable);\n+        } else if (\"external\".equalsIgnoreCase(scope)) {\n+            ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e118343280509172fa6d98cde72d91f5225c439a"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1NDMxNg==", "bodyText": "not required. on Signal should be send always. please remove this condition.", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533954316", "createdAt": "2020-12-02T07:41:35Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.compiler.compiler.xml.XmlDumper;\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.Node;\n+import org.jbpm.workflow.core.impl.NodeImpl;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.manager.RuntimeManager;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendSignalAction implements Action {\n+\n+    private String signalName;\n+    private String varName;\n+    private boolean isAsync;\n+    private NodeImpl node;\n+\n+    public SendSignalAction(NodeImpl node, String variable, String signalName, boolean isAsync) {\n+        this.node = node;\n+        this.varName = variable;\n+        this.signalName = signalName;\n+        this.isAsync = isAsync;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = kcontext.getVariable(varName);\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode()\n+                .getMetaData().get(\"Transformation\");\n+        if (transformation != null) {\n+            tVariable = new EventTransformerImpl(transformation).transformEvent(tVariable);\n+        }\n+        String signalType = VariableUtil.resolveVariable(isAsync ? \"ASYNC-\" + signalName : signalName, kcontext\n+                .getNodeInstance());\n+        String scope = (String) node.getMetaData(\"customScope\");\n+        if (\"processInstance\".equalsIgnoreCase(scope)) {\n+            kcontext.getProcessInstance().signalEvent(signalType, tVariable);\n+        } else if (\"runtimeManager\".equalsIgnoreCase(scope) || \"project\".equalsIgnoreCase(scope)) {\n+            ((RuntimeManager) kcontext.getKieRuntime().getEnvironment().get(\"RuntimeManager\")).signalEvent(signalType,\n+                    tVariable);\n+        } else if (\"external\".equalsIgnoreCase(scope)) {\n+            ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTczNDQ5Mw=="}, "originalCommit": {"oid": "e118343280509172fa6d98cde72d91f5225c439a"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDA3MDUwOnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/test/resources/BPMN2-EndEventSignalWithData.bpmn2", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzozNzo1NFrOH9N4fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDozODoxNlrOH9Uu_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1MjYzOQ==", "bodyText": "As it seems you are going on further improvements already (modeling operations at bpmn process level changes this for).\nimplementation\nand the value should be\n##Kafka\nto be align with the spec", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533952639", "createdAt": "2020-12-02T07:37:54Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/test/resources/BPMN2-EndEventSignalWithData.bpmn2", "diffHunk": "@@ -4,8 +4,8 @@\n   <bpmn2:process id=\"src.simpleEndSignal\" drools:packageName=\"com.myteam.testit\" drools:version=\"1.0\" name=\"simpleEndSignal\" isExecutable=\"true\">\n     <bpmn2:startEvent id=\"processStartEvent\" drools:selectable=\"true\" color:background-color=\"#9acd32\" color:border-color=\"#000000\" color:color=\"#000000\" name=\"\">\n       <bpmn2:extensionElements>\n-        <drools:metaData name=\"elementname\">\n-          <drools:metaValue><![CDATA[]]></drools:metaValue>\n+        <drools:metaData name=\"customScope\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA2NDg5NQ==", "bodyText": "ok, done", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r534064895", "createdAt": "2020-12-02T10:38:16Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/test/resources/BPMN2-EndEventSignalWithData.bpmn2", "diffHunk": "@@ -4,8 +4,8 @@\n   <bpmn2:process id=\"src.simpleEndSignal\" drools:packageName=\"com.myteam.testit\" drools:version=\"1.0\" name=\"simpleEndSignal\" isExecutable=\"true\">\n     <bpmn2:startEvent id=\"processStartEvent\" drools:selectable=\"true\" color:background-color=\"#9acd32\" color:border-color=\"#000000\" color:color=\"#000000\" name=\"\">\n       <bpmn2:extensionElements>\n-        <drools:metaData name=\"elementname\">\n-          <drools:metaValue><![CDATA[]]></drools:metaValue>\n+        <drools:metaData name=\"customScope\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1MjYzOQ=="}, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDA5NTg2OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo0NTo1NVrOH9OG6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDozMTo1N1rOH9UfZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1NjMyOQ==", "bodyText": "this transformation is in the wrong place. plz remove", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533956329", "createdAt": "2020-12-02T07:45:55Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.compiler.compiler.xml.XmlDumper;\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.JavaAction;\n+import org.jbpm.workflow.core.Node;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendMessageAction implements JavaAction {\n+\n+    private static final long serialVersionUID = 1L;\n+    private String varName;\n+    private Message message;\n+\n+    public SendMessageAction(String varName, Message message) {\n+        this.varName = varName;\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = VariableResolver.getVariable(kcontext, varName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA2MDkwMw==", "bodyText": "will be done in a different JIRA", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r534060903", "createdAt": "2020-12-02T10:31:57Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.compiler.compiler.xml.XmlDumper;\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.JavaAction;\n+import org.jbpm.workflow.core.Node;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendMessageAction implements JavaAction {\n+\n+    private static final long serialVersionUID = 1L;\n+    private String varName;\n+    private Message message;\n+\n+    public SendMessageAction(String varName, Message message) {\n+        this.varName = varName;\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = VariableResolver.getVariable(kcontext, varName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1NjMyOQ=="}, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDExMTE4OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/ProcessServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo1MDo1NFrOH9OP4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo1MDo1NFrOH9OP4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1ODYyNw==", "bodyText": "not required. remove this. duplicated api", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533958627", "createdAt": "2020-12-02T07:50:54Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/ProcessServiceImpl.java", "diffHunk": "@@ -854,5 +855,26 @@ protected void disposeRuntimeEngine(RuntimeManager manager, RuntimeEngine engine\n \t\tmanager.disposeRuntimeEngine(engine);\n \t}\n \n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDExMjE0OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo1MToxMVrOH9OQbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo1MToxMVrOH9OQbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1ODc2Ng==", "bodyText": "remove", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533958766", "createdAt": "2020-12-02T07:51:11Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -498,8 +499,17 @@\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n+    /**\n+     * Adds a process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void addProcessEventListener(String deploymentId, ProcessEventListener listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDExMjQ2OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo1MToxNlrOH9OQnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo1MToxNlrOH9OQnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1ODgxNQ==", "bodyText": "remove", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533958815", "createdAt": "2020-12-02T07:51:16Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -498,8 +499,17 @@\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n+    /**\n+     * Adds a process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void addProcessEventListener(String deploymentId, ProcessEventListener listener);\n \n-\n-\n-\n+    /**\n+     * Remove process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void removeProcessEventListener(String deploymentId, ProcessEventListener listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDExMzI3OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-services-api/src/build/revapi-config.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo1MToyOFrOH9ORFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo1MToyOFrOH9ORFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1ODkzMg==", "bodyText": "not needed.", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533958932", "createdAt": "2020-12-02T07:51:28Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-services-api/src/build/revapi-config.json", "diffHunk": "@@ -71,6 +71,24 @@\n                   \"methodName\": \"getMessagesDesc\",\n                   \"elementKind\": \"method\",\n                   \"justification\": \"https://issues.redhat.com/browse/JBPM-9436\"\n+                },\n+                {\n+                  \"code\": \"java.method.addedToInterface\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDExNTc1OnYy", "diffSide": "RIGHT", "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/impl/JavaAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo1MjoxNVrOH9OSnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDozMDoxNVrOH9UbQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1OTMyNQ==", "bodyText": "remove this. An action is not the place to put dumper logic", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533959325", "createdAt": "2020-12-02T07:52:15Z", "author": {"login": "elguardian"}, "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/impl/JavaAction.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl;\n+\n+import java.io.Serializable;\n+\n+import org.jbpm.workflow.core.Node;\n+\n+public interface JavaAction extends Serializable, Action {\n+\n+    void dumpXML(Node node, StringBuilder xmlDump);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA1OTg0Mg==", "bodyText": "ok, I was trying to force all future writers of a java action to remember they have to provide the dump logic or the engine  will crash at runtime.", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r534059842", "createdAt": "2020-12-02T10:30:15Z", "author": {"login": "fjtirado"}, "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/impl/JavaAction.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl;\n+\n+import java.io.Serializable;\n+\n+import org.jbpm.workflow.core.Node;\n+\n+public interface JavaAction extends Serializable, Action {\n+\n+    void dumpXML(Node node, StringBuilder xmlDump);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1OTMyNQ=="}, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDExOTUzOnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/VariableResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo1MzoyOVrOH9OVBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDoyOToxN1rOH9UYTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1OTk0Mg==", "bodyText": "this logic should be in the incoming input association. you are spreading the logic.\nJust add one item to that (you have the variable plus the transformation it is easy to build in there instead of here).", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533959942", "createdAt": "2020-12-02T07:53:29Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/VariableResolver.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.bpmn2.handler;\n+\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+class VariableResolver {\n+\n+    private VariableResolver() {}\n+\n+    public static Object getVariable(ProcessContext kcontext, String varName) {\n+        Object tVariable = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA1OTA4NA==", "bodyText": "since this is just a copy of the current functionality in drools action (which have been translated to Java), that change is out of the scope of this JIRA and will be handled with a different one.", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r534059084", "createdAt": "2020-12-02T10:29:17Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/VariableResolver.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.bpmn2.handler;\n+\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+class VariableResolver {\n+\n+    private VariableResolver() {}\n+\n+    public static Object getVariable(ProcessContext kcontext, String varName) {\n+        Object tVariable = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1OTk0Mg=="}, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDEyMTI1OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo1NDowMVrOH9OV9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDoyODowNlrOH9UVKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk2MDE4MQ==", "bodyText": "put this logic in the handler not here.", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533960181", "createdAt": "2020-12-02T07:54:01Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.compiler.compiler.xml.XmlDumper;\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.JavaAction;\n+import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.Node;\n+import org.jbpm.workflow.core.impl.NodeImpl;\n+import org.kie.api.runtime.manager.RuntimeManager;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendSignalAction implements JavaAction {\n+\n+    private static final long serialVersionUID = 1L;\n+    private String signalName;\n+    private String varName;\n+    private boolean isAsync;\n+    private NodeImpl node;\n+\n+    public SendSignalAction(NodeImpl node, String variable, String signalName, boolean isAsync) {\n+        this.node = node;\n+        this.varName = variable;\n+        this.signalName = signalName;\n+        this.isAsync = isAsync;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = VariableResolver.getVariable(kcontext, varName);\n+        String signalType = VariableUtil.resolveVariable(isAsync ? \"ASYNC-\" + signalName : signalName, kcontext\n+                .getNodeInstance());\n+        String scope = (String) node.getMetaData(\"customScope\");\n+        if (\"processInstance\".equalsIgnoreCase(scope)) {\n+            kcontext.getProcessInstance().signalEvent(signalType, tVariable);\n+        } else if (\"runtimeManager\".equalsIgnoreCase(scope) || \"project\".equalsIgnoreCase(scope)) {\n+            ((RuntimeManager) kcontext.getKieRuntime().getEnvironment().get(\"RuntimeManager\")).signalEvent(signalType,\n+                    tVariable);\n+        } else if (\"external\".equalsIgnoreCase(scope)) {\n+            ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())\n+                    .getProcessEventSupport().fireOnSignal(kcontext.getProcessInstance(), kcontext.getNodeInstance(),\n+                            kcontext.getKieRuntime(), signalName, tVariable);\n+            WorkItemImpl workItem = new WorkItemImpl();\n+            workItem.setName(\"External Send Task\");\n+            workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+            workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+            workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+            workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\"deploymentId\"));\n+            workItem.setParameter(\"Signal\", signalType);\n+            workItem.setParameter(\"SignalProcessInstanceId\", kcontext.getVariable(\"SignalProcessInstanceId\"));\n+            workItem.setParameter(\"SignalWorkItemId\", kcontext.getVariable(\"SignalWorkItemId\"));\n+            workItem.setParameter(\"SignalDeploymentId\", kcontext.getVariable(\"SignalDeploymentId\"));\n+            if (tVariable != null) {\n+                workItem.setParameter(\"Data\", tVariable);\n+            }\n+            ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\n+        } else {\n+            kcontext.getKieRuntime().signalEvent(signalType, tVariable);\n+        }\n+    }\n+\n+    @Override\n+    public void dumpXML(Node dumpNode, StringBuilder xmlDump) {\n+        final String EOL = System.getProperty(\"line.separator\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA1ODI4Mw==", "bodyText": "ok", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r534058283", "createdAt": "2020-12-02T10:28:06Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.compiler.compiler.xml.XmlDumper;\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.JavaAction;\n+import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.Node;\n+import org.jbpm.workflow.core.impl.NodeImpl;\n+import org.kie.api.runtime.manager.RuntimeManager;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendSignalAction implements JavaAction {\n+\n+    private static final long serialVersionUID = 1L;\n+    private String signalName;\n+    private String varName;\n+    private boolean isAsync;\n+    private NodeImpl node;\n+\n+    public SendSignalAction(NodeImpl node, String variable, String signalName, boolean isAsync) {\n+        this.node = node;\n+        this.varName = variable;\n+        this.signalName = signalName;\n+        this.isAsync = isAsync;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = VariableResolver.getVariable(kcontext, varName);\n+        String signalType = VariableUtil.resolveVariable(isAsync ? \"ASYNC-\" + signalName : signalName, kcontext\n+                .getNodeInstance());\n+        String scope = (String) node.getMetaData(\"customScope\");\n+        if (\"processInstance\".equalsIgnoreCase(scope)) {\n+            kcontext.getProcessInstance().signalEvent(signalType, tVariable);\n+        } else if (\"runtimeManager\".equalsIgnoreCase(scope) || \"project\".equalsIgnoreCase(scope)) {\n+            ((RuntimeManager) kcontext.getKieRuntime().getEnvironment().get(\"RuntimeManager\")).signalEvent(signalType,\n+                    tVariable);\n+        } else if (\"external\".equalsIgnoreCase(scope)) {\n+            ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())\n+                    .getProcessEventSupport().fireOnSignal(kcontext.getProcessInstance(), kcontext.getNodeInstance(),\n+                            kcontext.getKieRuntime(), signalName, tVariable);\n+            WorkItemImpl workItem = new WorkItemImpl();\n+            workItem.setName(\"External Send Task\");\n+            workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+            workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+            workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+            workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\"deploymentId\"));\n+            workItem.setParameter(\"Signal\", signalType);\n+            workItem.setParameter(\"SignalProcessInstanceId\", kcontext.getVariable(\"SignalProcessInstanceId\"));\n+            workItem.setParameter(\"SignalWorkItemId\", kcontext.getVariable(\"SignalWorkItemId\"));\n+            workItem.setParameter(\"SignalDeploymentId\", kcontext.getVariable(\"SignalDeploymentId\"));\n+            if (tVariable != null) {\n+                workItem.setParameter(\"Data\", tVariable);\n+            }\n+            ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\n+        } else {\n+            kcontext.getKieRuntime().signalEvent(signalType, tVariable);\n+        }\n+    }\n+\n+    @Override\n+    public void dumpXML(Node dumpNode, StringBuilder xmlDump) {\n+        final String EOL = System.getProperty(\"line.separator\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk2MDE4MQ=="}, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDEyMjM1OnYy", "diffSide": "RIGHT", "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo1NDoxN1rOH9OWig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo1NDoxN1rOH9OWig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk2MDMzMA==", "bodyText": "this logic goes to the handler.", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533960330", "createdAt": "2020-12-02T07:54:17Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.compiler.compiler.xml.XmlDumper;\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.JavaAction;\n+import org.jbpm.workflow.core.Node;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendMessageAction implements JavaAction {\n+\n+    private static final long serialVersionUID = 1L;\n+    private String varName;\n+    private Message message;\n+\n+    public SendMessageAction(String varName, Message message) {\n+        this.varName = varName;\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = VariableResolver.getVariable(kcontext, varName);\n+        WorkItemImpl workItem = new WorkItemImpl();\n+        workItem.setName(\"Send Task\");\n+        workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+        workItem.setParameter(\"MessageType\", message.getType());\n+        workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+        workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+        workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\"deploymentId\"));\n+        if (tVariable != null) {\n+            workItem.setParameter(\"Message\", tVariable);\n+        }\n+        ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())\n+                .getProcessEventSupport().fireOnMessage(kcontext.getProcessInstance(), kcontext\n+                        .getNodeInstance(), kcontext.getKieRuntime(), message.getName(), tVariable);\n+        ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\n+    }\n+\n+\n+    @Override\n+    public void dumpXML(Node dumpNode, StringBuilder xmlDump) {\n+        final String EOL = System.getProperty(\"line.separator\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1644, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}