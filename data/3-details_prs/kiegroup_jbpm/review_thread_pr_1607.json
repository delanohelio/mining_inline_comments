{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NTYxODg2", "number": 1607, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDoxMDowM1rODnZ0nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDoxMDowM1rODnZ0nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjQ0MTI3OnYy", "diffSide": "LEFT", "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ActivityTest.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDoxMDowM1rOF1YUZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDozNjowNFrOF2uCLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxNzI4Nw==", "bodyText": "Would be probably good to correct (and retain) such a test.", "url": "https://github.com/kiegroup/jbpm/pull/1607#discussion_r391517287", "createdAt": "2020-03-12T10:10:03Z", "author": {"login": "MarianMacik"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ActivityTest.java", "diffHunk": "@@ -2148,27 +2148,24 @@ public void testBusinessRuleTaskException() throws Exception {\n     @RequirePersistence\n     @Test\n     public void testCallActivityChain() throws Exception {\n-        try {\n-            System.setProperty(\"org.jbpm.correlationkey.length\", \"70\");\n-            KieBase kbase = createKnowledgeBase(\"correlationkey/Process1.bpmn2\",\n-                    \"correlationkey/Process2.bpmn2\",\n-                    \"correlationkey/Process3.bpmn2\",\n-                    \"correlationkey/Process4.bpmn2\",\n-                    \"correlationkey/Process5.bpmn2\");\n-            ksession = createKnowledgeSession(kbase);\n-            Map<String, Object> params = new HashMap<String, Object>();        \n-            ProcessInstance processInstance = ksession.startProcess(\n-                    \"src.Process1\", params);\n-            assertProcessInstanceCompleted(processInstance);\n-            \n-            ProcessInstanceLog log = logService.findProcessInstances(\"src.Process5\").get(0);\n-            assertNotNull(log);\n-            assertNotNull(log.getCorrelationKey());\n-            assertTrue(log.getCorrelationKey().startsWith(processInstance.getId() + \":src.Process2:\"));\n-            assertTrue(log.getCorrelationKey().contains(\":src.Process4\"));\n-        } finally {\n-            System.clearProperty(\"org.jbpm.correlationkey.length\");\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11acf8c86f623ebbc9c6f7fc4c110d8cd203620"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUyMzgzMQ==", "bodyText": "it is a faulty test in my opinion due to the way of constructing the correlation key is creating keys bigger than 70.", "url": "https://github.com/kiegroup/jbpm/pull/1607#discussion_r391523831", "createdAt": "2020-03-12T10:21:58Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ActivityTest.java", "diffHunk": "@@ -2148,27 +2148,24 @@ public void testBusinessRuleTaskException() throws Exception {\n     @RequirePersistence\n     @Test\n     public void testCallActivityChain() throws Exception {\n-        try {\n-            System.setProperty(\"org.jbpm.correlationkey.length\", \"70\");\n-            KieBase kbase = createKnowledgeBase(\"correlationkey/Process1.bpmn2\",\n-                    \"correlationkey/Process2.bpmn2\",\n-                    \"correlationkey/Process3.bpmn2\",\n-                    \"correlationkey/Process4.bpmn2\",\n-                    \"correlationkey/Process5.bpmn2\");\n-            ksession = createKnowledgeSession(kbase);\n-            Map<String, Object> params = new HashMap<String, Object>();        \n-            ProcessInstance processInstance = ksession.startProcess(\n-                    \"src.Process1\", params);\n-            assertProcessInstanceCompleted(processInstance);\n-            \n-            ProcessInstanceLog log = logService.findProcessInstances(\"src.Process5\").get(0);\n-            assertNotNull(log);\n-            assertNotNull(log.getCorrelationKey());\n-            assertTrue(log.getCorrelationKey().startsWith(processInstance.getId() + \":src.Process2:\"));\n-            assertTrue(log.getCorrelationKey().contains(\":src.Process4\"));\n-        } finally {\n-            System.clearProperty(\"org.jbpm.correlationkey.length\");\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxNzI4Nw=="}, "originalCommit": {"oid": "e11acf8c86f623ebbc9c6f7fc4c110d8cd203620"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MzgwNw==", "bodyText": "Well, that is the point of the test - or should be - to check if it is trimmed in case a system property is defined.", "url": "https://github.com/kiegroup/jbpm/pull/1607#discussion_r391573807", "createdAt": "2020-03-12T12:01:53Z", "author": {"login": "MarianMacik"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ActivityTest.java", "diffHunk": "@@ -2148,27 +2148,24 @@ public void testBusinessRuleTaskException() throws Exception {\n     @RequirePersistence\n     @Test\n     public void testCallActivityChain() throws Exception {\n-        try {\n-            System.setProperty(\"org.jbpm.correlationkey.length\", \"70\");\n-            KieBase kbase = createKnowledgeBase(\"correlationkey/Process1.bpmn2\",\n-                    \"correlationkey/Process2.bpmn2\",\n-                    \"correlationkey/Process3.bpmn2\",\n-                    \"correlationkey/Process4.bpmn2\",\n-                    \"correlationkey/Process5.bpmn2\");\n-            ksession = createKnowledgeSession(kbase);\n-            Map<String, Object> params = new HashMap<String, Object>();        \n-            ProcessInstance processInstance = ksession.startProcess(\n-                    \"src.Process1\", params);\n-            assertProcessInstanceCompleted(processInstance);\n-            \n-            ProcessInstanceLog log = logService.findProcessInstances(\"src.Process5\").get(0);\n-            assertNotNull(log);\n-            assertNotNull(log.getCorrelationKey());\n-            assertTrue(log.getCorrelationKey().startsWith(processInstance.getId() + \":src.Process2:\"));\n-            assertTrue(log.getCorrelationKey().contains(\":src.Process4\"));\n-        } finally {\n-            System.clearProperty(\"org.jbpm.correlationkey.length\");\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxNzI4Nw=="}, "originalCommit": {"oid": "e11acf8c86f623ebbc9c6f7fc4c110d8cd203620"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3OTE3MA==", "bodyText": "it is a faulty test.\npersist correlation info: null\nProcess1\npersist correlation info: 1:src.Process2:1584350223097\nProcess2\npersist correlation info: 1:src.Process2:1584350223097:src.Process3:1584350223109\nProcess3\n2020-03-16 10:17:03,119 [main] WARN  CorrelationKey content was trimmed as it was too long (more than 70 characters)\npersist correlation info: 1:src.Process2:1584350223097:src.Process3:1584350223109:src.Process4:1\n2020-03-16 10:17:03,124 [main] WARN  CorrelationKey content was trimmed as it was too long (more than 70 characters)\nProcess4\n2020-03-16 10:17:03,130 [main] WARN  CorrelationKey content was trimmed as it was too long (more than 70 characters)\n2020-03-16 10:17:03,130 [main] WARN  CorrelationKey content was trimmed as it was too long (more than 70 characters)\npersist correlation info: 1:src.Process2:1584350223097:src.Process3:1584350223109:src.Process4:1\n2020-03-16 10:17:03,132 [main] WARN  SQL Error: 23505, SQLState: 23505\nThe trim is correct, the problem is that process 4 (already excceds the 70 positions) and process 5 generates the same as process 4 correlation key that is the reason it is  failing now when you haven an index in database.", "url": "https://github.com/kiegroup/jbpm/pull/1607#discussion_r392879170", "createdAt": "2020-03-16T09:22:52Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ActivityTest.java", "diffHunk": "@@ -2148,27 +2148,24 @@ public void testBusinessRuleTaskException() throws Exception {\n     @RequirePersistence\n     @Test\n     public void testCallActivityChain() throws Exception {\n-        try {\n-            System.setProperty(\"org.jbpm.correlationkey.length\", \"70\");\n-            KieBase kbase = createKnowledgeBase(\"correlationkey/Process1.bpmn2\",\n-                    \"correlationkey/Process2.bpmn2\",\n-                    \"correlationkey/Process3.bpmn2\",\n-                    \"correlationkey/Process4.bpmn2\",\n-                    \"correlationkey/Process5.bpmn2\");\n-            ksession = createKnowledgeSession(kbase);\n-            Map<String, Object> params = new HashMap<String, Object>();        \n-            ProcessInstance processInstance = ksession.startProcess(\n-                    \"src.Process1\", params);\n-            assertProcessInstanceCompleted(processInstance);\n-            \n-            ProcessInstanceLog log = logService.findProcessInstances(\"src.Process5\").get(0);\n-            assertNotNull(log);\n-            assertNotNull(log.getCorrelationKey());\n-            assertTrue(log.getCorrelationKey().startsWith(processInstance.getId() + \":src.Process2:\"));\n-            assertTrue(log.getCorrelationKey().contains(\":src.Process4\"));\n-        } finally {\n-            System.clearProperty(\"org.jbpm.correlationkey.length\");\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxNzI4Nw=="}, "originalCommit": {"oid": "e11acf8c86f623ebbc9c6f7fc4c110d8cd203620"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5ODU5NA==", "bodyText": "than I guess we can limit it to for example to 100 and it should be fine, wdyt?", "url": "https://github.com/kiegroup/jbpm/pull/1607#discussion_r392898594", "createdAt": "2020-03-16T09:57:09Z", "author": {"login": "MarianMacik"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ActivityTest.java", "diffHunk": "@@ -2148,27 +2148,24 @@ public void testBusinessRuleTaskException() throws Exception {\n     @RequirePersistence\n     @Test\n     public void testCallActivityChain() throws Exception {\n-        try {\n-            System.setProperty(\"org.jbpm.correlationkey.length\", \"70\");\n-            KieBase kbase = createKnowledgeBase(\"correlationkey/Process1.bpmn2\",\n-                    \"correlationkey/Process2.bpmn2\",\n-                    \"correlationkey/Process3.bpmn2\",\n-                    \"correlationkey/Process4.bpmn2\",\n-                    \"correlationkey/Process5.bpmn2\");\n-            ksession = createKnowledgeSession(kbase);\n-            Map<String, Object> params = new HashMap<String, Object>();        \n-            ProcessInstance processInstance = ksession.startProcess(\n-                    \"src.Process1\", params);\n-            assertProcessInstanceCompleted(processInstance);\n-            \n-            ProcessInstanceLog log = logService.findProcessInstances(\"src.Process5\").get(0);\n-            assertNotNull(log);\n-            assertNotNull(log.getCorrelationKey());\n-            assertTrue(log.getCorrelationKey().startsWith(processInstance.getId() + \":src.Process2:\"));\n-            assertTrue(log.getCorrelationKey().contains(\":src.Process4\"));\n-        } finally {\n-            System.clearProperty(\"org.jbpm.correlationkey.length\");\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxNzI4Nw=="}, "originalCommit": {"oid": "e11acf8c86f623ebbc9c6f7fc4c110d8cd203620"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwNDcwMg==", "bodyText": "yeah I fixed the test. just to give you the bits. The test was working because another bug in\nhttps://github.com/kiegroup/jbpm/blob/master/jbpm-persistence/jbpm-persistence-jpa/src/main/java/org/jbpm/persistence/JpaProcessPersistenceContext.java#L118\nthis uses this function:\nhttps://github.com/kiegroup/jbpm/blob/master/jbpm-persistence/jbpm-persistence-jpa/src/main/java/org/jbpm/persistence/JpaProcessPersistenceContext.java#L142\nif you see it uses the externalForm of the correlation Key... the problem is that the external form is not being trimmed like the name\n\n  \n    \n      jbpm/jbpm-persistence/jbpm-persistence-jpa/src/main/java/org/jbpm/persistence/correlation/CorrelationKeyInfo.java\n    \n    \n         Line 153\n      in\n      d7a0195\n    \n    \n    \n    \n\n        \n          \n           return CorrelationKeyXmlAdapter.marshalCorrelationKey(this); \n        \n    \n  \n\n\nso it can happen that while the name is trimmed you are looking for a key not trimmed not finding the right the right one. That is the reason is a faulty test.\nI did follow you recomendation and added the check", "url": "https://github.com/kiegroup/jbpm/pull/1607#discussion_r392904702", "createdAt": "2020-03-16T10:08:38Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ActivityTest.java", "diffHunk": "@@ -2148,27 +2148,24 @@ public void testBusinessRuleTaskException() throws Exception {\n     @RequirePersistence\n     @Test\n     public void testCallActivityChain() throws Exception {\n-        try {\n-            System.setProperty(\"org.jbpm.correlationkey.length\", \"70\");\n-            KieBase kbase = createKnowledgeBase(\"correlationkey/Process1.bpmn2\",\n-                    \"correlationkey/Process2.bpmn2\",\n-                    \"correlationkey/Process3.bpmn2\",\n-                    \"correlationkey/Process4.bpmn2\",\n-                    \"correlationkey/Process5.bpmn2\");\n-            ksession = createKnowledgeSession(kbase);\n-            Map<String, Object> params = new HashMap<String, Object>();        \n-            ProcessInstance processInstance = ksession.startProcess(\n-                    \"src.Process1\", params);\n-            assertProcessInstanceCompleted(processInstance);\n-            \n-            ProcessInstanceLog log = logService.findProcessInstances(\"src.Process5\").get(0);\n-            assertNotNull(log);\n-            assertNotNull(log.getCorrelationKey());\n-            assertTrue(log.getCorrelationKey().startsWith(processInstance.getId() + \":src.Process2:\"));\n-            assertTrue(log.getCorrelationKey().contains(\":src.Process4\"));\n-        } finally {\n-            System.clearProperty(\"org.jbpm.correlationkey.length\");\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxNzI4Nw=="}, "originalCommit": {"oid": "e11acf8c86f623ebbc9c6f7fc4c110d8cd203620"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkyMTY0Nw==", "bodyText": "I see... Well, the original issue was that only process instance log were affected for the reporter of the issue, so in fact CorrelationKeyInfo class change wasn't even needed in the end and was done just for consistency (which in fact wasn't consistent as you found out :) ) Good catch!", "url": "https://github.com/kiegroup/jbpm/pull/1607#discussion_r392921647", "createdAt": "2020-03-16T10:36:04Z", "author": {"login": "MarianMacik"}, "path": "jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ActivityTest.java", "diffHunk": "@@ -2148,27 +2148,24 @@ public void testBusinessRuleTaskException() throws Exception {\n     @RequirePersistence\n     @Test\n     public void testCallActivityChain() throws Exception {\n-        try {\n-            System.setProperty(\"org.jbpm.correlationkey.length\", \"70\");\n-            KieBase kbase = createKnowledgeBase(\"correlationkey/Process1.bpmn2\",\n-                    \"correlationkey/Process2.bpmn2\",\n-                    \"correlationkey/Process3.bpmn2\",\n-                    \"correlationkey/Process4.bpmn2\",\n-                    \"correlationkey/Process5.bpmn2\");\n-            ksession = createKnowledgeSession(kbase);\n-            Map<String, Object> params = new HashMap<String, Object>();        \n-            ProcessInstance processInstance = ksession.startProcess(\n-                    \"src.Process1\", params);\n-            assertProcessInstanceCompleted(processInstance);\n-            \n-            ProcessInstanceLog log = logService.findProcessInstances(\"src.Process5\").get(0);\n-            assertNotNull(log);\n-            assertNotNull(log.getCorrelationKey());\n-            assertTrue(log.getCorrelationKey().startsWith(processInstance.getId() + \":src.Process2:\"));\n-            assertTrue(log.getCorrelationKey().contains(\":src.Process4\"));\n-        } finally {\n-            System.clearProperty(\"org.jbpm.correlationkey.length\");\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxNzI4Nw=="}, "originalCommit": {"oid": "e11acf8c86f623ebbc9c6f7fc4c110d8cd203620"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1831, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}