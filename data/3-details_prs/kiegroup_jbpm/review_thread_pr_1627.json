{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MTkwNDE3", "number": 1627, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTozNTo1N1rODv88wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjo1OToyM1rOEDB3jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjA4MjU2OnYy", "diffSide": "RIGHT", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/timer/TimerBaseTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTozNTo1N1rOGCrIaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODozNjozNFrOGI5thA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzAwMQ==", "bodyText": "remove line instead of commenting", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405457001", "createdAt": "2020-04-08T11:35:57Z", "author": {"login": "gmunozfe"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/timer/TimerBaseTest.java", "diffHunk": "@@ -16,136 +16,34 @@\n \n package org.jbpm.test.functional.timer;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.sql.Connection;\n-import java.sql.Statement;\n import java.util.Arrays;\n import java.util.List;\n-import java.util.Properties;\n-import java.util.Scanner;\n-import java.util.Set;\n \n-import javax.naming.InitialContext;\n-import javax.sql.DataSource;\n-\n-import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.jbpm.runtime.manager.impl.DefaultRegisterableItemsFactory;\n import org.jbpm.test.AbstractBaseTest;\n-import org.kie.test.util.db.PoolingDataSourceWrapper;\n import org.junit.AfterClass;\n-import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.kie.api.event.process.ProcessEventListener;\n import org.kie.api.event.rule.AgendaEventListener;\n import org.kie.api.runtime.manager.RuntimeEngine;\n import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public abstract class TimerBaseTest extends AbstractBaseTest {\n     private static final Logger logger = LoggerFactory.getLogger(TimerBaseTest.class);\n \t\n \tprivate static PoolingDataSourceWrapper pds;\n-    \n-    protected static final String DATASOURCE_PROPERTIES = \"/datasource.properties\";\n-    \n-    protected static final String MAX_POOL_SIZE = \"maxPoolSize\";\n-    protected static final String ALLOW_LOCAL_TXS = \"allowLocalTransactions\";\n-    \n-    protected static final String DATASOURCE_CLASS_NAME = \"className\";\n-    protected static final String DRIVER_CLASS_NAME = \"driverClassName\";\n-    protected static final String USER = \"user\";\n-    protected static final String PASSWORD = \"password\";\n-    protected static final String JDBC_URL = \"url\";\n-    \n-    public static PoolingDataSourceWrapper setupPoolingDataSource() {\n-        Properties dsProps = getDatasourceProperties();\n-        PoolingDataSourceWrapper pds = null;\n-        try {\n-        \tpds = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-        } catch (Exception e) {\n-        \tlogger.warn(\"DBPOOL_MGR:Looks like there is an issue with creating db pool because of \" + e.getMessage() + \" cleaning up...\");\n-        \tlogger.info(\"DBPOOL_MGR: attempting to create db pool again...\");\n-        \tpds = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-\n-        \tlogger.info(\"DBPOOL_MGR:Pool created after cleanup of leftover resources\");\n-        }\n-        \n-        return pds;\n-    }\n-    \n-    \n-    /**\n-     * This reads in the (maven filtered) datasource properties from the test\n-     * resource directory.\n-     * \n-     * @return Properties containing the datasource properties.\n-     */\n-    private static Properties getDatasourceProperties() { \n-        boolean propertiesNotFound = false;\n-        \n-        // Central place to set additional H2 properties\n-        System.setProperty(\"h2.lobInDatabase\", \"true\");\n-        \n-        InputStream propsInputStream = TimerBaseTest.class.getResourceAsStream(DATASOURCE_PROPERTIES);\n-        Properties props = new Properties();\n-        if (propsInputStream != null) {\n-            try {\n-                props.load(propsInputStream);\n-            } catch (IOException ioe) {\n-                propertiesNotFound = true;\n-                logger.warn(\"Unable to find properties, using default H2 properties: \" + ioe.getMessage());\n-                ioe.printStackTrace();\n-            }\n-        } else {\n-            propertiesNotFound = true;\n-        }\n-\n-        String password = props.getProperty(\"password\");\n-        if (\"${maven.jdbc.password}\".equals(password) || propertiesNotFound) {\n-           logger.warn( \"Unable to load datasource properties [\" + DATASOURCE_PROPERTIES + \"]\" );\n-        }\n-        \n-        // If maven filtering somehow doesn't work the way it should.. \n-        setDefaultProperties(props);\n \n-        return props;\n-    }\n+    protected static final String DB_DDL_SCRIPTS_RESOURCE_PATH = \"/db/ddl-scripts\";\n \n-    /**\n-     * Return the default database/datasource properties - These properties use\n-     * an in-memory H2 database\n-     * \n-     * This is used when the developer is somehow running the tests but\n-     * bypassing the maven filtering that's been turned on in the pom.\n-     * \n-     * @return Properties containing the default properties\n-     */\n-    private static void setDefaultProperties(Properties props) {\n-        String[] keyArr = { \n-                \"serverName\", \"portNumber\", \"databaseName\", JDBC_URL,\n-                USER, PASSWORD,\n-                DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n-                MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n-        String[] defaultPropArr = { \n-                \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",\n-                \"sa\", \"\", \n-                \"org.h2.Driver\", \"org.h2.jdbcx.JdbcDataSource\", \n-                \"5\", \"true\" };\n-        Assert.assertTrue(\"Unequal number of keys for default properties\", keyArr.length == defaultPropArr.length);\n-        for (int i = 0; i < keyArr.length; ++i) {\n-            if( ! props.containsKey(keyArr[i]) ) {\n-                props.put(keyArr[i], defaultPropArr[i]);\n-            }\n-        }\n-    }   \n-    \n     @BeforeClass\n     public static void setUpOnce() {\n         if (pds == null) {\n-            pds = setupPoolingDataSource();\n+            pds = setupPoolingDataSource(datasourceName);\n         }\n+        //ScriptsBase.executeScriptRunner(DB_DDL_SCRIPTS_RESOURCE_PATH, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyNDg3OA==", "bodyText": "Done", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405624878", "createdAt": "2020-04-08T15:45:14Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/timer/TimerBaseTest.java", "diffHunk": "@@ -16,136 +16,34 @@\n \n package org.jbpm.test.functional.timer;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.sql.Connection;\n-import java.sql.Statement;\n import java.util.Arrays;\n import java.util.List;\n-import java.util.Properties;\n-import java.util.Scanner;\n-import java.util.Set;\n \n-import javax.naming.InitialContext;\n-import javax.sql.DataSource;\n-\n-import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.jbpm.runtime.manager.impl.DefaultRegisterableItemsFactory;\n import org.jbpm.test.AbstractBaseTest;\n-import org.kie.test.util.db.PoolingDataSourceWrapper;\n import org.junit.AfterClass;\n-import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.kie.api.event.process.ProcessEventListener;\n import org.kie.api.event.rule.AgendaEventListener;\n import org.kie.api.runtime.manager.RuntimeEngine;\n import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public abstract class TimerBaseTest extends AbstractBaseTest {\n     private static final Logger logger = LoggerFactory.getLogger(TimerBaseTest.class);\n \t\n \tprivate static PoolingDataSourceWrapper pds;\n-    \n-    protected static final String DATASOURCE_PROPERTIES = \"/datasource.properties\";\n-    \n-    protected static final String MAX_POOL_SIZE = \"maxPoolSize\";\n-    protected static final String ALLOW_LOCAL_TXS = \"allowLocalTransactions\";\n-    \n-    protected static final String DATASOURCE_CLASS_NAME = \"className\";\n-    protected static final String DRIVER_CLASS_NAME = \"driverClassName\";\n-    protected static final String USER = \"user\";\n-    protected static final String PASSWORD = \"password\";\n-    protected static final String JDBC_URL = \"url\";\n-    \n-    public static PoolingDataSourceWrapper setupPoolingDataSource() {\n-        Properties dsProps = getDatasourceProperties();\n-        PoolingDataSourceWrapper pds = null;\n-        try {\n-        \tpds = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-        } catch (Exception e) {\n-        \tlogger.warn(\"DBPOOL_MGR:Looks like there is an issue with creating db pool because of \" + e.getMessage() + \" cleaning up...\");\n-        \tlogger.info(\"DBPOOL_MGR: attempting to create db pool again...\");\n-        \tpds = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-\n-        \tlogger.info(\"DBPOOL_MGR:Pool created after cleanup of leftover resources\");\n-        }\n-        \n-        return pds;\n-    }\n-    \n-    \n-    /**\n-     * This reads in the (maven filtered) datasource properties from the test\n-     * resource directory.\n-     * \n-     * @return Properties containing the datasource properties.\n-     */\n-    private static Properties getDatasourceProperties() { \n-        boolean propertiesNotFound = false;\n-        \n-        // Central place to set additional H2 properties\n-        System.setProperty(\"h2.lobInDatabase\", \"true\");\n-        \n-        InputStream propsInputStream = TimerBaseTest.class.getResourceAsStream(DATASOURCE_PROPERTIES);\n-        Properties props = new Properties();\n-        if (propsInputStream != null) {\n-            try {\n-                props.load(propsInputStream);\n-            } catch (IOException ioe) {\n-                propertiesNotFound = true;\n-                logger.warn(\"Unable to find properties, using default H2 properties: \" + ioe.getMessage());\n-                ioe.printStackTrace();\n-            }\n-        } else {\n-            propertiesNotFound = true;\n-        }\n-\n-        String password = props.getProperty(\"password\");\n-        if (\"${maven.jdbc.password}\".equals(password) || propertiesNotFound) {\n-           logger.warn( \"Unable to load datasource properties [\" + DATASOURCE_PROPERTIES + \"]\" );\n-        }\n-        \n-        // If maven filtering somehow doesn't work the way it should.. \n-        setDefaultProperties(props);\n \n-        return props;\n-    }\n+    protected static final String DB_DDL_SCRIPTS_RESOURCE_PATH = \"/db/ddl-scripts\";\n \n-    /**\n-     * Return the default database/datasource properties - These properties use\n-     * an in-memory H2 database\n-     * \n-     * This is used when the developer is somehow running the tests but\n-     * bypassing the maven filtering that's been turned on in the pom.\n-     * \n-     * @return Properties containing the default properties\n-     */\n-    private static void setDefaultProperties(Properties props) {\n-        String[] keyArr = { \n-                \"serverName\", \"portNumber\", \"databaseName\", JDBC_URL,\n-                USER, PASSWORD,\n-                DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n-                MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n-        String[] defaultPropArr = { \n-                \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",\n-                \"sa\", \"\", \n-                \"org.h2.Driver\", \"org.h2.jdbcx.JdbcDataSource\", \n-                \"5\", \"true\" };\n-        Assert.assertTrue(\"Unequal number of keys for default properties\", keyArr.length == defaultPropArr.length);\n-        for (int i = 0; i < keyArr.length; ++i) {\n-            if( ! props.containsKey(keyArr[i]) ) {\n-                props.put(keyArr[i], defaultPropArr[i]);\n-            }\n-        }\n-    }   \n-    \n     @BeforeClass\n     public static void setUpOnce() {\n         if (pds == null) {\n-            pds = setupPoolingDataSource();\n+            pds = setupPoolingDataSource(datasourceName);\n         }\n+        //ScriptsBase.executeScriptRunner(DB_DDL_SCRIPTS_RESOURCE_PATH, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzAwMQ=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMTc3NA==", "bodyText": "Still can see this commented line :)", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408101774", "createdAt": "2020-04-14T12:37:56Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/timer/TimerBaseTest.java", "diffHunk": "@@ -16,136 +16,34 @@\n \n package org.jbpm.test.functional.timer;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.sql.Connection;\n-import java.sql.Statement;\n import java.util.Arrays;\n import java.util.List;\n-import java.util.Properties;\n-import java.util.Scanner;\n-import java.util.Set;\n \n-import javax.naming.InitialContext;\n-import javax.sql.DataSource;\n-\n-import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.jbpm.runtime.manager.impl.DefaultRegisterableItemsFactory;\n import org.jbpm.test.AbstractBaseTest;\n-import org.kie.test.util.db.PoolingDataSourceWrapper;\n import org.junit.AfterClass;\n-import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.kie.api.event.process.ProcessEventListener;\n import org.kie.api.event.rule.AgendaEventListener;\n import org.kie.api.runtime.manager.RuntimeEngine;\n import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public abstract class TimerBaseTest extends AbstractBaseTest {\n     private static final Logger logger = LoggerFactory.getLogger(TimerBaseTest.class);\n \t\n \tprivate static PoolingDataSourceWrapper pds;\n-    \n-    protected static final String DATASOURCE_PROPERTIES = \"/datasource.properties\";\n-    \n-    protected static final String MAX_POOL_SIZE = \"maxPoolSize\";\n-    protected static final String ALLOW_LOCAL_TXS = \"allowLocalTransactions\";\n-    \n-    protected static final String DATASOURCE_CLASS_NAME = \"className\";\n-    protected static final String DRIVER_CLASS_NAME = \"driverClassName\";\n-    protected static final String USER = \"user\";\n-    protected static final String PASSWORD = \"password\";\n-    protected static final String JDBC_URL = \"url\";\n-    \n-    public static PoolingDataSourceWrapper setupPoolingDataSource() {\n-        Properties dsProps = getDatasourceProperties();\n-        PoolingDataSourceWrapper pds = null;\n-        try {\n-        \tpds = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-        } catch (Exception e) {\n-        \tlogger.warn(\"DBPOOL_MGR:Looks like there is an issue with creating db pool because of \" + e.getMessage() + \" cleaning up...\");\n-        \tlogger.info(\"DBPOOL_MGR: attempting to create db pool again...\");\n-        \tpds = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-\n-        \tlogger.info(\"DBPOOL_MGR:Pool created after cleanup of leftover resources\");\n-        }\n-        \n-        return pds;\n-    }\n-    \n-    \n-    /**\n-     * This reads in the (maven filtered) datasource properties from the test\n-     * resource directory.\n-     * \n-     * @return Properties containing the datasource properties.\n-     */\n-    private static Properties getDatasourceProperties() { \n-        boolean propertiesNotFound = false;\n-        \n-        // Central place to set additional H2 properties\n-        System.setProperty(\"h2.lobInDatabase\", \"true\");\n-        \n-        InputStream propsInputStream = TimerBaseTest.class.getResourceAsStream(DATASOURCE_PROPERTIES);\n-        Properties props = new Properties();\n-        if (propsInputStream != null) {\n-            try {\n-                props.load(propsInputStream);\n-            } catch (IOException ioe) {\n-                propertiesNotFound = true;\n-                logger.warn(\"Unable to find properties, using default H2 properties: \" + ioe.getMessage());\n-                ioe.printStackTrace();\n-            }\n-        } else {\n-            propertiesNotFound = true;\n-        }\n-\n-        String password = props.getProperty(\"password\");\n-        if (\"${maven.jdbc.password}\".equals(password) || propertiesNotFound) {\n-           logger.warn( \"Unable to load datasource properties [\" + DATASOURCE_PROPERTIES + \"]\" );\n-        }\n-        \n-        // If maven filtering somehow doesn't work the way it should.. \n-        setDefaultProperties(props);\n \n-        return props;\n-    }\n+    protected static final String DB_DDL_SCRIPTS_RESOURCE_PATH = \"/db/ddl-scripts\";\n \n-    /**\n-     * Return the default database/datasource properties - These properties use\n-     * an in-memory H2 database\n-     * \n-     * This is used when the developer is somehow running the tests but\n-     * bypassing the maven filtering that's been turned on in the pom.\n-     * \n-     * @return Properties containing the default properties\n-     */\n-    private static void setDefaultProperties(Properties props) {\n-        String[] keyArr = { \n-                \"serverName\", \"portNumber\", \"databaseName\", JDBC_URL,\n-                USER, PASSWORD,\n-                DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n-                MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n-        String[] defaultPropArr = { \n-                \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",\n-                \"sa\", \"\", \n-                \"org.h2.Driver\", \"org.h2.jdbcx.JdbcDataSource\", \n-                \"5\", \"true\" };\n-        Assert.assertTrue(\"Unequal number of keys for default properties\", keyArr.length == defaultPropArr.length);\n-        for (int i = 0; i < keyArr.length; ++i) {\n-            if( ! props.containsKey(keyArr[i]) ) {\n-                props.put(keyArr[i], defaultPropArr[i]);\n-            }\n-        }\n-    }   \n-    \n     @BeforeClass\n     public static void setUpOnce() {\n         if (pds == null) {\n-            pds = setupPoolingDataSource();\n+            pds = setupPoolingDataSource(datasourceName);\n         }\n+        //ScriptsBase.executeScriptRunner(DB_DDL_SCRIPTS_RESOURCE_PATH, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzAwMQ=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4NzMzMg==", "bodyText": "now it's done :)", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r411987332", "createdAt": "2020-04-21T08:36:34Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/timer/TimerBaseTest.java", "diffHunk": "@@ -16,136 +16,34 @@\n \n package org.jbpm.test.functional.timer;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.sql.Connection;\n-import java.sql.Statement;\n import java.util.Arrays;\n import java.util.List;\n-import java.util.Properties;\n-import java.util.Scanner;\n-import java.util.Set;\n \n-import javax.naming.InitialContext;\n-import javax.sql.DataSource;\n-\n-import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.jbpm.runtime.manager.impl.DefaultRegisterableItemsFactory;\n import org.jbpm.test.AbstractBaseTest;\n-import org.kie.test.util.db.PoolingDataSourceWrapper;\n import org.junit.AfterClass;\n-import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.kie.api.event.process.ProcessEventListener;\n import org.kie.api.event.rule.AgendaEventListener;\n import org.kie.api.runtime.manager.RuntimeEngine;\n import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public abstract class TimerBaseTest extends AbstractBaseTest {\n     private static final Logger logger = LoggerFactory.getLogger(TimerBaseTest.class);\n \t\n \tprivate static PoolingDataSourceWrapper pds;\n-    \n-    protected static final String DATASOURCE_PROPERTIES = \"/datasource.properties\";\n-    \n-    protected static final String MAX_POOL_SIZE = \"maxPoolSize\";\n-    protected static final String ALLOW_LOCAL_TXS = \"allowLocalTransactions\";\n-    \n-    protected static final String DATASOURCE_CLASS_NAME = \"className\";\n-    protected static final String DRIVER_CLASS_NAME = \"driverClassName\";\n-    protected static final String USER = \"user\";\n-    protected static final String PASSWORD = \"password\";\n-    protected static final String JDBC_URL = \"url\";\n-    \n-    public static PoolingDataSourceWrapper setupPoolingDataSource() {\n-        Properties dsProps = getDatasourceProperties();\n-        PoolingDataSourceWrapper pds = null;\n-        try {\n-        \tpds = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-        } catch (Exception e) {\n-        \tlogger.warn(\"DBPOOL_MGR:Looks like there is an issue with creating db pool because of \" + e.getMessage() + \" cleaning up...\");\n-        \tlogger.info(\"DBPOOL_MGR: attempting to create db pool again...\");\n-        \tpds = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-\n-        \tlogger.info(\"DBPOOL_MGR:Pool created after cleanup of leftover resources\");\n-        }\n-        \n-        return pds;\n-    }\n-    \n-    \n-    /**\n-     * This reads in the (maven filtered) datasource properties from the test\n-     * resource directory.\n-     * \n-     * @return Properties containing the datasource properties.\n-     */\n-    private static Properties getDatasourceProperties() { \n-        boolean propertiesNotFound = false;\n-        \n-        // Central place to set additional H2 properties\n-        System.setProperty(\"h2.lobInDatabase\", \"true\");\n-        \n-        InputStream propsInputStream = TimerBaseTest.class.getResourceAsStream(DATASOURCE_PROPERTIES);\n-        Properties props = new Properties();\n-        if (propsInputStream != null) {\n-            try {\n-                props.load(propsInputStream);\n-            } catch (IOException ioe) {\n-                propertiesNotFound = true;\n-                logger.warn(\"Unable to find properties, using default H2 properties: \" + ioe.getMessage());\n-                ioe.printStackTrace();\n-            }\n-        } else {\n-            propertiesNotFound = true;\n-        }\n-\n-        String password = props.getProperty(\"password\");\n-        if (\"${maven.jdbc.password}\".equals(password) || propertiesNotFound) {\n-           logger.warn( \"Unable to load datasource properties [\" + DATASOURCE_PROPERTIES + \"]\" );\n-        }\n-        \n-        // If maven filtering somehow doesn't work the way it should.. \n-        setDefaultProperties(props);\n \n-        return props;\n-    }\n+    protected static final String DB_DDL_SCRIPTS_RESOURCE_PATH = \"/db/ddl-scripts\";\n \n-    /**\n-     * Return the default database/datasource properties - These properties use\n-     * an in-memory H2 database\n-     * \n-     * This is used when the developer is somehow running the tests but\n-     * bypassing the maven filtering that's been turned on in the pom.\n-     * \n-     * @return Properties containing the default properties\n-     */\n-    private static void setDefaultProperties(Properties props) {\n-        String[] keyArr = { \n-                \"serverName\", \"portNumber\", \"databaseName\", JDBC_URL,\n-                USER, PASSWORD,\n-                DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n-                MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n-        String[] defaultPropArr = { \n-                \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",\n-                \"sa\", \"\", \n-                \"org.h2.Driver\", \"org.h2.jdbcx.JdbcDataSource\", \n-                \"5\", \"true\" };\n-        Assert.assertTrue(\"Unequal number of keys for default properties\", keyArr.length == defaultPropArr.length);\n-        for (int i = 0; i < keyArr.length; ++i) {\n-            if( ! props.containsKey(keyArr[i]) ) {\n-                props.put(keyArr[i], defaultPropArr[i]);\n-            }\n-        }\n-    }   \n-    \n     @BeforeClass\n     public static void setUpOnce() {\n         if (pds == null) {\n-            pds = setupPoolingDataSource();\n+            pds = setupPoolingDataSource(datasourceName);\n         }\n+        //ScriptsBase.executeScriptRunner(DB_DDL_SCRIPTS_RESOURCE_PATH, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzAwMQ=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjA4MzYzOnYy", "diffSide": "RIGHT", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/timer/TimerBaseTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTozNjoyNFrOGCrJKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODozNjo0OFrOGI5uNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzE5Mw==", "bodyText": "Same here", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405457193", "createdAt": "2020-04-08T11:36:24Z", "author": {"login": "gmunozfe"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/timer/TimerBaseTest.java", "diffHunk": "@@ -154,23 +52,8 @@ public static void tearDownOnce() {\n             pds.close();\n             pds = null;\n         }\n-    }\n-\n-\n-    protected void testCreateQuartzSchema() {\n-        Scanner scanner = new Scanner(this.getClass().getResourceAsStream(\"/quartz_tables_h2.sql\")).useDelimiter(\";\");\n-        try {\n-            Connection connection = ((DataSource)InitialContext.doLookup(\"jdbc/jbpm-ds\")).getConnection();\n-            Statement stmt = connection.createStatement();\n-            while (scanner.hasNext()) {\n-                String sql = scanner.next();\n-                stmt.executeUpdate(sql);\n-            }\n-            stmt.close();\n-            connection.close();\n-        } catch (Exception e) {\n-\n-        }\n+        //TestsUtil.clearSchema();\n+        //ScriptsBase.executeScriptRunner(DB_DDL_SCRIPTS_RESOURCE_PATH, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyNDk1NQ==", "bodyText": "Done", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405624955", "createdAt": "2020-04-08T15:45:21Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/timer/TimerBaseTest.java", "diffHunk": "@@ -154,23 +52,8 @@ public static void tearDownOnce() {\n             pds.close();\n             pds = null;\n         }\n-    }\n-\n-\n-    protected void testCreateQuartzSchema() {\n-        Scanner scanner = new Scanner(this.getClass().getResourceAsStream(\"/quartz_tables_h2.sql\")).useDelimiter(\";\");\n-        try {\n-            Connection connection = ((DataSource)InitialContext.doLookup(\"jdbc/jbpm-ds\")).getConnection();\n-            Statement stmt = connection.createStatement();\n-            while (scanner.hasNext()) {\n-                String sql = scanner.next();\n-                stmt.executeUpdate(sql);\n-            }\n-            stmt.close();\n-            connection.close();\n-        } catch (Exception e) {\n-\n-        }\n+        //TestsUtil.clearSchema();\n+        //ScriptsBase.executeScriptRunner(DB_DDL_SCRIPTS_RESOURCE_PATH, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzE5Mw=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMTg4Mw==", "bodyText": "Still can see it here as well.", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408101883", "createdAt": "2020-04-14T12:38:08Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/timer/TimerBaseTest.java", "diffHunk": "@@ -154,23 +52,8 @@ public static void tearDownOnce() {\n             pds.close();\n             pds = null;\n         }\n-    }\n-\n-\n-    protected void testCreateQuartzSchema() {\n-        Scanner scanner = new Scanner(this.getClass().getResourceAsStream(\"/quartz_tables_h2.sql\")).useDelimiter(\";\");\n-        try {\n-            Connection connection = ((DataSource)InitialContext.doLookup(\"jdbc/jbpm-ds\")).getConnection();\n-            Statement stmt = connection.createStatement();\n-            while (scanner.hasNext()) {\n-                String sql = scanner.next();\n-                stmt.executeUpdate(sql);\n-            }\n-            stmt.close();\n-            connection.close();\n-        } catch (Exception e) {\n-\n-        }\n+        //TestsUtil.clearSchema();\n+        //ScriptsBase.executeScriptRunner(DB_DDL_SCRIPTS_RESOURCE_PATH, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzE5Mw=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4NzUwOA==", "bodyText": "finally done :)", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r411987508", "createdAt": "2020-04-21T08:36:48Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/functional/timer/TimerBaseTest.java", "diffHunk": "@@ -154,23 +52,8 @@ public static void tearDownOnce() {\n             pds.close();\n             pds = null;\n         }\n-    }\n-\n-\n-    protected void testCreateQuartzSchema() {\n-        Scanner scanner = new Scanner(this.getClass().getResourceAsStream(\"/quartz_tables_h2.sql\")).useDelimiter(\";\");\n-        try {\n-            Connection connection = ((DataSource)InitialContext.doLookup(\"jdbc/jbpm-ds\")).getConnection();\n-            Statement stmt = connection.createStatement();\n-            while (scanner.hasNext()) {\n-                String sql = scanner.next();\n-                stmt.executeUpdate(sql);\n-            }\n-            stmt.close();\n-            connection.close();\n-        } catch (Exception e) {\n-\n-        }\n+        //TestsUtil.clearSchema();\n+        //ScriptsBase.executeScriptRunner(DB_DDL_SCRIPTS_RESOURCE_PATH, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzE5Mw=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjA5MzQ0OnYy", "diffSide": "RIGHT", "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTozOToxNFrOGCrO_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODozNTowN1rOGI5pCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1ODY4Ng==", "bodyText": "why setting \"h2:mem\" as default instead of \"h2:tcp\"?\nIn the method comment, it also states \"in-memory H2 database\"", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405458686", "createdAt": "2020-04-08T11:39:14Z", "author": {"login": "gmunozfe"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java", "diffHunk": "@@ -185,22 +196,16 @@ public static PoolingDataSourceWrapper setupPoolingDataSource(Properties dsProps\n      */\n     private static Properties getDefaultProperties() {\n         if (defaultProperties == null) {\n-            String[] keyArr = { \n-                    \"serverName\", \"portNumber\", \"databaseName\", \n-                    \"url\", \n-                    \"user\", \"password\", \n-                    \"driverClassName\",\n-                    \"className\", \n-                    \"maxPoolSize\", \n-                    \"allowLocalTransactions\" };\n-            String[] defaultPropArr = { \n-                    \"\", \"\", \"\", \n-                    \"jdbc:h2:tcp://localhost/target/jbpm-test\", \n-                    \"sa\", \"\", \n-                    \"org.h2.Driver\",\n-                    \"org.h2.jdbcx.JdbcDataSource\", \n-                    \"16\", \n-                    \"true\" };\n+            String[] keyArr = {\n+                    SERVER_NAME, SERVER_PORT, DATABASE_NAME, JDBC_URL,\n+                    USER, PASSWORD,\n+                    DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n+                    MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n+            String[] defaultPropArr = {\n+                    \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwODg3Ng==", "bodyText": "\"h2:mem\" is used for \"in-memory H2 database\" which means no data will be stored in the database once the connection is closed whereas \"h2:tcp\" it does store data but requires a server to be startup - see \n  \n    \n      jbpm/jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java\n    \n    \n         Line 127\n      in\n      1d6e7c2\n    \n    \n    \n    \n\n        \n          \n           public static void startH2TcpServer(Properties datasourceProperties) {", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405608876", "createdAt": "2020-04-08T15:23:34Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java", "diffHunk": "@@ -185,22 +196,16 @@ public static PoolingDataSourceWrapper setupPoolingDataSource(Properties dsProps\n      */\n     private static Properties getDefaultProperties() {\n         if (defaultProperties == null) {\n-            String[] keyArr = { \n-                    \"serverName\", \"portNumber\", \"databaseName\", \n-                    \"url\", \n-                    \"user\", \"password\", \n-                    \"driverClassName\",\n-                    \"className\", \n-                    \"maxPoolSize\", \n-                    \"allowLocalTransactions\" };\n-            String[] defaultPropArr = { \n-                    \"\", \"\", \"\", \n-                    \"jdbc:h2:tcp://localhost/target/jbpm-test\", \n-                    \"sa\", \"\", \n-                    \"org.h2.Driver\",\n-                    \"org.h2.jdbcx.JdbcDataSource\", \n-                    \"16\", \n-                    \"true\" };\n+            String[] keyArr = {\n+                    SERVER_NAME, SERVER_PORT, DATABASE_NAME, JDBC_URL,\n+                    USER, PASSWORD,\n+                    DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n+                    MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n+            String[] defaultPropArr = {\n+                    \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1ODY4Ng=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1NTk0Mg==", "bodyText": "Yes, but is that an issue? We can leave h2:tcp as a default as well. This is anyway used just for scenarios where datasource.properties is missing. Moreover, PersistenceUtil is clever and will start the server for tcp-prefixd connections URLs if you use this method:\n\n  \n    \n      jbpm/jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java\n    \n    \n        Lines 116 to 121\n      in\n      3ce2c81\n    \n    \n    \n    \n\n        \n          \n           public static void startH2TcpServer(Properties datasourceProperties) { \n        \n\n        \n          \n               String jdbcUrl = datasourceProperties.getProperty(\"url\"); \n        \n\n        \n          \n               if (jdbcUrl != null && jdbcUrl.matches(\"jdbc:h2:tcp:.*\")) { \n        \n\n        \n          \n                   h2Server.start(); \n        \n\n        \n          \n               } \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nBut probably even better - we should unify this to always use in-memory one as it is more convenient. Moreover, some modules like jbpm-human-task-core override this to in-memory, so they override what is defined in the root pom.xml", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408155942", "createdAt": "2020-04-14T13:56:11Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java", "diffHunk": "@@ -185,22 +196,16 @@ public static PoolingDataSourceWrapper setupPoolingDataSource(Properties dsProps\n      */\n     private static Properties getDefaultProperties() {\n         if (defaultProperties == null) {\n-            String[] keyArr = { \n-                    \"serverName\", \"portNumber\", \"databaseName\", \n-                    \"url\", \n-                    \"user\", \"password\", \n-                    \"driverClassName\",\n-                    \"className\", \n-                    \"maxPoolSize\", \n-                    \"allowLocalTransactions\" };\n-            String[] defaultPropArr = { \n-                    \"\", \"\", \"\", \n-                    \"jdbc:h2:tcp://localhost/target/jbpm-test\", \n-                    \"sa\", \"\", \n-                    \"org.h2.Driver\",\n-                    \"org.h2.jdbcx.JdbcDataSource\", \n-                    \"16\", \n-                    \"true\" };\n+            String[] keyArr = {\n+                    SERVER_NAME, SERVER_PORT, DATABASE_NAME, JDBC_URL,\n+                    USER, PASSWORD,\n+                    DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n+                    MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n+            String[] defaultPropArr = {\n+                    \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1ODY4Ng=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYzOTEwMA==", "bodyText": "Currently, there is a mix of use in all tests. Some are using h2:mem and some h2:tcp.\nFor instance, HumanTaskServicesBaseTest class in jbpm-human-task-core uses h2:tcp connection by calling to PersistenceUtil.getDefaultProperties():\nhttps://github.com/kiegroup/jbpm/blob/master/jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/HumanTaskServicesBaseTest.java#L189\nWhereas JbpmJUnitBaseTestCase class, is using h2:mem:\nhttps://github.com/kiegroup/jbpm/blob/master/jbpm-test/src/main/java/org/jbpm/test/JbpmJUnitBaseTestCase.java#L845\nBut most of the tests I've gone through are using h2:mem, like:\nhttps://github.com/kiegroup/jbpm/blob/master/jbpm-test/src/main/java/org/jbpm/test/services/AbstractServicesTest.java#L187\nSo what I've done is to unify this and use \"h2:mem\" as the default one. However, you can always override these properties and use the ones you define either in your pom or in your own test cases.\nBut looking at the parent pom.xml in jbpm module level, default value is \"h2:tcp\"...\nWhat do you guys @gmunozfe and @MarianMacik think? is there any real reason why some are hardcoding this value to h2:mem and others to h2:tcp? shouldn't we unify all and make them homogeneous?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r409639100", "createdAt": "2020-04-16T15:16:30Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java", "diffHunk": "@@ -185,22 +196,16 @@ public static PoolingDataSourceWrapper setupPoolingDataSource(Properties dsProps\n      */\n     private static Properties getDefaultProperties() {\n         if (defaultProperties == null) {\n-            String[] keyArr = { \n-                    \"serverName\", \"portNumber\", \"databaseName\", \n-                    \"url\", \n-                    \"user\", \"password\", \n-                    \"driverClassName\",\n-                    \"className\", \n-                    \"maxPoolSize\", \n-                    \"allowLocalTransactions\" };\n-            String[] defaultPropArr = { \n-                    \"\", \"\", \"\", \n-                    \"jdbc:h2:tcp://localhost/target/jbpm-test\", \n-                    \"sa\", \"\", \n-                    \"org.h2.Driver\",\n-                    \"org.h2.jdbcx.JdbcDataSource\", \n-                    \"16\", \n-                    \"true\" };\n+            String[] keyArr = {\n+                    SERVER_NAME, SERVER_PORT, DATABASE_NAME, JDBC_URL,\n+                    USER, PASSWORD,\n+                    DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n+                    MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n+            String[] defaultPropArr = {\n+                    \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1ODY4Ng=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4NjE4Ng==", "bodyText": "Set h2:mem up as default for all tests. However it supports h2:tcp as well, and the H2 server is automatically started up by PersistenceUtil class and stop on finalize call method.", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r411986186", "createdAt": "2020-04-21T08:35:07Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java", "diffHunk": "@@ -185,22 +196,16 @@ public static PoolingDataSourceWrapper setupPoolingDataSource(Properties dsProps\n      */\n     private static Properties getDefaultProperties() {\n         if (defaultProperties == null) {\n-            String[] keyArr = { \n-                    \"serverName\", \"portNumber\", \"databaseName\", \n-                    \"url\", \n-                    \"user\", \"password\", \n-                    \"driverClassName\",\n-                    \"className\", \n-                    \"maxPoolSize\", \n-                    \"allowLocalTransactions\" };\n-            String[] defaultPropArr = { \n-                    \"\", \"\", \"\", \n-                    \"jdbc:h2:tcp://localhost/target/jbpm-test\", \n-                    \"sa\", \"\", \n-                    \"org.h2.Driver\",\n-                    \"org.h2.jdbcx.JdbcDataSource\", \n-                    \"16\", \n-                    \"true\" };\n+            String[] keyArr = {\n+                    SERVER_NAME, SERVER_PORT, DATABASE_NAME, JDBC_URL,\n+                    USER, PASSWORD,\n+                    DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n+                    MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n+            String[] defaultPropArr = {\n+                    \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1ODY4Ng=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjA5ODEwOnYy", "diffSide": "RIGHT", "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTo0MDozOVrOGCrR4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODozNzoxNFrOGI5vTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1OTQyNA==", "bodyText": "Max_pool_size was previously 16, is there any reason to lower it to 5?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405459424", "createdAt": "2020-04-08T11:40:39Z", "author": {"login": "gmunozfe"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java", "diffHunk": "@@ -185,22 +196,16 @@ public static PoolingDataSourceWrapper setupPoolingDataSource(Properties dsProps\n      */\n     private static Properties getDefaultProperties() {\n         if (defaultProperties == null) {\n-            String[] keyArr = { \n-                    \"serverName\", \"portNumber\", \"databaseName\", \n-                    \"url\", \n-                    \"user\", \"password\", \n-                    \"driverClassName\",\n-                    \"className\", \n-                    \"maxPoolSize\", \n-                    \"allowLocalTransactions\" };\n-            String[] defaultPropArr = { \n-                    \"\", \"\", \"\", \n-                    \"jdbc:h2:tcp://localhost/target/jbpm-test\", \n-                    \"sa\", \"\", \n-                    \"org.h2.Driver\",\n-                    \"org.h2.jdbcx.JdbcDataSource\", \n-                    \"16\", \n-                    \"true\" };\n+            String[] keyArr = {\n+                    SERVER_NAME, SERVER_PORT, DATABASE_NAME, JDBC_URL,\n+                    USER, PASSWORD,\n+                    DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n+                    MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n+            String[] defaultPropArr = {\n+                    \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",\n+                    \"sa\", \"\",\n+                    \"org.h2.Driver\", \"org.h2.jdbcx.JdbcDataSource\",\n+                    \"5\", \"true\" };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMTEzMw==", "bodyText": "Some tests had this property harcoded to 16 and some to 5. But yes, makes more sense to keep a higher number of connections in the pool.", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405611133", "createdAt": "2020-04-08T15:26:36Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java", "diffHunk": "@@ -185,22 +196,16 @@ public static PoolingDataSourceWrapper setupPoolingDataSource(Properties dsProps\n      */\n     private static Properties getDefaultProperties() {\n         if (defaultProperties == null) {\n-            String[] keyArr = { \n-                    \"serverName\", \"portNumber\", \"databaseName\", \n-                    \"url\", \n-                    \"user\", \"password\", \n-                    \"driverClassName\",\n-                    \"className\", \n-                    \"maxPoolSize\", \n-                    \"allowLocalTransactions\" };\n-            String[] defaultPropArr = { \n-                    \"\", \"\", \"\", \n-                    \"jdbc:h2:tcp://localhost/target/jbpm-test\", \n-                    \"sa\", \"\", \n-                    \"org.h2.Driver\",\n-                    \"org.h2.jdbcx.JdbcDataSource\", \n-                    \"16\", \n-                    \"true\" };\n+            String[] keyArr = {\n+                    SERVER_NAME, SERVER_PORT, DATABASE_NAME, JDBC_URL,\n+                    USER, PASSWORD,\n+                    DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n+                    MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n+            String[] defaultPropArr = {\n+                    \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",\n+                    \"sa\", \"\",\n+                    \"org.h2.Driver\", \"org.h2.jdbcx.JdbcDataSource\",\n+                    \"5\", \"true\" };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1OTQyNA=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1NjUyNw==", "bodyText": "+1", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408156527", "createdAt": "2020-04-14T13:56:54Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java", "diffHunk": "@@ -185,22 +196,16 @@ public static PoolingDataSourceWrapper setupPoolingDataSource(Properties dsProps\n      */\n     private static Properties getDefaultProperties() {\n         if (defaultProperties == null) {\n-            String[] keyArr = { \n-                    \"serverName\", \"portNumber\", \"databaseName\", \n-                    \"url\", \n-                    \"user\", \"password\", \n-                    \"driverClassName\",\n-                    \"className\", \n-                    \"maxPoolSize\", \n-                    \"allowLocalTransactions\" };\n-            String[] defaultPropArr = { \n-                    \"\", \"\", \"\", \n-                    \"jdbc:h2:tcp://localhost/target/jbpm-test\", \n-                    \"sa\", \"\", \n-                    \"org.h2.Driver\",\n-                    \"org.h2.jdbcx.JdbcDataSource\", \n-                    \"16\", \n-                    \"true\" };\n+            String[] keyArr = {\n+                    SERVER_NAME, SERVER_PORT, DATABASE_NAME, JDBC_URL,\n+                    USER, PASSWORD,\n+                    DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n+                    MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n+            String[] defaultPropArr = {\n+                    \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",\n+                    \"sa\", \"\",\n+                    \"org.h2.Driver\", \"org.h2.jdbcx.JdbcDataSource\",\n+                    \"5\", \"true\" };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1OTQyNA=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4Nzc5MA==", "bodyText": "Done", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r411987790", "createdAt": "2020-04-21T08:37:14Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/util/PersistenceUtil.java", "diffHunk": "@@ -185,22 +196,16 @@ public static PoolingDataSourceWrapper setupPoolingDataSource(Properties dsProps\n      */\n     private static Properties getDefaultProperties() {\n         if (defaultProperties == null) {\n-            String[] keyArr = { \n-                    \"serverName\", \"portNumber\", \"databaseName\", \n-                    \"url\", \n-                    \"user\", \"password\", \n-                    \"driverClassName\",\n-                    \"className\", \n-                    \"maxPoolSize\", \n-                    \"allowLocalTransactions\" };\n-            String[] defaultPropArr = { \n-                    \"\", \"\", \"\", \n-                    \"jdbc:h2:tcp://localhost/target/jbpm-test\", \n-                    \"sa\", \"\", \n-                    \"org.h2.Driver\",\n-                    \"org.h2.jdbcx.JdbcDataSource\", \n-                    \"16\", \n-                    \"true\" };\n+            String[] keyArr = {\n+                    SERVER_NAME, SERVER_PORT, DATABASE_NAME, JDBC_URL,\n+                    USER, PASSWORD,\n+                    DRIVER_CLASS_NAME, DATASOURCE_CLASS_NAME,\n+                    MAX_POOL_SIZE, ALLOW_LOCAL_TXS };\n+            String[] defaultPropArr = {\n+                    \"\", \"\", \"\", \"jdbc:h2:mem:jbpm-db;MVCC=true\",\n+                    \"sa\", \"\",\n+                    \"org.h2.Driver\", \"org.h2.jdbcx.JdbcDataSource\",\n+                    \"5\", \"true\" };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1OTQyNA=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjY2MzgxOnYy", "diffSide": "RIGHT", "path": "jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowMjoyNVrOGCwwtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODo1MTozM1rOGI6aYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0OTIzOA==", "bodyText": "I know this is following the same approach as before (moved from other class), but it's just a single reattempt after catching the exception, no?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405549238", "createdAt": "2020-04-08T14:02:25Z", "author": {"login": "gmunozfe"}, "path": "jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java", "diffHunk": "@@ -16,19 +16,56 @@\n \n package org.jbpm.test;\n \n+import java.util.Properties;\n+\n import org.jbpm.process.instance.impl.util.LoggingPrintStream;\n+import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class AbstractBaseTest {\n-    \n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractBaseTest.class);\n+\n+    protected static String datasourceName = \"jdbc/jbpm-ds\";\n+\n     @BeforeClass\n-    public static void configure() { \n+    public static void configure() {\n         LoggingPrintStream.interceptSysOutSysErr();\n     }\n     \n     @AfterClass\n-    public static void reset() { \n+    public static void reset() {\n         LoggingPrintStream.resetInterceptSysOutSysErr();\n     }\n+\n+    protected String getJndiDatasourceName(){\n+        return datasourceName;\n+    }\n+\n+    protected Properties getDataSourceProperties(){\n+        return PersistenceUtil.getDatasourceProperties();\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(String datasourceName) {\n+        return setupPoolingDataSource(null, datasourceName);\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(Properties properties, String datasourceName) {\n+        Properties dsProps = (properties != null) ? properties : PersistenceUtil.getDatasourceProperties();\n+        PoolingDataSourceWrapper pds;\n+        try {\n+            pds = PersistenceUtil.setupPoolingDataSource(dsProps, datasourceName);\n+        } catch (Exception e) {\n+            logger.warn(\"DBPOOL_MGR:Looks like there is an issue with creating db pool because of {} cleaning up...\", e.getMessage());\n+            logger.info(\"DBPOOL_MGR: attempting to create db pool again...\");\n+            pds = PersistenceUtil.setupPoolingDataSource(dsProps, datasourceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyMjM3Mg==", "bodyText": "Yes, one single attempt.\nHaving a deeper look at what the PersistenceUtil.setupPoolingDataSource does I haven't been able to see whether there is some kind of cleaning up mechanism as per what above logs are suggesting...\n\n  \n    \n      jbpm/jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java\n    \n    \n        Lines 63 to 67\n      in\n      1d6e7c2\n    \n    \n    \n    \n\n        \n          \n           logger.warn(\"DBPOOL_MGR:Looks like there is an issue with creating db pool because of {} cleaning up...\", e.getMessage()); \n        \n\n        \n          \n           logger.info(\"DBPOOL_MGR: attempting to create db pool again...\"); \n        \n\n        \n          \n           pds = PersistenceUtil.setupPoolingDataSource(dsProps, datasourceName); \n        \n\n        \n          \n            \n        \n\n        \n          \n           logger.info(\"DBPOOL_MGR:Pool created after cleanup of leftover resources\"); \n        \n    \n  \n\n\nTo me this is a workaround in case of any with the database arises. If there is any issues, it should be fixed properly. So I would remove this \"attempt\". What do you think?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405622372", "createdAt": "2020-04-08T15:41:45Z", "author": {"login": "afalhambra"}, "path": "jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java", "diffHunk": "@@ -16,19 +16,56 @@\n \n package org.jbpm.test;\n \n+import java.util.Properties;\n+\n import org.jbpm.process.instance.impl.util.LoggingPrintStream;\n+import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class AbstractBaseTest {\n-    \n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractBaseTest.class);\n+\n+    protected static String datasourceName = \"jdbc/jbpm-ds\";\n+\n     @BeforeClass\n-    public static void configure() { \n+    public static void configure() {\n         LoggingPrintStream.interceptSysOutSysErr();\n     }\n     \n     @AfterClass\n-    public static void reset() { \n+    public static void reset() {\n         LoggingPrintStream.resetInterceptSysOutSysErr();\n     }\n+\n+    protected String getJndiDatasourceName(){\n+        return datasourceName;\n+    }\n+\n+    protected Properties getDataSourceProperties(){\n+        return PersistenceUtil.getDatasourceProperties();\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(String datasourceName) {\n+        return setupPoolingDataSource(null, datasourceName);\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(Properties properties, String datasourceName) {\n+        Properties dsProps = (properties != null) ? properties : PersistenceUtil.getDatasourceProperties();\n+        PoolingDataSourceWrapper pds;\n+        try {\n+            pds = PersistenceUtil.setupPoolingDataSource(dsProps, datasourceName);\n+        } catch (Exception e) {\n+            logger.warn(\"DBPOOL_MGR:Looks like there is an issue with creating db pool because of {} cleaning up...\", e.getMessage());\n+            logger.info(\"DBPOOL_MGR: attempting to create db pool again...\");\n+            pds = PersistenceUtil.setupPoolingDataSource(dsProps, datasourceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0OTIzOA=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY0MDI3MA==", "bodyText": "@gmunozfe - what do you think? Should I keep it?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r409640270", "createdAt": "2020-04-16T15:18:02Z", "author": {"login": "afalhambra"}, "path": "jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java", "diffHunk": "@@ -16,19 +16,56 @@\n \n package org.jbpm.test;\n \n+import java.util.Properties;\n+\n import org.jbpm.process.instance.impl.util.LoggingPrintStream;\n+import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class AbstractBaseTest {\n-    \n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractBaseTest.class);\n+\n+    protected static String datasourceName = \"jdbc/jbpm-ds\";\n+\n     @BeforeClass\n-    public static void configure() { \n+    public static void configure() {\n         LoggingPrintStream.interceptSysOutSysErr();\n     }\n     \n     @AfterClass\n-    public static void reset() { \n+    public static void reset() {\n         LoggingPrintStream.resetInterceptSysOutSysErr();\n     }\n+\n+    protected String getJndiDatasourceName(){\n+        return datasourceName;\n+    }\n+\n+    protected Properties getDataSourceProperties(){\n+        return PersistenceUtil.getDatasourceProperties();\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(String datasourceName) {\n+        return setupPoolingDataSource(null, datasourceName);\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(Properties properties, String datasourceName) {\n+        Properties dsProps = (properties != null) ? properties : PersistenceUtil.getDatasourceProperties();\n+        PoolingDataSourceWrapper pds;\n+        try {\n+            pds = PersistenceUtil.setupPoolingDataSource(dsProps, datasourceName);\n+        } catch (Exception e) {\n+            logger.warn(\"DBPOOL_MGR:Looks like there is an issue with creating db pool because of {} cleaning up...\", e.getMessage());\n+            logger.info(\"DBPOOL_MGR: attempting to create db pool again...\");\n+            pds = PersistenceUtil.setupPoolingDataSource(dsProps, datasourceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0OTIzOA=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk5ODgxNw==", "bodyText": "leaving it as is", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r411998817", "createdAt": "2020-04-21T08:51:33Z", "author": {"login": "afalhambra"}, "path": "jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java", "diffHunk": "@@ -16,19 +16,56 @@\n \n package org.jbpm.test;\n \n+import java.util.Properties;\n+\n import org.jbpm.process.instance.impl.util.LoggingPrintStream;\n+import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class AbstractBaseTest {\n-    \n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractBaseTest.class);\n+\n+    protected static String datasourceName = \"jdbc/jbpm-ds\";\n+\n     @BeforeClass\n-    public static void configure() { \n+    public static void configure() {\n         LoggingPrintStream.interceptSysOutSysErr();\n     }\n     \n     @AfterClass\n-    public static void reset() { \n+    public static void reset() {\n         LoggingPrintStream.resetInterceptSysOutSysErr();\n     }\n+\n+    protected String getJndiDatasourceName(){\n+        return datasourceName;\n+    }\n+\n+    protected Properties getDataSourceProperties(){\n+        return PersistenceUtil.getDatasourceProperties();\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(String datasourceName) {\n+        return setupPoolingDataSource(null, datasourceName);\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(Properties properties, String datasourceName) {\n+        Properties dsProps = (properties != null) ? properties : PersistenceUtil.getDatasourceProperties();\n+        PoolingDataSourceWrapper pds;\n+        try {\n+            pds = PersistenceUtil.setupPoolingDataSource(dsProps, datasourceName);\n+        } catch (Exception e) {\n+            logger.warn(\"DBPOOL_MGR:Looks like there is an issue with creating db pool because of {} cleaning up...\", e.getMessage());\n+            logger.info(\"DBPOOL_MGR: attempting to create db pool again...\");\n+            pds = PersistenceUtil.setupPoolingDataSource(dsProps, datasourceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0OTIzOA=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjcwOTAzOnYy", "diffSide": "RIGHT", "path": "jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxMjozOFrOGCxMyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODozODoyMVrOGI5yhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NjQyNw==", "bodyText": "This seems more like a constant (default datasourceName): if it's, there should be besides of static, final and uppercase.\nIf not, it can be confused in the scope of the methods that uses a param with the same name.", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405556427", "createdAt": "2020-04-08T14:12:38Z", "author": {"login": "gmunozfe"}, "path": "jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java", "diffHunk": "@@ -16,19 +16,56 @@\n \n package org.jbpm.test;\n \n+import java.util.Properties;\n+\n import org.jbpm.process.instance.impl.util.LoggingPrintStream;\n+import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class AbstractBaseTest {\n-    \n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractBaseTest.class);\n+\n+    protected static String datasourceName = \"jdbc/jbpm-ds\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyNzk2Mw==", "bodyText": "I mean this\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected static String datasourceName = \"jdbc/jbpm-ds\";\n          \n          \n            \n                protected static final String DATASOURCE_NAME = \"jdbc/jbpm-ds\";", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r405627963", "createdAt": "2020-04-08T15:49:31Z", "author": {"login": "gmunozfe"}, "path": "jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java", "diffHunk": "@@ -16,19 +16,56 @@\n \n package org.jbpm.test;\n \n+import java.util.Properties;\n+\n import org.jbpm.process.instance.impl.util.LoggingPrintStream;\n+import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class AbstractBaseTest {\n-    \n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractBaseTest.class);\n+\n+    protected static String datasourceName = \"jdbc/jbpm-ds\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NjQyNw=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4ODYxNQ==", "bodyText": "Done", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r411988615", "createdAt": "2020-04-21T08:38:21Z", "author": {"login": "afalhambra"}, "path": "jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java", "diffHunk": "@@ -16,19 +16,56 @@\n \n package org.jbpm.test;\n \n+import java.util.Properties;\n+\n import org.jbpm.process.instance.impl.util.LoggingPrintStream;\n+import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class AbstractBaseTest {\n-    \n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractBaseTest.class);\n+\n+    protected static String datasourceName = \"jdbc/jbpm-ds\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NjQyNw=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzU2ODIyOnYy", "diffSide": "RIGHT", "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoyNToxMlrOGFMFIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODozOTozNlrOGI52Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5Mzk4Ng==", "bodyText": "There is already this defined in the root pom.xml file with a value jdbc:h2:tcp://localhost/${project.basedir}/target/jbpm-test;MVCC=TRUE, why not to reuse this?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408093986", "createdAt": "2020-04-14T12:25:12Z", "author": {"login": "MarianMacik"}, "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/pom.xml", "diffHunk": "@@ -12,6 +12,7 @@\n \n   <properties>\n     <java.module.name>org.jbpm.casemgmt.impl</java.module.name>\n+    <maven.jdbc.url>jdbc:h2:mem:test;MVCC=true</maven.jdbc.url>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4OTU3NA==", "bodyText": "Removed.", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r411989574", "createdAt": "2020-04-21T08:39:36Z", "author": {"login": "afalhambra"}, "path": "jbpm-case-mgmt/jbpm-case-mgmt-impl/pom.xml", "diffHunk": "@@ -12,6 +12,7 @@\n \n   <properties>\n     <java.module.name>org.jbpm.casemgmt.impl</java.module.name>\n+    <maven.jdbc.url>jdbc:h2:mem:test;MVCC=true</maven.jdbc.url>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5Mzk4Ng=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzU3NTAzOnYy", "diffSide": "RIGHT", "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/JbpmTestCase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoyNzowMFrOGFMJQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDo1Mjo1MFrOGfxz6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTA0Mw==", "bodyText": "This is left here just because of that POOL_CONNECTIONS custom property for a subset of tests?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408095043", "createdAt": "2020-04-14T12:27:00Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/JbpmTestCase.java", "diffHunk": "@@ -80,12 +80,10 @@ protected void finished(Description description) {\n     );\n \n     @Override\n-    protected PoolingDataSourceWrapper setupPoolingDataSource() {\n+    protected Properties getDataSourceProperties(){\n         Properties dsProps = PersistenceUtil.getDatasourceProperties();\n         dsProps.setProperty(\"POOL_CONNECTIONS\", \"false\");\n-        // Setup the datasource\n-        PoolingDataSourceWrapper ds1 = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-        return ds1;\n+        return dsProps;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1NjcyMg==", "bodyText": "Yes, correct. Not really sure where exactly this property is used internally so I just left it there. There is a couple of tests setting up that property. Do you know why by any chance?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r410056722", "createdAt": "2020-04-17T07:59:36Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/JbpmTestCase.java", "diffHunk": "@@ -80,12 +80,10 @@ protected void finished(Description description) {\n     );\n \n     @Override\n-    protected PoolingDataSourceWrapper setupPoolingDataSource() {\n+    protected Properties getDataSourceProperties(){\n         Properties dsProps = PersistenceUtil.getDatasourceProperties();\n         dsProps.setProperty(\"POOL_CONNECTIONS\", \"false\");\n-        // Setup the datasource\n-        PoolingDataSourceWrapper ds1 = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-        return ds1;\n+        return dsProps;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTA0Mw=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3NTE0NA==", "bodyText": "By looking at the Git history it seems that this is needed because of Narayana.", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r435975144", "createdAt": "2020-06-05T14:52:50Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-coverage/src/test/java/org/jbpm/test/JbpmTestCase.java", "diffHunk": "@@ -80,12 +80,10 @@ protected void finished(Description description) {\n     );\n \n     @Override\n-    protected PoolingDataSourceWrapper setupPoolingDataSource() {\n+    protected Properties getDataSourceProperties(){\n         Properties dsProps = PersistenceUtil.getDatasourceProperties();\n         dsProps.setProperty(\"POOL_CONNECTIONS\", \"false\");\n-        // Setup the datasource\n-        PoolingDataSourceWrapper ds1 = PersistenceUtil.setupPoolingDataSource(dsProps, \"jdbc/jbpm-ds\");\n-        return ds1;\n+        return dsProps;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTA0Mw=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzU4MDI2OnYy", "diffSide": "RIGHT", "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/quartzmockentities/QrtzJobDetails.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoyODoxN1rOGFMMbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzoxNzoyM1rOGlikNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTg1NQ==", "bodyText": "Was the validation failing or why was this changed?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408095855", "createdAt": "2020-04-14T12:28:17Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/quartzmockentities/QrtzJobDetails.java", "diffHunk": "@@ -57,6 +57,6 @@\n     private Boolean requestsRecovery;\n \n     @Lob\n-    @Column(name = \"JOB_DATA\")\n+    @Column(name = \"JOB_DATA\", length = 5000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1MjQ0OA==", "bodyText": "As per this PR's note:\nNote: QrtzJobDetails class modified to set a minimum BLOB type - Otherwise, when enabling Hibernate auto-create flag to true, it will create a default value of 250 bytes for BLOB columns which is not enough in some scenarios.\nProblem with this is when database creation is through sql scripts. If you remember, we had to remove the blob size out of the scripts, cause it failed. I was thinking about setting SQL script to this size but at the same time these scripts are taken from Quartz repository.\nWhat do you think?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r409652448", "createdAt": "2020-04-16T15:34:08Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/quartzmockentities/QrtzJobDetails.java", "diffHunk": "@@ -57,6 +57,6 @@\n     private Boolean requestsRecovery;\n \n     @Lob\n-    @Column(name = \"JOB_DATA\")\n+    @Column(name = \"JOB_DATA\", length = 5000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTg1NQ=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3OTcwOA==", "bodyText": "Cannot remember now what failed when blob size was in the scripts. But these mock entities are used to validate the database scripts so I think the scripts and these entities should be 1:1?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r435979708", "createdAt": "2020-06-05T14:59:50Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/quartzmockentities/QrtzJobDetails.java", "diffHunk": "@@ -57,6 +57,6 @@\n     private Boolean requestsRecovery;\n \n     @Lob\n-    @Column(name = \"JOB_DATA\")\n+    @Column(name = \"JOB_DATA\", length = 5000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTg1NQ=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAxNjgyMw==", "bodyText": "These Quartz scripts are taken from official Quart repo, so initially there was a problem with them when the size of the blob was set to 2000. So Maciej, removed the size in a PR, however afterwards when upgrading jbpm to use a newer version of Quartz (2.x), then these sql scripts overwrote these changes and put this size/limit back again.\nSo to avoid this, I raised a PR but on Quartz, so we make sure these size/limit is removed from the sql script in Quartz itself:\nquartz-scheduler/quartz#559\nProblem now... if we remove this size also from the entities to keep them in sync with the scripts, we have a different problem because by default, hibernates generates a 250 bytes length for a blob field which is not enough for us (it fails), so I had to manually set this limit to a higher value, after all these are just mock entities.\nQuestion is: should we really remove the size of the Quartz script or just increase to a certain valid size for us? Apparently in the original quartz script, it's kind of saying that you can increase these limit:\nhttps://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/resources/org/quartz/impl/jdbcjobstore/tables_db2.sql\nWhat do you think?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r442016823", "createdAt": "2020-06-18T07:17:23Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-util/src/main/java/org/jbpm/test/persistence/scripts/quartzmockentities/QrtzJobDetails.java", "diffHunk": "@@ -57,6 +57,6 @@\n     private Boolean requestsRecovery;\n \n     @Lob\n-    @Column(name = \"JOB_DATA\")\n+    @Column(name = \"JOB_DATA\", length = 5000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTg1NQ=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDAxMTUyOnYy", "diffSide": "RIGHT", "path": "jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDowNjo0MFrOGFQXGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODo0MDoyNVrOGI54ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE2NDEyMw==", "bodyText": "Can't we directly use the PersistenceUtil class? We should always use the properties from datasource.properties file so I would delete the option of providing null properties completely.", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r408164123", "createdAt": "2020-04-14T14:06:40Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java", "diffHunk": "@@ -16,19 +16,56 @@\n \n package org.jbpm.test;\n \n+import java.util.Properties;\n+\n import org.jbpm.process.instance.impl.util.LoggingPrintStream;\n+import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class AbstractBaseTest {\n-    \n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractBaseTest.class);\n+\n+    protected static String datasourceName = \"jdbc/jbpm-ds\";\n+\n     @BeforeClass\n-    public static void configure() { \n+    public static void configure() {\n         LoggingPrintStream.interceptSysOutSysErr();\n     }\n     \n     @AfterClass\n-    public static void reset() { \n+    public static void reset() {\n         LoggingPrintStream.resetInterceptSysOutSysErr();\n     }\n+\n+    protected String getJndiDatasourceName(){\n+        return datasourceName;\n+    }\n+\n+    protected Properties getDataSourceProperties(){\n+        return PersistenceUtil.getDatasourceProperties();\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(String datasourceName) {\n+        return setupPoolingDataSource(null, datasourceName);\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(Properties properties, String datasourceName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk5MDE1NA==", "bodyText": "Good point. Done.", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r411990154", "createdAt": "2020-04-21T08:40:25Z", "author": {"login": "afalhambra"}, "path": "jbpm-test/src/main/java/org/jbpm/test/AbstractBaseTest.java", "diffHunk": "@@ -16,19 +16,56 @@\n \n package org.jbpm.test;\n \n+import java.util.Properties;\n+\n import org.jbpm.process.instance.impl.util.LoggingPrintStream;\n+import org.jbpm.test.persistence.util.PersistenceUtil;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.kie.test.util.db.PoolingDataSourceWrapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class AbstractBaseTest {\n-    \n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractBaseTest.class);\n+\n+    protected static String datasourceName = \"jdbc/jbpm-ds\";\n+\n     @BeforeClass\n-    public static void configure() { \n+    public static void configure() {\n         LoggingPrintStream.interceptSysOutSysErr();\n     }\n     \n     @AfterClass\n-    public static void reset() { \n+    public static void reset() {\n         LoggingPrintStream.resetInterceptSysOutSysErr();\n     }\n+\n+    protected String getJndiDatasourceName(){\n+        return datasourceName;\n+    }\n+\n+    protected Properties getDataSourceProperties(){\n+        return PersistenceUtil.getDatasourceProperties();\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(String datasourceName) {\n+        return setupPoolingDataSource(null, datasourceName);\n+    }\n+\n+    protected static PoolingDataSourceWrapper setupPoolingDataSource(Properties properties, String datasourceName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE2NDEyMw=="}, "originalCommit": {"oid": "1d6e7c21fd347381ebb2f27ce87de367a9a8c79b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTU4ODY2OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-executor/src/test/java/org/jbpm/executor/DBUnavilabilityExecutorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTozOTo0M1rOGNP1Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzoxNjozM1rOGliisA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0NDAxOA==", "bodyText": "Just checking, here without setting any port, default will be used (or a random, if it's already on use), no? Because previously it was started on 9123.", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r416544018", "createdAt": "2020-04-28T11:39:43Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-executor/src/test/java/org/jbpm/executor/DBUnavilabilityExecutorTest.java", "diffHunk": "@@ -47,33 +46,29 @@\n \n public class DBUnavilabilityExecutorTest{\n \n-    public static final Map<String, Object> cachedEntities = new HashMap<String, Object>();\n+    public static final Map<String, Object> cachedEntities = new HashMap<>();\n     private ExecutorService executorService;\n \n+    private static Properties dsProps;\n \n     private EntityManagerFactory emf = null;\n \n \tprivate PoolingDataSourceWrapper pds;\n \n-\tprivate static Server h2Server;\n-\n \t@BeforeClass\n-    public static void createDBServer() throws Exception {\n-\t    h2Server = Server.createTcpServer(new String[] { \"-tcpPort\", \"9123\" });\n-\t    h2Server.start();\n+    public static void createDBServer() {\n+        dsProps = ExecutorTestUtil.getDatasourceProperties();\n+        dsProps.setProperty(\"url\", \"jdbc:h2:tcp://localhost/target/jbpm-exec-test;MVCC=TRUE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwMDE2Nw==", "bodyText": "+1, I would leave the URL as it was before.", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r436000167", "createdAt": "2020-06-05T15:33:28Z", "author": {"login": "MarianMacik"}, "path": "jbpm-services/jbpm-executor/src/test/java/org/jbpm/executor/DBUnavilabilityExecutorTest.java", "diffHunk": "@@ -47,33 +46,29 @@\n \n public class DBUnavilabilityExecutorTest{\n \n-    public static final Map<String, Object> cachedEntities = new HashMap<String, Object>();\n+    public static final Map<String, Object> cachedEntities = new HashMap<>();\n     private ExecutorService executorService;\n \n+    private static Properties dsProps;\n \n     private EntityManagerFactory emf = null;\n \n \tprivate PoolingDataSourceWrapper pds;\n \n-\tprivate static Server h2Server;\n-\n \t@BeforeClass\n-    public static void createDBServer() throws Exception {\n-\t    h2Server = Server.createTcpServer(new String[] { \"-tcpPort\", \"9123\" });\n-\t    h2Server.start();\n+    public static void createDBServer() {\n+        dsProps = ExecutorTestUtil.getDatasourceProperties();\n+        dsProps.setProperty(\"url\", \"jdbc:h2:tcp://localhost/target/jbpm-exec-test;MVCC=TRUE\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0NDAxOA=="}, "originalCommit": {"oid": "9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAxNjQzMg==", "bodyText": "done", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r442016432", "createdAt": "2020-06-18T07:16:33Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-executor/src/test/java/org/jbpm/executor/DBUnavilabilityExecutorTest.java", "diffHunk": "@@ -47,33 +46,29 @@\n \n public class DBUnavilabilityExecutorTest{\n \n-    public static final Map<String, Object> cachedEntities = new HashMap<String, Object>();\n+    public static final Map<String, Object> cachedEntities = new HashMap<>();\n     private ExecutorService executorService;\n \n+    private static Properties dsProps;\n \n     private EntityManagerFactory emf = null;\n \n \tprivate PoolingDataSourceWrapper pds;\n \n-\tprivate static Server h2Server;\n-\n \t@BeforeClass\n-    public static void createDBServer() throws Exception {\n-\t    h2Server = Server.createTcpServer(new String[] { \"-tcpPort\", \"9123\" });\n-\t    h2Server.start();\n+    public static void createDBServer() {\n+        dsProps = ExecutorTestUtil.getDatasourceProperties();\n+        dsProps.setProperty(\"url\", \"jdbc:h2:tcp://localhost/target/jbpm-exec-test;MVCC=TRUE\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0NDAxOA=="}, "originalCommit": {"oid": "9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjA5NDc4OnYy", "diffSide": "RIGHT", "path": "jbpm-test-coverage/src/test/filtered-resources/META-INF/persistence.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjo1MTo0OFrOGf1-AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzoxNzoxNFrOGlij-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0MzI2NQ==", "bodyText": "So we changed Quartz scripts for this as an interim solution until we have proper scripts in place?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r436043265", "createdAt": "2020-06-05T16:51:48Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-coverage/src/test/filtered-resources/META-INF/persistence.xml", "diffHunk": "@@ -72,6 +72,21 @@\n \n     <class>org.jbpm.kie.services.impl.query.persistence.QueryDefinitionEntity</class>\n     <class>org.jbpm.kie.services.impl.store.DeploymentStoreEntry</class>\n+\n+    <!-- Quartz -->\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzBlobTriggers</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzCalendars</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzCronTriggers</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzFiredTriggers</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzJobDetails</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzJobListeners</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzLocks</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzPausedTriggerGrps</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzSchedulerState</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzSimpleTriggers</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzTriggerListeners</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzTriggers</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzSimpropTriggers</class>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAxNjc2Mg==", "bodyText": "Yes, correct.\nMy first step is to get this work with hibernate auto creation enabled, then I will switch to using DDL scripts.\nAdding a TODO here to not forget to remove these from the persistence.xml afterwards.", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r442016762", "createdAt": "2020-06-18T07:17:14Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-coverage/src/test/filtered-resources/META-INF/persistence.xml", "diffHunk": "@@ -72,6 +72,21 @@\n \n     <class>org.jbpm.kie.services.impl.query.persistence.QueryDefinitionEntity</class>\n     <class>org.jbpm.kie.services.impl.store.DeploymentStoreEntry</class>\n+\n+    <!-- Quartz -->\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzBlobTriggers</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzCalendars</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzCronTriggers</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzFiredTriggers</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzJobDetails</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzJobListeners</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzLocks</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzPausedTriggerGrps</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzSchedulerState</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzSimpleTriggers</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzTriggerListeners</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzTriggers</class>\n+    <class>org.jbpm.test.persistence.scripts.quartzmockentities.QrtzSimpropTriggers</class>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0MzI2NQ=="}, "originalCommit": {"oid": "9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjExNzg5OnYy", "diffSide": "RIGHT", "path": "jbpm-test-coverage/src/test/filtered-resources/META-INF/persistence.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjo1OToyM1rOGf2NKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzo0OToxOFrOGpXJ-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0NzE0NQ==", "bodyText": "This is here so this PU is defined in the module which uses it directly?\nBTW it seems that until now this PU definition was taken from jbpm-executor test-jar. This dependency seems to be there just for availability of CountDownAsyncJobListener which is defined there. This can be mitigated in the future by putting it into jbpm-test-util among other listeners.", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r436047145", "createdAt": "2020-06-05T16:59:23Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-coverage/src/test/filtered-resources/META-INF/persistence.xml", "diffHunk": "@@ -183,6 +198,76 @@\n         <property name=\"hibernate.transaction.jta.platform\" value=\"org.hibernate.service.jta.platform.internal.JBossStandAloneJtaPlatform\" />\n         <property name=\"hibernate.connection.handling_mode\" value=\"DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION\"/>\n       </properties>        \n-    </persistence-unit>    \n+    </persistence-unit>\n+\n+  <persistence-unit name=\"org.jbpm.persistence.complete\" transaction-type=\"JTA\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAxNjY3Mw==", "bodyText": "Problem here is that LogCleanupCommandTest class needs a different PU for the AsyncJobListener.\nhttps://github.com/kiegroup/jbpm/blob/master/jbpm-test-coverage/src/test/java/org/jbpm/test/functional/jobexec/LogCleanupCommandTest.java#L72\nSo if we move this jbpm-test-util we will still need to have a PU defined in the persistence.xml file specifically for this test case.\nWhat do you think?", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r442016673", "createdAt": "2020-06-18T07:17:03Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-coverage/src/test/filtered-resources/META-INF/persistence.xml", "diffHunk": "@@ -183,6 +198,76 @@\n         <property name=\"hibernate.transaction.jta.platform\" value=\"org.hibernate.service.jta.platform.internal.JBossStandAloneJtaPlatform\" />\n         <property name=\"hibernate.connection.handling_mode\" value=\"DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION\"/>\n       </properties>        \n-    </persistence-unit>    \n+    </persistence-unit>\n+\n+  <persistence-unit name=\"org.jbpm.persistence.complete\" transaction-type=\"JTA\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0NzE0NQ=="}, "originalCommit": {"oid": "9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4NDkyMw==", "bodyText": "Yes, the current solution is right. My point was that until now it worked just because jbpm-executor test-jar was on the classpath and the persistence.xml was taken from there. Moreover, this dependency is there just so the CountDownAsyncJobListener is available in the jbpm-test-coverage module. We can get rid of this dependency by putting that listener into the jbpm-test-util module where we currently have many other listeners. But this can be done in a separate PR later.", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r445984923", "createdAt": "2020-06-26T06:06:08Z", "author": {"login": "MarianMacik"}, "path": "jbpm-test-coverage/src/test/filtered-resources/META-INF/persistence.xml", "diffHunk": "@@ -183,6 +198,76 @@\n         <property name=\"hibernate.transaction.jta.platform\" value=\"org.hibernate.service.jta.platform.internal.JBossStandAloneJtaPlatform\" />\n         <property name=\"hibernate.connection.handling_mode\" value=\"DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION\"/>\n       </properties>        \n-    </persistence-unit>    \n+    </persistence-unit>\n+\n+  <persistence-unit name=\"org.jbpm.persistence.complete\" transaction-type=\"JTA\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0NzE0NQ=="}, "originalCommit": {"oid": "9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyNDE4Nw==", "bodyText": "sure. Will add that for a later PR", "url": "https://github.com/kiegroup/jbpm/pull/1627#discussion_r446024187", "createdAt": "2020-06-26T07:49:18Z", "author": {"login": "afalhambra"}, "path": "jbpm-test-coverage/src/test/filtered-resources/META-INF/persistence.xml", "diffHunk": "@@ -183,6 +198,76 @@\n         <property name=\"hibernate.transaction.jta.platform\" value=\"org.hibernate.service.jta.platform.internal.JBossStandAloneJtaPlatform\" />\n         <property name=\"hibernate.connection.handling_mode\" value=\"DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION\"/>\n       </properties>        \n-    </persistence-unit>    \n+    </persistence-unit>\n+\n+  <persistence-unit name=\"org.jbpm.persistence.complete\" transaction-type=\"JTA\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0NzE0NQ=="}, "originalCommit": {"oid": "9df8a1b6e765b5cf3bbfa2bce205f047cb6dc42f"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1863, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}