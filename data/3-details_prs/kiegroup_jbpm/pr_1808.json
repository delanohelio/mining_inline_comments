{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NzM3MDE1", "number": 1808, "title": "[JBPM-9474] AMQ Streams (Kafka) integration - Produce events to Kafka by Signal or Messages Events ", "bodyText": "Firing event when signal is thrown or message is sent\nJIRA:\nJBPM-9474\ndepends on:\nkiegroup/droolsjbpm-knowledge#486\nkiegroup/drools#3264\nmerge with\nkiegroup/droolsjbpm-integration#2322", "createdAt": "2020-11-23T13:36:49Z", "url": "https://github.com/kiegroup/jbpm/pull/1808", "merged": true, "mergeCommit": {"oid": "db32d5728bddb0728da261fce194b79a62e2114f"}, "closed": true, "closedAt": "2020-12-04T08:00:01Z", "author": {"login": "fjtirado"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfVURPABqjQwMjc2OTYxOTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdizCj8gFqTU0NDcyNzQ5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7aca67d04387e19f76dbc2afba8cc0c2b2140572", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/7aca67d04387e19f76dbc2afba8cc0c2b2140572", "committedDate": "2020-11-23T13:34:59Z", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments"}, "afterCommit": {"oid": "e424ad6c016eba6b5d85806bff84cb1e329e18a4", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/e424ad6c016eba6b5d85806bff84cb1e329e18a4", "committedDate": "2020-11-23T13:38:51Z", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e424ad6c016eba6b5d85806bff84cb1e329e18a4", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/e424ad6c016eba6b5d85806bff84cb1e329e18a4", "committedDate": "2020-11-23T13:38:51Z", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments"}, "afterCommit": {"oid": "2dc8500ef82ad63d90088f420727a3354c04cbf6", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/2dc8500ef82ad63d90088f420727a3354c04cbf6", "committedDate": "2020-11-23T13:48:56Z", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2dc8500ef82ad63d90088f420727a3354c04cbf6", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/2dc8500ef82ad63d90088f420727a3354c04cbf6", "committedDate": "2020-11-23T13:48:56Z", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments"}, "afterCommit": {"oid": "c314cc2cacd97d550ab9194cf548753a6eb4bdbf", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/c314cc2cacd97d550ab9194cf548753a6eb4bdbf", "committedDate": "2020-11-23T13:51:57Z", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c314cc2cacd97d550ab9194cf548753a6eb4bdbf", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/c314cc2cacd97d550ab9194cf548753a6eb4bdbf", "committedDate": "2020-11-23T13:51:57Z", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments"}, "afterCommit": {"oid": "9ebb655489d699580dc465da872f18f9bafb1033", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/9ebb655489d699580dc465da872f18f9bafb1033", "committedDate": "2020-11-23T14:19:53Z", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ebb655489d699580dc465da872f18f9bafb1033", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/9ebb655489d699580dc465da872f18f9bafb1033", "committedDate": "2020-11-23T14:19:53Z", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments"}, "afterCommit": {"oid": "eac26e77cc05396af5cc85a51f7c93f43023dd5d", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/eac26e77cc05396af5cc85a51f7c93f43023dd5d", "committedDate": "2020-11-24T16:46:40Z", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments\n\nFiring event when signal is thrown or message is sent"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eac26e77cc05396af5cc85a51f7c93f43023dd5d", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/eac26e77cc05396af5cc85a51f7c93f43023dd5d", "committedDate": "2020-11-24T16:46:40Z", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments\n\nFiring event when signal is thrown or message is sent"}, "afterCommit": {"oid": "4c2065f746beea44d89ed9f28a5fa6107a8e2fef", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/4c2065f746beea44d89ed9f28a5fa6107a8e2fef", "committedDate": "2020-11-24T17:08:47Z", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments\n\nFiring event when signal is thrown or message is sent"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c2065f746beea44d89ed9f28a5fa6107a8e2fef", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/4c2065f746beea44d89ed9f28a5fa6107a8e2fef", "committedDate": "2020-11-24T17:08:47Z", "message": "[JBPM-9474] Include expressionLanguage attribute for all Assignments\n\nFiring event when signal is thrown or message is sent"}, "afterCommit": {"oid": "2178a60938032365b32cae2bfc757aa33f96c890", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/2178a60938032365b32cae2bfc757aa33f96c890", "committedDate": "2020-11-24T17:38:45Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2178a60938032365b32cae2bfc757aa33f96c890", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/2178a60938032365b32cae2bfc757aa33f96c890", "committedDate": "2020-11-24T17:38:45Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService"}, "afterCommit": {"oid": "48c2e84ff06c188a92ba7ef17637269b35770c83", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/48c2e84ff06c188a92ba7ef17637269b35770c83", "committedDate": "2020-11-24T17:41:59Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48c2e84ff06c188a92ba7ef17637269b35770c83", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/48c2e84ff06c188a92ba7ef17637269b35770c83", "committedDate": "2020-11-24T17:41:59Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService"}, "afterCommit": {"oid": "00e2520b1388b261f30b278ea3f92d774f8f747e", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/00e2520b1388b261f30b278ea3f92d774f8f747e", "committedDate": "2020-11-24T17:51:54Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d7ae3b8cd1169ae03232d7ac2b41d621874940b", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/0d7ae3b8cd1169ae03232d7ac2b41d621874940b", "committedDate": "2020-11-25T14:39:24Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nAdding incomingNodes and outgoingNode to Signal and Message description"}, "afterCommit": {"oid": "b943a7775421c95747b20d65173310dd4e428b3d", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/b943a7775421c95747b20d65173310dd4e428b3d", "committedDate": "2020-11-25T15:23:15Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nAdding incomingNodes and outgoingNode to Signal and Message description"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b943a7775421c95747b20d65173310dd4e428b3d", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/b943a7775421c95747b20d65173310dd4e428b3d", "committedDate": "2020-11-25T15:23:15Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nAdding incomingNodes and outgoingNode to Signal and Message description"}, "afterCommit": {"oid": "763cf4d73bb99182ab3eaf2c46f4c4f08179d26f", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/763cf4d73bb99182ab3eaf2c46f4c4f08179d26f", "committedDate": "2020-11-25T19:14:49Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nAdding incomingNodes and outgoingNode to Signal and Message description"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "763cf4d73bb99182ab3eaf2c46f4c4f08179d26f", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/763cf4d73bb99182ab3eaf2c46f4c4f08179d26f", "committedDate": "2020-11-25T19:14:49Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nAdding incomingNodes and outgoingNode to Signal and Message description"}, "afterCommit": {"oid": "d1a98b0f68460d02b5be85e9855a8832546407cc", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/d1a98b0f68460d02b5be85e9855a8832546407cc", "committedDate": "2020-11-26T09:25:01Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nAdding incomingNodes and outgoingNode to Signal and Message description"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1a98b0f68460d02b5be85e9855a8832546407cc", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/d1a98b0f68460d02b5be85e9855a8832546407cc", "committedDate": "2020-11-26T09:25:01Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nAdding incomingNodes and outgoingNode to Signal and Message description"}, "afterCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/726694329d65e60d52413e299bd1ab4eef2deb5d", "committedDate": "2020-11-26T09:44:36Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nAdding incomingNodes and outgoingNode to Signal and Message description"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MTQ5OTk5", "url": "https://github.com/kiegroup/jbpm/pull/1808#pullrequestreview-539149999", "createdAt": "2020-11-26T09:45:29Z", "commit": {"oid": "d1a98b0f68460d02b5be85e9855a8832546407cc"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0Nzo0NFrOH6TkxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTo0Nzo0OVrOH6YERg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMDE2NA==", "bodyText": "increase indentation\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String TRANSFORMATION = \"Transformation\";\n          \n          \n            \n                  private static final String TRANSFORMATION = \"Transformation\";", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530900164", "createdAt": "2020-11-26T09:47:44Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -50,6 +57,7 @@\n \tpublic static final String LINK_NAME = \"linkName\";\n \tpublic static final String LINK_SOURCE = \"source\";\n \tpublic static final String LINK_TARGET = \"target\";\n+    private static final String TRANSFORMATION = \"Transformation\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMTM2Nw==", "bodyText": "If we compare change in this line for this PR with current code, string comparation is not exactly the same (upper T in literal TRANSFORMATION). We could add something like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (subNode != null && TRANSFORMATION.equals(subNode.getNodeName())) {\n          \n          \n            \n                        if (subNode != null && TRANSFORMATION.equalsIgnoreCase(subNode.getNodeName())) {", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530901367", "createdAt": "2020-11-26T09:49:37Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -362,7 +359,7 @@ protected void readDataInputAssociation(org.w3c.dom.Node xmlNode,\n             // transformation\n             Transformation transformation = null;\n             subNode = subNode.getNextSibling();\n-            if (subNode != null && \"transformation\".equals(subNode.getNodeName())) {\n+            if (subNode != null && TRANSFORMATION.equals(subNode.getNodeName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyODA3OQ==", "bodyText": "shouldn't we call fireOnMessage instead?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .getProcessEventSupport().fireOnSignal(kcontext.getProcessInstance(), kcontext\n          \n          \n            \n                                .getProcessEventSupport().fireOnMessage(kcontext.getProcessInstance(), kcontext", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530928079", "createdAt": "2020-11-26T10:30:19Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -251,40 +253,35 @@ public void handleMessageNode(final Node node, final Element element,\n \t\t\t\t\tthrow new IllegalArgumentException(\n \t\t\t\t\t\t\t\"Could not find message \" + messageRef);\n \t\t\t\t}\n-                String variable = (String) actionNode.getMetaData(\"MappingVariable\");\n+                message.addOutgoingNode(node);\n+                String mappingVariable = (String) actionNode.getMetaData(\"MappingVariable\");\n                 Variable v = (Variable) ((ProcessBuildData) parser.getData()).getMetaData(\"Variable\");\n-                if (v != null) {\n-                    variable = (String) v.getMetaData(variable);\n-                }\n-\t\t\t\tactionNode.setMetaData(\"MessageType\", message.getType());\n-\t\t\t\tactionNode\n-\t\t\t\t\t\t.setAction(new DroolsConsequenceAction(\n-\t\t\t\t\t\t\t\t\"java\",\n-\t\t\t\t\t\t\t\t\" Object tVariable = \"+ (variable == null ? \"null\" : variable)+\";\"\n-\t\t\t\t\t\t\t\t+ \"org.jbpm.workflow.core.node.Transformation transformation = (org.jbpm.workflow.core.node.Transformation)kcontext.getNodeInstance().getNode().getMetaData().get(\\\"Transformation\\\");\"\n-\t\t\t\t\t\t\t\t+ \"if (transformation != null) {\"\n-\t\t\t\t\t\t\t\t+ \"  tVariable = new org.jbpm.process.core.event.EventTransformerImpl(transformation)\"\n-\t\t\t\t\t\t\t\t+ \"  .transformEvent(\"+(variable == null ? \"null\" : variable)+\");\"\n-\t\t\t\t\t\t\t\t+ \"}\"\n-\t\t\t\t\t\t\t\t+ \"org.drools.core.process.instance.impl.WorkItemImpl workItem = new org.drools.core.process.instance.impl.WorkItemImpl();\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setName(\\\"Send Task\\\");\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setParameter(\\\"MessageType\\\", \\\"\"\n-\t\t\t\t\t\t\t\t\t\t+ message.getType()\n-\t\t\t\t\t\t\t\t\t\t+ \"\\\");\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setDeploymentId((String) kcontext.getKnowledgeRuntime().getEnvironment().get(\\\"deploymentId\\\"));\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ (variable == null ? \"\"\n-\t\t\t\t\t\t\t\t\t\t\t\t: \"workItem.setParameter(\\\"Message\\\", tVariable);\" + EOL)\n-\t\t\t\t\t\t\t\t\t\t+ \"((org.drools.core.process.instance.WorkItemManager) kcontext.getKnowledgeRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\"));\n+                String varName = v != null ? (String) v.getMetaData(mappingVariable) : mappingVariable;\n+                actionNode.setMetaData(\"MessageType\", message.getType());\n+                actionNode.setAction(new JavaDroolsAction(kcontext -> {\n+                    Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode().getMetaData()\n+                            .get(TRANSFORMATION);\n+                    Object tVariable = transformation != null ? new EventTransformerImpl(transformation).transformEvent(\n+                            kcontext.getVariable(varName)) : kcontext.getVariable(varName);\n+                    WorkItemImpl workItem = new WorkItemImpl();\n+                    workItem.setName(\"Send Task\");\n+                    workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+                    workItem.setParameter(\"MessageType\", message.getType());\n+                    workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+                    workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+                    workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\n+                            \"deploymentId\"));\n+                    if (tVariable != null) {\n+                        workItem.setParameter(\"Message\", tVariable);\n+                    }\n+                    ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())\n+                    .getProcessEventSupport().fireOnSignal(kcontext.getProcessInstance(), kcontext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMTEzNA==", "bodyText": "just thinking aloud and wondering whether it's safe to return a mutable collection here? wdyt?", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530931134", "createdAt": "2020-11-26T10:35:07Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/core/Message.java", "diffHunk": "@@ -50,4 +56,19 @@ public void setName(String name) {\n \t\tthis.name = name;\n \t}\n \n+    public void addIncomingNode(Node node) {\n+        incomingNodes.add(node);\n+    }\n+\n+    public void addOutgoingNode(Node node) {\n+        outgoingNodes.add(node);\n+    }\n+\n+    public Collection<Node> getIncomingNodes() {\n+        return incomingNodes;\n+    }\n+\n+    public Collection<Node> getOutgoingNodes() {\n+        return outgoingNodes;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMTk2Ng==", "bodyText": "just thinking aloud and wondering whether it's safe to return a mutable collection here? wdyt?", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530931966", "createdAt": "2020-11-26T10:36:26Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/core/Signal.java", "diffHunk": "@@ -48,4 +54,19 @@ public String getName() {\n \t\treturn name;\n \t}\n \n+    public void addIncomingNode(Node node) {\n+        incomingNodes.add(node);\n+    }\n+\n+    public void addOutgoingNode(Node node) {\n+        outgoingNodes.add(node);\n+    }\n+\n+    public Collection<Node> getIncomingNodes() {\n+        return incomingNodes;\n+    }\n+\n+    public Collection<Node> getOutgoingNodes() {\n+        return outgoingNodes;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1MjExNQ==", "bodyText": "I think hashCode and equals methods might need to change to reflect these two new members.\nAlso toString should also accommodate these two new members", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530952115", "createdAt": "2020-11-26T11:09:21Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/model/SignalDescBaseImpl.java", "diffHunk": "@@ -46,6 +55,16 @@ public String getStructureRef() {\n         return structureRef;\n     }\n \n+    @Override\n+    public Collection<Node> getIncomingNodes() {\n+        return incomingNodes;\n+    }\n+\n+    @Override\n+    public Collection<Node> getOutgoingNodes() {\n+        return outgoingNodes;\n+    }\n+\n     @Override\n     public int hashCode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1NDg3OA==", "bodyText": "maybe default can avoid any backward issues? wdyt?", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530954878", "createdAt": "2020-11-26T11:14:10Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -498,8 +499,17 @@\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n+    /**\n+     * Adds a process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void addProcessEventListener(String deploymentId, ProcessEventListener listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1NDk2Nw==", "bodyText": "same as above", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530954967", "createdAt": "2020-11-26T11:14:18Z", "author": {"login": "afalhambra"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -498,8 +499,17 @@\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n+    /**\n+     * Adds a process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void addProcessEventListener(String deploymentId, ProcessEventListener listener);\n \n-\n-\n-\n+    /**\n+     * Remove process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void removeProcessEventListener(String deploymentId, ProcessEventListener listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NzkyMg==", "bodyText": "Shouldn't we replace below code DroolsConsequenceAction with JavaDroolsAction new class instead? so we can follow the same approach as per IntermidiateEventHandler class?\n\n  \n    \n      jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java\n    \n    \n        Lines 188 to 197\n      in\n      7266943\n    \n    \n    \n    \n\n        \n          \n                      actions.add(new DroolsConsequenceAction(\"java\", \n        \n\n        \n          \n                          \"org.drools.core.process.instance.impl.WorkItemImpl workItem = new org.drools.core.process.instance.impl.WorkItemImpl();\" + EOL + \n        \n\n        \n          \n                          \"workItem.setName(\\\"Send Task\\\");\" + EOL + \n        \n\n        \n          \n                          \"workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\" + EOL + \n        \n\n        \n          \n                          \"workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\" + EOL + \n        \n\n        \n          \n                          \"workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\" + EOL + \n        \n\n        \n          \n                          \"workItem.setParameter(\\\"MessageType\\\", \\\"\" + message.getType() + \"\\\");\" + EOL + \n        \n\n        \n          \n                          (variable == null ? \"\" : \"workItem.setParameter(\\\"Message\\\", \" + variable + \");\" + EOL) + \n        \n\n        \n          \n           \"workItem.setDeploymentId((String) kcontext.getKnowledgeRuntime().getEnvironment().get(\\\"deploymentId\\\"));\" + EOL + \n        \n\n        \n          \n                          \"((org.drools.core.process.instance.WorkItemManager) kcontext.getKnowledgeRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\")); \n        \n    \n  \n\n\nwith some similar approach to this we've used below?\n\n  \n    \n      jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java\n    \n    \n        Lines 261 to 284\n      in\n      7266943\n    \n    \n    \n    \n\n        \n          \n           actionNode.setAction(new JavaDroolsAction(kcontext -> { \n        \n\n        \n          \n               Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode().getMetaData() \n        \n\n        \n          \n                       .get(TRANSFORMATION); \n        \n\n        \n          \n               Object tVariable = transformation != null ? new EventTransformerImpl(transformation).transformEvent( \n        \n\n        \n          \n                       kcontext.getVariable(varName)) : kcontext.getVariable(varName); \n        \n\n        \n          \n               WorkItemImpl workItem = new WorkItemImpl(); \n        \n\n        \n          \n               workItem.setName(\"Send Task\"); \n        \n\n        \n          \n               workItem.setProcessInstanceId(kcontext.getProcessInstance().getId()); \n        \n\n        \n          \n               workItem.setParameter(\"MessageType\", message.getType()); \n        \n\n        \n          \n               workItem.setNodeInstanceId(kcontext.getNodeInstance().getId()); \n        \n\n        \n          \n               workItem.setNodeId(kcontext.getNodeInstance().getNodeId()); \n        \n\n        \n          \n               workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get( \n        \n\n        \n          \n                       \"deploymentId\")); \n        \n\n        \n          \n               if (tVariable != null) { \n        \n\n        \n          \n                   workItem.setParameter(\"Message\", tVariable); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime()) \n        \n\n        \n          \n               .getProcessEventSupport().fireOnSignal(kcontext.getProcessInstance(), kcontext \n        \n\n        \n          \n                       .getNodeInstance(), kcontext.getKieRuntime(), message.getName(), tVariable); \n        \n\n        \n          \n                \n        \n\n        \n          \n               ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem( \n        \n\n        \n          \n                       workItem); \n        \n\n        \n          \n             \n        \n\n        \n          \n           }));", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530967922", "createdAt": "2020-11-26T11:37:14Z", "author": {"login": "afalhambra"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java", "diffHunk": "@@ -181,6 +180,7 @@ public void handleMessageNode(final Node node, final Element element, final Stri\n                 if (message == null) {\n                     throw new IllegalArgumentException(\"Could not find message \" + messageRef);\n                 }\n+                message.addOutgoingNode(node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3Mzc2Ng==", "bodyText": "I'm just wondering what if the action is not an instance of DroolsConsequenceAction? it's ok if we don't do anything in that case (like JavaDroolsAction)? wdyt?", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r530973766", "createdAt": "2020-11-26T11:47:49Z", "author": {"login": "afalhambra"}, "path": "jbpm-flow-builder/src/main/java/org/jbpm/process/builder/ActionNodeBuilder.java", "diffHunk": "@@ -41,13 +41,15 @@ public void build(Process process,\n                       Node node) {\n     \tsuper.build(process, processDescr, context, node);\n         ActionNode actionNode = ( ActionNode ) node;\n-        DroolsConsequenceAction action = (DroolsConsequenceAction) actionNode.getAction();\n-        ActionDescr actionDescr = new ActionDescr();\n-        actionDescr.setText( action.getConsequence() );\n-        actionDescr.setResource(processDescr.getResource());\n+        if (actionNode.getAction() instanceof DroolsConsequenceAction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "726694329d65e60d52413e299bd1ab4eef2deb5d", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/726694329d65e60d52413e299bd1ab4eef2deb5d", "committedDate": "2020-11-26T09:44:36Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nAdding incomingNodes and outgoingNode to Signal and Message description"}, "afterCommit": {"oid": "f6f72c44683b40cac0ababf2952c2a6aa4014d2d", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/f6f72c44683b40cac0ababf2952c2a6aa4014d2d", "committedDate": "2020-11-26T16:53:23Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6f72c44683b40cac0ababf2952c2a6aa4014d2d", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/f6f72c44683b40cac0ababf2952c2a6aa4014d2d", "committedDate": "2020-11-26T16:53:23Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}, "afterCommit": {"oid": "5f923893293d498f7f140bd458c20d05c073a6c2", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/5f923893293d498f7f140bd458c20d05c073a6c2", "committedDate": "2020-11-26T17:29:14Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NzU5Mzgx", "url": "https://github.com/kiegroup/jbpm/pull/1808#pullrequestreview-539759381", "createdAt": "2020-11-27T07:38:26Z", "commit": {"oid": "5f923893293d498f7f140bd458c20d05c073a6c2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f923893293d498f7f140bd458c20d05c073a6c2", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/5f923893293d498f7f140bd458c20d05c073a6c2", "committedDate": "2020-11-26T17:29:14Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}, "afterCommit": {"oid": "b3dc5c55b3250efc3906691efb483d39b4535c85", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/b3dc5c55b3250efc3906691efb483d39b4535c85", "committedDate": "2020-11-27T09:57:59Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3dc5c55b3250efc3906691efb483d39b4535c85", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/b3dc5c55b3250efc3906691efb483d39b4535c85", "committedDate": "2020-11-27T09:57:59Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}, "afterCommit": {"oid": "0fcf72d94a1a21e0a90d9a11e3a9e000c538fe49", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/0fcf72d94a1a21e0a90d9a11e3a9e000c538fe49", "committedDate": "2020-11-27T09:59:46Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0fcf72d94a1a21e0a90d9a11e3a9e000c538fe49", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/0fcf72d94a1a21e0a90d9a11e3a9e000c538fe49", "committedDate": "2020-11-27T09:59:46Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}, "afterCommit": {"oid": "36998ac342552e193506c1ee55e89e09887c1160", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/36998ac342552e193506c1ee55e89e09887c1160", "committedDate": "2020-11-27T10:31:12Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5OTIwMTE3", "url": "https://github.com/kiegroup/jbpm/pull/1808#pullrequestreview-539920117", "createdAt": "2020-11-27T11:48:39Z", "commit": {"oid": "36998ac342552e193506c1ee55e89e09887c1160"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTo0ODo0MFrOH67jCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTo0ODo0MFrOH67jCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1NTA4MQ==", "bodyText": "Signal use External Send Task", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531555081", "createdAt": "2020-11-27T11:48:40Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.impl.NodeImpl;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.manager.RuntimeManager;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendSignalAction implements Action {\n+\n+    private String signalName;\n+    private String varName;\n+    private boolean isAsync;\n+    private NodeImpl node;\n+\n+    public SendSignalAction(NodeImpl node, String variable, String signalName, boolean isAsync) {\n+        this.node = node;\n+        this.varName = variable;\n+        this.signalName = signalName;\n+        this.isAsync = isAsync;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = kcontext.getVariable(varName);\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode()\n+                .getMetaData().get(\"Transformation\");\n+        if (transformation != null) {\n+            tVariable = new EventTransformerImpl(transformation).transformEvent(tVariable);\n+        }\n+        String signalType = VariableUtil.resolveVariable(isAsync ? \"ASYNC-\" + signalName : signalName, kcontext\n+                .getNodeInstance());\n+        String scope = (String) node.getMetaData(\"customScope\");\n+        if (\"processInstance\".equalsIgnoreCase(scope)) {\n+            kcontext.getProcessInstance().signalEvent(signalType, tVariable);\n+        } else if (\"runtimeManager\".equalsIgnoreCase(scope) || \"project\".equalsIgnoreCase(scope)) {\n+            ((RuntimeManager) kcontext.getKieRuntime().getEnvironment().get(\"RuntimeManager\")).signalEvent(signalType,\n+                    tVariable);\n+        } else if (\"external\".equalsIgnoreCase(scope)) {\n+            ((InternalProcessRuntime) kcontext.getKieRuntime()).getProcessEventSupport().fireOnSignal(kcontext\n+                    .getProcessInstance(), kcontext.getNodeInstance(), kcontext.getKieRuntime(), signalName, tVariable);\n+            WorkItemImpl workItem = new WorkItemImpl();\n+            workItem.setName(\"External Send Task\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36998ac342552e193506c1ee55e89e09887c1160"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5OTIwMzkx", "url": "https://github.com/kiegroup/jbpm/pull/1808#pullrequestreview-539920391", "createdAt": "2020-11-27T11:49:03Z", "commit": {"oid": "36998ac342552e193506c1ee55e89e09887c1160"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTo0OTowM1rOH67j3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTo0OTowM1rOH67j3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1NTI5Mw==", "bodyText": "Should we catch WorkItemHandlerNotFoundException in case user has not registered a handler for signal?", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531555293", "createdAt": "2020-11-27T11:49:03Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.impl.NodeImpl;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.manager.RuntimeManager;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendSignalAction implements Action {\n+\n+    private String signalName;\n+    private String varName;\n+    private boolean isAsync;\n+    private NodeImpl node;\n+\n+    public SendSignalAction(NodeImpl node, String variable, String signalName, boolean isAsync) {\n+        this.node = node;\n+        this.varName = variable;\n+        this.signalName = signalName;\n+        this.isAsync = isAsync;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = kcontext.getVariable(varName);\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode()\n+                .getMetaData().get(\"Transformation\");\n+        if (transformation != null) {\n+            tVariable = new EventTransformerImpl(transformation).transformEvent(tVariable);\n+        }\n+        String signalType = VariableUtil.resolveVariable(isAsync ? \"ASYNC-\" + signalName : signalName, kcontext\n+                .getNodeInstance());\n+        String scope = (String) node.getMetaData(\"customScope\");\n+        if (\"processInstance\".equalsIgnoreCase(scope)) {\n+            kcontext.getProcessInstance().signalEvent(signalType, tVariable);\n+        } else if (\"runtimeManager\".equalsIgnoreCase(scope) || \"project\".equalsIgnoreCase(scope)) {\n+            ((RuntimeManager) kcontext.getKieRuntime().getEnvironment().get(\"RuntimeManager\")).signalEvent(signalType,\n+                    tVariable);\n+        } else if (\"external\".equalsIgnoreCase(scope)) {\n+            ((InternalProcessRuntime) kcontext.getKieRuntime()).getProcessEventSupport().fireOnSignal(kcontext\n+                    .getProcessInstance(), kcontext.getNodeInstance(), kcontext.getKieRuntime(), signalName, tVariable);\n+            WorkItemImpl workItem = new WorkItemImpl();\n+            workItem.setName(\"External Send Task\");\n+            workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+            workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+            workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+            workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\"deploymentId\"));\n+            workItem.setParameter(\"Signal\", signalType);\n+            workItem.setParameter(\"SignalProcessInstanceId\", kcontext.getVariable(\"SignalProcessInstanceId\"));\n+            workItem.setParameter(\"SignalWorkItemId\", kcontext.getVariable(\"SignalWorkItemId\"));\n+            workItem.setParameter(\"SignalDeploymentId\", kcontext.getVariable(\"SignalDeploymentId\"));\n+            if (tVariable != null) {\n+                workItem.setParameter(\"Data\", tVariable);\n+            }\n+            ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36998ac342552e193506c1ee55e89e09887c1160"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5OTIwNzMy", "url": "https://github.com/kiegroup/jbpm/pull/1808#pullrequestreview-539920732", "createdAt": "2020-11-27T11:49:36Z", "commit": {"oid": "36998ac342552e193506c1ee55e89e09887c1160"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTo0OTozNlrOH67lBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTo0OTozNlrOH67lBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1NTU5MQ==", "bodyText": "Message use Send Task", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531555591", "createdAt": "2020-11-27T11:49:36Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendMessageAction implements Action {\n+\n+    private String varName;\n+    private Message message;\n+\n+    public SendMessageAction(String varName, Message message) {\n+        this.varName = varName;\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode().getMetaData()\n+                .get(\"Transformation\");\n+        Object tVariable = transformation != null ? new EventTransformerImpl(transformation).transformEvent(\n+                kcontext.getVariable(varName)) : kcontext.getVariable(varName);\n+        WorkItemImpl workItem = new WorkItemImpl();\n+        workItem.setName(\"Send Task\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36998ac342552e193506c1ee55e89e09887c1160"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5OTIwOTQx", "url": "https://github.com/kiegroup/jbpm/pull/1808#pullrequestreview-539920941", "createdAt": "2020-11-27T11:49:56Z", "commit": {"oid": "36998ac342552e193506c1ee55e89e09887c1160"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTo0OTo1NlrOH67lqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTo0OTo1NlrOH67lqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1NTc1NA==", "bodyText": "Should we catch WorkItemHandlerNotFoundException in case user has not registered a handler for message?", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531555754", "createdAt": "2020-11-27T11:49:56Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendMessageAction implements Action {\n+\n+    private String varName;\n+    private Message message;\n+\n+    public SendMessageAction(String varName, Message message) {\n+        this.varName = varName;\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode().getMetaData()\n+                .get(\"Transformation\");\n+        Object tVariable = transformation != null ? new EventTransformerImpl(transformation).transformEvent(\n+                kcontext.getVariable(varName)) : kcontext.getVariable(varName);\n+        WorkItemImpl workItem = new WorkItemImpl();\n+        workItem.setName(\"Send Task\");\n+        workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+        workItem.setParameter(\"MessageType\", message.getType());\n+        workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+        workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+        workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\"deploymentId\"));\n+        if (tVariable != null) {\n+            workItem.setParameter(\"Message\", tVariable);\n+        }\n+        ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())\n+                .getProcessEventSupport().fireOnMessage(kcontext.getProcessInstance(), kcontext\n+                        .getNodeInstance(), kcontext.getKieRuntime(), message.getName(), tVariable);\n+        ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36998ac342552e193506c1ee55e89e09887c1160"}, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36998ac342552e193506c1ee55e89e09887c1160", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/36998ac342552e193506c1ee55e89e09887c1160", "committedDate": "2020-11-27T10:31:12Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}, "afterCommit": {"oid": "a67251c82259357a94cf021789c1f37f97f86f2f", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/a67251c82259357a94cf021789c1f37f97f86f2f", "committedDate": "2020-11-27T18:12:32Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a67251c82259357a94cf021789c1f37f97f86f2f", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/a67251c82259357a94cf021789c1f37f97f86f2f", "committedDate": "2020-11-27T18:12:32Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}, "afterCommit": {"oid": "e118343280509172fa6d98cde72d91f5225c439a", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/e118343280509172fa6d98cde72d91f5225c439a", "committedDate": "2020-11-27T18:57:14Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTQyMjg2", "url": "https://github.com/kiegroup/jbpm/pull/1808#pullrequestreview-540142286", "createdAt": "2020-11-27T19:01:25Z", "commit": {"oid": "e118343280509172fa6d98cde72d91f5225c439a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxOTowMToyNVrOH7Gf3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxOTowMToyNVrOH7Gf3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTczNDQ5Mw==", "bodyText": "Please note that event is fired only if the signal has scope external", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r531734493", "createdAt": "2020-11-27T19:01:25Z", "author": {"login": "fjtirado"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.compiler.compiler.xml.XmlDumper;\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.Node;\n+import org.jbpm.workflow.core.impl.NodeImpl;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.manager.RuntimeManager;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendSignalAction implements Action {\n+\n+    private String signalName;\n+    private String varName;\n+    private boolean isAsync;\n+    private NodeImpl node;\n+\n+    public SendSignalAction(NodeImpl node, String variable, String signalName, boolean isAsync) {\n+        this.node = node;\n+        this.varName = variable;\n+        this.signalName = signalName;\n+        this.isAsync = isAsync;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = kcontext.getVariable(varName);\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode()\n+                .getMetaData().get(\"Transformation\");\n+        if (transformation != null) {\n+            tVariable = new EventTransformerImpl(transformation).transformEvent(tVariable);\n+        }\n+        String signalType = VariableUtil.resolveVariable(isAsync ? \"ASYNC-\" + signalName : signalName, kcontext\n+                .getNodeInstance());\n+        String scope = (String) node.getMetaData(\"customScope\");\n+        if (\"processInstance\".equalsIgnoreCase(scope)) {\n+            kcontext.getProcessInstance().signalEvent(signalType, tVariable);\n+        } else if (\"runtimeManager\".equalsIgnoreCase(scope) || \"project\".equalsIgnoreCase(scope)) {\n+            ((RuntimeManager) kcontext.getKieRuntime().getEnvironment().get(\"RuntimeManager\")).signalEvent(signalType,\n+                    tVariable);\n+        } else if (\"external\".equalsIgnoreCase(scope)) {\n+            ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e118343280509172fa6d98cde72d91f5225c439a"}, "originalPosition": 65}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e118343280509172fa6d98cde72d91f5225c439a", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/e118343280509172fa6d98cde72d91f5225c439a", "committedDate": "2020-11-27T18:57:14Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}, "afterCommit": {"oid": "3a5cb8a3c6fa0526d574cd7c08e578443372aeca", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/3a5cb8a3c6fa0526d574cd7c08e578443372aeca", "committedDate": "2020-11-30T09:47:15Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a5cb8a3c6fa0526d574cd7c08e578443372aeca", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/3a5cb8a3c6fa0526d574cd7c08e578443372aeca", "committedDate": "2020-11-30T09:47:15Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}, "afterCommit": {"oid": "dc79b82f9e76dec9d720378eb9aff64156db2104", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/dc79b82f9e76dec9d720378eb9aff64156db2104", "committedDate": "2020-11-30T13:47:11Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc79b82f9e76dec9d720378eb9aff64156db2104", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/dc79b82f9e76dec9d720378eb9aff64156db2104", "committedDate": "2020-11-30T13:47:11Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}, "afterCommit": {"oid": "298d9eb908d35d51936ee633953916e2aff97d5c", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/298d9eb908d35d51936ee633953916e2aff97d5c", "committedDate": "2020-11-30T14:17:51Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "298d9eb908d35d51936ee633953916e2aff97d5c", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/298d9eb908d35d51936ee633953916e2aff97d5c", "committedDate": "2020-11-30T14:17:51Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}, "afterCommit": {"oid": "74c6cd4980daaaaf4b348297874d7e8e750c5543", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/74c6cd4980daaaaf4b348297874d7e8e750c5543", "committedDate": "2020-11-30T17:24:31Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74c6cd4980daaaaf4b348297874d7e8e750c5543", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/74c6cd4980daaaaf4b348297874d7e8e750c5543", "committedDate": "2020-11-30T17:24:31Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}, "afterCommit": {"oid": "8f06553e13b55917a826060c81fccc1d71e104e7", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/8f06553e13b55917a826060c81fccc1d71e104e7", "committedDate": "2020-11-30T17:26:38Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/87d717118f40fc75e4f26f89ad5c73a9e36ad574", "committedDate": "2020-12-01T10:13:49Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f06553e13b55917a826060c81fccc1d71e104e7", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/8f06553e13b55917a826060c81fccc1d71e104e7", "committedDate": "2020-11-30T17:26:38Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}, "afterCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574", "author": {"user": {"login": "Ginxo", "name": "Enrique Mingorance Cano"}}, "url": "https://github.com/kiegroup/jbpm/commit/87d717118f40fc75e4f26f89ad5c73a9e36ad574", "committedDate": "2020-12-01T10:13:49Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nFiring event when signal is thrown or message is sent\nAdding addProcessEventListener to ProcessService\nAdding incomingNodes and outgoingNode to Signal and Message description"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNTYzMjgx", "url": "https://github.com/kiegroup/jbpm/pull/1808#pullrequestreview-542563281", "createdAt": "2020-12-02T07:37:54Z", "commit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzozNzo1NFrOH9N4fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo1NDoxN1rOH9OWig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1MjYzOQ==", "bodyText": "As it seems you are going on further improvements already (modeling operations at bpmn process level changes this for).\nimplementation\nand the value should be\n##Kafka\nto be align with the spec", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533952639", "createdAt": "2020-12-02T07:37:54Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/test/resources/BPMN2-EndEventSignalWithData.bpmn2", "diffHunk": "@@ -4,8 +4,8 @@\n   <bpmn2:process id=\"src.simpleEndSignal\" drools:packageName=\"com.myteam.testit\" drools:version=\"1.0\" name=\"simpleEndSignal\" isExecutable=\"true\">\n     <bpmn2:startEvent id=\"processStartEvent\" drools:selectable=\"true\" color:background-color=\"#9acd32\" color:border-color=\"#000000\" color:color=\"#000000\" name=\"\">\n       <bpmn2:extensionElements>\n-        <drools:metaData name=\"elementname\">\n-          <drools:metaValue><![CDATA[]]></drools:metaValue>\n+        <drools:metaData name=\"customScope\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1NDMxNg==", "bodyText": "not required. on Signal should be send always. please remove this condition.", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533954316", "createdAt": "2020-12-02T07:41:35Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.compiler.compiler.xml.XmlDumper;\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.Node;\n+import org.jbpm.workflow.core.impl.NodeImpl;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.manager.RuntimeManager;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendSignalAction implements Action {\n+\n+    private String signalName;\n+    private String varName;\n+    private boolean isAsync;\n+    private NodeImpl node;\n+\n+    public SendSignalAction(NodeImpl node, String variable, String signalName, boolean isAsync) {\n+        this.node = node;\n+        this.varName = variable;\n+        this.signalName = signalName;\n+        this.isAsync = isAsync;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = kcontext.getVariable(varName);\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode()\n+                .getMetaData().get(\"Transformation\");\n+        if (transformation != null) {\n+            tVariable = new EventTransformerImpl(transformation).transformEvent(tVariable);\n+        }\n+        String signalType = VariableUtil.resolveVariable(isAsync ? \"ASYNC-\" + signalName : signalName, kcontext\n+                .getNodeInstance());\n+        String scope = (String) node.getMetaData(\"customScope\");\n+        if (\"processInstance\".equalsIgnoreCase(scope)) {\n+            kcontext.getProcessInstance().signalEvent(signalType, tVariable);\n+        } else if (\"runtimeManager\".equalsIgnoreCase(scope) || \"project\".equalsIgnoreCase(scope)) {\n+            ((RuntimeManager) kcontext.getKieRuntime().getEnvironment().get(\"RuntimeManager\")).signalEvent(signalType,\n+                    tVariable);\n+        } else if (\"external\".equalsIgnoreCase(scope)) {\n+            ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTczNDQ5Mw=="}, "originalCommit": {"oid": "e118343280509172fa6d98cde72d91f5225c439a"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1NDc0OQ==", "bodyText": "the work item handler is not required. remove it.", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533954749", "createdAt": "2020-12-02T07:42:29Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.impl.NodeImpl;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.manager.RuntimeManager;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendSignalAction implements Action {\n+\n+    private String signalName;\n+    private String varName;\n+    private boolean isAsync;\n+    private NodeImpl node;\n+\n+    public SendSignalAction(NodeImpl node, String variable, String signalName, boolean isAsync) {\n+        this.node = node;\n+        this.varName = variable;\n+        this.signalName = signalName;\n+        this.isAsync = isAsync;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = kcontext.getVariable(varName);\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode()\n+                .getMetaData().get(\"Transformation\");\n+        if (transformation != null) {\n+            tVariable = new EventTransformerImpl(transformation).transformEvent(tVariable);\n+        }\n+        String signalType = VariableUtil.resolveVariable(isAsync ? \"ASYNC-\" + signalName : signalName, kcontext\n+                .getNodeInstance());\n+        String scope = (String) node.getMetaData(\"customScope\");\n+        if (\"processInstance\".equalsIgnoreCase(scope)) {\n+            kcontext.getProcessInstance().signalEvent(signalType, tVariable);\n+        } else if (\"runtimeManager\".equalsIgnoreCase(scope) || \"project\".equalsIgnoreCase(scope)) {\n+            ((RuntimeManager) kcontext.getKieRuntime().getEnvironment().get(\"RuntimeManager\")).signalEvent(signalType,\n+                    tVariable);\n+        } else if (\"external\".equalsIgnoreCase(scope)) {\n+            ((InternalProcessRuntime) kcontext.getKieRuntime()).getProcessEventSupport().fireOnSignal(kcontext\n+                    .getProcessInstance(), kcontext.getNodeInstance(), kcontext.getKieRuntime(), signalName, tVariable);\n+            WorkItemImpl workItem = new WorkItemImpl();\n+            workItem.setName(\"External Send Task\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1NTA4MQ=="}, "originalCommit": {"oid": "36998ac342552e193506c1ee55e89e09887c1160"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1NjMyOQ==", "bodyText": "this transformation is in the wrong place. plz remove", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533956329", "createdAt": "2020-12-02T07:45:55Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.compiler.compiler.xml.XmlDumper;\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.JavaAction;\n+import org.jbpm.workflow.core.Node;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendMessageAction implements JavaAction {\n+\n+    private static final long serialVersionUID = 1L;\n+    private String varName;\n+    private Message message;\n+\n+    public SendMessageAction(String varName, Message message) {\n+        this.varName = varName;\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = VariableResolver.getVariable(kcontext, varName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1NjY5MQ==", "bodyText": "put the signal fire at the begining and before executing the work item check if it is registered", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533956691", "createdAt": "2020-12-02T07:46:44Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendMessageAction implements Action {\n+\n+    private String varName;\n+    private Message message;\n+\n+    public SendMessageAction(String varName, Message message) {\n+        this.varName = varName;\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Transformation transformation = (Transformation) kcontext.getNodeInstance().getNode().getMetaData()\n+                .get(\"Transformation\");\n+        Object tVariable = transformation != null ? new EventTransformerImpl(transformation).transformEvent(\n+                kcontext.getVariable(varName)) : kcontext.getVariable(varName);\n+        WorkItemImpl workItem = new WorkItemImpl();\n+        workItem.setName(\"Send Task\");\n+        workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+        workItem.setParameter(\"MessageType\", message.getType());\n+        workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+        workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+        workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\"deploymentId\"));\n+        if (tVariable != null) {\n+            workItem.setParameter(\"Message\", tVariable);\n+        }\n+        ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())\n+                .getProcessEventSupport().fireOnMessage(kcontext.getProcessInstance(), kcontext\n+                        .getNodeInstance(), kcontext.getKieRuntime(), message.getName(), tVariable);\n+        ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1NTc1NA=="}, "originalCommit": {"oid": "36998ac342552e193506c1ee55e89e09887c1160"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1ODYyNw==", "bodyText": "not required. remove this. duplicated api", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533958627", "createdAt": "2020-12-02T07:50:54Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/ProcessServiceImpl.java", "diffHunk": "@@ -854,5 +855,26 @@ protected void disposeRuntimeEngine(RuntimeManager manager, RuntimeEngine engine\n \t\tmanager.disposeRuntimeEngine(engine);\n \t}\n \n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1ODc2Ng==", "bodyText": "remove", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533958766", "createdAt": "2020-12-02T07:51:11Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -498,8 +499,17 @@\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n+    /**\n+     * Adds a process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void addProcessEventListener(String deploymentId, ProcessEventListener listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1ODgxNQ==", "bodyText": "remove", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533958815", "createdAt": "2020-12-02T07:51:16Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-services-api/src/main/java/org/jbpm/services/api/ProcessService.java", "diffHunk": "@@ -498,8 +499,17 @@\n      */\n     public <T> T execute(String deploymentId, Context<?> context, Command<T> command);\n \n+    /**\n+     * Adds a process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void addProcessEventListener(String deploymentId, ProcessEventListener listener);\n \n-\n-\n-\n+    /**\n+     * Remove process event listener\n+     * @param deploymentId\n+     * @param listener\n+     */\n+    void removeProcessEventListener(String deploymentId, ProcessEventListener listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1ODkzMg==", "bodyText": "not needed.", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533958932", "createdAt": "2020-12-02T07:51:28Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-services-api/src/build/revapi-config.json", "diffHunk": "@@ -71,6 +71,24 @@\n                   \"methodName\": \"getMessagesDesc\",\n                   \"elementKind\": \"method\",\n                   \"justification\": \"https://issues.redhat.com/browse/JBPM-9436\"\n+                },\n+                {\n+                  \"code\": \"java.method.addedToInterface\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1OTMyNQ==", "bodyText": "remove this. An action is not the place to put dumper logic", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533959325", "createdAt": "2020-12-02T07:52:15Z", "author": {"login": "elguardian"}, "path": "jbpm-flow/src/main/java/org/jbpm/process/instance/impl/JavaAction.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl;\n+\n+import java.io.Serializable;\n+\n+import org.jbpm.workflow.core.Node;\n+\n+public interface JavaAction extends Serializable, Action {\n+\n+    void dumpXML(Node node, StringBuilder xmlDump);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1OTk0Mg==", "bodyText": "this logic should be in the incoming input association. you are spreading the logic.\nJust add one item to that (you have the variable plus the transformation it is easy to build in there instead of here).", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533959942", "createdAt": "2020-12-02T07:53:29Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/VariableResolver.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.bpmn2.handler;\n+\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.workflow.core.node.Transformation;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+class VariableResolver {\n+\n+    private VariableResolver() {}\n+\n+    public static Object getVariable(ProcessContext kcontext, String varName) {\n+        Object tVariable = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk2MDE4MQ==", "bodyText": "put this logic in the handler not here.", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533960181", "createdAt": "2020-12-02T07:54:01Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendSignalAction.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.compiler.compiler.xml.XmlDumper;\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.JavaAction;\n+import org.jbpm.process.instance.impl.util.VariableUtil;\n+import org.jbpm.workflow.core.Node;\n+import org.jbpm.workflow.core.impl.NodeImpl;\n+import org.kie.api.runtime.manager.RuntimeManager;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendSignalAction implements JavaAction {\n+\n+    private static final long serialVersionUID = 1L;\n+    private String signalName;\n+    private String varName;\n+    private boolean isAsync;\n+    private NodeImpl node;\n+\n+    public SendSignalAction(NodeImpl node, String variable, String signalName, boolean isAsync) {\n+        this.node = node;\n+        this.varName = variable;\n+        this.signalName = signalName;\n+        this.isAsync = isAsync;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = VariableResolver.getVariable(kcontext, varName);\n+        String signalType = VariableUtil.resolveVariable(isAsync ? \"ASYNC-\" + signalName : signalName, kcontext\n+                .getNodeInstance());\n+        String scope = (String) node.getMetaData(\"customScope\");\n+        if (\"processInstance\".equalsIgnoreCase(scope)) {\n+            kcontext.getProcessInstance().signalEvent(signalType, tVariable);\n+        } else if (\"runtimeManager\".equalsIgnoreCase(scope) || \"project\".equalsIgnoreCase(scope)) {\n+            ((RuntimeManager) kcontext.getKieRuntime().getEnvironment().get(\"RuntimeManager\")).signalEvent(signalType,\n+                    tVariable);\n+        } else if (\"external\".equalsIgnoreCase(scope)) {\n+            ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())\n+                    .getProcessEventSupport().fireOnSignal(kcontext.getProcessInstance(), kcontext.getNodeInstance(),\n+                            kcontext.getKieRuntime(), signalName, tVariable);\n+            WorkItemImpl workItem = new WorkItemImpl();\n+            workItem.setName(\"External Send Task\");\n+            workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+            workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+            workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+            workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\"deploymentId\"));\n+            workItem.setParameter(\"Signal\", signalType);\n+            workItem.setParameter(\"SignalProcessInstanceId\", kcontext.getVariable(\"SignalProcessInstanceId\"));\n+            workItem.setParameter(\"SignalWorkItemId\", kcontext.getVariable(\"SignalWorkItemId\"));\n+            workItem.setParameter(\"SignalDeploymentId\", kcontext.getVariable(\"SignalDeploymentId\"));\n+            if (tVariable != null) {\n+                workItem.setParameter(\"Data\", tVariable);\n+            }\n+            ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\n+        } else {\n+            kcontext.getKieRuntime().signalEvent(signalType, tVariable);\n+        }\n+    }\n+\n+    @Override\n+    public void dumpXML(Node dumpNode, StringBuilder xmlDump) {\n+        final String EOL = System.getProperty(\"line.separator\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk2MDMzMA==", "bodyText": "this logic goes to the handler.", "url": "https://github.com/kiegroup/jbpm/pull/1808#discussion_r533960330", "createdAt": "2020-12-02T07:54:17Z", "author": {"login": "elguardian"}, "path": "jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/handler/SendMessageAction.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.bpmn2.handler;\n+\n+import org.drools.compiler.compiler.xml.XmlDumper;\n+import org.drools.core.common.InternalKnowledgeRuntime;\n+import org.drools.core.process.instance.WorkItemManager;\n+import org.drools.core.process.instance.impl.WorkItemImpl;\n+import org.jbpm.bpmn2.core.Message;\n+import org.jbpm.bpmn2.xml.XmlBPMNProcessDumper;\n+import org.jbpm.process.instance.InternalProcessRuntime;\n+import org.jbpm.process.instance.impl.JavaAction;\n+import org.jbpm.workflow.core.Node;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class SendMessageAction implements JavaAction {\n+\n+    private static final long serialVersionUID = 1L;\n+    private String varName;\n+    private Message message;\n+\n+    public SendMessageAction(String varName, Message message) {\n+        this.varName = varName;\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public void execute(ProcessContext kcontext) throws Exception {\n+        Object tVariable = VariableResolver.getVariable(kcontext, varName);\n+        WorkItemImpl workItem = new WorkItemImpl();\n+        workItem.setName(\"Send Task\");\n+        workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\n+        workItem.setParameter(\"MessageType\", message.getType());\n+        workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\n+        workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\n+        workItem.setDeploymentId((String) kcontext.getKieRuntime().getEnvironment().get(\"deploymentId\"));\n+        if (tVariable != null) {\n+            workItem.setParameter(\"Message\", tVariable);\n+        }\n+        ((InternalProcessRuntime) ((InternalKnowledgeRuntime) kcontext.getKieRuntime()).getProcessRuntime())\n+                .getProcessEventSupport().fireOnMessage(kcontext.getProcessInstance(), kcontext\n+                        .getNodeInstance(), kcontext.getKieRuntime(), message.getName(), tVariable);\n+        ((WorkItemManager) kcontext.getKieRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\n+    }\n+\n+\n+    @Override\n+    public void dumpXML(Node dumpNode, StringBuilder xmlDump) {\n+        final String EOL = System.getProperty(\"line.separator\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d717118f40fc75e4f26f89ad5c73a9e36ad574"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48ecc8a32846c6b3e865f9ab6cc5bb77a04fa485", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/jbpm/commit/48ecc8a32846c6b3e865f9ab6cc5bb77a04fa485", "committedDate": "2020-12-02T11:52:07Z", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nChanges after code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzI3NDky", "url": "https://github.com/kiegroup/jbpm/pull/1808#pullrequestreview-544727492", "createdAt": "2020-12-04T07:58:37Z", "commit": {"oid": "48ecc8a32846c6b3e865f9ab6cc5bb77a04fa485"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 853, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}