{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMTg2MzEw", "number": 1779, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo1Mjo0NVrOEzakuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMTo0NTowNFrOE0WCRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzQ4MjE2OnYy", "diffSide": "RIGHT", "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo1Mjo0NVrOHqn2zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo1Mjo0NVrOHqn2zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1NTI0Ng==", "bodyText": "typo", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r514455246", "createdAt": "2020-10-29T17:52:45Z", "author": {"login": "gmunozfe"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "diffHunk": "@@ -532,7 +768,7 @@ public void testGetTasksAssignedByGroupsWithGroupsLangNoTask() {\n     \n     @Test\n     public void testGetTasksAssignedByGroupsWithGroupsLangOneTask() {\n-        // One potential owner, should go straight to state Reserved\n+        // One potential owner, should go straight to s)tate Reserved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0988f090af152241644e4c71ec279db8193d8bec"}, "originalPosition": 270}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzE1MzEwOnYy", "diffSide": "RIGHT", "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/jaxb/JaxbTaskSerializationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToyMzoxMVrOHsAbng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDoyODoyNVrOHsGpew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNjQ2Mg==", "bodyText": "No longer throwing a checked exception", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r515906462", "createdAt": "2020-11-02T11:23:11Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/jaxb/JaxbTaskSerializationTest.java", "diffHunk": "@@ -118,21 +119,20 @@ public void taskCmdUniqueRootElementTest() throws Exception {\n \n     @Test\n     public void taskCommandSubTypesCanBeSerialized() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAwODMxNQ==", "bodyText": "removed", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r516008315", "createdAt": "2020-11-02T14:28:25Z", "author": {"login": "elguardian"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/jaxb/JaxbTaskSerializationTest.java", "diffHunk": "@@ -118,21 +119,20 @@ public void taskCmdUniqueRootElementTest() throws Exception {\n \n     @Test\n     public void taskCommandSubTypesCanBeSerialized() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNjQ2Mg=="}, "originalCommit": {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzE1NTU4OnYy", "diffSide": "RIGHT", "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/jaxb/JaxbTaskSerializationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToyMzo1NlrOHsAdHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDoyOTo1M1rOHsGttQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNjg0NQ==", "bodyText": "Not really needed\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Constructor<?> construct = jaxbClass.getConstructor(new Class[] {});\n          \n          \n            \n                            Object jaxbInst = construct.newInstance(new Object[] {});\n          \n          \n            \n                            Constructor<?> construct = jaxbClass.getConstructor();\n          \n          \n            \n                            Object jaxbInst = construct.newInstance();", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r515906845", "createdAt": "2020-11-02T11:23:56Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/jaxb/JaxbTaskSerializationTest.java", "diffHunk": "@@ -118,21 +119,20 @@ public void taskCmdUniqueRootElementTest() throws Exception {\n \n     @Test\n     public void taskCommandSubTypesCanBeSerialized() throws Exception {\n-        for (Class<?> jaxbClass : reflections.getSubTypesOf(TaskCommand.class)) {\n-            if (jaxbClass.equals(UserGroupCallbackTaskCommand.class)\n-            \t\t|| jaxbClass.equals(GetCurrentTxTasksCommand.class)) {\n-                continue;\n+        reflections.getSubTypesOf(TaskCommand.class).stream().filter(e -> !e.getName().contains(\"$\")).forEach(jaxbClass ->  {\n+            if (jaxbClass.equals(UserGroupCallbackTaskCommand.class) || jaxbClass.equals(GetCurrentTxTasksCommand.class)) {\n+                return;\n             }\n-            addClassesToSerializationContext(jaxbClass);\n-            Constructor<?> construct = jaxbClass.getConstructor(new Class[] {});\n             try {\n+                addClassesToSerializationContext(jaxbClass);\n+                Constructor<?> construct = jaxbClass.getConstructor(new Class[] {});\n                 Object jaxbInst = construct.newInstance(new Object[] {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAwOTM5Nw==", "bodyText": "jaxbClass.newInstance", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r516009397", "createdAt": "2020-11-02T14:29:53Z", "author": {"login": "elguardian"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/jaxb/JaxbTaskSerializationTest.java", "diffHunk": "@@ -118,21 +119,20 @@ public void taskCmdUniqueRootElementTest() throws Exception {\n \n     @Test\n     public void taskCommandSubTypesCanBeSerialized() throws Exception {\n-        for (Class<?> jaxbClass : reflections.getSubTypesOf(TaskCommand.class)) {\n-            if (jaxbClass.equals(UserGroupCallbackTaskCommand.class)\n-            \t\t|| jaxbClass.equals(GetCurrentTxTasksCommand.class)) {\n-                continue;\n+        reflections.getSubTypesOf(TaskCommand.class).stream().filter(e -> !e.getName().contains(\"$\")).forEach(jaxbClass ->  {\n+            if (jaxbClass.equals(UserGroupCallbackTaskCommand.class) || jaxbClass.equals(GetCurrentTxTasksCommand.class)) {\n+                return;\n             }\n-            addClassesToSerializationContext(jaxbClass);\n-            Constructor<?> construct = jaxbClass.getConstructor(new Class[] {});\n             try {\n+                addClassesToSerializationContext(jaxbClass);\n+                Constructor<?> construct = jaxbClass.getConstructor(new Class[] {});\n                 Object jaxbInst = construct.newInstance(new Object[] {});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNjg0NQ=="}, "originalCommit": {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzE2MTcyOnYy", "diffSide": "RIGHT", "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToyNTo0NFrOHsAgqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDozMDoyNVrOHsGvQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNzc1Mw==", "bodyText": "Please remove unused imports", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r515907753", "createdAt": "2020-11-02T11:25:44Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "diffHunk": "@@ -23,21 +23,29 @@\n import java.io.StringReader;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n import javax.naming.InitialContext;\n import javax.transaction.UserTransaction;\n \n+import org.jbpm.services.task.commands.TaskCommand;\n+import org.jbpm.services.task.commands.TaskContext;\n import org.jbpm.services.task.impl.factories.TaskFactory;\n import org.jbpm.services.task.impl.model.TaskDataImpl;\n+import org.jbpm.services.task.utils.ClassUtil;\n import org.junit.Ignore;\n import org.junit.Test;\n+import org.kie.api.command.ExecutableCommand;\n+import org.kie.api.runtime.Context;\n import org.kie.api.task.model.I18NText;\n import org.kie.api.task.model.Status;\n import org.kie.api.task.model.Task;\n import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.executor.api.Command;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAwOTc5Mw==", "bodyText": "removed", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r516009793", "createdAt": "2020-11-02T14:30:25Z", "author": {"login": "elguardian"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "diffHunk": "@@ -23,21 +23,29 @@\n import java.io.StringReader;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n import javax.naming.InitialContext;\n import javax.transaction.UserTransaction;\n \n+import org.jbpm.services.task.commands.TaskCommand;\n+import org.jbpm.services.task.commands.TaskContext;\n import org.jbpm.services.task.impl.factories.TaskFactory;\n import org.jbpm.services.task.impl.model.TaskDataImpl;\n+import org.jbpm.services.task.utils.ClassUtil;\n import org.junit.Ignore;\n import org.junit.Test;\n+import org.kie.api.command.ExecutableCommand;\n+import org.kie.api.runtime.Context;\n import org.kie.api.task.model.I18NText;\n import org.kie.api.task.model.Status;\n import org.kie.api.task.model.Task;\n import org.kie.api.task.model.TaskSummary;\n+import org.kie.internal.executor.api.Command;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNzc1Mw=="}, "originalCommit": {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzIxNzk0OnYy", "diffSide": "RIGHT", "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMTo0MzowOFrOHsBChQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDozMDo1N1rOHsGwxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxNjQyMQ==", "bodyText": "Redundant cast\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return (List<TaskSummary>) context.getPersistenceContext()\n          \n          \n            \n                            return context.getPersistenceContext()", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r515916421", "createdAt": "2020-11-02T11:43:08Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "diffHunk": "@@ -270,6 +278,234 @@ public void testGetTasksAssignedAsPotentialOwnerWithUserGroupsLangStatus() {\n     }\n     \n     \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerWithNoUserGroupsLangStatus() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"status\", status);\n+        params.put(\"groupIds\", groups);\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerByStatusByGroup\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerWithGroups() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerWithGroups\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerByStatusWithGroups() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"status\", status);\n+        params.put(\"groupIds\", groups);\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerByStatusWithGroups\", params);\n+\n+    }\n+\n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerStatusByExpirationDate() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"status\", status);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerStatusByExpirationDate\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerStatusByExpirationDateOptional() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"status\", status);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerStatusByExpirationDateOptional\", params);\n+\n+    }\n+    \n+    \n+    @Test\n+    public void testGetSubTasksAssignedAsPotentialOwner() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"parentId\", 2L);\n+        endBaseTest(\"SubTasksAssignedAsPotentialOwner\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetQuickTasksAssignedAsPotentialOwnerWithGroupsByStatus() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        endBaseTest(\"QuickTasksAssignedAsPotentialOwnerWithGroupsByStatus\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetQuickTasksAssignedAsPotentialOwnerStatusByExpirationDateOptional() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"QuickTasksAssignedAsPotentialOwnerStatusByExpirationDateOptional\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetQuickTasksAssignedAsPotentialOwnerStatusByExpirationDate() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"QuickTasksAssignedAsPotentialOwnerStatusByExpirationDate\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetNewTasksAssignedAsPotentialOwner() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        endBaseTest(\"NewTasksAssignedAsPotentialOwner\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetNewTasksAssignedAsPotentialOwnerByExpirationDateOptional() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"NewTasksAssignedAsPotentialOwnerByExpirationDateOptional\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetNewTasksAssignedAsPotentialOwnerByExpirationDate() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"NewTasksAssignedAsPotentialOwnerByExpirationDate\", params);\n+\n+    }\n+    \n+    private Task startBaseTest() {\n+        String str = \"(with (new Task()) { priority = 55, taskData = (with( new TaskData() ) { expirationTime = new Date( ), parentId = 2} ), \";\n+        str += \"peopleAssignments = (with ( new PeopleAssignments() ) { \" +\n+                \"   potentialOwners = [new Group('Crusaders'), ], \" +\n+                \"   excludedOwners = [new Group('Administrators'), ], \" +\n+                \"   businessAdministrators = [ new User('Administrator') ], }),\";\n+        str += \"name =  'This is my task name' })\";\n+        Task task = TaskFactory.evalTask(new StringReader(str));\n+        taskService.addTask(task, new HashMap<String, Object>());\n+        return task;\n+    }\n+    private void endBaseTest(String query, Map<String, Object> params) {\n+        \n+        List<TaskSummary> tasks = taskService.execute(new TaskCommand<List<TaskSummary>> () {\n+\n+\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            public List<TaskSummary> execute(Context cntxt) {\n+                TaskContext context = (TaskContext) cntxt;\n+                \n+                return (List<TaskSummary>) context.getPersistenceContext()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAxMDE4MA==", "bodyText": "removed", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r516010180", "createdAt": "2020-11-02T14:30:57Z", "author": {"login": "elguardian"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "diffHunk": "@@ -270,6 +278,234 @@ public void testGetTasksAssignedAsPotentialOwnerWithUserGroupsLangStatus() {\n     }\n     \n     \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerWithNoUserGroupsLangStatus() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"status\", status);\n+        params.put(\"groupIds\", groups);\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerByStatusByGroup\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerWithGroups() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerWithGroups\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerByStatusWithGroups() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"status\", status);\n+        params.put(\"groupIds\", groups);\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerByStatusWithGroups\", params);\n+\n+    }\n+\n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerStatusByExpirationDate() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"status\", status);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerStatusByExpirationDate\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerStatusByExpirationDateOptional() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"status\", status);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"TasksAssignedAsPotentialOwnerStatusByExpirationDateOptional\", params);\n+\n+    }\n+    \n+    \n+    @Test\n+    public void testGetSubTasksAssignedAsPotentialOwner() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"parentId\", 2L);\n+        endBaseTest(\"SubTasksAssignedAsPotentialOwner\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetQuickTasksAssignedAsPotentialOwnerWithGroupsByStatus() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        endBaseTest(\"QuickTasksAssignedAsPotentialOwnerWithGroupsByStatus\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetQuickTasksAssignedAsPotentialOwnerStatusByExpirationDateOptional() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"QuickTasksAssignedAsPotentialOwnerStatusByExpirationDateOptional\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetQuickTasksAssignedAsPotentialOwnerStatusByExpirationDate() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"QuickTasksAssignedAsPotentialOwnerStatusByExpirationDate\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetNewTasksAssignedAsPotentialOwner() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        endBaseTest(\"NewTasksAssignedAsPotentialOwner\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetNewTasksAssignedAsPotentialOwnerByExpirationDateOptional() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"NewTasksAssignedAsPotentialOwnerByExpirationDateOptional\", params);\n+\n+    }\n+    \n+    @Test\n+    public void testGetNewTasksAssignedAsPotentialOwnerByExpirationDate() {\n+        Task task = startBaseTest();\n+        final List<String> groups = new ArrayList<String>();\n+        groups.add(\"Crusaders\");\n+        \n+        final List<Status> status = Arrays.asList(Status.Created, Status.Ready, Status.Reserved, Status.InProgress, Status.Suspended);\n+        \n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"userId\", null);\n+        params.put(\"groupIds\", groups);\n+        params.put(\"status\", status);\n+        params.put(\"expirationDate\", task.getTaskData().getExpirationTime());\n+        endBaseTest(\"NewTasksAssignedAsPotentialOwnerByExpirationDate\", params);\n+\n+    }\n+    \n+    private Task startBaseTest() {\n+        String str = \"(with (new Task()) { priority = 55, taskData = (with( new TaskData() ) { expirationTime = new Date( ), parentId = 2} ), \";\n+        str += \"peopleAssignments = (with ( new PeopleAssignments() ) { \" +\n+                \"   potentialOwners = [new Group('Crusaders'), ], \" +\n+                \"   excludedOwners = [new Group('Administrators'), ], \" +\n+                \"   businessAdministrators = [ new User('Administrator') ], }),\";\n+        str += \"name =  'This is my task name' })\";\n+        Task task = TaskFactory.evalTask(new StringReader(str));\n+        taskService.addTask(task, new HashMap<String, Object>());\n+        return task;\n+    }\n+    private void endBaseTest(String query, Map<String, Object> params) {\n+        \n+        List<TaskSummary> tasks = taskService.execute(new TaskCommand<List<TaskSummary>> () {\n+\n+\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            public List<TaskSummary> execute(Context cntxt) {\n+                TaskContext context = (TaskContext) cntxt;\n+                \n+                return (List<TaskSummary>) context.getPersistenceContext()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxNjQyMQ=="}, "originalCommit": {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzIyNDM3OnYy", "diffSide": "RIGHT", "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMTo0NTowNFrOHsBGiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDozMTozMFrOHsGyRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxNzQ0OQ==", "bodyText": "Explicit type argument not really needed\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final List<String> groups = new ArrayList<String>();\n          \n          \n            \n                    final List<String> groups = new ArrayList<>();", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r515917449", "createdAt": "2020-11-02T11:45:04Z", "author": {"login": "afalhambra"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "diffHunk": "@@ -270,6 +278,234 @@ public void testGetTasksAssignedAsPotentialOwnerWithUserGroupsLangStatus() {\n     }\n     \n     \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerWithNoUserGroupsLangStatus() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAxMDU2NA==", "bodyText": "removed", "url": "https://github.com/kiegroup/jbpm/pull/1779#discussion_r516010564", "createdAt": "2020-11-02T14:31:30Z", "author": {"login": "elguardian"}, "path": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/TaskQueryServiceBaseTest.java", "diffHunk": "@@ -270,6 +278,234 @@ public void testGetTasksAssignedAsPotentialOwnerWithUserGroupsLangStatus() {\n     }\n     \n     \n+    @Test\n+    public void testGetTasksAssignedAsPotentialOwnerWithNoUserGroupsLangStatus() {\n+        startBaseTest();\n+        final List<String> groups = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxNzQ0OQ=="}, "originalCommit": {"oid": "20678522eed6bd03f535c8a85b4be5c62cca3902"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1605, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}