{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MzMyMTY1", "number": 1595, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzoxMjo0MlrODg9fJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjoxNzoxMFrODhPgBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODg4NDIxOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzoxMjo0MlrOFrdKag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODoyNTowNFrOFreysw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExMDg5MA==", "bodyText": "If the list of filters contains other filters not related to the columnId (POTOWNER), these would be removed here and I think this is not expected.\nMy suggestion is to control first that the removedFilter is related to the columnId:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (filters.remove(removedFilter)) {\n          \n          \n            \n                   if ((removedFilter.getColumnId().toUpperCase().equals(columnId)) && filters.remove(removedFilter)) {\n          \n      \n    \n    \n  \n\nNotice that current behavior works for filters like this (POTOWNER column first), because rest of filters won't be deleted:\n(POTOWNER in potOwner AND COLUMN2 = value2)\nbut not for\n(COLUMN2 = value2 AND POTOWNER in potOwner)\nwhen first filter would be deleted", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381110890", "createdAt": "2020-02-19T07:12:42Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessor.java", "diffHunk": "@@ -105,4 +109,27 @@ private void addUserAndGroupsFromIdentityProvider(List<Comparable> orgEntities,\n         orgEntities.addAll(Optional.ofNullable(userGroupCallback.getGroupsForUser(userId)).orElse(new ArrayList<>()));\n         orgEntities.add(userId);\n     }\n+\n+    private void removeCoreFunctionFilter(List<ColumnFilter> filters, ColumnFilter removedFilter) {\n+        if (filters.remove(removedFilter)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea39a2f9b859b91986baa5da791dfe8742e9a63"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExOTEzOA==", "bodyText": "good point, either this or as mentioned in my other comment why this is taken out from the if ....", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381119138", "createdAt": "2020-02-19T07:37:58Z", "author": {"login": "mswiderski"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessor.java", "diffHunk": "@@ -105,4 +109,27 @@ private void addUserAndGroupsFromIdentityProvider(List<Comparable> orgEntities,\n         orgEntities.addAll(Optional.ofNullable(userGroupCallback.getGroupsForUser(userId)).orElse(new ArrayList<>()));\n         orgEntities.add(userId);\n     }\n+\n+    private void removeCoreFunctionFilter(List<ColumnFilter> filters, ColumnFilter removedFilter) {\n+        if (filters.remove(removedFilter)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExMDg5MA=="}, "originalCommit": {"oid": "0ea39a2f9b859b91986baa5da791dfe8742e9a63"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEzNzU4Nw==", "bodyText": "changed. it must be the AND for backward compatibility. Also it looks like it is a way to restrict the query (not just change the column filter) otherwise it would not be added in case there are not filters.", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381137587", "createdAt": "2020-02-19T08:25:04Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessor.java", "diffHunk": "@@ -105,4 +109,27 @@ private void addUserAndGroupsFromIdentityProvider(List<Comparable> orgEntities,\n         orgEntities.addAll(Optional.ofNullable(userGroupCallback.getGroupsForUser(userId)).orElse(new ArrayList<>()));\n         orgEntities.add(userId);\n     }\n+\n+    private void removeCoreFunctionFilter(List<ColumnFilter> filters, ColumnFilter removedFilter) {\n+        if (filters.remove(removedFilter)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExMDg5MA=="}, "originalCommit": {"oid": "0ea39a2f9b859b91986baa5da791dfe8742e9a63"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODg5ODc5OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzoyMDoyMlrOFrdToA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzo0NjozNlrOFrd3Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExMzI0OA==", "bodyText": "What happens for other instances of filters that are not CoreFunctionFilter neither LogicalExprFilter?", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381113248", "createdAt": "2020-02-19T07:20:22Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessor.java", "diffHunk": "@@ -105,4 +109,27 @@ private void addUserAndGroupsFromIdentityProvider(List<Comparable> orgEntities,\n         orgEntities.addAll(Optional.ofNullable(userGroupCallback.getGroupsForUser(userId)).orElse(new ArrayList<>()));\n         orgEntities.add(userId);\n     }\n+\n+    private void removeCoreFunctionFilter(List<ColumnFilter> filters, ColumnFilter removedFilter) {\n+        if (filters.remove(removedFilter)) {\n+            return;\n+        }\n+\n+        filters.stream()\n+               .filter(e -> e instanceof LogicalExprFilter)\n+               .map(e -> (LogicalExprFilter) e)\n+               .forEach(filter -> removeCoreFunctionFilter(filter.getLogicalTerms(), removedFilter));\n+\n+    }\n+    private List<CoreFunctionFilter> extractCoreFunctionFilter(List<ColumnFilter> filters) {\n+        List<CoreFunctionFilter> list = new ArrayList<>();\n+        for (ColumnFilter filter : filters) {\n+            if (filter instanceof CoreFunctionFilter) {\n+                list.add((CoreFunctionFilter) filter);\n+            } else if (filter instanceof LogicalExprFilter) {\n+                list.addAll(extractCoreFunctionFilter(((LogicalExprFilter) filter).getLogicalTerms()));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea39a2f9b859b91986baa5da791dfe8742e9a63"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyMjQwMw==", "bodyText": "the other won't apply here or it should not be here.\nhttps://github.com/kiegroup/jbpm/pull/1595/files#diff-de3dabd2f1746cc2d025e0c8ee00c507R71", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381122403", "createdAt": "2020-02-19T07:46:36Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessor.java", "diffHunk": "@@ -105,4 +109,27 @@ private void addUserAndGroupsFromIdentityProvider(List<Comparable> orgEntities,\n         orgEntities.addAll(Optional.ofNullable(userGroupCallback.getGroupsForUser(userId)).orElse(new ArrayList<>()));\n         orgEntities.add(userId);\n     }\n+\n+    private void removeCoreFunctionFilter(List<ColumnFilter> filters, ColumnFilter removedFilter) {\n+        if (filters.remove(removedFilter)) {\n+            return;\n+        }\n+\n+        filters.stream()\n+               .filter(e -> e instanceof LogicalExprFilter)\n+               .map(e -> (LogicalExprFilter) e)\n+               .forEach(filter -> removeCoreFunctionFilter(filter.getLogicalTerms(), removedFilter));\n+\n+    }\n+    private List<CoreFunctionFilter> extractCoreFunctionFilter(List<ColumnFilter> filters) {\n+        List<CoreFunctionFilter> list = new ArrayList<>();\n+        for (ColumnFilter filter : filters) {\n+            if (filter instanceof CoreFunctionFilter) {\n+                list.add((CoreFunctionFilter) filter);\n+            } else if (filter instanceof LogicalExprFilter) {\n+                list.addAll(extractCoreFunctionFilter(((LogicalExprFilter) filter).getLogicalTerms()));\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExMzI0OA=="}, "originalCommit": {"oid": "0ea39a2f9b859b91986baa5da791dfe8742e9a63"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODkzMjY0OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzozNTo1OVrOFrdn_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODowMTo0N1rOFreNnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExODQ2Mg==", "bodyText": "this comment is quite misleading to me... looks like it missing what we need to look for?", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381118462", "createdAt": "2020-02-19T07:35:59Z", "author": {"login": "mswiderski"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessor.java", "diffHunk": "@@ -77,8 +78,11 @@ public void preprocess(DataSetLookup lookup) {\n                         addUserAndGroupsFromIdentityProvider(orgEntities, potOwner);\n                     }\n \n-                    it.remove();\n                 }\n+\n+                // we need to look for recursively for the filter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea39a2f9b859b91986baa5da791dfe8742e9a63"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyODA5Mg==", "bodyText": "now we have a tree. so we need to traverse recursively for the filter.\nchanged it", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381128092", "createdAt": "2020-02-19T08:01:47Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessor.java", "diffHunk": "@@ -77,8 +78,11 @@ public void preprocess(DataSetLookup lookup) {\n                         addUserAndGroupsFromIdentityProvider(orgEntities, potOwner);\n                     }\n \n-                    it.remove();\n                 }\n+\n+                // we need to look for recursively for the filter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExODQ2Mg=="}, "originalCommit": {"oid": "0ea39a2f9b859b91986baa5da791dfe8742e9a63"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODkzNTkyOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzozNzoyOVrOFrdp7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODowMzoxOFrOFreP_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExODk1OA==", "bodyText": "shouldn't this be placed in exact same location as 'it.remove()' before?", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381118958", "createdAt": "2020-02-19T07:37:29Z", "author": {"login": "mswiderski"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessor.java", "diffHunk": "@@ -77,8 +78,11 @@ public void preprocess(DataSetLookup lookup) {\n                         addUserAndGroupsFromIdentityProvider(orgEntities, potOwner);\n                     }\n \n-                    it.remove();\n                 }\n+\n+                // we need to look for recursively for the filter\n+                removeCoreFunctionFilter(lookup.getFirstFilterOp().getColumnFilterList(), column);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea39a2f9b859b91986baa5da791dfe8742e9a63"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyODcwMw==", "bodyText": "you are right.\nchanged it.", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381128703", "createdAt": "2020-02-19T08:03:18Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessor.java", "diffHunk": "@@ -77,8 +78,11 @@ public void preprocess(DataSetLookup lookup) {\n                         addUserAndGroupsFromIdentityProvider(orgEntities, potOwner);\n                     }\n \n-                    it.remove();\n                 }\n+\n+                // we need to look for recursively for the filter\n+                removeCoreFunctionFilter(lookup.getFirstFilterOp().getColumnFilterList(), column);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExODk1OA=="}, "originalCommit": {"oid": "0ea39a2f9b859b91986baa5da791dfe8742e9a63"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTU1NjYxOnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDo1MDo0NVrOFrjmPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMzo1OTo0NlrOFrpHTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIxNjMxNg==", "bodyText": "So, in this test, the whole filter to preprocess is\n(MY_COLUMN = 1234 OR MY_COLUMN not_in 1, 2, 3, 4 OR POTOWNER in potOwner)\nbut after preprocessing, the filters are split in a list(because more values have been added for POTOWNER column) but they are going to be rebuilt with AND, no?\n((MY_COLUMN = 1234 OR MY_COLUMN not_in 1, 2, 3, 4) AND (POTOWNER in role1, role2, potOwner))\nOr am I misunderstanding anything?", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381216316", "createdAt": "2020-02-19T10:50:45Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessorTest.java", "diffHunk": "@@ -138,6 +140,39 @@ public void testPotOwnerFilterNoIdentityProvider() {\n                      dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());\n     }\n \n+    @Test\n+    public void testPotOwnerFilterComplexExpression() {\n+        String userId = \"userId\";\n+\n+        when(userGroupCallback.getGroupsForUser(userId)).thenReturn(null);\n+        when(identityProvider.getName()).thenReturn(userId);\n+\n+        String potOwner = \"potOwner\";\n+        when(userGroupCallback.getGroupsForUser(potOwner)).thenReturn(Arrays.asList(\"role1\", \"role2\"));\n+\n+        List<String> potOwners = new ArrayList<String>();\n+        potOwners.add(potOwner);\n+\n+        QueryParam queryParam = new QueryParam(COL_ID, \"IN\", potOwners);\n+        QueryParam queryParamTerm1 = new QueryParam(\"MY_COLUMN\", \"EQUALS_TO\", Arrays.asList(\"1234\"));\n+        QueryParam queryParamTerm2 = new QueryParam(\"MY_COLUMN\", \"NOT_IN\", Arrays.asList(1, 2, 3, 4));\n+        QueryParam queryParamOR = new QueryParam(null, \"OR\", Arrays.asList(queryParamTerm1, queryParamTerm2, queryParam));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a5db0bd27c3eb1573d5c3a2fcb00fa2b180efdf"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMwNjcwMQ==", "bodyText": "correct. This should the right approach how this filter works.", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381306701", "createdAt": "2020-02-19T13:59:46Z", "author": {"login": "elguardian"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessorTest.java", "diffHunk": "@@ -138,6 +140,39 @@ public void testPotOwnerFilterNoIdentityProvider() {\n                      dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());\n     }\n \n+    @Test\n+    public void testPotOwnerFilterComplexExpression() {\n+        String userId = \"userId\";\n+\n+        when(userGroupCallback.getGroupsForUser(userId)).thenReturn(null);\n+        when(identityProvider.getName()).thenReturn(userId);\n+\n+        String potOwner = \"potOwner\";\n+        when(userGroupCallback.getGroupsForUser(potOwner)).thenReturn(Arrays.asList(\"role1\", \"role2\"));\n+\n+        List<String> potOwners = new ArrayList<String>();\n+        potOwners.add(potOwner);\n+\n+        QueryParam queryParam = new QueryParam(COL_ID, \"IN\", potOwners);\n+        QueryParam queryParamTerm1 = new QueryParam(\"MY_COLUMN\", \"EQUALS_TO\", Arrays.asList(\"1234\"));\n+        QueryParam queryParamTerm2 = new QueryParam(\"MY_COLUMN\", \"NOT_IN\", Arrays.asList(1, 2, 3, 4));\n+        QueryParam queryParamOR = new QueryParam(null, \"OR\", Arrays.asList(queryParamTerm1, queryParamTerm2, queryParam));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIxNjMxNg=="}, "originalCommit": {"oid": "3a5db0bd27c3eb1573d5c3a2fcb00fa2b180efdf"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTgzNTU2OnYy", "diffSide": "RIGHT", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjoxNzoxMFrOFr5r0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjoxNzoxMFrOFr5r0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3ODE5Mg==", "bodyText": "Swap these arguments to be: expected, actual", "url": "https://github.com/kiegroup/jbpm/pull/1595#discussion_r381578192", "createdAt": "2020-02-19T22:17:10Z", "author": {"login": "gmunozfe"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessorTest.java", "diffHunk": "@@ -138,6 +140,39 @@ public void testPotOwnerFilterNoIdentityProvider() {\n                      dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());\n     }\n \n+    @Test\n+    public void testPotOwnerFilterComplexExpression() {\n+        String userId = \"userId\";\n+\n+        when(userGroupCallback.getGroupsForUser(userId)).thenReturn(null);\n+        when(identityProvider.getName()).thenReturn(userId);\n+\n+        String potOwner = \"potOwner\";\n+        when(userGroupCallback.getGroupsForUser(potOwner)).thenReturn(Arrays.asList(\"role1\", \"role2\"));\n+\n+        List<String> potOwners = new ArrayList<String>();\n+        potOwners.add(potOwner);\n+\n+        QueryParam queryParam = new QueryParam(COL_ID, \"IN\", potOwners);\n+        QueryParam queryParamTerm1 = new QueryParam(\"MY_COLUMN\", \"EQUALS_TO\", Arrays.asList(\"1234\"));\n+        QueryParam queryParamTerm2 = new QueryParam(\"MY_COLUMN\", \"NOT_IN\", Arrays.asList(1, 2, 3, 4));\n+        QueryParam queryParamOR = new QueryParam(null, \"OR\", Arrays.asList(queryParamTerm1, queryParamTerm2, queryParam));\n+\n+        CoreFunctionQueryParamBuilder coreFunctionQueryParamBuilder = new CoreFunctionQueryParamBuilder(queryParamOR);\n+        ColumnFilter columnFilter = (ColumnFilter) coreFunctionQueryParamBuilder.build();\n+\n+        DataSetFilter filter = new DataSetFilter();\n+        filter.addFilterColumn(columnFilter);\n+        dataSetLookup.addOperation(filter);\n+\n+        userAndGroupsTasksPreprocessor.preprocess(dataSetLookup);\n+        List<ColumnFilter> filters = dataSetLookup.getFirstFilterOp().getColumnFilterList();\n+\n+        assertEquals(filters.size(), 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a5db0bd27c3eb1573d5c3a2fcb00fa2b180efdf"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1810, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}