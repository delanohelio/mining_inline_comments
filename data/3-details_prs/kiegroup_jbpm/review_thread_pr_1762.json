{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MjM0Njk1", "number": 1762, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzowNDoxOFrOEoZekA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNzo0MTowMlrOEpWlhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzk1OTIwOnYy", "diffSide": "RIGHT", "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzowNDoxOFrOHZdr6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODoxODo1N1rOHZg8xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2MjgyNw==", "bodyText": "bad naming. this is a classpath phisical location. hackUrls says very little.\nurlLocationClassPathLibs or so", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r496462827", "createdAt": "2020-09-29T07:04:18Z", "author": {"login": "elguardian"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +543,86 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating classpath\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CustomClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CustomClassLoader extends URLClassLoader {\n+\n+        private URL[] hackUrls;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5956453ab2476ca4f137db535e016efdc7a9d48c"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUxNjI5NA==", "bodyText": "yes, I changed to jarUrls, which is shorter that urlLocationClasspathLibs and more accurate than hackURLs", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r496516294", "createdAt": "2020-09-29T08:18:57Z", "author": {"login": "fjtirado"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +543,86 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating classpath\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CustomClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CustomClassLoader extends URLClassLoader {\n+\n+        private URL[] hackUrls;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2MjgyNw=="}, "originalCommit": {"oid": "5956453ab2476ca4f137db535e016efdc7a9d48c"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzk2MTkzOnYy", "diffSide": "RIGHT", "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzowNTowNlrOHZdtkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODoxODowOFrOHZg5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2MzI0OA==", "bodyText": "says very little. You are bypassing the class loader problem of CXF. what about\nCXFJavaCompilerClassLoader or so ?", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r496463248", "createdAt": "2020-09-29T07:05:06Z", "author": {"login": "elguardian"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +543,86 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating classpath\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CustomClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CustomClassLoader extends URLClassLoader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5956453ab2476ca4f137db535e016efdc7a9d48c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUxNTM3OA==", "bodyText": "Thanks for the suggestion, I was unable to find a proper name ;)", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r496515378", "createdAt": "2020-09-29T08:18:08Z", "author": {"login": "fjtirado"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +543,86 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating classpath\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CustomClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CustomClassLoader extends URLClassLoader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2MzI0OA=="}, "originalCommit": {"oid": "5956453ab2476ca4f137db535e016efdc7a9d48c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDg4ODY1OnYy", "diffSide": "RIGHT", "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozMDo0OVrOHagfSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoyODoxN1rOHbEMeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1NzMyMA==", "bodyText": "as getJarsFromModuleClassLoader method is only valid for ModuleClassLoader maybe it's worth to add this validation inside the method at the beginning and return if the condition is not met.\nBut just a suggestion only, as the method is private there is no really a need for that validation.", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r497557320", "createdAt": "2020-09-30T14:30:49Z", "author": {"login": "afalhambra"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEzNjc0Mg==", "bodyText": "I prefer to reduce method invocations as possible.\nAlso, if in future we might support more classloaders we will extend that if statement here, so it makes sense to keep it where it is", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r498136742", "createdAt": "2020-10-01T10:17:46Z", "author": {"login": "fjtirado"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1NzMyMA=="}, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE0MjMyOQ==", "bodyText": "we won't support any class loaders. This is a temporary solution that should go to some point to cxf so this will be lost at some point.", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r498142329", "createdAt": "2020-10-01T10:28:17Z", "author": {"login": "elguardian"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1NzMyMA=="}, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDg5NTU1OnYy", "diffSide": "RIGHT", "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozMjoxMlrOHagjqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoxOTo0N1rOHbD64w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1ODQ0Mg==", "bodyText": "maybe we can log the exception also", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r497558442", "createdAt": "2020-09-30T14:32:12Z", "author": {"login": "afalhambra"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEzNzgyNw==", "bodyText": "There is not need to log (this is reponsibility of exceptin handler in upper layers) but it seems more correct to replace IllegalStateException by WorkItemRuntimeException", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r498137827", "createdAt": "2020-10-01T10:19:47Z", "author": {"login": "fjtirado"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1ODQ0Mg=="}, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDkwMjA4OnYy", "diffSide": "RIGHT", "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozMzozMFrOHagnmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoyMDoyOVrOHbD8Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1OTQ0OA==", "bodyText": "what if uris is empty? it could be a problem later on? what do you think?", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r497559448", "createdAt": "2020-09-30T14:33:30Z", "author": {"login": "afalhambra"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CXFJavaCompileClassLoader(uris, cl);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEzODIxNQ==", "bodyText": "if uris is empty, it means there are not ModuleClassLoader in hierarchy and we can safely use the \"standard\" classloader", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r498138215", "createdAt": "2020-10-01T10:20:29Z", "author": {"login": "fjtirado"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CXFJavaCompileClassLoader(uris, cl);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1OTQ0OA=="}, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDkwNzU1OnYy", "diffSide": "RIGHT", "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozNDo0NlrOHagrOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoyMDo0MFrOHbD8xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MDM3Nw==", "bodyText": "maybe it's worth logging the exception? or just a e.printStackTrace?", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r497560377", "createdAt": "2020-09-30T14:34:46Z", "author": {"login": "afalhambra"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CXFJavaCompileClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CXFJavaCompileClassLoader extends URLClassLoader {\n+\n+        private URL[] jarUrls;\n+\n+        public CXFJavaCompileClassLoader(Collection<File> files, ClassLoader parent) {\n+            super(new URL[0], parent);\n+            // maybe it makes sense to filter only jaxb ones (there are 256 jars in kie-server)?\n+            this.jarUrls = files.stream().map(CXFJavaCompileClassLoader::toUrl).toArray(URL[]::new);\n+        }\n+        \n+        @Override\n+        public URL[] getURLs() {\n+            return jarUrls;\n+        }\n+\n+        private static URL toUrl(File file) {\n+            try {\n+                return file.toURI().toURL();\n+            } catch (MalformedURLException e) {\n+                throw new IllegalStateException(\"Problem converting file to URL: \"+file,e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEzODMwOQ==", "bodyText": "same as above", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r498138309", "createdAt": "2020-10-01T10:20:40Z", "author": {"login": "fjtirado"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CXFJavaCompileClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CXFJavaCompileClassLoader extends URLClassLoader {\n+\n+        private URL[] jarUrls;\n+\n+        public CXFJavaCompileClassLoader(Collection<File> files, ClassLoader parent) {\n+            super(new URL[0], parent);\n+            // maybe it makes sense to filter only jaxb ones (there are 256 jars in kie-server)?\n+            this.jarUrls = files.stream().map(CXFJavaCompileClassLoader::toUrl).toArray(URL[]::new);\n+        }\n+        \n+        @Override\n+        public URL[] getURLs() {\n+            return jarUrls;\n+        }\n+\n+        private static URL toUrl(File file) {\n+            try {\n+                return file.toURI().toURL();\n+            } catch (MalformedURLException e) {\n+                throw new IllegalStateException(\"Problem converting file to URL: \"+file,e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MDM3Nw=="}, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDkzMTY0OnYy", "diffSide": "RIGHT", "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozOTo0NFrOHag6gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoyNToyNlrOHbEGxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2NDI5MQ==", "bodyText": "Just a question - I can't see why we need to go through all parents, is it really possible to have more than one ModuleClassLoader as a class loader parent?", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r497564291", "createdAt": "2020-09-30T14:39:44Z", "author": {"login": "afalhambra"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEzODY1Mw==", "bodyText": "we should not assume anything about classloader hierarchy, this code will be executed in other containers different than wildfly", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r498138653", "createdAt": "2020-10-01T10:21:19Z", "author": {"login": "fjtirado"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2NDI5MQ=="}, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE0MDg2OQ==", "bodyText": "Actually it is a bit more complex that that. you can have multiple parents in here. but this should be enough. We can argue that we should stopped looking after finding the wildfly module class loader. I leave that to QE to decide", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r498140869", "createdAt": "2020-10-01T10:25:26Z", "author": {"login": "elguardian"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2NDI5MQ=="}, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDk3MTcyOnYy", "diffSide": "RIGHT", "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDo0Nzo0N1rOHahTpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoyMjozM1rOHbEA-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3MDcyNQ==", "bodyText": "I would make this part of the java doc for this method.", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r497570725", "createdAt": "2020-09-30T14:47:47Z", "author": {"login": "afalhambra"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CXFJavaCompileClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CXFJavaCompileClassLoader extends URLClassLoader {\n+\n+        private URL[] jarUrls;\n+\n+        public CXFJavaCompileClassLoader(Collection<File> files, ClassLoader parent) {\n+            super(new URL[0], parent);\n+            // maybe it makes sense to filter only jaxb ones (there are 256 jars in kie-server)?\n+            this.jarUrls = files.stream().map(CXFJavaCompileClassLoader::toUrl).toArray(URL[]::new);\n+        }\n+        \n+        @Override\n+        public URL[] getURLs() {\n+            return jarUrls;\n+        }\n+\n+        private static URL toUrl(File file) {\n+            try {\n+                return file.toURI().toURL();\n+            } catch (MalformedURLException e) {\n+                throw new IllegalStateException(\"Problem converting file to URL: \"+file,e);\n+            }\n         }\n+    }\n+\n+    private void getJarsFromModuleClassLoader(ClassLoader cl, Collection<File> collector) throws ReflectiveOperationException {\n+        /* This method makes assumptions over the internal structure of ModuleClassLoader. If this class is changed, this method\n+         * will need to change accordingly\n+         */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEzOTM4Nw==", "bodyText": "Implementation details should not be part of java doc, but this comment should be moved, as you said, before the method\nSee this old but still aplicable link https://www.oracle.com/technetwork/java/codeconventions-150003.pdf (section 5.1.1)", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r498139387", "createdAt": "2020-10-01T10:22:33Z", "author": {"login": "fjtirado"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CXFJavaCompileClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CXFJavaCompileClassLoader extends URLClassLoader {\n+\n+        private URL[] jarUrls;\n+\n+        public CXFJavaCompileClassLoader(Collection<File> files, ClassLoader parent) {\n+            super(new URL[0], parent);\n+            // maybe it makes sense to filter only jaxb ones (there are 256 jars in kie-server)?\n+            this.jarUrls = files.stream().map(CXFJavaCompileClassLoader::toUrl).toArray(URL[]::new);\n+        }\n+        \n+        @Override\n+        public URL[] getURLs() {\n+            return jarUrls;\n+        }\n+\n+        private static URL toUrl(File file) {\n+            try {\n+                return file.toURI().toURL();\n+            } catch (MalformedURLException e) {\n+                throw new IllegalStateException(\"Problem converting file to URL: \"+file,e);\n+            }\n         }\n+    }\n+\n+    private void getJarsFromModuleClassLoader(ClassLoader cl, Collection<File> collector) throws ReflectiveOperationException {\n+        /* This method makes assumptions over the internal structure of ModuleClassLoader. If this class is changed, this method\n+         * will need to change accordingly\n+         */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3MDcyNQ=="}, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzk2Nzc0OnYy", "diffSide": "RIGHT", "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNzozOTo1OVrOHa-Jtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoyMjo0NlrOHbEBeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA0MzMxOQ==", "bodyText": "Maybe a more descriptive method name can be useful? something like getFieldObject?", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r498043319", "createdAt": "2020-10-01T07:39:59Z", "author": {"login": "afalhambra"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CXFJavaCompileClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CXFJavaCompileClassLoader extends URLClassLoader {\n+\n+        private URL[] jarUrls;\n+\n+        public CXFJavaCompileClassLoader(Collection<File> files, ClassLoader parent) {\n+            super(new URL[0], parent);\n+            // maybe it makes sense to filter only jaxb ones (there are 256 jars in kie-server)?\n+            this.jarUrls = files.stream().map(CXFJavaCompileClassLoader::toUrl).toArray(URL[]::new);\n+        }\n+        \n+        @Override\n+        public URL[] getURLs() {\n+            return jarUrls;\n+        }\n+\n+        private static URL toUrl(File file) {\n+            try {\n+                return file.toURI().toURL();\n+            } catch (MalformedURLException e) {\n+                throw new IllegalStateException(\"Problem converting file to URL: \"+file,e);\n+            }\n         }\n+    }\n+\n+    private void getJarsFromModuleClassLoader(ClassLoader cl, Collection<File> collector) throws ReflectiveOperationException {\n+        /* This method makes assumptions over the internal structure of ModuleClassLoader. If this class is changed, this method\n+         * will need to change accordingly\n+         */\n+        AtomicReference paths = (AtomicReference) get(cl, \"paths\");\n+        Object sourceList = get(paths.get(), \"sourceList\");\n+        int size = Array.getLength(sourceList);\n+        Method getVFSResource = null;\n+        Method getPhysicalFile = null;\n+        Field rootField = null;\n+        Field rootNameField = null;\n+        for (int i = 0; i < size; i++) {\n+            Object resource = Array.get(sourceList, i);\n+            if (getVFSResource == null) {\n+                getVFSResource = resource.getClass().getDeclaredMethod(\"getResourceLoader\");\n+                getVFSResource.setAccessible(true);\n+            }\n+            resource = getVFSResource.invoke(resource);\n+            if (rootField == null) {\n+                Class<?> resourceClass = resource.getClass();\n+                rootField = resourceClass.getDeclaredField(\"root\");\n+                rootNameField = resourceClass.getDeclaredField(\"rootName\");\n+                rootField.setAccessible(true);\n+                rootNameField.setAccessible(true);\n+            }\n+            String rootName = (String) rootNameField.get(resource);\n+            if (rootName.endsWith(\"jar\")) {\n+                Object root = rootField.get(resource);\n+                if (getPhysicalFile == null) {\n+                    getPhysicalFile = root.getClass().getDeclaredMethod(\"getPhysicalFile\");\n+                    getPhysicalFile.setAccessible(true);\n+                }\n+                collector.add(new File(((File) getPhysicalFile.invoke(root)).getParentFile(), rootName));\n+            }\n+        }\n+    }\n \n-        return Thread.currentThread().getContextClassLoader();\n+    private Object get(Object container, String fieldName) throws NoSuchFieldException, IllegalAccessException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEzOTUxMg==", "bodyText": "sure, will change", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r498139512", "createdAt": "2020-10-01T10:22:46Z", "author": {"login": "fjtirado"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CXFJavaCompileClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CXFJavaCompileClassLoader extends URLClassLoader {\n+\n+        private URL[] jarUrls;\n+\n+        public CXFJavaCompileClassLoader(Collection<File> files, ClassLoader parent) {\n+            super(new URL[0], parent);\n+            // maybe it makes sense to filter only jaxb ones (there are 256 jars in kie-server)?\n+            this.jarUrls = files.stream().map(CXFJavaCompileClassLoader::toUrl).toArray(URL[]::new);\n+        }\n+        \n+        @Override\n+        public URL[] getURLs() {\n+            return jarUrls;\n+        }\n+\n+        private static URL toUrl(File file) {\n+            try {\n+                return file.toURI().toURL();\n+            } catch (MalformedURLException e) {\n+                throw new IllegalStateException(\"Problem converting file to URL: \"+file,e);\n+            }\n         }\n+    }\n+\n+    private void getJarsFromModuleClassLoader(ClassLoader cl, Collection<File> collector) throws ReflectiveOperationException {\n+        /* This method makes assumptions over the internal structure of ModuleClassLoader. If this class is changed, this method\n+         * will need to change accordingly\n+         */\n+        AtomicReference paths = (AtomicReference) get(cl, \"paths\");\n+        Object sourceList = get(paths.get(), \"sourceList\");\n+        int size = Array.getLength(sourceList);\n+        Method getVFSResource = null;\n+        Method getPhysicalFile = null;\n+        Field rootField = null;\n+        Field rootNameField = null;\n+        for (int i = 0; i < size; i++) {\n+            Object resource = Array.get(sourceList, i);\n+            if (getVFSResource == null) {\n+                getVFSResource = resource.getClass().getDeclaredMethod(\"getResourceLoader\");\n+                getVFSResource.setAccessible(true);\n+            }\n+            resource = getVFSResource.invoke(resource);\n+            if (rootField == null) {\n+                Class<?> resourceClass = resource.getClass();\n+                rootField = resourceClass.getDeclaredField(\"root\");\n+                rootNameField = resourceClass.getDeclaredField(\"rootName\");\n+                rootField.setAccessible(true);\n+                rootNameField.setAccessible(true);\n+            }\n+            String rootName = (String) rootNameField.get(resource);\n+            if (rootName.endsWith(\"jar\")) {\n+                Object root = rootField.get(resource);\n+                if (getPhysicalFile == null) {\n+                    getPhysicalFile = root.getClass().getDeclaredMethod(\"getPhysicalFile\");\n+                    getPhysicalFile.setAccessible(true);\n+                }\n+                collector.add(new File(((File) getPhysicalFile.invoke(root)).getParentFile(), rootName));\n+            }\n+        }\n+    }\n \n-        return Thread.currentThread().getContextClassLoader();\n+    private Object get(Object container, String fieldName) throws NoSuchFieldException, IllegalAccessException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA0MzMxOQ=="}, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzk3MTI1OnYy", "diffSide": "RIGHT", "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNzo0MTowMlrOHa-L_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoyNjozNVrOHbEJBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA0MzkwMw==", "bodyText": "Yep, as per comment, maybe it's worth filtering filenames with \"jaxb\"", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r498043903", "createdAt": "2020-10-01T07:41:02Z", "author": {"login": "afalhambra"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CXFJavaCompileClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CXFJavaCompileClassLoader extends URLClassLoader {\n+\n+        private URL[] jarUrls;\n+\n+        public CXFJavaCompileClassLoader(Collection<File> files, ClassLoader parent) {\n+            super(new URL[0], parent);\n+            // maybe it makes sense to filter only jaxb ones (there are 256 jars in kie-server)?\n+            this.jarUrls = files.stream().map(CXFJavaCompileClassLoader::toUrl).toArray(URL[]::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE0MDA0OA==", "bodyText": "this is a comment to easily locate the piece of code to change if, in future, we need to generate a smaller classpath for compiler.", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r498140048", "createdAt": "2020-10-01T10:23:54Z", "author": {"login": "fjtirado"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CXFJavaCompileClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CXFJavaCompileClassLoader extends URLClassLoader {\n+\n+        private URL[] jarUrls;\n+\n+        public CXFJavaCompileClassLoader(Collection<File> files, ClassLoader parent) {\n+            super(new URL[0], parent);\n+            // maybe it makes sense to filter only jaxb ones (there are 256 jars in kie-server)?\n+            this.jarUrls = files.stream().map(CXFJavaCompileClassLoader::toUrl).toArray(URL[]::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA0MzkwMw=="}, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE0MTQ0Ng==", "bodyText": "it should be all of them. That comment should be removed. Please try to avoid this sort of comments. If you want to point out something to reviewers just add a comment in github pull request.", "url": "https://github.com/kiegroup/jbpm/pull/1762#discussion_r498141446", "createdAt": "2020-10-01T10:26:35Z", "author": {"login": "elguardian"}, "path": "jbpm-workitems/jbpm-workitems-webservice/src/main/java/org/jbpm/process/workitem/webservice/WebServiceWorkItemHandler.java", "diffHunk": "@@ -533,11 +540,94 @@ public void abortWorkItem(WorkItem workItem,\n     }\n \n     private ClassLoader getInternalClassLoader() {\n-        if (this.classLoader != null) {\n-            return this.classLoader;\n+        /* CXF builds compiler classpath assuming that the hierarchy of ClassLoader is composed of URLClassLoader instances.\n+         * Since ModuleClassLoader does not implement URLClassLoader, we need to provide an alternative way of retrieving these URLS\n+         * so CXF can build a proper classpath, avoiding the issue mentioned below. \n+         * @see https://issues.apache.org/jira/browse/CXF-7925\n+         */\n+        ClassLoader cl = this.classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader(), parent = cl;\n+        Collection<File> uris = new HashSet<>();\n+        do {\n+            if (parent.getClass().getSimpleName().equals(\"ModuleClassLoader\")) {\n+                try {\n+                    getJarsFromModuleClassLoader(parent, uris);\n+                } catch (ReflectiveOperationException e) {\n+                    throw new IllegalStateException(\"Problem calculating list of URLs from ModuleClassLoader\", e);\n+                }\n+            }\n+            parent = parent.getParent();\n+        } while (parent != null);\n+        if (!uris.isEmpty()) {\n+            cl = new CXFJavaCompileClassLoader(uris, cl);\n+        }\n+        return cl;\n+    }\n+\n+    private static class CXFJavaCompileClassLoader extends URLClassLoader {\n+\n+        private URL[] jarUrls;\n+\n+        public CXFJavaCompileClassLoader(Collection<File> files, ClassLoader parent) {\n+            super(new URL[0], parent);\n+            // maybe it makes sense to filter only jaxb ones (there are 256 jars in kie-server)?\n+            this.jarUrls = files.stream().map(CXFJavaCompileClassLoader::toUrl).toArray(URL[]::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA0MzkwMw=="}, "originalCommit": {"oid": "8a77c6bf014ff2e148d012b90802128034264457"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1571, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}