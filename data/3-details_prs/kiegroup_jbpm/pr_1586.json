{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3OTY0ODcw", "number": 1586, "title": "[JBPM-8991] Allow for process initiator to be set using 'initiator' value from process data", "bodyText": "When bypassing user auth, ProcessEvent can now use 'initiator' from process data if set, when creating ProcessInstanceLog for ProcessStartedEvent.", "createdAt": "2020-01-28T11:36:25Z", "url": "https://github.com/kiegroup/jbpm/pull/1586", "merged": true, "mergeCommit": {"oid": "e4311fb29c327b1c34e6e288aea5c715a3ccfd6c"}, "closed": true, "closedAt": "2020-02-03T11:28:43Z", "author": {"login": "fsou"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-vkvRAH2gAyMzY3OTY0ODcwOmZlNTUyNzhmMWVhM2RlMzg5OTM1NzMxNjI4MjgyZjMyZGYzODliZDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_cuEQgFqTM1MDkzODc1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fe55278f1ea3de389935731628282f32df389bd7", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/fe55278f1ea3de389935731628282f32df389bd7", "committedDate": "2020-01-28T11:23:54Z", "message": "Add kie-server-api to get access to KieServerConstants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "459f9a3d4b55ce551b8c8cddfbf9628d9c567e93", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/459f9a3d4b55ce551b8c8cddfbf9628d9c567e93", "committedDate": "2020-01-28T11:26:20Z", "message": "Added possibility to set initiator from rocess metadata when building ProcessInstanceLog for ProcessStartedEvent\n\nIf user auth bypass is set and process metadata has initiator set, it will use initiator from processmetadata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08e9c4c869f2c4f356d06e266b1cfc59be666812", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/08e9c4c869f2c4f356d06e266b1cfc59be666812", "committedDate": "2020-01-28T11:26:42Z", "message": "Added tests to ServicesAwareAuditEventBuilder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01a74e5c278141fcdd4353f3fe0c3297f445e84c", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/01a74e5c278141fcdd4353f3fe0c3297f445e84c", "committedDate": "2020-01-28T11:29:23Z", "message": "Fix some code formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NjQ3NjI5", "url": "https://github.com/kiegroup/jbpm/pull/1586#pullrequestreview-349647629", "createdAt": "2020-01-28T19:37:12Z", "commit": {"oid": "01a74e5c278141fcdd4353f3fe0c3297f445e84c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTozNzoxMlrOFix7oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTozNzo0MFrOFix8fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxMzk4NA==", "bodyText": "we can't use this dependency as it will cause cyclic dependency issue as kie server is built after JBPM", "url": "https://github.com/kiegroup/jbpm/pull/1586#discussion_r372013984", "createdAt": "2020-01-28T19:37:12Z", "author": {"login": "mswiderski"}, "path": "jbpm-services/jbpm-kie-services/pom.xml", "diffHunk": "@@ -106,6 +106,11 @@\n       <artifactId>kie-soup-maven-support</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.kie.server</groupId>\n+      <artifactId>kie-server-api</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a74e5c278141fcdd4353f3fe0c3297f445e84c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNDIwNg==", "bodyText": "just copy the name instead of referring to kieserverconstants", "url": "https://github.com/kiegroup/jbpm/pull/1586#discussion_r372014206", "createdAt": "2020-01-28T19:37:40Z", "author": {"login": "mswiderski"}, "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/audit/ServicesAwareAuditEventBuilder.java", "diffHunk": "@@ -13,72 +13,77 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n package org.jbpm.kie.services.impl.audit;\n \n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n import org.jbpm.process.audit.NodeInstanceLog;\n import org.jbpm.process.audit.ProcessInstanceLog;\n import org.jbpm.process.audit.VariableInstanceLog;\n import org.jbpm.process.audit.event.AuditEvent;\n import org.jbpm.process.audit.event.DefaultAuditEventBuilderImpl;\n+import org.jbpm.process.core.context.variable.VariableScope;\n+import org.jbpm.process.instance.ProcessInstance;\n+import org.jbpm.process.instance.context.variable.VariableScopeInstance;\n import org.kie.api.event.process.ProcessCompletedEvent;\n import org.kie.api.event.process.ProcessNodeLeftEvent;\n import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n import org.kie.api.event.process.ProcessStartedEvent;\n import org.kie.api.event.process.ProcessVariableChangedEvent;\n import org.kie.internal.identity.IdentityProvider;\n-\n+import org.kie.server.api.KieServerConstants;\n \n public class ServicesAwareAuditEventBuilder extends DefaultAuditEventBuilderImpl {\n \n-    private IdentityProvider identityProvider;    \n-    \n+    private IdentityProvider identityProvider;\n+\n     private String deploymentUnitId;\n \n+    private final Boolean allowSetInitiator = Boolean.parseBoolean(System.getProperty(KieServerConstants.CFG_BYPASS_AUTH_USER, \"false\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a74e5c278141fcdd4353f3fe0c3297f445e84c"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5OTI5NzY5", "url": "https://github.com/kiegroup/jbpm/pull/1586#pullrequestreview-349929769", "createdAt": "2020-01-29T08:27:58Z", "commit": {"oid": "01a74e5c278141fcdd4353f3fe0c3297f445e84c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bf7dff976e258b9668ac61664c1c19715e5207b", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/0bf7dff976e258b9668ac61664c1c19715e5207b", "committedDate": "2020-01-29T08:59:10Z", "message": "Revert kie-server-api dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5e956d80b727ee03801f79add7decc74a19c5e2", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/f5e956d80b727ee03801f79add7decc74a19c5e2", "committedDate": "2020-01-29T09:09:32Z", "message": "Remove usage of KieServerConstants"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5OTU5Mzg0", "url": "https://github.com/kiegroup/jbpm/pull/1586#pullrequestreview-349959384", "createdAt": "2020-01-29T09:21:22Z", "commit": {"oid": "f5e956d80b727ee03801f79add7decc74a19c5e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOToyMToyMlrOFjBb0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOToyMToyMlrOFjBb0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2Nzk4NA==", "bodyText": "What about the 4th possible scenario - bypass is true but there is no initiator? Will the identity be null?", "url": "https://github.com/kiegroup/jbpm/pull/1586#discussion_r372267984", "createdAt": "2020-01-29T09:21:22Z", "author": {"login": "MarianMacik"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/audit/ServicesAwareAuditEventBuilderTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.kie.services.impl.audit;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.drools.core.event.ProcessStartedEventImpl;\n+import org.jbpm.kie.services.test.ProcessServiceImplTest;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.process.audit.ProcessInstanceLog;\n+import org.jbpm.process.core.context.variable.VariableScope;\n+import org.jbpm.process.instance.context.variable.VariableScopeInstance;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.core.WorkflowProcess;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+import org.junit.runner.RunWith;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.process.CorrelationKey;\n+import org.mockito.Mock;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.when;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ServicesAwareAuditEventBuilderTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ProcessServiceImplTest.class);\n+\n+    private Map<String, Object> processMetadata = new HashMap<>();\n+\n+    @Mock\n+    ProcessInstanceImpl processInstance;\n+\n+    @Mock\n+    KieSession kieRuntime;\n+\n+    @Mock\n+    WorkflowProcess process;\n+\n+    @Mock\n+    CorrelationKey correlationKey;\n+\n+    @Mock\n+    VariableScopeInstance variableScope;\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        processMetadata.put(\"CorrelationKey\", correlationKey);\n+\n+        setUpMocks();\n+    }\n+\n+    private void setUpMocks() {\n+        when(kieRuntime.getIdentifier()).thenReturn(2L);\n+\n+        when(processInstance.getId()).thenReturn(1L);\n+        when(processInstance.getDescription()).thenReturn(\"Some test Process\");\n+        when(processInstance.getSlaCompliance()).thenReturn(0);\n+        when(processInstance.getSlaDueDate()).thenReturn(null);\n+        when(processInstance.getMetaData()).thenReturn(processMetadata);\n+\n+        when(processInstance.getProcess()).thenReturn(process);\n+        when(process.getProcessType()).thenReturn(WorkflowProcess.PROCESS_TYPE);\n+        when(process.getName()).thenReturn(\"test-process\");\n+        when(process.getVersion()).thenReturn(VERSION);\n+\n+        when(processInstance.getContextInstance(eq(VariableScope.VARIABLE_SCOPE))).thenReturn(variableScope);\n+        when(variableScope.getVariables()).thenReturn(processMetadata);\n+\n+        when(correlationKey.toExternalForm()).thenReturn(\"1\");\n+    }\n+\n+    /**\n+     * Test build the ProcessInstanceLog for a regular process start\n+     */\n+    @Test\n+    public void testBuildProcessStartedEvent() {\n+        ServicesAwareAuditEventBuilder builder = new ServicesAwareAuditEventBuilder();\n+        builder.setIdentityProvider(identityProvider);\n+\n+        ProcessStartedEvent pse = new ProcessStartedEventImpl(processInstance, kieRuntime);\n+        ProcessInstanceLog log = (ProcessInstanceLog) builder.buildEvent(pse);\n+\n+        assertEquals(\"testUser\", log.getIdentity());\n+    }\n+\n+    /**\n+     * Test build the ProcessInstanceLog for a process with initiator metadata\n+     * and user auth bypasss not enabled\n+     */\n+    @Test\n+    public void testBuildProcessStartedEventWithInitiatorAndNoUserAuthBypass() {\n+\n+        processMetadata.put(\"initiator\", \"john\");\n+\n+        ServicesAwareAuditEventBuilder builder = new ServicesAwareAuditEventBuilder();\n+        builder.setIdentityProvider(identityProvider);\n+\n+        ProcessStartedEvent pse = new ProcessStartedEventImpl(processInstance, kieRuntime);\n+        ProcessInstanceLog log = (ProcessInstanceLog) builder.buildEvent(pse);\n+\n+        assertEquals(\"testUser\", log.getIdentity());\n+    }\n+\n+    /**\n+     * Test build the ProcessInstanceLog for a process with initiator metadata\n+     * and user auth bypasss enabled\n+     */\n+    @Test\n+    public void testBuildProcessStartedEventWithInitiatorAndUserAuthBypassEnabled() {\n+\n+        processMetadata.put(\"initiator\", \"john\");\n+\n+        ServicesAwareAuditEventBuilder builder = new ServicesAwareAuditEventBuilder();\n+        builder.setIdentityProvider(identityProvider);\n+\n+        enableSetInitiator(builder);\n+\n+        ProcessStartedEvent pse = new ProcessStartedEventImpl(processInstance, kieRuntime);\n+        ProcessInstanceLog log = (ProcessInstanceLog) builder.buildEvent(pse);\n+\n+        assertEquals(\"john\", log.getIdentity());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5e956d80b727ee03801f79add7decc74a19c5e2"}, "originalPosition": 143}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5OTY2NjQ3", "url": "https://github.com/kiegroup/jbpm/pull/1586#pullrequestreview-349966647", "createdAt": "2020-01-29T09:32:52Z", "commit": {"oid": "f5e956d80b727ee03801f79add7decc74a19c5e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTozMjo1MlrOFjBx6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTozMjo1MlrOFjBx6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3MzY0MQ==", "bodyText": "Would be good to organizm imports", "url": "https://github.com/kiegroup/jbpm/pull/1586#discussion_r372273641", "createdAt": "2020-01-29T09:32:52Z", "author": {"login": "mswiderski"}, "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/audit/ServicesAwareAuditEventBuilderTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.kie.services.impl.audit;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.drools.core.event.ProcessStartedEventImpl;\n+import org.jbpm.kie.services.test.ProcessServiceImplTest;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.process.audit.ProcessInstanceLog;\n+import org.jbpm.process.core.context.variable.VariableScope;\n+import org.jbpm.process.instance.context.variable.VariableScopeInstance;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.core.WorkflowProcess;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+import org.junit.runner.RunWith;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.process.CorrelationKey;\n+import org.mockito.Mock;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.when;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5e956d80b727ee03801f79add7decc74a19c5e2"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c3a33bdd17d0389355384c3007a00b797c0230f", "author": {"user": null}, "url": "https://github.com/kiegroup/jbpm/commit/6c3a33bdd17d0389355384c3007a00b797c0230f", "committedDate": "2020-01-29T09:47:17Z", "message": "Added test case for bypass enabled but no initiator process data\n\nRefactored test class and organized imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzY5ODQ4", "url": "https://github.com/kiegroup/jbpm/pull/1586#pullrequestreview-350369848", "createdAt": "2020-01-29T19:33:23Z", "commit": {"oid": "6c3a33bdd17d0389355384c3007a00b797c0230f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwOTM4NzUy", "url": "https://github.com/kiegroup/jbpm/pull/1586#pullrequestreview-350938752", "createdAt": "2020-01-30T15:59:49Z", "commit": {"oid": "6c3a33bdd17d0389355384c3007a00b797c0230f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1025, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}