{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5Nzk3Mjgw", "number": 2261, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDo0MjowNFrODdHvyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTowOTozM1rODdIPvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODYyMjE2OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDo0MjowNFrOFliwmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjo0MzozMVrOFlmGoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxMTEyOA==", "bodyText": "Should we worry that we're retaining this authenticator before we've successfully used it?  Or were you setting it here in case it was transient and might work on a subsequent try if attempted?", "url": "https://github.com/GoogleContainerTools/jib/pull/2261#discussion_r374911128", "createdAt": "2020-02-04T20:42:04Z", "author": {"login": "briandealwis"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryClient.java", "diffHunk": "@@ -344,6 +346,7 @@ private boolean doBearerAuth(boolean readOnlyBearerAuth) throws IOException, Reg\n       return false; // server returned \"WWW-Authenticate: Basic ...\"\n     }\n \n+    initialBearerAuthenticator.set(authenticator.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3b224782015397df9a15782bc9489165168c519"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk2NTkyMQ==", "bodyText": "Should be okay, since refreshBearerAuth is designed in the way that it's called only when authorization is a bearer auth token.", "url": "https://github.com/GoogleContainerTools/jib/pull/2261#discussion_r374965921", "createdAt": "2020-02-04T22:43:31Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryClient.java", "diffHunk": "@@ -344,6 +346,7 @@ private boolean doBearerAuth(boolean readOnlyBearerAuth) throws IOException, Reg\n       return false; // server returned \"WWW-Authenticate: Basic ...\"\n     }\n \n+    initialBearerAuthenticator.set(authenticator.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxMTEyOA=="}, "originalCommit": {"oid": "e3b224782015397df9a15782bc9489165168c519"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODY3OTg3OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTowMToyMFrOFljUKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjo0NzoyM1rOFlmMiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyMDIzMg==", "bodyText": "Would it be worth it to pull this out into a function to reduce duplication between here and L374-377?", "url": "https://github.com/GoogleContainerTools/jib/pull/2261#discussion_r374920232", "createdAt": "2020-02-04T21:01:20Z", "author": {"login": "TadCordle"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryClient.java", "diffHunk": "@@ -375,10 +378,13 @@ private Authorization refreshBearerAuth(@Nullable String wwwAuthenticate)\n       }\n     }\n \n-    throw new RegistryAuthenticationFailedException(\n-        registry,\n-        repository,\n-        \"server did not return 'WWW-Authenticate: Bearer' header: \" + wwwAuthenticate);\n+    eventHandlers.dispatch(\n+        LogEvent.debug(\n+            \"server did not return 'WWW-Authenticate: Bearer' header. Actual: \" + wwwAuthenticate));\n+    if (readOnlyBearerAuth) {\n+      return Verify.verifyNotNull(initialBearerAuthenticator.get()).authenticatePull(credential);\n+    }\n+    return Verify.verifyNotNull(initialBearerAuthenticator.get()).authenticatePush(credential);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3b224782015397df9a15782bc9489165168c519"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk2NzQzNQ==", "bodyText": "I think this is fine, considering that there's a difference between authenticator and initialBearerAuthenticator that the latter is nullable.", "url": "https://github.com/GoogleContainerTools/jib/pull/2261#discussion_r374967435", "createdAt": "2020-02-04T22:47:23Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryClient.java", "diffHunk": "@@ -375,10 +378,13 @@ private Authorization refreshBearerAuth(@Nullable String wwwAuthenticate)\n       }\n     }\n \n-    throw new RegistryAuthenticationFailedException(\n-        registry,\n-        repository,\n-        \"server did not return 'WWW-Authenticate: Bearer' header: \" + wwwAuthenticate);\n+    eventHandlers.dispatch(\n+        LogEvent.debug(\n+            \"server did not return 'WWW-Authenticate: Bearer' header. Actual: \" + wwwAuthenticate));\n+    if (readOnlyBearerAuth) {\n+      return Verify.verifyNotNull(initialBearerAuthenticator.get()).authenticatePull(credential);\n+    }\n+    return Verify.verifyNotNull(initialBearerAuthenticator.get()).authenticatePush(credential);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyMDIzMg=="}, "originalCommit": {"oid": "e3b224782015397df9a15782bc9489165168c519"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODcwMzk5OnYy", "diffSide": "RIGHT", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/registry/RegistryClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTowOTozM1rOFljjHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjo1MzoxMlrOFlmVbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyNDA2Mw==", "bodyText": "Should this be 5? (1 successful, and then 4 attempts)?", "url": "https://github.com/GoogleContainerTools/jib/pull/2261#discussion_r374924063", "createdAt": "2020-02-04T21:09:33Z", "author": {"login": "briandealwis"}, "path": "jib-core/src/test/java/com/google/cloud/tools/jib/registry/RegistryClientTest.java", "diffHunk": "@@ -168,6 +169,71 @@ public void testAutomaticTokenRefresh()\n         .dispatch(logContains(\"refreshing bearer auth token\"));\n   }\n \n+  @Test\n+  public void testAutomaticTokenRefresh_badWwwAuthenticateResponse()\n+      throws IOException, InterruptedException, GeneralSecurityException, URISyntaxException,\n+          RegistryException {\n+    String tokenResponse = \"HTTP/1.1 200 OK\\nContent-Length: 26\\n\\n{\\\"token\\\":\\\"awesome-token!\\\"}\";\n+    authServer = new TestWebServer(false, Arrays.asList(tokenResponse), 3);\n+\n+    List<String> responses =\n+        Arrays.asList(\n+            \"HTTP/1.1 401 Unauthorized\\nContent-Length: 0\\nWWW-Authenticate: Bearer realm=\\\"\"\n+                + authServer.getEndpoint()\n+                + \"\\\"\\n\\n\",\n+            \"HTTP/1.1 401 Unauthorized\\nContent-Length: 0\\nWWW-Authenticate: Basic realm=foo\\n\\n\",\n+            \"HTTP/1.1 401 Unauthorized\\nContent-Length: 0\\n\\n\",\n+            \"HTTP/1.1 200 OK\\nContent-Length: 5678\\n\\n\");\n+    registry = new TestWebServer(false, responses, responses.size(), true);\n+\n+    RegistryClient registryClient = createRegistryClient(null);\n+    Assert.assertTrue(registryClient.doPushBearerAuth());\n+\n+    Optional<BlobDescriptor> digestAndSize = registryClient.checkBlob(digest);\n+    Assert.assertEquals(5678, digestAndSize.get().getSize());\n+\n+    // Verify authServer returned bearer token three times (i.e., refreshed twice)\n+    Assert.assertEquals(3, authServer.getTotalResponsesServed());\n+    Assert.assertEquals(4, registry.getTotalResponsesServed());\n+\n+    Mockito.verify(eventHandlers)\n+        .dispatch(\n+            logContains(\"server did not return 'WWW-Authenticate: Bearer' header. Actual: Basic\"));\n+    Mockito.verify(eventHandlers)\n+        .dispatch(\n+            logContains(\"server did not return 'WWW-Authenticate: Bearer' header. Actual: null\"));\n+  }\n+\n+  @Test\n+  public void testAutomaticTokenRefresh_refreshLimit()\n+      throws IOException, InterruptedException, GeneralSecurityException, URISyntaxException,\n+          RegistryException {\n+    String tokenResponse = \"HTTP/1.1 200 OK\\nContent-Length: 26\\n\\n{\\\"token\\\":\\\"awesome-token!\\\"}\";\n+    authServer = new TestWebServer(false, Arrays.asList(tokenResponse), 5);\n+\n+    String bearerAuth =\n+        \"HTTP/1.1 401 Unauthorized\\nContent-Length: 0\\nWWW-Authenticate: Bearer realm=\\\"\"\n+            + authServer.getEndpoint()\n+            + \"\\\"\\n\\n\";\n+    String unauthorized = \"HTTP/1.1 401 Unauthorized\\nContent-Length: 0\\n\\n\";\n+    List<String> responses =\n+        Arrays.asList(\n+            bearerAuth, unauthorized, unauthorized, unauthorized, unauthorized, unauthorized);\n+    registry = new TestWebServer(false, responses, responses.size(), true);\n+\n+    RegistryClient registryClient = createRegistryClient(null);\n+    Assert.assertTrue(registryClient.doPushBearerAuth());\n+\n+    try {\n+      registryClient.checkBlob(digest);\n+      Assert.fail(\"Should have given up refreshing after 4 attempts\");\n+    } catch (RegistryUnauthorizedException ex) {\n+      Assert.assertEquals(401, ex.getHttpResponseException().getStatusCode());\n+      Assert.assertEquals(5, authServer.getTotalResponsesServed());\n+      Assert.assertEquals(6, registry.getTotalResponsesServed());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3b224782015397df9a15782bc9489165168c519"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk2OTcwOQ==", "bodyText": "It's 6: 1 response asking to auth + 4 unauth responses for 4 refresh attempts + 1 final unauth response that will be thrown as RegistryUnauthorizedException. I'll put a comment in the code.", "url": "https://github.com/GoogleContainerTools/jib/pull/2261#discussion_r374969709", "createdAt": "2020-02-04T22:53:12Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/test/java/com/google/cloud/tools/jib/registry/RegistryClientTest.java", "diffHunk": "@@ -168,6 +169,71 @@ public void testAutomaticTokenRefresh()\n         .dispatch(logContains(\"refreshing bearer auth token\"));\n   }\n \n+  @Test\n+  public void testAutomaticTokenRefresh_badWwwAuthenticateResponse()\n+      throws IOException, InterruptedException, GeneralSecurityException, URISyntaxException,\n+          RegistryException {\n+    String tokenResponse = \"HTTP/1.1 200 OK\\nContent-Length: 26\\n\\n{\\\"token\\\":\\\"awesome-token!\\\"}\";\n+    authServer = new TestWebServer(false, Arrays.asList(tokenResponse), 3);\n+\n+    List<String> responses =\n+        Arrays.asList(\n+            \"HTTP/1.1 401 Unauthorized\\nContent-Length: 0\\nWWW-Authenticate: Bearer realm=\\\"\"\n+                + authServer.getEndpoint()\n+                + \"\\\"\\n\\n\",\n+            \"HTTP/1.1 401 Unauthorized\\nContent-Length: 0\\nWWW-Authenticate: Basic realm=foo\\n\\n\",\n+            \"HTTP/1.1 401 Unauthorized\\nContent-Length: 0\\n\\n\",\n+            \"HTTP/1.1 200 OK\\nContent-Length: 5678\\n\\n\");\n+    registry = new TestWebServer(false, responses, responses.size(), true);\n+\n+    RegistryClient registryClient = createRegistryClient(null);\n+    Assert.assertTrue(registryClient.doPushBearerAuth());\n+\n+    Optional<BlobDescriptor> digestAndSize = registryClient.checkBlob(digest);\n+    Assert.assertEquals(5678, digestAndSize.get().getSize());\n+\n+    // Verify authServer returned bearer token three times (i.e., refreshed twice)\n+    Assert.assertEquals(3, authServer.getTotalResponsesServed());\n+    Assert.assertEquals(4, registry.getTotalResponsesServed());\n+\n+    Mockito.verify(eventHandlers)\n+        .dispatch(\n+            logContains(\"server did not return 'WWW-Authenticate: Bearer' header. Actual: Basic\"));\n+    Mockito.verify(eventHandlers)\n+        .dispatch(\n+            logContains(\"server did not return 'WWW-Authenticate: Bearer' header. Actual: null\"));\n+  }\n+\n+  @Test\n+  public void testAutomaticTokenRefresh_refreshLimit()\n+      throws IOException, InterruptedException, GeneralSecurityException, URISyntaxException,\n+          RegistryException {\n+    String tokenResponse = \"HTTP/1.1 200 OK\\nContent-Length: 26\\n\\n{\\\"token\\\":\\\"awesome-token!\\\"}\";\n+    authServer = new TestWebServer(false, Arrays.asList(tokenResponse), 5);\n+\n+    String bearerAuth =\n+        \"HTTP/1.1 401 Unauthorized\\nContent-Length: 0\\nWWW-Authenticate: Bearer realm=\\\"\"\n+            + authServer.getEndpoint()\n+            + \"\\\"\\n\\n\";\n+    String unauthorized = \"HTTP/1.1 401 Unauthorized\\nContent-Length: 0\\n\\n\";\n+    List<String> responses =\n+        Arrays.asList(\n+            bearerAuth, unauthorized, unauthorized, unauthorized, unauthorized, unauthorized);\n+    registry = new TestWebServer(false, responses, responses.size(), true);\n+\n+    RegistryClient registryClient = createRegistryClient(null);\n+    Assert.assertTrue(registryClient.doPushBearerAuth());\n+\n+    try {\n+      registryClient.checkBlob(digest);\n+      Assert.fail(\"Should have given up refreshing after 4 attempts\");\n+    } catch (RegistryUnauthorizedException ex) {\n+      Assert.assertEquals(401, ex.getHttpResponseException().getStatusCode());\n+      Assert.assertEquals(5, authServer.getTotalResponsesServed());\n+      Assert.assertEquals(6, registry.getTotalResponsesServed());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyNDA2Mw=="}, "originalCommit": {"oid": "e3b224782015397df9a15782bc9489165168c519"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 483, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}