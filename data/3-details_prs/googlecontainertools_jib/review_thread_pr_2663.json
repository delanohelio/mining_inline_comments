{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNjIyMjEz", "number": 2663, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMToyODoyNlrOEV_7nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOToyOTowNVrOEW7oLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTAzMDA1OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMToyODoyNlrOG9E3_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNToyNjozOVrOG9eLIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5NjE5MQ==", "bodyText": "I don't think this is correct. As the original code, it should depend on baseImagesAndLayers. Depending on builtImages... means that this code will block until you complete building Images.", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r466696191", "createdAt": "2020-08-06T21:28:26Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -331,20 +333,22 @@ private void pushBaseImageLayers() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.baseImageLayerPushResults =\n+    results.builtImagesAndLayerPushResults =\n         executorService.submit(\n             () -> {\n-              List<List<Future<BlobDescriptor>>> pushResults = new ArrayList<>();\n-              for (List<Future<PreparedLayer>> baseImageLayers :\n-                  results.baseImagesAndLayers.get().values()) {\n+              Map<Future<Image>, List<Future<BlobDescriptor>>> pushResults = new HashMap<>();\n+\n+              for (Map.Entry<Future<Image>, List<Future<PreparedLayer>>> entry :\n+                  results.builtImagesAndLayers.get().entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fae9f105d0c4f4c3796607f047a06f54b546668"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4NDQ3OA==", "bodyText": "The logic here is to be able to keep track of builtimage -> baseImageLayerPushResults so that we can be able to use realizeFutures on the correct baseImageLayerPushResults in the pushImages step.\nThe reason why I am depending on builtImages here is because inorder to be able to match builtImage -> baseImageLayerPushResults you need to have the builtImage -> baseImageLayer mapping first which I create in the buildimage function.\nOn the brighter side ,all of these extra mapping can be avoided if we decided to for go realizeFutures(baseImageLayerPushResults) in the pushImage step", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r467084478", "createdAt": "2020-08-07T14:41:48Z", "author": {"login": "louismurerwa"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -331,20 +333,22 @@ private void pushBaseImageLayers() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.baseImageLayerPushResults =\n+    results.builtImagesAndLayerPushResults =\n         executorService.submit(\n             () -> {\n-              List<List<Future<BlobDescriptor>>> pushResults = new ArrayList<>();\n-              for (List<Future<PreparedLayer>> baseImageLayers :\n-                  results.baseImagesAndLayers.get().values()) {\n+              Map<Future<Image>, List<Future<BlobDescriptor>>> pushResults = new HashMap<>();\n+\n+              for (Map.Entry<Future<Image>, List<Future<PreparedLayer>>> entry :\n+                  results.builtImagesAndLayers.get().entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5NjE5MQ=="}, "originalCommit": {"oid": "4fae9f105d0c4f4c3796607f047a06f54b546668"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEwMzYxNA==", "bodyText": "I can understand why it ended up like this, but I think this is not correct for a few reasons. I will just mention one reason that can alone make this not acceptable:\nresults.builtImagesAndLayers is the result coming from scheduling a thread in buildImages(). And calling results.builtImagesAndLayers.get() here means you will wait until the thread scheduled in buildImages() runs to completion. Conceptually, it means you'll wait until \"images\" are built. The code will now speak that \"in order to be able to push base image layers, I need to build images first.\" OTOH, previously, this pushBaseImageLayers() didn't have any dependency on buildImages(). Pushing base image layers can start as soon as we have base image layers. But with this change, you can start pushing only after the thread from buildImages() completed. This is a significant departure from the current async dependencies behaviors. Whenever we change the original intention, there should be a clear reason; just to allow making some other parts technically easy to make it work with minimal changes can't be a reason.", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r467103614", "createdAt": "2020-08-07T15:14:19Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -331,20 +333,22 @@ private void pushBaseImageLayers() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.baseImageLayerPushResults =\n+    results.builtImagesAndLayerPushResults =\n         executorService.submit(\n             () -> {\n-              List<List<Future<BlobDescriptor>>> pushResults = new ArrayList<>();\n-              for (List<Future<PreparedLayer>> baseImageLayers :\n-                  results.baseImagesAndLayers.get().values()) {\n+              Map<Future<Image>, List<Future<BlobDescriptor>>> pushResults = new HashMap<>();\n+\n+              for (Map.Entry<Future<Image>, List<Future<PreparedLayer>>> entry :\n+                  results.builtImagesAndLayers.get().entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5NjE5MQ=="}, "originalCommit": {"oid": "4fae9f105d0c4f4c3796607f047a06f54b546668"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExMDY4OQ==", "bodyText": "That makes sense - this implementation does slow down things.I'l revert this to the previous implementation and we can make changes starting from there.", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r467110689", "createdAt": "2020-08-07T15:26:39Z", "author": {"login": "louismurerwa"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -331,20 +333,22 @@ private void pushBaseImageLayers() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.baseImageLayerPushResults =\n+    results.builtImagesAndLayerPushResults =\n         executorService.submit(\n             () -> {\n-              List<List<Future<BlobDescriptor>>> pushResults = new ArrayList<>();\n-              for (List<Future<PreparedLayer>> baseImageLayers :\n-                  results.baseImagesAndLayers.get().values()) {\n+              Map<Future<Image>, List<Future<BlobDescriptor>>> pushResults = new HashMap<>();\n+\n+              for (Map.Entry<Future<Image>, List<Future<PreparedLayer>>> entry :\n+                  results.builtImagesAndLayers.get().entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5NjE5MQ=="}, "originalCommit": {"oid": "4fae9f105d0c4f4c3796607f047a06f54b546668"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTAzMTY5OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMToyOTowNFrOG9E5Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMToyOTowNFrOG9E5Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5NjQ1OA==", "bodyText": "builtImagesAndBaseImageLayerPushResults", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r466696458", "createdAt": "2020-08-06T21:29:04Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -331,20 +333,22 @@ private void pushBaseImageLayers() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.baseImageLayerPushResults =\n+    results.builtImagesAndLayerPushResults =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fae9f105d0c4f4c3796607f047a06f54b546668"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTAzNTU2OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTozMDoyN1rOG9E7VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTozMDoyN1rOG9E7VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5NzA0NQ==", "bodyText": "Since we won't use builtImagesAndLayers in pushBaseImageLayers() (see my other comment), perhaps we don't need to change buildImages() code?", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r466697045", "createdAt": "2020-08-06T21:30:27Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -379,9 +384,9 @@ private void buildImages() {\n                                     realizeFutures(Verify.verifyNotNull(entry.getValue())),\n                                     realizeFutures(Verify.verifyNotNull(results.applicationLayers)))\n                                 .call());\n-                builtImages.add(builtImage);\n+                builtImagesAndLayers.put(builtImage, entry.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fae9f105d0c4f4c3796607f047a06f54b546668"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTA0NDgyOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTozMzo1NFrOG9FA_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTozMzo1NFrOG9FA_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5ODQ5NA==", "bodyText": "I think we should keep using builtImages. I think using builtImagesAndContainerConfigurationPushResults to get an Image causes confusion and feels like abusing.", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r466698494", "createdAt": "2020-08-06T21:33:54Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -439,80 +444,122 @@ private void checkImageInTargetRegistry() {\n                                 results\n                                     .builtImagesAndContainerConfigurationPushResults\n                                     .get()\n-                                    .get(results.builtImages.get().get(0)))\n+                                    .values()\n+                                    .iterator()\n+                                    .next())\n                             .get(),\n-                        results.builtImages.get().get(0).get())\n+                        Verify.verifyNotNull(\n+                                results\n+                                    .builtImagesAndContainerConfigurationPushResults", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fae9f105d0c4f4c3796607f047a06f54b546668"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTA1MDg1OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTozNjowNFrOG9FEwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTozNjowNFrOG9FEwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5OTQ1Ng==", "bodyText": "Do we really need this change? I was aware that we can always use .iterator().next() to retrieve a value from a single-entry map, but you've been so far consistently calling Map.get(). Mixing patterns makes it harder to understand code.", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r466699456", "createdAt": "2020-08-06T21:36:04Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -439,80 +444,122 @@ private void checkImageInTargetRegistry() {\n                                 results\n                                     .builtImagesAndContainerConfigurationPushResults\n                                     .get()\n-                                    .get(results.builtImages.get().get(0)))\n+                                    .values()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fae9f105d0c4f4c3796607f047a06f54b546668"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTA1ODY3OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTozOToxM1rOG9FJig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozMzowMlrOG9eZMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMDY4Mg==", "bodyText": "It takes some seconds to get what entry.getKey() means. I suggest declaring a local variable Future<Image> builtImage = entry.getKey() before this realizeFutures(). The same goes for entry.getValue().", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r466700682", "createdAt": "2020-08-06T21:39:13Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -439,80 +444,122 @@ private void checkImageInTargetRegistry() {\n                                 results\n                                     .builtImagesAndContainerConfigurationPushResults\n                                     .get()\n-                                    .get(results.builtImages.get().get(0)))\n+                                    .values()\n+                                    .iterator()\n+                                    .next())\n                             .get(),\n-                        results.builtImages.get().get(0).get())\n+                        Verify.verifyNotNull(\n+                                results\n+                                    .builtImagesAndContainerConfigurationPushResults\n+                                    .get()\n+                                    .keySet()\n+                                    .iterator()\n+                                    .next())\n+                            .get())\n                     .call());\n   }\n \n   private void pushImages() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n             () -> {\n-              realizeFutures(results.baseImageLayerPushResults.get().get(0));\n               realizeFutures(results.applicationLayerPushResults.get());\n \n-              List<Future<BuildResult>> manifestPushResults =\n-                  scheduleCallables(\n-                      PushImageStep.makeList(\n-                          buildContext,\n-                          childProgressDispatcherFactory,\n-                          results.targetRegistryClient.get(),\n-                          Verify.verifyNotNull(\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+              for (Map.Entry<Future<Image>, Future<BlobDescriptor>> entry :\n+                  results.builtImagesAndContainerConfigurationPushResults.get().entrySet()) {\n+\n+                Future<BuildResult> buildResult =\n+                    executorService.submit(\n+                        () -> {\n+                          realizeFutures(\n+                              Verify.verifyNotNull(\n                                   results\n-                                      .builtImagesAndContainerConfigurationPushResults\n+                                      .builtImagesAndLayerPushResults\n                                       .get()\n-                                      .get(results.builtImages.get().get(0)))\n-                              .get(),\n-                          results.builtImages.get().get(0).get(),\n-                          results.manifestCheckResult.get().isPresent()));\n-              realizeFutures(manifestPushResults);\n-              return manifestPushResults.isEmpty()\n-                  ? new BuildResult(\n-                      results.manifestCheckResult.get().get().getDigest(),\n-                      Verify.verifyNotNull(\n-                              results\n-                                  .builtImagesAndContainerConfigurationPushResults\n-                                  .get()\n-                                  .get(results.builtImages.get().get(0)))\n-                          .get()\n-                          .getDigest())\n-                  // Manifest pushers return the same BuildResult.\n-                  : manifestPushResults.get(0).get();\n+                                      .get(entry.getKey())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fae9f105d0c4f4c3796607f047a06f54b546668"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5NTE5NQ==", "bodyText": "@chanseokoh This is the line that has caused all the changes in the structure of the code .Do we really need to realizeFutures(baseImageLayerPushResults)  here ?\nIs there any way we could for-go realizing these futures here?\nOnce we have answered this question ,I can easily refactor the code.", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r467095195", "createdAt": "2020-08-07T14:59:31Z", "author": {"login": "louismurerwa"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -439,80 +444,122 @@ private void checkImageInTargetRegistry() {\n                                 results\n                                     .builtImagesAndContainerConfigurationPushResults\n                                     .get()\n-                                    .get(results.builtImages.get().get(0)))\n+                                    .values()\n+                                    .iterator()\n+                                    .next())\n                             .get(),\n-                        results.builtImages.get().get(0).get())\n+                        Verify.verifyNotNull(\n+                                results\n+                                    .builtImagesAndContainerConfigurationPushResults\n+                                    .get()\n+                                    .keySet()\n+                                    .iterator()\n+                                    .next())\n+                            .get())\n                     .call());\n   }\n \n   private void pushImages() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n             () -> {\n-              realizeFutures(results.baseImageLayerPushResults.get().get(0));\n               realizeFutures(results.applicationLayerPushResults.get());\n \n-              List<Future<BuildResult>> manifestPushResults =\n-                  scheduleCallables(\n-                      PushImageStep.makeList(\n-                          buildContext,\n-                          childProgressDispatcherFactory,\n-                          results.targetRegistryClient.get(),\n-                          Verify.verifyNotNull(\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+              for (Map.Entry<Future<Image>, Future<BlobDescriptor>> entry :\n+                  results.builtImagesAndContainerConfigurationPushResults.get().entrySet()) {\n+\n+                Future<BuildResult> buildResult =\n+                    executorService.submit(\n+                        () -> {\n+                          realizeFutures(\n+                              Verify.verifyNotNull(\n                                   results\n-                                      .builtImagesAndContainerConfigurationPushResults\n+                                      .builtImagesAndLayerPushResults\n                                       .get()\n-                                      .get(results.builtImages.get().get(0)))\n-                              .get(),\n-                          results.builtImages.get().get(0).get(),\n-                          results.manifestCheckResult.get().isPresent()));\n-              realizeFutures(manifestPushResults);\n-              return manifestPushResults.isEmpty()\n-                  ? new BuildResult(\n-                      results.manifestCheckResult.get().get().getDigest(),\n-                      Verify.verifyNotNull(\n-                              results\n-                                  .builtImagesAndContainerConfigurationPushResults\n-                                  .get()\n-                                  .get(results.builtImages.get().get(0)))\n-                          .get()\n-                          .getDigest())\n-                  // Manifest pushers return the same BuildResult.\n-                  : manifestPushResults.get(0).get();\n+                                      .get(entry.getKey())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMDY4Mg=="}, "originalCommit": {"oid": "4fae9f105d0c4f4c3796607f047a06f54b546668"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNDI4OQ==", "bodyText": "Every line of code is there for a reason. We have realizeFutures() in the original code, so I assume there must be a reason. If you can't or don't know if what the existing code does or why it is there, you should assume it's necessary. Even when you think some code is unnecessary, you need to think through and really spend a lot of time before taking out some code.\nIn this case, I think it's definitely necessary. You can push a manifest only after you confirmed that you've done pushing layers. Otherwise, a registry will return \"bad manifest push; layers described in the manifest don't exist.\" And I can see the only place where we confirm the base image push results is here.", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r467114289", "createdAt": "2020-08-07T15:33:02Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -439,80 +444,122 @@ private void checkImageInTargetRegistry() {\n                                 results\n                                     .builtImagesAndContainerConfigurationPushResults\n                                     .get()\n-                                    .get(results.builtImages.get().get(0)))\n+                                    .values()\n+                                    .iterator()\n+                                    .next())\n                             .get(),\n-                        results.builtImages.get().get(0).get())\n+                        Verify.verifyNotNull(\n+                                results\n+                                    .builtImagesAndContainerConfigurationPushResults\n+                                    .get()\n+                                    .keySet()\n+                                    .iterator()\n+                                    .next())\n+                            .get())\n                     .call());\n   }\n \n   private void pushImages() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n             () -> {\n-              realizeFutures(results.baseImageLayerPushResults.get().get(0));\n               realizeFutures(results.applicationLayerPushResults.get());\n \n-              List<Future<BuildResult>> manifestPushResults =\n-                  scheduleCallables(\n-                      PushImageStep.makeList(\n-                          buildContext,\n-                          childProgressDispatcherFactory,\n-                          results.targetRegistryClient.get(),\n-                          Verify.verifyNotNull(\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+              for (Map.Entry<Future<Image>, Future<BlobDescriptor>> entry :\n+                  results.builtImagesAndContainerConfigurationPushResults.get().entrySet()) {\n+\n+                Future<BuildResult> buildResult =\n+                    executorService.submit(\n+                        () -> {\n+                          realizeFutures(\n+                              Verify.verifyNotNull(\n                                   results\n-                                      .builtImagesAndContainerConfigurationPushResults\n+                                      .builtImagesAndLayerPushResults\n                                       .get()\n-                                      .get(results.builtImages.get().get(0)))\n-                              .get(),\n-                          results.builtImages.get().get(0).get(),\n-                          results.manifestCheckResult.get().isPresent()));\n-              realizeFutures(manifestPushResults);\n-              return manifestPushResults.isEmpty()\n-                  ? new BuildResult(\n-                      results.manifestCheckResult.get().get().getDigest(),\n-                      Verify.verifyNotNull(\n-                              results\n-                                  .builtImagesAndContainerConfigurationPushResults\n-                                  .get()\n-                                  .get(results.builtImages.get().get(0)))\n-                          .get()\n-                          .getDigest())\n-                  // Manifest pushers return the same BuildResult.\n-                  : manifestPushResults.get(0).get();\n+                                      .get(entry.getKey())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMDY4Mg=="}, "originalCommit": {"oid": "4fae9f105d0c4f4c3796607f047a06f54b546668"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTA2MTIyOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTo0MDowN1rOG9FLIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTo0MDowN1rOG9FLIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMTA4OQ==", "bodyText": "ditto about the .iterator().next() practice.", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r466701089", "createdAt": "2020-08-06T21:40:07Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -439,80 +444,122 @@ private void checkImageInTargetRegistry() {\n                                 results\n                                     .builtImagesAndContainerConfigurationPushResults\n                                     .get()\n-                                    .get(results.builtImages.get().get(0)))\n+                                    .values()\n+                                    .iterator()\n+                                    .next())\n                             .get(),\n-                        results.builtImages.get().get(0).get())\n+                        Verify.verifyNotNull(\n+                                results\n+                                    .builtImagesAndContainerConfigurationPushResults\n+                                    .get()\n+                                    .keySet()\n+                                    .iterator()\n+                                    .next())\n+                            .get())\n                     .call());\n   }\n \n   private void pushImages() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n             () -> {\n-              realizeFutures(results.baseImageLayerPushResults.get().get(0));\n               realizeFutures(results.applicationLayerPushResults.get());\n \n-              List<Future<BuildResult>> manifestPushResults =\n-                  scheduleCallables(\n-                      PushImageStep.makeList(\n-                          buildContext,\n-                          childProgressDispatcherFactory,\n-                          results.targetRegistryClient.get(),\n-                          Verify.verifyNotNull(\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+              for (Map.Entry<Future<Image>, Future<BlobDescriptor>> entry :\n+                  results.builtImagesAndContainerConfigurationPushResults.get().entrySet()) {\n+\n+                Future<BuildResult> buildResult =\n+                    executorService.submit(\n+                        () -> {\n+                          realizeFutures(\n+                              Verify.verifyNotNull(\n                                   results\n-                                      .builtImagesAndContainerConfigurationPushResults\n+                                      .builtImagesAndLayerPushResults\n                                       .get()\n-                                      .get(results.builtImages.get().get(0)))\n-                              .get(),\n-                          results.builtImages.get().get(0).get(),\n-                          results.manifestCheckResult.get().isPresent()));\n-              realizeFutures(manifestPushResults);\n-              return manifestPushResults.isEmpty()\n-                  ? new BuildResult(\n-                      results.manifestCheckResult.get().get().getDigest(),\n-                      Verify.verifyNotNull(\n-                              results\n-                                  .builtImagesAndContainerConfigurationPushResults\n-                                  .get()\n-                                  .get(results.builtImages.get().get(0)))\n-                          .get()\n-                          .getDigest())\n-                  // Manifest pushers return the same BuildResult.\n-                  : manifestPushResults.get(0).get();\n+                                      .get(entry.getKey())));\n+\n+                          List<Future<BuildResult>> manifestPushResults =\n+                              scheduleCallables(\n+                                  PushImageStep.makeList(\n+                                      buildContext,\n+                                      childProgressDispatcherFactory,\n+                                      results.targetRegistryClient.get(),\n+                                      Verify.verifyNotNull(entry.getValue()).get(),\n+                                      entry.getKey().get(),\n+                                      results.manifestCheckResult.get().isPresent()));\n+\n+                          realizeFutures(manifestPushResults);\n+                          return manifestPushResults.isEmpty()\n+                              ? new BuildResult(\n+                                  results.manifestCheckResult.get().get().getDigest(),\n+                                  Verify.verifyNotNull(entry.getValue()).get().getDigest())\n+                              // Manifest pushers return the same BuildResult.\n+                              : manifestPushResults.get(0).get();\n+                        });\n+                buildResults.add(buildResult);\n+              }\n+              return buildResults;\n             });\n   }\n \n   private void loadDocker(DockerClient dockerClient) {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n-            () ->\n-                new LoadDockerStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        dockerClient,\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+              Future<BuildResult> buildResult =\n+                  executorService.submit(\n+                      () ->\n+                          new LoadDockerStep(\n+                                  buildContext,\n+                                  childProgressDispatcherFactory,\n+                                  dockerClient,\n+                                  results\n+                                      .builtImagesAndLayers\n+                                      .get()\n+                                      .keySet()\n+                                      .iterator()\n+                                      .next()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fae9f105d0c4f4c3796607f047a06f54b546668"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTA2MTQ0OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTo0MDoxMlrOG9FLSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTo0MDoxMlrOG9FLSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMTEyOA==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r466701128", "createdAt": "2020-08-06T21:40:12Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -439,80 +444,122 @@ private void checkImageInTargetRegistry() {\n                                 results\n                                     .builtImagesAndContainerConfigurationPushResults\n                                     .get()\n-                                    .get(results.builtImages.get().get(0)))\n+                                    .values()\n+                                    .iterator()\n+                                    .next())\n                             .get(),\n-                        results.builtImages.get().get(0).get())\n+                        Verify.verifyNotNull(\n+                                results\n+                                    .builtImagesAndContainerConfigurationPushResults\n+                                    .get()\n+                                    .keySet()\n+                                    .iterator()\n+                                    .next())\n+                            .get())\n                     .call());\n   }\n \n   private void pushImages() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n             () -> {\n-              realizeFutures(results.baseImageLayerPushResults.get().get(0));\n               realizeFutures(results.applicationLayerPushResults.get());\n \n-              List<Future<BuildResult>> manifestPushResults =\n-                  scheduleCallables(\n-                      PushImageStep.makeList(\n-                          buildContext,\n-                          childProgressDispatcherFactory,\n-                          results.targetRegistryClient.get(),\n-                          Verify.verifyNotNull(\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+              for (Map.Entry<Future<Image>, Future<BlobDescriptor>> entry :\n+                  results.builtImagesAndContainerConfigurationPushResults.get().entrySet()) {\n+\n+                Future<BuildResult> buildResult =\n+                    executorService.submit(\n+                        () -> {\n+                          realizeFutures(\n+                              Verify.verifyNotNull(\n                                   results\n-                                      .builtImagesAndContainerConfigurationPushResults\n+                                      .builtImagesAndLayerPushResults\n                                       .get()\n-                                      .get(results.builtImages.get().get(0)))\n-                              .get(),\n-                          results.builtImages.get().get(0).get(),\n-                          results.manifestCheckResult.get().isPresent()));\n-              realizeFutures(manifestPushResults);\n-              return manifestPushResults.isEmpty()\n-                  ? new BuildResult(\n-                      results.manifestCheckResult.get().get().getDigest(),\n-                      Verify.verifyNotNull(\n-                              results\n-                                  .builtImagesAndContainerConfigurationPushResults\n-                                  .get()\n-                                  .get(results.builtImages.get().get(0)))\n-                          .get()\n-                          .getDigest())\n-                  // Manifest pushers return the same BuildResult.\n-                  : manifestPushResults.get(0).get();\n+                                      .get(entry.getKey())));\n+\n+                          List<Future<BuildResult>> manifestPushResults =\n+                              scheduleCallables(\n+                                  PushImageStep.makeList(\n+                                      buildContext,\n+                                      childProgressDispatcherFactory,\n+                                      results.targetRegistryClient.get(),\n+                                      Verify.verifyNotNull(entry.getValue()).get(),\n+                                      entry.getKey().get(),\n+                                      results.manifestCheckResult.get().isPresent()));\n+\n+                          realizeFutures(manifestPushResults);\n+                          return manifestPushResults.isEmpty()\n+                              ? new BuildResult(\n+                                  results.manifestCheckResult.get().get().getDigest(),\n+                                  Verify.verifyNotNull(entry.getValue()).get().getDigest())\n+                              // Manifest pushers return the same BuildResult.\n+                              : manifestPushResults.get(0).get();\n+                        });\n+                buildResults.add(buildResult);\n+              }\n+              return buildResults;\n             });\n   }\n \n   private void loadDocker(DockerClient dockerClient) {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n-            () ->\n-                new LoadDockerStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        dockerClient,\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+              Future<BuildResult> buildResult =\n+                  executorService.submit(\n+                      () ->\n+                          new LoadDockerStep(\n+                                  buildContext,\n+                                  childProgressDispatcherFactory,\n+                                  dockerClient,\n+                                  results\n+                                      .builtImagesAndLayers\n+                                      .get()\n+                                      .keySet()\n+                                      .iterator()\n+                                      .next()\n+                                      .get())\n+                              .call());\n+              buildResults.add(buildResult);\n+              return buildResults;\n+            });\n   }\n \n   private void writeTarFile(Path outputPath) {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n-            () ->\n-                new WriteTarFileStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        outputPath,\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+              Future<BuildResult> buildResult =\n+                  executorService.submit(\n+                      () ->\n+                          new WriteTarFileStep(\n+                                  buildContext,\n+                                  childProgressDispatcherFactory,\n+                                  outputPath,\n+                                  results\n+                                      .builtImagesAndLayers\n+                                      .get()\n+                                      .keySet()\n+                                      .iterator()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fae9f105d0c4f4c3796607f047a06f54b546668"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODgzNjk4OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTozMjo0NFrOG9opkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTozMjo0NFrOG9opkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4MjMyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                results.baseImagesAndbaseImageLayerPushResults =\n          \n          \n            \n                results.baseImagesAndBaseImageLayerPushResults =\n          \n      \n    \n    \n  \n\nbut because this time it's all about base images, I think we can go with\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                results.baseImagesAndbaseImageLayerPushResults =\n          \n          \n            \n                results.baseImagesAndLayerPushResults =", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r467282320", "createdAt": "2020-08-07T21:32:44Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -331,20 +332,23 @@ private void pushBaseImageLayers() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.baseImageLayerPushResults =\n+    results.baseImagesAndbaseImageLayerPushResults =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8f8c4193f22f374b9d4b7a2eb91b58398be359f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODg1MzMxOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTozNjoxOVrOG9o0HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTozNjoxOVrOG9o0HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4NTAyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            builtImagesAndBaseImages.put(builtImage, entry.getKey());\n          \n          \n            \n                            builtImagesAndBaseImages.put(builtImage, entry.getKey() /* base Image */);", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r467285020", "createdAt": "2020-08-07T21:36:19Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -379,21 +383,21 @@ private void buildImages() {\n                                     realizeFutures(Verify.verifyNotNull(entry.getValue())),\n                                     realizeFutures(Verify.verifyNotNull(results.applicationLayers)))\n                                 .call());\n-                builtImages.add(builtImage);\n+                builtImagesAndBaseImages.put(builtImage, entry.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8f8c4193f22f374b9d4b7a2eb91b58398be359f"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODg2OTUyOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTozOTo1NFrOG9o-fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTozOTo1NFrOG9o-fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4NzY3OQ==", "bodyText": "You only need the key, so no need for entrySet(). And let's add a check; I'm certain the check will become useful going forward.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          Future<Image> builtImage = entry.getKey();\n          \n          \n            \n                          Verify.verify(results.builtImagesAndBaseImages.get().size() == 1);\n          \n          \n            \n                          Future<Image> builtImage = results.builtImagesAndBaseImages.get().keySet().iterator().next();", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r467287679", "createdAt": "2020-08-07T21:39:54Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -430,89 +434,138 @@ private void checkImageInTargetRegistry() {\n \n     results.manifestCheckResult =\n         executorService.submit(\n-            () ->\n-                new CheckImageStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        results.targetRegistryClient.get(),\n-                        Verify.verifyNotNull(\n-                                results\n-                                    .builtImagesAndContainerConfigurationPushResults\n-                                    .get()\n-                                    .get(results.builtImages.get().get(0)))\n-                            .get(),\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Map.Entry<Future<Image>, Image> entry =\n+                  results.builtImagesAndBaseImages.get().entrySet().iterator().next();\n+              Future<Image> builtImage = entry.getKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8f8c4193f22f374b9d4b7a2eb91b58398be359f"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODkxNjU0OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MDowOVrOG9pdYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MDowOVrOG9pdYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NTU4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          Future<Image> builtImage = entry.getKey();\n          \n          \n            \n                          Verify.verify(results.builtImagesAndBaseImages.get().size() == 1, \"multi-platform image building not supported when pushing to Docker engine\");\n          \n          \n            \n                          Future<Image> builtImage = results.builtImagesAndBaseImages.get().keySet().iterator().next();", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r467295585", "createdAt": "2020-08-07T21:50:09Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -430,89 +434,138 @@ private void checkImageInTargetRegistry() {\n \n     results.manifestCheckResult =\n         executorService.submit(\n-            () ->\n-                new CheckImageStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        results.targetRegistryClient.get(),\n-                        Verify.verifyNotNull(\n-                                results\n-                                    .builtImagesAndContainerConfigurationPushResults\n-                                    .get()\n-                                    .get(results.builtImages.get().get(0)))\n-                            .get(),\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Map.Entry<Future<Image>, Image> entry =\n+                  results.builtImagesAndBaseImages.get().entrySet().iterator().next();\n+              Future<Image> builtImage = entry.getKey();\n+              return new CheckImageStep(\n+                      buildContext,\n+                      childProgressDispatcherFactory,\n+                      results.targetRegistryClient.get(),\n+                      Verify.verifyNotNull(\n+                              results\n+                                  .builtImagesAndContainerConfigurationPushResults\n+                                  .get()\n+                                  .get(builtImage))\n+                          .get(),\n+                      builtImage.get())\n+                  .call();\n+            });\n   }\n \n   private void pushImages() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n             () -> {\n-              realizeFutures(results.baseImageLayerPushResults.get().get(0));\n               realizeFutures(results.applicationLayerPushResults.get());\n \n-              List<Future<BuildResult>> manifestPushResults =\n-                  scheduleCallables(\n-                      PushImageStep.makeList(\n-                          buildContext,\n-                          childProgressDispatcherFactory,\n-                          results.targetRegistryClient.get(),\n-                          Verify.verifyNotNull(\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+\n+              for (Map.Entry<Future<Image>, Image> entry :\n+                  results.builtImagesAndBaseImages.get().entrySet()) {\n+\n+                Future<Image> builtImage = entry.getKey();\n+                Image baseImage = entry.getValue();\n+\n+                Future<BuildResult> buildResult =\n+                    executorService.submit(\n+                        () -> {\n+                          realizeFutures(\n+                              Verify.verifyNotNull(\n                                   results\n-                                      .builtImagesAndContainerConfigurationPushResults\n+                                      .baseImagesAndbaseImageLayerPushResults\n                                       .get()\n-                                      .get(results.builtImages.get().get(0)))\n-                              .get(),\n-                          results.builtImages.get().get(0).get(),\n-                          results.manifestCheckResult.get().isPresent()));\n-              realizeFutures(manifestPushResults);\n-              return manifestPushResults.isEmpty()\n-                  ? new BuildResult(\n-                      results.manifestCheckResult.get().get().getDigest(),\n-                      Verify.verifyNotNull(\n-                              results\n-                                  .builtImagesAndContainerConfigurationPushResults\n-                                  .get()\n-                                  .get(results.builtImages.get().get(0)))\n-                          .get()\n-                          .getDigest())\n-                  // Manifest pushers return the same BuildResult.\n-                  : manifestPushResults.get(0).get();\n+                                      .get(baseImage)));\n+\n+                          List<Future<BuildResult>> manifestPushResults =\n+                              scheduleCallables(\n+                                  PushImageStep.makeList(\n+                                      buildContext,\n+                                      childProgressDispatcherFactory,\n+                                      results.targetRegistryClient.get(),\n+                                      Verify.verifyNotNull(\n+                                              results\n+                                                  .builtImagesAndContainerConfigurationPushResults\n+                                                  .get()\n+                                                  .get(builtImage))\n+                                          .get(),\n+                                      builtImage.get(),\n+                                      results.manifestCheckResult.get().isPresent()));\n+\n+                          realizeFutures(manifestPushResults);\n+                          return manifestPushResults.isEmpty()\n+                              ? new BuildResult(\n+                                  results.manifestCheckResult.get().get().getDigest(),\n+                                  Verify.verifyNotNull(\n+                                          results\n+                                              .builtImagesAndContainerConfigurationPushResults\n+                                              .get()\n+                                              .get(builtImage))\n+                                      .get()\n+                                      .getDigest())\n+                              // Manifest pushers return the same BuildResult.\n+                              : manifestPushResults.get(0).get();\n+                        });\n+\n+                buildResults.add(buildResult);\n+              }\n+              return buildResults;\n             });\n   }\n \n   private void loadDocker(DockerClient dockerClient) {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n-            () ->\n-                new LoadDockerStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        dockerClient,\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Map.Entry<Future<Image>, Image> entry =\n+                  results.builtImagesAndBaseImages.get().entrySet().iterator().next();\n+              Future<Image> builtImage = entry.getKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8f8c4193f22f374b9d4b7a2eb91b58398be359f"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODkyMjM2OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MToyM1rOG9phKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MToyM1rOG9phKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NjU1NA==", "bodyText": "Can be simplified by return Collections.singletonList(executorService.submit(...)).", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r467296554", "createdAt": "2020-08-07T21:51:23Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -430,89 +434,138 @@ private void checkImageInTargetRegistry() {\n \n     results.manifestCheckResult =\n         executorService.submit(\n-            () ->\n-                new CheckImageStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        results.targetRegistryClient.get(),\n-                        Verify.verifyNotNull(\n-                                results\n-                                    .builtImagesAndContainerConfigurationPushResults\n-                                    .get()\n-                                    .get(results.builtImages.get().get(0)))\n-                            .get(),\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Map.Entry<Future<Image>, Image> entry =\n+                  results.builtImagesAndBaseImages.get().entrySet().iterator().next();\n+              Future<Image> builtImage = entry.getKey();\n+              return new CheckImageStep(\n+                      buildContext,\n+                      childProgressDispatcherFactory,\n+                      results.targetRegistryClient.get(),\n+                      Verify.verifyNotNull(\n+                              results\n+                                  .builtImagesAndContainerConfigurationPushResults\n+                                  .get()\n+                                  .get(builtImage))\n+                          .get(),\n+                      builtImage.get())\n+                  .call();\n+            });\n   }\n \n   private void pushImages() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n             () -> {\n-              realizeFutures(results.baseImageLayerPushResults.get().get(0));\n               realizeFutures(results.applicationLayerPushResults.get());\n \n-              List<Future<BuildResult>> manifestPushResults =\n-                  scheduleCallables(\n-                      PushImageStep.makeList(\n-                          buildContext,\n-                          childProgressDispatcherFactory,\n-                          results.targetRegistryClient.get(),\n-                          Verify.verifyNotNull(\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+\n+              for (Map.Entry<Future<Image>, Image> entry :\n+                  results.builtImagesAndBaseImages.get().entrySet()) {\n+\n+                Future<Image> builtImage = entry.getKey();\n+                Image baseImage = entry.getValue();\n+\n+                Future<BuildResult> buildResult =\n+                    executorService.submit(\n+                        () -> {\n+                          realizeFutures(\n+                              Verify.verifyNotNull(\n                                   results\n-                                      .builtImagesAndContainerConfigurationPushResults\n+                                      .baseImagesAndbaseImageLayerPushResults\n                                       .get()\n-                                      .get(results.builtImages.get().get(0)))\n-                              .get(),\n-                          results.builtImages.get().get(0).get(),\n-                          results.manifestCheckResult.get().isPresent()));\n-              realizeFutures(manifestPushResults);\n-              return manifestPushResults.isEmpty()\n-                  ? new BuildResult(\n-                      results.manifestCheckResult.get().get().getDigest(),\n-                      Verify.verifyNotNull(\n-                              results\n-                                  .builtImagesAndContainerConfigurationPushResults\n-                                  .get()\n-                                  .get(results.builtImages.get().get(0)))\n-                          .get()\n-                          .getDigest())\n-                  // Manifest pushers return the same BuildResult.\n-                  : manifestPushResults.get(0).get();\n+                                      .get(baseImage)));\n+\n+                          List<Future<BuildResult>> manifestPushResults =\n+                              scheduleCallables(\n+                                  PushImageStep.makeList(\n+                                      buildContext,\n+                                      childProgressDispatcherFactory,\n+                                      results.targetRegistryClient.get(),\n+                                      Verify.verifyNotNull(\n+                                              results\n+                                                  .builtImagesAndContainerConfigurationPushResults\n+                                                  .get()\n+                                                  .get(builtImage))\n+                                          .get(),\n+                                      builtImage.get(),\n+                                      results.manifestCheckResult.get().isPresent()));\n+\n+                          realizeFutures(manifestPushResults);\n+                          return manifestPushResults.isEmpty()\n+                              ? new BuildResult(\n+                                  results.manifestCheckResult.get().get().getDigest(),\n+                                  Verify.verifyNotNull(\n+                                          results\n+                                              .builtImagesAndContainerConfigurationPushResults\n+                                              .get()\n+                                              .get(builtImage))\n+                                      .get()\n+                                      .getDigest())\n+                              // Manifest pushers return the same BuildResult.\n+                              : manifestPushResults.get(0).get();\n+                        });\n+\n+                buildResults.add(buildResult);\n+              }\n+              return buildResults;\n             });\n   }\n \n   private void loadDocker(DockerClient dockerClient) {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n-            () ->\n-                new LoadDockerStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        dockerClient,\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Map.Entry<Future<Image>, Image> entry =\n+                  results.builtImagesAndBaseImages.get().entrySet().iterator().next();\n+              Future<Image> builtImage = entry.getKey();\n+\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+              Future<BuildResult> buildResult =\n+                  executorService.submit(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8f8c4193f22f374b9d4b7a2eb91b58398be359f"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODkyODAxOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MjozM1rOG9pksA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MjozM1rOG9pksA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NzQ1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          Map.Entry<Future<Image>, Image> entry =\n          \n          \n            \n                              results.builtImagesAndBaseImages.get().entrySet().iterator().next();\n          \n          \n            \n                          Future<Image> builtImage = entry.getKey();\n          \n          \n            \n                          Verify.verify(results.builtImagesAndBaseImages.get().size() == 1, \"multi-platform image building not supported when building a local tar image\");\n          \n          \n            \n                          Future<Image> builtImage = results.builtImagesAndBaseImages.get().keySet().iterator().next();", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r467297456", "createdAt": "2020-08-07T21:52:33Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -430,89 +434,138 @@ private void checkImageInTargetRegistry() {\n \n     results.manifestCheckResult =\n         executorService.submit(\n-            () ->\n-                new CheckImageStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        results.targetRegistryClient.get(),\n-                        Verify.verifyNotNull(\n-                                results\n-                                    .builtImagesAndContainerConfigurationPushResults\n-                                    .get()\n-                                    .get(results.builtImages.get().get(0)))\n-                            .get(),\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Map.Entry<Future<Image>, Image> entry =\n+                  results.builtImagesAndBaseImages.get().entrySet().iterator().next();\n+              Future<Image> builtImage = entry.getKey();\n+              return new CheckImageStep(\n+                      buildContext,\n+                      childProgressDispatcherFactory,\n+                      results.targetRegistryClient.get(),\n+                      Verify.verifyNotNull(\n+                              results\n+                                  .builtImagesAndContainerConfigurationPushResults\n+                                  .get()\n+                                  .get(builtImage))\n+                          .get(),\n+                      builtImage.get())\n+                  .call();\n+            });\n   }\n \n   private void pushImages() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n             () -> {\n-              realizeFutures(results.baseImageLayerPushResults.get().get(0));\n               realizeFutures(results.applicationLayerPushResults.get());\n \n-              List<Future<BuildResult>> manifestPushResults =\n-                  scheduleCallables(\n-                      PushImageStep.makeList(\n-                          buildContext,\n-                          childProgressDispatcherFactory,\n-                          results.targetRegistryClient.get(),\n-                          Verify.verifyNotNull(\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+\n+              for (Map.Entry<Future<Image>, Image> entry :\n+                  results.builtImagesAndBaseImages.get().entrySet()) {\n+\n+                Future<Image> builtImage = entry.getKey();\n+                Image baseImage = entry.getValue();\n+\n+                Future<BuildResult> buildResult =\n+                    executorService.submit(\n+                        () -> {\n+                          realizeFutures(\n+                              Verify.verifyNotNull(\n                                   results\n-                                      .builtImagesAndContainerConfigurationPushResults\n+                                      .baseImagesAndbaseImageLayerPushResults\n                                       .get()\n-                                      .get(results.builtImages.get().get(0)))\n-                              .get(),\n-                          results.builtImages.get().get(0).get(),\n-                          results.manifestCheckResult.get().isPresent()));\n-              realizeFutures(manifestPushResults);\n-              return manifestPushResults.isEmpty()\n-                  ? new BuildResult(\n-                      results.manifestCheckResult.get().get().getDigest(),\n-                      Verify.verifyNotNull(\n-                              results\n-                                  .builtImagesAndContainerConfigurationPushResults\n-                                  .get()\n-                                  .get(results.builtImages.get().get(0)))\n-                          .get()\n-                          .getDigest())\n-                  // Manifest pushers return the same BuildResult.\n-                  : manifestPushResults.get(0).get();\n+                                      .get(baseImage)));\n+\n+                          List<Future<BuildResult>> manifestPushResults =\n+                              scheduleCallables(\n+                                  PushImageStep.makeList(\n+                                      buildContext,\n+                                      childProgressDispatcherFactory,\n+                                      results.targetRegistryClient.get(),\n+                                      Verify.verifyNotNull(\n+                                              results\n+                                                  .builtImagesAndContainerConfigurationPushResults\n+                                                  .get()\n+                                                  .get(builtImage))\n+                                          .get(),\n+                                      builtImage.get(),\n+                                      results.manifestCheckResult.get().isPresent()));\n+\n+                          realizeFutures(manifestPushResults);\n+                          return manifestPushResults.isEmpty()\n+                              ? new BuildResult(\n+                                  results.manifestCheckResult.get().get().getDigest(),\n+                                  Verify.verifyNotNull(\n+                                          results\n+                                              .builtImagesAndContainerConfigurationPushResults\n+                                              .get()\n+                                              .get(builtImage))\n+                                      .get()\n+                                      .getDigest())\n+                              // Manifest pushers return the same BuildResult.\n+                              : manifestPushResults.get(0).get();\n+                        });\n+\n+                buildResults.add(buildResult);\n+              }\n+              return buildResults;\n             });\n   }\n \n   private void loadDocker(DockerClient dockerClient) {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n-            () ->\n-                new LoadDockerStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        dockerClient,\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Map.Entry<Future<Image>, Image> entry =\n+                  results.builtImagesAndBaseImages.get().entrySet().iterator().next();\n+              Future<Image> builtImage = entry.getKey();\n+\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+              Future<BuildResult> buildResult =\n+                  executorService.submit(\n+                      () ->\n+                          new LoadDockerStep(\n+                                  buildContext,\n+                                  childProgressDispatcherFactory,\n+                                  dockerClient,\n+                                  builtImage.get())\n+                              .call());\n+              buildResults.add(buildResult);\n+              return buildResults;\n+            });\n   }\n \n   private void writeTarFile(Path outputPath) {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n-            () ->\n-                new WriteTarFileStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        outputPath,\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Map.Entry<Future<Image>, Image> entry =\n+                  results.builtImagesAndBaseImages.get().entrySet().iterator().next();\n+              Future<Image> builtImage = entry.getKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8f8c4193f22f374b9d4b7a2eb91b58398be359f"}, "originalPosition": 281}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODkzMTQyOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MzoxN1rOG9pm6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1MzoxN1rOG9pm6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5ODAyNg==", "bodyText": "Ditto. No need to create an array.", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r467298026", "createdAt": "2020-08-07T21:53:17Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -430,89 +434,138 @@ private void checkImageInTargetRegistry() {\n \n     results.manifestCheckResult =\n         executorService.submit(\n-            () ->\n-                new CheckImageStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        results.targetRegistryClient.get(),\n-                        Verify.verifyNotNull(\n-                                results\n-                                    .builtImagesAndContainerConfigurationPushResults\n-                                    .get()\n-                                    .get(results.builtImages.get().get(0)))\n-                            .get(),\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Map.Entry<Future<Image>, Image> entry =\n+                  results.builtImagesAndBaseImages.get().entrySet().iterator().next();\n+              Future<Image> builtImage = entry.getKey();\n+              return new CheckImageStep(\n+                      buildContext,\n+                      childProgressDispatcherFactory,\n+                      results.targetRegistryClient.get(),\n+                      Verify.verifyNotNull(\n+                              results\n+                                  .builtImagesAndContainerConfigurationPushResults\n+                                  .get()\n+                                  .get(builtImage))\n+                          .get(),\n+                      builtImage.get())\n+                  .call();\n+            });\n   }\n \n   private void pushImages() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n             () -> {\n-              realizeFutures(results.baseImageLayerPushResults.get().get(0));\n               realizeFutures(results.applicationLayerPushResults.get());\n \n-              List<Future<BuildResult>> manifestPushResults =\n-                  scheduleCallables(\n-                      PushImageStep.makeList(\n-                          buildContext,\n-                          childProgressDispatcherFactory,\n-                          results.targetRegistryClient.get(),\n-                          Verify.verifyNotNull(\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+\n+              for (Map.Entry<Future<Image>, Image> entry :\n+                  results.builtImagesAndBaseImages.get().entrySet()) {\n+\n+                Future<Image> builtImage = entry.getKey();\n+                Image baseImage = entry.getValue();\n+\n+                Future<BuildResult> buildResult =\n+                    executorService.submit(\n+                        () -> {\n+                          realizeFutures(\n+                              Verify.verifyNotNull(\n                                   results\n-                                      .builtImagesAndContainerConfigurationPushResults\n+                                      .baseImagesAndbaseImageLayerPushResults\n                                       .get()\n-                                      .get(results.builtImages.get().get(0)))\n-                              .get(),\n-                          results.builtImages.get().get(0).get(),\n-                          results.manifestCheckResult.get().isPresent()));\n-              realizeFutures(manifestPushResults);\n-              return manifestPushResults.isEmpty()\n-                  ? new BuildResult(\n-                      results.manifestCheckResult.get().get().getDigest(),\n-                      Verify.verifyNotNull(\n-                              results\n-                                  .builtImagesAndContainerConfigurationPushResults\n-                                  .get()\n-                                  .get(results.builtImages.get().get(0)))\n-                          .get()\n-                          .getDigest())\n-                  // Manifest pushers return the same BuildResult.\n-                  : manifestPushResults.get(0).get();\n+                                      .get(baseImage)));\n+\n+                          List<Future<BuildResult>> manifestPushResults =\n+                              scheduleCallables(\n+                                  PushImageStep.makeList(\n+                                      buildContext,\n+                                      childProgressDispatcherFactory,\n+                                      results.targetRegistryClient.get(),\n+                                      Verify.verifyNotNull(\n+                                              results\n+                                                  .builtImagesAndContainerConfigurationPushResults\n+                                                  .get()\n+                                                  .get(builtImage))\n+                                          .get(),\n+                                      builtImage.get(),\n+                                      results.manifestCheckResult.get().isPresent()));\n+\n+                          realizeFutures(manifestPushResults);\n+                          return manifestPushResults.isEmpty()\n+                              ? new BuildResult(\n+                                  results.manifestCheckResult.get().get().getDigest(),\n+                                  Verify.verifyNotNull(\n+                                          results\n+                                              .builtImagesAndContainerConfigurationPushResults\n+                                              .get()\n+                                              .get(builtImage))\n+                                      .get()\n+                                      .getDigest())\n+                              // Manifest pushers return the same BuildResult.\n+                              : manifestPushResults.get(0).get();\n+                        });\n+\n+                buildResults.add(buildResult);\n+              }\n+              return buildResults;\n             });\n   }\n \n   private void loadDocker(DockerClient dockerClient) {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n-            () ->\n-                new LoadDockerStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        dockerClient,\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Map.Entry<Future<Image>, Image> entry =\n+                  results.builtImagesAndBaseImages.get().entrySet().iterator().next();\n+              Future<Image> builtImage = entry.getKey();\n+\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+              Future<BuildResult> buildResult =\n+                  executorService.submit(\n+                      () ->\n+                          new LoadDockerStep(\n+                                  buildContext,\n+                                  childProgressDispatcherFactory,\n+                                  dockerClient,\n+                                  builtImage.get())\n+                              .call());\n+              buildResults.add(buildResult);\n+              return buildResults;\n+            });\n   }\n \n   private void writeTarFile(Path outputPath) {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n-            () ->\n-                new WriteTarFileStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        outputPath,\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Map.Entry<Future<Image>, Image> entry =\n+                  results.builtImagesAndBaseImages.get().entrySet().iterator().next();\n+              Future<Image> builtImage = entry.getKey();\n+\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8f8c4193f22f374b9d4b7a2eb91b58398be359f"}, "originalPosition": 283}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDQ4NzEyOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODowMDowM1rOG-ZbsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODo1MzozMVrOG-bLWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4MTU4NA==", "bodyText": "I think we can block until we get the built Image?\n              Image builtImage =\n                  results.builtImagesAndBaseImages.get().keySet().iterator().next().get();\nNext, I think we should avoid scheduling another thread. We can use Futures.immediateFuture (a utility method to directly instantiate a Future from a concrete value) that just wraps a value instead of actually scheduling a thread.\n              Image builtImage =\n                  results.builtImagesAndBaseImages.get().keySet().iterator().next().get();\n\n              return Collections.singletonList(\n                  Futures.immediateFuture(\n                      new LoadDockerStep(\n                              buildContext,\n                              childProgressDispatcherFactory,\n                              dockerClient,\n                              builtImage)\n                          .call()));", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r468081584", "createdAt": "2020-08-10T18:00:03Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -430,89 +435,133 @@ private void checkImageInTargetRegistry() {\n \n     results.manifestCheckResult =\n         executorService.submit(\n-            () ->\n-                new CheckImageStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        results.targetRegistryClient.get(),\n-                        Verify.verifyNotNull(\n-                                results\n-                                    .builtImagesAndContainerConfigurationPushResults\n-                                    .get()\n-                                    .get(results.builtImages.get().get(0)))\n-                            .get(),\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Verify.verify(results.builtImagesAndBaseImages.get().size() == 1);\n+              Future<Image> builtImage =\n+                  results.builtImagesAndBaseImages.get().keySet().iterator().next();\n+              return new CheckImageStep(\n+                      buildContext,\n+                      childProgressDispatcherFactory,\n+                      results.targetRegistryClient.get(),\n+                      Verify.verifyNotNull(\n+                              results\n+                                  .builtImagesAndContainerConfigurationPushResults\n+                                  .get()\n+                                  .get(builtImage))\n+                          .get(),\n+                      builtImage.get())\n+                  .call();\n+            });\n   }\n \n   private void pushImages() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n             () -> {\n-              realizeFutures(results.baseImageLayerPushResults.get().get(0));\n               realizeFutures(results.applicationLayerPushResults.get());\n \n-              List<Future<BuildResult>> manifestPushResults =\n-                  scheduleCallables(\n-                      PushImageStep.makeList(\n-                          buildContext,\n-                          childProgressDispatcherFactory,\n-                          results.targetRegistryClient.get(),\n-                          Verify.verifyNotNull(\n-                                  results\n-                                      .builtImagesAndContainerConfigurationPushResults\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+\n+              for (Map.Entry<Future<Image>, Image> entry :\n+                  results.builtImagesAndBaseImages.get().entrySet()) {\n+\n+                Future<Image> builtImage = entry.getKey();\n+                Image baseImage = entry.getValue();\n+\n+                Future<BuildResult> buildResult =\n+                    executorService.submit(\n+                        () -> {\n+                          realizeFutures(\n+                              Verify.verifyNotNull(\n+                                  results.baseImagesAndLayerPushResults.get().get(baseImage)));\n+\n+                          List<Future<BuildResult>> manifestPushResults =\n+                              scheduleCallables(\n+                                  PushImageStep.makeList(\n+                                      buildContext,\n+                                      childProgressDispatcherFactory,\n+                                      results.targetRegistryClient.get(),\n+                                      Verify.verifyNotNull(\n+                                              results\n+                                                  .builtImagesAndContainerConfigurationPushResults\n+                                                  .get()\n+                                                  .get(builtImage))\n+                                          .get(),\n+                                      builtImage.get(),\n+                                      results.manifestCheckResult.get().isPresent()));\n+\n+                          realizeFutures(manifestPushResults);\n+                          return manifestPushResults.isEmpty()\n+                              ? new BuildResult(\n+                                  results.manifestCheckResult.get().get().getDigest(),\n+                                  Verify.verifyNotNull(\n+                                          results\n+                                              .builtImagesAndContainerConfigurationPushResults\n+                                              .get()\n+                                              .get(builtImage))\n                                       .get()\n-                                      .get(results.builtImages.get().get(0)))\n-                              .get(),\n-                          results.builtImages.get().get(0).get(),\n-                          results.manifestCheckResult.get().isPresent()));\n-              realizeFutures(manifestPushResults);\n-              return manifestPushResults.isEmpty()\n-                  ? new BuildResult(\n-                      results.manifestCheckResult.get().get().getDigest(),\n-                      Verify.verifyNotNull(\n-                              results\n-                                  .builtImagesAndContainerConfigurationPushResults\n-                                  .get()\n-                                  .get(results.builtImages.get().get(0)))\n-                          .get()\n-                          .getDigest())\n-                  // Manifest pushers return the same BuildResult.\n-                  : manifestPushResults.get(0).get();\n+                                      .getDigest())\n+                              // Manifest pushers return the same BuildResult.\n+                              : manifestPushResults.get(0).get();\n+                        });\n+\n+                buildResults.add(buildResult);\n+              }\n+              return buildResults;\n             });\n   }\n \n   private void loadDocker(DockerClient dockerClient) {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n-            () ->\n-                new LoadDockerStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        dockerClient,\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Verify.verify(\n+                  results.builtImagesAndBaseImages.get().size() == 1,\n+                  \"multi-platform image building not supported when pushing to Docker engine\");\n+              Future<Image> builtImage =\n+                  results.builtImagesAndBaseImages.get().keySet().iterator().next();\n+\n+              return Collections.singletonList(\n+                  executorService.submit(\n+                      () ->\n+                          new LoadDockerStep(\n+                                  buildContext,\n+                                  childProgressDispatcherFactory,\n+                                  dockerClient,\n+                                  builtImage.get())\n+                              .call()));\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00140cd64838a07c01212b5e9a6b54b2e8c2c1df"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODExMDE3MA==", "bodyText": "And I think this is more readable:\n              BuildResult buildResult =\n                  new LoadDockerStep(\n                          buildContext, childProgressDispatcherFactory, dockerClient, builtImage)\n                      .call();\n              return Collections.singletonList(Futures.immediateFuture(buildResult));", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r468110170", "createdAt": "2020-08-10T18:53:31Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -430,89 +435,133 @@ private void checkImageInTargetRegistry() {\n \n     results.manifestCheckResult =\n         executorService.submit(\n-            () ->\n-                new CheckImageStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        results.targetRegistryClient.get(),\n-                        Verify.verifyNotNull(\n-                                results\n-                                    .builtImagesAndContainerConfigurationPushResults\n-                                    .get()\n-                                    .get(results.builtImages.get().get(0)))\n-                            .get(),\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Verify.verify(results.builtImagesAndBaseImages.get().size() == 1);\n+              Future<Image> builtImage =\n+                  results.builtImagesAndBaseImages.get().keySet().iterator().next();\n+              return new CheckImageStep(\n+                      buildContext,\n+                      childProgressDispatcherFactory,\n+                      results.targetRegistryClient.get(),\n+                      Verify.verifyNotNull(\n+                              results\n+                                  .builtImagesAndContainerConfigurationPushResults\n+                                  .get()\n+                                  .get(builtImage))\n+                          .get(),\n+                      builtImage.get())\n+                  .call();\n+            });\n   }\n \n   private void pushImages() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n             () -> {\n-              realizeFutures(results.baseImageLayerPushResults.get().get(0));\n               realizeFutures(results.applicationLayerPushResults.get());\n \n-              List<Future<BuildResult>> manifestPushResults =\n-                  scheduleCallables(\n-                      PushImageStep.makeList(\n-                          buildContext,\n-                          childProgressDispatcherFactory,\n-                          results.targetRegistryClient.get(),\n-                          Verify.verifyNotNull(\n-                                  results\n-                                      .builtImagesAndContainerConfigurationPushResults\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+\n+              for (Map.Entry<Future<Image>, Image> entry :\n+                  results.builtImagesAndBaseImages.get().entrySet()) {\n+\n+                Future<Image> builtImage = entry.getKey();\n+                Image baseImage = entry.getValue();\n+\n+                Future<BuildResult> buildResult =\n+                    executorService.submit(\n+                        () -> {\n+                          realizeFutures(\n+                              Verify.verifyNotNull(\n+                                  results.baseImagesAndLayerPushResults.get().get(baseImage)));\n+\n+                          List<Future<BuildResult>> manifestPushResults =\n+                              scheduleCallables(\n+                                  PushImageStep.makeList(\n+                                      buildContext,\n+                                      childProgressDispatcherFactory,\n+                                      results.targetRegistryClient.get(),\n+                                      Verify.verifyNotNull(\n+                                              results\n+                                                  .builtImagesAndContainerConfigurationPushResults\n+                                                  .get()\n+                                                  .get(builtImage))\n+                                          .get(),\n+                                      builtImage.get(),\n+                                      results.manifestCheckResult.get().isPresent()));\n+\n+                          realizeFutures(manifestPushResults);\n+                          return manifestPushResults.isEmpty()\n+                              ? new BuildResult(\n+                                  results.manifestCheckResult.get().get().getDigest(),\n+                                  Verify.verifyNotNull(\n+                                          results\n+                                              .builtImagesAndContainerConfigurationPushResults\n+                                              .get()\n+                                              .get(builtImage))\n                                       .get()\n-                                      .get(results.builtImages.get().get(0)))\n-                              .get(),\n-                          results.builtImages.get().get(0).get(),\n-                          results.manifestCheckResult.get().isPresent()));\n-              realizeFutures(manifestPushResults);\n-              return manifestPushResults.isEmpty()\n-                  ? new BuildResult(\n-                      results.manifestCheckResult.get().get().getDigest(),\n-                      Verify.verifyNotNull(\n-                              results\n-                                  .builtImagesAndContainerConfigurationPushResults\n-                                  .get()\n-                                  .get(results.builtImages.get().get(0)))\n-                          .get()\n-                          .getDigest())\n-                  // Manifest pushers return the same BuildResult.\n-                  : manifestPushResults.get(0).get();\n+                                      .getDigest())\n+                              // Manifest pushers return the same BuildResult.\n+                              : manifestPushResults.get(0).get();\n+                        });\n+\n+                buildResults.add(buildResult);\n+              }\n+              return buildResults;\n             });\n   }\n \n   private void loadDocker(DockerClient dockerClient) {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n-            () ->\n-                new LoadDockerStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        dockerClient,\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Verify.verify(\n+                  results.builtImagesAndBaseImages.get().size() == 1,\n+                  \"multi-platform image building not supported when pushing to Docker engine\");\n+              Future<Image> builtImage =\n+                  results.builtImagesAndBaseImages.get().keySet().iterator().next();\n+\n+              return Collections.singletonList(\n+                  executorService.submit(\n+                      () ->\n+                          new LoadDockerStep(\n+                                  buildContext,\n+                                  childProgressDispatcherFactory,\n+                                  dockerClient,\n+                                  builtImage.get())\n+                              .call()));\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4MTU4NA=="}, "originalCommit": {"oid": "00140cd64838a07c01212b5e9a6b54b2e8c2c1df"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDU5NDgwOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODozMTozN1rOG-adnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODozMTozN1rOG-adnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5ODQ2MA==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r468098460", "createdAt": "2020-08-10T18:31:37Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -430,89 +435,133 @@ private void checkImageInTargetRegistry() {\n \n     results.manifestCheckResult =\n         executorService.submit(\n-            () ->\n-                new CheckImageStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        results.targetRegistryClient.get(),\n-                        Verify.verifyNotNull(\n-                                results\n-                                    .builtImagesAndContainerConfigurationPushResults\n-                                    .get()\n-                                    .get(results.builtImages.get().get(0)))\n-                            .get(),\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Verify.verify(results.builtImagesAndBaseImages.get().size() == 1);\n+              Future<Image> builtImage =\n+                  results.builtImagesAndBaseImages.get().keySet().iterator().next();\n+              return new CheckImageStep(\n+                      buildContext,\n+                      childProgressDispatcherFactory,\n+                      results.targetRegistryClient.get(),\n+                      Verify.verifyNotNull(\n+                              results\n+                                  .builtImagesAndContainerConfigurationPushResults\n+                                  .get()\n+                                  .get(builtImage))\n+                          .get(),\n+                      builtImage.get())\n+                  .call();\n+            });\n   }\n \n   private void pushImages() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n             () -> {\n-              realizeFutures(results.baseImageLayerPushResults.get().get(0));\n               realizeFutures(results.applicationLayerPushResults.get());\n \n-              List<Future<BuildResult>> manifestPushResults =\n-                  scheduleCallables(\n-                      PushImageStep.makeList(\n-                          buildContext,\n-                          childProgressDispatcherFactory,\n-                          results.targetRegistryClient.get(),\n-                          Verify.verifyNotNull(\n-                                  results\n-                                      .builtImagesAndContainerConfigurationPushResults\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+\n+              for (Map.Entry<Future<Image>, Image> entry :\n+                  results.builtImagesAndBaseImages.get().entrySet()) {\n+\n+                Future<Image> builtImage = entry.getKey();\n+                Image baseImage = entry.getValue();\n+\n+                Future<BuildResult> buildResult =\n+                    executorService.submit(\n+                        () -> {\n+                          realizeFutures(\n+                              Verify.verifyNotNull(\n+                                  results.baseImagesAndLayerPushResults.get().get(baseImage)));\n+\n+                          List<Future<BuildResult>> manifestPushResults =\n+                              scheduleCallables(\n+                                  PushImageStep.makeList(\n+                                      buildContext,\n+                                      childProgressDispatcherFactory,\n+                                      results.targetRegistryClient.get(),\n+                                      Verify.verifyNotNull(\n+                                              results\n+                                                  .builtImagesAndContainerConfigurationPushResults\n+                                                  .get()\n+                                                  .get(builtImage))\n+                                          .get(),\n+                                      builtImage.get(),\n+                                      results.manifestCheckResult.get().isPresent()));\n+\n+                          realizeFutures(manifestPushResults);\n+                          return manifestPushResults.isEmpty()\n+                              ? new BuildResult(\n+                                  results.manifestCheckResult.get().get().getDigest(),\n+                                  Verify.verifyNotNull(\n+                                          results\n+                                              .builtImagesAndContainerConfigurationPushResults\n+                                              .get()\n+                                              .get(builtImage))\n                                       .get()\n-                                      .get(results.builtImages.get().get(0)))\n-                              .get(),\n-                          results.builtImages.get().get(0).get(),\n-                          results.manifestCheckResult.get().isPresent()));\n-              realizeFutures(manifestPushResults);\n-              return manifestPushResults.isEmpty()\n-                  ? new BuildResult(\n-                      results.manifestCheckResult.get().get().getDigest(),\n-                      Verify.verifyNotNull(\n-                              results\n-                                  .builtImagesAndContainerConfigurationPushResults\n-                                  .get()\n-                                  .get(results.builtImages.get().get(0)))\n-                          .get()\n-                          .getDigest())\n-                  // Manifest pushers return the same BuildResult.\n-                  : manifestPushResults.get(0).get();\n+                                      .getDigest())\n+                              // Manifest pushers return the same BuildResult.\n+                              : manifestPushResults.get(0).get();\n+                        });\n+\n+                buildResults.add(buildResult);\n+              }\n+              return buildResults;\n             });\n   }\n \n   private void loadDocker(DockerClient dockerClient) {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n-            () ->\n-                new LoadDockerStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        dockerClient,\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Verify.verify(\n+                  results.builtImagesAndBaseImages.get().size() == 1,\n+                  \"multi-platform image building not supported when pushing to Docker engine\");\n+              Future<Image> builtImage =\n+                  results.builtImagesAndBaseImages.get().keySet().iterator().next();\n+\n+              return Collections.singletonList(\n+                  executorService.submit(\n+                      () ->\n+                          new LoadDockerStep(\n+                                  buildContext,\n+                                  childProgressDispatcherFactory,\n+                                  dockerClient,\n+                                  builtImage.get())\n+                              .call()));\n+            });\n   }\n \n   private void writeTarFile(Path outputPath) {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n-            () ->\n-                new WriteTarFileStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        outputPath,\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Verify.verify(\n+                  results.builtImagesAndBaseImages.get().size() == 1,\n+                  \"multi-platform image building not supported when building a local tar image\");\n+              Future<Image> builtImage =\n+                  results.builtImagesAndBaseImages.get().keySet().iterator().next();\n+\n+              return Collections.singletonList(\n+                  executorService.submit(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00140cd64838a07c01212b5e9a6b54b2e8c2c1df"}, "originalPosition": 284}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDgxMDcwOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOToyOTowNVrOG-civw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOToyOTowNVrOG-civw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzMjU0Mw==", "bodyText": "This is also used on line 500, so I suggest refactor out into a local variable. I think it will considerable improve readability.", "url": "https://github.com/GoogleContainerTools/jib/pull/2663#discussion_r468132543", "createdAt": "2020-08-10T19:29:05Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -430,89 +435,133 @@ private void checkImageInTargetRegistry() {\n \n     results.manifestCheckResult =\n         executorService.submit(\n-            () ->\n-                new CheckImageStep(\n-                        buildContext,\n-                        childProgressDispatcherFactory,\n-                        results.targetRegistryClient.get(),\n-                        Verify.verifyNotNull(\n-                                results\n-                                    .builtImagesAndContainerConfigurationPushResults\n-                                    .get()\n-                                    .get(results.builtImages.get().get(0)))\n-                            .get(),\n-                        results.builtImages.get().get(0).get())\n-                    .call());\n+            () -> {\n+              Verify.verify(results.builtImagesAndBaseImages.get().size() == 1);\n+              Future<Image> builtImage =\n+                  results.builtImagesAndBaseImages.get().keySet().iterator().next();\n+              return new CheckImageStep(\n+                      buildContext,\n+                      childProgressDispatcherFactory,\n+                      results.targetRegistryClient.get(),\n+                      Verify.verifyNotNull(\n+                              results\n+                                  .builtImagesAndContainerConfigurationPushResults\n+                                  .get()\n+                                  .get(builtImage))\n+                          .get(),\n+                      builtImage.get())\n+                  .call();\n+            });\n   }\n \n   private void pushImages() {\n     ProgressEventDispatcher.Factory childProgressDispatcherFactory =\n         Verify.verifyNotNull(rootProgressDispatcher).newChildProducer();\n \n-    results.buildResult =\n+    results.buildResults =\n         executorService.submit(\n             () -> {\n-              realizeFutures(results.baseImageLayerPushResults.get().get(0));\n               realizeFutures(results.applicationLayerPushResults.get());\n \n-              List<Future<BuildResult>> manifestPushResults =\n-                  scheduleCallables(\n-                      PushImageStep.makeList(\n-                          buildContext,\n-                          childProgressDispatcherFactory,\n-                          results.targetRegistryClient.get(),\n-                          Verify.verifyNotNull(\n-                                  results\n-                                      .builtImagesAndContainerConfigurationPushResults\n+              List<Future<BuildResult>> buildResults = new ArrayList<>();\n+\n+              for (Map.Entry<Future<Image>, Image> entry :\n+                  results.builtImagesAndBaseImages.get().entrySet()) {\n+\n+                Future<Image> builtImage = entry.getKey();\n+                Image baseImage = entry.getValue();\n+\n+                Future<BuildResult> buildResult =\n+                    executorService.submit(\n+                        () -> {\n+                          realizeFutures(\n+                              Verify.verifyNotNull(\n+                                  results.baseImagesAndLayerPushResults.get().get(baseImage)));\n+\n+                          List<Future<BuildResult>> manifestPushResults =\n+                              scheduleCallables(\n+                                  PushImageStep.makeList(\n+                                      buildContext,\n+                                      childProgressDispatcherFactory,\n+                                      results.targetRegistryClient.get(),\n+                                      Verify.verifyNotNull(\n+                                              results\n+                                                  .builtImagesAndContainerConfigurationPushResults\n+                                                  .get()\n+                                                  .get(builtImage))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00140cd64838a07c01212b5e9a6b54b2e8c2c1df"}, "originalPosition": 186}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 102, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}