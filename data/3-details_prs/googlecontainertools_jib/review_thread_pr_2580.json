{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NjI1NDE1", "number": 2580, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozNDozNVrOEN8LOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyMDoxOVrOEOR5xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDUyODU2OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozNDozNVrOGw02cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOTozNjo0OVrOGw2-uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1MDczOQ==", "bodyText": "I do remember the checkstyle complained if having a Javadoc not ending with a period. \ud83e\udd37\u200d\u2642\ufe0f\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A yaml block for specifying archive layers\n          \n          \n            \n             * A yaml block for specifying archive layers.", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453850739", "createdAt": "2020-07-13T18:34:35Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpec.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A yaml block for specifying archive layers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "540600f26292909f4a47a87ad8b38a897414ad50"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4NTYyNw==", "bodyText": "Weird that it didn't catch these?", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453885627", "createdAt": "2020-07-13T19:36:49Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpec.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A yaml block for specifying archive layers", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1MDczOQ=="}, "originalCommit": {"oid": "540600f26292909f4a47a87ad8b38a897414ad50"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDU0MTcyOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozODoxMVrOGw0-nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozODoxMVrOGw0-nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1MjgzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A yaml block for specifying files layers\n          \n          \n            \n             * A yaml block for specifying files layers.", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453852831", "createdAt": "2020-07-13T18:38:11Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A yaml block for specifying files layers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "540600f26292909f4a47a87ad8b38a897414ad50"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDU0MzU1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozODo0MVrOGw0_2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOTo0MDo0MlrOGw3GiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1MzE0NA==", "bodyText": "Should we make a copy?", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453853144", "createdAt": "2020-07-13T18:38:41Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A yaml block for specifying files layers\n+ *\n+ * <p>Example use of this yaml snippet.\n+ *\n+ * <pre>{@code\n+ * name: \"my classes layer\"\n+ * files:\n+ *   - {@link CopySpec}\n+ *   - {@link CopySpec}\n+ * // optional properties\n+ * properties: see {@link FilePropertiesSpec}\n+ * }</pre>\n+ */\n+@JsonDeserialize(using = JsonDeserializer.None.class) // required since LayerSpec overrides this\n+public class FileLayerSpec implements LayerSpec {\n+  private String name;\n+  private List<CopySpec> files;\n+  @Nullable private FilePropertiesSpec properties;\n+\n+  /**\n+   * Constructor for use by jackson to populate this object.\n+   *\n+   * @param name a unique name for this layer\n+   * @param files a path to an archive file\n+   * @param properties a {@link FilePropertiesSpec} that applies to all files in this layer\n+   */\n+  @JsonCreator\n+  public FileLayerSpec(\n+      @JsonProperty(value = \"name\", required = true) String name,\n+      @JsonProperty(value = \"files\", required = true) List<CopySpec> files,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "540600f26292909f4a47a87ad8b38a897414ad50"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4NzYyNQ==", "bodyText": "So I thought about that. This is not a public api, and we will be converting it directly into a build plan. No one will really be processing it in the meantime, so I think it's fine to leave like that.", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453887625", "createdAt": "2020-07-13T19:40:42Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A yaml block for specifying files layers\n+ *\n+ * <p>Example use of this yaml snippet.\n+ *\n+ * <pre>{@code\n+ * name: \"my classes layer\"\n+ * files:\n+ *   - {@link CopySpec}\n+ *   - {@link CopySpec}\n+ * // optional properties\n+ * properties: see {@link FilePropertiesSpec}\n+ * }</pre>\n+ */\n+@JsonDeserialize(using = JsonDeserializer.None.class) // required since LayerSpec overrides this\n+public class FileLayerSpec implements LayerSpec {\n+  private String name;\n+  private List<CopySpec> files;\n+  @Nullable private FilePropertiesSpec properties;\n+\n+  /**\n+   * Constructor for use by jackson to populate this object.\n+   *\n+   * @param name a unique name for this layer\n+   * @param files a path to an archive file\n+   * @param properties a {@link FilePropertiesSpec} that applies to all files in this layer\n+   */\n+  @JsonCreator\n+  public FileLayerSpec(\n+      @JsonProperty(value = \"name\", required = true) String name,\n+      @JsonProperty(value = \"files\", required = true) List<CopySpec> files,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1MzE0NA=="}, "originalCommit": {"oid": "540600f26292909f4a47a87ad8b38a897414ad50"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDU1MjU4OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODo0MTowNlrOGw1FVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOTo0MDozOVrOGw3GXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1NDU1MQ==", "bodyText": "Probably LayerSpec.Deserializer is publicly accessible, but I guess it doesn't matter because all the buildfile classes are internal and not public API, right?", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453854551", "createdAt": "2020-07-13T18:41:06Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import java.io.IOException;\n+\n+/**\n+ * Polymorphic yaml LayerSpec interface with custom deserializer, can parse both {@link\n+ * ArchiveLayerSpec} and {@link FileLayerSpec}.\n+ */\n+@JsonDeserialize(using = LayerSpec.Deserializer.class)\n+public interface LayerSpec {\n+  class Deserializer extends StdDeserializer<LayerSpec> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "540600f26292909f4a47a87ad8b38a897414ad50"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4NzU4Mw==", "bodyText": "That's a good point, but since interfaces don't allow the private modifier, I think this is fine. Otherwise we would have to add another class to do this?", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453887583", "createdAt": "2020-07-13T19:40:39Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import java.io.IOException;\n+\n+/**\n+ * Polymorphic yaml LayerSpec interface with custom deserializer, can parse both {@link\n+ * ArchiveLayerSpec} and {@link FileLayerSpec}.\n+ */\n+@JsonDeserialize(using = LayerSpec.Deserializer.class)\n+public interface LayerSpec {\n+  class Deserializer extends StdDeserializer<LayerSpec> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1NDU1MQ=="}, "originalCommit": {"oid": "540600f26292909f4a47a87ad8b38a897414ad50"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDU1NzAwOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODo0MjozMFrOGw1IMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODo0MjozMFrOGw1IMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1NTI4MA==", "bodyText": "And how about\njp --> parser\ntxt --> context\nn --> node\n?", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453855280", "createdAt": "2020-07-13T18:42:30Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import java.io.IOException;\n+\n+/**\n+ * Polymorphic yaml LayerSpec interface with custom deserializer, can parse both {@link\n+ * ArchiveLayerSpec} and {@link FileLayerSpec}.\n+ */\n+@JsonDeserialize(using = LayerSpec.Deserializer.class)\n+public interface LayerSpec {\n+  class Deserializer extends StdDeserializer<LayerSpec> {\n+\n+    public Deserializer() {\n+      super(LayerSpec.class);\n+    }\n+\n+    /**\n+     * Deserialize based on the presence of \"archive\", if present, consider the layer to be of type\n+     * {@link ArchiveLayerSpec}, else a {@link FileLayerSpec}.\n+     */\n+    @Override\n+    public LayerSpec deserialize(JsonParser jp, DeserializationContext txt) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "540600f26292909f4a47a87ad8b38a897414ad50"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDkxNjgxOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpecTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDoyNTowN1rOGw4gvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDoyNTowN1rOGw4gvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMDcxOA==", "bodyText": "nit: I suggest this as code comment rather than a Javadoc.", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453910718", "createdAt": "2020-07-13T20:25:07Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpecTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import java.nio.file.Paths;\n+import org.hamcrest.CoreMatchers;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/** Tests for {@link ArchiveLayerSpec}. */\n+public class ArchiveLayerSpecTest {\n+\n+  private static final ObjectMapper archiveLayerSpecMapper = new ObjectMapper(new YAMLFactory());\n+\n+  @Test\n+  public void testArchiveLayerSpec_full() throws JsonProcessingException {\n+    String data =\n+        \"name: layer name\\n\" + \"archive: out/archive.tgz\\n\" + \"mediaType: test.media.type\";\n+\n+    ArchiveLayerSpec parsed = archiveLayerSpecMapper.readValue(data, ArchiveLayerSpec.class);\n+    Assert.assertEquals(\"layer name\", parsed.getName());\n+    Assert.assertEquals(Paths.get(\"out/archive.tgz\"), parsed.getArchive());\n+    Assert.assertEquals(\"test.media.type\", parsed.getMediaType().get());\n+  }\n+\n+  @Test\n+  public void testArchiveLayerSpec_nameRequired() {\n+    String data = \"archive: out/archive\";\n+\n+    try {\n+      archiveLayerSpecMapper.readValue(data, ArchiveLayerSpec.class);\n+      Assert.fail();\n+    } catch (JsonProcessingException jpe) {\n+      MatcherAssert.assertThat(\n+          jpe.getMessage(), CoreMatchers.startsWith(\"Missing required creator property 'name'\"));\n+    }\n+  }\n+\n+  /**\n+   * With {@link LayerSpec.Deserializer#deserialize} this test seems pointless, but it still helps\n+   * define the behavior of this class.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f7a3d822a0f64b7b05a40716dc9ec93379b78b0"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDkyMDg1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDoyNjoxMFrOGw4jNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDoyNjoxMFrOGw4jNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMTM0OA==", "bodyText": "incorrect doc?", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453911348", "createdAt": "2020-07-13T20:26:10Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A yaml block for specifying files layers.\n+ *\n+ * <p>Example use of this yaml snippet.\n+ *\n+ * <pre>{@code\n+ * name: \"my classes layer\"\n+ * files:\n+ *   - {@link CopySpec}\n+ *   - {@link CopySpec}\n+ * // optional properties\n+ * properties: see {@link FilePropertiesSpec}\n+ * }</pre>\n+ */\n+@JsonDeserialize(using = JsonDeserializer.None.class) // required since LayerSpec overrides this\n+public class FileLayerSpec implements LayerSpec {\n+  private String name;\n+  private List<CopySpec> files;\n+  @Nullable private FilePropertiesSpec properties;\n+\n+  /**\n+   * Constructor for use by jackson to populate this object.\n+   *\n+   * @param name a unique name for this layer\n+   * @param files a path to an archive file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f7a3d822a0f64b7b05a40716dc9ec93379b78b0"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDkyODA1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDoyODowNFrOGw4naw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDowNDoxOVrOGw_D7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMjQyNw==", "bodyText": "I remember this has to start with \"Deserializes ...\". And the comment reads a bit weird to me.", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453912427", "createdAt": "2020-07-13T20:28:04Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import java.io.IOException;\n+\n+/**\n+ * Polymorphic yaml LayerSpec interface with custom deserializer, can parse both {@link\n+ * ArchiveLayerSpec} and {@link FileLayerSpec}.\n+ */\n+@JsonDeserialize(using = LayerSpec.Deserializer.class)\n+public interface LayerSpec {\n+  class Deserializer extends StdDeserializer<LayerSpec> {\n+\n+    public Deserializer() {\n+      super(LayerSpec.class);\n+    }\n+\n+    /**\n+     * Deserialize based on the presence of \"archive\", if present, consider the layer to be of type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f7a3d822a0f64b7b05a40716dc9ec93379b78b0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxODAzMQ==", "bodyText": "updated this comment", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r454018031", "createdAt": "2020-07-14T00:04:19Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import java.io.IOException;\n+\n+/**\n+ * Polymorphic yaml LayerSpec interface with custom deserializer, can parse both {@link\n+ * ArchiveLayerSpec} and {@link FileLayerSpec}.\n+ */\n+@JsonDeserialize(using = LayerSpec.Deserializer.class)\n+public interface LayerSpec {\n+  class Deserializer extends StdDeserializer<LayerSpec> {\n+\n+    public Deserializer() {\n+      super(LayerSpec.class);\n+    }\n+\n+    /**\n+     * Deserialize based on the presence of \"archive\", if present, consider the layer to be of type", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMjQyNw=="}, "originalCommit": {"oid": "7f7a3d822a0f64b7b05a40716dc9ec93379b78b0"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDA4ODM5OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyMDoxOVrOGxV42A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTo0MzowOFrOGxZrPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MjAyNA==", "bodyText": "Sorry, one final comment, then LGTM. I just noticed that the abstract super method throws IOException and JsonProcessingException. Isn't throwing JsonProcessingException more suitable for the errors you are checking?", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r454392024", "createdAt": "2020-07-14T14:20:19Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import java.io.IOException;\n+\n+/**\n+ * Polymorphic yaml LayerSpec interface with custom deserializer, can parse both {@link\n+ * ArchiveLayerSpec} and {@link FileLayerSpec}.\n+ */\n+@JsonDeserialize(using = LayerSpec.Deserializer.class)\n+public interface LayerSpec {\n+  class Deserializer extends StdDeserializer<LayerSpec> {\n+\n+    public Deserializer() {\n+      super(LayerSpec.class);\n+    }\n+\n+    /**\n+     * Deserializes to {@link ArchiveLayerSpec} if yaml contains \"archive\" field, to {@link\n+     * FileLayerSpec} if yaml contains \"files\" field or throws {@link IOException} if neither is\n+     * found or no \"name\" was specified for the layer entry.\n+     */\n+    @Override\n+    public LayerSpec deserialize(JsonParser jsonParser, DeserializationContext context)\n+        throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58ad8d93084153973241b5cc54763bdd01dc2808"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0OTIxMA==", "bodyText": "JsonProcessingException has no public constructor unfortunately \ud83d\ude22 .", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r454449210", "createdAt": "2020-07-14T15:36:09Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import java.io.IOException;\n+\n+/**\n+ * Polymorphic yaml LayerSpec interface with custom deserializer, can parse both {@link\n+ * ArchiveLayerSpec} and {@link FileLayerSpec}.\n+ */\n+@JsonDeserialize(using = LayerSpec.Deserializer.class)\n+public interface LayerSpec {\n+  class Deserializer extends StdDeserializer<LayerSpec> {\n+\n+    public Deserializer() {\n+      super(LayerSpec.class);\n+    }\n+\n+    /**\n+     * Deserializes to {@link ArchiveLayerSpec} if yaml contains \"archive\" field, to {@link\n+     * FileLayerSpec} if yaml contains \"files\" field or throws {@link IOException} if neither is\n+     * found or no \"name\" was specified for the layer entry.\n+     */\n+    @Override\n+    public LayerSpec deserialize(JsonParser jsonParser, DeserializationContext context)\n+        throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MjAyNA=="}, "originalCommit": {"oid": "58ad8d93084153973241b5cc54763bdd01dc2808"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0OTgzMg==", "bodyText": "maybe there's some other subclass that I can use. I added it to the list of things to check on the tracking bug.", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r454449832", "createdAt": "2020-07-14T15:37:04Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import java.io.IOException;\n+\n+/**\n+ * Polymorphic yaml LayerSpec interface with custom deserializer, can parse both {@link\n+ * ArchiveLayerSpec} and {@link FileLayerSpec}.\n+ */\n+@JsonDeserialize(using = LayerSpec.Deserializer.class)\n+public interface LayerSpec {\n+  class Deserializer extends StdDeserializer<LayerSpec> {\n+\n+    public Deserializer() {\n+      super(LayerSpec.class);\n+    }\n+\n+    /**\n+     * Deserializes to {@link ArchiveLayerSpec} if yaml contains \"archive\" field, to {@link\n+     * FileLayerSpec} if yaml contains \"files\" field or throws {@link IOException} if neither is\n+     * found or no \"name\" was specified for the layer entry.\n+     */\n+    @Override\n+    public LayerSpec deserialize(JsonParser jsonParser, DeserializationContext context)\n+        throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MjAyNA=="}, "originalCommit": {"oid": "58ad8d93084153973241b5cc54763bdd01dc2808"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1NDA3Nw==", "bodyText": "Huh, interesting. I am fine going with IOException then.", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r454454077", "createdAt": "2020-07-14T15:43:08Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import java.io.IOException;\n+\n+/**\n+ * Polymorphic yaml LayerSpec interface with custom deserializer, can parse both {@link\n+ * ArchiveLayerSpec} and {@link FileLayerSpec}.\n+ */\n+@JsonDeserialize(using = LayerSpec.Deserializer.class)\n+public interface LayerSpec {\n+  class Deserializer extends StdDeserializer<LayerSpec> {\n+\n+    public Deserializer() {\n+      super(LayerSpec.class);\n+    }\n+\n+    /**\n+     * Deserializes to {@link ArchiveLayerSpec} if yaml contains \"archive\" field, to {@link\n+     * FileLayerSpec} if yaml contains \"files\" field or throws {@link IOException} if neither is\n+     * found or no \"name\" was specified for the layer entry.\n+     */\n+    @Override\n+    public LayerSpec deserialize(JsonParser jsonParser, DeserializationContext context)\n+        throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MjAyNA=="}, "originalCommit": {"oid": "58ad8d93084153973241b5cc54763bdd01dc2808"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 242, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}