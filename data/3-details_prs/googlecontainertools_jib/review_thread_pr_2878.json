{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MzY4Mjc3", "number": 2878, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDoyOTozOVrOE01Qag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzo1MToxOVrOE06tCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODMzOTYyOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDoyOTozOVrOHsxVHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNjoyMTo1NFrOHs2fyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwNzYxNQ==", "bodyText": "I think we should accept this is an ordinary argument, not through an option, e.g., jib ... jar my.jar.", "url": "https://github.com/GoogleContainerTools/jib/pull/2878#discussion_r516707615", "createdAt": "2020-11-03T14:29:39Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.api.Containerizer;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.cli.cli2.logging.CliLogger;\n+import com.google.cloud.tools.jib.cli.jar.JarFiles;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.common.io.MoreFiles;\n+import com.google.common.io.RecursiveDeleteOption;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.Callable;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"jar\", showAtFileInUsageHelp = true, description = \"Containerize a jar\")\n+public class Jar implements Callable<Integer> {\n+  @CommandLine.ParentCommand\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  protected JibCli globalOptions;\n+\n+  @CommandLine.Option(\n+      names = {\"--jar\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a1fce85af6b3f0341c4708c71ffb8b02f8cd56"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc5MjI2Nw==", "bodyText": "Good catch, thanks.", "url": "https://github.com/GoogleContainerTools/jib/pull/2878#discussion_r516792267", "createdAt": "2020-11-03T16:21:54Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.api.Containerizer;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.cli.cli2.logging.CliLogger;\n+import com.google.cloud.tools.jib.cli.jar.JarFiles;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.common.io.MoreFiles;\n+import com.google.common.io.RecursiveDeleteOption;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.Callable;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"jar\", showAtFileInUsageHelp = true, description = \"Containerize a jar\")\n+public class Jar implements Callable<Integer> {\n+  @CommandLine.ParentCommand\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  protected JibCli globalOptions;\n+\n+  @CommandLine.Option(\n+      names = {\"--jar\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwNzYxNQ=="}, "originalCommit": {"oid": "94a1fce85af6b3f0341c4708c71ffb8b02f8cd56"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODM0Mzg1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDozMDozMlrOHsxXyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNjoyMjowNlrOHs2gdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwODI5OA==", "bodyText": "Should also print the exception type. Check Build.java. That said, can we explore a way to share code?", "url": "https://github.com/GoogleContainerTools/jib/pull/2878#discussion_r516708298", "createdAt": "2020-11-03T14:30:32Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.api.Containerizer;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.cli.cli2.logging.CliLogger;\n+import com.google.cloud.tools.jib.cli.jar.JarFiles;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.common.io.MoreFiles;\n+import com.google.common.io.RecursiveDeleteOption;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.Callable;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"jar\", showAtFileInUsageHelp = true, description = \"Containerize a jar\")\n+public class Jar implements Callable<Integer> {\n+  @CommandLine.ParentCommand\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  protected JibCli globalOptions;\n+\n+  @CommandLine.Option(\n+      names = {\"--jar\"},\n+      paramLabel = \"<jar-file>\",\n+      description = \"The path to the jar file (ex: path/to/my-jar.jar)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path jarFile;\n+\n+  /**\n+   * Returns a user configured Path to a jar file.\n+   *\n+   * @return a path to a jar file\n+   */\n+  public Path getJarFile() {\n+    return jarFile;\n+  }\n+\n+  @Override\n+  public Integer call() {\n+    globalOptions.validate();\n+    Path jarFile = getJarFile();\n+    try {\n+      ConsoleLogger logger =\n+          CliLogger.newLogger(globalOptions.getVerbosity(), globalOptions.getConsoleOutput());\n+      if (!Files.exists(jarFile)) {\n+        logger.log(LogEvent.Level.ERROR, \"The file path provided does not exist: \" + jarFile);\n+        return 1;\n+      }\n+      if (Files.isDirectory(jarFile)) {\n+        logger.log(\n+            LogEvent.Level.ERROR,\n+            \"The file path provided is for a directory. Please provide a path to a jar file: \"\n+                + jarFile);\n+        return 1;\n+      }\n+      Containerizer containerizer = Containerizers.from(globalOptions, logger);\n+      JibContainerBuilder containerBuilder =\n+          JarFiles.toJibContainerBuilder(getJarFile(), Paths.get(\"build-artifacts\"));\n+      containerBuilder.containerize(containerizer);\n+      MoreFiles.deleteDirectoryContents(\n+          Paths.get(\"build-artifacts\"), RecursiveDeleteOption.ALLOW_INSECURE);\n+    } catch (Exception ex) {\n+      if (globalOptions.isStacktrace()) {\n+        ex.printStackTrace();\n+      }\n+      System.err.println(ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a1fce85af6b3f0341c4708c71ffb8b02f8cd56"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc3MTQ4Mw==", "bodyText": "Or maybe it's not much worth to share this short block. In any case, let's print the exception type.", "url": "https://github.com/GoogleContainerTools/jib/pull/2878#discussion_r516771483", "createdAt": "2020-11-03T15:53:06Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.api.Containerizer;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.cli.cli2.logging.CliLogger;\n+import com.google.cloud.tools.jib.cli.jar.JarFiles;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.common.io.MoreFiles;\n+import com.google.common.io.RecursiveDeleteOption;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.Callable;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"jar\", showAtFileInUsageHelp = true, description = \"Containerize a jar\")\n+public class Jar implements Callable<Integer> {\n+  @CommandLine.ParentCommand\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  protected JibCli globalOptions;\n+\n+  @CommandLine.Option(\n+      names = {\"--jar\"},\n+      paramLabel = \"<jar-file>\",\n+      description = \"The path to the jar file (ex: path/to/my-jar.jar)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path jarFile;\n+\n+  /**\n+   * Returns a user configured Path to a jar file.\n+   *\n+   * @return a path to a jar file\n+   */\n+  public Path getJarFile() {\n+    return jarFile;\n+  }\n+\n+  @Override\n+  public Integer call() {\n+    globalOptions.validate();\n+    Path jarFile = getJarFile();\n+    try {\n+      ConsoleLogger logger =\n+          CliLogger.newLogger(globalOptions.getVerbosity(), globalOptions.getConsoleOutput());\n+      if (!Files.exists(jarFile)) {\n+        logger.log(LogEvent.Level.ERROR, \"The file path provided does not exist: \" + jarFile);\n+        return 1;\n+      }\n+      if (Files.isDirectory(jarFile)) {\n+        logger.log(\n+            LogEvent.Level.ERROR,\n+            \"The file path provided is for a directory. Please provide a path to a jar file: \"\n+                + jarFile);\n+        return 1;\n+      }\n+      Containerizer containerizer = Containerizers.from(globalOptions, logger);\n+      JibContainerBuilder containerBuilder =\n+          JarFiles.toJibContainerBuilder(getJarFile(), Paths.get(\"build-artifacts\"));\n+      containerBuilder.containerize(containerizer);\n+      MoreFiles.deleteDirectoryContents(\n+          Paths.get(\"build-artifacts\"), RecursiveDeleteOption.ALLOW_INSECURE);\n+    } catch (Exception ex) {\n+      if (globalOptions.isStacktrace()) {\n+        ex.printStackTrace();\n+      }\n+      System.err.println(ex.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwODI5OA=="}, "originalCommit": {"oid": "94a1fce85af6b3f0341c4708c71ffb8b02f8cd56"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc5MjQzOQ==", "bodyText": "Yeah I was trying to see if there was anything more that I could share but that required me to add some logic as to which sub-command we're using since the steps to containerize are a bit different for both. I'll make the exception more consistent with Build.java though.", "url": "https://github.com/GoogleContainerTools/jib/pull/2878#discussion_r516792439", "createdAt": "2020-11-03T16:22:06Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.api.Containerizer;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.cli.cli2.logging.CliLogger;\n+import com.google.cloud.tools.jib.cli.jar.JarFiles;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.common.io.MoreFiles;\n+import com.google.common.io.RecursiveDeleteOption;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.Callable;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"jar\", showAtFileInUsageHelp = true, description = \"Containerize a jar\")\n+public class Jar implements Callable<Integer> {\n+  @CommandLine.ParentCommand\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  protected JibCli globalOptions;\n+\n+  @CommandLine.Option(\n+      names = {\"--jar\"},\n+      paramLabel = \"<jar-file>\",\n+      description = \"The path to the jar file (ex: path/to/my-jar.jar)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path jarFile;\n+\n+  /**\n+   * Returns a user configured Path to a jar file.\n+   *\n+   * @return a path to a jar file\n+   */\n+  public Path getJarFile() {\n+    return jarFile;\n+  }\n+\n+  @Override\n+  public Integer call() {\n+    globalOptions.validate();\n+    Path jarFile = getJarFile();\n+    try {\n+      ConsoleLogger logger =\n+          CliLogger.newLogger(globalOptions.getVerbosity(), globalOptions.getConsoleOutput());\n+      if (!Files.exists(jarFile)) {\n+        logger.log(LogEvent.Level.ERROR, \"The file path provided does not exist: \" + jarFile);\n+        return 1;\n+      }\n+      if (Files.isDirectory(jarFile)) {\n+        logger.log(\n+            LogEvent.Level.ERROR,\n+            \"The file path provided is for a directory. Please provide a path to a jar file: \"\n+                + jarFile);\n+        return 1;\n+      }\n+      Containerizer containerizer = Containerizers.from(globalOptions, logger);\n+      JibContainerBuilder containerBuilder =\n+          JarFiles.toJibContainerBuilder(getJarFile(), Paths.get(\"build-artifacts\"));\n+      containerBuilder.containerize(containerizer);\n+      MoreFiles.deleteDirectoryContents(\n+          Paths.get(\"build-artifacts\"), RecursiveDeleteOption.ALLOW_INSECURE);\n+    } catch (Exception ex) {\n+      if (globalOptions.isStacktrace()) {\n+        ex.printStackTrace();\n+      }\n+      System.err.println(ex.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwODI5OA=="}, "originalCommit": {"oid": "94a1fce85af6b3f0341c4708c71ffb8b02f8cd56"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODkzOTc1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNjozOTozMVrOHs3Q0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNjozOTozMVrOHs3Q0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgwNDgxNg==", "bodyText": "Is this method is required?", "url": "https://github.com/GoogleContainerTools/jib/pull/2878#discussion_r516804816", "createdAt": "2020-11-03T16:39:31Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.api.Containerizer;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.cli.cli2.logging.CliLogger;\n+import com.google.cloud.tools.jib.cli.jar.JarFiles;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.common.io.MoreFiles;\n+import com.google.common.io.RecursiveDeleteOption;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.Callable;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"jar\", showAtFileInUsageHelp = true, description = \"Containerize a jar\")\n+public class Jar implements Callable<Integer> {\n+  @CommandLine.ParentCommand\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  protected JibCli globalOptions;\n+\n+  @CommandLine.Parameters(description = \"The path to the jar file (ex: path/to/my-jar.jar)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path jarFile;\n+\n+  /**\n+   * Returns a user configured Path to a jar file.\n+   *\n+   * @return a path to a jar file\n+   */\n+  public Path getJarFile() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b82ca96f1b1edbab5f98d5ee161e364adf2dfa39"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODk2MDY0OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNjo0NDozN1rOHs3eNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNjo0NDozN1rOHs3eNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgwODI0Ng==", "bodyText": "We need to sort out what we should provide for a temporary staging directory. We may eventually go for a dedicated build output directory, but for now, I think we can provide a system temp directory. Let's talk offline.", "url": "https://github.com/GoogleContainerTools/jib/pull/2878#discussion_r516808246", "createdAt": "2020-11-03T16:44:37Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.api.Containerizer;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.cli.cli2.logging.CliLogger;\n+import com.google.cloud.tools.jib.cli.jar.JarFiles;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.common.io.MoreFiles;\n+import com.google.common.io.RecursiveDeleteOption;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.Callable;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"jar\", showAtFileInUsageHelp = true, description = \"Containerize a jar\")\n+public class Jar implements Callable<Integer> {\n+  @CommandLine.ParentCommand\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  protected JibCli globalOptions;\n+\n+  @CommandLine.Parameters(description = \"The path to the jar file (ex: path/to/my-jar.jar)\")\n+  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n+  private Path jarFile;\n+\n+  /**\n+   * Returns a user configured Path to a jar file.\n+   *\n+   * @return a path to a jar file\n+   */\n+  public Path getJarFile() {\n+    return jarFile;\n+  }\n+\n+  @Override\n+  public Integer call() {\n+    globalOptions.validate();\n+    Path jarFile = getJarFile();\n+    try {\n+      ConsoleLogger logger =\n+          CliLogger.newLogger(globalOptions.getVerbosity(), globalOptions.getConsoleOutput());\n+      if (!Files.exists(jarFile)) {\n+        logger.log(LogEvent.Level.ERROR, \"The file path provided does not exist: \" + jarFile);\n+        return 1;\n+      }\n+      if (Files.isDirectory(jarFile)) {\n+        logger.log(\n+            LogEvent.Level.ERROR,\n+            \"The file path provided is for a directory. Please provide a path to a jar file: \"\n+                + jarFile);\n+        return 1;\n+      }\n+      Containerizer containerizer = Containerizers.from(globalOptions, logger);\n+      JibContainerBuilder containerBuilder =\n+          JarFiles.toJibContainerBuilder(getJarFile(), Paths.get(\"build-artifacts\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b82ca96f1b1edbab5f98d5ee161e364adf2dfa39"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTIzMjExOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzo1MToxOVrOHs6HVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODoyNDo0NVrOHs7SVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg1MTU0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try {\n          \n          \n            \n                try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n          \n      \n    \n    \n  \n\nand remove the field and the finally block.", "url": "https://github.com/GoogleContainerTools/jib/pull/2878#discussion_r516851543", "createdAt": "2020-11-03T17:51:19Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "diffHunk": "@@ -40,22 +38,15 @@\n   @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n   private Path jarFile;\n \n-  /**\n-   * Returns a user configured Path to a jar file.\n-   *\n-   * @return a path to a jar file\n-   */\n-  public Path getJarFile() {\n-    return jarFile;\n-  }\n+  private final TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n \n   @Override\n   public Integer call() {\n     globalOptions.validate();\n-    Path jarFile = getJarFile();\n     try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcb3c6af9c8f71061faf42f61f9a6d1a43e1917f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg3MDc0Mg==", "bodyText": "oh this is much better", "url": "https://github.com/GoogleContainerTools/jib/pull/2878#discussion_r516870742", "createdAt": "2020-11-03T18:24:45Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "diffHunk": "@@ -40,22 +38,15 @@\n   @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n   private Path jarFile;\n \n-  /**\n-   * Returns a user configured Path to a jar file.\n-   *\n-   * @return a path to a jar file\n-   */\n-  public Path getJarFile() {\n-    return jarFile;\n-  }\n+  private final TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n \n   @Override\n   public Integer call() {\n     globalOptions.validate();\n-    Path jarFile = getJarFile();\n     try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg1MTU0Mw=="}, "originalCommit": {"oid": "fcb3c6af9c8f71061faf42f61f9a6d1a43e1917f"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 17, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}