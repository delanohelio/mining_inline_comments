{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0Nzc0NzE5", "number": 2457, "title": "rework main class finding", "bodyText": "Fixes #2456.\nThe logic has changed:\n\n\nmain class explicitly configured (via jib.container.mainClass) but invalid\n\nbefore: attempted to infer a main class under src/.\n\nproblems and weirdness:\n\nnever looked into mainClassFromJar despite checking src/ (inconsistency)\nconfigured jib.container.mainClass ignored if a valid main is found under `src/', no warning at all\n\n\n\n\nafter: error\n\n\n\nmain class not configured, invalid mainClassFromJar, and no or multiple mains found under src/ (i.e., the only main class we could ever get is from the jar-plugin)\n\nbefore: warned mainClassFromJar is invalid, but proceeded with it (this mainClassFromJar used to be called \"backup\" in our tests)\nafter: error\n\n\n\nSo, the case in #2456 falls into 2) with multiple mains, and now Jib will fail while printing\n[WARNING] 'mainClass' configured in 'maven-jar-plugin' is not a valid Java class: ${start-class}\nand\n[ERROR] ... Multiple valid main classes were found: hello.Application, hello.Foo, perhaps you should add a 'mainClass' configuration to jib-maven-plugin\nAs usual, if only one (valid) main is found under src/ while mainClassFromJar is invalid, Jib will continue to use the inferred one rather than mainClassFromJar.", "createdAt": "2020-05-07T15:54:13Z", "url": "https://github.com/GoogleContainerTools/jib/pull/2457", "merged": true, "mergeCommit": {"oid": "e8d0ac39d21b39f5ab602b320e800465eb08fce6"}, "closed": true, "closedAt": "2020-05-07T17:06:38Z", "author": {"login": "chanseokoh"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABce-6BbAH2gAyNDE0Nzc0NzE5OmQxNzY3ZWI3NTU5OWE3MDI4NjBlMWE3MGUxOGVhNWFlNjdmYjY0NjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABce_xhLgH2gAyNDE0Nzc0NzE5OmE2Yjc0OGM1MGQ0YTVjY2JiZTg2ODFmNzVhN2M0OTZkNzU4ZWY4ZDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d1767eb75599a702860e1a70e18ea5ae67fb6465", "author": {"user": {"login": "chanseokoh", "name": "Chanseok Oh"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/d1767eb75599a702860e1a70e18ea5ae67fb6465", "committedDate": "2020-05-07T15:21:18Z", "message": "rework main class finding"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjExMTU5", "url": "https://github.com/GoogleContainerTools/jib/pull/2457#pullrequestreview-407611159", "createdAt": "2020-05-07T15:54:43Z", "commit": {"oid": "d1767eb75599a702860e1a70e18ea5ae67fb6465"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNTo1NDo0NFrOGSFPCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNTo1NDo0NFrOGSFPCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYxMzMyMg==", "bodyText": "Note this is not a new method; nothing changed.", "url": "https://github.com/GoogleContainerTools/jib/pull/2457#discussion_r421613322", "createdAt": "2020-05-07T15:54:44Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/MainClassResolver.java", "diffHunk": "@@ -127,13 +102,29 @@ private static String findMainClassInClassFiles(ProjectProperties projectPropert\n         throw new MainClassInferenceException(\n             HelpfulSuggestions.forMainClassNotFound(\n                 \"Multiple valid main classes were found: \"\n-                    + String.join(\", \", mainClassFinderResult.getFoundMainClasses()),\n+                    + String.join(\", \", result.getFoundMainClasses()),\n                 projectProperties.getPluginName()));\n \n       default:\n         throw new IllegalStateException(\"Cannot reach here\");\n     }\n   }\n \n+  /**\n+   * Checks if a string is a valid Java class name.\n+   *\n+   * @param className the class name to check\n+   * @return {@code true} if {@code className} is a valid Java class name; {@code false} otherwise\n+   */\n+  @VisibleForTesting\n+  static boolean isValidJavaClass(String className) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1767eb75599a702860e1a70e18ea5ae67fb6465"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjIyMTQ4", "url": "https://github.com/GoogleContainerTools/jib/pull/2457#pullrequestreview-407622148", "createdAt": "2020-05-07T16:07:19Z", "commit": {"oid": "d1767eb75599a702860e1a70e18ea5ae67fb6465"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjowNzoxOVrOGSFw8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjowODoyM1rOGSFzpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyMjAwMQ==", "bodyText": "this confused me for a sec, should we rename this to getMainClassFromJarPlugin?", "url": "https://github.com/GoogleContainerTools/jib/pull/2457#discussion_r421622001", "createdAt": "2020-05-07T16:07:19Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/MainClassResolver.java", "diffHunk": "@@ -40,83 +39,59 @@\n    * <p>Warns if main class provided by {@code projectProperties} is not valid, or throws an error\n    * if no valid main class is found.\n    *\n-   * @param mainClass the explicitly configured main class ({@code null} if not configured)\n+   * @param configuredMainClass the explicitly configured main class ({@code null} if not\n+   *     configured)\n    * @param projectProperties properties containing plugin information and help messages\n    * @return the name of the main class to be used for the container entrypoint\n    * @throws MainClassInferenceException if no valid main class is configured or discovered\n    * @throws IOException if getting the class files from {@code projectProperties} fails\n    */\n   public static String resolveMainClass(\n-      @Nullable String mainClass, ProjectProperties projectProperties)\n+      @Nullable String configuredMainClass, ProjectProperties projectProperties)\n       throws MainClassInferenceException, IOException {\n-    // If mainClass is null, try to find via projectProperties.\n-    if (mainClass == null) {\n-      mainClass = getMainClassFromJar(projectProperties);\n-    }\n-\n-    // If mainClass is still null, try to search in class files.\n-    if (mainClass == null) {\n-      mainClass = findMainClassInClassFiles(projectProperties);\n-\n-    } else if (!isValidJavaClass(mainClass)) {\n-      // If mainClass found in projectProperties is not valid, try to search in class files, but\n-      // don't error if not found in class files.\n-      try {\n-        mainClass = findMainClassInClassFiles(projectProperties);\n-\n-      } catch (MainClassInferenceException ignored) {\n-        // Fallback to using the mainClass found in projectProperties.\n-      }\n-    }\n-\n-    Preconditions.checkNotNull(mainClass);\n-    if (!isValidJavaClass(mainClass)) {\n-      projectProperties.log(LogEvent.warn(\"'mainClass' is not a valid Java class : \" + mainClass));\n-    }\n-\n-    return mainClass;\n-  }\n-\n-  /**\n-   * Checks if a string is a valid Java class name.\n-   *\n-   * @param className the class name to check\n-   * @return {@code true} if {@code className} is a valid Java class name; {@code false} otherwise\n-   */\n-  @VisibleForTesting\n-  static boolean isValidJavaClass(String className) {\n-    for (String part : Splitter.on('.').split(className)) {\n-      if (!SourceVersion.isIdentifier(part)) {\n-        return false;\n+    if (configuredMainClass != null) {\n+      if (isValidJavaClass(configuredMainClass)) {\n+        return configuredMainClass;\n       }\n+      throw new MainClassInferenceException(\n+          HelpfulSuggestions.forMainClassNotFound(\n+              \"'mainClass' configured in \"\n+                  + projectProperties.getPluginName()\n+                  + \" is not a valid Java class: \"\n+                  + configuredMainClass,\n+              projectProperties.getPluginName()));\n     }\n-    return true;\n-  }\n \n-  @Nullable\n-  private static String getMainClassFromJar(ProjectProperties projectProperties) {\n     projectProperties.log(\n         LogEvent.info(\n             \"Searching for main class... Add a 'mainClass' configuration to '\"\n                 + projectProperties.getPluginName()\n                 + \"' to improve build speed.\"));\n-    return projectProperties.getMainClassFromJar();\n-  }\n \n-  private static String findMainClassInClassFiles(ProjectProperties projectProperties)\n-      throws MainClassInferenceException, IOException {\n+    String mainClassFromJar = projectProperties.getMainClassFromJar();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1767eb75599a702860e1a70e18ea5ae67fb6465"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyMjY5NA==", "bodyText": "I actually found mainClassFinderResult to be easier to read/follow. But no strong feelings here.", "url": "https://github.com/GoogleContainerTools/jib/pull/2457#discussion_r421622694", "createdAt": "2020-05-07T16:08:23Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/MainClassResolver.java", "diffHunk": "@@ -40,83 +39,59 @@\n    * <p>Warns if main class provided by {@code projectProperties} is not valid, or throws an error\n    * if no valid main class is found.\n    *\n-   * @param mainClass the explicitly configured main class ({@code null} if not configured)\n+   * @param configuredMainClass the explicitly configured main class ({@code null} if not\n+   *     configured)\n    * @param projectProperties properties containing plugin information and help messages\n    * @return the name of the main class to be used for the container entrypoint\n    * @throws MainClassInferenceException if no valid main class is configured or discovered\n    * @throws IOException if getting the class files from {@code projectProperties} fails\n    */\n   public static String resolveMainClass(\n-      @Nullable String mainClass, ProjectProperties projectProperties)\n+      @Nullable String configuredMainClass, ProjectProperties projectProperties)\n       throws MainClassInferenceException, IOException {\n-    // If mainClass is null, try to find via projectProperties.\n-    if (mainClass == null) {\n-      mainClass = getMainClassFromJar(projectProperties);\n-    }\n-\n-    // If mainClass is still null, try to search in class files.\n-    if (mainClass == null) {\n-      mainClass = findMainClassInClassFiles(projectProperties);\n-\n-    } else if (!isValidJavaClass(mainClass)) {\n-      // If mainClass found in projectProperties is not valid, try to search in class files, but\n-      // don't error if not found in class files.\n-      try {\n-        mainClass = findMainClassInClassFiles(projectProperties);\n-\n-      } catch (MainClassInferenceException ignored) {\n-        // Fallback to using the mainClass found in projectProperties.\n-      }\n-    }\n-\n-    Preconditions.checkNotNull(mainClass);\n-    if (!isValidJavaClass(mainClass)) {\n-      projectProperties.log(LogEvent.warn(\"'mainClass' is not a valid Java class : \" + mainClass));\n-    }\n-\n-    return mainClass;\n-  }\n-\n-  /**\n-   * Checks if a string is a valid Java class name.\n-   *\n-   * @param className the class name to check\n-   * @return {@code true} if {@code className} is a valid Java class name; {@code false} otherwise\n-   */\n-  @VisibleForTesting\n-  static boolean isValidJavaClass(String className) {\n-    for (String part : Splitter.on('.').split(className)) {\n-      if (!SourceVersion.isIdentifier(part)) {\n-        return false;\n+    if (configuredMainClass != null) {\n+      if (isValidJavaClass(configuredMainClass)) {\n+        return configuredMainClass;\n       }\n+      throw new MainClassInferenceException(\n+          HelpfulSuggestions.forMainClassNotFound(\n+              \"'mainClass' configured in \"\n+                  + projectProperties.getPluginName()\n+                  + \" is not a valid Java class: \"\n+                  + configuredMainClass,\n+              projectProperties.getPluginName()));\n     }\n-    return true;\n-  }\n \n-  @Nullable\n-  private static String getMainClassFromJar(ProjectProperties projectProperties) {\n     projectProperties.log(\n         LogEvent.info(\n             \"Searching for main class... Add a 'mainClass' configuration to '\"\n                 + projectProperties.getPluginName()\n                 + \"' to improve build speed.\"));\n-    return projectProperties.getMainClassFromJar();\n-  }\n \n-  private static String findMainClassInClassFiles(ProjectProperties projectProperties)\n-      throws MainClassInferenceException, IOException {\n+    String mainClassFromJar = projectProperties.getMainClassFromJar();\n+    if (mainClassFromJar != null && isValidJavaClass(mainClassFromJar)) {\n+      return mainClassFromJar;\n+    }\n+\n+    if (mainClassFromJar != null) {\n+      projectProperties.log(\n+          LogEvent.warn(\n+              \"'mainClass' configured in \"\n+                  + projectProperties.getJarPluginName()\n+                  + \" is not a valid Java class: \"\n+                  + mainClassFromJar));\n+    }\n     projectProperties.log(\n-        LogEvent.debug(\n-            \"Could not find a valid main class specified in \"\n+        LogEvent.info(\n+            \"Could not find a valid main class from \"\n                 + projectProperties.getJarPluginName()\n-                + \"; attempting to infer main class.\"));\n+                + \"; looking into all class files to infer main class.\"));\n \n-    MainClassFinder.Result mainClassFinderResult =\n+    MainClassFinder.Result result =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1767eb75599a702860e1a70e18ea5ae67fb6465"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b490ffeea7847daf3d25a9fdf6b78ae7cd40b22", "author": {"user": {"login": "chanseokoh", "name": "Chanseok Oh"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/7b490ffeea7847daf3d25a9fdf6b78ae7cd40b22", "committedDate": "2020-05-07T16:12:24Z", "message": "FromJar --> FromJarPlugin, result --> mainClassFinderResult"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbb5d41542385285011bb32f8939cfd48bb5fe3e", "author": {"user": {"login": "chanseokoh", "name": "Chanseok Oh"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/cbb5d41542385285011bb32f8939cfd48bb5fe3e", "committedDate": "2020-05-07T16:17:22Z", "message": "oops, incomplete IDE refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6b748c50d4a5ccbbe8681f75a7c496d758ef8d0", "author": {"user": {"login": "chanseokoh", "name": "Chanseok Oh"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/a6b748c50d4a5ccbbe8681f75a7c496d758ef8d0", "committedDate": "2020-05-07T16:21:55Z", "message": "CHANGELOG"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 237, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}