{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzODMzNDUy", "number": 2926, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDoyNjo1MFrOFClI5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo0Njo0NVrOFGQrvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjQ5OTU3OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDoyNjo1MFrOIB0rIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTo0MzoxNFrOICbUng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4MjQ5OA==", "bodyText": "How are these spring boot jars constructed? They don't seem like an actual jar built from a Spring Boot project. (Usually it runs a server listening on port 8080).", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r538782498", "createdAt": "2020-12-08T20:26:50Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -142,6 +142,39 @@ public void testNoDependencyJar_packagedMode_toDocker()\n     }\n   }\n \n+  @Test\n+  public void testSpringbootLayeredJar_explodedMode_toDocker()\n+      throws IOException, InterruptedException, URISyntaxException {\n+    Path jarPath =\n+        Paths.get(Resources.getResource(\"jarTest/springboot/springboot_layered.jar\").toURI());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f4389cde1eb70adb9cb79602dd2a474c069dc"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg3NDEwMA==", "bodyText": "Great question! To create the jars, I downloaded the demo project from https://start.spring.io/ and ran ./mvnw package. Although, I just realized that I'm currently asserting on System.out instead of actually testing if the desired output shows up on localhost:8080 after having run SpringApplication.run() -- which is probably not a sign of a good test for a spring boot application. I'll correct this.", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r538874100", "createdAt": "2020-12-08T23:02:50Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -142,6 +142,39 @@ public void testNoDependencyJar_packagedMode_toDocker()\n     }\n   }\n \n+  @Test\n+  public void testSpringbootLayeredJar_explodedMode_toDocker()\n+      throws IOException, InterruptedException, URISyntaxException {\n+    Path jarPath =\n+        Paths.get(Resources.getResource(\"jarTest/springboot/springboot_layered.jar\").toURI());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4MjQ5OA=="}, "originalCommit": {"oid": "a56f4389cde1eb70adb9cb79602dd2a474c069dc"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxNTcxMA==", "bodyText": "Hmm... yeah. It looked weird that a Spring Boot app prints Hello World and quits. Do the tests actually pass?\nWe have similar Spring Boot integration tests, For example, take a look at\nhttps://github.com/GoogleContainerTools/jib/blob/master/jib-gradle-plugin/src/integration-test/java/com/google/cloud/tools/jib/gradle/SpringBootProjectIntegrationTest.java", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r539415710", "createdAt": "2020-12-09T15:43:14Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -142,6 +142,39 @@ public void testNoDependencyJar_packagedMode_toDocker()\n     }\n   }\n \n+  @Test\n+  public void testSpringbootLayeredJar_explodedMode_toDocker()\n+      throws IOException, InterruptedException, URISyntaxException {\n+    Path jarPath =\n+        Paths.get(Resources.getResource(\"jarTest/springboot/springboot_layered.jar\").toURI());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4MjQ5OA=="}, "originalCommit": {"oid": "a56f4389cde1eb70adb9cb79602dd2a474c069dc"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTA0NDcwOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTozODoyM1rOIHLfvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzoyNDo1MFrOIHQo0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5OTI5NQ==", "bodyText": "Hmm... I'm curious. Does it not work without toAbsolutePath()?", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r544399295", "createdAt": "2020-12-16T15:38:23Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -154,4 +167,71 @@ public void testJar_unknownMode() {\n         .contains(\n             \"Invalid value for option '--mode': expected one of [exploded, packaged] (case-sensitive) but was 'unknown'\");\n   }\n+\n+  @Test\n+  public void testSpringBootLayeredJar_explodedMode() throws IOException, InterruptedException {\n+    springBootProjectLayered.build(\"clean\", \"bootJar\");\n+    Path jarParentPath =\n+        springBootProjectLayered.getProjectRoot().toAbsolutePath().resolve(\"build\").resolve(\"libs\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced0108595b0c204de0e8f285ff9ac3e7e6200ed"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ4MzUzOQ==", "bodyText": "Ah good catch. toAbsolutePath() doesn't make a difference", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r544483539", "createdAt": "2020-12-16T17:24:50Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -154,4 +167,71 @@ public void testJar_unknownMode() {\n         .contains(\n             \"Invalid value for option '--mode': expected one of [exploded, packaged] (case-sensitive) but was 'unknown'\");\n   }\n+\n+  @Test\n+  public void testSpringBootLayeredJar_explodedMode() throws IOException, InterruptedException {\n+    springBootProjectLayered.build(\"clean\", \"bootJar\");\n+    Path jarParentPath =\n+        springBootProjectLayered.getProjectRoot().toAbsolutePath().resolve(\"build\").resolve(\"libs\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5OTI5NQ=="}, "originalCommit": {"oid": "ced0108595b0c204de0e8f285ff9ac3e7e6200ed"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTA1Nzc1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo0MDo0MlrOIHLnIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo0MDo0MlrOIHLnIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwMTE4Nw==", "bodyText": "This will not run if one of the assertions above fail or some code throws an exception. Put it in finally, or @After public tearDown() as done in other tests.", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r544401187", "createdAt": "2020-12-16T15:40:42Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -154,4 +167,71 @@ public void testJar_unknownMode() {\n         .contains(\n             \"Invalid value for option '--mode': expected one of [exploded, packaged] (case-sensitive) but was 'unknown'\");\n   }\n+\n+  @Test\n+  public void testSpringBootLayeredJar_explodedMode() throws IOException, InterruptedException {\n+    springBootProjectLayered.build(\"clean\", \"bootJar\");\n+    Path jarParentPath =\n+        springBootProjectLayered.getProjectRoot().toAbsolutePath().resolve(\"build\").resolve(\"libs\");\n+    Path jarPath = jarParentPath.resolve(\"spring-boot-layered.jar\");\n+\n+    Integer exitCode =\n+        new CommandLine(new JibCli())\n+            .execute(\"jar\", \"--target\", \"docker://spring-boot-jar-layered\", jarPath.toString());\n+    String output =\n+        new Command(\"docker\", \"run\", \"--rm\", \"--detach\", \"-p8080:8080\", \"spring-boot-jar-layered\")\n+            .run();\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      assertThat(jarFile.getEntry(\"BOOT-INF/layers.idx\")).isNotNull();\n+      assertThat(getContent(new URL(\"http://localhost:8080\"))).isEqualTo(\"Hello world\");\n+      assertThat(exitCode).isEqualTo(0);\n+\n+      new Command(\"docker\", \"stop\", output.trim()).run();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced0108595b0c204de0e8f285ff9ac3e7e6200ed"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTA2NzQ1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo0MjoyMlrOIHLs4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo0MjoyMlrOIHLs4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwMjY1Ng==", "bodyText": "Nit: I'd put this before docker run so that you don't run docker run if jib jar fails for some reason.", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r544402656", "createdAt": "2020-12-16T15:42:22Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -154,4 +167,71 @@ public void testJar_unknownMode() {\n         .contains(\n             \"Invalid value for option '--mode': expected one of [exploded, packaged] (case-sensitive) but was 'unknown'\");\n   }\n+\n+  @Test\n+  public void testSpringBootLayeredJar_explodedMode() throws IOException, InterruptedException {\n+    springBootProjectLayered.build(\"clean\", \"bootJar\");\n+    Path jarParentPath =\n+        springBootProjectLayered.getProjectRoot().toAbsolutePath().resolve(\"build\").resolve(\"libs\");\n+    Path jarPath = jarParentPath.resolve(\"spring-boot-layered.jar\");\n+\n+    Integer exitCode =\n+        new CommandLine(new JibCli())\n+            .execute(\"jar\", \"--target\", \"docker://spring-boot-jar-layered\", jarPath.toString());\n+    String output =\n+        new Command(\"docker\", \"run\", \"--rm\", \"--detach\", \"-p8080:8080\", \"spring-boot-jar-layered\")\n+            .run();\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      assertThat(jarFile.getEntry(\"BOOT-INF/layers.idx\")).isNotNull();\n+      assertThat(getContent(new URL(\"http://localhost:8080\"))).isEqualTo(\"Hello world\");\n+      assertThat(exitCode).isEqualTo(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced0108595b0c204de0e8f285ff9ac3e7e6200ed"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTA3MDIxOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo0Mjo0OFrOIHLuVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo0Mjo0OFrOIHLuVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwMzAyOQ==", "bodyText": "private", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r544403029", "createdAt": "2020-12-16T15:42:48Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -154,4 +167,71 @@ public void testJar_unknownMode() {\n         .contains(\n             \"Invalid value for option '--mode': expected one of [exploded, packaged] (case-sensitive) but was 'unknown'\");\n   }\n+\n+  @Test\n+  public void testSpringBootLayeredJar_explodedMode() throws IOException, InterruptedException {\n+    springBootProjectLayered.build(\"clean\", \"bootJar\");\n+    Path jarParentPath =\n+        springBootProjectLayered.getProjectRoot().toAbsolutePath().resolve(\"build\").resolve(\"libs\");\n+    Path jarPath = jarParentPath.resolve(\"spring-boot-layered.jar\");\n+\n+    Integer exitCode =\n+        new CommandLine(new JibCli())\n+            .execute(\"jar\", \"--target\", \"docker://spring-boot-jar-layered\", jarPath.toString());\n+    String output =\n+        new Command(\"docker\", \"run\", \"--rm\", \"--detach\", \"-p8080:8080\", \"spring-boot-jar-layered\")\n+            .run();\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      assertThat(jarFile.getEntry(\"BOOT-INF/layers.idx\")).isNotNull();\n+      assertThat(getContent(new URL(\"http://localhost:8080\"))).isEqualTo(\"Hello world\");\n+      assertThat(exitCode).isEqualTo(0);\n+\n+      new Command(\"docker\", \"stop\", output.trim()).run();\n+    }\n+  }\n+\n+  @Test\n+  public void testSpringBootNonLayeredJar_explodedMode() throws IOException, InterruptedException {\n+    springBootProjectNonLayered.build(\"clean\", \"bootJar\");\n+    Path jarParentPath =\n+        springBootProjectNonLayered\n+            .getProjectRoot()\n+            .toAbsolutePath()\n+            .resolve(\"build\")\n+            .resolve(\"libs\");\n+    Path jarPath = jarParentPath.resolve(\"spring-boot-nonlayered.jar\");\n+\n+    Integer exitCode =\n+        new CommandLine(new JibCli())\n+            .execute(\"jar\", \"--target\", \"docker://spring-boot-jar\", jarPath.toString());\n+    String output =\n+        new Command(\"docker\", \"run\", \"--rm\", \"--detach\", \"-p8080:8080\", \"spring-boot-jar\").run();\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      assertThat(jarFile.getEntry(\"BOOT-INF/layers.idx\")).isNull();\n+      assertThat(getContent(new URL(\"http://localhost:8080\"))).isEqualTo(\"Hello world\");\n+      assertThat(exitCode).isEqualTo(0);\n+\n+      new Command(\"docker\", \"stop\", output.trim()).run();\n+    }\n+  }\n+\n+  @Nullable\n+  static String getContent(URL url) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced0108595b0c204de0e8f285ff9ac3e7e6200ed"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTA3NDYxOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/TestProject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo0MzozOFrOIHLxGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo0MzozOFrOIHLxGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwMzczNw==", "bodyText": "final", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r544403737", "createdAt": "2020-12-16T15:43:38Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/TestProject.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.filesystem.DirectoryWalker;\n+import com.google.common.io.Resources;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.gradle.testkit.runner.BuildResult;\n+import org.gradle.testkit.runner.GradleRunner;\n+import org.gradle.util.GradleVersion;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class TestProject extends TemporaryFolder implements Closeable {\n+\n+  private static final String PROJECTS_PATH_IN_RESOURCES = \"jarTest/spring-boot/\";\n+\n+  /** Copies test project {@code projectName} to {@code destination} folder. */\n+  private static void copyProject(String projectName, Path destination)\n+      throws IOException, URISyntaxException {\n+    Path projectPathInResources =\n+        Paths.get(Resources.getResource(PROJECTS_PATH_IN_RESOURCES + projectName).toURI());\n+    new DirectoryWalker(projectPathInResources)\n+        .filterRoot()\n+        .walk(\n+            path -> {\n+              // Creates the same path in the destDir.\n+              Path destPath = destination.resolve(projectPathInResources.relativize(path));\n+              if (Files.isDirectory(path)) {\n+                Files.createDirectory(destPath);\n+              } else {\n+                Files.copy(path, destPath);\n+              }\n+            });\n+  }\n+\n+  private final String testProjectName;\n+  private String gradleVersion = GradleVersion.version(\"5.6.4\").getVersion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced0108595b0c204de0e8f285ff9ac3e7e6200ed"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTA5MTE5OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/TestProject.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo0Njo0NVrOIHL7Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo0Njo0NVrOIHL7Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwNjI5NQ==", "bodyText": "I wish we had a way to share test utility classes across all projects. But let's not try to resolve this in this PR.\n@loosebazooka", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r544406295", "createdAt": "2020-12-16T15:46:45Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/TestProject.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.filesystem.DirectoryWalker;\n+import com.google.common.io.Resources;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.gradle.testkit.runner.BuildResult;\n+import org.gradle.testkit.runner.GradleRunner;\n+import org.gradle.util.GradleVersion;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class TestProject extends TemporaryFolder implements Closeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced0108595b0c204de0e8f285ff9ac3e7e6200ed"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 53, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}