{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MTkyNzA1", "number": 2965, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxODo0MToxM1rOFJmGFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTo0MTo0M1rOFKKIbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjA1NjUyOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxODo0MToxM1rOIL_sYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxODo0MToxM1rOIL_sYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ0ODgwMg==", "bodyText": "Unfortunately had to modify createLayers() and computeEntrypoint() to no longer accept parameters for the sake of consistency. In the case of createLayers(), while explode mode requires a temporary directory, packaged mode doesn't. On the other hand, computeEntrypoint() for spring-boot exploded doesn't require the jarPath but the same for spring-boot packaged does. The jarPath and temporaryDirectory now need to be set with the help of setters.", "url": "https://github.com/GoogleContainerTools/jib/pull/2965#discussion_r549448802", "createdAt": "2020-12-28T18:41:13Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -16,431 +16,28 @@\n \n package com.google.cloud.tools.jib.cli.jar;\n \n-import com.google.cloud.tools.jib.ProjectInfo;\n-import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n-import com.google.cloud.tools.jib.filesystem.DirectoryWalker;\n-import com.google.cloud.tools.jib.plugins.common.ZipUtil;\n-import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.base.Predicates;\n-import com.google.common.base.Splitter;\n-import com.google.common.base.Verify;\n import com.google.common.collect.ImmutableList;\n import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n import java.util.List;\n-import java.util.Map;\n-import java.util.function.Predicate;\n-import java.util.jar.Attributes;\n-import java.util.jar.JarFile;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n-import java.util.zip.ZipEntry;\n \n-/** Process jar file contents and create layers. */\n-public class JarModeProcessor {\n-\n-  private static final AbsoluteUnixPath APP_ROOT = AbsoluteUnixPath.get(\"/app\");\n-  private static final String JAR = \"jar\";\n-  private static final String CLASSES = \"classes\";\n-  private static final String RESOURCES = \"resources\";\n-  private static final String DEPENDENCIES = \"dependencies\";\n-  private static final String SNAPSHOT_DEPENDENCIES = \"snapshot dependencies\";\n-\n-  /**\n-   * Jar Type.\n-   *\n-   * <ul>\n-   *   <li>{@code STANDARD} a regular jar.\n-   *   <li>{@code SPRING_BOOT} a spring boot fat jar.\n-   * </ul>\n-   */\n-  public enum JarType {\n-    STANDARD,\n-    SPRING_BOOT\n-  }\n-\n-  /**\n-   * Determines whether the jar is a spring boot or standard jar.\n-   *\n-   * @param jarPath path to the jar\n-   * @return the jar type\n-   * @throws IOException if I/O error occurs when opening the file\n-   */\n-  @VisibleForTesting\n-  static JarType determineJarType(Path jarPath) throws IOException {\n-    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n-      if (jarFile.getEntry(\"BOOT-INF\") != null) {\n-        return JarType.SPRING_BOOT;\n-      }\n-      return JarType.STANDARD;\n-    }\n-  }\n-\n-  /**\n-   * Creates layers for dependencies, snapshot dependencies, resources and classes on container for\n-   * a standard jar.\n-   *\n-   * @param jarPath path to jar file\n-   * @param tempDirPath path to temporary jib local directory\n-   * @return list of {@link FileEntriesLayer}\n-   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n-   *     provided doesn't exist\n-   */\n-  static List<FileEntriesLayer> createLayersForExplodedStandard(Path jarPath, Path tempDirPath)\n-      throws IOException {\n-    // Add dependencies layers.\n-    List<FileEntriesLayer> layers = getDependenciesLayers(jarPath, ProcessingMode.exploded);\n-\n-    // Determine class and resource files in the directory containing jar contents and create\n-    // FileEntriesLayer for each type of layer (classes or resources), while maintaining the\n-    // file's original project structure.\n-    Path localExplodedJarRoot = tempDirPath;\n-    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n-    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n-    Predicate<Path> isResourceFile = isClassFile.negate().and(Files::isRegularFile);\n-    FileEntriesLayer classesLayer =\n-        addDirectoryContentsToLayer(\n-            CLASSES, localExplodedJarRoot, isClassFile, APP_ROOT.resolve(\"explodedJar\"));\n-    FileEntriesLayer resourcesLayer =\n-        addDirectoryContentsToLayer(\n-            RESOURCES, localExplodedJarRoot, isResourceFile, APP_ROOT.resolve(\"explodedJar\"));\n-\n-    if (!resourcesLayer.getEntries().isEmpty()) {\n-      layers.add(resourcesLayer);\n-    }\n-    if (!classesLayer.getEntries().isEmpty()) {\n-      layers.add(classesLayer);\n-    }\n-    return layers;\n-  }\n-\n-  /**\n-   * Creates layers for dependencies, snapshot dependencies and the jar itself on container for a\n-   * standard jar.\n-   *\n-   * @param jarPath path to jar file\n-   * @return list of {@link FileEntriesLayer}\n-   * @throws IOException if I/O error occurs when opening the jar file\n-   */\n-  static List<FileEntriesLayer> createLayersForPackagedStandard(Path jarPath) throws IOException {\n-    // Add dependencies layers.\n-    List<FileEntriesLayer> layers = getDependenciesLayers(jarPath, ProcessingMode.packaged);\n-\n-    // Add layer for jar.\n-    FileEntriesLayer jarLayer =\n-        FileEntriesLayer.builder()\n-            .setName(JAR)\n-            .addEntry(jarPath, APP_ROOT.resolve(jarPath.getFileName()))\n-            .build();\n-    layers.add(jarLayer);\n-\n-    return layers;\n-  }\n+/** Interface to create layers and compute entrypoint from jar file contents. */\n+public interface JarModeProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e2f1167f72e078fecc6f425b5828364d69f183"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjM5NDEwOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/Jar.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMTo0NjoxN1rOIMCmWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNzowMzo0MlrOIMT3KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5NjQxMA==", "bodyText": "I like the direction of this. But instead of JarProcessorHelper returning a type, perhaps it could return a JarProcessor instance?\nsomething where the code might end up looking like:\nJarProcessor processor = JarProcessors.for(jarFile, temporaryDirectoryProvider)\ncontainerBuilder = JarFiles.toJibContainerBuilder(processor)\n...", "url": "https://github.com/GoogleContainerTools/jib/pull/2965#discussion_r549496410", "createdAt": "2020-12-28T21:46:17Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/Jar.java", "diffHunk": "@@ -95,13 +100,33 @@ public Integer call() {\n         return 1;\n       }\n \n+      JarProcessorHelper.JarType jarType = JarProcessorHelper.determineJarType(jarFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e2f1167f72e078fecc6f425b5828364d69f183"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUwMjM1OQ==", "bodyText": "Ah that's an interesting idea. Would that mean moving all this logic to JarProcessorHelper and making it return a JarModeProcessor instance?", "url": "https://github.com/GoogleContainerTools/jib/pull/2965#discussion_r549502359", "createdAt": "2020-12-28T22:10:20Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/Jar.java", "diffHunk": "@@ -95,13 +100,33 @@ public Integer call() {\n         return 1;\n       }\n \n+      JarProcessorHelper.JarType jarType = JarProcessorHelper.determineJarType(jarFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5NjQxMA=="}, "originalCommit": {"oid": "42e2f1167f72e078fecc6f425b5828364d69f183"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUxMDk1NA==", "bodyText": "I think so, you may not need the \"type\" enum anymore?", "url": "https://github.com/GoogleContainerTools/jib/pull/2965#discussion_r549510954", "createdAt": "2020-12-28T22:53:47Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/Jar.java", "diffHunk": "@@ -95,13 +100,33 @@ public Integer call() {\n         return 1;\n       }\n \n+      JarProcessorHelper.JarType jarType = JarProcessorHelper.determineJarType(jarFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5NjQxMA=="}, "originalCommit": {"oid": "42e2f1167f72e078fecc6f425b5828364d69f183"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUzMTc3NQ==", "bodyText": "I like the idea of moving all the logic out of Jar. I'm just not sure about having it in JarModeProcessorHelper since it is supposed to contain only redundant code for the JarModeProcessor? That being said, it was probably a mistake to have it contain determineJarType at all. How does creating a separate class for this sound?", "url": "https://github.com/GoogleContainerTools/jib/pull/2965#discussion_r549531775", "createdAt": "2020-12-29T00:57:43Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/Jar.java", "diffHunk": "@@ -95,13 +100,33 @@ public Integer call() {\n         return 1;\n       }\n \n+      JarProcessorHelper.JarType jarType = JarProcessorHelper.determineJarType(jarFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5NjQxMA=="}, "originalCommit": {"oid": "42e2f1167f72e078fecc6f425b5828364d69f183"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUzNzQ3Mg==", "bodyText": "Yeah sure.\nThese are just my ideas, but I think something along these lines could work?\nJarProcessors -> has static method for JarProcessor creation from\nRemove Mode from most names since we're not exposing that anymore\nJarModeProcessor -- rename --> JarProcessor\nStandardPackagedModeProcessor -> StandardPackagedJarProcessor... etc?\nJarProcessorHelper is kind of a strange name because it doesn't truly say what it is doing (which is the trap that we often fall into when writing helpers), perhaps it could be called JarLayers or something?", "url": "https://github.com/GoogleContainerTools/jib/pull/2965#discussion_r549537472", "createdAt": "2020-12-29T01:34:58Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/Jar.java", "diffHunk": "@@ -95,13 +100,33 @@ public Integer call() {\n         return 1;\n       }\n \n+      JarProcessorHelper.JarType jarType = JarProcessorHelper.determineJarType(jarFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5NjQxMA=="}, "originalCommit": {"oid": "42e2f1167f72e078fecc6f425b5828364d69f183"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2OTUzNQ==", "bodyText": "Yes that's a good idea. JarProcessors may sometimes be mistaken for JarProcessor. I'm still struggling to find a fitting name but what do you think of JarProcessorSelector?\n\nJarProcessorHelper is kind of a strange name because it doesn't truly say what it is doing (which is the trap that we often fall into when writing helpers), perhaps it could be called JarLayers or something?\n\nJarLayers is an accurate name, thank you! It describes the intent of the class pretty well.", "url": "https://github.com/GoogleContainerTools/jib/pull/2965#discussion_r549769535", "createdAt": "2020-12-29T16:34:52Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/Jar.java", "diffHunk": "@@ -95,13 +100,33 @@ public Integer call() {\n         return 1;\n       }\n \n+      JarProcessorHelper.JarType jarType = JarProcessorHelper.determineJarType(jarFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5NjQxMA=="}, "originalCommit": {"oid": "42e2f1167f72e078fecc6f425b5828364d69f183"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc3MDYyMA==", "bodyText": "The name JarProcessors is a pretty common pattern in java, Path and Paths for example, and we also use it all over the place in Jib. I'm not too concerned with any confusion there.", "url": "https://github.com/GoogleContainerTools/jib/pull/2965#discussion_r549770620", "createdAt": "2020-12-29T16:38:07Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/Jar.java", "diffHunk": "@@ -95,13 +100,33 @@ public Integer call() {\n         return 1;\n       }\n \n+      JarProcessorHelper.JarType jarType = JarProcessorHelper.determineJarType(jarFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5NjQxMA=="}, "originalCommit": {"oid": "42e2f1167f72e078fecc6f425b5828364d69f183"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc3OTI0MA==", "bodyText": "Ok that's reassuring, thanks!", "url": "https://github.com/GoogleContainerTools/jib/pull/2965#discussion_r549779240", "createdAt": "2020-12-29T17:03:42Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/Jar.java", "diffHunk": "@@ -95,13 +100,33 @@ public Integer call() {\n         return 1;\n       }\n \n+      JarProcessorHelper.JarType jarType = JarProcessorHelper.determineJarType(jarFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5NjQxMA=="}, "originalCommit": {"oid": "42e2f1167f72e078fecc6f425b5828364d69f183"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjcwNTQyOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessorHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMTozNToyOFrOIMFHCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMTozNToyOFrOIMFHCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUzNzU0Nw==", "bodyText": "could this be called getDirectoryContentsAsLayer or something?", "url": "https://github.com/GoogleContainerTools/jib/pull/2965#discussion_r549537547", "createdAt": "2020-12-29T01:35:28Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessorHelper.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.jar;\n+\n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.filesystem.DirectoryWalker;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Splitter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarFile;\n+import java.util.stream.Collectors;\n+\n+public class JarProcessorHelper {\n+\n+  static final AbsoluteUnixPath APP_ROOT = AbsoluteUnixPath.get(\"/app\");\n+  static final String JAR = \"jar\";\n+  static final String CLASSES = \"classes\";\n+  static final String RESOURCES = \"resources\";\n+  static final String DEPENDENCIES = \"dependencies\";\n+  static final String SNAPSHOT_DEPENDENCIES = \"snapshot dependencies\";\n+\n+  /**\n+   * Jar Type.\n+   *\n+   * <ul>\n+   *   <li>{@code STANDARD} a regular jar.\n+   *   <li>{@code SPRING_BOOT} a spring boot fat jar.\n+   * </ul>\n+   */\n+  public enum JarType {\n+    STANDARD,\n+    SPRING_BOOT\n+  }\n+\n+  /**\n+   * Determines whether the jar is a spring boot or standard jar.\n+   *\n+   * @param jarPath path to the jar\n+   * @return the jar type\n+   * @throws IOException if I/O error occurs when opening the file\n+   */\n+  @VisibleForTesting\n+  public static JarType determineJarType(Path jarPath) throws IOException {\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      if (jarFile.getEntry(\"BOOT-INF\") != null) {\n+        return JarType.SPRING_BOOT;\n+      }\n+      return JarType.STANDARD;\n+    }\n+  }\n+\n+  static List<FileEntriesLayer> getDependenciesLayers(Path jarPath, ProcessingMode mode)\n+      throws IOException {\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n+    // and snapshot dependencies. If Class-Path is not present in the JAR's manifest then skip\n+    // adding the dependencies layers.\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      String classPath =\n+          jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+      if (classPath == null) {\n+        return new ArrayList<>();\n+      }\n+      List<FileEntriesLayer> layers = new ArrayList<>();\n+      Path jarParent = jarPath.getParent() == null ? Paths.get(\"\") : jarPath.getParent();\n+      Predicate<String> isSnapshot = name -> name.contains(\"SNAPSHOT\");\n+      List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n+      List<Path> nonSnapshots =\n+          allDependencies\n+              .stream()\n+              .filter(isSnapshot.negate())\n+              .map(Paths::get)\n+              .collect(Collectors.toList());\n+      List<Path> snapshots =\n+          allDependencies.stream().filter(isSnapshot).map(Paths::get).collect(Collectors.toList());\n+      if (!nonSnapshots.isEmpty()) {\n+        FileEntriesLayer.Builder nonSnapshotLayer =\n+            FileEntriesLayer.builder().setName(DEPENDENCIES);\n+        nonSnapshots.forEach(\n+            path ->\n+                addDependency(\n+                    nonSnapshotLayer,\n+                    jarParent.resolve(path),\n+                    mode.equals(ProcessingMode.packaged)\n+                        ? APP_ROOT.resolve(path)\n+                        : APP_ROOT.resolve(DEPENDENCIES).resolve(path.getFileName())));\n+        layers.add(nonSnapshotLayer.build());\n+      }\n+      if (!snapshots.isEmpty()) {\n+        FileEntriesLayer.Builder snapshotLayer =\n+            FileEntriesLayer.builder().setName(SNAPSHOT_DEPENDENCIES);\n+        snapshots.forEach(\n+            path ->\n+                addDependency(\n+                    snapshotLayer,\n+                    jarParent.resolve(path),\n+                    mode.equals(ProcessingMode.packaged)\n+                        ? APP_ROOT.resolve(path)\n+                        : APP_ROOT.resolve(DEPENDENCIES).resolve(path.getFileName())));\n+        layers.add(snapshotLayer.build());\n+      }\n+      return layers;\n+    }\n+  }\n+\n+  static FileEntriesLayer addDirectoryContentsToLayer(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e2f1167f72e078fecc6f425b5828364d69f183"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTA4NjI2OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/Jar.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMjoyOTozNVrOIMZq-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMjoyOTozNVrOIMZq-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3NDQyNw==", "bodyText": "Can we only instantiate a new temporary directory when required?", "url": "https://github.com/GoogleContainerTools/jib/pull/2965#discussion_r549874427", "createdAt": "2020-12-29T22:29:35Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/Jar.java", "diffHunk": "@@ -95,13 +97,12 @@ public Integer call() {\n         return 1;\n       }\n \n+      JarProcessor processor =\n+          JarProcessors.from(jarFile, tempDirectoryProvider.newDirectory(), mode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c00555ca4ce0b03ab96f807853680d4b37665c9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTA4OTc4OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessors.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMjozMjowOVrOIMZs5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOToxMzozNVrOIMzmSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3NDkxOA==", "bodyText": "Can these JarProcessor types can just accept the necessary inputs at the constructor level? setJarPath or setTemporaryDirectory seems to be only called during instantiation?\nThen the types become more immutable (to some extent).", "url": "https://github.com/GoogleContainerTools/jib/pull/2965#discussion_r549874918", "createdAt": "2020-12-29T22:32:09Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessors.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.jar;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.jar.JarFile;\n+\n+/** Class to create a {@link JarProcessor} instance depending on jar type and processsing mode. */\n+public class JarProcessors {\n+  private static String SPRING_BOOT = \"spring-boot\";\n+  private static String STANDARD = \"standard\";\n+\n+  /**\n+   * Creates a {@link JarProcessor} instance based on jar type and processing mode.\n+   *\n+   * @param jarPath path to the jar\n+   * @param temporaryDirectory path to temporary directory\n+   * @param mode processing mode\n+   * @return JarProcessor\n+   * @throws IOException if I/O error occurs when opening the jar file\n+   */\n+  public static JarProcessor from(Path jarPath, Path temporaryDirectory, ProcessingMode mode)\n+      throws IOException {\n+    String jarType = determineJarType(jarPath);\n+    if (jarType.equals(SPRING_BOOT) && mode.equals(ProcessingMode.packaged)) {\n+      SpringBootPackagedProcessor processor = new SpringBootPackagedProcessor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c00555ca4ce0b03ab96f807853680d4b37665c9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5OTIxMQ==", "bodyText": "Right, great point!", "url": "https://github.com/GoogleContainerTools/jib/pull/2965#discussion_r550299211", "createdAt": "2020-12-30T19:13:35Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessors.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.jar;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.jar.JarFile;\n+\n+/** Class to create a {@link JarProcessor} instance depending on jar type and processsing mode. */\n+public class JarProcessors {\n+  private static String SPRING_BOOT = \"spring-boot\";\n+  private static String STANDARD = \"standard\";\n+\n+  /**\n+   * Creates a {@link JarProcessor} instance based on jar type and processing mode.\n+   *\n+   * @param jarPath path to the jar\n+   * @param temporaryDirectory path to temporary directory\n+   * @param mode processing mode\n+   * @return JarProcessor\n+   * @throws IOException if I/O error occurs when opening the jar file\n+   */\n+  public static JarProcessor from(Path jarPath, Path temporaryDirectory, ProcessingMode mode)\n+      throws IOException {\n+    String jarType = determineJarType(jarPath);\n+    if (jarType.equals(SPRING_BOOT) && mode.equals(ProcessingMode.packaged)) {\n+      SpringBootPackagedProcessor processor = new SpringBootPackagedProcessor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3NDkxOA=="}, "originalCommit": {"oid": "6c00555ca4ce0b03ab96f807853680d4b37665c9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTk2MDc3OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTo0MTo0M1rOIM0Dfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTo0MTo0M1rOIM0Dfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwNjY4Nw==", "bodyText": "I would check whether this mock is called or not? We only expect it to create a new directory for 2 of the 4 types?\nAnd I would expect no interactions on the other 2?", "url": "https://github.com/GoogleContainerTools/jib/pull/2965#discussion_r550306687", "createdAt": "2020-12-30T19:41:43Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorsTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.jar;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.filesystem.TempDirectoryProvider;\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/** Tests for {@link JarProcessors}. */\n+@RunWith(MockitoJUnitRunner.class)\n+public class JarProcessorsTest {\n+\n+  private static final String SPRING_BOOT = \"jar/spring-boot/springboot_sample.jar\";\n+  private static final String STANDARD = \"jar/standard/emptyStandardJar.jar\";\n+\n+  @Mock private static TempDirectoryProvider mockTemporaryDirectoryProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e440914c7e8f2f5d74d350ceadd19a40a3f9dc6a"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4912, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}