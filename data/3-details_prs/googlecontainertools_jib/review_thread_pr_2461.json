{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MjU3NzU1", "number": 2461, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjo1Nzo1OFrOD7bqZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODo0Mjo1OVrOD7x2qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjQ1Nzk4OnYy", "diffSide": "RIGHT", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/ExtraDirectoriesParameters.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjo1Nzo1OFrOGTwPQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODozNzo0MVrOGUT6EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2NjQ2Nw==", "bodyText": "Instead of providing the default here, I think we can initialize paths to src/main/jib in the constructor. (I have never tried this though.)\n-    paths = project.getObjects().listProperty(ExtraDirectoryParameters.class).empty();\n+    paths = project.getObjects().listProperty(ExtraDirectoryParameters.class);\n+    paths.set(Collections.singletonList(new ExtraDirectoryParameters(...)));", "url": "https://github.com/GoogleContainerTools/jib/pull/2461#discussion_r423366467", "createdAt": "2020-05-11T22:57:58Z", "author": {"login": "chanseokoh"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/ExtraDirectoriesParameters.java", "diffHunk": "@@ -35,34 +37,51 @@\n \n   private final Project project;\n \n-  private List<Path> paths;\n+  private ListProperty<ExtraDirectoryParameters> paths;\n+  private ExtraDirectoryParametersSpec spec;\n   private Map<String, String> permissions = Collections.emptyMap();\n \n   @Inject\n   public ExtraDirectoriesParameters(Project project) {\n     this.project = project;\n-    paths =\n-        Collections.singletonList(\n-            project.getProjectDir().toPath().resolve(\"src\").resolve(\"main\").resolve(\"jib\"));\n+    paths = project.getObjects().listProperty(ExtraDirectoryParameters.class).empty();\n+    spec = project.getObjects().newInstance(ExtraDirectoryParametersSpec.class, project, paths);\n+  }\n+\n+  public void paths(Action<? super ExtraDirectoryParametersSpec> action) {\n+    action.execute(spec);\n   }\n \n   @Input\n   public List<String> getPathStrings() {\n     // Gradle warns about @Input annotations on File objects, so we have to expose a getter for a\n     // String to make them go away.\n-    return getPaths().stream().map(Path::toString).collect(Collectors.toList());\n+    return getPaths()\n+        .stream()\n+        .map(extraDirectoryParameters -> extraDirectoryParameters.getFrom().toString())\n+        .collect(Collectors.toList());\n   }\n \n   @Internal\n-  public List<Path> getPaths() {\n+  public List<ExtraDirectoryParameters> getPaths() {\n     // Gradle warns about @Input annotations on File objects, so we have to expose a getter for a\n     // String to make them go away.\n     String property = System.getProperty(PropertyNames.EXTRA_DIRECTORIES_PATHS);\n     if (property != null) {\n       List<String> pathStrings = ConfigurationPropertyValidator.parseListProperty(property);\n-      return pathStrings.stream().map(Paths::get).collect(Collectors.toList());\n+      return pathStrings\n+          .stream()\n+          .map(path -> new ExtraDirectoryParameters(project, Paths.get(path), \"/\"))\n+          .collect(Collectors.toList());\n     }\n-    return paths;\n+    if (paths.get().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "786f52de7a57289ba1acf085a41746353e6b5ae4"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg5Mzg5Mg==", "bodyText": "The reason I did it this way was because, if this is set in the constructor, calls to jib.extraDirectories.paths { path {...} } will end up adding paths along with src/main/jib instead of replacing the default.", "url": "https://github.com/GoogleContainerTools/jib/pull/2461#discussion_r423893892", "createdAt": "2020-05-12T17:04:24Z", "author": {"login": "TadCordle"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/ExtraDirectoriesParameters.java", "diffHunk": "@@ -35,34 +37,51 @@\n \n   private final Project project;\n \n-  private List<Path> paths;\n+  private ListProperty<ExtraDirectoryParameters> paths;\n+  private ExtraDirectoryParametersSpec spec;\n   private Map<String, String> permissions = Collections.emptyMap();\n \n   @Inject\n   public ExtraDirectoriesParameters(Project project) {\n     this.project = project;\n-    paths =\n-        Collections.singletonList(\n-            project.getProjectDir().toPath().resolve(\"src\").resolve(\"main\").resolve(\"jib\"));\n+    paths = project.getObjects().listProperty(ExtraDirectoryParameters.class).empty();\n+    spec = project.getObjects().newInstance(ExtraDirectoryParametersSpec.class, project, paths);\n+  }\n+\n+  public void paths(Action<? super ExtraDirectoryParametersSpec> action) {\n+    action.execute(spec);\n   }\n \n   @Input\n   public List<String> getPathStrings() {\n     // Gradle warns about @Input annotations on File objects, so we have to expose a getter for a\n     // String to make them go away.\n-    return getPaths().stream().map(Path::toString).collect(Collectors.toList());\n+    return getPaths()\n+        .stream()\n+        .map(extraDirectoryParameters -> extraDirectoryParameters.getFrom().toString())\n+        .collect(Collectors.toList());\n   }\n \n   @Internal\n-  public List<Path> getPaths() {\n+  public List<ExtraDirectoryParameters> getPaths() {\n     // Gradle warns about @Input annotations on File objects, so we have to expose a getter for a\n     // String to make them go away.\n     String property = System.getProperty(PropertyNames.EXTRA_DIRECTORIES_PATHS);\n     if (property != null) {\n       List<String> pathStrings = ConfigurationPropertyValidator.parseListProperty(property);\n-      return pathStrings.stream().map(Paths::get).collect(Collectors.toList());\n+      return pathStrings\n+          .stream()\n+          .map(path -> new ExtraDirectoryParameters(project, Paths.get(path), \"/\"))\n+          .collect(Collectors.toList());\n     }\n-    return paths;\n+    if (paths.get().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2NjQ2Nw=="}, "originalCommit": {"oid": "786f52de7a57289ba1acf085a41746353e6b5ae4"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg5Nzk2NA==", "bodyText": "I guess maybe I can reset this in ExtraDirectoryParametersSpec. Nevermind, that would overwrite previous path {...} entries if someone configured multiple.", "url": "https://github.com/GoogleContainerTools/jib/pull/2461#discussion_r423897964", "createdAt": "2020-05-12T17:10:52Z", "author": {"login": "TadCordle"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/ExtraDirectoriesParameters.java", "diffHunk": "@@ -35,34 +37,51 @@\n \n   private final Project project;\n \n-  private List<Path> paths;\n+  private ListProperty<ExtraDirectoryParameters> paths;\n+  private ExtraDirectoryParametersSpec spec;\n   private Map<String, String> permissions = Collections.emptyMap();\n \n   @Inject\n   public ExtraDirectoriesParameters(Project project) {\n     this.project = project;\n-    paths =\n-        Collections.singletonList(\n-            project.getProjectDir().toPath().resolve(\"src\").resolve(\"main\").resolve(\"jib\"));\n+    paths = project.getObjects().listProperty(ExtraDirectoryParameters.class).empty();\n+    spec = project.getObjects().newInstance(ExtraDirectoryParametersSpec.class, project, paths);\n+  }\n+\n+  public void paths(Action<? super ExtraDirectoryParametersSpec> action) {\n+    action.execute(spec);\n   }\n \n   @Input\n   public List<String> getPathStrings() {\n     // Gradle warns about @Input annotations on File objects, so we have to expose a getter for a\n     // String to make them go away.\n-    return getPaths().stream().map(Path::toString).collect(Collectors.toList());\n+    return getPaths()\n+        .stream()\n+        .map(extraDirectoryParameters -> extraDirectoryParameters.getFrom().toString())\n+        .collect(Collectors.toList());\n   }\n \n   @Internal\n-  public List<Path> getPaths() {\n+  public List<ExtraDirectoryParameters> getPaths() {\n     // Gradle warns about @Input annotations on File objects, so we have to expose a getter for a\n     // String to make them go away.\n     String property = System.getProperty(PropertyNames.EXTRA_DIRECTORIES_PATHS);\n     if (property != null) {\n       List<String> pathStrings = ConfigurationPropertyValidator.parseListProperty(property);\n-      return pathStrings.stream().map(Paths::get).collect(Collectors.toList());\n+      return pathStrings\n+          .stream()\n+          .map(path -> new ExtraDirectoryParameters(project, Paths.get(path), \"/\"))\n+          .collect(Collectors.toList());\n     }\n-    return paths;\n+    if (paths.get().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2NjQ2Nw=="}, "originalCommit": {"oid": "786f52de7a57289ba1acf085a41746353e6b5ae4"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1MDg2NA==", "bodyText": "will end up adding paths along with src/main/jib\n\nAha, good catch.", "url": "https://github.com/GoogleContainerTools/jib/pull/2461#discussion_r423950864", "createdAt": "2020-05-12T18:37:41Z", "author": {"login": "chanseokoh"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/ExtraDirectoriesParameters.java", "diffHunk": "@@ -35,34 +37,51 @@\n \n   private final Project project;\n \n-  private List<Path> paths;\n+  private ListProperty<ExtraDirectoryParameters> paths;\n+  private ExtraDirectoryParametersSpec spec;\n   private Map<String, String> permissions = Collections.emptyMap();\n \n   @Inject\n   public ExtraDirectoriesParameters(Project project) {\n     this.project = project;\n-    paths =\n-        Collections.singletonList(\n-            project.getProjectDir().toPath().resolve(\"src\").resolve(\"main\").resolve(\"jib\"));\n+    paths = project.getObjects().listProperty(ExtraDirectoryParameters.class).empty();\n+    spec = project.getObjects().newInstance(ExtraDirectoryParametersSpec.class, project, paths);\n+  }\n+\n+  public void paths(Action<? super ExtraDirectoryParametersSpec> action) {\n+    action.execute(spec);\n   }\n \n   @Input\n   public List<String> getPathStrings() {\n     // Gradle warns about @Input annotations on File objects, so we have to expose a getter for a\n     // String to make them go away.\n-    return getPaths().stream().map(Path::toString).collect(Collectors.toList());\n+    return getPaths()\n+        .stream()\n+        .map(extraDirectoryParameters -> extraDirectoryParameters.getFrom().toString())\n+        .collect(Collectors.toList());\n   }\n \n   @Internal\n-  public List<Path> getPaths() {\n+  public List<ExtraDirectoryParameters> getPaths() {\n     // Gradle warns about @Input annotations on File objects, so we have to expose a getter for a\n     // String to make them go away.\n     String property = System.getProperty(PropertyNames.EXTRA_DIRECTORIES_PATHS);\n     if (property != null) {\n       List<String> pathStrings = ConfigurationPropertyValidator.parseListProperty(property);\n-      return pathStrings.stream().map(Paths::get).collect(Collectors.toList());\n+      return pathStrings\n+          .stream()\n+          .map(path -> new ExtraDirectoryParameters(project, Paths.get(path), \"/\"))\n+          .collect(Collectors.toList());\n     }\n-    return paths;\n+    if (paths.get().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2NjQ2Nw=="}, "originalCommit": {"oid": "786f52de7a57289ba1acf085a41746353e6b5ae4"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjQ2MjMxOnYy", "diffSide": "RIGHT", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/ExtraDirectoriesParameters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMzowMDoxNlrOGTwSRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMzowMDoxNlrOGTwSRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2NzIzNw==", "bodyText": "Instead of recreating an empty list, I think you can call paths.set()?", "url": "https://github.com/GoogleContainerTools/jib/pull/2461#discussion_r423367237", "createdAt": "2020-05-11T23:00:16Z", "author": {"login": "chanseokoh"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/ExtraDirectoriesParameters.java", "diffHunk": "@@ -72,8 +91,12 @@ public ExtraDirectoriesParameters(Project project) {\n    * @param paths paths to set.\n    */\n   public void setPaths(Object paths) {\n-    this.paths =\n+    List<Path> froms =\n         project.files(paths).getFiles().stream().map(File::toPath).collect(Collectors.toList());\n+    this.paths = project.getObjects().listProperty(ExtraDirectoryParameters.class).empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "786f52de7a57289ba1acf085a41746353e6b5ae4"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDA4NTM1OnYy", "diffSide": "RIGHT", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/ExtraDirectoriesParameters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODo0MDozNlrOGUUAjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODo0MDozNlrOGUUAjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1MjUyNQ==", "bodyText": "Can this be\nproject.files(paths).getFiles().stream().map(file -> new ExtraDirectoryParameters(project, file.toPath(), \"/\")).collect(Collectors.toList());\n?", "url": "https://github.com/GoogleContainerTools/jib/pull/2461#discussion_r423952525", "createdAt": "2020-05-12T18:40:36Z", "author": {"login": "chanseokoh"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/ExtraDirectoriesParameters.java", "diffHunk": "@@ -72,8 +91,13 @@ public ExtraDirectoriesParameters(Project project) {\n    * @param paths paths to set.\n    */\n   public void setPaths(Object paths) {\n-    this.paths =\n+    List<Path> froms =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d74cc5b746892f1ce217da813dbe74b9645fbca"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDA5Mzg1OnYy", "diffSide": "RIGHT", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/ExtraDirectoryParameters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODo0Mjo1OVrOGUUGFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODo0Mjo1OVrOGUUGFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1Mzk0Mw==", "bodyText": "Instead of initializing here, how about initializing them in the field definitions? Other ...Parameters follow this convention. This also ensures they are always initialized even when using a potentially different constructor.", "url": "https://github.com/GoogleContainerTools/jib/pull/2461#discussion_r423953943", "createdAt": "2020-05-12T18:42:59Z", "author": {"login": "chanseokoh"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/ExtraDirectoryParameters.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.gradle;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import javax.inject.Inject;\n+import org.gradle.api.Project;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.Internal;\n+\n+/** Configuration of an extra directory. */\n+public class ExtraDirectoryParameters {\n+\n+  private Project project;\n+  private Path from;\n+  private String into;\n+\n+  @Inject\n+  public ExtraDirectoryParameters(Project project) {\n+    this.project = project;\n+    from = Paths.get(\"\");\n+    into = \"/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d74cc5b746892f1ce217da813dbe74b9645fbca"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 402, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}