{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MzAyMDQx", "number": 2531, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1NToyOVrOEH-wqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOToyMDowNFrOEL0Eog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODAzNzU0OnYy", "diffSide": "RIGHT", "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/ManifestCheckerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1NToyOVrOGnqdFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1NToyOVrOGnqdFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0MzIyMw==", "bodyText": "this comment seems to be off? maybe should be unknown ?", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r444243223", "createdAt": "2020-06-23T13:55:29Z", "author": {"login": "loosebazooka"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/ManifestCheckerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.registry;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.cloud.tools.jib.api.RegistryException;\n+import com.google.cloud.tools.jib.event.EventHandlers;\n+import com.google.cloud.tools.jib.http.FailoverHttpClient;\n+import com.google.cloud.tools.jib.image.json.ManifestTemplate;\n+import java.io.IOException;\n+import java.util.Optional;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+/** Integration tests for {@link ManifestChecker}. */\n+public class ManifestCheckerIntegrationTest {\n+\n+  /** A known manifest list sha for openjdk:11-jre-slim. */\n+  public static final String KNOWN_MANIFEST =\n+      \"sha256:8ab7b3078b01ba66b937b7fbe0b9eccf60449cc101c42e99aeefaba0e1781155\";\n+\n+  /** A known manifest list sha for openjdk:11-jre-slim. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODA0MjQzOnYy", "diffSide": "RIGHT", "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/ManifestCheckerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1NjoyOVrOGnqgHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1NjoyOVrOGnqgHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0Mzk5Nw==", "bodyText": "is this necessary? who's using busybox? Actually the whole localRegistry harness maybe isn't used? we can remove it?", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r444243997", "createdAt": "2020-06-23T13:56:29Z", "author": {"login": "loosebazooka"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/ManifestCheckerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.registry;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.cloud.tools.jib.api.RegistryException;\n+import com.google.cloud.tools.jib.event.EventHandlers;\n+import com.google.cloud.tools.jib.http.FailoverHttpClient;\n+import com.google.cloud.tools.jib.image.json.ManifestTemplate;\n+import java.io.IOException;\n+import java.util.Optional;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+/** Integration tests for {@link ManifestChecker}. */\n+public class ManifestCheckerIntegrationTest {\n+\n+  /** A known manifest list sha for openjdk:11-jre-slim. */\n+  public static final String KNOWN_MANIFEST =\n+      \"sha256:8ab7b3078b01ba66b937b7fbe0b9eccf60449cc101c42e99aeefaba0e1781155\";\n+\n+  /** A known manifest list sha for openjdk:11-jre-slim. */\n+  public static final String UNKNOWN_MANIFEST =\n+      \"sha256:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n+\n+  @ClassRule public static final LocalRegistry localRegistry = new LocalRegistry(5000);\n+\n+  @BeforeClass\n+  public static void setUp() throws IOException, InterruptedException {\n+    localRegistry.pullAndPushToLocal(\"busybox\", \"busybox\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODA0ODU1OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/ManifestChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1Nzo0NFrOGnqj_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1Nzo0NFrOGnqj_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NDk5MA==", "bodyText": "2018 -> 2020", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r444244990", "createdAt": "2020-06-23T13:57:44Z", "author": {"login": "loosebazooka"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/ManifestChecker.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2018 Google LLC.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODA2NDQyOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/ManifestChecker.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDowMToxOFrOGnqueg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMToxNTo1NVrOGtnXqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NzY3NA==", "bodyText": "I don't think we should be duplicating code like this, the code in ManifestPuller and this can go out of sync. Is there a way provide a shared resource that both can refrence?", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r444247674", "createdAt": "2020-06-23T14:01:18Z", "author": {"login": "loosebazooka"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/ManifestChecker.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.registry;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.cloud.tools.jib.api.DescriptorDigest;\n+import com.google.cloud.tools.jib.hash.Digests;\n+import com.google.cloud.tools.jib.http.BlobHttpContent;\n+import com.google.cloud.tools.jib.http.Response;\n+import com.google.cloud.tools.jib.http.ResponseException;\n+import com.google.cloud.tools.jib.image.json.ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.OciManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.UnknownManifestFormatException;\n+import com.google.cloud.tools.jib.image.json.V21ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestListTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** Checks an image's manifest. */\n+public class ManifestChecker<T extends ManifestTemplate>\n+    implements RegistryEndpointProvider<Optional<ManifestAndDigest<T>>> {\n+\n+  private final RegistryEndpointRequestProperties registryEndpointRequestProperties;\n+  private final String imageDescriptor;\n+  private final Class<T> manifestTemplateClass;\n+\n+  ManifestChecker(\n+      RegistryEndpointRequestProperties registryEndpointRequestProperties,\n+      String imageDescriptor,\n+      Class<T> manifestTemplateClass) {\n+    this.registryEndpointRequestProperties = registryEndpointRequestProperties;\n+    this.imageDescriptor = imageDescriptor;\n+    this.manifestTemplateClass = manifestTemplateClass;\n+  }\n+\n+  @Nullable\n+  @Override\n+  public BlobHttpContent getContent() {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<String> getAccept() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3NDE4Ng==", "bodyText": "Agreed. I really think we should not duplicate this much amount of code.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r445174186", "createdAt": "2020-06-24T21:11:20Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/ManifestChecker.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.registry;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.cloud.tools.jib.api.DescriptorDigest;\n+import com.google.cloud.tools.jib.hash.Digests;\n+import com.google.cloud.tools.jib.http.BlobHttpContent;\n+import com.google.cloud.tools.jib.http.Response;\n+import com.google.cloud.tools.jib.http.ResponseException;\n+import com.google.cloud.tools.jib.image.json.ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.OciManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.UnknownManifestFormatException;\n+import com.google.cloud.tools.jib.image.json.V21ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestListTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** Checks an image's manifest. */\n+public class ManifestChecker<T extends ManifestTemplate>\n+    implements RegistryEndpointProvider<Optional<ManifestAndDigest<T>>> {\n+\n+  private final RegistryEndpointRequestProperties registryEndpointRequestProperties;\n+  private final String imageDescriptor;\n+  private final Class<T> manifestTemplateClass;\n+\n+  ManifestChecker(\n+      RegistryEndpointRequestProperties registryEndpointRequestProperties,\n+      String imageDescriptor,\n+      Class<T> manifestTemplateClass) {\n+    this.registryEndpointRequestProperties = registryEndpointRequestProperties;\n+    this.imageDescriptor = imageDescriptor;\n+    this.manifestTemplateClass = manifestTemplateClass;\n+  }\n+\n+  @Nullable\n+  @Override\n+  public BlobHttpContent getContent() {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<String> getAccept() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NzY3NA=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDExMTg1OQ==", "bodyText": "I don't see an easy way how to extract common code from the 2 classes, given that they implement the RegistryEndpointProvider interface with 2 different types. A simple option would be to completely do away with the ManifestChecker class and change the implementation of RegistryClient.checkImage to use RegistryClient.pullManifest and catch the exception when the image does not exist, like so:\n  public Optional<ManifestAndDigest<ManifestTemplate>> checkImage(String imageDigest)\n    throws IOException, RegistryException {\n    try {\n      return Optional.ofNullable(pullManifest(imageDigest, ManifestTemplate.class));\n    } catch (RegistryErrorException e) {\n      return Optional.empty();\n    }\n  }\n\nWhat do you think?", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450111859", "createdAt": "2020-07-06T09:53:11Z", "author": {"login": "karlmuscat"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/ManifestChecker.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.registry;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.cloud.tools.jib.api.DescriptorDigest;\n+import com.google.cloud.tools.jib.hash.Digests;\n+import com.google.cloud.tools.jib.http.BlobHttpContent;\n+import com.google.cloud.tools.jib.http.Response;\n+import com.google.cloud.tools.jib.http.ResponseException;\n+import com.google.cloud.tools.jib.image.json.ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.OciManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.UnknownManifestFormatException;\n+import com.google.cloud.tools.jib.image.json.V21ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestListTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** Checks an image's manifest. */\n+public class ManifestChecker<T extends ManifestTemplate>\n+    implements RegistryEndpointProvider<Optional<ManifestAndDigest<T>>> {\n+\n+  private final RegistryEndpointRequestProperties registryEndpointRequestProperties;\n+  private final String imageDescriptor;\n+  private final Class<T> manifestTemplateClass;\n+\n+  ManifestChecker(\n+      RegistryEndpointRequestProperties registryEndpointRequestProperties,\n+      String imageDescriptor,\n+      Class<T> manifestTemplateClass) {\n+    this.registryEndpointRequestProperties = registryEndpointRequestProperties;\n+    this.imageDescriptor = imageDescriptor;\n+    this.manifestTemplateClass = manifestTemplateClass;\n+  }\n+\n+  @Nullable\n+  @Override\n+  public BlobHttpContent getContent() {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<String> getAccept() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NzY3NA=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIzMTE2OA==", "bodyText": "Would you mind if I push changes to your PR?", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450231168", "createdAt": "2020-07-06T13:46:02Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/ManifestChecker.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.registry;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.cloud.tools.jib.api.DescriptorDigest;\n+import com.google.cloud.tools.jib.hash.Digests;\n+import com.google.cloud.tools.jib.http.BlobHttpContent;\n+import com.google.cloud.tools.jib.http.Response;\n+import com.google.cloud.tools.jib.http.ResponseException;\n+import com.google.cloud.tools.jib.image.json.ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.OciManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.UnknownManifestFormatException;\n+import com.google.cloud.tools.jib.image.json.V21ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestListTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** Checks an image's manifest. */\n+public class ManifestChecker<T extends ManifestTemplate>\n+    implements RegistryEndpointProvider<Optional<ManifestAndDigest<T>>> {\n+\n+  private final RegistryEndpointRequestProperties registryEndpointRequestProperties;\n+  private final String imageDescriptor;\n+  private final Class<T> manifestTemplateClass;\n+\n+  ManifestChecker(\n+      RegistryEndpointRequestProperties registryEndpointRequestProperties,\n+      String imageDescriptor,\n+      Class<T> manifestTemplateClass) {\n+    this.registryEndpointRequestProperties = registryEndpointRequestProperties;\n+    this.imageDescriptor = imageDescriptor;\n+    this.manifestTemplateClass = manifestTemplateClass;\n+  }\n+\n+  @Nullable\n+  @Override\n+  public BlobHttpContent getContent() {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<String> getAccept() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NzY3NA=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIzNjAxMw==", "bodyText": "Why would I? \ud83d\ude04", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450236013", "createdAt": "2020-07-06T13:53:36Z", "author": {"login": "karlmuscat"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/ManifestChecker.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.registry;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.cloud.tools.jib.api.DescriptorDigest;\n+import com.google.cloud.tools.jib.hash.Digests;\n+import com.google.cloud.tools.jib.http.BlobHttpContent;\n+import com.google.cloud.tools.jib.http.Response;\n+import com.google.cloud.tools.jib.http.ResponseException;\n+import com.google.cloud.tools.jib.image.json.ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.OciManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.UnknownManifestFormatException;\n+import com.google.cloud.tools.jib.image.json.V21ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestListTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** Checks an image's manifest. */\n+public class ManifestChecker<T extends ManifestTemplate>\n+    implements RegistryEndpointProvider<Optional<ManifestAndDigest<T>>> {\n+\n+  private final RegistryEndpointRequestProperties registryEndpointRequestProperties;\n+  private final String imageDescriptor;\n+  private final Class<T> manifestTemplateClass;\n+\n+  ManifestChecker(\n+      RegistryEndpointRequestProperties registryEndpointRequestProperties,\n+      String imageDescriptor,\n+      Class<T> manifestTemplateClass) {\n+    this.registryEndpointRequestProperties = registryEndpointRequestProperties;\n+    this.imageDescriptor = imageDescriptor;\n+    this.manifestTemplateClass = manifestTemplateClass;\n+  }\n+\n+  @Nullable\n+  @Override\n+  public BlobHttpContent getContent() {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<String> getAccept() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NzY3NA=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxMjM4Ng==", "bodyText": "Discussed this with @loosebazooka. I can take care of code duplication in a follow-up PR.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450412386", "createdAt": "2020-07-06T18:43:12Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/ManifestChecker.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.registry;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.cloud.tools.jib.api.DescriptorDigest;\n+import com.google.cloud.tools.jib.hash.Digests;\n+import com.google.cloud.tools.jib.http.BlobHttpContent;\n+import com.google.cloud.tools.jib.http.Response;\n+import com.google.cloud.tools.jib.http.ResponseException;\n+import com.google.cloud.tools.jib.image.json.ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.OciManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.UnknownManifestFormatException;\n+import com.google.cloud.tools.jib.image.json.V21ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestListTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** Checks an image's manifest. */\n+public class ManifestChecker<T extends ManifestTemplate>\n+    implements RegistryEndpointProvider<Optional<ManifestAndDigest<T>>> {\n+\n+  private final RegistryEndpointRequestProperties registryEndpointRequestProperties;\n+  private final String imageDescriptor;\n+  private final Class<T> manifestTemplateClass;\n+\n+  ManifestChecker(\n+      RegistryEndpointRequestProperties registryEndpointRequestProperties,\n+      String imageDescriptor,\n+      Class<T> manifestTemplateClass) {\n+    this.registryEndpointRequestProperties = registryEndpointRequestProperties;\n+    this.imageDescriptor = imageDescriptor;\n+    this.manifestTemplateClass = manifestTemplateClass;\n+  }\n+\n+  @Nullable\n+  @Override\n+  public BlobHttpContent getContent() {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<String> getAccept() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NzY3NA=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ4NDEzNw==", "bodyText": "I've just taken care of this in this PR.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450484137", "createdAt": "2020-07-06T21:15:55Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/ManifestChecker.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.registry;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.cloud.tools.jib.api.DescriptorDigest;\n+import com.google.cloud.tools.jib.hash.Digests;\n+import com.google.cloud.tools.jib.http.BlobHttpContent;\n+import com.google.cloud.tools.jib.http.Response;\n+import com.google.cloud.tools.jib.http.ResponseException;\n+import com.google.cloud.tools.jib.image.json.ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.OciManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.UnknownManifestFormatException;\n+import com.google.cloud.tools.jib.image.json.V21ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestListTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** Checks an image's manifest. */\n+public class ManifestChecker<T extends ManifestTemplate>\n+    implements RegistryEndpointProvider<Optional<ManifestAndDigest<T>>> {\n+\n+  private final RegistryEndpointRequestProperties registryEndpointRequestProperties;\n+  private final String imageDescriptor;\n+  private final Class<T> manifestTemplateClass;\n+\n+  ManifestChecker(\n+      RegistryEndpointRequestProperties registryEndpointRequestProperties,\n+      String imageDescriptor,\n+      Class<T> manifestTemplateClass) {\n+    this.registryEndpointRequestProperties = registryEndpointRequestProperties;\n+    this.imageDescriptor = imageDescriptor;\n+    this.manifestTemplateClass = manifestTemplateClass;\n+  }\n+\n+  @Nullable\n+  @Override\n+  public BlobHttpContent getContent() {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<String> getAccept() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NzY3NA=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mzc3NDM3OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PushImageStep.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTowMTozM1rOGoi_pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjowMTo0OVrOGtdlCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2OTU3NQ==", "bodyText": "This check is still suffering from the concurrency issue I mentioned in #2387 (comment). As we discussed, you should follow the design outlined in the proposal to create a separate -Step class to call registryClient.checkImage(). If the program control already reached here, it means multiple PushImageSteps are scheduled and running.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r445169575", "createdAt": "2020-06-24T21:01:33Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PushImageStep.java", "diffHunk": "@@ -47,23 +45,25 @@\n       ProgressEventDispatcher.Factory progressEventDispatcherFactory,\n       RegistryClient registryClient,\n       BlobDescriptor containerConfigurationDigestAndSize,\n-      Image builtImage)\n-      throws IOException {\n+      BuildableManifestTemplate manifestTemplate,\n+      DescriptorDigest imageDigest)\n+      throws IOException, RegistryException {\n     Set<String> tags = buildContext.getAllTargetImageTags();\n \n+    EventHandlers eventHandlers = buildContext.getEventHandlers();\n+\n     try (TimerEventDispatcher ignored =\n-            new TimerEventDispatcher(\n-                buildContext.getEventHandlers(), \"Preparing manifest pushers\");\n+            new TimerEventDispatcher(eventHandlers, \"Preparing manifest pushers\");\n         ProgressEventDispatcher progressEventDispatcher =\n             progressEventDispatcherFactory.create(\"launching manifest pushers\", tags.size())) {\n \n-      // Gets the image manifest to push.\n-      BuildableManifestTemplate manifestTemplate =\n-          new ImageToJsonTranslator(builtImage)\n-              .getManifestTemplate(\n-                  buildContext.getTargetFormat(), containerConfigurationDigestAndSize);\n+      if (JibSystemProperties.skipExistingImages()\n+          && registryClient.checkImage(imageDigest.toString()).isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0Njk3NA==", "bodyText": "The PushImageStep steps are being created after the condition is evaluated to false. If it evaluates to true, no steps are created and an empty list is returned. It seems like it achieves the same behaviour but with simpler code. If you think that adding a new step is better, Ill change it.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450046974", "createdAt": "2020-07-06T07:56:43Z", "author": {"login": "karlmuscat"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PushImageStep.java", "diffHunk": "@@ -47,23 +45,25 @@\n       ProgressEventDispatcher.Factory progressEventDispatcherFactory,\n       RegistryClient registryClient,\n       BlobDescriptor containerConfigurationDigestAndSize,\n-      Image builtImage)\n-      throws IOException {\n+      BuildableManifestTemplate manifestTemplate,\n+      DescriptorDigest imageDigest)\n+      throws IOException, RegistryException {\n     Set<String> tags = buildContext.getAllTargetImageTags();\n \n+    EventHandlers eventHandlers = buildContext.getEventHandlers();\n+\n     try (TimerEventDispatcher ignored =\n-            new TimerEventDispatcher(\n-                buildContext.getEventHandlers(), \"Preparing manifest pushers\");\n+            new TimerEventDispatcher(eventHandlers, \"Preparing manifest pushers\");\n         ProgressEventDispatcher progressEventDispatcher =\n             progressEventDispatcherFactory.create(\"launching manifest pushers\", tags.size())) {\n \n-      // Gets the image manifest to push.\n-      BuildableManifestTemplate manifestTemplate =\n-          new ImageToJsonTranslator(builtImage)\n-              .getManifestTemplate(\n-                  buildContext.getTargetFormat(), containerConfigurationDigestAndSize);\n+      if (JibSystemProperties.skipExistingImages()\n+          && registryClient.checkImage(imageDigest.toString()).isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2OTU3NQ=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyNTc1NQ==", "bodyText": "Oh, I jumped into the conclusion too early after I saw this check in this file.\nHowever, you still need to create a separate Step for a blocking network call. makeList() should just create and return necessary Steps instantaneously and should never block thread scheduling in StepsRunner.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450225755", "createdAt": "2020-07-06T13:37:43Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PushImageStep.java", "diffHunk": "@@ -47,23 +45,25 @@\n       ProgressEventDispatcher.Factory progressEventDispatcherFactory,\n       RegistryClient registryClient,\n       BlobDescriptor containerConfigurationDigestAndSize,\n-      Image builtImage)\n-      throws IOException {\n+      BuildableManifestTemplate manifestTemplate,\n+      DescriptorDigest imageDigest)\n+      throws IOException, RegistryException {\n     Set<String> tags = buildContext.getAllTargetImageTags();\n \n+    EventHandlers eventHandlers = buildContext.getEventHandlers();\n+\n     try (TimerEventDispatcher ignored =\n-            new TimerEventDispatcher(\n-                buildContext.getEventHandlers(), \"Preparing manifest pushers\");\n+            new TimerEventDispatcher(eventHandlers, \"Preparing manifest pushers\");\n         ProgressEventDispatcher progressEventDispatcher =\n             progressEventDispatcherFactory.create(\"launching manifest pushers\", tags.size())) {\n \n-      // Gets the image manifest to push.\n-      BuildableManifestTemplate manifestTemplate =\n-          new ImageToJsonTranslator(builtImage)\n-              .getManifestTemplate(\n-                  buildContext.getTargetFormat(), containerConfigurationDigestAndSize);\n+      if (JibSystemProperties.skipExistingImages()\n+          && registryClient.checkImage(imageDigest.toString()).isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2OTU3NQ=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1Njc5Nw==", "bodyText": "Ok. Can you have a look at commit 987c58c? I had initially introduced a step before the makeList call. You should look at CheckImageStep, PushImageStep and StepsRunner. Should I change it to something like that?", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450256797", "createdAt": "2020-07-06T14:23:32Z", "author": {"login": "karlmuscat"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PushImageStep.java", "diffHunk": "@@ -47,23 +45,25 @@\n       ProgressEventDispatcher.Factory progressEventDispatcherFactory,\n       RegistryClient registryClient,\n       BlobDescriptor containerConfigurationDigestAndSize,\n-      Image builtImage)\n-      throws IOException {\n+      BuildableManifestTemplate manifestTemplate,\n+      DescriptorDigest imageDigest)\n+      throws IOException, RegistryException {\n     Set<String> tags = buildContext.getAllTargetImageTags();\n \n+    EventHandlers eventHandlers = buildContext.getEventHandlers();\n+\n     try (TimerEventDispatcher ignored =\n-            new TimerEventDispatcher(\n-                buildContext.getEventHandlers(), \"Preparing manifest pushers\");\n+            new TimerEventDispatcher(eventHandlers, \"Preparing manifest pushers\");\n         ProgressEventDispatcher progressEventDispatcher =\n             progressEventDispatcherFactory.create(\"launching manifest pushers\", tags.size())) {\n \n-      // Gets the image manifest to push.\n-      BuildableManifestTemplate manifestTemplate =\n-          new ImageToJsonTranslator(builtImage)\n-              .getManifestTemplate(\n-                  buildContext.getTargetFormat(), containerConfigurationDigestAndSize);\n+      if (JibSystemProperties.skipExistingImages()\n+          && registryClient.checkImage(imageDigest.toString()).isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2OTU3NQ=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI4NDI2Mw==", "bodyText": "The direction seems right. However, we maintain complete separation between business logic (what Steps do) and the async handling (what StepsRunner do). That is, StepsRunner doesn't care what each Step does or implies but is only interested in scheduling Steps, passing parameters to them as necessary, and ultimately storing results in results.*. All the business logic (building a manifest and computing its digest and the conditional skip) should go out of StepsRunner. For example, StepsRunner code shouldn't have conditional Step scheduling based on the result of some step. So, probably you should put the manifest construction and digest computation into CheckImageStep. The step would then return an Optional<Manifest...>, and StepsRunner would just store the result. (If deemed necessary, CheckImageStep could return the manifest it built, but because anyone can easily build the same manifest later, this may be unnecessary.) This manifest check result should probably be passed into makeList() where it returns either an empty list or multiple PushImageStep instances based on the result. The responsibility of makeList() should just be about properly instantiating necessary -Step instances where all the core business logic goes in.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450284263", "createdAt": "2020-07-06T15:02:22Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PushImageStep.java", "diffHunk": "@@ -47,23 +45,25 @@\n       ProgressEventDispatcher.Factory progressEventDispatcherFactory,\n       RegistryClient registryClient,\n       BlobDescriptor containerConfigurationDigestAndSize,\n-      Image builtImage)\n-      throws IOException {\n+      BuildableManifestTemplate manifestTemplate,\n+      DescriptorDigest imageDigest)\n+      throws IOException, RegistryException {\n     Set<String> tags = buildContext.getAllTargetImageTags();\n \n+    EventHandlers eventHandlers = buildContext.getEventHandlers();\n+\n     try (TimerEventDispatcher ignored =\n-            new TimerEventDispatcher(\n-                buildContext.getEventHandlers(), \"Preparing manifest pushers\");\n+            new TimerEventDispatcher(eventHandlers, \"Preparing manifest pushers\");\n         ProgressEventDispatcher progressEventDispatcher =\n             progressEventDispatcherFactory.create(\"launching manifest pushers\", tags.size())) {\n \n-      // Gets the image manifest to push.\n-      BuildableManifestTemplate manifestTemplate =\n-          new ImageToJsonTranslator(builtImage)\n-              .getManifestTemplate(\n-                  buildContext.getTargetFormat(), containerConfigurationDigestAndSize);\n+      if (JibSystemProperties.skipExistingImages()\n+          && registryClient.checkImage(imageDigest.toString()).isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2OTU3NQ=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMyMzcyMw==", "bodyText": "Pushed new changes for this.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450323723", "createdAt": "2020-07-06T16:01:49Z", "author": {"login": "karlmuscat"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PushImageStep.java", "diffHunk": "@@ -47,23 +45,25 @@\n       ProgressEventDispatcher.Factory progressEventDispatcherFactory,\n       RegistryClient registryClient,\n       BlobDescriptor containerConfigurationDigestAndSize,\n-      Image builtImage)\n-      throws IOException {\n+      BuildableManifestTemplate manifestTemplate,\n+      DescriptorDigest imageDigest)\n+      throws IOException, RegistryException {\n     Set<String> tags = buildContext.getAllTargetImageTags();\n \n+    EventHandlers eventHandlers = buildContext.getEventHandlers();\n+\n     try (TimerEventDispatcher ignored =\n-            new TimerEventDispatcher(\n-                buildContext.getEventHandlers(), \"Preparing manifest pushers\");\n+            new TimerEventDispatcher(eventHandlers, \"Preparing manifest pushers\");\n         ProgressEventDispatcher progressEventDispatcher =\n             progressEventDispatcherFactory.create(\"launching manifest pushers\", tags.size())) {\n \n-      // Gets the image manifest to push.\n-      BuildableManifestTemplate manifestTemplate =\n-          new ImageToJsonTranslator(builtImage)\n-              .getManifestTemplate(\n-                  buildContext.getTargetFormat(), containerConfigurationDigestAndSize);\n+      if (JibSystemProperties.skipExistingImages()\n+          && registryClient.checkImage(imageDigest.toString()).isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2OTU3NQ=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mzc3NjIwOnYy", "diffSide": "RIGHT", "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/ManifestCheckerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTowMjowOFrOGojAzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTowMjowOFrOGojAzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2OTg2OA==", "bodyText": "2020", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r445169868", "createdAt": "2020-06-24T21:02:08Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/ManifestCheckerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2018 Google LLC.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mzc3OTE0OnYy", "diffSide": "RIGHT", "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/ContainerizerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTowMzoxMVrOGojCtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzo1NDoxNFrOGtYQAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MDM1OA==", "bodyText": "Please catch the specific exception and verify the exception message (assertEquals(..., ex.getMessage()) or assertThat(ex.getMessage(), ....containsString(...)) for example).", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r445170358", "createdAt": "2020-06-24T21:03:11Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/ContainerizerIntegrationTest.java", "diffHunk": "@@ -218,7 +219,60 @@ public void testSteps_forBuildToDockerRegistry_multipleTags()\n   }\n \n   @Test\n-  public void tesBuildToDockerRegistry_dockerHubBaseImage()\n+  public void testSteps_forBuildToDockerRegistry_skipExistingDigest()\n+      throws IOException, InterruptedException, ExecutionException, RegistryException,\n+          CacheDirectoryCreationException {\n+    System.setProperty(JibSystemProperties.SKIP_EXISTING_IMAGES, \"true\");\n+\n+    JibContainer image1 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"testtag\"),\n+            Collections.singletonList(\"testtag2\"));\n+\n+    // Test that the initial image with the original tag has been pushed.\n+    String imageReference = \"localhost:5000/testimagerepo:testtag\";\n+    localRegistry.pull(imageReference);\n+    assertDockerInspect(imageReference);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\", new Command(\"docker\", \"run\", \"--rm\", imageReference).run());\n+\n+    // Test that any additional tags have also been pushed with the original image.\n+    String imageReference2 = \"localhost:5000/testimagerepo:testtag2\";\n+    localRegistry.pull(imageReference2);\n+    assertDockerInspect(imageReference2);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\",\n+        new Command(\"docker\", \"run\", \"--rm\", imageReference2).run());\n+\n+    // Push the same image with a different tag, with SKIP_EXISTING_IMAGES enabled.\n+    JibContainer image2 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"new_testtag\"),\n+            Collections.emptyList());\n+\n+    // Test that the pull request throws an exception, indicating that the new tag was not pushed.\n+    String imageReference3 = \"localhost:5000/testimagerepo:new_testtag\";\n+    try {\n+      localRegistry.pull(imageReference3);\n+      Assert.fail(\n+          \"jib.skipExistingImages was enabled and digest was already pushed, \"\n+              + \"hence testtag2 shouldn't have been pushed.\");\n+    } catch (RuntimeException ignore) {\n+      // As expected, registry throws exception that manifest is unknown.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODAwOQ==", "bodyText": "The exception thrown is a RuntimeException. I'll add assertions on the message though.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450048009", "createdAt": "2020-07-06T07:58:48Z", "author": {"login": "karlmuscat"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/ContainerizerIntegrationTest.java", "diffHunk": "@@ -218,7 +219,60 @@ public void testSteps_forBuildToDockerRegistry_multipleTags()\n   }\n \n   @Test\n-  public void tesBuildToDockerRegistry_dockerHubBaseImage()\n+  public void testSteps_forBuildToDockerRegistry_skipExistingDigest()\n+      throws IOException, InterruptedException, ExecutionException, RegistryException,\n+          CacheDirectoryCreationException {\n+    System.setProperty(JibSystemProperties.SKIP_EXISTING_IMAGES, \"true\");\n+\n+    JibContainer image1 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"testtag\"),\n+            Collections.singletonList(\"testtag2\"));\n+\n+    // Test that the initial image with the original tag has been pushed.\n+    String imageReference = \"localhost:5000/testimagerepo:testtag\";\n+    localRegistry.pull(imageReference);\n+    assertDockerInspect(imageReference);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\", new Command(\"docker\", \"run\", \"--rm\", imageReference).run());\n+\n+    // Test that any additional tags have also been pushed with the original image.\n+    String imageReference2 = \"localhost:5000/testimagerepo:testtag2\";\n+    localRegistry.pull(imageReference2);\n+    assertDockerInspect(imageReference2);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\",\n+        new Command(\"docker\", \"run\", \"--rm\", imageReference2).run());\n+\n+    // Push the same image with a different tag, with SKIP_EXISTING_IMAGES enabled.\n+    JibContainer image2 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"new_testtag\"),\n+            Collections.emptyList());\n+\n+    // Test that the pull request throws an exception, indicating that the new tag was not pushed.\n+    String imageReference3 = \"localhost:5000/testimagerepo:new_testtag\";\n+    try {\n+      localRegistry.pull(imageReference3);\n+      Assert.fail(\n+          \"jib.skipExistingImages was enabled and digest was already pushed, \"\n+              + \"hence testtag2 shouldn't have been pushed.\");\n+    } catch (RuntimeException ignore) {\n+      // As expected, registry throws exception that manifest is unknown.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MDM1OA=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyMjgwMg==", "bodyText": "Sounds good. Please verify the message.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450222802", "createdAt": "2020-07-06T13:32:52Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/ContainerizerIntegrationTest.java", "diffHunk": "@@ -218,7 +219,60 @@ public void testSteps_forBuildToDockerRegistry_multipleTags()\n   }\n \n   @Test\n-  public void tesBuildToDockerRegistry_dockerHubBaseImage()\n+  public void testSteps_forBuildToDockerRegistry_skipExistingDigest()\n+      throws IOException, InterruptedException, ExecutionException, RegistryException,\n+          CacheDirectoryCreationException {\n+    System.setProperty(JibSystemProperties.SKIP_EXISTING_IMAGES, \"true\");\n+\n+    JibContainer image1 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"testtag\"),\n+            Collections.singletonList(\"testtag2\"));\n+\n+    // Test that the initial image with the original tag has been pushed.\n+    String imageReference = \"localhost:5000/testimagerepo:testtag\";\n+    localRegistry.pull(imageReference);\n+    assertDockerInspect(imageReference);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\", new Command(\"docker\", \"run\", \"--rm\", imageReference).run());\n+\n+    // Test that any additional tags have also been pushed with the original image.\n+    String imageReference2 = \"localhost:5000/testimagerepo:testtag2\";\n+    localRegistry.pull(imageReference2);\n+    assertDockerInspect(imageReference2);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\",\n+        new Command(\"docker\", \"run\", \"--rm\", imageReference2).run());\n+\n+    // Push the same image with a different tag, with SKIP_EXISTING_IMAGES enabled.\n+    JibContainer image2 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"new_testtag\"),\n+            Collections.emptyList());\n+\n+    // Test that the pull request throws an exception, indicating that the new tag was not pushed.\n+    String imageReference3 = \"localhost:5000/testimagerepo:new_testtag\";\n+    try {\n+      localRegistry.pull(imageReference3);\n+      Assert.fail(\n+          \"jib.skipExistingImages was enabled and digest was already pushed, \"\n+              + \"hence testtag2 shouldn't have been pushed.\");\n+    } catch (RuntimeException ignore) {\n+      // As expected, registry throws exception that manifest is unknown.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MDM1OA=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIzNjQxOA==", "bodyText": "nit: per our style, it should be ex instead of e:\n } catch (RuntimeException ex) {", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450236418", "createdAt": "2020-07-06T13:54:14Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/ContainerizerIntegrationTest.java", "diffHunk": "@@ -218,7 +219,60 @@ public void testSteps_forBuildToDockerRegistry_multipleTags()\n   }\n \n   @Test\n-  public void tesBuildToDockerRegistry_dockerHubBaseImage()\n+  public void testSteps_forBuildToDockerRegistry_skipExistingDigest()\n+      throws IOException, InterruptedException, ExecutionException, RegistryException,\n+          CacheDirectoryCreationException {\n+    System.setProperty(JibSystemProperties.SKIP_EXISTING_IMAGES, \"true\");\n+\n+    JibContainer image1 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"testtag\"),\n+            Collections.singletonList(\"testtag2\"));\n+\n+    // Test that the initial image with the original tag has been pushed.\n+    String imageReference = \"localhost:5000/testimagerepo:testtag\";\n+    localRegistry.pull(imageReference);\n+    assertDockerInspect(imageReference);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\", new Command(\"docker\", \"run\", \"--rm\", imageReference).run());\n+\n+    // Test that any additional tags have also been pushed with the original image.\n+    String imageReference2 = \"localhost:5000/testimagerepo:testtag2\";\n+    localRegistry.pull(imageReference2);\n+    assertDockerInspect(imageReference2);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\",\n+        new Command(\"docker\", \"run\", \"--rm\", imageReference2).run());\n+\n+    // Push the same image with a different tag, with SKIP_EXISTING_IMAGES enabled.\n+    JibContainer image2 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"new_testtag\"),\n+            Collections.emptyList());\n+\n+    // Test that the pull request throws an exception, indicating that the new tag was not pushed.\n+    String imageReference3 = \"localhost:5000/testimagerepo:new_testtag\";\n+    try {\n+      localRegistry.pull(imageReference3);\n+      Assert.fail(\n+          \"jib.skipExistingImages was enabled and digest was already pushed, \"\n+              + \"hence testtag2 shouldn't have been pushed.\");\n+    } catch (RuntimeException ignore) {\n+      // As expected, registry throws exception that manifest is unknown.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MDM1OA=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mzc4NzgyOnYy", "diffSide": "RIGHT", "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/ContainerizerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTowNjoxMVrOGojIUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzo1MTo1NFrOGtYKQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MTc5NQ==", "bodyText": "We use @Rule RestoreSystemProperties to clean up system properties, because cleaning this way is fragile unless it's wrapper around try { ... } finally { ...}.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r445171795", "createdAt": "2020-06-24T21:06:11Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/ContainerizerIntegrationTest.java", "diffHunk": "@@ -218,7 +219,60 @@ public void testSteps_forBuildToDockerRegistry_multipleTags()\n   }\n \n   @Test\n-  public void tesBuildToDockerRegistry_dockerHubBaseImage()\n+  public void testSteps_forBuildToDockerRegistry_skipExistingDigest()\n+      throws IOException, InterruptedException, ExecutionException, RegistryException,\n+          CacheDirectoryCreationException {\n+    System.setProperty(JibSystemProperties.SKIP_EXISTING_IMAGES, \"true\");\n+\n+    JibContainer image1 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"testtag\"),\n+            Collections.singletonList(\"testtag2\"));\n+\n+    // Test that the initial image with the original tag has been pushed.\n+    String imageReference = \"localhost:5000/testimagerepo:testtag\";\n+    localRegistry.pull(imageReference);\n+    assertDockerInspect(imageReference);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\", new Command(\"docker\", \"run\", \"--rm\", imageReference).run());\n+\n+    // Test that any additional tags have also been pushed with the original image.\n+    String imageReference2 = \"localhost:5000/testimagerepo:testtag2\";\n+    localRegistry.pull(imageReference2);\n+    assertDockerInspect(imageReference2);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\",\n+        new Command(\"docker\", \"run\", \"--rm\", imageReference2).run());\n+\n+    // Push the same image with a different tag, with SKIP_EXISTING_IMAGES enabled.\n+    JibContainer image2 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"new_testtag\"),\n+            Collections.emptyList());\n+\n+    // Test that the pull request throws an exception, indicating that the new tag was not pushed.\n+    String imageReference3 = \"localhost:5000/testimagerepo:new_testtag\";\n+    try {\n+      localRegistry.pull(imageReference3);\n+      Assert.fail(\n+          \"jib.skipExistingImages was enabled and digest was already pushed, \"\n+              + \"hence testtag2 shouldn't have been pushed.\");\n+    } catch (RuntimeException ignore) {\n+      // As expected, registry throws exception that manifest is unknown.\n+    }\n+\n+    // Test that both images have the same properties.\n+    Assert.assertEquals(image1.getDigest(), image2.getDigest());\n+    Assert.assertEquals(image1.getImageId(), image2.getImageId());\n+\n+    // Cleanup. Disable option to not disrupt other tests.\n+    System.setProperty(JibSystemProperties.SKIP_EXISTING_IMAGES, \"false\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyMzY0NA==", "bodyText": "Just in case, I will \"unresolve\" conversations (include this) until I can verify actual changes. :)", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450223644", "createdAt": "2020-07-06T13:34:13Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/ContainerizerIntegrationTest.java", "diffHunk": "@@ -218,7 +219,60 @@ public void testSteps_forBuildToDockerRegistry_multipleTags()\n   }\n \n   @Test\n-  public void tesBuildToDockerRegistry_dockerHubBaseImage()\n+  public void testSteps_forBuildToDockerRegistry_skipExistingDigest()\n+      throws IOException, InterruptedException, ExecutionException, RegistryException,\n+          CacheDirectoryCreationException {\n+    System.setProperty(JibSystemProperties.SKIP_EXISTING_IMAGES, \"true\");\n+\n+    JibContainer image1 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"testtag\"),\n+            Collections.singletonList(\"testtag2\"));\n+\n+    // Test that the initial image with the original tag has been pushed.\n+    String imageReference = \"localhost:5000/testimagerepo:testtag\";\n+    localRegistry.pull(imageReference);\n+    assertDockerInspect(imageReference);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\", new Command(\"docker\", \"run\", \"--rm\", imageReference).run());\n+\n+    // Test that any additional tags have also been pushed with the original image.\n+    String imageReference2 = \"localhost:5000/testimagerepo:testtag2\";\n+    localRegistry.pull(imageReference2);\n+    assertDockerInspect(imageReference2);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\",\n+        new Command(\"docker\", \"run\", \"--rm\", imageReference2).run());\n+\n+    // Push the same image with a different tag, with SKIP_EXISTING_IMAGES enabled.\n+    JibContainer image2 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"new_testtag\"),\n+            Collections.emptyList());\n+\n+    // Test that the pull request throws an exception, indicating that the new tag was not pushed.\n+    String imageReference3 = \"localhost:5000/testimagerepo:new_testtag\";\n+    try {\n+      localRegistry.pull(imageReference3);\n+      Assert.fail(\n+          \"jib.skipExistingImages was enabled and digest was already pushed, \"\n+              + \"hence testtag2 shouldn't have been pushed.\");\n+    } catch (RuntimeException ignore) {\n+      // As expected, registry throws exception that manifest is unknown.\n+    }\n+\n+    // Test that both images have the same properties.\n+    Assert.assertEquals(image1.getDigest(), image2.getDigest());\n+    Assert.assertEquals(image1.getImageId(), image2.getImageId());\n+\n+    // Cleanup. Disable option to not disrupt other tests.\n+    System.setProperty(JibSystemProperties.SKIP_EXISTING_IMAGES, \"false\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MTc5NQ=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIzNDk0NA==", "bodyText": "Ah, I was looking at an earlier commit. I will undo \"unresolving\".", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450234944", "createdAt": "2020-07-06T13:51:54Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/ContainerizerIntegrationTest.java", "diffHunk": "@@ -218,7 +219,60 @@ public void testSteps_forBuildToDockerRegistry_multipleTags()\n   }\n \n   @Test\n-  public void tesBuildToDockerRegistry_dockerHubBaseImage()\n+  public void testSteps_forBuildToDockerRegistry_skipExistingDigest()\n+      throws IOException, InterruptedException, ExecutionException, RegistryException,\n+          CacheDirectoryCreationException {\n+    System.setProperty(JibSystemProperties.SKIP_EXISTING_IMAGES, \"true\");\n+\n+    JibContainer image1 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"testtag\"),\n+            Collections.singletonList(\"testtag2\"));\n+\n+    // Test that the initial image with the original tag has been pushed.\n+    String imageReference = \"localhost:5000/testimagerepo:testtag\";\n+    localRegistry.pull(imageReference);\n+    assertDockerInspect(imageReference);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\", new Command(\"docker\", \"run\", \"--rm\", imageReference).run());\n+\n+    // Test that any additional tags have also been pushed with the original image.\n+    String imageReference2 = \"localhost:5000/testimagerepo:testtag2\";\n+    localRegistry.pull(imageReference2);\n+    assertDockerInspect(imageReference2);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\",\n+        new Command(\"docker\", \"run\", \"--rm\", imageReference2).run());\n+\n+    // Push the same image with a different tag, with SKIP_EXISTING_IMAGES enabled.\n+    JibContainer image2 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"new_testtag\"),\n+            Collections.emptyList());\n+\n+    // Test that the pull request throws an exception, indicating that the new tag was not pushed.\n+    String imageReference3 = \"localhost:5000/testimagerepo:new_testtag\";\n+    try {\n+      localRegistry.pull(imageReference3);\n+      Assert.fail(\n+          \"jib.skipExistingImages was enabled and digest was already pushed, \"\n+              + \"hence testtag2 shouldn't have been pushed.\");\n+    } catch (RuntimeException ignore) {\n+      // As expected, registry throws exception that manifest is unknown.\n+    }\n+\n+    // Test that both images have the same properties.\n+    Assert.assertEquals(image1.getDigest(), image2.getDigest());\n+    Assert.assertEquals(image1.getImageId(), image2.getImageId());\n+\n+    // Cleanup. Disable option to not disrupt other tests.\n+    System.setProperty(JibSystemProperties.SKIP_EXISTING_IMAGES, \"false\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MTc5NQ=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mzc5NjUxOnYy", "diffSide": "RIGHT", "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/ContainerizerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTowOToxN1rOGojN1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzoyNjozNVrOGtXLdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MzIwNw==", "bodyText": "I think we can skip this testing, as the target of this test method is to test SKIP_EXISTING_IMAGES. Our integration are increasing running more Docker images and getting slower.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r445173207", "createdAt": "2020-06-24T21:09:17Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/ContainerizerIntegrationTest.java", "diffHunk": "@@ -218,7 +219,60 @@ public void testSteps_forBuildToDockerRegistry_multipleTags()\n   }\n \n   @Test\n-  public void tesBuildToDockerRegistry_dockerHubBaseImage()\n+  public void testSteps_forBuildToDockerRegistry_skipExistingDigest()\n+      throws IOException, InterruptedException, ExecutionException, RegistryException,\n+          CacheDirectoryCreationException {\n+    System.setProperty(JibSystemProperties.SKIP_EXISTING_IMAGES, \"true\");\n+\n+    JibContainer image1 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"testtag\"),\n+            Collections.singletonList(\"testtag2\"));\n+\n+    // Test that the initial image with the original tag has been pushed.\n+    String imageReference = \"localhost:5000/testimagerepo:testtag\";\n+    localRegistry.pull(imageReference);\n+    assertDockerInspect(imageReference);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\", new Command(\"docker\", \"run\", \"--rm\", imageReference).run());\n+\n+    // Test that any additional tags have also been pushed with the original image.\n+    String imageReference2 = \"localhost:5000/testimagerepo:testtag2\";\n+    localRegistry.pull(imageReference2);\n+    assertDockerInspect(imageReference2);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\",\n+        new Command(\"docker\", \"run\", \"--rm\", imageReference2).run());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0NjkxOQ==", "bodyText": "Do you mean that all the test is unnecessary, or just the part where testtag and testtag2 are pulled and tested for existence?", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450046919", "createdAt": "2020-07-06T07:56:38Z", "author": {"login": "karlmuscat"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/ContainerizerIntegrationTest.java", "diffHunk": "@@ -218,7 +219,60 @@ public void testSteps_forBuildToDockerRegistry_multipleTags()\n   }\n \n   @Test\n-  public void tesBuildToDockerRegistry_dockerHubBaseImage()\n+  public void testSteps_forBuildToDockerRegistry_skipExistingDigest()\n+      throws IOException, InterruptedException, ExecutionException, RegistryException,\n+          CacheDirectoryCreationException {\n+    System.setProperty(JibSystemProperties.SKIP_EXISTING_IMAGES, \"true\");\n+\n+    JibContainer image1 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"testtag\"),\n+            Collections.singletonList(\"testtag2\"));\n+\n+    // Test that the initial image with the original tag has been pushed.\n+    String imageReference = \"localhost:5000/testimagerepo:testtag\";\n+    localRegistry.pull(imageReference);\n+    assertDockerInspect(imageReference);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\", new Command(\"docker\", \"run\", \"--rm\", imageReference).run());\n+\n+    // Test that any additional tags have also been pushed with the original image.\n+    String imageReference2 = \"localhost:5000/testimagerepo:testtag2\";\n+    localRegistry.pull(imageReference2);\n+    assertDockerInspect(imageReference2);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\",\n+        new Command(\"docker\", \"run\", \"--rm\", imageReference2).run());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MzIwNw=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIxODg3MA==", "bodyText": "Sorry, I mean this \"Hello, world\" assertion on this line and and assertDockerInpsect() on line 243. Also remove them on line 236 and 237.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450218870", "createdAt": "2020-07-06T13:26:35Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/ContainerizerIntegrationTest.java", "diffHunk": "@@ -218,7 +219,60 @@ public void testSteps_forBuildToDockerRegistry_multipleTags()\n   }\n \n   @Test\n-  public void tesBuildToDockerRegistry_dockerHubBaseImage()\n+  public void testSteps_forBuildToDockerRegistry_skipExistingDigest()\n+      throws IOException, InterruptedException, ExecutionException, RegistryException,\n+          CacheDirectoryCreationException {\n+    System.setProperty(JibSystemProperties.SKIP_EXISTING_IMAGES, \"true\");\n+\n+    JibContainer image1 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"testtag\"),\n+            Collections.singletonList(\"testtag2\"));\n+\n+    // Test that the initial image with the original tag has been pushed.\n+    String imageReference = \"localhost:5000/testimagerepo:testtag\";\n+    localRegistry.pull(imageReference);\n+    assertDockerInspect(imageReference);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\", new Command(\"docker\", \"run\", \"--rm\", imageReference).run());\n+\n+    // Test that any additional tags have also been pushed with the original image.\n+    String imageReference2 = \"localhost:5000/testimagerepo:testtag2\";\n+    localRegistry.pull(imageReference2);\n+    assertDockerInspect(imageReference2);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\",\n+        new Command(\"docker\", \"run\", \"--rm\", imageReference2).run());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MzIwNw=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mzc5OTgwOnYy", "diffSide": "RIGHT", "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/ContainerizerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMToxMDoxM1rOGojPww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMToxMDoxM1rOGojPww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MzY5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String imageReference3 = \"localhost:5000/testimagerepo:new_testtag\";\n          \n          \n            \n                try {\n          \n          \n            \n                  localRegistry.pull(imageReference3);\n          \n          \n            \n                try {\n          \n          \n            \n                  localRegistry.pull(\"localhost:5000/testimagerepo:new_testtag\");", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r445173699", "createdAt": "2020-06-24T21:10:13Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/ContainerizerIntegrationTest.java", "diffHunk": "@@ -218,7 +219,60 @@ public void testSteps_forBuildToDockerRegistry_multipleTags()\n   }\n \n   @Test\n-  public void tesBuildToDockerRegistry_dockerHubBaseImage()\n+  public void testSteps_forBuildToDockerRegistry_skipExistingDigest()\n+      throws IOException, InterruptedException, ExecutionException, RegistryException,\n+          CacheDirectoryCreationException {\n+    System.setProperty(JibSystemProperties.SKIP_EXISTING_IMAGES, \"true\");\n+\n+    JibContainer image1 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"testtag\"),\n+            Collections.singletonList(\"testtag2\"));\n+\n+    // Test that the initial image with the original tag has been pushed.\n+    String imageReference = \"localhost:5000/testimagerepo:testtag\";\n+    localRegistry.pull(imageReference);\n+    assertDockerInspect(imageReference);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\", new Command(\"docker\", \"run\", \"--rm\", imageReference).run());\n+\n+    // Test that any additional tags have also been pushed with the original image.\n+    String imageReference2 = \"localhost:5000/testimagerepo:testtag2\";\n+    localRegistry.pull(imageReference2);\n+    assertDockerInspect(imageReference2);\n+    Assert.assertEquals(\n+        \"Hello, world. An argument.\\n\",\n+        new Command(\"docker\", \"run\", \"--rm\", imageReference2).run());\n+\n+    // Push the same image with a different tag, with SKIP_EXISTING_IMAGES enabled.\n+    JibContainer image2 =\n+        buildRegistryImage(\n+            ImageReference.of(\"gcr.io\", \"distroless/java\", DISTROLESS_DIGEST),\n+            ImageReference.of(\"localhost:5000\", \"testimagerepo\", \"new_testtag\"),\n+            Collections.emptyList());\n+\n+    // Test that the pull request throws an exception, indicating that the new tag was not pushed.\n+    String imageReference3 = \"localhost:5000/testimagerepo:new_testtag\";\n+    try {\n+      localRegistry.pull(imageReference3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzgwNzgxOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMToxMjo0OFrOGojUpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMToxMjo0OFrOGojUpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3NDk0OA==", "bodyText": "I didn't find any usage of passing manifestTemplateClass in this PR. Maybe just\n  public Optional<ManifestAndDigest<ManifestTemplate>> checkImage(String imageDigest)\n\n?", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r445174948", "createdAt": "2020-06-24T21:12:48Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryClient.java", "diffHunk": "@@ -367,6 +367,31 @@ private Authorization refreshBearerAuth(@Nullable String wwwAuthenticate)\n     return Verify.verifyNotNull(initialBearerAuthenticator.get()).authenticatePush(credential);\n   }\n \n+  /**\n+   * Check if an image is on the registry.\n+   *\n+   * @param <T> child type of ManifestTemplate\n+   * @param manifestTemplateClass the specific version of manifest template to check\n+   * @param imageDigest the image digest to check for\n+   * @return the image's {@link ManifestAndDigest} if the image exists on the registry, or {@link\n+   *     Optional#empty()} if it doesn't\n+   * @throws IOException if communicating with the endpoint fails\n+   * @throws RegistryException if communicating with the endpoint fails\n+   */\n+  public <T extends ManifestTemplate> Optional<ManifestAndDigest<T>> checkImage(\n+      String imageDigest, Class<T> manifestTemplateClass) throws IOException, RegistryException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjk2NzM0OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/ManifestChecker.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzo0ODo1OFrOGtYC3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDozMToxOFrOGuBYMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIzMzA1Mw==", "bodyText": "Could you explain these two checks (responseException.getContext() and ErrorCodes.MANIFEST_UNKNOWN)? I am asking because we've seen different registries have different behaviors that are not really conformant to the Registry API standard, and would like to know if these checks are specific to a certain registry implementation.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450233053", "createdAt": "2020-07-06T13:48:58Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/ManifestChecker.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.registry;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.cloud.tools.jib.api.DescriptorDigest;\n+import com.google.cloud.tools.jib.hash.Digests;\n+import com.google.cloud.tools.jib.http.BlobHttpContent;\n+import com.google.cloud.tools.jib.http.Response;\n+import com.google.cloud.tools.jib.http.ResponseException;\n+import com.google.cloud.tools.jib.image.json.ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.OciManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.UnknownManifestFormatException;\n+import com.google.cloud.tools.jib.image.json.V21ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestListTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** Checks an image's manifest. */\n+public class ManifestChecker<T extends ManifestTemplate>\n+    implements RegistryEndpointProvider<Optional<ManifestAndDigest<T>>> {\n+\n+  private final RegistryEndpointRequestProperties registryEndpointRequestProperties;\n+  private final String imageDescriptor;\n+  private final Class<T> manifestTemplateClass;\n+\n+  ManifestChecker(\n+      RegistryEndpointRequestProperties registryEndpointRequestProperties,\n+      String imageDescriptor,\n+      Class<T> manifestTemplateClass) {\n+    this.registryEndpointRequestProperties = registryEndpointRequestProperties;\n+    this.imageDescriptor = imageDescriptor;\n+    this.manifestTemplateClass = manifestTemplateClass;\n+  }\n+\n+  @Nullable\n+  @Override\n+  public BlobHttpContent getContent() {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<String> getAccept() {\n+    if (manifestTemplateClass.equals(V21ManifestTemplate.class)) {\n+      return Collections.singletonList(V21ManifestTemplate.MEDIA_TYPE);\n+    }\n+    if (manifestTemplateClass.equals(V22ManifestTemplate.class)) {\n+      return Collections.singletonList(V22ManifestTemplate.MANIFEST_MEDIA_TYPE);\n+    }\n+    if (manifestTemplateClass.equals(OciManifestTemplate.class)) {\n+      return Collections.singletonList(OciManifestTemplate.MANIFEST_MEDIA_TYPE);\n+    }\n+    if (manifestTemplateClass.equals(V22ManifestListTemplate.class)) {\n+      return Collections.singletonList(V22ManifestListTemplate.MANIFEST_MEDIA_TYPE);\n+    }\n+\n+    // V22ManifestListTemplate is not included by default, we don't explicitly accept\n+    // it, we only handle it if referenced by sha256 (see getManifestTemplateFromJson) in which\n+    // case registries ignore the \"accept\" directive and just return a manifest list anyway.\n+    return Arrays.asList(\n+        OciManifestTemplate.MANIFEST_MEDIA_TYPE,\n+        V22ManifestTemplate.MANIFEST_MEDIA_TYPE,\n+        V21ManifestTemplate.MEDIA_TYPE);\n+  }\n+\n+  /** Parses the response body into a {@link ManifestAndDigest}. */\n+  @Override\n+  public Optional<ManifestAndDigest<T>> handleResponse(Response response)\n+      throws IOException, UnknownManifestFormatException {\n+    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+    DescriptorDigest digest =\n+        Digests.computeDigest(response.getBody(), byteArrayOutputStream).getDigest();\n+    String jsonString = byteArrayOutputStream.toString(StandardCharsets.UTF_8.name());\n+    T manifestTemplate = getManifestTemplateFromJson(jsonString);\n+    return Optional.of(new ManifestAndDigest<>(manifestTemplate, digest));\n+  }\n+\n+  @Override\n+  public URL getApiRoute(String apiRouteBase) throws MalformedURLException {\n+    return new URL(\n+        apiRouteBase\n+            + registryEndpointRequestProperties.getImageName()\n+            + \"/manifests/\"\n+            + imageDescriptor);\n+  }\n+\n+  @Override\n+  public String getHttpMethod() {\n+    return HttpMethods.GET;\n+  }\n+\n+  @Override\n+  public String getActionDescription() {\n+    return \"pull image manifest for \"\n+        + registryEndpointRequestProperties.getServerUrl()\n+        + \"/\"\n+        + registryEndpointRequestProperties.getImageName()\n+        + \":\"\n+        + imageDescriptor;\n+  }\n+\n+  /**\n+   * Instantiates a {@link ManifestTemplate} from a JSON string. This checks the {@code\n+   * schemaVersion} field of the JSON to determine which manifest version to use.\n+   */\n+  private T getManifestTemplateFromJson(String jsonString)\n+      throws IOException, UnknownManifestFormatException {\n+    ObjectNode node = new ObjectMapper().readValue(jsonString, ObjectNode.class);\n+    if (!node.has(\"schemaVersion\")) {\n+      throw new UnknownManifestFormatException(\"Cannot find field 'schemaVersion' in manifest\");\n+    }\n+\n+    int schemaVersion = node.get(\"schemaVersion\").asInt(-1);\n+    if (schemaVersion == -1) {\n+      throw new UnknownManifestFormatException(\"`schemaVersion` field is not an integer\");\n+    }\n+\n+    if (schemaVersion == 1) {\n+      return manifestTemplateClass.cast(\n+          JsonTemplateMapper.readJson(jsonString, V21ManifestTemplate.class));\n+    }\n+    if (schemaVersion == 2) {\n+      // 'schemaVersion' of 2 can be either Docker V2.2 or OCI.\n+      String mediaType = node.get(\"mediaType\").asText();\n+      if (V22ManifestTemplate.MANIFEST_MEDIA_TYPE.equals(mediaType)) {\n+        return manifestTemplateClass.cast(\n+            JsonTemplateMapper.readJson(jsonString, V22ManifestTemplate.class));\n+      }\n+      if (OciManifestTemplate.MANIFEST_MEDIA_TYPE.equals(mediaType)) {\n+        return manifestTemplateClass.cast(\n+            JsonTemplateMapper.readJson(jsonString, OciManifestTemplate.class));\n+      }\n+      if (V22ManifestListTemplate.MANIFEST_MEDIA_TYPE.equals(mediaType)) {\n+        return manifestTemplateClass.cast(\n+            JsonTemplateMapper.readJson(jsonString, V22ManifestListTemplate.class));\n+      }\n+      throw new UnknownManifestFormatException(\"Unknown mediaType: \" + mediaType);\n+    }\n+    throw new UnknownManifestFormatException(\n+        \"Unknown schemaVersion: \" + schemaVersion + \" - only 1 and 2 are supported\");\n+  }\n+\n+  @Override\n+  public Optional<ManifestAndDigest<T>> handleHttpResponseException(\n+      ResponseException responseException) throws ResponseException {\n+    if (responseException.getStatusCode() != HttpStatusCodes.STATUS_CODE_NOT_FOUND) {\n+      throw responseException;\n+    }\n+\n+    // Finds a MANIFEST_BLOB_UNKNOWN error response code.\n+    if (responseException.getContent() == null) {\n+      return Optional.empty();\n+    }\n+\n+    ErrorCodes errorCode = ErrorResponseUtil.getErrorCode(responseException);\n+    if (errorCode == ErrorCodes.MANIFEST_UNKNOWN) {\n+      return Optional.empty();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI0MDI3OA==", "bodyText": "I have followed the same pattern done in BlobChecker.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450240278", "createdAt": "2020-07-06T13:59:36Z", "author": {"login": "karlmuscat"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/ManifestChecker.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.registry;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.cloud.tools.jib.api.DescriptorDigest;\n+import com.google.cloud.tools.jib.hash.Digests;\n+import com.google.cloud.tools.jib.http.BlobHttpContent;\n+import com.google.cloud.tools.jib.http.Response;\n+import com.google.cloud.tools.jib.http.ResponseException;\n+import com.google.cloud.tools.jib.image.json.ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.OciManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.UnknownManifestFormatException;\n+import com.google.cloud.tools.jib.image.json.V21ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestListTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** Checks an image's manifest. */\n+public class ManifestChecker<T extends ManifestTemplate>\n+    implements RegistryEndpointProvider<Optional<ManifestAndDigest<T>>> {\n+\n+  private final RegistryEndpointRequestProperties registryEndpointRequestProperties;\n+  private final String imageDescriptor;\n+  private final Class<T> manifestTemplateClass;\n+\n+  ManifestChecker(\n+      RegistryEndpointRequestProperties registryEndpointRequestProperties,\n+      String imageDescriptor,\n+      Class<T> manifestTemplateClass) {\n+    this.registryEndpointRequestProperties = registryEndpointRequestProperties;\n+    this.imageDescriptor = imageDescriptor;\n+    this.manifestTemplateClass = manifestTemplateClass;\n+  }\n+\n+  @Nullable\n+  @Override\n+  public BlobHttpContent getContent() {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<String> getAccept() {\n+    if (manifestTemplateClass.equals(V21ManifestTemplate.class)) {\n+      return Collections.singletonList(V21ManifestTemplate.MEDIA_TYPE);\n+    }\n+    if (manifestTemplateClass.equals(V22ManifestTemplate.class)) {\n+      return Collections.singletonList(V22ManifestTemplate.MANIFEST_MEDIA_TYPE);\n+    }\n+    if (manifestTemplateClass.equals(OciManifestTemplate.class)) {\n+      return Collections.singletonList(OciManifestTemplate.MANIFEST_MEDIA_TYPE);\n+    }\n+    if (manifestTemplateClass.equals(V22ManifestListTemplate.class)) {\n+      return Collections.singletonList(V22ManifestListTemplate.MANIFEST_MEDIA_TYPE);\n+    }\n+\n+    // V22ManifestListTemplate is not included by default, we don't explicitly accept\n+    // it, we only handle it if referenced by sha256 (see getManifestTemplateFromJson) in which\n+    // case registries ignore the \"accept\" directive and just return a manifest list anyway.\n+    return Arrays.asList(\n+        OciManifestTemplate.MANIFEST_MEDIA_TYPE,\n+        V22ManifestTemplate.MANIFEST_MEDIA_TYPE,\n+        V21ManifestTemplate.MEDIA_TYPE);\n+  }\n+\n+  /** Parses the response body into a {@link ManifestAndDigest}. */\n+  @Override\n+  public Optional<ManifestAndDigest<T>> handleResponse(Response response)\n+      throws IOException, UnknownManifestFormatException {\n+    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+    DescriptorDigest digest =\n+        Digests.computeDigest(response.getBody(), byteArrayOutputStream).getDigest();\n+    String jsonString = byteArrayOutputStream.toString(StandardCharsets.UTF_8.name());\n+    T manifestTemplate = getManifestTemplateFromJson(jsonString);\n+    return Optional.of(new ManifestAndDigest<>(manifestTemplate, digest));\n+  }\n+\n+  @Override\n+  public URL getApiRoute(String apiRouteBase) throws MalformedURLException {\n+    return new URL(\n+        apiRouteBase\n+            + registryEndpointRequestProperties.getImageName()\n+            + \"/manifests/\"\n+            + imageDescriptor);\n+  }\n+\n+  @Override\n+  public String getHttpMethod() {\n+    return HttpMethods.GET;\n+  }\n+\n+  @Override\n+  public String getActionDescription() {\n+    return \"pull image manifest for \"\n+        + registryEndpointRequestProperties.getServerUrl()\n+        + \"/\"\n+        + registryEndpointRequestProperties.getImageName()\n+        + \":\"\n+        + imageDescriptor;\n+  }\n+\n+  /**\n+   * Instantiates a {@link ManifestTemplate} from a JSON string. This checks the {@code\n+   * schemaVersion} field of the JSON to determine which manifest version to use.\n+   */\n+  private T getManifestTemplateFromJson(String jsonString)\n+      throws IOException, UnknownManifestFormatException {\n+    ObjectNode node = new ObjectMapper().readValue(jsonString, ObjectNode.class);\n+    if (!node.has(\"schemaVersion\")) {\n+      throw new UnknownManifestFormatException(\"Cannot find field 'schemaVersion' in manifest\");\n+    }\n+\n+    int schemaVersion = node.get(\"schemaVersion\").asInt(-1);\n+    if (schemaVersion == -1) {\n+      throw new UnknownManifestFormatException(\"`schemaVersion` field is not an integer\");\n+    }\n+\n+    if (schemaVersion == 1) {\n+      return manifestTemplateClass.cast(\n+          JsonTemplateMapper.readJson(jsonString, V21ManifestTemplate.class));\n+    }\n+    if (schemaVersion == 2) {\n+      // 'schemaVersion' of 2 can be either Docker V2.2 or OCI.\n+      String mediaType = node.get(\"mediaType\").asText();\n+      if (V22ManifestTemplate.MANIFEST_MEDIA_TYPE.equals(mediaType)) {\n+        return manifestTemplateClass.cast(\n+            JsonTemplateMapper.readJson(jsonString, V22ManifestTemplate.class));\n+      }\n+      if (OciManifestTemplate.MANIFEST_MEDIA_TYPE.equals(mediaType)) {\n+        return manifestTemplateClass.cast(\n+            JsonTemplateMapper.readJson(jsonString, OciManifestTemplate.class));\n+      }\n+      if (V22ManifestListTemplate.MANIFEST_MEDIA_TYPE.equals(mediaType)) {\n+        return manifestTemplateClass.cast(\n+            JsonTemplateMapper.readJson(jsonString, V22ManifestListTemplate.class));\n+      }\n+      throw new UnknownManifestFormatException(\"Unknown mediaType: \" + mediaType);\n+    }\n+    throw new UnknownManifestFormatException(\n+        \"Unknown schemaVersion: \" + schemaVersion + \" - only 1 and 2 are supported\");\n+  }\n+\n+  @Override\n+  public Optional<ManifestAndDigest<T>> handleHttpResponseException(\n+      ResponseException responseException) throws ResponseException {\n+    if (responseException.getStatusCode() != HttpStatusCodes.STATUS_CODE_NOT_FOUND) {\n+      throw responseException;\n+    }\n+\n+    // Finds a MANIFEST_BLOB_UNKNOWN error response code.\n+    if (responseException.getContent() == null) {\n+      return Optional.empty();\n+    }\n+\n+    ErrorCodes errorCode = ErrorResponseUtil.getErrorCode(responseException);\n+    if (errorCode == ErrorCodes.MANIFEST_UNKNOWN) {\n+      return Optional.empty();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIzMzA1Mw=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxMTg3NA==", "bodyText": "Alright, I will look into the Registry API specification later for this part and will probably take care of this one way or another in a follow-up PR. But I think at least this works and doesn't actually break things, since this is just an extra manifest check; the worst case would be getting an error later. So I think we are good to go.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450411874", "createdAt": "2020-07-06T18:42:08Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/ManifestChecker.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.registry;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.cloud.tools.jib.api.DescriptorDigest;\n+import com.google.cloud.tools.jib.hash.Digests;\n+import com.google.cloud.tools.jib.http.BlobHttpContent;\n+import com.google.cloud.tools.jib.http.Response;\n+import com.google.cloud.tools.jib.http.ResponseException;\n+import com.google.cloud.tools.jib.image.json.ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.OciManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.UnknownManifestFormatException;\n+import com.google.cloud.tools.jib.image.json.V21ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestListTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** Checks an image's manifest. */\n+public class ManifestChecker<T extends ManifestTemplate>\n+    implements RegistryEndpointProvider<Optional<ManifestAndDigest<T>>> {\n+\n+  private final RegistryEndpointRequestProperties registryEndpointRequestProperties;\n+  private final String imageDescriptor;\n+  private final Class<T> manifestTemplateClass;\n+\n+  ManifestChecker(\n+      RegistryEndpointRequestProperties registryEndpointRequestProperties,\n+      String imageDescriptor,\n+      Class<T> manifestTemplateClass) {\n+    this.registryEndpointRequestProperties = registryEndpointRequestProperties;\n+    this.imageDescriptor = imageDescriptor;\n+    this.manifestTemplateClass = manifestTemplateClass;\n+  }\n+\n+  @Nullable\n+  @Override\n+  public BlobHttpContent getContent() {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<String> getAccept() {\n+    if (manifestTemplateClass.equals(V21ManifestTemplate.class)) {\n+      return Collections.singletonList(V21ManifestTemplate.MEDIA_TYPE);\n+    }\n+    if (manifestTemplateClass.equals(V22ManifestTemplate.class)) {\n+      return Collections.singletonList(V22ManifestTemplate.MANIFEST_MEDIA_TYPE);\n+    }\n+    if (manifestTemplateClass.equals(OciManifestTemplate.class)) {\n+      return Collections.singletonList(OciManifestTemplate.MANIFEST_MEDIA_TYPE);\n+    }\n+    if (manifestTemplateClass.equals(V22ManifestListTemplate.class)) {\n+      return Collections.singletonList(V22ManifestListTemplate.MANIFEST_MEDIA_TYPE);\n+    }\n+\n+    // V22ManifestListTemplate is not included by default, we don't explicitly accept\n+    // it, we only handle it if referenced by sha256 (see getManifestTemplateFromJson) in which\n+    // case registries ignore the \"accept\" directive and just return a manifest list anyway.\n+    return Arrays.asList(\n+        OciManifestTemplate.MANIFEST_MEDIA_TYPE,\n+        V22ManifestTemplate.MANIFEST_MEDIA_TYPE,\n+        V21ManifestTemplate.MEDIA_TYPE);\n+  }\n+\n+  /** Parses the response body into a {@link ManifestAndDigest}. */\n+  @Override\n+  public Optional<ManifestAndDigest<T>> handleResponse(Response response)\n+      throws IOException, UnknownManifestFormatException {\n+    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+    DescriptorDigest digest =\n+        Digests.computeDigest(response.getBody(), byteArrayOutputStream).getDigest();\n+    String jsonString = byteArrayOutputStream.toString(StandardCharsets.UTF_8.name());\n+    T manifestTemplate = getManifestTemplateFromJson(jsonString);\n+    return Optional.of(new ManifestAndDigest<>(manifestTemplate, digest));\n+  }\n+\n+  @Override\n+  public URL getApiRoute(String apiRouteBase) throws MalformedURLException {\n+    return new URL(\n+        apiRouteBase\n+            + registryEndpointRequestProperties.getImageName()\n+            + \"/manifests/\"\n+            + imageDescriptor);\n+  }\n+\n+  @Override\n+  public String getHttpMethod() {\n+    return HttpMethods.GET;\n+  }\n+\n+  @Override\n+  public String getActionDescription() {\n+    return \"pull image manifest for \"\n+        + registryEndpointRequestProperties.getServerUrl()\n+        + \"/\"\n+        + registryEndpointRequestProperties.getImageName()\n+        + \":\"\n+        + imageDescriptor;\n+  }\n+\n+  /**\n+   * Instantiates a {@link ManifestTemplate} from a JSON string. This checks the {@code\n+   * schemaVersion} field of the JSON to determine which manifest version to use.\n+   */\n+  private T getManifestTemplateFromJson(String jsonString)\n+      throws IOException, UnknownManifestFormatException {\n+    ObjectNode node = new ObjectMapper().readValue(jsonString, ObjectNode.class);\n+    if (!node.has(\"schemaVersion\")) {\n+      throw new UnknownManifestFormatException(\"Cannot find field 'schemaVersion' in manifest\");\n+    }\n+\n+    int schemaVersion = node.get(\"schemaVersion\").asInt(-1);\n+    if (schemaVersion == -1) {\n+      throw new UnknownManifestFormatException(\"`schemaVersion` field is not an integer\");\n+    }\n+\n+    if (schemaVersion == 1) {\n+      return manifestTemplateClass.cast(\n+          JsonTemplateMapper.readJson(jsonString, V21ManifestTemplate.class));\n+    }\n+    if (schemaVersion == 2) {\n+      // 'schemaVersion' of 2 can be either Docker V2.2 or OCI.\n+      String mediaType = node.get(\"mediaType\").asText();\n+      if (V22ManifestTemplate.MANIFEST_MEDIA_TYPE.equals(mediaType)) {\n+        return manifestTemplateClass.cast(\n+            JsonTemplateMapper.readJson(jsonString, V22ManifestTemplate.class));\n+      }\n+      if (OciManifestTemplate.MANIFEST_MEDIA_TYPE.equals(mediaType)) {\n+        return manifestTemplateClass.cast(\n+            JsonTemplateMapper.readJson(jsonString, OciManifestTemplate.class));\n+      }\n+      if (V22ManifestListTemplate.MANIFEST_MEDIA_TYPE.equals(mediaType)) {\n+        return manifestTemplateClass.cast(\n+            JsonTemplateMapper.readJson(jsonString, V22ManifestListTemplate.class));\n+      }\n+      throw new UnknownManifestFormatException(\"Unknown mediaType: \" + mediaType);\n+    }\n+    throw new UnknownManifestFormatException(\n+        \"Unknown schemaVersion: \" + schemaVersion + \" - only 1 and 2 are supported\");\n+  }\n+\n+  @Override\n+  public Optional<ManifestAndDigest<T>> handleHttpResponseException(\n+      ResponseException responseException) throws ResponseException {\n+    if (responseException.getStatusCode() != HttpStatusCodes.STATUS_CODE_NOT_FOUND) {\n+      throw responseException;\n+    }\n+\n+    // Finds a MANIFEST_BLOB_UNKNOWN error response code.\n+    if (responseException.getContent() == null) {\n+      return Optional.empty();\n+    }\n+\n+    ErrorCodes errorCode = ErrorResponseUtil.getErrorCode(responseException);\n+    if (errorCode == ErrorCodes.MANIFEST_UNKNOWN) {\n+      return Optional.empty();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIzMzA1Mw=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxMDI1OA==", "bodyText": "This looks good.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450910258", "createdAt": "2020-07-07T14:31:18Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/registry/ManifestChecker.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.registry;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.cloud.tools.jib.api.DescriptorDigest;\n+import com.google.cloud.tools.jib.hash.Digests;\n+import com.google.cloud.tools.jib.http.BlobHttpContent;\n+import com.google.cloud.tools.jib.http.Response;\n+import com.google.cloud.tools.jib.http.ResponseException;\n+import com.google.cloud.tools.jib.image.json.ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.OciManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.UnknownManifestFormatException;\n+import com.google.cloud.tools.jib.image.json.V21ManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestListTemplate;\n+import com.google.cloud.tools.jib.image.json.V22ManifestTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** Checks an image's manifest. */\n+public class ManifestChecker<T extends ManifestTemplate>\n+    implements RegistryEndpointProvider<Optional<ManifestAndDigest<T>>> {\n+\n+  private final RegistryEndpointRequestProperties registryEndpointRequestProperties;\n+  private final String imageDescriptor;\n+  private final Class<T> manifestTemplateClass;\n+\n+  ManifestChecker(\n+      RegistryEndpointRequestProperties registryEndpointRequestProperties,\n+      String imageDescriptor,\n+      Class<T> manifestTemplateClass) {\n+    this.registryEndpointRequestProperties = registryEndpointRequestProperties;\n+    this.imageDescriptor = imageDescriptor;\n+    this.manifestTemplateClass = manifestTemplateClass;\n+  }\n+\n+  @Nullable\n+  @Override\n+  public BlobHttpContent getContent() {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<String> getAccept() {\n+    if (manifestTemplateClass.equals(V21ManifestTemplate.class)) {\n+      return Collections.singletonList(V21ManifestTemplate.MEDIA_TYPE);\n+    }\n+    if (manifestTemplateClass.equals(V22ManifestTemplate.class)) {\n+      return Collections.singletonList(V22ManifestTemplate.MANIFEST_MEDIA_TYPE);\n+    }\n+    if (manifestTemplateClass.equals(OciManifestTemplate.class)) {\n+      return Collections.singletonList(OciManifestTemplate.MANIFEST_MEDIA_TYPE);\n+    }\n+    if (manifestTemplateClass.equals(V22ManifestListTemplate.class)) {\n+      return Collections.singletonList(V22ManifestListTemplate.MANIFEST_MEDIA_TYPE);\n+    }\n+\n+    // V22ManifestListTemplate is not included by default, we don't explicitly accept\n+    // it, we only handle it if referenced by sha256 (see getManifestTemplateFromJson) in which\n+    // case registries ignore the \"accept\" directive and just return a manifest list anyway.\n+    return Arrays.asList(\n+        OciManifestTemplate.MANIFEST_MEDIA_TYPE,\n+        V22ManifestTemplate.MANIFEST_MEDIA_TYPE,\n+        V21ManifestTemplate.MEDIA_TYPE);\n+  }\n+\n+  /** Parses the response body into a {@link ManifestAndDigest}. */\n+  @Override\n+  public Optional<ManifestAndDigest<T>> handleResponse(Response response)\n+      throws IOException, UnknownManifestFormatException {\n+    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+    DescriptorDigest digest =\n+        Digests.computeDigest(response.getBody(), byteArrayOutputStream).getDigest();\n+    String jsonString = byteArrayOutputStream.toString(StandardCharsets.UTF_8.name());\n+    T manifestTemplate = getManifestTemplateFromJson(jsonString);\n+    return Optional.of(new ManifestAndDigest<>(manifestTemplate, digest));\n+  }\n+\n+  @Override\n+  public URL getApiRoute(String apiRouteBase) throws MalformedURLException {\n+    return new URL(\n+        apiRouteBase\n+            + registryEndpointRequestProperties.getImageName()\n+            + \"/manifests/\"\n+            + imageDescriptor);\n+  }\n+\n+  @Override\n+  public String getHttpMethod() {\n+    return HttpMethods.GET;\n+  }\n+\n+  @Override\n+  public String getActionDescription() {\n+    return \"pull image manifest for \"\n+        + registryEndpointRequestProperties.getServerUrl()\n+        + \"/\"\n+        + registryEndpointRequestProperties.getImageName()\n+        + \":\"\n+        + imageDescriptor;\n+  }\n+\n+  /**\n+   * Instantiates a {@link ManifestTemplate} from a JSON string. This checks the {@code\n+   * schemaVersion} field of the JSON to determine which manifest version to use.\n+   */\n+  private T getManifestTemplateFromJson(String jsonString)\n+      throws IOException, UnknownManifestFormatException {\n+    ObjectNode node = new ObjectMapper().readValue(jsonString, ObjectNode.class);\n+    if (!node.has(\"schemaVersion\")) {\n+      throw new UnknownManifestFormatException(\"Cannot find field 'schemaVersion' in manifest\");\n+    }\n+\n+    int schemaVersion = node.get(\"schemaVersion\").asInt(-1);\n+    if (schemaVersion == -1) {\n+      throw new UnknownManifestFormatException(\"`schemaVersion` field is not an integer\");\n+    }\n+\n+    if (schemaVersion == 1) {\n+      return manifestTemplateClass.cast(\n+          JsonTemplateMapper.readJson(jsonString, V21ManifestTemplate.class));\n+    }\n+    if (schemaVersion == 2) {\n+      // 'schemaVersion' of 2 can be either Docker V2.2 or OCI.\n+      String mediaType = node.get(\"mediaType\").asText();\n+      if (V22ManifestTemplate.MANIFEST_MEDIA_TYPE.equals(mediaType)) {\n+        return manifestTemplateClass.cast(\n+            JsonTemplateMapper.readJson(jsonString, V22ManifestTemplate.class));\n+      }\n+      if (OciManifestTemplate.MANIFEST_MEDIA_TYPE.equals(mediaType)) {\n+        return manifestTemplateClass.cast(\n+            JsonTemplateMapper.readJson(jsonString, OciManifestTemplate.class));\n+      }\n+      if (V22ManifestListTemplate.MANIFEST_MEDIA_TYPE.equals(mediaType)) {\n+        return manifestTemplateClass.cast(\n+            JsonTemplateMapper.readJson(jsonString, V22ManifestListTemplate.class));\n+      }\n+      throw new UnknownManifestFormatException(\"Unknown mediaType: \" + mediaType);\n+    }\n+    throw new UnknownManifestFormatException(\n+        \"Unknown schemaVersion: \" + schemaVersion + \" - only 1 and 2 are supported\");\n+  }\n+\n+  @Override\n+  public Optional<ManifestAndDigest<T>> handleHttpResponseException(\n+      ResponseException responseException) throws ResponseException {\n+    if (responseException.getStatusCode() != HttpStatusCodes.STATUS_CODE_NOT_FOUND) {\n+      throw responseException;\n+    }\n+\n+    // Finds a MANIFEST_BLOB_UNKNOWN error response code.\n+    if (responseException.getContent() == null) {\n+      return Optional.empty();\n+    }\n+\n+    ErrorCodes errorCode = ErrorResponseUtil.getErrorCode(responseException);\n+    if (errorCode == ErrorCodes.MANIFEST_UNKNOWN) {\n+      return Optional.empty();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIzMzA1Mw=="}, "originalCommit": {"oid": "cb5acaa9a3a12d311e1f94a840b052c9daabb536"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzU4NzQ3OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/CheckImageStep.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjoxMDo0OVrOGtd6Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMToyNDozNVrOGtnljQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMyOTE4Mg==", "bodyText": "Make the fields private final.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450329182", "createdAt": "2020-07-06T16:10:49Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/CheckImageStep.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.builder.steps;\n+\n+import com.google.cloud.tools.jib.api.DescriptorDigest;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.api.RegistryException;\n+import com.google.cloud.tools.jib.blob.BlobDescriptor;\n+import com.google.cloud.tools.jib.builder.ProgressEventDispatcher;\n+import com.google.cloud.tools.jib.builder.TimerEventDispatcher;\n+import com.google.cloud.tools.jib.configuration.BuildContext;\n+import com.google.cloud.tools.jib.event.EventHandlers;\n+import com.google.cloud.tools.jib.global.JibSystemProperties;\n+import com.google.cloud.tools.jib.hash.Digests;\n+import com.google.cloud.tools.jib.image.Image;\n+import com.google.cloud.tools.jib.image.json.BuildableManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.ImageToJsonTranslator;\n+import com.google.cloud.tools.jib.image.json.ManifestTemplate;\n+import com.google.cloud.tools.jib.registry.ManifestAndDigest;\n+import com.google.cloud.tools.jib.registry.RegistryClient;\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+\n+/** Checks the existence of a manifest. */\n+class CheckImageStep implements Callable<Optional<ManifestAndDigest<ManifestTemplate>>> {\n+\n+  private static final String DESCRIPTION = \"Checking existence of manifest\";\n+\n+  BuildContext buildContext;\n+  ProgressEventDispatcher.Factory progressEventDispatcherFactory;\n+  RegistryClient registryClient;\n+  BlobDescriptor containerConfigurationDigestAndSize;\n+  Image image;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27c22cd9455b645f5307798e8571a963fa099d61"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ4NzY5Mw==", "bodyText": "Done.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450487693", "createdAt": "2020-07-06T21:24:35Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/CheckImageStep.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.builder.steps;\n+\n+import com.google.cloud.tools.jib.api.DescriptorDigest;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.api.RegistryException;\n+import com.google.cloud.tools.jib.blob.BlobDescriptor;\n+import com.google.cloud.tools.jib.builder.ProgressEventDispatcher;\n+import com.google.cloud.tools.jib.builder.TimerEventDispatcher;\n+import com.google.cloud.tools.jib.configuration.BuildContext;\n+import com.google.cloud.tools.jib.event.EventHandlers;\n+import com.google.cloud.tools.jib.global.JibSystemProperties;\n+import com.google.cloud.tools.jib.hash.Digests;\n+import com.google.cloud.tools.jib.image.Image;\n+import com.google.cloud.tools.jib.image.json.BuildableManifestTemplate;\n+import com.google.cloud.tools.jib.image.json.ImageToJsonTranslator;\n+import com.google.cloud.tools.jib.image.json.ManifestTemplate;\n+import com.google.cloud.tools.jib.registry.ManifestAndDigest;\n+import com.google.cloud.tools.jib.registry.RegistryClient;\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+\n+/** Checks the existence of a manifest. */\n+class CheckImageStep implements Callable<Optional<ManifestAndDigest<ManifestTemplate>>> {\n+\n+  private static final String DESCRIPTION = \"Checking existence of manifest\";\n+\n+  BuildContext buildContext;\n+  ProgressEventDispatcher.Factory progressEventDispatcherFactory;\n+  RegistryClient registryClient;\n+  BlobDescriptor containerConfigurationDigestAndSize;\n+  Image image;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMyOTE4Mg=="}, "originalCommit": {"oid": "27c22cd9455b645f5307798e8571a963fa099d61"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzY2MDkyOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjoyOTowNFrOGtencw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjoyOTowNFrOGtencw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0MDcyMw==", "bodyText": "On second thought, we could make makeList() always return a non-empty list and have PushImageStep.call() decide whether to skip pushing, but I can take care of this later in a follow-up PR. But at the same time, I think this approach is still acceptable.", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450340723", "createdAt": "2020-07-06T16:29:04Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -394,10 +415,15 @@ private void pushImages() {\n                           childProgressDispatcherFactory,\n                           results.targetRegistryClient.get(),\n                           results.containerConfigurationPushResult.get(),\n-                          results.builtImage.get()));\n+                          results.builtImage.get(),\n+                          results.manifestCheckResult.get().isPresent()));\n               realizeFutures(manifestPushResults);\n               // Manifest pushers return the same BuildResult.\n-              return manifestPushResults.get(0).get();\n+              return manifestPushResults.isEmpty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27c22cd9455b645f5307798e8571a963fa099d61"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODIyOTQ2OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PushImageStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOToyMDowNFrOGtkGlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOToyMDowNFrOGtkGlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQzMDYxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return ImmutableList.<PushImageStep>builder().build();\n          \n          \n            \n                    return ImmutableList.of();", "url": "https://github.com/GoogleContainerTools/jib/pull/2531#discussion_r450430612", "createdAt": "2020-07-06T19:20:04Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PushImageStep.java", "diffHunk": "@@ -47,16 +48,25 @@\n       ProgressEventDispatcher.Factory progressEventDispatcherFactory,\n       RegistryClient registryClient,\n       BlobDescriptor containerConfigurationDigestAndSize,\n-      Image builtImage)\n+      Image builtImage,\n+      boolean manifestAlreadyExists)\n       throws IOException {\n     Set<String> tags = buildContext.getAllTargetImageTags();\n \n+    EventHandlers eventHandlers = buildContext.getEventHandlers();\n+\n     try (TimerEventDispatcher ignored =\n-            new TimerEventDispatcher(\n-                buildContext.getEventHandlers(), \"Preparing manifest pushers\");\n+            new TimerEventDispatcher(eventHandlers, \"Preparing manifest pushers\");\n         ProgressEventDispatcher progressEventDispatcher =\n             progressEventDispatcherFactory.create(\"launching manifest pushers\", tags.size())) {\n \n+      if (JibSystemProperties.skipExistingImages() && manifestAlreadyExists) {\n+        eventHandlers.dispatch(\n+            LogEvent.info(\"Skipping pushing manifest; manifest already exists.\"));\n+\n+        return ImmutableList.<PushImageStep>builder().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27c22cd9455b645f5307798e8571a963fa099d61"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 212, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}