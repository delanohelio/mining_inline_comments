{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MDg4NzU4", "number": 2929, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoxMTo1NlrOFCpH3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoyNDoxMlrOFDmATA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzE1MjI5OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Caches.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoxMTo1NlrOIB6h0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoxMTo1NlrOIB6h0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg3ODQxOQ==", "bodyText": "Perhaps, CacheLocation?", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r538878419", "createdAt": "2020-12-08T23:11:56Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Caches.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import java.nio.file.Path;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** A class to determine cache locations for any cli commands. */\n+public class Caches {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db286ca13c41014c2cb7bdd35167540182219029"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzIwOTQzOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CachesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoyNjo0M1rOIB7DOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoyNjo0M1rOIB7DOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4Njk2OQ==", "bodyText": "very nit: don't need the Truth8 at the beginning. Same below.", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r538886969", "createdAt": "2020-12-08T23:26:43Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CachesTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.common.truth.Truth;\n+import com.google.common.truth.Truth8;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+public class CachesTest {\n+\n+  @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testCaches_defaults() {\n+    CommonCliOptions commonCliOptions = new CommonCliOptions();\n+    Path buildContext = Paths.get(\"some-context\");\n+    Caches caches = Caches.from(commonCliOptions, buildContext);\n+\n+    Truth8.assertThat(caches.getBaseImageCache()).isEmpty();\n+    Truth8.assertThat(caches.getProjectCache())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db286ca13c41014c2cb7bdd35167540182219029"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzIxOTcxOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CachesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzozMDowMlrOIB7I9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzozMDowMlrOIB7I9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4ODQzOA==", "bodyText": "assertThat(path2).isNotEqualTo(path1)\nassertThat(Files.isSameFine(path1, path2)).isTrue()", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r538888438", "createdAt": "2020-12-08T23:30:02Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CachesTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.common.truth.Truth;\n+import com.google.common.truth.Truth8;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+public class CachesTest {\n+\n+  @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testCaches_defaults() {\n+    CommonCliOptions commonCliOptions = new CommonCliOptions();\n+    Path buildContext = Paths.get(\"some-context\");\n+    Caches caches = Caches.from(commonCliOptions, buildContext);\n+\n+    Truth8.assertThat(caches.getBaseImageCache()).isEmpty();\n+    Truth8.assertThat(caches.getProjectCache())\n+        .isEqualTo(\n+            XdgDirectories.getCacheHome()\n+                .resolve(\"cli\")\n+                .resolve(\"projects\")\n+                .resolve(Caches.hashPath(Paths.get(\"some-context\"))));\n+  }\n+\n+  @Test\n+  public void testCaches_configuredValuesIgnoresBuildContext() {\n+    CommonCliOptions commonCliOptions = Mockito.mock(CommonCliOptions.class);\n+    Path userBaseImageCache = Paths.get(\"test-base-image-cache\");\n+    Path userProjectCache = Paths.get(\"test-project-cache\");\n+    Mockito.when(commonCliOptions.getBaseImageCache()).thenReturn(Optional.of(userBaseImageCache));\n+    Mockito.when(commonCliOptions.getProjectCache()).thenReturn(Optional.of(userProjectCache));\n+    Caches caches = Caches.from(commonCliOptions, Paths.get(\"ignored\"));\n+\n+    Truth8.assertThat(caches.getBaseImageCache()).hasValue(userBaseImageCache);\n+    Truth8.assertThat(caches.getProjectCache()).isEqualTo(userProjectCache);\n+  }\n+\n+  @Test\n+  public void testHashPath_sameFileDifferentPaths() throws IOException {\n+    temporaryFolder.newFolder(\"ignored\");\n+    Path path1 = temporaryFolder.getRoot().toPath().resolve(\"ignored\").resolve(\"..\");\n+    Path path2 = temporaryFolder.getRoot().toPath();\n+\n+    Assert.assertNotEquals(path1, path2); // the general equality should not hold true\n+    Assert.assertTrue(Files.isSameFile(path1, path2)); // path equality holds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db286ca13c41014c2cb7bdd35167540182219029"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzI0NjIyOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Caches.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzozOToyMFrOIB7X9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowODo0OVrOICibPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MjI3OQ==", "bodyText": "For my understanding, why is .normalize() needed here?", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r538892279", "createdAt": "2020-12-08T23:39:20Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Caches.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import java.nio.file.Path;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** A class to determine cache locations for any cli commands. */\n+public class Caches {\n+\n+  @Nullable private final Path baseImageCache;\n+  private final Path projectCache;\n+\n+  /**\n+   * Create a caches helper for cli cache locations.\n+   *\n+   * @param commonCliOptions cli options\n+   * @param contextRoot the context root, if a single file, use the parent directory\n+   * @return an instance of Caches with cli specific cache locations\n+   */\n+  public static Caches from(CommonCliOptions commonCliOptions, Path contextRoot) {\n+    Path defaultProjectCache =\n+        XdgDirectories.getCacheHome()\n+            .resolve(\"cli\")\n+            .resolve(\"projects\")\n+            .resolve(hashPath(contextRoot));\n+    return new Caches(\n+        commonCliOptions.getBaseImageCache().orElse(null),\n+        commonCliOptions.getProjectCache().orElse(defaultProjectCache));\n+  }\n+\n+  @VisibleForTesting\n+  static String hashPath(Path path) {\n+    try {\n+      byte[] hashedBytes =\n+          MessageDigest.getInstance(\"SHA-256\")\n+              .digest(path.toAbsolutePath().normalize().toString().getBytes(Charsets.UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db286ca13c41014c2cb7bdd35167540182219029"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3MjMxMA==", "bodyText": "it's to remove any . and .. from the path", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r539472310", "createdAt": "2020-12-09T16:49:35Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Caches.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import java.nio.file.Path;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** A class to determine cache locations for any cli commands. */\n+public class Caches {\n+\n+  @Nullable private final Path baseImageCache;\n+  private final Path projectCache;\n+\n+  /**\n+   * Create a caches helper for cli cache locations.\n+   *\n+   * @param commonCliOptions cli options\n+   * @param contextRoot the context root, if a single file, use the parent directory\n+   * @return an instance of Caches with cli specific cache locations\n+   */\n+  public static Caches from(CommonCliOptions commonCliOptions, Path contextRoot) {\n+    Path defaultProjectCache =\n+        XdgDirectories.getCacheHome()\n+            .resolve(\"cli\")\n+            .resolve(\"projects\")\n+            .resolve(hashPath(contextRoot));\n+    return new Caches(\n+        commonCliOptions.getBaseImageCache().orElse(null),\n+        commonCliOptions.getProjectCache().orElse(defaultProjectCache));\n+  }\n+\n+  @VisibleForTesting\n+  static String hashPath(Path path) {\n+    try {\n+      byte[] hashedBytes =\n+          MessageDigest.getInstance(\"SHA-256\")\n+              .digest(path.toAbsolutePath().normalize().toString().getBytes(Charsets.UTF_8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MjI3OQ=="}, "originalCommit": {"oid": "db286ca13c41014c2cb7bdd35167540182219029"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5OTA5Nw==", "bodyText": "since the hashing occurs on the string representation of the path, we want /home/./potato/../tomato == /home/tomato, since they are in essence the same path.", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r539499097", "createdAt": "2020-12-09T17:24:07Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Caches.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import java.nio.file.Path;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** A class to determine cache locations for any cli commands. */\n+public class Caches {\n+\n+  @Nullable private final Path baseImageCache;\n+  private final Path projectCache;\n+\n+  /**\n+   * Create a caches helper for cli cache locations.\n+   *\n+   * @param commonCliOptions cli options\n+   * @param contextRoot the context root, if a single file, use the parent directory\n+   * @return an instance of Caches with cli specific cache locations\n+   */\n+  public static Caches from(CommonCliOptions commonCliOptions, Path contextRoot) {\n+    Path defaultProjectCache =\n+        XdgDirectories.getCacheHome()\n+            .resolve(\"cli\")\n+            .resolve(\"projects\")\n+            .resolve(hashPath(contextRoot));\n+    return new Caches(\n+        commonCliOptions.getBaseImageCache().orElse(null),\n+        commonCliOptions.getProjectCache().orElse(defaultProjectCache));\n+  }\n+\n+  @VisibleForTesting\n+  static String hashPath(Path path) {\n+    try {\n+      byte[] hashedBytes =\n+          MessageDigest.getInstance(\"SHA-256\")\n+              .digest(path.toAbsolutePath().normalize().toString().getBytes(Charsets.UTF_8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MjI3OQ=="}, "originalCommit": {"oid": "db286ca13c41014c2cb7bdd35167540182219029"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxMjAzNw==", "bodyText": "AFAIK, I remember toAboslutePath() simply adds / at the front. Can we somehow guarantee that path is a real absolute path? Maybe we should use File.getCanonicalPath() (e.g., as in ZipUtil)? Path is purely conceptual, while File.getCanonicalPath() does actual computation against a filesystem.", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r539512037", "createdAt": "2020-12-09T17:39:51Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Caches.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import java.nio.file.Path;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** A class to determine cache locations for any cli commands. */\n+public class Caches {\n+\n+  @Nullable private final Path baseImageCache;\n+  private final Path projectCache;\n+\n+  /**\n+   * Create a caches helper for cli cache locations.\n+   *\n+   * @param commonCliOptions cli options\n+   * @param contextRoot the context root, if a single file, use the parent directory\n+   * @return an instance of Caches with cli specific cache locations\n+   */\n+  public static Caches from(CommonCliOptions commonCliOptions, Path contextRoot) {\n+    Path defaultProjectCache =\n+        XdgDirectories.getCacheHome()\n+            .resolve(\"cli\")\n+            .resolve(\"projects\")\n+            .resolve(hashPath(contextRoot));\n+    return new Caches(\n+        commonCliOptions.getBaseImageCache().orElse(null),\n+        commonCliOptions.getProjectCache().orElse(defaultProjectCache));\n+  }\n+\n+  @VisibleForTesting\n+  static String hashPath(Path path) {\n+    try {\n+      byte[] hashedBytes =\n+          MessageDigest.getInstance(\"SHA-256\")\n+              .digest(path.toAbsolutePath().normalize().toString().getBytes(Charsets.UTF_8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MjI3OQ=="}, "originalCommit": {"oid": "db286ca13c41014c2cb7bdd35167540182219029"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMjA5Mw==", "bodyText": "Yeah initially I didn't want the file system to process anything, but you're probably right. Changed to canonical, but we can revisit later, if problem occur?", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r539532093", "createdAt": "2020-12-09T18:08:49Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Caches.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import java.nio.file.Path;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** A class to determine cache locations for any cli commands. */\n+public class Caches {\n+\n+  @Nullable private final Path baseImageCache;\n+  private final Path projectCache;\n+\n+  /**\n+   * Create a caches helper for cli cache locations.\n+   *\n+   * @param commonCliOptions cli options\n+   * @param contextRoot the context root, if a single file, use the parent directory\n+   * @return an instance of Caches with cli specific cache locations\n+   */\n+  public static Caches from(CommonCliOptions commonCliOptions, Path contextRoot) {\n+    Path defaultProjectCache =\n+        XdgDirectories.getCacheHome()\n+            .resolve(\"cli\")\n+            .resolve(\"projects\")\n+            .resolve(hashPath(contextRoot));\n+    return new Caches(\n+        commonCliOptions.getBaseImageCache().orElse(null),\n+        commonCliOptions.getProjectCache().orElse(defaultProjectCache));\n+  }\n+\n+  @VisibleForTesting\n+  static String hashPath(Path path) {\n+    try {\n+      byte[] hashedBytes =\n+          MessageDigest.getInstance(\"SHA-256\")\n+              .digest(path.toAbsolutePath().normalize().toString().getBytes(Charsets.UTF_8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MjI3OQ=="}, "originalCommit": {"oid": "db286ca13c41014c2cb7bdd35167540182219029"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzY5NzIzOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODozNTozM1rOICjiOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODozNTozM1rOICjiOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1MDI2Nw==", "bodyText": "Sorry missed this last time, we could make the naming a little more specific for these two variables?", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r539550267", "createdAt": "2020-12-09T18:35:33Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import picocli.CommandLine;\n+\n+public class CacheDirectoriesTest {\n+\n+  @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testCacheDirectories_defaults() {\n+    CommonCliOptions commonCliOptions =\n+        CommandLine.populateCommand(new CommonCliOptions(), \"-t\", \"ignored\");\n+    Path buildContext = Paths.get(\"some-context\");\n+    CacheDirectories cacheDirectories = CacheDirectories.from(commonCliOptions, buildContext);\n+\n+    assertThat(cacheDirectories.getBaseImageCache()).isEmpty();\n+    assertThat(cacheDirectories.getProjectCache())\n+        .isEqualTo(\n+            XdgDirectories.getCacheHome()\n+                .resolve(\"cli\")\n+                .resolve(\"projects\")\n+                .resolve(CacheDirectories.hashPath(Paths.get(\"some-context\"))));\n+  }\n+\n+  @Test\n+  public void testCacheDirectories_configuredValuesIgnoresBuildContext() {\n+    CommonCliOptions commonCliOptions =\n+        CommandLine.populateCommand(\n+            new CommonCliOptions(),\n+            \"-t=ignored\",\n+            \"--base-image-cache=test-base-image-cache\",\n+            \"--project-cache=test-project-cache\");\n+    CacheDirectories cacheDirectories =\n+        CacheDirectories.from(commonCliOptions, Paths.get(\"ignored\"));\n+\n+    assertThat(cacheDirectories.getBaseImageCache()).hasValue(Paths.get(\"test-base-image-cache\"));\n+    assertThat(cacheDirectories.getProjectCache()).isEqualTo(Paths.get(\"test-project-cache\"));\n+  }\n+\n+  @Test\n+  public void testHashPath_sameFileDifferentPaths() throws IOException {\n+    temporaryFolder.newFolder(\"ignored\");\n+    Path path1 = temporaryFolder.getRoot().toPath().resolve(\"ignored\").resolve(\"..\");\n+    Path path2 = temporaryFolder.getRoot().toPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e57c7a81113e601e5eda7d6b81002d011f990a"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzEyNzE2OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoyNDoxMlrOIDUr5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoyNDoxMlrOIDUr5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1NTU1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return an instance of Caches with cli specific cache locations\n          \n          \n            \n               * @return an instance of CacheDirectories with cli specific cache locations", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r540355559", "createdAt": "2020-12-10T17:24:12Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** A class to determine cache locations for any cli commands. */\n+public class CacheDirectories {\n+\n+  @Nullable private final Path baseImageCache;\n+  private final Path projectCache;\n+\n+  /**\n+   * Create a caches helper for cli cache locations.\n+   *\n+   * @param commonCliOptions cli options\n+   * @param contextRoot the context root, if a single file, use the parent directory, this context\n+   *     root must exist\n+   * @return an instance of Caches with cli specific cache locations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65124777113368385864803e97d7d9b387b7d26b"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4876, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}