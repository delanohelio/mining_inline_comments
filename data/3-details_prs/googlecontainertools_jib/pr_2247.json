{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MDc3NTQy", "number": 2247, "title": "Replace assemble task dependency with runtimeClasspath", "bodyText": "This introduces a new lifecycle task called jibDependencies (the name can really be anything, that was just what I came up with) that all the jib tasks depend on and it in turn depends on any requisite tasks / configurations. Being a lifecycle task, it doesn't have any task action itself and essentially exists as a convenient hook for other dependencies. In particular, jibDependencies will depend on the war/bootWar tasks  when applicable, the jar task when applicable, and always depends on the projects runtimeClasspath configuration.\nGradle allows tasks to depend on FileCollections (rather than just tasks). When doing so Gradle expands the task graph expands to include all the necessary tasks to produce the files listed in the FileCollection. Doing so with the runtimeClasspath configuration means Gradle will run all the tasks to get all the artifacts necessary to run this project, making it more efficient than using the assemble task which will often run slow, and unnecessary tasks. In particular, the main source set's runtimeClasspath's property includes the source set output appended to the project's runtimeClasspath configuration so depending on that obviates the need to run even manually run the classes task. (See https://docs.gradle.org/current/userguide/java_plugin.html#sec:source_set_properties)\nIf we only want to conditionally depend on the runtime classpath I'm happy to make that change though I assume it's never really going to be a bad thing even in the case of the war based projects.\nAlso, for what it's worth \u2014\u00a0jib itself uses the runtimeClasspath to get the list of files to add to the container so it makes sense to use that same collection to set up the task dependencies.\n\n  \n    \n      jib/jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/GradleProjectProperties.java\n    \n    \n         Line 174\n      in\n      d3615a6\n    \n    \n    \n    \n\n        \n          \n           FileCollection allFiles = mainSourceSet.getRuntimeClasspath().filter(File::exists); \n        \n    \n  \n\n\nThere are a few different potential approaches here so I'm happy to make changes to go with a different approach. For example, we don't have to introduce the jibDependencies task but it made the implementation a little cleaner and also made it so that the changes to tests were minimal (some of them make assumptions about the contents of task.getDependsOn() which are no longer true when tasks depend on configurations for example). It might also be useful in the future if there are new dependencies since they can all hook into jibDependencies.\nThis should resolve #2184", "createdAt": "2020-01-25T02:10:18Z", "url": "https://github.com/GoogleContainerTools/jib/pull/2247", "merged": true, "mergeCommit": {"oid": "98db3913c04a5b9f4ae4827de2a43bfdd9ecdc9f"}, "closed": true, "closedAt": "2020-02-05T21:57:58Z", "author": {"login": "seanabraham"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9p785AFqTM0ODMwNDIyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBdbsRAFqTM1NDA2OTY1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MzA0MjIz", "url": "https://github.com/GoogleContainerTools/jib/pull/2247#pullrequestreview-348304223", "createdAt": "2020-01-25T02:15:53Z", "commit": {"oid": "83bf080820fef49d9de2c816da016fb6b35e9bf2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMjoxNTo1NFrOFhuZDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMjoxNTo1NFrOFhuZDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzQwNQ==", "bodyText": "These test changes (and the ones below) are now checking for whether the jibDependencies task depends on the requisite tasks (like the warTask or bootWarTask below) and whether all the jib tasks depend on jibDependencies which is the only task they need to depend on now.", "url": "https://github.com/GoogleContainerTools/jib/pull/2247#discussion_r370907405", "createdAt": "2020-01-25T02:15:54Z", "author": {"login": "seanabraham"}, "path": "jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/JibPluginTest.java", "diffHunk": "@@ -212,11 +143,19 @@ public void testWebAppProject() {\n     Task warTask = tasks.getByPath(\":war\");\n     Assert.assertNotNull(warTask);\n \n+    Task jibDependenciesTask = tasks.getByPath(\":jibDependencies\");\n+    Set<Task> taskDependencies = jibDependenciesTask.getDependsOn()\n+        .stream()\n+        .filter(it -> it instanceof TaskProvider)\n+        .map(it -> ((TaskProvider<?>) it).get())\n+        .collect(Collectors.toSet());\n+\n+    Assert.assertTrue(taskDependencies.contains(warTask));\n+\n     for (String taskName : KNOWN_JIB_TASKS) {\n-      List<TaskProvider<?>> taskProviders =\n-          (List<TaskProvider<?>>) tasks.getByPath(taskName).getDependsOn().iterator().next();\n-      Assert.assertEquals(1, taskProviders.size());\n-      Assert.assertEquals(warTask, taskProviders.get(0).get());\n+      TaskProvider<?> jibDependenciesTaskProvider =\n+          (TaskProvider<?>) tasks.getByPath(taskName).getDependsOn().iterator().next();\n+      Assert.assertEquals(jibDependenciesTaskProvider.get(), jibDependenciesTask);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83bf080820fef49d9de2c816da016fb6b35e9bf2"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MzA4ODA5", "url": "https://github.com/GoogleContainerTools/jib/pull/2247#pullrequestreview-348308809", "createdAt": "2020-01-25T04:04:00Z", "commit": {"oid": "d044eef0f4526f76e914f67601377351aa7a8b08"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwNDowNDowMFrOFhusMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwNDoxMDo0OFrOFhus-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkxMjMwNw==", "bodyText": "I'll check when I can, but this doesn't show up in gradlew tasks does it?", "url": "https://github.com/GoogleContainerTools/jib/pull/2247#discussion_r370912307", "createdAt": "2020-01-25T04:04:00Z", "author": {"login": "loosebazooka"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/JibPlugin.java", "diffHunk": "@@ -162,68 +165,49 @@ public void apply(Project project) {\n             SyncMapTask.class,\n             task -> task.setJibExtension(jibExtension));\n \n+    Set<TaskProvider<?>> jibTaskProviders =\n+        ImmutableSet.of(buildImageTask, buildDockerTask, buildTarTask, syncMapTask);\n+\n     // A check to catch older versions of Jib.  This can be removed once we are certain people\n     // are using Jib 1.3.1 or later.\n     tasks.register(SKAFFOLD_CHECK_REQUIRED_VERSION_TASK_NAME, CheckJibVersionTask.class);\n \n     project.afterEvaluate(\n         projectAfterEvaluation -> {\n-          try {\n-            TaskProvider<Task> warTask = TaskCommon.getWarTaskProvider(projectAfterEvaluation);\n-            TaskProvider<Task> bootWarTask =\n-                TaskCommon.getBootWarTaskProvider(projectAfterEvaluation);\n-            List<TaskProvider<?>> dependsOnTask = new ArrayList<>();\n-            if (warTask != null || bootWarTask != null) {\n-              // Have all tasks depend on the 'war' and/or 'bootWar' task.\n-              if (warTask != null) {\n-                dependsOnTask.add(warTask);\n-              }\n-              if (bootWarTask != null) {\n-                dependsOnTask.add(bootWarTask);\n-              }\n-            } else if (\"packaged\".equals(jibExtension.getContainerizingMode())) {\n-              // Have all tasks depend on the 'jar' task.\n-              TaskProvider<Task> jarTask = projectAfterEvaluation.getTasks().named(\"jar\");\n-              dependsOnTask.add(jarTask);\n-\n-              if (projectAfterEvaluation.getPlugins().hasPlugin(\"org.springframework.boot\")) {\n-                Jar jar = (Jar) jarTask.get();\n-                jar.setEnabled(true);\n-                jar.getArchiveClassifier().set(\"original\");\n-              }\n-            } else {\n-              // Have all tasks depend on the 'classes' task.\n-              dependsOnTask.add(projectAfterEvaluation.getTasks().named(\"classes\"));\n+          TaskProvider<Task> warTask = TaskCommon.getWarTaskProvider(projectAfterEvaluation);\n+          TaskProvider<Task> bootWarTask =\n+              TaskCommon.getBootWarTaskProvider(projectAfterEvaluation);\n+          TaskProvider<Task> jibDependenciesTask = tasks.register(\"jibDependencies\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d044eef0f4526f76e914f67601377351aa7a8b08"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkxMjQ5NQ==", "bodyText": "we've been filtering like .filter(TaskProvider.class::isInstance)", "url": "https://github.com/GoogleContainerTools/jib/pull/2247#discussion_r370912495", "createdAt": "2020-01-25T04:10:15Z", "author": {"login": "loosebazooka"}, "path": "jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/JibPluginTest.java", "diffHunk": "@@ -230,15 +171,24 @@ public void testWebAppProject_bootWar() {\n     TaskContainer tasks = project.getTasks();\n     Task warTask = tasks.getByPath(\":war\");\n     Task bootWarTask = tasks.getByPath(\":bootWar\");\n+    Task jibDependenciesTask = tasks.getByPath(\":jibDependencies\");\n     Assert.assertNotNull(warTask);\n     Assert.assertNotNull(bootWarTask);\n \n+    Set<Task> taskDependencies =\n+        jibDependenciesTask\n+            .getDependsOn()\n+            .stream()\n+            .filter(it -> it instanceof TaskProvider)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d044eef0f4526f76e914f67601377351aa7a8b08"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkxMjUwNw==", "bodyText": "filter(... like above", "url": "https://github.com/GoogleContainerTools/jib/pull/2247#discussion_r370912507", "createdAt": "2020-01-25T04:10:48Z", "author": {"login": "loosebazooka"}, "path": "jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/JibPluginTest.java", "diffHunk": "@@ -252,16 +202,25 @@ public void testWebAppProject_bootWarDisabled() {\n     TaskContainer tasks = project.getTasks();\n     Task warTask = tasks.getByPath(\":war\");\n     Task bootWarTask = tasks.getByPath(\":bootWar\");\n+    Task jibDependenciesTask = tasks.getByPath(\":jibDependencies\");\n     Assert.assertNotNull(warTask);\n     Assert.assertNotNull(bootWarTask);\n     bootWarTask.setEnabled(false); // should depend on bootWar even if disabled\n \n+    Set<Task> taskDependencies =\n+        jibDependenciesTask\n+            .getDependsOn()\n+            .stream()\n+            .filter(it -> it instanceof TaskProvider)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d044eef0f4526f76e914f67601377351aa7a8b08"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4Mzk3Njk1", "url": "https://github.com/GoogleContainerTools/jib/pull/2247#pullrequestreview-348397695", "createdAt": "2020-01-26T18:46:59Z", "commit": {"oid": "26649a1db011c7c87944a1ed20109c75209c71a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxODo0Njo1OVrOFh1U_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxODo0Njo1OVrOFh1U_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyMTA1NQ==", "bodyText": "Can you use a const as above https://github.com/GoogleContainerTools/jib/pull/2247/files#diff-aef8bf567c91df6622aa0ea29ed0c682R53\nJIB_DEPENDECIES_TASK_NAME=\"jibDependencies\"\n\nand then reuse it in JibPluginTest.java.", "url": "https://github.com/GoogleContainerTools/jib/pull/2247#discussion_r371021055", "createdAt": "2020-01-26T18:46:59Z", "author": {"login": "loosebazooka"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/JibPlugin.java", "diffHunk": "@@ -162,68 +165,49 @@ public void apply(Project project) {\n             SyncMapTask.class,\n             task -> task.setJibExtension(jibExtension));\n \n+    Set<TaskProvider<?>> jibTaskProviders =\n+        ImmutableSet.of(buildImageTask, buildDockerTask, buildTarTask, syncMapTask);\n+\n     // A check to catch older versions of Jib.  This can be removed once we are certain people\n     // are using Jib 1.3.1 or later.\n     tasks.register(SKAFFOLD_CHECK_REQUIRED_VERSION_TASK_NAME, CheckJibVersionTask.class);\n \n     project.afterEvaluate(\n         projectAfterEvaluation -> {\n-          try {\n-            TaskProvider<Task> warTask = TaskCommon.getWarTaskProvider(projectAfterEvaluation);\n-            TaskProvider<Task> bootWarTask =\n-                TaskCommon.getBootWarTaskProvider(projectAfterEvaluation);\n-            List<TaskProvider<?>> dependsOnTask = new ArrayList<>();\n-            if (warTask != null || bootWarTask != null) {\n-              // Have all tasks depend on the 'war' and/or 'bootWar' task.\n-              if (warTask != null) {\n-                dependsOnTask.add(warTask);\n-              }\n-              if (bootWarTask != null) {\n-                dependsOnTask.add(bootWarTask);\n-              }\n-            } else if (\"packaged\".equals(jibExtension.getContainerizingMode())) {\n-              // Have all tasks depend on the 'jar' task.\n-              TaskProvider<Task> jarTask = projectAfterEvaluation.getTasks().named(\"jar\");\n-              dependsOnTask.add(jarTask);\n-\n-              if (projectAfterEvaluation.getPlugins().hasPlugin(\"org.springframework.boot\")) {\n-                Jar jar = (Jar) jarTask.get();\n-                jar.setEnabled(true);\n-                jar.getArchiveClassifier().set(\"original\");\n-              }\n-            } else {\n-              // Have all tasks depend on the 'classes' task.\n-              dependsOnTask.add(projectAfterEvaluation.getTasks().named(\"classes\"));\n+          TaskProvider<Task> warTask = TaskCommon.getWarTaskProvider(projectAfterEvaluation);\n+          TaskProvider<Task> bootWarTask =\n+              TaskCommon.getBootWarTaskProvider(projectAfterEvaluation);\n+          TaskProvider<Task> jibDependenciesTask = tasks.register(\"jibDependencies\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26649a1db011c7c87944a1ed20109c75209c71a0"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6e175a93cb0522a06c377d3a046e11a10bdefc4", "author": {"user": {"login": "seanabraham", "name": "Sean Abraham"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/e6e175a93cb0522a06c377d3a046e11a10bdefc4", "committedDate": "2020-01-27T00:01:33Z", "message": "Replace assemble task dependency with runtimeClasspath\n\nThis introduces a new lifecycle task called \"jibDependencies\" that all\nthe jib tasks depend on and it in turn depends on any requiste tasks\n/ configurations. In particular, jibDependencies will depend on the\nwar/bootWar tasks  when applicable, the jar task when applicable and\nalways the runtime configuration.  Depending directly on the runtime\nconfiguration allows Gradle to add to the task graph appropriately to\nprovide all the artifacts that are specified in that configuration,\nmaking it more efficient than using the assemble task."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "927b8bfdb18affea37567d32002cb9836ba943fd", "author": {"user": {"login": "seanabraham", "name": "Sean Abraham"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/927b8bfdb18affea37567d32002cb9836ba943fd", "committedDate": "2020-01-27T00:01:35Z", "message": "Remove now-useless test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9073d9ff2a32da0ebd8940702972c014a7875ac5", "author": {"user": {"login": "seanabraham", "name": "Sean Abraham"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/9073d9ff2a32da0ebd8940702972c014a7875ac5", "committedDate": "2020-01-27T00:01:35Z", "message": "Formatting changes from the googleJavaFormat task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a905f2f7392be144082561c586ed94dd50cd5d64", "author": {"user": {"login": "seanabraham", "name": "Sean Abraham"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/a905f2f7392be144082561c586ed94dd50cd5d64", "committedDate": "2020-01-27T00:01:36Z", "message": "Use method reference style for filter call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b7a2057bd5b9ee46aee327061a821db6505b210", "author": {"user": {"login": "seanabraham", "name": "Sean Abraham"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/2b7a2057bd5b9ee46aee327061a821db6505b210", "committedDate": "2020-01-27T00:08:41Z", "message": "Refactor task name into constant"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26649a1db011c7c87944a1ed20109c75209c71a0", "author": {"user": {"login": "seanabraham", "name": "Sean Abraham"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/26649a1db011c7c87944a1ed20109c75209c71a0", "committedDate": "2020-01-25T23:33:09Z", "message": "Use method reference style for filter call"}, "afterCommit": {"oid": "2b7a2057bd5b9ee46aee327061a821db6505b210", "author": {"user": {"login": "seanabraham", "name": "Sean Abraham"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/2b7a2057bd5b9ee46aee327061a821db6505b210", "committedDate": "2020-01-27T00:08:41Z", "message": "Refactor task name into constant"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjc1NDE5", "url": "https://github.com/GoogleContainerTools/jib/pull/2247#pullrequestreview-351675419", "createdAt": "2020-01-31T17:57:46Z", "commit": {"oid": "2b7a2057bd5b9ee46aee327061a821db6505b210"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzo1Nzo0N1rOFkTNdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzo1Nzo0N1rOFkTNdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYwNzc5OQ==", "bodyText": "Sorry, after thinking about this while we were doing the release, I realized I'm not quite convinced this is how we want to do this. Maybe in the future... but the problem is going backwards/deprecating something has a high cost.\nCan we just use the mechanism used previously: https://github.com/GoogleContainerTools/jib/pull/2247/files#diff-aef8bf567c91df6622aa0ea29ed0c682L175", "url": "https://github.com/GoogleContainerTools/jib/pull/2247#discussion_r373607799", "createdAt": "2020-01-31T17:57:47Z", "author": {"login": "loosebazooka"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/JibPlugin.java", "diffHunk": "@@ -162,68 +166,49 @@ public void apply(Project project) {\n             SyncMapTask.class,\n             task -> task.setJibExtension(jibExtension));\n \n+    Set<TaskProvider<?>> jibTaskProviders =\n+        ImmutableSet.of(buildImageTask, buildDockerTask, buildTarTask, syncMapTask);\n+\n     // A check to catch older versions of Jib.  This can be removed once we are certain people\n     // are using Jib 1.3.1 or later.\n     tasks.register(SKAFFOLD_CHECK_REQUIRED_VERSION_TASK_NAME, CheckJibVersionTask.class);\n \n     project.afterEvaluate(\n         projectAfterEvaluation -> {\n-          try {\n-            TaskProvider<Task> warTask = TaskCommon.getWarTaskProvider(projectAfterEvaluation);\n-            TaskProvider<Task> bootWarTask =\n-                TaskCommon.getBootWarTaskProvider(projectAfterEvaluation);\n-            List<TaskProvider<?>> dependsOnTask = new ArrayList<>();\n-            if (warTask != null || bootWarTask != null) {\n-              // Have all tasks depend on the 'war' and/or 'bootWar' task.\n-              if (warTask != null) {\n-                dependsOnTask.add(warTask);\n-              }\n-              if (bootWarTask != null) {\n-                dependsOnTask.add(bootWarTask);\n-              }\n-            } else if (\"packaged\".equals(jibExtension.getContainerizingMode())) {\n-              // Have all tasks depend on the 'jar' task.\n-              TaskProvider<Task> jarTask = projectAfterEvaluation.getTasks().named(\"jar\");\n-              dependsOnTask.add(jarTask);\n-\n-              if (projectAfterEvaluation.getPlugins().hasPlugin(\"org.springframework.boot\")) {\n-                Jar jar = (Jar) jarTask.get();\n-                jar.setEnabled(true);\n-                jar.getArchiveClassifier().set(\"original\");\n-              }\n-            } else {\n-              // Have all tasks depend on the 'classes' task.\n-              dependsOnTask.add(projectAfterEvaluation.getTasks().named(\"classes\"));\n+          TaskProvider<Task> warTask = TaskCommon.getWarTaskProvider(projectAfterEvaluation);\n+          TaskProvider<Task> bootWarTask =\n+              TaskCommon.getBootWarTaskProvider(projectAfterEvaluation);\n+          TaskProvider<Task> jibDependenciesTask = tasks.register(DEPENDENCIES_TASK_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b7a2057bd5b9ee46aee327061a821db6505b210"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92b376d7b4b48af98b7f6140dc2c6ed38e58575a", "author": {"user": {"login": "seanabraham", "name": "Sean Abraham"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/92b376d7b4b48af98b7f6140dc2c6ed38e58575a", "committedDate": "2020-02-03T19:24:15Z", "message": "Remove jibDependencies task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2e09c34f18cbfe8ab9572ba2ca6c31cae4ba003", "author": {"user": {"login": "seanabraham", "name": "Sean Abraham"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/c2e09c34f18cbfe8ab9572ba2ca6c31cae4ba003", "committedDate": "2020-02-03T19:27:39Z", "message": "Fix formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MDY5NjUy", "url": "https://github.com/GoogleContainerTools/jib/pull/2247#pullrequestreview-354069652", "createdAt": "2020-02-05T21:57:30Z", "commit": {"oid": "c2e09c34f18cbfe8ab9572ba2ca6c31cae4ba003"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 319, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}