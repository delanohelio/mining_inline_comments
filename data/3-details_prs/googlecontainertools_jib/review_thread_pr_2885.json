{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2Mjg4NTEw", "number": 2885, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOTo1NjoyNFrOE10lJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTo1Njo0MlrOE21QFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODcxNDYzOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOTo1NjoyNFrOHuUMnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMzozMDo1OFrOHvAltw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg==", "bodyText": "This is a creative trick, but I feel it isn't really safe to replace stdout and stderr. For example, the unit framework depends on it, and I think we will not be able to see test failures.\nI have been thinking of two options for verifying command output: run as a separate process, or refactor the code. I didn't really like refactoring code only to be able to check log messages. Eventually I think we will reach the point where we really need to check log messages. And we will eventually find a way to run Jib CLI as a standalone process. Maybe for now, if we can't easily find a way to check log messages, I'm fine punting it.", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518327452", "createdAt": "2020-11-05T19:56:24Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  private static final Integer SUCCESS_CODE = 0;\n+  private static final Integer FAILURE_CODE = 1;\n+\n+  private final PrintStream originalOut = System.out;\n+  private final PrintStream originalErr = System.err;\n+  private final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+  private final ByteArrayOutputStream err = new ByteArrayOutputStream();\n+\n+  @Before\n+  public void setUp() {\n+    out.reset();\n+    err.reset();\n+    System.setOut(new PrintStream(out));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c3c361f4dba7d91de5581f459562878cbe1b0e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM1Mjc1OQ==", "bodyText": "Ah yeah this doesn't seem too great. Maybe we should create an issue to make the logger use PrintWriter instead of printing to System.err or System.out - https://picocli.info/#_testing_your_application.", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518352759", "createdAt": "2020-11-05T20:43:50Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  private static final Integer SUCCESS_CODE = 0;\n+  private static final Integer FAILURE_CODE = 1;\n+\n+  private final PrintStream originalOut = System.out;\n+  private final PrintStream originalErr = System.err;\n+  private final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+  private final ByteArrayOutputStream err = new ByteArrayOutputStream();\n+\n+  @Before\n+  public void setUp() {\n+    out.reset();\n+    err.reset();\n+    System.setOut(new PrintStream(out));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg=="}, "originalCommit": {"oid": "d0c3c361f4dba7d91de5581f459562878cbe1b0e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM3ODM0MA==", "bodyText": "Oh, nice documentation. I think setOut and setErr will just work without us having to change the logger. Have you tried that?", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518378340", "createdAt": "2020-11-05T21:26:48Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  private static final Integer SUCCESS_CODE = 0;\n+  private static final Integer FAILURE_CODE = 1;\n+\n+  private final PrintStream originalOut = System.out;\n+  private final PrintStream originalErr = System.err;\n+  private final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+  private final ByteArrayOutputStream err = new ByteArrayOutputStream();\n+\n+  @Before\n+  public void setUp() {\n+    out.reset();\n+    err.reset();\n+    System.setOut(new PrintStream(out));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg=="}, "originalCommit": {"oid": "d0c3c361f4dba7d91de5581f459562878cbe1b0e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ3NDIwMw==", "bodyText": "I agree haha. And sorry, are you referring to this approach?:\nMyApp app = new MyApp();\nCommandLine cmd = new CommandLine(app);\nStringWriter sw = new StringWriter();\ncmd.setOut(new PrintWriter(sw));", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518474203", "createdAt": "2020-11-06T01:42:02Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  private static final Integer SUCCESS_CODE = 0;\n+  private static final Integer FAILURE_CODE = 1;\n+\n+  private final PrintStream originalOut = System.out;\n+  private final PrintStream originalErr = System.err;\n+  private final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+  private final ByteArrayOutputStream err = new ByteArrayOutputStream();\n+\n+  @Before\n+  public void setUp() {\n+    out.reset();\n+    err.reset();\n+    System.setOut(new PrintStream(out));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg=="}, "originalCommit": {"oid": "d0c3c361f4dba7d91de5581f459562878cbe1b0e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ3NDU1Mw==", "bodyText": "Yes. I feel like this will work.", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518474553", "createdAt": "2020-11-06T01:43:22Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  private static final Integer SUCCESS_CODE = 0;\n+  private static final Integer FAILURE_CODE = 1;\n+\n+  private final PrintStream originalOut = System.out;\n+  private final PrintStream originalErr = System.err;\n+  private final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+  private final ByteArrayOutputStream err = new ByteArrayOutputStream();\n+\n+  @Before\n+  public void setUp() {\n+    out.reset();\n+    err.reset();\n+    System.setOut(new PrintStream(out));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg=="}, "originalCommit": {"oid": "d0c3c361f4dba7d91de5581f459562878cbe1b0e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc5NjQ4OA==", "bodyText": "When I had attempted this approach the output and the error messages could not be set using setOut/Err and were getting printed onto the console. I think it's because we are currently directly printing to System.out/err in the logger instead of writing to the picocli writer?\nThis assumes that the application uses the PrintWriter provided by CommandLine.getOut or CommandLine.getErr", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518796488", "createdAt": "2020-11-06T14:45:23Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  private static final Integer SUCCESS_CODE = 0;\n+  private static final Integer FAILURE_CODE = 1;\n+\n+  private final PrintStream originalOut = System.out;\n+  private final PrintStream originalErr = System.err;\n+  private final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+  private final ByteArrayOutputStream err = new ByteArrayOutputStream();\n+\n+  @Before\n+  public void setUp() {\n+    out.reset();\n+    err.reset();\n+    System.setOut(new PrintStream(out));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg=="}, "originalCommit": {"oid": "d0c3c361f4dba7d91de5581f459562878cbe1b0e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgwMDIxNQ==", "bodyText": "Ah, you're right. Let's change the logger. I think it'll be pretty straightforward.", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518800215", "createdAt": "2020-11-06T14:51:06Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  private static final Integer SUCCESS_CODE = 0;\n+  private static final Integer FAILURE_CODE = 1;\n+\n+  private final PrintStream originalOut = System.out;\n+  private final PrintStream originalErr = System.err;\n+  private final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+  private final ByteArrayOutputStream err = new ByteArrayOutputStream();\n+\n+  @Before\n+  public void setUp() {\n+    out.reset();\n+    err.reset();\n+    System.setOut(new PrintStream(out));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg=="}, "originalCommit": {"oid": "d0c3c361f4dba7d91de5581f459562878cbe1b0e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgxNjQyOA==", "bodyText": "Sounds good! Added #2886.", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518816428", "createdAt": "2020-11-06T15:15:42Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  private static final Integer SUCCESS_CODE = 0;\n+  private static final Integer FAILURE_CODE = 1;\n+\n+  private final PrintStream originalOut = System.out;\n+  private final PrintStream originalErr = System.err;\n+  private final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+  private final ByteArrayOutputStream err = new ByteArrayOutputStream();\n+\n+  @Before\n+  public void setUp() {\n+    out.reset();\n+    err.reset();\n+    System.setOut(new PrintStream(out));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg=="}, "originalCommit": {"oid": "d0c3c361f4dba7d91de5581f459562878cbe1b0e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyNDY3Mg==", "bodyText": "\ud83d\udc4d Let's fix #2886 first before this PR.", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518824672", "createdAt": "2020-11-06T15:27:14Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  private static final Integer SUCCESS_CODE = 0;\n+  private static final Integer FAILURE_CODE = 1;\n+\n+  private final PrintStream originalOut = System.out;\n+  private final PrintStream originalErr = System.err;\n+  private final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+  private final ByteArrayOutputStream err = new ByteArrayOutputStream();\n+\n+  @Before\n+  public void setUp() {\n+    out.reset();\n+    err.reset();\n+    System.setOut(new PrintStream(out));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg=="}, "originalCommit": {"oid": "d0c3c361f4dba7d91de5581f459562878cbe1b0e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1NDc3NQ==", "bodyText": "Done.", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r519054775", "createdAt": "2020-11-06T23:30:58Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  private static final Integer SUCCESS_CODE = 0;\n+  private static final Integer FAILURE_CODE = 1;\n+\n+  private final PrintStream originalOut = System.out;\n+  private final PrintStream originalErr = System.err;\n+  private final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+  private final ByteArrayOutputStream err = new ByteArrayOutputStream();\n+\n+  @Before\n+  public void setUp() {\n+    out.reset();\n+    err.reset();\n+    System.setOut(new PrintStream(out));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ1Mg=="}, "originalCommit": {"oid": "d0c3c361f4dba7d91de5581f459562878cbe1b0e"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODcxNjA2OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOTo1Njo1MFrOHuUNgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOTo1Njo1MFrOHuUNgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzY4MQ==", "bodyText": "Let's just go for\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(actual).isEqualTo(FAILURE_CODE);\n          \n          \n            \n                assertThat(exitCode).isEqualTo(1);", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r518327681", "createdAt": "2020-11-05T19:56:50Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  private static final Integer SUCCESS_CODE = 0;\n+  private static final Integer FAILURE_CODE = 1;\n+\n+  private final PrintStream originalOut = System.out;\n+  private final PrintStream originalErr = System.err;\n+  private final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+  private final ByteArrayOutputStream err = new ByteArrayOutputStream();\n+\n+  @Before\n+  public void setUp() {\n+    out.reset();\n+    err.reset();\n+    System.setOut(new PrintStream(out));\n+    System.setErr(new PrintStream(err));\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    System.setOut(originalOut);\n+    System.setErr(originalErr);\n+  }\n+\n+  @Test\n+  public void testErrorLogging_fileDoesNotExist() {\n+    Integer actual =\n+        new CommandLine(new JibCli())\n+            .execute(\"--target\", \"docker://jib-cli-image\", \"jar\", \"unknown.jar\");\n+\n+    assertThat(actual).isEqualTo(FAILURE_CODE);\n+    assertThat(err.toString())\n+        .contains(\"[ERROR] The file path provided does not exist: unknown.jar\");\n+  }\n+\n+  @Test\n+  public void testErrorLogging_directoryGiven() throws URISyntaxException {\n+    Path jarFile = Paths.get(Resources.getResource(\"emptyDir\").toURI());\n+    Integer actual =\n+        new CommandLine(new JibCli())\n+            .execute(\"--target\", \"docker://jib-cli-image\", \"jar\", jarFile.toString());\n+\n+    assertThat(actual).isEqualTo(FAILURE_CODE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c3c361f4dba7d91de5581f459562878cbe1b0e"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTI5NDMxOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTo1Mzo1NlrOHv1T9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTo1Mzo1NlrOHv1T9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkxODU4MA==", "bodyText": "I don't think we have \"emptyDir\" in our test runtime classpath. Maybe just Paths.get(\"/\")?", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r519918580", "createdAt": "2020-11-09T15:53:56Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  @Test\n+  public void testErrorLogging_fileDoesNotExist() {\n+    CommandLine jibCli = new CommandLine(new JibCli());\n+    StringWriter sw = new StringWriter();\n+    jibCli.setErr(new PrintWriter(sw));\n+\n+    Integer exitCode = jibCli.execute(\"--target\", \"docker://jib-cli-image\", \"jar\", \"unknown.jar\");\n+\n+    assertThat(exitCode).isEqualTo(1);\n+    assertThat(sw.toString())\n+        .isEqualTo(\"[ERROR] The file path provided does not exist: unknown.jar\\n\");\n+  }\n+\n+  @Test\n+  public void testErrorLogging_directoryGiven() throws URISyntaxException {\n+    CommandLine jibCli = new CommandLine(new JibCli());\n+    StringWriter sw = new StringWriter();\n+    jibCli.setErr(new PrintWriter(sw));\n+\n+    Path jarFile = Paths.get(Resources.getResource(\"emptyDir\").toURI());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd2ac6a7e17bd2fb6c50ebcdf5f77a01edb1f940"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTI5NDYwOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTo1Mzo1OVrOHv1UJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTo1Mzo1OVrOHv1UJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkxODYzMQ==", "bodyText": "The Google style doesn't allow 'sw'. I think we can go for\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                StringWriter sw = new StringWriter();\n          \n          \n            \n                StringWriter stringWriter = new StringWriter();", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r519918631", "createdAt": "2020-11-09T15:53:59Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  @Test\n+  public void testErrorLogging_fileDoesNotExist() {\n+    CommandLine jibCli = new CommandLine(new JibCli());\n+    StringWriter sw = new StringWriter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd2ac6a7e17bd2fb6c50ebcdf5f77a01edb1f940"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTMxMDI5OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTo1Njo0MlrOHv1dkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTo1Njo0MlrOHv1dkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkyMTA0Mw==", "bodyText": "exitCode", "url": "https://github.com/GoogleContainerTools/jib/pull/2885#discussion_r519921043", "createdAt": "2020-11-09T15:56:42Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.Command;\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.Test;\n+import picocli.CommandLine;\n+\n+public class JarCommandTest {\n+\n+  @Test\n+  public void testErrorLogging_fileDoesNotExist() {\n+    CommandLine jibCli = new CommandLine(new JibCli());\n+    StringWriter sw = new StringWriter();\n+    jibCli.setErr(new PrintWriter(sw));\n+\n+    Integer exitCode = jibCli.execute(\"--target\", \"docker://jib-cli-image\", \"jar\", \"unknown.jar\");\n+\n+    assertThat(exitCode).isEqualTo(1);\n+    assertThat(sw.toString())\n+        .isEqualTo(\"[ERROR] The file path provided does not exist: unknown.jar\\n\");\n+  }\n+\n+  @Test\n+  public void testErrorLogging_directoryGiven() throws URISyntaxException {\n+    CommandLine jibCli = new CommandLine(new JibCli());\n+    StringWriter sw = new StringWriter();\n+    jibCli.setErr(new PrintWriter(sw));\n+\n+    Path jarFile = Paths.get(Resources.getResource(\"emptyDir\").toURI());\n+    Integer exitCode =\n+        jibCli.execute(\"--target\", \"docker://jib-cli-image\", \"jar\", jarFile.toString());\n+\n+    assertThat(exitCode).isEqualTo(1);\n+    assertThat(sw.toString())\n+        .isEqualTo(\n+            \"[ERROR] The file path provided is for a directory. Please provide a path to a jar file: \"\n+                + jarFile.toString()\n+                + \"\\n\");\n+  }\n+\n+  @Test\n+  public void testJar_toDocker() throws IOException, InterruptedException, URISyntaxException {\n+    Path jarFile = Paths.get(Resources.getResource(\"simpleJar.jar\").toURI());\n+    Integer actual =\n+        new CommandLine(new JibCli())\n+            .execute(\"--target\", \"docker://jib-cli-image\", \"jar\", jarFile.toString());\n+    String output = new Command(\"docker\", \"run\", \"--rm\", \"jib-cli-image\").run();\n+\n+    assertThat(actual).isEqualTo(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd2ac6a7e17bd2fb6c50ebcdf5f77a01edb1f940"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 20, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}