{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyMjQ2Nzk4", "number": 2918, "title": "Implement explode mode for Spring Boot Fat Jar", "bodyText": "For #2847\nImplements explode mode for spring boot fat jar to create layers as specified by BOOT-INF/layers.idx (if present), otherwise creates dependencies, spring-boot-loader, snapshot dependencies, resources and classes layers as determined by the standard spring boot executable jar format.\nNotes on testing:\n\nIntegration tests implemented in #2926", "createdAt": "2020-12-04T02:49:21Z", "url": "https://github.com/GoogleContainerTools/jib/pull/2918", "merged": true, "mergeCommit": {"oid": "bf732ab3a6d5c73e71bf5877a43b406f6b035886"}, "closed": true, "closedAt": "2020-12-15T21:24:00Z", "author": {"login": "mpeddada1"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfft42AH2gAyNTMyMjQ2Nzk4OjY3NThkZWU5OTA5NThiNDAyN2Q0ZTIyNTQ1YTRmOTM4NGRhYTI2ZjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmduMyAH2gAyNTMyMjQ2Nzk4OjJhMjJhZTE5YmQ4NzE0ODViZWJmZjhlYTNmNTk1MTQ1N2Q5MTUwYmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6758dee990958b4027d4e22545a4f9384daa26f3", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/6758dee990958b4027d4e22545a4f9384daa26f3", "committedDate": "2020-11-24T01:46:04Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0547910bc469f07f4f10f1948a9500161436976b", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/0547910bc469f07f4f10f1948a9500161436976b", "committedDate": "2020-12-02T21:43:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ce9619fdc8943324e87bc5daa6d746945bf9dec", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/5ce9619fdc8943324e87bc5daa6d746945bf9dec", "committedDate": "2020-12-03T23:45:17Z", "message": "exploded mode for spring boot fat jar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc2556a5ab323396838ba1405f5fd376605b8d06", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/dc2556a5ab323396838ba1405f5fd376605b8d06", "committedDate": "2020-12-03T23:45:23Z", "message": "Merge branch 'master' of github.com:GoogleContainerTools/jib into cli-spring-boot-expl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cf2adc8a73cbee6644106a783d707b2d3253db4", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/8cf2adc8a73cbee6644106a783d707b2d3253db4", "committedDate": "2020-12-04T01:01:04Z", "message": "remove test jar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0864cfb8e8e582980e2a7840260eb5365d696444", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/0864cfb8e8e582980e2a7840260eb5365d696444", "committedDate": "2020-12-04T02:36:36Z", "message": "clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c2ff61a8c8cfffea8611a2dde8642bf15b8e909", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/9c2ff61a8c8cfffea8611a2dde8642bf15b8e909", "committedDate": "2020-12-04T23:10:49Z", "message": "fix NoSuchElementException when layers.idx includes a layer with no files listed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5745da8c438bc56ca8257ce745a29ef5d44189b8", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/5745da8c438bc56ca8257ce745a29ef5d44189b8", "committedDate": "2020-12-04T23:15:56Z", "message": "rename test jar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d4558cff67efb4e25d01a745663c8475df69e1f", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/8d4558cff67efb4e25d01a745663c8475df69e1f", "committedDate": "2020-12-04T23:22:47Z", "message": "formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c6bfba31af3571094279d787d28ce9834760fdd", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/4c6bfba31af3571094279d787d28ce9834760fdd", "committedDate": "2020-12-07T18:36:10Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "committedDate": "2020-12-07T18:48:45Z", "message": "cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NjYwMDg4", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#pullrequestreview-546660088", "createdAt": "2020-12-08T00:49:06Z", "commit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo0OTowNlrOIBBqfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTo0Nzo1NlrOIBDCbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0Njc1MQ==", "bodyText": "Do we have to do this? jib-core (JavaContainerBuilder) uses a space.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537946751", "createdAt": "2020-12-08T00:49:06Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -42,7 +50,7 @@\n   private static final String CLASSES = \"classes\";\n   private static final String RESOURCES = \"resources\";\n   private static final String DEPENDENCIES = \"dependencies\";\n-  private static final String SNAPSHOT_DEPENDENCIES = \"snapshot dependencies\";\n+  private static final String SNAPSHOT_DEPENDENCIES = \"snapshot-dependencies\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0NzY3OQ==", "bodyText": "I think tempDirPath is right from the perspective of a caller. A caller is not supposed to provide a JAR content root but a temp directory.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537947679", "createdAt": "2020-12-08T00:51:30Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -79,20 +87,19 @@ static JarType determineJarType(Path jarPath) throws IOException {\n    * a standard jar.\n    *\n    * @param jarPath path to jar file\n-   * @param tempDirPath path to temporary jib local directory\n+   * @param localExplodedJarRoot path to temporary jib local directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MjM3Mw==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537952373", "createdAt": "2020-12-08T01:03:21Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2MDgxMg==", "bodyText": "Although BOOT-INF/lib works, for non-test code, we do .resolve(\"BOOT-INF\").resolve(\"lib\") to avoid using a certain path separator.\nAnd why do we need getParent() if we are checking startsWith()?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537960812", "createdAt": "2020-12-08T01:25:41Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n+      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+      if (layerIndex != null) {\n+        return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n+      }\n+\n+      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n+\n+      // Non-snapshot layer\n+      Predicate<Path> isInBootInfLib =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2MzMzNw==", "bodyText": "This doesn't seem right. It's surprising this double-resolve actually worked.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537963337", "createdAt": "2020-12-08T01:32:28Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n+      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+      if (layerIndex != null) {\n+        return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n+      }\n+\n+      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n+\n+      // Non-snapshot layer\n+      Predicate<Path> isInBootInfLib =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));\n+      Predicate<Path> isSnapshot = path -> path.getFileName().toString().contains(\"SNAPSHOT\");\n+      Predicate<Path> nonSnapshotPredicate = isInBootInfLib.and(isSnapshot.negate());\n+      FileEntriesLayer nonSnapshotLayer =\n+          addDirectoryContentsToLayer(\n+              DEPENDENCIES, localExplodedJarRoot, nonSnapshotPredicate, APP_ROOT);\n+\n+      // Snapshot layer\n+      Predicate<Path> snapshotPredicate = isInBootInfLib.and(isSnapshot);\n+      FileEntriesLayer snapshotLayer =\n+          addDirectoryContentsToLayer(\n+              SNAPSHOT_DEPENDENCIES, localExplodedJarRoot, snapshotPredicate, APP_ROOT);\n+\n+      // Spring-boot-loader layer.\n+      Predicate<Path> isLoader =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"org\"));\n+      FileEntriesLayer loaderLayer =\n+          addDirectoryContentsToLayer(\n+              \"spring-boot-loader\", localExplodedJarRoot, isLoader, APP_ROOT);\n+\n+      // Classes layer.\n+      Predicate<Path> isClass = path -> path.getFileName().toString().endsWith(\".class\");\n+      Predicate<Path> isInBootInfClasses =\n+          path ->\n+              path.getParent()\n+                  .startsWith(\n+                      localExplodedJarRoot.resolve(\n+                          localExplodedJarRoot.resolve(\"BOOT-INF/classes\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NTA4Nw==", "bodyText": "I think the following is more accurate:\nisInMetaInf.or(isInBootInfClasses.and(isClass.negate()))\n\nAnd I thought we should also include resources files at the JAR content root? Is it not the case?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537965087", "createdAt": "2020-12-08T01:37:07Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n+      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+      if (layerIndex != null) {\n+        return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n+      }\n+\n+      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n+\n+      // Non-snapshot layer\n+      Predicate<Path> isInBootInfLib =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));\n+      Predicate<Path> isSnapshot = path -> path.getFileName().toString().contains(\"SNAPSHOT\");\n+      Predicate<Path> nonSnapshotPredicate = isInBootInfLib.and(isSnapshot.negate());\n+      FileEntriesLayer nonSnapshotLayer =\n+          addDirectoryContentsToLayer(\n+              DEPENDENCIES, localExplodedJarRoot, nonSnapshotPredicate, APP_ROOT);\n+\n+      // Snapshot layer\n+      Predicate<Path> snapshotPredicate = isInBootInfLib.and(isSnapshot);\n+      FileEntriesLayer snapshotLayer =\n+          addDirectoryContentsToLayer(\n+              SNAPSHOT_DEPENDENCIES, localExplodedJarRoot, snapshotPredicate, APP_ROOT);\n+\n+      // Spring-boot-loader layer.\n+      Predicate<Path> isLoader =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"org\"));\n+      FileEntriesLayer loaderLayer =\n+          addDirectoryContentsToLayer(\n+              \"spring-boot-loader\", localExplodedJarRoot, isLoader, APP_ROOT);\n+\n+      // Classes layer.\n+      Predicate<Path> isClass = path -> path.getFileName().toString().endsWith(\".class\");\n+      Predicate<Path> isInBootInfClasses =\n+          path ->\n+              path.getParent()\n+                  .startsWith(\n+                      localExplodedJarRoot.resolve(\n+                          localExplodedJarRoot.resolve(\"BOOT-INF/classes\")));\n+      Predicate<Path> finalPredicateClasses = isInBootInfClasses.and(isClass);\n+      FileEntriesLayer classesLayer =\n+          addDirectoryContentsToLayer(\n+              CLASSES, localExplodedJarRoot, finalPredicateClasses, APP_ROOT);\n+\n+      // Resources layer.\n+      Predicate<Path> isInMetaInf =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"META-INF\"));\n+      Predicate<Path> finalPredicateResources =\n+          isInBootInfClasses.or(isInMetaInf).and(isClass.negate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NTk1Nw==", "bodyText": "localExplodedJarRoot.resolve(\"BOOT-INF\").... No need for Paths.get().", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537965957", "createdAt": "2020-12-08T01:39:24Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -233,6 +325,66 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     }\n   }\n \n+  /**\n+   * Creates layers as specified by the layers.idx file (located in the BOOT-INF/ directory of the\n+   * JAR).\n+   *\n+   * @param localExplodedJarRoot Path to temporary directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if temporary directory provided doesn't exist\n+   */\n+  private static List<FileEntriesLayer> createLayersForLayeredSpringBootJar(\n+      Path localExplodedJarRoot) throws IOException {\n+    Path layerIndexPath = localExplodedJarRoot.resolve(Paths.get(\"BOOT-INF/layers.idx\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2OTI2MQ==", "bodyText": "Let's move this down to line 207.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537969261", "createdAt": "2020-12-08T01:47:56Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n+      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+      if (layerIndex != null) {\n+        return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n+      }\n+\n+      ArrayList<FileEntriesLayer> layers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NTc5Njgz", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#pullrequestreview-547579683", "createdAt": "2020-12-08T19:54:47Z", "commit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo1NDo0N1rOIBzd4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDowODo0N1rOIBz_Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2MjcyMg==", "bodyText": "In the example above,\n      // - dependencies:\n      //   - BOOT-INF/lib/dependency1.jar\n      // - application:\n      //   - BOOT-INF/classes\n      //   - META-INF/\n\nBOOT-INF/classes is a directory but doesn't end with /. I think it's risky to assume every directory will end with /.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538762722", "createdAt": "2020-12-08T19:54:47Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -262,4 +414,18 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n             });\n     return builder.build();\n   }\n+\n+  private static Optional<Predicate<Path>> computePredicateForLayeredSpringBoot(\n+      List<String> layerContents, Path localExplodedJarRoot) {\n+    List<Predicate<Path>> allPredicates = new ArrayList<>();\n+    for (String pathName : layerContents) {\n+      if (pathName.endsWith(\"/\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2NTEyMA==", "bodyText": "Is it not possible to exclude META-INF, BOOT-INF, and org?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538765120", "createdAt": "2020-12-08T19:58:30Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -417,4 +423,318 @@ public void testComputeEntrypointForPackagedStandard_withMainClass()\n     assertThat(actualEntrypoint)\n         .isEqualTo(ImmutableList.of(\"java\", \"-jar\", \"/app/standardJarWithClassPath.jar\"));\n   }\n+\n+  @Test\n+  public void testCreateLayersForExplodedLayeredSpringBoot()\n+      throws IOException, URISyntaxException {\n+    Path springbootJar = Paths.get(Resources.getResource(SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.newFolder().toPath();\n+    List<FileEntriesLayer> layers =\n+        JarModeProcessor.createLayersForExplodedSpringBootFat(springbootJar, destDir);\n+\n+    assertThat(layers.size()).isEqualTo(4);\n+\n+    FileEntriesLayer nonSnapshotLayer = layers.get(0);\n+    FileEntriesLayer loaderLayer = layers.get(1);\n+    FileEntriesLayer snapshotLayer = layers.get(2);\n+    FileEntriesLayer applicationLayer = layers.get(3);\n+\n+    // Validate dependencies layers.\n+    assertThat(nonSnapshotLayer.getName()).isEqualTo(\"dependencies\");\n+    assertThat(\n+            nonSnapshotLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency1.jar\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency2.jar\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2NjE4MA==", "bodyText": "Interesting. I guess layer.idx in this test doesn't have a resource layer for META-INF?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538766180", "createdAt": "2020-12-08T20:00:09Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -417,4 +423,318 @@ public void testComputeEntrypointForPackagedStandard_withMainClass()\n     assertThat(actualEntrypoint)\n         .isEqualTo(ImmutableList.of(\"java\", \"-jar\", \"/app/standardJarWithClassPath.jar\"));\n   }\n+\n+  @Test\n+  public void testCreateLayersForExplodedLayeredSpringBoot()\n+      throws IOException, URISyntaxException {\n+    Path springbootJar = Paths.get(Resources.getResource(SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.newFolder().toPath();\n+    List<FileEntriesLayer> layers =\n+        JarModeProcessor.createLayersForExplodedSpringBootFat(springbootJar, destDir);\n+\n+    assertThat(layers.size()).isEqualTo(4);\n+\n+    FileEntriesLayer nonSnapshotLayer = layers.get(0);\n+    FileEntriesLayer loaderLayer = layers.get(1);\n+    FileEntriesLayer snapshotLayer = layers.get(2);\n+    FileEntriesLayer applicationLayer = layers.get(3);\n+\n+    // Validate dependencies layers.\n+    assertThat(nonSnapshotLayer.getName()).isEqualTo(\"dependencies\");\n+    assertThat(\n+            nonSnapshotLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency1.jar\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency2.jar\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));\n+    assertThat(loaderLayer.getName()).isEqualTo(\"spring-boot-loader\");\n+    assertThat(\n+            loaderLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data/data1.class\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/launcher1.class\"));\n+\n+    assertThat(snapshotLayer.getName()).isEqualTo(\"snapshot-dependencies\");\n+    assertThat(\n+            snapshotLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency3-SNAPSHOT.jar\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));\n+\n+    assertThat(applicationLayer.getName()).isEqualTo(\"application\");\n+    assertThat(\n+            applicationLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/class1.class\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory/class2.class\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF/MANIFEST.MF\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2NjczNA==", "bodyText": "I think it's worth adding the contents of layer.idx as a code comment.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538766734", "createdAt": "2020-12-08T20:01:07Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -417,4 +423,318 @@ public void testComputeEntrypointForPackagedStandard_withMainClass()\n     assertThat(actualEntrypoint)\n         .isEqualTo(ImmutableList.of(\"java\", \"-jar\", \"/app/standardJarWithClassPath.jar\"));\n   }\n+\n+  @Test\n+  public void testCreateLayersForExplodedLayeredSpringBoot()\n+      throws IOException, URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2Njk4Mg==", "bodyText": "Content of layers.idx as a comment?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538766982", "createdAt": "2020-12-08T20:01:28Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -417,4 +423,318 @@ public void testComputeEntrypointForPackagedStandard_withMainClass()\n     assertThat(actualEntrypoint)\n         .isEqualTo(ImmutableList.of(\"java\", \"-jar\", \"/app/standardJarWithClassPath.jar\"));\n   }\n+\n+  @Test\n+  public void testCreateLayersForExplodedLayeredSpringBoot()\n+      throws IOException, URISyntaxException {\n+    Path springbootJar = Paths.get(Resources.getResource(SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.newFolder().toPath();\n+    List<FileEntriesLayer> layers =\n+        JarModeProcessor.createLayersForExplodedSpringBootFat(springbootJar, destDir);\n+\n+    assertThat(layers.size()).isEqualTo(4);\n+\n+    FileEntriesLayer nonSnapshotLayer = layers.get(0);\n+    FileEntriesLayer loaderLayer = layers.get(1);\n+    FileEntriesLayer snapshotLayer = layers.get(2);\n+    FileEntriesLayer applicationLayer = layers.get(3);\n+\n+    // Validate dependencies layers.\n+    assertThat(nonSnapshotLayer.getName()).isEqualTo(\"dependencies\");\n+    assertThat(\n+            nonSnapshotLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency1.jar\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency2.jar\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));\n+    assertThat(loaderLayer.getName()).isEqualTo(\"spring-boot-loader\");\n+    assertThat(\n+            loaderLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data/data1.class\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/launcher1.class\"));\n+\n+    assertThat(snapshotLayer.getName()).isEqualTo(\"snapshot-dependencies\");\n+    assertThat(\n+            snapshotLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency3-SNAPSHOT.jar\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));\n+\n+    assertThat(applicationLayer.getName()).isEqualTo(\"application\");\n+    assertThat(\n+            applicationLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/class1.class\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory/class2.class\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF/MANIFEST.MF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));\n+  }\n+\n+  @Test\n+  public void testCreateLayersForExplodedLayeredSpringBoot_singleEmptyLayerListed()\n+      throws IOException, URISyntaxException {\n+    // Springboot JAR with \"snapshot-dependencies\" layer listed as empty in BOOT-INF/layers.idx", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc3MDQ4MQ==", "bodyText": "Can we also check the name of each layer?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538770481", "createdAt": "2020-12-08T20:07:23Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -146,4 +151,222 @@ public void testToJibContainerBuilder_packagedStandard_basicInfo()\n                 .build()\n                 .getEntries());\n   }\n+\n+  @Test\n+  public void testToJibContainerBuilder_explodedLayeredSpringBoot_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();\n+    JibContainerBuilder containerBuilder =\n+        JarFiles.toJibContainerBuilder(springbootJar, destDir, ProcessingMode.exploded);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();\n+    assertThat(buildPlan.getEntrypoint())\n+        .isEqualTo(\n+            ImmutableList.of(\"java\", \"-cp\", \"/app\", \"org.springframework.boot.loader.JarLauncher\"));\n+    assertThat(buildPlan.getLayers().size()).isEqualTo(4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc3MTI3NA==", "bodyText": "I also commented this below, but we should try to exclude directories that don't belong to this layer.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538771274", "createdAt": "2020-12-08T20:08:47Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -146,4 +151,222 @@ public void testToJibContainerBuilder_packagedStandard_basicInfo()\n                 .build()\n                 .getEntries());\n   }\n+\n+  @Test\n+  public void testToJibContainerBuilder_explodedLayeredSpringBoot_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();\n+    JibContainerBuilder containerBuilder =\n+        JarFiles.toJibContainerBuilder(springbootJar, destDir, ProcessingMode.exploded);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();\n+    assertThat(buildPlan.getEntrypoint())\n+        .isEqualTo(\n+            ImmutableList.of(\"java\", \"-cp\", \"/app\", \"org.springframework.boot.loader.JarLauncher\"));\n+    assertThat(buildPlan.getLayers().size()).isEqualTo(4);\n+    assertThatExpectedEntriesPresentInNonSnapshotLayer_SpringBoot(\n+        ((FileEntriesLayer) buildPlan.getLayers().get(0)).getEntries(), destDir);\n+    assertThatExpectedEntriesPresentInLoaderLayer_SpringBoot(\n+        ((FileEntriesLayer) buildPlan.getLayers().get(1)).getEntries(), destDir);\n+    assertThatExpectedEntriesPresentInSnapshotLayer_SpringBoot(\n+        ((FileEntriesLayer) buildPlan.getLayers().get(2)).getEntries(), destDir);\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(3)).getEntries())\n+        .containsExactlyElementsIn(\n+            FileEntriesLayer.builder()\n+                .addEntry(destDir.resolve(\"META-INF/\"), AbsoluteUnixPath.get(\"/app/META-INF/\"))\n+                .addEntry(\n+                    destDir.resolve(\"META-INF/MANIFEST.MF\"),\n+                    AbsoluteUnixPath.get(\"/app/META-INF/MANIFEST.MF\"))\n+                .addEntry(destDir.resolve(\"BOOT-INF/\"), AbsoluteUnixPath.get(\"/app/BOOT-INF/\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NjQ4ODIx", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#pullrequestreview-548648821", "createdAt": "2020-12-09T22:03:59Z", "commit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjowMzo1OVrOICrlcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjowMzo1OVrOICrlcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4MjE2MA==", "bodyText": "The Spring doc makes it very explicit that they are either dash-space or space-space-dash-space. I think we can use ' ' (space) instead of \\\\s. Also the doc says paths and layer names are quoted. So we can have it like Pattern.compile(\"- \\\"([^\\\"]*)\\\":\") (untested) without later removing quotes?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539682160", "createdAt": "2020-12-09T22:03:59Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -233,6 +325,66 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     }\n   }\n \n+  /**\n+   * Creates layers as specified by the layers.idx file (located in the BOOT-INF/ directory of the\n+   * JAR).\n+   *\n+   * @param localExplodedJarRoot Path to temporary directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if temporary directory provided doesn't exist\n+   */\n+  private static List<FileEntriesLayer> createLayersForLayeredSpringBootJar(\n+      Path localExplodedJarRoot) throws IOException {\n+    Path layerIndexPath = localExplodedJarRoot.resolve(Paths.get(\"BOOT-INF/layers.idx\"));\n+    Pattern layerNamePattern = Pattern.compile(\"-\\\\s(.*):\");\n+    Pattern fileNamePattern = Pattern.compile(\"\\\\s\\\\s-\\\\s(.*)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 183}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "committedDate": "2020-12-10T19:55:42Z", "message": "cleaning up comments, tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c25b738e86074b01c1d973045fd1c7c6a8202112", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/c25b738e86074b01c1d973045fd1c7c6a8202112", "committedDate": "2020-12-11T04:28:34Z", "message": "fix more tests and modify regex"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fdf976e0890ed119c7dd200b6f050692e2391bb", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/5fdf976e0890ed119c7dd200b6f050692e2391bb", "committedDate": "2020-12-11T14:15:31Z", "message": "apply suggested edits and fix comments in tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccc02710fe27a13f677677cec4a60efbf65a51b4", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/ccc02710fe27a13f677677cec4a60efbf65a51b4", "committedDate": "2020-12-11T14:23:12Z", "message": "don't add layer if it is empty when creating layers for expl standard jar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "012c96074b31d07626db2f13357ff1581a654ef1", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/012c96074b31d07626db2f13357ff1581a654ef1", "committedDate": "2020-12-11T15:25:19Z", "message": "simplify existing logic to exclude empty directories"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "361dabdbdce24fd57cd140f1a753f80246df0bc7", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/361dabdbdce24fd57cd140f1a753f80246df0bc7", "committedDate": "2020-12-11T15:32:58Z", "message": "cleanup few comments, delete spaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "393dba9255d59b99ac8a3887d44c9cd00d14ae26", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/393dba9255d59b99ac8a3887d44c9cd00d14ae26", "committedDate": "2020-12-11T15:41:21Z", "message": "simplify predicate for resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59327e1dd0028c818ab90340e3d2654d7fefbdc3", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/59327e1dd0028c818ab90340e3d2654d7fefbdc3", "committedDate": "2020-12-11T15:51:31Z", "message": "small format fix for test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97e268c65232e4ec0f9912a8c9ccb7744eb5483e", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/97e268c65232e4ec0f9912a8c9ccb7744eb5483e", "committedDate": "2020-12-11T18:08:53Z", "message": "cleanup jarfiles test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjQwOTI4", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#pullrequestreview-550640928", "createdAt": "2020-12-11T23:20:00Z", "commit": {"oid": "97e268c65232e4ec0f9912a8c9ccb7744eb5483e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMzoyMDowMFrOIEUjAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMzoyMDowMFrOIEUjAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQwMTg1OA==", "bodyText": "I vaguely remember I added Files.isDirectory(path) to not miss adding empty directories. (It's not because we wanted to add all the directories leading to /. Maybe missing empty directories doesn't matter in practice almost all the time, especially for jib jar. I wonder if we can just get rid of Files.isDirectory(path) and the new while loop below? As long as it works, we should be good?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r541401858", "createdAt": "2020-12-11T23:20:00Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -251,15 +392,36 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n       AbsoluteUnixPath basePathInContainer)\n       throws IOException {\n     FileEntriesLayer.Builder builder = FileEntriesLayer.builder().setName(layerName);\n+    HashSet<Path> addedPaths = new HashSet<>();\n     new DirectoryWalker(sourceRoot)\n         .filterRoot()\n-        .filter(path -> Files.isDirectory(path) || pathFilter.test(path))\n+        .filter(path -> pathFilter.test(path))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e268c65232e4ec0f9912a8c9ccb7744eb5483e"}, "originalPosition": 309}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25dc4312107d027569cd47e2b5d6c0fa018c0702", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/25dc4312107d027569cd47e2b5d6c0fa018c0702", "committedDate": "2020-12-12T22:06:56Z", "message": "make layer predicates check that the path is not a directory and don't add empty directories to layers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35a451025510cebff01ebf56c821a5b3069139e9", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/35a451025510cebff01ebf56c821a5b3069139e9", "committedDate": "2020-12-12T22:17:18Z", "message": "remove unnecessary helpers from test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5694697be60090695c5a4001f23fb79e11cab7f6", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/5694697be60090695c5a4001f23fb79e11cab7f6", "committedDate": "2020-12-12T22:18:18Z", "message": "add space"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64797b74123e9dde635eb8de1324c956f11a92c2", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/64797b74123e9dde635eb8de1324c956f11a92c2", "committedDate": "2020-12-14T16:22:54Z", "message": "formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNjkxODEy", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#pullrequestreview-551691812", "createdAt": "2020-12-14T17:37:03Z", "commit": {"oid": "64797b74123e9dde635eb8de1324c956f11a92c2"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzozNzowNFrOIFcI8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzozOTowOFrOIFcOXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3NDgzMg==", "bodyText": "Nit: this should also work:\n    Predicate<Path> isFile = Files::isRegularFile;\nor\n    Predicate<Path> isResourceFile = isClassFile.negate().and(Files::isRegularFile);", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542574832", "createdAt": "2020-12-14T17:37:04Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -95,16 +105,21 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     Path localExplodedJarRoot = tempDirPath;\n     ZipUtil.unzip(jarPath, localExplodedJarRoot);\n     Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n-    Predicate<Path> isResourceFile = isClassFile.negate();\n+    Predicate<Path> isFile = path -> path.toFile().isFile();\n+    Predicate<Path> isResourceFile = isFile.and(isClassFile.negate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64797b74123e9dde635eb8de1324c956f11a92c2"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3NjIyMQ==", "bodyText": "Start this with checking a file and remove the AND operation at the caller site?\nPredicate<Path> predicate = Files::isRegularFile;", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542576221", "createdAt": "2020-12-14T17:39:08Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -253,13 +396,24 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n     FileEntriesLayer.Builder builder = FileEntriesLayer.builder().setName(layerName);\n     new DirectoryWalker(sourceRoot)\n         .filterRoot()\n-        .filter(path -> Files.isDirectory(path) || pathFilter.test(path))\n+        .filter(path -> pathFilter.test(path))\n         .walk(\n             path -> {\n-              AbsoluteUnixPath pathOnContainer =\n-                  basePathInContainer.resolve(sourceRoot.relativize(path));\n-              builder.addEntry(path, pathOnContainer);\n+              builder.addEntry(path, basePathInContainer.resolve(sourceRoot.relativize(path)));\n             });\n     return builder.build();\n   }\n+\n+  private static Predicate<Path> isInListedDirectoryOrIsSameFile(\n+      List<String> layerContents, Path localExplodedJarRoot) {\n+    Predicate<Path> predicate = Predicates.alwaysFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64797b74123e9dde635eb8de1324c956f11a92c2"}, "originalPosition": 330}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12c395aab0a84368890e21f269e6256e3abb0d98", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/12c395aab0a84368890e21f269e6256e3abb0d98", "committedDate": "2020-12-14T18:19:40Z", "message": "cleaning up predicates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "557fc14e51af04d59499e37a753bff4131d41930", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/557fc14e51af04d59499e37a753bff4131d41930", "committedDate": "2020-12-14T18:24:45Z", "message": "moving predicate to check a file to helper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzkwMjc1", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#pullrequestreview-551790275", "createdAt": "2020-12-14T18:46:07Z", "commit": {"oid": "557fc14e51af04d59499e37a753bff4131d41930"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo0NjowOFrOIFfupw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTowNToyM1rOIFhH5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYzMzYzOQ==", "bodyText": "Nit: in this case, I think giving a name pathOnContainer via a variable as in the original code improves readabilty. It's not easy to figure out what basePathInContainer.resolve(sourceRoot.relativize(path)) means.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542633639", "createdAt": "2020-12-14T18:46:08Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -253,13 +394,24 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n     FileEntriesLayer.Builder builder = FileEntriesLayer.builder().setName(layerName);\n     new DirectoryWalker(sourceRoot)\n         .filterRoot()\n-        .filter(path -> Files.isDirectory(path) || pathFilter.test(path))\n+        .filter(path -> pathFilter.test(path))\n         .walk(\n             path -> {\n-              AbsoluteUnixPath pathOnContainer =\n-                  basePathInContainer.resolve(sourceRoot.relativize(path));\n-              builder.addEntry(path, pathOnContainer);\n+              builder.addEntry(path, basePathInContainer.resolve(sourceRoot.relativize(path)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557fc14e51af04d59499e37a753bff4131d41930"}, "originalPosition": 321}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYzODQ3MQ==", "bodyText": "springBootJar per Google-style\nand can we have a bit more meaningful name than destDir?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542638471", "createdAt": "2020-12-14T18:50:30Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -139,11 +134,167 @@ public void testToJibContainerBuilder_packagedStandard_basicInfo()\n                     AbsoluteUnixPath.get(\"/app/dependency1\"))\n                 .build()\n                 .getEntries());\n+    assertThat(buildPlan.getLayers().get(1).getName()).isEqualTo(\"jar\");\n     assertThat(((FileEntriesLayer) buildPlan.getLayers().get(1)).getEntries())\n-        .containsExactlyElementsIn(\n+        .isEqualTo(\n             FileEntriesLayer.builder()\n                 .addEntry(standardJar, AbsoluteUnixPath.get(\"/app/basicStandardJar.jar\"))\n                 .build()\n                 .getEntries());\n   }\n+\n+  @Test\n+  public void testToJibContainerBuilder_explodedLayeredSpringBoot_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557fc14e51af04d59499e37a753bff4131d41930"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0MDMzMQ==", "bodyText": "isEqualTo?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542640331", "createdAt": "2020-12-14T18:52:05Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -139,11 +134,167 @@ public void testToJibContainerBuilder_packagedStandard_basicInfo()\n                     AbsoluteUnixPath.get(\"/app/dependency1\"))\n                 .build()\n                 .getEntries());\n+    assertThat(buildPlan.getLayers().get(1).getName()).isEqualTo(\"jar\");\n     assertThat(((FileEntriesLayer) buildPlan.getLayers().get(1)).getEntries())\n-        .containsExactlyElementsIn(\n+        .isEqualTo(\n             FileEntriesLayer.builder()\n                 .addEntry(standardJar, AbsoluteUnixPath.get(\"/app/basicStandardJar.jar\"))\n                 .build()\n                 .getEntries());\n   }\n+\n+  @Test\n+  public void testToJibContainerBuilder_explodedLayeredSpringBoot_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();\n+    JibContainerBuilder containerBuilder =\n+        JarFiles.toJibContainerBuilder(springbootJar, destDir, ProcessingMode.exploded);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();\n+    assertThat(buildPlan.getEntrypoint())\n+        .isEqualTo(\n+            ImmutableList.of(\"java\", \"-cp\", \"/app\", \"org.springframework.boot.loader.JarLauncher\"));\n+    assertThat(buildPlan.getLayers().size()).isEqualTo(4);\n+\n+    assertThat(buildPlan.getLayers().get(0).getName()).isEqualTo(\"dependencies\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(0)).getEntries())\n+        .isEqualTo(\n+            FileEntriesLayer.builder()\n+                .addEntry(\n+                    destDir.resolve(\"BOOT-INF/lib/dependency1.jar\"),\n+                    AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency1.jar\"))\n+                .build()\n+                .getEntries());\n+\n+    assertThat(buildPlan.getLayers().get(1).getName()).isEqualTo(\"spring-boot-loader\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(1)).getEntries())\n+        .containsExactlyElementsIn(\n+            FileEntriesLayer.builder()\n+                .addEntry(\n+                    destDir.resolve(\"org/launcher.class\"),\n+                    AbsoluteUnixPath.get(\"/app/org/launcher.class\"))\n+                .addEntry(\n+                    destDir.resolve(\"org/orgDirectory/data1.class\"),\n+                    AbsoluteUnixPath.get(\"/app/org/orgDirectory/data1.class\"))\n+                .build()\n+                .getEntries());\n+\n+    assertThat(buildPlan.getLayers().get(2).getName()).isEqualTo(\"snapshot-dependencies\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(2)).getEntries())\n+        .isEqualTo(\n+            FileEntriesLayer.builder()\n+                .addEntry(\n+                    destDir.resolve(\"BOOT-INF/lib/dependency3-SNAPSHOT.jar\"),\n+                    AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency3-SNAPSHOT.jar\"))\n+                .build()\n+                .getEntries());\n+\n+    assertThat(buildPlan.getLayers().get(3).getName()).isEqualTo(\"application\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(3)).getEntries())\n+        .containsExactlyElementsIn(\n+            FileEntriesLayer.builder()\n+                .addEntry(\n+                    destDir.resolve(\"META-INF/MANIFEST.MF\"),\n+                    AbsoluteUnixPath.get(\"/app/META-INF/MANIFEST.MF\"))\n+                .addEntry(\n+                    destDir.resolve(\"BOOT-INF/classes/class1.class\"),\n+                    AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/class1.class\"))\n+                .addEntry(\n+                    destDir.resolve(\"BOOT-INF/classes/classDirectory/class2.class\"),\n+                    AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory/class2.class\"))\n+                .build()\n+                .getEntries());\n+  }\n+\n+  @Test\n+  public void testToJibContainerBuilder_explodedNonLayeredSpringBoot_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_NON_LAYERED).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();\n+    JibContainerBuilder containerBuilder =\n+        JarFiles.toJibContainerBuilder(springbootJar, destDir, ProcessingMode.exploded);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();\n+    assertThat(buildPlan.getEntrypoint())\n+        .isEqualTo(\n+            ImmutableList.of(\"java\", \"-cp\", \"/app\", \"org.springframework.boot.loader.JarLauncher\"));\n+    assertThat(buildPlan.getLayers().size()).isEqualTo(5);\n+\n+    assertThat(buildPlan.getLayers().get(0).getName()).isEqualTo(\"dependencies\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(0)).getEntries())\n+        .isEqualTo(\n+            FileEntriesLayer.builder()\n+                .addEntry(\n+                    destDir.resolve(\"BOOT-INF/lib/dependency1.jar\"),\n+                    AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency1.jar\"))\n+                .build()\n+                .getEntries());\n+\n+    assertThat(buildPlan.getLayers().get(1).getName()).isEqualTo(\"spring-boot-loader\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(1)).getEntries())\n+        .containsExactlyElementsIn(\n+            FileEntriesLayer.builder()\n+                .addEntry(\n+                    destDir.resolve(\"org/launcher.class\"),\n+                    AbsoluteUnixPath.get(\"/app/org/launcher.class\"))\n+                .addEntry(\n+                    destDir.resolve(\"org/orgDirectory/data1.class\"),\n+                    AbsoluteUnixPath.get(\"/app/org/orgDirectory/data1.class\"))\n+                .build()\n+                .getEntries());\n+\n+    assertThat(buildPlan.getLayers().get(2).getName()).isEqualTo(\"snapshot dependencies\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(2)).getEntries())\n+        .containsExactlyElementsIn(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557fc14e51af04d59499e37a753bff4131d41930"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0MzI1MA==", "bodyText": "This should go before doing layers.get(0).\nAnd we should also have assertThat(resourcesLayer.getEntries().gietSize()).isEqualTo(1).", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542643250", "createdAt": "2020-12-14T18:54:40Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -70,33 +76,11 @@ public void testCreateLayersForExplodedStandard_emptyJar()\n     Path destDir = temporaryFolder.newFolder().toPath();\n     List<FileEntriesLayer> layers =\n         JarModeProcessor.createLayersForExplodedStandard(standardJar, destDir);\n-\n-    assertThat(layers.size()).isEqualTo(2);\n-\n     FileEntriesLayer resourcesLayer = layers.get(0);\n-    FileEntriesLayer classesLayer = layers.get(1);\n \n-    // Validate resources layer.\n-    List<AbsoluteUnixPath> actualResourcesPath =\n-        resourcesLayer\n-            .getEntries()\n-            .stream()\n-            .map(FileEntry::getExtractionPath)\n-            .collect(Collectors.toList());\n-    assertThat(actualResourcesPath)\n-        .containsExactly(\n-            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF/MANIFEST.MF\"));\n-\n-    // Validate classes layer.\n-    List<AbsoluteUnixPath> actualClassesPath =\n-        classesLayer\n-            .getEntries()\n-            .stream()\n-            .map(FileEntry::getExtractionPath)\n-            .collect(Collectors.toList());\n-    assertThat(actualClassesPath)\n-        .containsExactly(AbsoluteUnixPath.get(\"/app/explodedJar/META-INF\"));\n+    assertThat(layers.size()).isEqualTo(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557fc14e51af04d59499e37a753bff4131d41930"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1NTg4Mg==", "bodyText": "Likewise, need to assert the size of getEntries().", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542655882", "createdAt": "2020-12-14T19:04:47Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -129,14 +113,8 @@ public void testCreateLayersForExplodedStandard_withClassPathInManifest()\n                 AbsoluteUnixPath.get(\"/app/dependencies/dependency2\"),\n                 AbsoluteUnixPath.get(\"/app/dependencies/dependency4\")));\n     assertThat(snapshotLayer.getName()).isEqualTo(\"snapshot dependencies\");\n-    assertThat(\n-            snapshotLayer\n-                .getEntries()\n-                .stream()\n-                .map(FileEntry::getExtractionPath)\n-                .collect(Collectors.toList()))\n-        .isEqualTo(\n-            ImmutableList.of(AbsoluteUnixPath.get(\"/app/dependencies/dependency3-SNAPSHOT-1.jar\")));\n+    assertThat(snapshotLayer.getEntries().get(0).getExtractionPath())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557fc14e51af04d59499e37a753bff4131d41930"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1NjQ4Ng==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542656486", "createdAt": "2020-12-14T19:05:23Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -252,16 +210,8 @@ public void testCreateLayersForExplodedStandard_withoutClassPathInManifest_conta\n     FileEntriesLayer classesLayer = layers.get(1);\n \n     // Validate resources layer.\n-    List<AbsoluteUnixPath> actualResourcesPath =\n-        resourcesLayer\n-            .getEntries()\n-            .stream()\n-            .map(FileEntry::getExtractionPath)\n-            .collect(Collectors.toList());\n-    assertThat(actualResourcesPath)\n-        .containsExactly(\n-            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF/MANIFEST.MF\"));\n+    assertThat(resourcesLayer.getEntries().get(0).getExtractionPath())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557fc14e51af04d59499e37a753bff4131d41930"}, "originalPosition": 156}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64e328d1ce669215543d981a3d3125f425c7e7da", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/64e328d1ce669215543d981a3d3125f425c7e7da", "committedDate": "2020-12-15T01:39:38Z", "message": "fixing naming and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adac4f70f5b040632adc6d4f79fa6c8afb5c1ff5", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/adac4f70f5b040632adc6d4f79fa6c8afb5c1ff5", "committedDate": "2020-12-15T01:44:04Z", "message": "naming"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNTc1OTkw", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#pullrequestreview-552575990", "createdAt": "2020-12-15T15:26:11Z", "commit": {"oid": "adac4f70f5b040632adc6d4f79fa6c8afb5c1ff5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a22ae19bd871485bebff8ea3f5951457d9150ba", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/2a22ae19bd871485bebff8ea3f5951457d9150ba", "committedDate": "2020-12-15T17:24:04Z", "message": "Merge branch 'master' of github.com:GoogleContainerTools/jib into cli-spring-boot-expl"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4886, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}