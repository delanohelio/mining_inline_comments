{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MzU2NTU5", "number": 2938, "title": "Use cacheDirectories in cli commands", "bodyText": "Integrates the new CacheDirectories util into the cli commands", "createdAt": "2020-12-11T20:16:35Z", "url": "https://github.com/GoogleContainerTools/jib/pull/2938", "merged": true, "mergeCommit": {"oid": "cc990bec2d5813e86a39a16da655f601c7d5604b"}, "closed": true, "closedAt": "2020-12-21T19:50:23Z", "author": {"login": "loosebazooka"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlNuBYAH2gAyNTM3MzU2NTU5OjFiMzUxZWNjNTY2ZDk4MGQzMDI1YjE5MTkwNzQ2YjM2Y2IzMDEwYTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoa3Q3AFqTU1NjYwNDU2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1b351ecc566d980d3025b19190746b36cb3010a0", "author": {"user": {"login": "loosebazooka", "name": "Appu"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/1b351ecc566d980d3025b19190746b36cb3010a0", "committedDate": "2020-12-11T20:11:28Z", "message": "Use cacheDirectories in cli commands"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNTk0NTQz", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#pullrequestreview-550594543", "createdAt": "2020-12-11T21:37:53Z", "commit": {"oid": "1b351ecc566d980d3025b19190746b36cb3010a0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTozNzo1M1rOIEPh2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo0Nzo1M1rOIEQEmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMxOTY0MQ==", "bodyText": "Not a big deal, but temporaryFolder.newFile().toPath() will work too.\nAnd use the new exception assertion style in jib-cli (using a lambda).", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r541319641", "createdAt": "2020-12-11T21:37:53Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java", "diffHunk": "@@ -46,26 +47,38 @@ public void testCacheDirectories_defaults() {\n             XdgDirectories.getCacheHome()\n                 .resolve(\"cli\")\n                 .resolve(\"projects\")\n-                .resolve(\n-                    CacheDirectories.getProjectCacheDirectoryFromProject(\n-                        Paths.get(\"some-context\"))));\n+                .resolve(CacheDirectories.getProjectCacheDirectoryFromProject(buildContext)));\n   }\n \n   @Test\n-  public void testCacheDirectories_configuredValuesIgnoresBuildContext() {\n+  public void testCacheDirectories_configuredValuesIgnoresBuildContext() throws IOException {\n     CommonCliOptions commonCliOptions =\n         CommandLine.populateCommand(\n             new CommonCliOptions(),\n             \"-t=ignored\",\n             \"--base-image-cache=test-base-image-cache\",\n             \"--project-cache=test-project-cache\");\n-    CacheDirectories cacheDirectories =\n-        CacheDirectories.from(commonCliOptions, Paths.get(\"ignored\"));\n+    Path ignoredContext = temporaryFolder.newFolder(\"ignored\").toPath();\n+    CacheDirectories cacheDirectories = CacheDirectories.from(commonCliOptions, ignoredContext);\n \n     assertThat(cacheDirectories.getBaseImageCache()).hasValue(Paths.get(\"test-base-image-cache\"));\n     assertThat(cacheDirectories.getProjectCache()).isEqualTo(Paths.get(\"test-project-cache\"));\n   }\n \n+  @Test\n+  public void testCacheDirectories_failIfContextIsNotDirectory() throws IOException {\n+    Path badContext = temporaryFolder.newFile(\"a.file\").toPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b351ecc566d980d3025b19190746b36cb3010a0"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyNDg5MA==", "bodyText": "Technically I think the jarFile path (not the parent) can still work. The difference is whether JARs in the same directory will use the same hash directory and share the app cache. Is there a specific reason to use a parent directory?\nOne thing matters is when that jarFile doesn't have a parent directory, which will be a common case, e.g., when doing jib jar app.jar. We learned that jarFile.getParent() == null in this case. So I think the argument check in from() will fail.\nAnd I just got this question if we can't just use a fixed app cache directory (without hashed sub-directories) shared by every Jib CLI build. But maybe it's good to have a hashed sub-directory per app to avoid generating too many directories in the cache root?", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r541324890", "createdAt": "2020-12-11T21:43:35Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "diffHunk": "@@ -84,7 +84,9 @@ public Integer call() {\n         return 1;\n       }\n \n-      Containerizer containerizer = Containerizers.from(commonCliOptions, logger);\n+      CacheDirectories cacheDirectories =\n+          CacheDirectories.from(commonCliOptions, jarFile.getParent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b351ecc566d980d3025b19190746b36cb3010a0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyODUzOA==", "bodyText": "Just to confirm again: even if Path is a relative path (for example, .), path.toFile().getCanonicalPath() is always a full absolute path based on the current working directory?", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r541328538", "createdAt": "2020-12-11T21:47:53Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java", "diffHunk": "@@ -35,12 +37,15 @@\n   /**\n    * Create a caches helper for cli cache locations.\n    *\n-   * @param commonCliOptions cli options\n-   * @param contextRoot the context root, if a single file, use the parent directory, this context\n+   * @param commonCliOptions cli options for user configured cache directories\n+   * @param contextRoot the context root, use the parent directory of single files, this context\n    *     root must exist\n    * @return an instance of CacheDirectories with cli specific cache locations\n    */\n   public static CacheDirectories from(CommonCliOptions commonCliOptions, Path contextRoot) {\n+    Preconditions.checkArgument(\n+        Files.isDirectory(contextRoot),\n+        \"contextRoot must be a directory, but \" + contextRoot.toString() + \" is not.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b351ecc566d980d3025b19190746b36cb3010a0"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0c056602f7b2854e28a0164a3bfe622876c3503", "author": {"user": {"login": "loosebazooka", "name": "Appu"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/b0c056602f7b2854e28a0164a3bfe622876c3503", "committedDate": "2020-12-15T20:56:05Z", "message": "Some updates\n\n- use tmp for project cache root (instead of user home cache)\n- use subdir application-layers for application layer cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c41cc8634a06845f7737be9f02192b5dbfb553f2", "author": {"user": {"login": "loosebazooka", "name": "Appu"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/c41cc8634a06845f7737be9f02192b5dbfb553f2", "committedDate": "2020-12-16T22:18:27Z", "message": "fix test, use absolute path before jar parent"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MTM3NTM0", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#pullrequestreview-554137534", "createdAt": "2020-12-16T22:30:37Z", "commit": {"oid": "c41cc8634a06845f7737be9f02192b5dbfb553f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMjozMDozN1rOIHcA1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMjozMDozN1rOIHcA1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY2OTkxMA==", "bodyText": "nit: assertThat().hasMessageThat().isEqualTo()", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r544669910", "createdAt": "2020-12-16T22:30:37Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java", "diffHunk": "@@ -34,36 +34,52 @@\n   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();\n \n   @Test\n-  public void testCacheDirectories_defaults() {\n+  public void testCacheDirectories_defaults() throws IOException {\n     CommonCliOptions commonCliOptions =\n         CommandLine.populateCommand(new CommonCliOptions(), \"-t\", \"ignored\");\n-    Path buildContext = Paths.get(\"some-context\");\n+    Path buildContext = temporaryFolder.newFolder(\"some-context\").toPath();\n     CacheDirectories cacheDirectories = CacheDirectories.from(commonCliOptions, buildContext);\n \n+    Path expectedProjectCache =\n+        Paths.get(System.getProperty(\"java.io.tmpdir\"))\n+            .resolve(\"jib-cli-cache\")\n+            .resolve(\"projects\")\n+            .resolve(CacheDirectories.getProjectCacheDirectoryFromProject(buildContext));\n     assertThat(cacheDirectories.getBaseImageCache()).isEmpty();\n-    assertThat(cacheDirectories.getProjectCache())\n-        .isEqualTo(\n-            XdgDirectories.getCacheHome()\n-                .resolve(\"cli\")\n-                .resolve(\"projects\")\n-                .resolve(\n-                    CacheDirectories.getProjectCacheDirectoryFromProject(\n-                        Paths.get(\"some-context\"))));\n+    assertThat(cacheDirectories.getProjectCache()).isEqualTo(expectedProjectCache);\n+    assertThat(cacheDirectories.getApplicationLayersCache())\n+        .isEqualTo(expectedProjectCache.resolve(\"application-layers\"));\n   }\n \n   @Test\n-  public void testCacheDirectories_configuredValuesIgnoresBuildContext() {\n+  public void testCacheDirectories_configuredValuesIgnoresBuildContext() throws IOException {\n     CommonCliOptions commonCliOptions =\n         CommandLine.populateCommand(\n             new CommonCliOptions(),\n             \"-t=ignored\",\n             \"--base-image-cache=test-base-image-cache\",\n             \"--project-cache=test-project-cache\");\n-    CacheDirectories cacheDirectories =\n-        CacheDirectories.from(commonCliOptions, Paths.get(\"ignored\"));\n+    Path ignoredContext = temporaryFolder.newFolder(\"ignored\").toPath();\n+    CacheDirectories cacheDirectories = CacheDirectories.from(commonCliOptions, ignoredContext);\n \n     assertThat(cacheDirectories.getBaseImageCache()).hasValue(Paths.get(\"test-base-image-cache\"));\n     assertThat(cacheDirectories.getProjectCache()).isEqualTo(Paths.get(\"test-project-cache\"));\n+    assertThat(cacheDirectories.getApplicationLayersCache())\n+        .isEqualTo(Paths.get(\"test-project-cache\").resolve(\"application-layers\"));\n+  }\n+\n+  @Test\n+  public void testCacheDirectories_failIfContextIsNotDirectory() throws IOException {\n+    Path badContext = temporaryFolder.newFile().toPath();\n+    CommonCliOptions commonCliOptions =\n+        CommandLine.populateCommand(new CommonCliOptions(), \"-t\", \"ignored\");\n+\n+    IllegalArgumentException iae =\n+        Assert.assertThrows(\n+            IllegalArgumentException.class,\n+            () -> CacheDirectories.from(commonCliOptions, badContext));\n+    assertThat(iae.getMessage())\n+        .isEqualTo(\"contextRoot must be a directory, but \" + badContext.toString() + \" is not.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c41cc8634a06845f7737be9f02192b5dbfb553f2"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MTM4Mjc0", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#pullrequestreview-554138274", "createdAt": "2020-12-16T22:31:50Z", "commit": {"oid": "c41cc8634a06845f7737be9f02192b5dbfb553f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMjozMTo1MFrOIHcDtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMjozMTo1MFrOIHcDtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY3MDY0Ng==", "bodyText": "maybe exception instead of an abbreviation?", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r544670646", "createdAt": "2020-12-16T22:31:50Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java", "diffHunk": "@@ -34,36 +34,52 @@\n   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();\n \n   @Test\n-  public void testCacheDirectories_defaults() {\n+  public void testCacheDirectories_defaults() throws IOException {\n     CommonCliOptions commonCliOptions =\n         CommandLine.populateCommand(new CommonCliOptions(), \"-t\", \"ignored\");\n-    Path buildContext = Paths.get(\"some-context\");\n+    Path buildContext = temporaryFolder.newFolder(\"some-context\").toPath();\n     CacheDirectories cacheDirectories = CacheDirectories.from(commonCliOptions, buildContext);\n \n+    Path expectedProjectCache =\n+        Paths.get(System.getProperty(\"java.io.tmpdir\"))\n+            .resolve(\"jib-cli-cache\")\n+            .resolve(\"projects\")\n+            .resolve(CacheDirectories.getProjectCacheDirectoryFromProject(buildContext));\n     assertThat(cacheDirectories.getBaseImageCache()).isEmpty();\n-    assertThat(cacheDirectories.getProjectCache())\n-        .isEqualTo(\n-            XdgDirectories.getCacheHome()\n-                .resolve(\"cli\")\n-                .resolve(\"projects\")\n-                .resolve(\n-                    CacheDirectories.getProjectCacheDirectoryFromProject(\n-                        Paths.get(\"some-context\"))));\n+    assertThat(cacheDirectories.getProjectCache()).isEqualTo(expectedProjectCache);\n+    assertThat(cacheDirectories.getApplicationLayersCache())\n+        .isEqualTo(expectedProjectCache.resolve(\"application-layers\"));\n   }\n \n   @Test\n-  public void testCacheDirectories_configuredValuesIgnoresBuildContext() {\n+  public void testCacheDirectories_configuredValuesIgnoresBuildContext() throws IOException {\n     CommonCliOptions commonCliOptions =\n         CommandLine.populateCommand(\n             new CommonCliOptions(),\n             \"-t=ignored\",\n             \"--base-image-cache=test-base-image-cache\",\n             \"--project-cache=test-project-cache\");\n-    CacheDirectories cacheDirectories =\n-        CacheDirectories.from(commonCliOptions, Paths.get(\"ignored\"));\n+    Path ignoredContext = temporaryFolder.newFolder(\"ignored\").toPath();\n+    CacheDirectories cacheDirectories = CacheDirectories.from(commonCliOptions, ignoredContext);\n \n     assertThat(cacheDirectories.getBaseImageCache()).hasValue(Paths.get(\"test-base-image-cache\"));\n     assertThat(cacheDirectories.getProjectCache()).isEqualTo(Paths.get(\"test-project-cache\"));\n+    assertThat(cacheDirectories.getApplicationLayersCache())\n+        .isEqualTo(Paths.get(\"test-project-cache\").resolve(\"application-layers\"));\n+  }\n+\n+  @Test\n+  public void testCacheDirectories_failIfContextIsNotDirectory() throws IOException {\n+    Path badContext = temporaryFolder.newFile().toPath();\n+    CommonCliOptions commonCliOptions =\n+        CommandLine.populateCommand(new CommonCliOptions(), \"-t\", \"ignored\");\n+\n+    IllegalArgumentException iae =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c41cc8634a06845f7737be9f02192b5dbfb553f2"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7236a7fe91641e68474608e75fc502854d7787b4", "author": {"user": {"login": "loosebazooka", "name": "Appu"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/7236a7fe91641e68474608e75fc502854d7787b4", "committedDate": "2020-12-17T05:23:35Z", "message": "test cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0OTE4NDg2", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#pullrequestreview-554918486", "createdAt": "2020-12-17T19:26:10Z", "commit": {"oid": "7236a7fe91641e68474608e75fc502854d7787b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOToyNjoxMFrOIIFQfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOToyNjoxMFrOIIFQfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0NTY2Mg==", "bodyText": "I don't think this will work. @mpeddada1 can you check what jarFile.toAbsolutePath() evaluates to when running jib jar app.jar (i.e., jarFile is simply app.jar)?", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r545345662", "createdAt": "2020-12-17T19:26:10Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "diffHunk": "@@ -84,7 +84,9 @@ public Integer call() {\n         return 1;\n       }\n \n-      Containerizer containerizer = Containerizers.from(commonCliOptions, logger);\n+      CacheDirectories cacheDirectories =\n+          CacheDirectories.from(commonCliOptions, jarFile.toAbsolutePath().getParent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7236a7fe91641e68474608e75fc502854d7787b4"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NjA0NTY4", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#pullrequestreview-556604568", "createdAt": "2020-12-21T19:12:06Z", "commit": {"oid": "7236a7fe91641e68474608e75fc502854d7787b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4731, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}