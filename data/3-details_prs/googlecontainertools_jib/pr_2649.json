{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMjEzMTI1", "number": 2649, "title": "Add more validations after yaml is serialized", "bodyText": "Added validation for all our optional parameters\nAdded new parameterized tests\nFound out yaml parses converts null to string if used as a map key\n\npart of #2570", "createdAt": "2020-07-31T14:46:04Z", "url": "https://github.com/GoogleContainerTools/jib/pull/2649", "merged": true, "mergeCommit": {"oid": "499b7847c3ed33d06611291fbdf7e72857dc7446"}, "closed": true, "closedAt": "2020-08-08T12:21:03Z", "author": {"login": "loosebazooka"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6VVjJAH2gAyNDYwMjEzMTI1OjEwNzZkYmY1ZmI0YWUxNTk0MTA3MzE1YTI2NWJhNDU4MTI0ZDVkODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8UDPpgH2gAyNDYwMjEzMTI1OjlmN2U0ZGFmY2E3NWJmOGMyMGIzZDdiZTk3ODE5ZGRmZDlmYzJlNjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1076dbf5fb4ae1594107315a265ba458124d5d81", "author": {"user": {"login": "loosebazooka", "name": "Appu"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/1076dbf5fb4ae1594107315a265ba458124d5d81", "committedDate": "2020-07-31T14:45:14Z", "message": "Add more validations after yaml is serialized\n\n- Added validation for all our optional parameters\n- Added new parameterized tests\n- Found out yaml parses converts `null` to string if used as a map key"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNzAyMjI3", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#pullrequestreview-461702227", "createdAt": "2020-08-05T14:10:19Z", "commit": {"oid": "1076dbf5fb4ae1594107315a265ba458124d5d81"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoxMDoyMFrOG8LbrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoyNjo1MlrOG8MMOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1NTA1Mw==", "bodyText": "value --> values and fix the description", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465755053", "createdAt": "2020-08-05T14:10:20Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String value : values) {\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null entries\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty entries\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a map is either null, empty or contains only non-null, non-empty keys and values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Map<String, String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String key : values.keySet()) {\n+      Preconditions.checkNotNull(key, \"Property '\" + propertyName + \"' cannot contain null keys\");\n+      Preconditions.checkArgument(\n+          !key.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty keys\");\n+      String value = values.get(key);\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null values\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty values\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a collection is either null, empty or contains only non-null values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1076dbf5fb4ae1594107315a265ba458124d5d81"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2MDkwOA==", "bodyText": "IfExists sounds redundant to me when covering an empty collection. It doesn't cover null input though. I think checkNullOrNonNullEntries() coveys the intention more clearly, because it's difficult to know what \"IfExists\" means (== not null and collection is not empty\") without reading the Javadoc. I initially thought \"IfExists\" means \"if an entry exists at all.\" WDYT?", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465760908", "createdAt": "2020-08-05T14:18:16Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String value : values) {\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null entries\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty entries\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a map is either null, empty or contains only non-null, non-empty keys and values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Map<String, String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String key : values.keySet()) {\n+      Preconditions.checkNotNull(key, \"Property '\" + propertyName + \"' cannot contain null keys\");\n+      Preconditions.checkArgument(\n+          !key.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty keys\");\n+      String value = values.get(key);\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null values\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty values\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a collection is either null, empty or contains only non-null values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullEntriesIfExists(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1076dbf5fb4ae1594107315a265ba458124d5d81"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2MTU4Nw==", "bodyText": "Nit: technically values.isEmpty() is unnecessary (the loop will fall through), but your preference.", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465761587", "createdAt": "2020-08-05T14:19:08Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String value : values) {\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null entries\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty entries\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a map is either null, empty or contains only non-null, non-empty keys and values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Map<String, String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String key : values.keySet()) {\n+      Preconditions.checkNotNull(key, \"Property '\" + propertyName + \"' cannot contain null keys\");\n+      Preconditions.checkArgument(\n+          !key.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty keys\");\n+      String value = values.get(key);\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null values\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty values\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a collection is either null, empty or contains only non-null values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullEntriesIfExists(\n+      @Nullable Collection<?> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1076dbf5fb4ae1594107315a265ba458124d5d81"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2Mjg1OQ==", "bodyText": "I prefer Map.Entry<String, String> to avoid calling .get(key) (unnecessary map lookup operations).", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465762859", "createdAt": "2020-08-05T14:20:50Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String value : values) {\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null entries\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty entries\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a map is either null, empty or contains only non-null, non-empty keys and values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Map<String, String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String key : values.keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1076dbf5fb4ae1594107315a265ba458124d5d81"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2MjkzMw==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465762933", "createdAt": "2020-08-05T14:20:56Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String value : values) {\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null entries\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty entries\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a map is either null, empty or contains only non-null, non-empty keys and values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1076dbf5fb4ae1594107315a265ba458124d5d81"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2MzYyOQ==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465763629", "createdAt": "2020-08-05T14:21:49Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1076dbf5fb4ae1594107315a265ba458124d5d81"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2NDE5OA==", "bodyText": "empty strings?", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465764198", "createdAt": "2020-08-05T14:22:34Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String value : values) {\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null entries\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty entries\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1076dbf5fb4ae1594107315a265ba458124d5d81"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2NDgzMw==", "bodyText": "empty string key? I think \"empty key\" can be a bit ambiguous.", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465764833", "createdAt": "2020-08-05T14:23:23Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String value : values) {\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null entries\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty entries\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a map is either null, empty or contains only non-null, non-empty keys and values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Map<String, String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String key : values.keySet()) {\n+      Preconditions.checkNotNull(key, \"Property '\" + propertyName + \"' cannot contain null keys\");\n+      Preconditions.checkArgument(\n+          !key.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty keys\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1076dbf5fb4ae1594107315a265ba458124d5d81"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2NTEwMA==", "bodyText": "empty string value?", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465765100", "createdAt": "2020-08-05T14:23:43Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String value : values) {\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null entries\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty entries\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a map is either null, empty or contains only non-null, non-empty keys and values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Map<String, String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String key : values.keySet()) {\n+      Preconditions.checkNotNull(key, \"Property '\" + propertyName + \"' cannot contain null keys\");\n+      Preconditions.checkArgument(\n+          !key.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty keys\");\n+      String value = values.get(key);\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null values\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty values\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1076dbf5fb4ae1594107315a265ba458124d5d81"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2NjE5Mw==", "bodyText": "Remove @Nullable? Or, does it cause some compilation trouble with NullAway?", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465766193", "createdAt": "2020-08-05T14:25:08Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1076dbf5fb4ae1594107315a265ba458124d5d81"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2NzExOQ==", "bodyText": "I think a user who purposely put an empty string to the property might be confused when they see this. \"empty string\"?", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465767119", "createdAt": "2020-08-05T14:26:26Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1076dbf5fb4ae1594107315a265ba458124d5d81"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2NzQ4MA==", "bodyText": "Remove @Nullable? Or, does it cause some compilation trouble with NullAway?", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465767480", "createdAt": "2020-08-05T14:26:52Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1076dbf5fb4ae1594107315a265ba458124d5d81"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f412399af29b6efbab3f420660762a4211b072c0", "author": {"user": {"login": "loosebazooka", "name": "Appu"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/f412399af29b6efbab3f420660762a4211b072c0", "committedDate": "2020-08-06T17:27:16Z", "message": "method naming, javadoc, error messages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNzU2Mjcw", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#pullrequestreview-462756270", "createdAt": "2020-08-06T18:03:11Z", "commit": {"oid": "f412399af29b6efbab3f420660762a4211b072c0"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODowMzoxMVrOG8-iBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODowMzoxNlrOG8-iKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5MjI2Mg==", "bodyText": "Nit: remove values.isEmpt() for consistency?", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r466592262", "createdAt": "2020-08-06T18:03:11Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,120 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n-        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code values} contains empty entries\n+   * @throws NullPointerException if {@code values} contains null entries\n+   */\n+  public static void checkNullOrNonNullNonEmptyEntries(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String value : values) {\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null entries\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty strings\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a map is either null, empty or contains only non-null, non-empty keys and values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code values} contains empty keys or values\n+   * @throws NullPointerException if {@code values} contains null keys or values\n+   */\n+  public static void checkNullOrNonNullNonEmptyEntries(\n+      @Nullable Map<String, String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f412399af29b6efbab3f420660762a4211b072c0"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5MjI5Nw==", "bodyText": "Nit: remove values.isEmpt() for consistency?", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r466592297", "createdAt": "2020-08-06T18:03:16Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,120 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n-        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code values} contains empty entries\n+   * @throws NullPointerException if {@code values} contains null entries\n+   */\n+  public static void checkNullOrNonNullNonEmptyEntries(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f412399af29b6efbab3f420660762a4211b072c0"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f7e4dafca75bf8c20b3d7be97819ddfd9fc2e65", "author": {"user": {"login": "loosebazooka", "name": "Appu"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/9f7e4dafca75bf8c20b3d7be97819ddfd9fc2e65", "committedDate": "2020-08-06T18:23:11Z", "message": "remove isEmpty check"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4918, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}