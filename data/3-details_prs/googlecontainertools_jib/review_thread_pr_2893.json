{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwODQ4OTU1", "number": 2893, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxMzoxNVrOE41l6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjowMzozOVrOE5jrjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDMzNzY5OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxMzoxNVrOHy_vUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0NTo1MlrOH0EyOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNTE1NQ==", "bodyText": "It's okay to put everything into the try block, especially in tests.", "url": "https://github.com/GoogleContainerTools/jib/pull/2893#discussion_r523235155", "createdAt": "2020-11-13T21:13:15Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -64,11 +68,20 @@ public void testErrorLogging_directoryGiven() throws URISyntaxException {\n \n   @Test\n   public void testJar_toDocker() throws IOException, InterruptedException, URISyntaxException {\n-    Path jarFile = Paths.get(Resources.getResource(\"simpleJar.jar\").toURI());\n+    Path jarPath = Paths.get(Resources.getResource(\"jarTest/jarWithCp.jar\").toURI());\n     Integer exitCode =\n         new CommandLine(new JibCli())\n-            .execute(\"--target\", \"docker://jib-cli-image\", \"jar\", jarFile.toString());\n+            .execute(\"--target\", \"docker://jib-cli-image\", \"jar\", jarPath.toString());\n     String output = new Command(\"docker\", \"run\", \"--rm\", \"jib-cli-image\").run();\n+    String classPath = null;\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "797ab5e1cef4022b62b23c049c89532edb3318df"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NjM5NA==", "bodyText": "nit: String classpath = jarFile....\nAlso in the following test.", "url": "https://github.com/GoogleContainerTools/jib/pull/2893#discussion_r524366394", "createdAt": "2020-11-16T15:45:52Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -64,11 +68,20 @@ public void testErrorLogging_directoryGiven() throws URISyntaxException {\n \n   @Test\n   public void testJar_toDocker() throws IOException, InterruptedException, URISyntaxException {\n-    Path jarFile = Paths.get(Resources.getResource(\"simpleJar.jar\").toURI());\n+    Path jarPath = Paths.get(Resources.getResource(\"jarTest/jarWithCp.jar\").toURI());\n     Integer exitCode =\n         new CommandLine(new JibCli())\n-            .execute(\"--target\", \"docker://jib-cli-image\", \"jar\", jarFile.toString());\n+            .execute(\"--target\", \"docker://jib-cli-image\", \"jar\", jarPath.toString());\n     String output = new Command(\"docker\", \"run\", \"--rm\", \"jib-cli-image\").run();\n+    String classPath = null;\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNTE1NQ=="}, "originalCommit": {"oid": "797ab5e1cef4022b62b23c049c89532edb3318df"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDM0MDA1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxNDoxMlrOHy_wvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxNDoxMlrOHy_wvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNTUxOQ==", "bodyText": "No need for splitting. I think it can be assertThat(classPath).isEqualTo(\"dependency1.jar;directory/dependency2.jar\"), even without checking not null.\nAnd just double-check that the main in simplJar does use classes in both dependency1.jar and dependency2.jar.", "url": "https://github.com/GoogleContainerTools/jib/pull/2893#discussion_r523235519", "createdAt": "2020-11-13T21:14:12Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -64,11 +68,20 @@ public void testErrorLogging_directoryGiven() throws URISyntaxException {\n \n   @Test\n   public void testJar_toDocker() throws IOException, InterruptedException, URISyntaxException {\n-    Path jarFile = Paths.get(Resources.getResource(\"simpleJar.jar\").toURI());\n+    Path jarPath = Paths.get(Resources.getResource(\"jarTest/jarWithCp.jar\").toURI());\n     Integer exitCode =\n         new CommandLine(new JibCli())\n-            .execute(\"--target\", \"docker://jib-cli-image\", \"jar\", jarFile.toString());\n+            .execute(\"--target\", \"docker://jib-cli-image\", \"jar\", jarPath.toString());\n     String output = new Command(\"docker\", \"run\", \"--rm\", \"jib-cli-image\").run();\n+    String classPath = null;\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+    }\n+\n+    // Validate classpath before checking output\n+    assertThat(classPath).isNotNull();\n+    List<String> dependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "797ab5e1cef4022b62b23c049c89532edb3318df"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDM0MjM3OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxNTowMVrOHy_yJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMjo1NzoyMVrOHzmw_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNTg3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                standardJar.getParent().resolve(Paths.get(\"dependency1\")),\n          \n          \n            \n                                standardJar.getParent().resolve(\"dependency1\"),", "url": "https://github.com/GoogleContainerTools/jib/pull/2893#discussion_r523235877", "createdAt": "2020-11-13T21:15:01Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -67,7 +67,8 @@ public void testToJibContainerBuilder_basicInfo()\n         .isEqualTo(\n             FileEntriesLayer.builder()\n                 .addEntry(\n-                    Paths.get(\"dependency1\"), AbsoluteUnixPath.get(\"/app/dependencies/dependency1\"))\n+                    standardJar.getParent().resolve(Paths.get(\"dependency1\")),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "797ab5e1cef4022b62b23c049c89532edb3318df"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg3NDU1OA==", "bodyText": "Done.", "url": "https://github.com/GoogleContainerTools/jib/pull/2893#discussion_r523874558", "createdAt": "2020-11-16T02:57:21Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -67,7 +67,8 @@ public void testToJibContainerBuilder_basicInfo()\n         .isEqualTo(\n             FileEntriesLayer.builder()\n                 .addEntry(\n-                    Paths.get(\"dependency1\"), AbsoluteUnixPath.get(\"/app/dependencies/dependency1\"))\n+                    standardJar.getParent().resolve(Paths.get(\"dependency1\")),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNTg3Nw=="}, "originalCommit": {"oid": "797ab5e1cef4022b62b23c049c89532edb3318df"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDM0NDA2OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxNTozNlrOHy_zGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxNTozNlrOHy_zGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNjEyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .resolve(RelativeUnixPath.get(\"dependencies\"))\n          \n          \n            \n                                    .resolve(\"dependencies\")\n          \n      \n    \n    \n  \n\nand the one above tool.", "url": "https://github.com/GoogleContainerTools/jib/pull/2893#discussion_r523236123", "createdAt": "2020-11-13T21:15:36Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -123,7 +127,10 @@ static JarType determineJarType(Path jarPath) throws IOException {\n         snapshotDependencies.forEach(\n             path ->\n                 snapshotDependenciesLayerBuilder.addEntry(\n-                    path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n+                    jarParent.resolve(path),\n+                    APP_ROOT\n+                        .resolve(RelativeUnixPath.get(\"dependencies\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "797ab5e1cef4022b62b23c049c89532edb3318df"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDM2OTM4OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToyMzo1OVrOHzABtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMjo1MzoxOVrOHzmmOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzOTg2Mg==", "bodyText": "I just realized one thing we are missing. Remember this output? A lot of people will try Jib CLI on a standard JAR without having dependency JARs at all or in right relative locations, and they will just see java.nio.file.NoSuchFileException: some.jar. And they may falsely think Jib CLI is bugged by failing to load its dependency. I think it's very important to check the existence of dependency JARs locally before we delegate to jib-core, and throw an exception (IllegalStateException?) with a detailed message that some dependency JARs of the user app don't exist locally. Doesn't have to be in this PR, but we should not forget this.", "url": "https://github.com/GoogleContainerTools/jib/pull/2893#discussion_r523239862", "createdAt": "2020-11-13T21:23:59Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -108,13 +108,17 @@ static JarType determineJarType(Path jarPath) throws IOException {\n               .collect(Collectors.toList());\n       List<Path> snapshotDependencies =\n           allDependencies.stream().filter(isSnapshot).map(Paths::get).collect(Collectors.toList());\n+      Path jarParent = jarPath.getParent() == null ? Paths.get(\"\") : jarPath.getParent();\n       if (!nonSnapshotDependencies.isEmpty()) {\n         FileEntriesLayer.Builder nonSnapshotDependenciesLayerBuilder =\n             FileEntriesLayer.builder().setName(DEPENDENCIES);\n         nonSnapshotDependencies.forEach(\n             path ->\n                 nonSnapshotDependenciesLayerBuilder.addEntry(\n-                    path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n+                    jarParent.resolve(path),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "797ab5e1cef4022b62b23c049c89532edb3318df"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg3MTgwMA==", "bodyText": "That is a great point! And I agree, checking this earlier + returning a meaningful error message are both super important.", "url": "https://github.com/GoogleContainerTools/jib/pull/2893#discussion_r523871800", "createdAt": "2020-11-16T02:53:19Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -108,13 +108,17 @@ static JarType determineJarType(Path jarPath) throws IOException {\n               .collect(Collectors.toList());\n       List<Path> snapshotDependencies =\n           allDependencies.stream().filter(isSnapshot).map(Paths::get).collect(Collectors.toList());\n+      Path jarParent = jarPath.getParent() == null ? Paths.get(\"\") : jarPath.getParent();\n       if (!nonSnapshotDependencies.isEmpty()) {\n         FileEntriesLayer.Builder nonSnapshotDependenciesLayerBuilder =\n             FileEntriesLayer.builder().setName(DEPENDENCIES);\n         nonSnapshotDependencies.forEach(\n             path ->\n                 nonSnapshotDependenciesLayerBuilder.addEntry(\n-                    path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n+                    jarParent.resolve(path),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzOTg2Mg=="}, "originalCommit": {"oid": "797ab5e1cef4022b62b23c049c89532edb3318df"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzgwMTYwOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0Njo1NlrOH0E2AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjozODowNlrOH0HOdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NzM2MQ==", "bodyText": "Q: why contains? Are there other dependencies?", "url": "https://github.com/GoogleContainerTools/jib/pull/2893#discussion_r524367361", "createdAt": "2020-11-16T15:46:56Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -64,13 +66,36 @@ public void testErrorLogging_directoryGiven() throws URISyntaxException {\n \n   @Test\n   public void testJar_toDocker() throws IOException, InterruptedException, URISyntaxException {\n-    Path jarFile = Paths.get(Resources.getResource(\"simpleJar.jar\").toURI());\n+    Path jarPath = Paths.get(Resources.getResource(\"jarTest/jarWithCp.jar\").toURI());\n     Integer exitCode =\n         new CommandLine(new JibCli())\n-            .execute(\"--target\", \"docker://jib-cli-image\", \"jar\", jarFile.toString());\n+            .execute(\"--target\", \"docker://jib-cli-image\", \"jar\", jarPath.toString());\n     String output = new Command(\"docker\", \"run\", \"--rm\", \"jib-cli-image\").run();\n+    String classPath = null;\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n \n-    assertThat(exitCode).isEqualTo(0);\n-    assertThat(output).isEqualTo(\"Hello World\");\n+      assertThat(classPath).contains(\"dependency1.jar directory/dependency2.jar\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3b23a630c148780fa011cae74109a3bd40cd619"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQwNjM5MQ==", "bodyText": "Oops, my bad", "url": "https://github.com/GoogleContainerTools/jib/pull/2893#discussion_r524406391", "createdAt": "2020-11-16T16:38:06Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -64,13 +66,36 @@ public void testErrorLogging_directoryGiven() throws URISyntaxException {\n \n   @Test\n   public void testJar_toDocker() throws IOException, InterruptedException, URISyntaxException {\n-    Path jarFile = Paths.get(Resources.getResource(\"simpleJar.jar\").toURI());\n+    Path jarPath = Paths.get(Resources.getResource(\"jarTest/jarWithCp.jar\").toURI());\n     Integer exitCode =\n         new CommandLine(new JibCli())\n-            .execute(\"--target\", \"docker://jib-cli-image\", \"jar\", jarFile.toString());\n+            .execute(\"--target\", \"docker://jib-cli-image\", \"jar\", jarPath.toString());\n     String output = new Command(\"docker\", \"run\", \"--rm\", \"jib-cli-image\").run();\n+    String classPath = null;\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n \n-    assertThat(exitCode).isEqualTo(0);\n-    assertThat(output).isEqualTo(\"Hello World\");\n+      assertThat(classPath).contains(\"dependency1.jar directory/dependency2.jar\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NzM2MQ=="}, "originalCommit": {"oid": "d3b23a630c148780fa011cae74109a3bd40cd619"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzgyMDUwOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo1MDozOFrOH0FBVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjozODoxNVrOH0HO2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3MDI2MQ==", "bodyText": "if (!Files.exist(jarParent.resolve(depPath)))", "url": "https://github.com/GoogleContainerTools/jib/pull/2893#discussion_r524370261", "createdAt": "2020-11-16T15:50:38Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -173,6 +174,21 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     }\n   }\n \n+  private static void addDependency(\n+      FileEntriesLayer.Builder layerbuilder,\n+      Path depPath,\n+      Path jarParent,\n+      AbsoluteUnixPath pathOnContainer) {\n+    File depFile = new File(jarParent.resolve(depPath).toString());\n+    if (!depFile.exists()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3b23a630c148780fa011cae74109a3bd40cd619"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQwNjQ4OQ==", "bodyText": "Done.", "url": "https://github.com/GoogleContainerTools/jib/pull/2893#discussion_r524406489", "createdAt": "2020-11-16T16:38:15Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -173,6 +174,21 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     }\n   }\n \n+  private static void addDependency(\n+      FileEntriesLayer.Builder layerbuilder,\n+      Path depPath,\n+      Path jarParent,\n+      AbsoluteUnixPath pathOnContainer) {\n+    File depFile = new File(jarParent.resolve(depPath).toString());\n+    if (!depFile.exists()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3MDI2MQ=="}, "originalCommit": {"oid": "d3b23a630c148780fa011cae74109a3bd40cd619"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Nzg0MzE2OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo1NDoyOVrOH0FOeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjo0Nzo0OVrOH0Hs3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3MzYyNg==", "bodyText": "Maybe pass in pathOnContainer is because it's computable here with APP_ROOT.resolve(\"dependencies\").resolve(depPath.getFileName())?", "url": "https://github.com/GoogleContainerTools/jib/pull/2893#discussion_r524373626", "createdAt": "2020-11-16T15:54:29Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -173,6 +174,21 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     }\n   }\n \n+  private static void addDependency(\n+      FileEntriesLayer.Builder layerbuilder,\n+      Path depPath,\n+      Path jarParent,\n+      AbsoluteUnixPath pathOnContainer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3b23a630c148780fa011cae74109a3bd40cd619"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQwOTM1Mg==", "bodyText": "Hm I was planning on reusing this helper in #2888, since packaged mode requires a different path on the container. I could directly compute it in here and refactor this method in the next PR if it doesn't make sense in the current context though?", "url": "https://github.com/GoogleContainerTools/jib/pull/2893#discussion_r524409352", "createdAt": "2020-11-16T16:42:00Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -173,6 +174,21 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     }\n   }\n \n+  private static void addDependency(\n+      FileEntriesLayer.Builder layerbuilder,\n+      Path depPath,\n+      Path jarParent,\n+      AbsoluteUnixPath pathOnContainer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3MzYyNg=="}, "originalCommit": {"oid": "d3b23a630c148780fa011cae74109a3bd40cd619"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQxNDE3Mg==", "bodyText": "Ah, right. That's OK then.", "url": "https://github.com/GoogleContainerTools/jib/pull/2893#discussion_r524414172", "createdAt": "2020-11-16T16:47:49Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -173,6 +174,21 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     }\n   }\n \n+  private static void addDependency(\n+      FileEntriesLayer.Builder layerbuilder,\n+      Path depPath,\n+      Path jarParent,\n+      AbsoluteUnixPath pathOnContainer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3MzYyNg=="}, "originalCommit": {"oid": "d3b23a630c148780fa011cae74109a3bd40cd619"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Nzg4ODc4OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjowMzozOVrOH0FqSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjozOTozMFrOH0HSuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4MDc0Ng==", "bodyText": "I think this will cause confusion when a dependency is nested. It reads like such a dependency should be in the same parent directory. How about something like\n\"Dependency required by the JAR (as specified in 'Class-Path:' in the JAR manifest) doesn't exist: <full path of jarParent.resolve(depPath)>\"\n? And then we can also pass the full path instead of two argument (depPath and jarParent) to the method. WDYT?", "url": "https://github.com/GoogleContainerTools/jib/pull/2893#discussion_r524380746", "createdAt": "2020-11-16T16:03:39Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -173,6 +174,21 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     }\n   }\n \n+  private static void addDependency(\n+      FileEntriesLayer.Builder layerbuilder,\n+      Path depPath,\n+      Path jarParent,\n+      AbsoluteUnixPath pathOnContainer) {\n+    File depFile = new File(jarParent.resolve(depPath).toString());\n+    if (!depFile.exists()) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Dependency: %s needs to be in the same parent directory as the JAR.\",\n+              depPath.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3b23a630c148780fa011cae74109a3bd40cd619"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQwNzQ4MA==", "bodyText": "Oh yeah, that can be really confusing. Passing in the full dependency path is a good idea.", "url": "https://github.com/GoogleContainerTools/jib/pull/2893#discussion_r524407480", "createdAt": "2020-11-16T16:39:30Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -173,6 +174,21 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     }\n   }\n \n+  private static void addDependency(\n+      FileEntriesLayer.Builder layerbuilder,\n+      Path depPath,\n+      Path jarParent,\n+      AbsoluteUnixPath pathOnContainer) {\n+    File depFile = new File(jarParent.resolve(depPath).toString());\n+    if (!depFile.exists()) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Dependency: %s needs to be in the same parent directory as the JAR.\",\n+              depPath.toString()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4MDc0Ng=="}, "originalCommit": {"oid": "d3b23a630c148780fa011cae74109a3bd40cd619"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 36, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}