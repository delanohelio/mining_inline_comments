{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1ODExNzc2", "number": 2615, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjowNDozNVrOERhDFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjozNjoxMVrOESd3Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODAyNzExOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjowNDozNVrOG2RZ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjo0NTo0N1rOG2t_Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2MTQzMg==", "bodyText": "I was thinking of checking if the platforms set is empty here but i realized that our front end ContainerBuildPlan  does the job for us.Should I add a check or should I trust our api?", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r459561432", "createdAt": "2020-07-23T16:04:35Z", "author": {"login": "louismurerwa"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,14 +265,22 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    if (buildContext.getContainerConfiguration() != null) {\n+      Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4012eff55cba0fa085677ab4ea3a89e8fd8c0436"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMzA3OA==", "bodyText": "Good question. Because ContainerBuildPlan never returns an empty list and we have added a test to ensure it's non-empty, in this case, I think I'm fine with assuming it's non-empty given that getContainerConfiguration() is not null.\nWe can certainly add more code to guard against an empty set and raise an error which may also be a good practice in general (depends on situations). But the integration between ContainerBuildPlan and the jib-core is pretty tight and and internal, I think assuming non-empty is OK given that getContainerConfiguration() is not null.`\nThat said, I noticed getContainerConfiguration() is @Nullable. I think we should figure out when this can be null and why.\nLastly, using streams works, but for just getting the first element, I'd go with\n    platforms.iterator().next();", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r459703078", "createdAt": "2020-07-23T20:16:59Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,14 +265,22 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    if (buildContext.getContainerConfiguration() != null) {\n+      Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2MTQzMg=="}, "originalCommit": {"oid": "4012eff55cba0fa085677ab4ea3a89e8fd8c0436"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NTM4MA==", "bodyText": "That said, I noticed getContainerConfiguration() is @Nullable. I think we should figure out when this can be null and why.\n\nSee #2618 and #2619.", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r459765380", "createdAt": "2020-07-23T22:34:42Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,14 +265,22 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    if (buildContext.getContainerConfiguration() != null) {\n+      Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2MTQzMg=="}, "originalCommit": {"oid": "4012eff55cba0fa085677ab4ea3a89e8fd8c0436"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyOTc3OQ==", "bodyText": "Once #2619 is merged ,then I will need to adjust my code a little bit .i.e remove the check getContainerConfiguration != null", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r460029779", "createdAt": "2020-07-24T12:45:47Z", "author": {"login": "louismurerwa"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,14 +265,22 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    if (buildContext.getContainerConfiguration() != null) {\n+      Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2MTQzMg=="}, "originalCommit": {"oid": "4012eff55cba0fa085677ab4ea3a89e8fd8c0436"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODkxMzkzOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxNzo0M1rOG2aElA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzo0MTo1OVrOG2vzJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMzQ0NA==", "bodyText": "I find no reason to declare these as method fields.", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r459703444", "createdAt": "2020-07-23T20:17:43Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,14 +265,22 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    if (buildContext.getContainerConfiguration() != null) {\n+      Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();\n+      Platform platform = platforms.stream().findFirst().get();\n+      architecture = platform.getArchitecture();\n+      os = platform.getOs();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4012eff55cba0fa085677ab4ea3a89e8fd8c0436"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyNzQwNw==", "bodyText": "I believe thats the only way we can access the variable inside the platform object. At this point there is a chance that getContainerConfiguration will return null and in that case i wired the os and architecture values to contain the default amd64/linux platform at the begining of pullBaseImageStep.java", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r460027407", "createdAt": "2020-07-24T12:40:50Z", "author": {"login": "louismurerwa"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,14 +265,22 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    if (buildContext.getContainerConfiguration() != null) {\n+      Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();\n+      Platform platform = platforms.stream().findFirst().get();\n+      architecture = platform.getArchitecture();\n+      os = platform.getOs();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMzQ0NA=="}, "originalCommit": {"oid": "4012eff55cba0fa085677ab4ea3a89e8fd8c0436"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1OTQzMQ==", "bodyText": "What I meant is basically this:\nString architecture = \"amd64\"; // no need to have them as method fields, just local variables\nString os = \"linux\";\nif (...) {\n  ...\n  architecture = platform.getArchitecture();\n  os = platforms.getOs();\n}\nList<String> digests = manifestListTemplate.getDigestsForPlatform(architecture, os);\nEven with this, it's still not ideal because this PullBaseImageStep is yet another entity having an opinion of what a default should be. But this issue will be gone once #2619 is merged.", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r460059431", "createdAt": "2020-07-24T13:41:59Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,14 +265,22 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    if (buildContext.getContainerConfiguration() != null) {\n+      Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();\n+      Platform platform = platforms.stream().findFirst().get();\n+      architecture = platform.getArchitecture();\n+      os = platform.getOs();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMzQ0NA=="}, "originalCommit": {"oid": "4012eff55cba0fa085677ab4ea3a89e8fd8c0436"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTEyOTY0OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToyNTo1OFrOG2cIlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjo0ODowNlrOG2uDxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNzIzOA==", "bodyText": "I just realized that there's another item to our TODO list. A manifest list may contain multiple manifests with the given arch/OS. Here's a portion of a real-world example with the manifest list openjdk@sha256:8ab7b3078b01ba66b937b7fbe0b9eccf60449cc101c42e99aeefaba0e1781155:\n      {                    \n         \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n         \"size\": 1365,\n         \"digest\": \"sha256:e0fafcc4c0a1f1127b5fca344b4d4963f16892584a1d57c10a61ee59bb6ac2df\",\n         \"platform\": {                                                                                   \n            \"architecture\": \"arm\",\n            \"os\": \"linux\",                                                                               \n            \"variant\": \"v5\"\n         }                        \n      },                 \n      {   \n         \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n         \"size\": 1365,\n         \"digest\": \"sha256:6802c955002329da82647f76ee42e66c47f6dafb9c6bdf3eff1b620f280d86a2\",\n         \"platform\": {\n            \"architecture\": \"arm\",                                                                       \n            \"os\": \"linux\",\n            \"variant\": \"v7\"           \n         }               \n      },  \n\nSo, for now we just return the first manifest matching the arch/OS, but eventually, this method should be updated to find the exact match (or maybe the closest match if it fails). Make sure to add this item to your tracking doc.", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r459737238", "createdAt": "2020-07-23T21:25:58Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,14 +265,22 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    if (buildContext.getContainerConfiguration() != null) {\n+      Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();\n+      Platform platform = platforms.stream().findFirst().get();\n+      architecture = platform.getArchitecture();\n+      os = platform.getOs();\n+    }\n+\n+    List<String> digests = manifestListTemplate.getDigestsForPlatform(architecture, os);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4012eff55cba0fa085677ab4ea3a89e8fd8c0436"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzMDkxNw==", "bodyText": "This is a good point.Once we upgrade the platforms tag to accept more info ,we can use this info to do a better search for a manifest file. I just added it to the TODO list.", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r460030917", "createdAt": "2020-07-24T12:48:06Z", "author": {"login": "louismurerwa"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,14 +265,22 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    if (buildContext.getContainerConfiguration() != null) {\n+      Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();\n+      Platform platform = platforms.stream().findFirst().get();\n+      architecture = platform.getArchitecture();\n+      os = platform.getOs();\n+    }\n+\n+    List<String> digests = manifestListTemplate.getDigestsForPlatform(architecture, os);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNzIzOA=="}, "originalCommit": {"oid": "4012eff55cba0fa085677ab4ea3a89e8fd8c0436"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjUxNjQzOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo0MTo0M1rOG27nzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo0MTo0M1rOG27nzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1MzEzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                buildContext\n          \n          \n            \n                    .getEventHandlers()\n          \n          \n            \n                    .dispatch(\n          \n          \n            \n                EventHandlers eventHandlers = buildContext.getEventHandlers();\n          \n          \n            \n                eventHandlers.dispatch(\n          \n      \n    \n    \n  \n\nThen on line 300, you can reuse eventHandlers.", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r460253134", "createdAt": "2020-07-24T19:41:43Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,22 +263,40 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();\n+    Platform platform = platforms.iterator().next();\n+    String architecture = platform.getArchitecture();\n+    String os = platform.getOs();\n+\n+    buildContext\n+        .getEventHandlers()\n+        .dispatch(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjUxODc2OnYy", "diffSide": "RIGHT", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo0MjozNVrOG27pMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDoxMTo0NVrOG28ZRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1MzQ4OQ==", "bodyText": "i'm skeptical about my implementation for this testing method .\nBasically its\n\nPass in a mock manifest list to the testObtainPlatformSpecificImageManifest method.\nMethod searches for the digest matching the input platform\nMethod calls registry client with with the obtained digest to get the mock manifest\nRegistry client returns the mock manifest list if the digest matches the one found in the manifest list\n\nLooking for feedback", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r460253489", "createdAt": "2020-07-24T19:42:35Z", "author": {"login": "louismurerwa"}, "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -127,4 +138,80 @@ public void testCall_offlineMode_cached()\n \n     Mockito.verify(buildContext, Mockito.never()).newBaseImageRegistryClientFactory();\n   }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI2NTc5Nw==", "bodyText": "Yeah, think about what you are testing. Most of the assertions that verify the manifest content are unnecessary, because what you are testing is whether the method can find the digest to pass to registryClient.pullManifest() and whether it returns the same manifest returned by registryClient. registryClient.pullManifest doesn't even need to return an actual manifest; a mock will work. I can talk about this later.", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r460265797", "createdAt": "2020-07-24T20:11:45Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -127,4 +138,80 @@ public void testCall_offlineMode_cached()\n \n     Mockito.verify(buildContext, Mockito.never()).newBaseImageRegistryClientFactory();\n   }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1MzQ4OQ=="}, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjUzNDUwOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo0ODoyNFrOG27y3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo0ODoyNFrOG27y3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1NTk2Ng==", "bodyText": "\"tag\" is a confusing term, so let's just skip it.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          + \" to learn more about specifyng a platform using the platform tag\";\n          \n          \n            \n                          + \" to learn more about specifying a platform\";", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r460255966", "createdAt": "2020-07-24T19:48:24Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,22 +263,40 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();\n+    Platform platform = platforms.iterator().next();\n+    String architecture = platform.getArchitecture();\n+    String os = platform.getOs();\n+\n+    buildContext\n+        .getEventHandlers()\n+        .dispatch(\n+            LogEvent.lifecycle(\n+                \"Searching the manifest list for the platfrom, architecture =  \"\n+                    + architecture\n+                    + \", os = \"\n+                    + os));\n+\n+    List<String> digests = manifestListTemplate.getDigestsForPlatform(architecture, os);\n     if (digests.size() == 0) {\n       String errorMessage =\n           buildContext.getBaseImageConfiguration().getImage()\n-              + \" is a manifest list, but the list does not contain an image manifest for amd64/linux.\"\n-              + \" If your intention was to use a non-amd64/linux base image,\"\n+              + \" is a manifest list, but the list does not contain an image manifest for the platform arch = \"\n+              + architecture\n+              + \", os = \"\n+              + os\n+              + \". If your intention was to specify a platform for your image,\"\n               + \" see https://github.com/GoogleContainerTools/jib/blob/master/docs/faq.md#how-do-i-specify-a-platform-in-the-manifest-list-or-oci-index-of-a-base-image\"\n-              + \" to learn how to specify a manifest instead of a manifest list, until Jib fixes\"\n-              + \" https://github.com/GoogleContainerTools/jib/issues/1567 to allow specifying architecture and OS.\";\n+              + \" to learn more about specifyng a platform using the platform tag\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjUzNjA0OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo0ODo1NVrOG27z0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo0ODo1NVrOG27z0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1NjIxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          + \" is a manifest list, but the list does not contain an image manifest for the platform arch = \"\n          \n          \n            \n                          + architecture\n          \n          \n            \n                          + \", os = \"\n          \n          \n            \n                          + \" is a manifest list, but the list does not contain an image manifest for the platform architecture=\"\n          \n          \n            \n                          + architecture\n          \n          \n            \n                          + \", os=\"", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r460256210", "createdAt": "2020-07-24T19:48:55Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,22 +263,40 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();\n+    Platform platform = platforms.iterator().next();\n+    String architecture = platform.getArchitecture();\n+    String os = platform.getOs();\n+\n+    buildContext\n+        .getEventHandlers()\n+        .dispatch(\n+            LogEvent.lifecycle(\n+                \"Searching the manifest list for the platfrom, architecture =  \"\n+                    + architecture\n+                    + \", os = \"\n+                    + os));\n+\n+    List<String> digests = manifestListTemplate.getDigestsForPlatform(architecture, os);\n     if (digests.size() == 0) {\n       String errorMessage =\n           buildContext.getBaseImageConfiguration().getImage()\n-              + \" is a manifest list, but the list does not contain an image manifest for amd64/linux.\"\n-              + \" If your intention was to use a non-amd64/linux base image,\"\n+              + \" is a manifest list, but the list does not contain an image manifest for the platform arch = \"\n+              + architecture\n+              + \", os = \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjUzODgzOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo0OTo0OVrOG271dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo0OTo0OVrOG271dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1NjYzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LogEvent.lifecycle(\n          \n          \n            \n                            \"Searching the manifest list for the platfrom, architecture =  \"\n          \n          \n            \n                                + architecture\n          \n          \n            \n                                + \", os = \"\n          \n          \n            \n                        LogEvent.lifecycle(\n          \n          \n            \n                            \"Searching the manifest list for the platform, architecture=\"\n          \n          \n            \n                                + architecture\n          \n          \n            \n                                + \", os=\"", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r460256631", "createdAt": "2020-07-24T19:49:49Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,22 +263,40 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();\n+    Platform platform = platforms.iterator().next();\n+    String architecture = platform.getArchitecture();\n+    String os = platform.getOs();\n+\n+    buildContext\n+        .getEventHandlers()\n+        .dispatch(\n+            LogEvent.lifecycle(\n+                \"Searching the manifest list for the platfrom, architecture =  \"\n+                    + architecture\n+                    + \", os = \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjU1MDIwOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo1Mzo0NlrOG278KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjo1NDoyNVrOG5Bblg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODM0NQ==", "bodyText": "I think we need to throw an error if there is more than one platform. Something along the line of\nPreconditions.checkArgument(platforms.size() == 1, \"multiple base image platforms is not yet support; please specify only one platform\");\n\nYou can do this in a separate PR if you want. Regardless, you need to add a test.", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r460258345", "createdAt": "2020-07-24T19:53:46Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,22 +263,40 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAxNzEwOA==", "bodyText": "@chanseokoh I am going to add this check  in this PR", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r461017108", "createdAt": "2020-07-27T16:31:19Z", "author": {"login": "louismurerwa"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,22 +263,40 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODM0NQ=="}, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAxOTQ0OA==", "bodyText": "Let's do it in a separate PR. We may choose a different place for the check.", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r461019448", "createdAt": "2020-07-27T16:35:08Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,22 +263,40 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODM0NQ=="}, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyMTY1MQ==", "bodyText": "Ok let me revert my commit", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r461021651", "createdAt": "2020-07-27T16:39:00Z", "author": {"login": "louismurerwa"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,22 +263,40 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODM0NQ=="}, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzMjc2NQ==", "bodyText": "Sounds good. Avoid significantly changing the original intention of a PR (e.g., adding a new feature that can be done in a separate PR) (unless necessary) when people started reviewing.\nFor the check, I'm thinking maybe we can check and raise an error at an earlier point. We should also add a test too anyway.", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r461032765", "createdAt": "2020-07-27T16:56:19Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,22 +263,40 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODM0NQ=="}, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzNTMwNg==", "bodyText": "Yes the feature requires a test or two to confirm its functionality .At which point ,do you think we could do the check?", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r461035306", "createdAt": "2020-07-27T17:00:20Z", "author": {"login": "louismurerwa"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,22 +263,40 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODM0NQ=="}, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NjM0Mg==", "bodyText": "JibContainerBuilder.containerize() came to my mind, but I haven't given much thought actually. I'll need to look into the code, but in the meantime, you can continue working on other stuff.", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r461066342", "createdAt": "2020-07-27T17:53:21Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,22 +263,40 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODM0NQ=="}, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwMDE0MA==", "bodyText": "I think we can validate the input in JibContainerBuilder.containerize() and that UnsupportedOperationException could work. But if you think there's a better place, we can discuss.\n    try (BuildContext buildContext = toBuildContext(containerizer);\n        TimerEventDispatcher ignored =\n            new TimerEventDispatcher(\n                buildContext.getEventHandlers(), containerizer.getDescription())) {\n      if (...) {\n        throw UnsupportedOperationException(\"... not yet supported ...\");\n      }\n      logSources(buildContext.getEventHandlers());", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r461100140", "createdAt": "2020-07-27T18:53:52Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,22 +263,40 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODM0NQ=="}, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0NTQ2Mg==", "bodyText": "Single Platform Specification Support #2641", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r462445462", "createdAt": "2020-07-29T16:54:25Z", "author": {"login": "louismurerwa"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,22 +263,40 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n       throws RegistryException, IOException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODM0NQ=="}, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjU1NjIyOnYy", "diffSide": "RIGHT", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo1NTo0NFrOG27_yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo1NTo0NFrOG27_yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1OTI3Mw==", "bodyText": "Be consistent and use either JsonTemplateMapper or new ObjectMapper() across the file.", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r460259273", "createdAt": "2020-07-24T19:55:44Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -127,4 +138,80 @@ public void testCall_offlineMode_cached()\n \n     Mockito.verify(buildContext, Mockito.never()).newBaseImageRegistryClientFactory();\n   }\n+\n+  @Test\n+  public void testObtainPlatformSpecificImageManifest()\n+      throws IOException, InterruptedException, GeneralSecurityException, URISyntaxException,\n+          RegistryException {\n+    String testManifestListTemplate =\n+        \" {\\n\"\n+            + \"   \\\"schemaVersion\\\": 2,\\n\"\n+            + \"   \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.list.v2+json\\\",\\n\"\n+            + \"   \\\"manifests\\\": [\\n\"\n+            + \"      {\\n\"\n+            + \"         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n\"\n+            + \"         \\\"size\\\": 424,\\n\"\n+            + \"         \\\"digest\\\": \\\"sha256:f67dcc5fc786f04f0743abfe0ee5dae9bd8caf8efa6c8144f7f2a43889dc513b\\\",\\n\"\n+            + \"         \\\"platform\\\": {\\n\"\n+            + \"            \\\"architecture\\\": \\\"testArchitecture\\\",\\n\"\n+            + \"            \\\"os\\\": \\\"testOS\\\"\\n\"\n+            + \"         }\\n\"\n+            + \"      },\\n\"\n+            + \"      {\\n\"\n+            + \"         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n\"\n+            + \"         \\\"size\\\": 425,\\n\"\n+            + \"         \\\"digest\\\": \\\"sha256:5bb8e50aa2edd408bdf3ddf61efb7338ff34a07b762992c9432f1c02fc0e5e62\\\",\\n\"\n+            + \"         \\\"platform\\\": {\\n\"\n+            + \"            \\\"architecture\\\": \\\"Architecture\\\",\\n\"\n+            + \"            \\\"os\\\": \\\"OS\\\"\\n\"\n+            + \"         }\\n\"\n+            + \"      }\\n\"\n+            + \"   ]\\n\"\n+            + \"}\";\n+\n+    String testManifestTemplate =\n+        \"{\\n\"\n+            + \"    \\\"schemaVersion\\\": 2,\\n\"\n+            + \"    \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n\"\n+            + \"    \\\"config\\\": {\\n\"\n+            + \"        \\\"mediaType\\\": \\\"application/vnd.docker.container.image.v1+json\\\",\\n\"\n+            + \"        \\\"size\\\": 424,\\n\"\n+            + \"        \\\"digest\\\": \\\"sha256:5bb8e50aa2edd408bdf3ddf61efb7338ff34a07b762992c9432f1c02fc0e5e62\\\"\\n\"\n+            + \"    }\\n\"\n+            + \"}\";\n+    Mockito.when(buildContext.getContainerConfiguration()).thenReturn(containerConfiguration);\n+    Mockito.when(containerConfiguration.getPlatforms())\n+        .thenReturn(ImmutableSet.of(new Platform(\"testArchitecture\", \"testOS\")));\n+    V22ManifestListTemplate testManifestList =\n+        JsonTemplateMapper.readJson(testManifestListTemplate, V22ManifestListTemplate.class);\n+\n+    V22ManifestTemplate testManifest =\n+        new ObjectMapper().readValue(testManifestTemplate, V22ManifestTemplate.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjU3Mjg3OnYy", "diffSide": "RIGHT", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDowMTo0N1rOG28J9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDowMTo0N1rOG28J9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI2MTg3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void testObtainPlatformSpecificImageManifest()\n          \n          \n            \n                  throws IOException, InterruptedException, GeneralSecurityException, URISyntaxException,\n          \n          \n            \n                      RegistryException {\n          \n          \n            \n              public void testObtainPlatformSpecificImageManifest() throws IOException, RegistryException {", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r460261877", "createdAt": "2020-07-24T20:01:47Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -127,4 +138,80 @@ public void testCall_offlineMode_cached()\n \n     Mockito.verify(buildContext, Mockito.never()).newBaseImageRegistryClientFactory();\n   }\n+\n+  @Test\n+  public void testObtainPlatformSpecificImageManifest()\n+      throws IOException, InterruptedException, GeneralSecurityException, URISyntaxException,\n+          RegistryException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjU4MDEwOnYy", "diffSide": "RIGHT", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDowNDo0NFrOG28OrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDowNDo0NFrOG28OrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI2MzA4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        + \"            \\\"architecture\\\": \\\"Architecture\\\",\\n\"\n          \n          \n            \n                        + \"            \\\"os\\\": \\\"OS\\\"\\n\"\n          \n          \n            \n                        + \"            \\\"architecture\\\": \\\"targetArchitecture\\\",\\n\"\n          \n          \n            \n                        + \"            \\\"os\\\": \\\"targetOS\\\"\\n\"", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r460263085", "createdAt": "2020-07-24T20:04:44Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -127,4 +138,80 @@ public void testCall_offlineMode_cached()\n \n     Mockito.verify(buildContext, Mockito.never()).newBaseImageRegistryClientFactory();\n   }\n+\n+  @Test\n+  public void testObtainPlatformSpecificImageManifest()\n+      throws IOException, InterruptedException, GeneralSecurityException, URISyntaxException,\n+          RegistryException {\n+    String testManifestListTemplate =\n+        \" {\\n\"\n+            + \"   \\\"schemaVersion\\\": 2,\\n\"\n+            + \"   \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.list.v2+json\\\",\\n\"\n+            + \"   \\\"manifests\\\": [\\n\"\n+            + \"      {\\n\"\n+            + \"         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n\"\n+            + \"         \\\"size\\\": 424,\\n\"\n+            + \"         \\\"digest\\\": \\\"sha256:f67dcc5fc786f04f0743abfe0ee5dae9bd8caf8efa6c8144f7f2a43889dc513b\\\",\\n\"\n+            + \"         \\\"platform\\\": {\\n\"\n+            + \"            \\\"architecture\\\": \\\"testArchitecture\\\",\\n\"\n+            + \"            \\\"os\\\": \\\"testOS\\\"\\n\"\n+            + \"         }\\n\"\n+            + \"      },\\n\"\n+            + \"      {\\n\"\n+            + \"         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n\"\n+            + \"         \\\"size\\\": 425,\\n\"\n+            + \"         \\\"digest\\\": \\\"sha256:5bb8e50aa2edd408bdf3ddf61efb7338ff34a07b762992c9432f1c02fc0e5e62\\\",\\n\"\n+            + \"         \\\"platform\\\": {\\n\"\n+            + \"            \\\"architecture\\\": \\\"Architecture\\\",\\n\"\n+            + \"            \\\"os\\\": \\\"OS\\\"\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjU4MjI3OnYy", "diffSide": "RIGHT", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDowNToyNVrOG28P-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDowNToyNVrOG28P-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI2MzQxNg==", "bodyText": "I think it's more meaningful to make the code return the second manifest from the list.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .thenReturn(ImmutableSet.of(new Platform(\"testArchitecture\", \"testOS\")));\n          \n          \n            \n                    .thenReturn(ImmutableSet.of(new Platform(\"targetArchitecture\", \"targetOS\")));", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r460263416", "createdAt": "2020-07-24T20:05:25Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -127,4 +138,80 @@ public void testCall_offlineMode_cached()\n \n     Mockito.verify(buildContext, Mockito.never()).newBaseImageRegistryClientFactory();\n   }\n+\n+  @Test\n+  public void testObtainPlatformSpecificImageManifest()\n+      throws IOException, InterruptedException, GeneralSecurityException, URISyntaxException,\n+          RegistryException {\n+    String testManifestListTemplate =\n+        \" {\\n\"\n+            + \"   \\\"schemaVersion\\\": 2,\\n\"\n+            + \"   \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.list.v2+json\\\",\\n\"\n+            + \"   \\\"manifests\\\": [\\n\"\n+            + \"      {\\n\"\n+            + \"         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n\"\n+            + \"         \\\"size\\\": 424,\\n\"\n+            + \"         \\\"digest\\\": \\\"sha256:f67dcc5fc786f04f0743abfe0ee5dae9bd8caf8efa6c8144f7f2a43889dc513b\\\",\\n\"\n+            + \"         \\\"platform\\\": {\\n\"\n+            + \"            \\\"architecture\\\": \\\"testArchitecture\\\",\\n\"\n+            + \"            \\\"os\\\": \\\"testOS\\\"\\n\"\n+            + \"         }\\n\"\n+            + \"      },\\n\"\n+            + \"      {\\n\"\n+            + \"         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n\"\n+            + \"         \\\"size\\\": 425,\\n\"\n+            + \"         \\\"digest\\\": \\\"sha256:5bb8e50aa2edd408bdf3ddf61efb7338ff34a07b762992c9432f1c02fc0e5e62\\\",\\n\"\n+            + \"         \\\"platform\\\": {\\n\"\n+            + \"            \\\"architecture\\\": \\\"Architecture\\\",\\n\"\n+            + \"            \\\"os\\\": \\\"OS\\\"\\n\"\n+            + \"         }\\n\"\n+            + \"      }\\n\"\n+            + \"   ]\\n\"\n+            + \"}\";\n+\n+    String testManifestTemplate =\n+        \"{\\n\"\n+            + \"    \\\"schemaVersion\\\": 2,\\n\"\n+            + \"    \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n\"\n+            + \"    \\\"config\\\": {\\n\"\n+            + \"        \\\"mediaType\\\": \\\"application/vnd.docker.container.image.v1+json\\\",\\n\"\n+            + \"        \\\"size\\\": 424,\\n\"\n+            + \"        \\\"digest\\\": \\\"sha256:5bb8e50aa2edd408bdf3ddf61efb7338ff34a07b762992c9432f1c02fc0e5e62\\\"\\n\"\n+            + \"    }\\n\"\n+            + \"}\";\n+    Mockito.when(buildContext.getContainerConfiguration()).thenReturn(containerConfiguration);\n+    Mockito.when(containerConfiguration.getPlatforms())\n+        .thenReturn(ImmutableSet.of(new Platform(\"testArchitecture\", \"testOS\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjU4NzE0OnYy", "diffSide": "RIGHT", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDowNzoyOVrOG28TCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDowNzoyOVrOG28TCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI2NDIwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    new ManifestAndDigest(testManifest, Digests.computeJsonDigest(testManifest));\n          \n          \n            \n                    new ManifestAndDigest<>(testManifest, Digests.computeJsonDigest(testManifest));", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r460264200", "createdAt": "2020-07-24T20:07:29Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -127,4 +138,80 @@ public void testCall_offlineMode_cached()\n \n     Mockito.verify(buildContext, Mockito.never()).newBaseImageRegistryClientFactory();\n   }\n+\n+  @Test\n+  public void testObtainPlatformSpecificImageManifest()\n+      throws IOException, InterruptedException, GeneralSecurityException, URISyntaxException,\n+          RegistryException {\n+    String testManifestListTemplate =\n+        \" {\\n\"\n+            + \"   \\\"schemaVersion\\\": 2,\\n\"\n+            + \"   \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.list.v2+json\\\",\\n\"\n+            + \"   \\\"manifests\\\": [\\n\"\n+            + \"      {\\n\"\n+            + \"         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n\"\n+            + \"         \\\"size\\\": 424,\\n\"\n+            + \"         \\\"digest\\\": \\\"sha256:f67dcc5fc786f04f0743abfe0ee5dae9bd8caf8efa6c8144f7f2a43889dc513b\\\",\\n\"\n+            + \"         \\\"platform\\\": {\\n\"\n+            + \"            \\\"architecture\\\": \\\"testArchitecture\\\",\\n\"\n+            + \"            \\\"os\\\": \\\"testOS\\\"\\n\"\n+            + \"         }\\n\"\n+            + \"      },\\n\"\n+            + \"      {\\n\"\n+            + \"         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n\"\n+            + \"         \\\"size\\\": 425,\\n\"\n+            + \"         \\\"digest\\\": \\\"sha256:5bb8e50aa2edd408bdf3ddf61efb7338ff34a07b762992c9432f1c02fc0e5e62\\\",\\n\"\n+            + \"         \\\"platform\\\": {\\n\"\n+            + \"            \\\"architecture\\\": \\\"Architecture\\\",\\n\"\n+            + \"            \\\"os\\\": \\\"OS\\\"\\n\"\n+            + \"         }\\n\"\n+            + \"      }\\n\"\n+            + \"   ]\\n\"\n+            + \"}\";\n+\n+    String testManifestTemplate =\n+        \"{\\n\"\n+            + \"    \\\"schemaVersion\\\": 2,\\n\"\n+            + \"    \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n\"\n+            + \"    \\\"config\\\": {\\n\"\n+            + \"        \\\"mediaType\\\": \\\"application/vnd.docker.container.image.v1+json\\\",\\n\"\n+            + \"        \\\"size\\\": 424,\\n\"\n+            + \"        \\\"digest\\\": \\\"sha256:5bb8e50aa2edd408bdf3ddf61efb7338ff34a07b762992c9432f1c02fc0e5e62\\\"\\n\"\n+            + \"    }\\n\"\n+            + \"}\";\n+    Mockito.when(buildContext.getContainerConfiguration()).thenReturn(containerConfiguration);\n+    Mockito.when(containerConfiguration.getPlatforms())\n+        .thenReturn(ImmutableSet.of(new Platform(\"testArchitecture\", \"testOS\")));\n+    V22ManifestListTemplate testManifestList =\n+        JsonTemplateMapper.readJson(testManifestListTemplate, V22ManifestListTemplate.class);\n+\n+    V22ManifestTemplate testManifest =\n+        new ObjectMapper().readValue(testManifestTemplate, V22ManifestTemplate.class);\n+\n+    ManifestAndDigest<?> manifestAndDigest =\n+        new ManifestAndDigest(testManifest, Digests.computeJsonDigest(testManifest));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbff1af394913237358f92a31cb135c95601aa8"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzgzODM3OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTo1ODoyMVrOG3o-Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTo1ODoyMVrOG3o-Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk5NjEwMg==", "bodyText": "Nice catch. I really wish we could show the platform we are searching for here. But then, since you added another log inside obtainPlatformSpecificImageManifest(), I think we can remove this and promote the other log to a \"lifecycle\" log. (FYI, lifecycle logs are always displayed to the user.)", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r460996102", "createdAt": "2020-07-27T15:58:21Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -199,7 +202,7 @@ private Image pullBaseImage(\n     if (manifestTemplate instanceof V22ManifestListTemplate) {\n       eventHandlers.dispatch(\n           LogEvent.lifecycle(\n-              \"The base image reference is manifest list, searching for linux/amd64\"));\n+              \"The base image reference is manifest list, searching for the user specified platform\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd5aa309c67d519d6bcbecaf4b196677ecfd3fcd"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzg0NjczOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjowMDoxN1rOG3pDLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjowMDoxN1rOG3pDLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk5NzQyMQ==", "bodyText": "So, perhaps\nLogEvent.lifecycle(\"The base image reference is manifest list, searching for architecture=...\")\n(Probably \"for the platform\" is redundant too. Generally speaking, program/tool messages should be concise.)", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r460997421", "createdAt": "2020-07-27T16:00:17Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,23 +263,40 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n-      throws RegistryException, IOException {\n+      throws IOException, RegistryException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();\n+    Platform platform = platforms.iterator().next();\n+    String architecture = platform.getArchitecture();\n+    String os = platform.getOs();\n+\n+    EventHandlers eventHandlers = buildContext.getEventHandlers();\n+    eventHandlers.dispatch(\n+        LogEvent.info(\n+            \"Searching the manifest list for the platform, architecture=\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd5aa309c67d519d6bcbecaf4b196677ecfd3fcd"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzg3ODEzOnYy", "diffSide": "RIGHT", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjowODoxNVrOG3pWiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjoxODoxMlrOG3pvkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAwMjM3Nw==", "bodyText": "nit: assertEquals may work, but we can use assertSame to check if two object references are same (i.e., if manifest == returnManifest evaluates to true, meaning the references are pointing to the same single instance in the memory). OTOH, assertEquals may return when two (possible separate) object instances are deemed \"equal\" (whose definition is given by the class implementation of .equals()) even if manifest != returnManifest.", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r461002377", "createdAt": "2020-07-27T16:08:15Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -127,4 +132,49 @@ public void testCall_offlineMode_cached()\n \n     Mockito.verify(buildContext, Mockito.never()).newBaseImageRegistryClientFactory();\n   }\n+\n+  @Test\n+  public void testObtainPlatformSpecificImageManifest() throws IOException, RegistryException {\n+    String manifestListJson =\n+        \" {\\n\"\n+            + \"   \\\"schemaVersion\\\": 2,\\n\"\n+            + \"   \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.list.v2+json\\\",\\n\"\n+            + \"   \\\"manifests\\\": [\\n\"\n+            + \"      {\\n\"\n+            + \"         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n\"\n+            + \"         \\\"size\\\": 424,\\n\"\n+            + \"         \\\"digest\\\": \\\"sha256:111111111111111111111111111111111111111111111111111111111111111\\\",\\n\"\n+            + \"         \\\"platform\\\": {\\n\"\n+            + \"            \\\"architecture\\\": \\\"arm64\\\",\\n\"\n+            + \"            \\\"os\\\": \\\"linux\\\"\\n\"\n+            + \"         }\\n\"\n+            + \"      },\\n\"\n+            + \"      {\\n\"\n+            + \"         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n\"\n+            + \"         \\\"size\\\": 425,\\n\"\n+            + \"         \\\"digest\\\": \\\"sha256:222222222222222222222222222222222222222222222222222222222222222222\\\",\\n\"\n+            + \"         \\\"platform\\\": {\\n\"\n+            + \"            \\\"architecture\\\": \\\"targetArchitecture\\\",\\n\"\n+            + \"            \\\"os\\\": \\\"targetOS\\\"\\n\"\n+            + \"         }\\n\"\n+            + \"      }\\n\"\n+            + \"   ]\\n\"\n+            + \"}\";\n+\n+    Mockito.when(buildContext.getContainerConfiguration()).thenReturn(containerConfiguration);\n+    Mockito.when(containerConfiguration.getPlatforms())\n+        .thenReturn(ImmutableSet.of(new Platform(\"targetArchitecture\", \"targetOS\")));\n+    V22ManifestListTemplate manifestList =\n+        JsonTemplateMapper.readJson(manifestListJson, V22ManifestListTemplate.class);\n+    ManifestAndDigest<?> manifest = Mockito.mock(ManifestAndDigest.class);\n+    Mockito.<ManifestAndDigest<?>>when(\n+            registryClient.pullManifest(\n+                \"sha256:222222222222222222222222222222222222222222222222222222222222222222\"))\n+        .thenReturn(manifest);\n+\n+    ManifestAndDigest<?> returnManifest =\n+        pullBaseImageStep.obtainPlatformSpecificImageManifest(registryClient, manifestList);\n+\n+    Assert.assertEquals(manifest, returnManifest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd5aa309c67d519d6bcbecaf4b196677ecfd3fcd"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAwODc4NQ==", "bodyText": "Good point !! Object comparison requires .equals()", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r461008785", "createdAt": "2020-07-27T16:18:12Z", "author": {"login": "louismurerwa"}, "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -127,4 +132,49 @@ public void testCall_offlineMode_cached()\n \n     Mockito.verify(buildContext, Mockito.never()).newBaseImageRegistryClientFactory();\n   }\n+\n+  @Test\n+  public void testObtainPlatformSpecificImageManifest() throws IOException, RegistryException {\n+    String manifestListJson =\n+        \" {\\n\"\n+            + \"   \\\"schemaVersion\\\": 2,\\n\"\n+            + \"   \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.list.v2+json\\\",\\n\"\n+            + \"   \\\"manifests\\\": [\\n\"\n+            + \"      {\\n\"\n+            + \"         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n\"\n+            + \"         \\\"size\\\": 424,\\n\"\n+            + \"         \\\"digest\\\": \\\"sha256:111111111111111111111111111111111111111111111111111111111111111\\\",\\n\"\n+            + \"         \\\"platform\\\": {\\n\"\n+            + \"            \\\"architecture\\\": \\\"arm64\\\",\\n\"\n+            + \"            \\\"os\\\": \\\"linux\\\"\\n\"\n+            + \"         }\\n\"\n+            + \"      },\\n\"\n+            + \"      {\\n\"\n+            + \"         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n\"\n+            + \"         \\\"size\\\": 425,\\n\"\n+            + \"         \\\"digest\\\": \\\"sha256:222222222222222222222222222222222222222222222222222222222222222222\\\",\\n\"\n+            + \"         \\\"platform\\\": {\\n\"\n+            + \"            \\\"architecture\\\": \\\"targetArchitecture\\\",\\n\"\n+            + \"            \\\"os\\\": \\\"targetOS\\\"\\n\"\n+            + \"         }\\n\"\n+            + \"      }\\n\"\n+            + \"   ]\\n\"\n+            + \"}\";\n+\n+    Mockito.when(buildContext.getContainerConfiguration()).thenReturn(containerConfiguration);\n+    Mockito.when(containerConfiguration.getPlatforms())\n+        .thenReturn(ImmutableSet.of(new Platform(\"targetArchitecture\", \"targetOS\")));\n+    V22ManifestListTemplate manifestList =\n+        JsonTemplateMapper.readJson(manifestListJson, V22ManifestListTemplate.class);\n+    ManifestAndDigest<?> manifest = Mockito.mock(ManifestAndDigest.class);\n+    Mockito.<ManifestAndDigest<?>>when(\n+            registryClient.pullManifest(\n+                \"sha256:222222222222222222222222222222222222222222222222222222222222222222\"))\n+        .thenReturn(manifest);\n+\n+    ManifestAndDigest<?> returnManifest =\n+        pullBaseImageStep.obtainPlatformSpecificImageManifest(registryClient, manifestList);\n+\n+    Assert.assertEquals(manifest, returnManifest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAwMjM3Nw=="}, "originalCommit": {"oid": "cd5aa309c67d519d6bcbecaf4b196677ecfd3fcd"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzk5MDc1OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjozNjoxMVrOG3qbqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjozNjoxMVrOG3qbqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyMDA3Mg==", "bodyText": "I added a new check here after you approved the pr", "url": "https://github.com/GoogleContainerTools/jib/pull/2615#discussion_r461020072", "createdAt": "2020-07-27T16:36:11Z", "author": {"login": "louismurerwa"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -260,23 +261,43 @@ private Image pullBaseImage(\n   }\n \n   /**\n-   * Looks through a manifest list for any amd64/linux manifest and downloads and returns the first\n-   * manifest it finds.\n+   * Looks through a manifest list for the user specified arch/os manifest and downloads and returns\n+   * the first manifest it finds.\n    */\n-  private ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n+  @VisibleForTesting\n+  ManifestAndDigest<?> obtainPlatformSpecificImageManifest(\n       RegistryClient registryClient, V22ManifestListTemplate manifestListTemplate)\n-      throws RegistryException, IOException {\n+      throws IOException, RegistryException {\n \n-    List<String> digests = manifestListTemplate.getDigestsForPlatform(\"amd64\", \"linux\");\n+    Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();\n+    Preconditions.checkArgument(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7f270c49e1b39f0289a8ffd40f079518703b97d"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 293, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}