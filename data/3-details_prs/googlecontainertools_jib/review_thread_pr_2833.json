{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MDYwMTQy", "number": 2833, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTozNToxMlrOEusIfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTo0Mzo0OVrOEusPkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzkzMDIzOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/cache/CacheStorageWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTozNToxMlrOHjQcGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTo0NjoyM1rOHjQqKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczMTU0Nw==", "bodyText": "Does this mean if the same layer is being cached twice?", "url": "https://github.com/GoogleContainerTools/jib/pull/2833#discussion_r506731547", "createdAt": "2020-10-16T21:35:12Z", "author": {"login": "mpeddada1"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/cache/CacheStorageWriter.java", "diffHunk": "@@ -120,8 +120,8 @@ private static void moveIfDoesNotExist(Path source, Path destination) throws IOE\n                 () -> {\n                   if (Files.exists(destination)) {\n                     // If the file already exists, we skip renaming and use the existing file.\n-                    // This happens if a new layer happens to have the same content as a\n-                    // previously-cached layer.\n+                    // This happens, e.g., if a new layer happens to have the same content as a\n+                    // previously-cached layer or the same layer is being cached concurrently.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c677a491fbfd8039038f15d76e46c9b7c0800d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczNTE0Ng==", "bodyText": "Yes. To be strict, multiple threads may be attempting to cache the same layer more than once (whether almost at the same time or apart). They will all write files at their own temporary location. In the end, all of them will try to rename the temp directory to the final one, which is unique. Then, only one rename will succeed, and other will see that the directory already exists.", "url": "https://github.com/GoogleContainerTools/jib/pull/2833#discussion_r506735146", "createdAt": "2020-10-16T21:46:23Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/cache/CacheStorageWriter.java", "diffHunk": "@@ -120,8 +120,8 @@ private static void moveIfDoesNotExist(Path source, Path destination) throws IOE\n                 () -> {\n                   if (Files.exists(destination)) {\n                     // If the file already exists, we skip renaming and use the existing file.\n-                    // This happens if a new layer happens to have the same content as a\n-                    // previously-cached layer.\n+                    // This happens, e.g., if a new layer happens to have the same content as a\n+                    // previously-cached layer or the same layer is being cached concurrently.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczMTU0Nw=="}, "originalCommit": {"oid": "d1c677a491fbfd8039038f15d76e46c9b7c0800d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzk0Njc1OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/tar/TarExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTo0Mjo1M1rOHjQl7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTo1MjowNFrOHjQxPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczNDA2Mw==", "bodyText": "Can we use entry.isSymbolicLink?", "url": "https://github.com/GoogleContainerTools/jib/pull/2833#discussion_r506734063", "createdAt": "2020-10-16T21:42:53Z", "author": {"login": "loosebazooka"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/tar/TarExtractor.java", "diffHunk": "@@ -61,8 +63,14 @@ public static void extract(Path source, Path destination) throws IOException {\n           if (entryPath.getParent() != null) {\n             Files.createDirectories(entryPath.getParent());\n           }\n-          try (OutputStream out = new BufferedOutputStream(Files.newOutputStream(entryPath))) {\n-            ByteStreams.copy(tarArchiveInputStream, out);\n+\n+          String linkName = entry.getLinkName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c677a491fbfd8039038f15d76e46c9b7c0800d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczNjk1Nw==", "bodyText": "Oh, absolutely. Nice catch.", "url": "https://github.com/GoogleContainerTools/jib/pull/2833#discussion_r506736957", "createdAt": "2020-10-16T21:52:04Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/tar/TarExtractor.java", "diffHunk": "@@ -61,8 +63,14 @@ public static void extract(Path source, Path destination) throws IOException {\n           if (entryPath.getParent() != null) {\n             Files.createDirectories(entryPath.getParent());\n           }\n-          try (OutputStream out = new BufferedOutputStream(Files.newOutputStream(entryPath))) {\n-            ByteStreams.copy(tarArchiveInputStream, out);\n+\n+          String linkName = entry.getLinkName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczNDA2Mw=="}, "originalCommit": {"oid": "d1c677a491fbfd8039038f15d76e46c9b7c0800d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzk0ODM1OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/tar/TarExtractor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTo0Mzo0OVrOHjQm-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwMToyMDo0MFrOHjTP0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczNDMzMQ==", "bodyText": "So what happens when we then process this layer? Do we lose this symlink?", "url": "https://github.com/GoogleContainerTools/jib/pull/2833#discussion_r506734331", "createdAt": "2020-10-16T21:43:49Z", "author": {"login": "loosebazooka"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/tar/TarExtractor.java", "diffHunk": "@@ -61,8 +63,14 @@ public static void extract(Path source, Path destination) throws IOException {\n           if (entryPath.getParent() != null) {\n             Files.createDirectories(entryPath.getParent());\n           }\n-          try (OutputStream out = new BufferedOutputStream(Files.newOutputStream(entryPath))) {\n-            ByteStreams.copy(tarArchiveInputStream, out);\n+\n+          String linkName = entry.getLinkName();\n+          if (!Strings.isNullOrEmpty(linkName)) {\n+            Files.createSymbolicLink(entryPath, Paths.get(linkName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c677a491fbfd8039038f15d76e46c9b7c0800d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczNjk0OQ==", "bodyText": "The .extract() method is only used when using a local tar or Docker daemon base image. It's to explode the contents of docker save or a local tar image. Then we'll read layer tarballs from the exploded directory to cache them in our base image cache. And we'll see a symlink only when there are duplicate layers. I learned that when our code reads through a symlink, it actually reads the original file. It's not possible that you open and read \"something\" out of the symlink itself.", "url": "https://github.com/GoogleContainerTools/jib/pull/2833#discussion_r506736949", "createdAt": "2020-10-16T21:52:01Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/tar/TarExtractor.java", "diffHunk": "@@ -61,8 +63,14 @@ public static void extract(Path source, Path destination) throws IOException {\n           if (entryPath.getParent() != null) {\n             Files.createDirectories(entryPath.getParent());\n           }\n-          try (OutputStream out = new BufferedOutputStream(Files.newOutputStream(entryPath))) {\n-            ByteStreams.copy(tarArchiveInputStream, out);\n+\n+          String linkName = entry.getLinkName();\n+          if (!Strings.isNullOrEmpty(linkName)) {\n+            Files.createSymbolicLink(entryPath, Paths.get(linkName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczNDMzMQ=="}, "originalCommit": {"oid": "d1c677a491fbfd8039038f15d76e46c9b7c0800d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3NzU1Mw==", "bodyText": "Ah right, so we only see symlinks to the layer tar (but we never expand out those layer tars).", "url": "https://github.com/GoogleContainerTools/jib/pull/2833#discussion_r506777553", "createdAt": "2020-10-17T01:20:40Z", "author": {"login": "loosebazooka"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/tar/TarExtractor.java", "diffHunk": "@@ -61,8 +63,14 @@ public static void extract(Path source, Path destination) throws IOException {\n           if (entryPath.getParent() != null) {\n             Files.createDirectories(entryPath.getParent());\n           }\n-          try (OutputStream out = new BufferedOutputStream(Files.newOutputStream(entryPath))) {\n-            ByteStreams.copy(tarArchiveInputStream, out);\n+\n+          String linkName = entry.getLinkName();\n+          if (!Strings.isNullOrEmpty(linkName)) {\n+            Files.createSymbolicLink(entryPath, Paths.get(linkName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczNDMzMQ=="}, "originalCommit": {"oid": "d1c677a491fbfd8039038f15d76e46c9b7c0800d"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4969, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}