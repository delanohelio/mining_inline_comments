{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzOTM5NzMz", "number": 2603, "title": "Processing Raw Platforms Configs From the Plugins", "bodyText": "This PR processes the raw platforms configurations", "createdAt": "2020-07-20T23:34:02Z", "url": "https://github.com/GoogleContainerTools/jib/pull/2603", "merged": true, "mergeCommit": {"oid": "70e721057abef3cb47a918e3bc15ec7db9992e61"}, "closed": true, "closedAt": "2020-07-22T16:29:50Z", "author": {"login": "louismurerwa"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc26SvCgH2gAyNDUzOTM5NzMzOjQwNDU5ZjM1NDM2ZGQ4YjEwMTVmZTI1ODM3NWUxZDg1YTMyNDVhNTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3dPQvAH2gAyNDUzOTM5NzMzOjZkMjNjNzUwY2QyMTc2MmFmNDk3N2E2YzhiMzQ2MzZiNDdlNWQ2NDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "40459f35436dd8b1015fe258375e1d85a3245a50", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/40459f35436dd8b1015fe258375e1d85a3245a50", "committedDate": "2020-07-20T23:32:57Z", "message": "Processing Raw Platforms COnfig From Plugins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/6169846626d936a74150c3cec4049150ccc53d8f", "committedDate": "2020-07-21T00:19:29Z", "message": "Adding Tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMDQ0MjI2", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#pullrequestreview-452044226", "createdAt": "2020-07-21T00:22:46Z", "commit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMDoyMjo0NlrOG0jsZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMDoyMzowMFrOG0jspA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2Mzk0Mw==", "bodyText": "@chanseokoh my tests have been failing because this code block is not catching a platform that has either os or architecture as null.Is there any way of ensuring that when either os/arch is null , this method throws an exception", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r457763943", "createdAt": "2020-07-21T00:22:46Z", "author": {"login": "louismurerwa"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -611,6 +627,38 @@ static String getDefaultBaseImage(ProjectProperties projectProperties)\n     throw new IncompatibleBaseImageJavaVersionException(11, javaVersion);\n   }\n \n+  /**\n+   * Parses the list of platforms to a set of {@link Platform}.\n+   *\n+   * @param rawConfiguration raw configuration data\n+   * @return the set of parsed platforms.\n+   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a\n+   *     null architectureName or osName\n+   */\n+  @VisibleForTesting\n+  static Set<Platform> getPlatformsSet(RawConfiguration rawConfiguration)\n+      throws InvalidPlatformConfigurationException {\n+    Set<Platform> platforms = new LinkedHashSet<>();\n+    for (PlatformConfiguration platformConfiguration : rawConfiguration.getPlatforms()) {\n+      try {\n+        Preconditions.checkNotNull(\n+            platformConfiguration.getArchitectureName(), \"platforms set cannot be empty\");\n+        Preconditions.checkNotNull(\n+            platformConfiguration.getOsName(), \"platforms set cannot be empty\");\n+        Platform platform =\n+            new Platform(\n+                platformConfiguration.getArchitectureName().orElse(null),\n+                platformConfiguration.getOsName().orElse(null));\n+        platforms.add(platform);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2NDAwNA==", "bodyText": "I will fix the messages here", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r457764004", "createdAt": "2020-07-21T00:23:00Z", "author": {"login": "louismurerwa"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -611,6 +627,38 @@ static String getDefaultBaseImage(ProjectProperties projectProperties)\n     throw new IncompatibleBaseImageJavaVersionException(11, javaVersion);\n   }\n \n+  /**\n+   * Parses the list of platforms to a set of {@link Platform}.\n+   *\n+   * @param rawConfiguration raw configuration data\n+   * @return the set of parsed platforms.\n+   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a\n+   *     null architectureName or osName\n+   */\n+  @VisibleForTesting\n+  static Set<Platform> getPlatformsSet(RawConfiguration rawConfiguration)\n+      throws InvalidPlatformConfigurationException {\n+    Set<Platform> platforms = new LinkedHashSet<>();\n+    for (PlatformConfiguration platformConfiguration : rawConfiguration.getPlatforms()) {\n+      try {\n+        Preconditions.checkNotNull(\n+            platformConfiguration.getArchitectureName(), \"platforms set cannot be empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 170}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNDU3OTEx", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#pullrequestreview-452457911", "createdAt": "2020-07-21T13:29:58Z", "commit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "state": "COMMENTED", "comments": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzoyOTo1OFrOG04B-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDoxOToxNVrOG06QKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA5NzE0NA==", "bodyText": "... {@code from.platforms} list has ...\nand\n(For example, a platform misses a required field or has an invalid value.)\nNote that eventually we will put more fields into <platform> such as <features>, <variants>, <os..version>, and so on.", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458097144", "createdAt": "2020-07-21T13:29:58Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformConfigurationException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+/**\n+ * Indicates that the {@code container.platforms} config value has at least one invalid platform.\n+ * (The platform misses either an architecture value or os value or both).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA5ODA5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String platform;\n          \n          \n            \n              private final String platform;", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458098095", "createdAt": "2020-07-21T13:31:20Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformConfigurationException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+/**\n+ * Indicates that the {@code container.platforms} config value has at least one invalid platform.\n+ * (The platform misses either an architecture value or os value or both).\n+ */\n+public class InvalidPlatformConfigurationException extends Exception {\n+\n+  private String platform;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMDA3MA==", "bodyText": "Not just missing a field but also for the case with an invalid/unknown value. For example, some invalid value other than \"linux\", \"windows\", etc. So, how about\n\"if the specified platform list is missing required fields or has invalid values\"\n?", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458100070", "createdAt": "2020-07-21T13:34:12Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -92,6 +95,8 @@\n    * @throws IOException if an error occurs creating the container builder\n    * @throws InvalidWorkingDirectoryException if the working directory specified for the build is\n    *     invalid\n+   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a\n+   *     null architectureName or osName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMDE3NQ==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458100175", "createdAt": "2020-07-21T13:34:22Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -156,6 +162,8 @@ public static JibBuildRunner createJibBuildRunnerForDockerDaemonImage(\n    * @throws IOException if an error occurs creating the container builder\n    * @throws InvalidWorkingDirectoryException if the working directory specified for the build is\n    *     invalid\n+   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMDIzMQ==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458100231", "createdAt": "2020-07-21T13:34:27Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -215,6 +224,8 @@ public static JibBuildRunner createJibBuildRunnerForTarImage(\n    * @throws IOException if an error occurs creating the container builder\n    * @throws InvalidWorkingDirectoryException if the working directory specified for the build is\n    *     invalid\n+   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMDQwMA==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458100400", "createdAt": "2020-07-21T13:34:41Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -290,6 +302,8 @@ public static JibBuildRunner createJibBuildRunnerForRegistryImage(\n    * @throws IOException if an error occurs creating the container builder\n    * @throws InvalidWorkingDirectoryException if the working directory specified for the build is\n    *     invalid\n+   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMTI5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return the set of parsed platforms.\n          \n          \n            \n               * @return the set of parsed platforms", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458101290", "createdAt": "2020-07-21T13:36:00Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -611,6 +627,38 @@ static String getDefaultBaseImage(ProjectProperties projectProperties)\n     throw new IncompatibleBaseImageJavaVersionException(11, javaVersion);\n   }\n \n+  /**\n+   * Parses the list of platforms to a set of {@link Platform}.\n+   *\n+   * @param rawConfiguration raw configuration data\n+   * @return the set of parsed platforms.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMTcwMQ==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458101701", "createdAt": "2020-07-21T13:36:30Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -611,6 +627,38 @@ static String getDefaultBaseImage(ProjectProperties projectProperties)\n     throw new IncompatibleBaseImageJavaVersionException(11, javaVersion);\n   }\n \n+  /**\n+   * Parses the list of platforms to a set of {@link Platform}.\n+   *\n+   * @param rawConfiguration raw configuration data\n+   * @return the set of parsed platforms.\n+   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExMDczMQ==", "bodyText": "getArchitectureName() and getOsName() never return null. (It's not marked @Nullable.) So you want\nif (platformConfiguration.getArchitectureName().isPreseent() || ....getOsName().isPresent()) {\n  throw new InvalidPlatformConfigurationException(...)\n}\nThere's no need to catch IllegalArgumentException only to re-throw another exception.", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458110731", "createdAt": "2020-07-21T13:48:59Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -611,6 +627,38 @@ static String getDefaultBaseImage(ProjectProperties projectProperties)\n     throw new IncompatibleBaseImageJavaVersionException(11, javaVersion);\n   }\n \n+  /**\n+   * Parses the list of platforms to a set of {@link Platform}.\n+   *\n+   * @param rawConfiguration raw configuration data\n+   * @return the set of parsed platforms.\n+   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a\n+   *     null architectureName or osName\n+   */\n+  @VisibleForTesting\n+  static Set<Platform> getPlatformsSet(RawConfiguration rawConfiguration)\n+      throws InvalidPlatformConfigurationException {\n+    Set<Platform> platforms = new LinkedHashSet<>();\n+    for (PlatformConfiguration platformConfiguration : rawConfiguration.getPlatforms()) {\n+      try {\n+        Preconditions.checkNotNull(\n+            platformConfiguration.getArchitectureName(), \"platforms set cannot be empty\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2NDAwNA=="}, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExNDMxMQ==", "bodyText": "orElse() returns an alternative \"default\" value when an Optional in question is empty. Note we don't want to ever pass null to new Platform(), as we didn't design for new Platform() to accept nulls. Because we will check if Optional is empty above, we can just call .get().\n                platformConfiguration.getArchitectureName().get(),\n                platformConfiguration.getOsName().get());", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458114311", "createdAt": "2020-07-21T13:53:36Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -611,6 +627,38 @@ static String getDefaultBaseImage(ProjectProperties projectProperties)\n     throw new IncompatibleBaseImageJavaVersionException(11, javaVersion);\n   }\n \n+  /**\n+   * Parses the list of platforms to a set of {@link Platform}.\n+   *\n+   * @param rawConfiguration raw configuration data\n+   * @return the set of parsed platforms.\n+   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a\n+   *     null architectureName or osName\n+   */\n+  @VisibleForTesting\n+  static Set<Platform> getPlatformsSet(RawConfiguration rawConfiguration)\n+      throws InvalidPlatformConfigurationException {\n+    Set<Platform> platforms = new LinkedHashSet<>();\n+    for (PlatformConfiguration platformConfiguration : rawConfiguration.getPlatforms()) {\n+      try {\n+        Preconditions.checkNotNull(\n+            platformConfiguration.getArchitectureName(), \"platforms set cannot be empty\");\n+        Preconditions.checkNotNull(\n+            platformConfiguration.getOsName(), \"platforms set cannot be empty\");\n+        Platform platform =\n+            new Platform(\n+                platformConfiguration.getArchitectureName().orElse(null),\n+                platformConfiguration.getOsName().orElse(null));\n+        platforms.add(platform);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2Mzk0Mw=="}, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExODQ2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable private String os;\n          \n          \n            \n                @Nullable private String architecture;\n          \n          \n            \n                @Nullable private final String os;\n          \n          \n            \n                @Nullable private final String architecture;", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458118464", "createdAt": "2020-07-21T13:59:01Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -104,11 +107,34 @@ private static void assertExtractionPathsUnordered(\n   @Mock private AuthProperty authProperty;\n   @Mock private Consumer<LogEvent> logger;\n \n+  /** Configuration for {@code platform} parameter. */\n+  public static class PlatformParametersTest implements PlatformConfiguration {\n+    @Nullable private String os;\n+    @Nullable private String architecture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMDMxOA==", "bodyText": "No need for a comment. And this class isn't going to be used outside of this test class, so you don't want to make it public. And the name -Test doesn't sound right.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Configuration for {@code platform} parameter. */\n          \n          \n            \n              public static class PlatformParametersTest implements PlatformConfiguration {\n          \n          \n            \n              private static class TestPlatformConfiguration implements PlatformConfiguration {", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458120318", "createdAt": "2020-07-21T14:01:16Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -104,11 +107,34 @@ private static void assertExtractionPathsUnordered(\n   @Mock private AuthProperty authProperty;\n   @Mock private Consumer<LogEvent> logger;\n \n+  /** Configuration for {@code platform} parameter. */\n+  public static class PlatformParametersTest implements PlatformConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMDUyNg==", "bodyText": "Probably Mockito.when(...) will just work.", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458120526", "createdAt": "2020-07-21T14:01:33Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -104,11 +107,34 @@ private static void assertExtractionPathsUnordered(\n   @Mock private AuthProperty authProperty;\n   @Mock private Consumer<LogEvent> logger;\n \n+  /** Configuration for {@code platform} parameter. */\n+  public static class PlatformParametersTest implements PlatformConfiguration {\n+    @Nullable private String os;\n+    @Nullable private String architecture;\n+\n+    PlatformParametersTest(String architecture, String os) {\n+      this.architecture = architecture;\n+      this.os = os;\n+    }\n+\n+    @Override\n+    public Optional<String> getOsName() {\n+      return Optional.ofNullable(os);\n+    }\n+\n+    @Override\n+    public Optional<String> getArchitectureName() {\n+      return Optional.ofNullable(architecture);\n+    }\n+  }\n+\n   @Before\n   public void setUp() throws IOException, InvalidImageReferenceException, InferredAuthException {\n     Mockito.when(rawConfiguration.getFromAuth()).thenReturn(authProperty);\n     Mockito.when(rawConfiguration.getEntrypoint()).thenReturn(Optional.empty());\n     Mockito.when(rawConfiguration.getAppRoot()).thenReturn(\"/app\");\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMDkxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              //", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458120914", "createdAt": "2020-07-21T14:02:08Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -837,6 +874,31 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n       Assert.assertEquals(12, ex.getProjectMajorJavaVersion());\n     }\n   }\n+  //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMTA3NA==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458121074", "createdAt": "2020-07-21T14:02:22Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -837,6 +874,31 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n       Assert.assertEquals(12, ex.getProjectMajorJavaVersion());\n     }\n   }\n+  //\n+  @Test\n+  public void testGetPlatformsSet() throws InvalidPlatformConfigurationException {\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMTE5Ng==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458121196", "createdAt": "2020-07-21T14:02:32Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -837,6 +874,31 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n       Assert.assertEquals(12, ex.getProjectMajorJavaVersion());\n     }\n   }\n+  //\n+  @Test\n+  public void testGetPlatformsSet() throws InvalidPlatformConfigurationException {\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(new PlatformParametersTest(\"amd64\", \"linux\")));\n+\n+    Assert.assertEquals(\n+        ImmutableSet.of(new Platform(\"amd64\", \"linux\")),\n+        PluginConfigurationProcessor.getPlatformsSet(rawConfiguration));\n+  }\n+\n+  @Test\n+  public void testInvalidPlatformsSet() throws InvalidPlatformConfigurationException {\n+    PlatformParametersTest platform = new PlatformParametersTest(null, \"linux\");\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMjYzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                PlatformParametersTest(String architecture, String os) {\n          \n          \n            \n                PlatformParametersTest(@Nullable String architecture, @Nullable String os) {\n          \n      \n    \n    \n  \n\nAlthough we don't strictly enforce using @Nullable annotation in test classes, let's annotate these properly since you used @Nullable for the fields.", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458122631", "createdAt": "2020-07-21T14:04:34Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -104,11 +107,34 @@ private static void assertExtractionPathsUnordered(\n   @Mock private AuthProperty authProperty;\n   @Mock private Consumer<LogEvent> logger;\n \n+  /** Configuration for {@code platform} parameter. */\n+  public static class PlatformParametersTest implements PlatformConfiguration {\n+    @Nullable private String os;\n+    @Nullable private String architecture;\n+\n+    PlatformParametersTest(String architecture, String os) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMzI2Mw==", "bodyText": "2020", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458123263", "createdAt": "2020-07-21T14:05:24Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformConfigurationException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2018 Google LLC.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjY2MA==", "bodyText": "Don't use platform.toString() but use an actual String literal to verify the returned value.", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458126660", "createdAt": "2020-07-21T14:09:57Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -837,6 +874,31 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n       Assert.assertEquals(12, ex.getProjectMajorJavaVersion());\n     }\n   }\n+  //\n+  @Test\n+  public void testGetPlatformsSet() throws InvalidPlatformConfigurationException {\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(new PlatformParametersTest(\"amd64\", \"linux\")));\n+\n+    Assert.assertEquals(\n+        ImmutableSet.of(new Platform(\"amd64\", \"linux\")),\n+        PluginConfigurationProcessor.getPlatformsSet(rawConfiguration));\n+  }\n+\n+  @Test\n+  public void testInvalidPlatformsSet() throws InvalidPlatformConfigurationException {\n+    PlatformParametersTest platform = new PlatformParametersTest(null, \"linux\");\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(platform));\n+\n+    try {\n+      PluginConfigurationProcessor.getPlatformsSet(rawConfiguration);\n+      Assert.fail();\n+    } catch (InvalidPlatformConfigurationException ex) {\n+      Assert.assertEquals(platform.toString(), ex.getMessage());\n+      Assert.assertEquals(platform.toString(), ex.getInvalidPlatform());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjkwNA==", "bodyText": "How about from.platforms misses a required field or has an invalid value: ?\nNote it's from.platforms.", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458126904", "createdAt": "2020-07-21T14:10:18Z", "author": {"login": "chanseokoh"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java", "diffHunk": "@@ -127,6 +128,11 @@ public void buildDocker()\n               + ex.getInvalidPathValue(),\n           ex);\n \n+    } catch (InvalidPlatformConfigurationException ex) {\n+      throw new GradleException(\n+          \"container.platforms contains a null architecture or os name: \" + ex.getInvalidPlatform(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyODExMA==", "bodyText": "<from><platforms> We use brackets for Maven.", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458128110", "createdAt": "2020-07-21T14:12:00Z", "author": {"login": "chanseokoh"}, "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java", "diffHunk": "@@ -106,7 +107,10 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n           \"<container><workingDirectory> is not an absolute Unix-style path: \"\n               + ex.getInvalidPathValue(),\n           ex);\n-\n+    } catch (InvalidPlatformConfigurationException ex) {\n+      throw new MojoExecutionException(\n+          \"container.platforms contains a null architecture or os name: \" + ex.getInvalidPlatform(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzMzU0NQ==", "bodyText": "platformConfiguration.toString() will returns some weird string value (for example, PlatformConfiguration@6d06d69c), unless the class (or any of its super-classes) overrode and implemented toString().\nAnd I think we don't want to implement toString() in PlatformConfiguration implementations. So probably we should assemble a human-readable string form here. For example,\n\"architecture=\" + platformConfiguration.getArchitectureName().orElse(\"<missing>\") + \", os=\" + platformConfiguration.getOsName().orElse(\"<missing>\")", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458133545", "createdAt": "2020-07-21T14:19:15Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -611,6 +627,38 @@ static String getDefaultBaseImage(ProjectProperties projectProperties)\n     throw new IncompatibleBaseImageJavaVersionException(11, javaVersion);\n   }\n \n+  /**\n+   * Parses the list of platforms to a set of {@link Platform}.\n+   *\n+   * @param rawConfiguration raw configuration data\n+   * @return the set of parsed platforms.\n+   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a\n+   *     null architectureName or osName\n+   */\n+  @VisibleForTesting\n+  static Set<Platform> getPlatformsSet(RawConfiguration rawConfiguration)\n+      throws InvalidPlatformConfigurationException {\n+    Set<Platform> platforms = new LinkedHashSet<>();\n+    for (PlatformConfiguration platformConfiguration : rawConfiguration.getPlatforms()) {\n+      try {\n+        Preconditions.checkNotNull(\n+            platformConfiguration.getArchitectureName(), \"platforms set cannot be empty\");\n+        Preconditions.checkNotNull(\n+            platformConfiguration.getOsName(), \"platforms set cannot be empty\");\n+        Platform platform =\n+            new Platform(\n+                platformConfiguration.getArchitectureName().orElse(null),\n+                platformConfiguration.getOsName().orElse(null));\n+        platforms.add(platform);\n+      } catch (IllegalArgumentException exception) {\n+        throw new InvalidPlatformConfigurationException(\n+            platformConfiguration.toString(), platformConfiguration.toString(), exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6169846626d936a74150c3cec4049150ccc53d8f"}, "originalPosition": 180}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f55cb9ddb306722095c59ea6439c454fed3e911", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/0f55cb9ddb306722095c59ea6439c454fed3e911", "committedDate": "2020-07-21T14:25:23Z", "message": "Tests Work"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNTE0MzE3", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#pullrequestreview-452514317", "createdAt": "2020-07-21T14:27:38Z", "commit": {"oid": "0f55cb9ddb306722095c59ea6439c454fed3e911"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDoyNzozOVrOG06p_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDoyODozOFrOG06tFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MDE1OQ==", "bodyText": "testGetPlatformsSet()", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458140159", "createdAt": "2020-07-21T14:27:39Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -838,6 +875,31 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n     }\n   }\n \n+  @Test\n+  public void testGetValidPlatformsList() throws InvalidPlatformConfigurationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f55cb9ddb306722095c59ea6439c454fed3e911"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MDk1MA==", "bodyText": "testGetPlatformsSet_osMissing()\nThat said, I'd add testGetPlatformsSet_architectureMissing() as well.", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458140950", "createdAt": "2020-07-21T14:28:38Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -838,6 +875,31 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n     }\n   }\n \n+  @Test\n+  public void testGetValidPlatformsList() throws InvalidPlatformConfigurationException {\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(new PlatformParametersTest(\"testArchitecture\", \"testOs\")));\n+\n+    Assert.assertEquals(\n+        ImmutableSet.of(new Platform(\"testArchitecture\", \"testOs\")),\n+        PluginConfigurationProcessor.getPlatformsSet(rawConfiguration));\n+  }\n+\n+  @Test\n+  public void testInvalidPlatformsList() throws InvalidPlatformConfigurationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f55cb9ddb306722095c59ea6439c454fed3e911"}, "originalPosition": 264}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "committedDate": "2020-07-21T16:09:03Z", "message": "Style Fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNjE1MzMy", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#pullrequestreview-452615332", "createdAt": "2020-07-21T16:11:10Z", "commit": {"oid": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjoxMToxMVrOG0_bsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjoxMToxMVrOG0_bsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIxODQxNw==", "bodyText": "Is this correct way of throwing a InvalidPlatformConfigurationException when I didnt catch any exceptions?", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458218417", "createdAt": "2020-07-21T16:11:11Z", "author": {"login": "louismurerwa"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -611,6 +628,52 @@ static String getDefaultBaseImage(ProjectProperties projectProperties)\n     throw new IncompatibleBaseImageJavaVersionException(11, javaVersion);\n   }\n \n+  /**\n+   * Parses the list of platforms to a set of {@link Platform}.\n+   *\n+   * @param rawConfiguration raw configuration data\n+   * @return the set of parsed platforms\n+   * @throws InvalidPlatformConfigurationException if there exists a platformConfiguration in the\n+   *     specified platforms list that is missing required fields or has invalid values\n+   */\n+  @VisibleForTesting\n+  static Set<Platform> getPlatformsSet(RawConfiguration rawConfiguration)\n+      throws InvalidPlatformConfigurationException {\n+    Set<Platform> platforms = new LinkedHashSet<>();\n+    for (PlatformConfiguration platformConfiguration : rawConfiguration.getPlatforms()) {\n+\n+      String platformToString =\n+          \"architecture=\"\n+              + platformConfiguration.getArchitectureName().orElse(\"<missing>\")\n+              + \", os=\"\n+              + platformConfiguration.getOsName().orElse(\"<missing>\");\n+\n+      if (!platformConfiguration.getArchitectureName().isPresent()) {\n+        throw new InvalidPlatformConfigurationException(\n+            \"platform configuration is missing an architecture value\",\n+            platformToString,\n+            new IllegalArgumentException());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2"}, "originalPosition": 182}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d2544014313d340beca1e838d762a63bcd0a3c5", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/9d2544014313d340beca1e838d762a63bcd0a3c5", "committedDate": "2020-07-21T17:35:49Z", "message": "Style FIxes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNjc4MzMx", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#pullrequestreview-452678331", "createdAt": "2020-07-21T17:29:19Z", "commit": {"oid": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzoyOToxOVrOG1CdzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzozNDozMFrOG1Cp-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2ODEwOA==", "bodyText": "We can remove Throwable cause from the contructor, as we don't get any exception from another party.\n  InvalidPlatformConfigurationException(String message, String platform, Throwable cause) {\nAnd for consistency, let's rename the exception class to InvalidPlatformException. And when you rename it, you need to update all the Javadocs too.\nAnd because now we are ensure that getArchitectureName() and getOsName() are always present, there is no need to catch NoSuchElementException that will never be thrown. Remove the try-catch block below.", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458268108", "createdAt": "2020-07-21T17:29:19Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -611,6 +628,52 @@ static String getDefaultBaseImage(ProjectProperties projectProperties)\n     throw new IncompatibleBaseImageJavaVersionException(11, javaVersion);\n   }\n \n+  /**\n+   * Parses the list of platforms to a set of {@link Platform}.\n+   *\n+   * @param rawConfiguration raw configuration data\n+   * @return the set of parsed platforms\n+   * @throws InvalidPlatformConfigurationException if there exists a platformConfiguration in the\n+   *     specified platforms list that is missing required fields or has invalid values\n+   */\n+  @VisibleForTesting\n+  static Set<Platform> getPlatformsSet(RawConfiguration rawConfiguration)\n+      throws InvalidPlatformConfigurationException {\n+    Set<Platform> platforms = new LinkedHashSet<>();\n+    for (PlatformConfiguration platformConfiguration : rawConfiguration.getPlatforms()) {\n+\n+      String platformToString =\n+          \"architecture=\"\n+              + platformConfiguration.getArchitectureName().orElse(\"<missing>\")\n+              + \", os=\"\n+              + platformConfiguration.getOsName().orElse(\"<missing>\");\n+\n+      if (!platformConfiguration.getArchitectureName().isPresent()) {\n+        throw new InvalidPlatformConfigurationException(\n+            \"platform configuration is missing an architecture value\",\n+            platformToString,\n+            new IllegalArgumentException());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIxODQxNw=="}, "originalCommit": {"oid": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2ODY0OA==", "bodyText": "nit: os --> OS", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458268648", "createdAt": "2020-07-21T17:30:07Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -611,6 +628,52 @@ static String getDefaultBaseImage(ProjectProperties projectProperties)\n     throw new IncompatibleBaseImageJavaVersionException(11, javaVersion);\n   }\n \n+  /**\n+   * Parses the list of platforms to a set of {@link Platform}.\n+   *\n+   * @param rawConfiguration raw configuration data\n+   * @return the set of parsed platforms\n+   * @throws InvalidPlatformConfigurationException if there exists a platformConfiguration in the\n+   *     specified platforms list that is missing required fields or has invalid values\n+   */\n+  @VisibleForTesting\n+  static Set<Platform> getPlatformsSet(RawConfiguration rawConfiguration)\n+      throws InvalidPlatformConfigurationException {\n+    Set<Platform> platforms = new LinkedHashSet<>();\n+    for (PlatformConfiguration platformConfiguration : rawConfiguration.getPlatforms()) {\n+\n+      String platformToString =\n+          \"architecture=\"\n+              + platformConfiguration.getArchitectureName().orElse(\"<missing>\")\n+              + \", os=\"\n+              + platformConfiguration.getOsName().orElse(\"<missing>\");\n+\n+      if (!platformConfiguration.getArchitectureName().isPresent()) {\n+        throw new InvalidPlatformConfigurationException(\n+            \"platform configuration is missing an architecture value\",\n+            platformToString,\n+            new IllegalArgumentException());\n+      }\n+      if (!platformConfiguration.getOsName().isPresent()) {\n+        throw new InvalidPlatformConfigurationException(\n+            \"platform configuration is missing an os value\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3MTA4NQ==", "bodyText": "message = \"architecture=testArchitecture, os=<missing>\" since we are verifying the return value of ex.getInvalidPlatform().", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458271085", "createdAt": "2020-07-21T17:34:17Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -838,6 +874,58 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n     }\n   }\n \n+  @Test\n+  public void testGetValidPlatformsSet() throws InvalidPlatformConfigurationException {\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(new TestPlatformConfiguration(\"testArchitecture\", \"testOs\")));\n+\n+    Assert.assertEquals(\n+        ImmutableSet.of(new Platform(\"testArchitecture\", \"testOs\")),\n+        PluginConfigurationProcessor.getPlatformsSet(rawConfiguration));\n+  }\n+\n+  @Test\n+  public void testGetPlatformsSet_architectureMissing()\n+      throws InvalidPlatformConfigurationException {\n+    TestPlatformConfiguration platform = new TestPlatformConfiguration(null, \"testOs\");\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(platform));\n+\n+    try {\n+      PluginConfigurationProcessor.getPlatformsSet(rawConfiguration);\n+      Assert.fail();\n+    } catch (InvalidPlatformConfigurationException ex) {\n+      String message =\n+          \"architecture=\"\n+              + platform.getArchitectureName().orElse(\"<missing>\")\n+              + \", os=\"\n+              + platform.getOsName().orElse(\"<missing>\");\n+      Assert.assertEquals(\n+          \"platform configuration is missing an architecture value\", ex.getMessage());\n+      Assert.assertEquals(message, ex.getInvalidPlatform());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetPlatformsSet_osMissing() throws InvalidPlatformConfigurationException {\n+    TestPlatformConfiguration platform = new TestPlatformConfiguration(\"testArchitecture\", null);\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(platform));\n+\n+    try {\n+      PluginConfigurationProcessor.getPlatformsSet(rawConfiguration);\n+      Assert.fail();\n+    } catch (InvalidPlatformConfigurationException ex) {\n+      String message =\n+          \"architecture=\"\n+              + platform.getArchitectureName().orElse(\"<missing>\")\n+              + \", os=\"\n+              + platform.getOsName().orElse(\"<missing>\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2"}, "originalPosition": 298}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3MTIyNQ==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458271225", "createdAt": "2020-07-21T17:34:30Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -838,6 +874,58 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n     }\n   }\n \n+  @Test\n+  public void testGetValidPlatformsSet() throws InvalidPlatformConfigurationException {\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(new TestPlatformConfiguration(\"testArchitecture\", \"testOs\")));\n+\n+    Assert.assertEquals(\n+        ImmutableSet.of(new Platform(\"testArchitecture\", \"testOs\")),\n+        PluginConfigurationProcessor.getPlatformsSet(rawConfiguration));\n+  }\n+\n+  @Test\n+  public void testGetPlatformsSet_architectureMissing()\n+      throws InvalidPlatformConfigurationException {\n+    TestPlatformConfiguration platform = new TestPlatformConfiguration(null, \"testOs\");\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(platform));\n+\n+    try {\n+      PluginConfigurationProcessor.getPlatformsSet(rawConfiguration);\n+      Assert.fail();\n+    } catch (InvalidPlatformConfigurationException ex) {\n+      String message =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2"}, "originalPosition": 273}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "411f03f32cb991b45978d87f0df8a2d3f6b2f234", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/411f03f32cb991b45978d87f0df8a2d3f6b2f234", "committedDate": "2020-07-21T18:20:17Z", "message": "Changed the name of the exception"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNzM3MjI5", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#pullrequestreview-452737229", "createdAt": "2020-07-21T18:48:42Z", "commit": {"oid": "411f03f32cb991b45978d87f0df8a2d3f6b2f234"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo0ODo0MlrOG1FVRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTo1Nzo0MVrOG1LSNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxNTA3OA==", "bodyText": "from.platforms", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458315078", "createdAt": "2020-07-21T18:48:42Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+/**\n+ * Indicates that the {@code container.platforms} config value has at least one invalid platform.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411f03f32cb991b45978d87f0df8a2d3f6b2f234"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxNjA4OQ==", "bodyText": "I'm pretty sure you can remove throws InvalidPlatformException in this method (since you are catching it with try-catch).", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458316089", "createdAt": "2020-07-21T18:50:29Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -838,6 +874,45 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n     }\n   }\n \n+  @Test\n+  public void testGetPlatformsSet() throws InvalidPlatformException {\n+    Mockito.<List<?>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(new TestPlatformConfiguration(\"testArchitecture\", \"testOs\")));\n+\n+    Assert.assertEquals(\n+        ImmutableSet.of(new Platform(\"testArchitecture\", \"testOs\")),\n+        PluginConfigurationProcessor.getPlatformsSet(rawConfiguration));\n+  }\n+\n+  @Test\n+  public void testGetPlatformsSet_architectureMissing() throws InvalidPlatformException {\n+    TestPlatformConfiguration platform = new TestPlatformConfiguration(null, \"testOs\");\n+    Mockito.<List<?>>when(rawConfiguration.getPlatforms()).thenReturn(Arrays.asList(platform));\n+\n+    try {\n+      PluginConfigurationProcessor.getPlatformsSet(rawConfiguration);\n+      Assert.fail();\n+    } catch (InvalidPlatformException ex) {\n+      Assert.assertEquals(\n+          \"platform configuration is missing an architecture value\", ex.getMessage());\n+      Assert.assertEquals(\"architecture=<missing>, os=testOs\", ex.getInvalidPlatform());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetPlatformsSet_osMissing() throws InvalidPlatformException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411f03f32cb991b45978d87f0df8a2d3f6b2f234"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxNjE5Mg==", "bodyText": "I'm pretty sure you can remove throws InvalidPlatformException in this method (since you are catching it with try-catch).", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458316192", "createdAt": "2020-07-21T18:50:39Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -838,6 +874,45 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n     }\n   }\n \n+  @Test\n+  public void testGetPlatformsSet() throws InvalidPlatformException {\n+    Mockito.<List<?>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(new TestPlatformConfiguration(\"testArchitecture\", \"testOs\")));\n+\n+    Assert.assertEquals(\n+        ImmutableSet.of(new Platform(\"testArchitecture\", \"testOs\")),\n+        PluginConfigurationProcessor.getPlatformsSet(rawConfiguration));\n+  }\n+\n+  @Test\n+  public void testGetPlatformsSet_architectureMissing() throws InvalidPlatformException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411f03f32cb991b45978d87f0df8a2d3f6b2f234"}, "originalPosition": 263}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwOTY0NA==", "bodyText": "So, I see we have a difference from other Invalid*Exception in that we are passing a better exception messages when instantiating InvalidPlatformException. But then, we are not making use of the exception message. In this case, I think we can show a more helpful and detailed message to the user by\n\"from.platforms contains a platform configuration that is missing required values or has invalid values: \" + ex.getMessage() + \": \" + ex.getInvalidPlatform()\nNote \"platformConfiguration\" --> \"platform configuration\". The message will be shown to the end user, and platformConfiguration is an internal Java variable name in our code that the user doesn't know about. Similarly, I think \"required values\" is more appropriate for the end user.", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458409644", "createdAt": "2020-07-21T21:51:10Z", "author": {"login": "chanseokoh"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java", "diffHunk": "@@ -127,6 +128,12 @@ public void buildDocker()\n               + ex.getInvalidPathValue(),\n           ex);\n \n+    } catch (InvalidPlatformException ex) {\n+      throw new GradleException(\n+          \"from.platforms contains a platformConfiguration that is missing required fields or has invalid values: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411f03f32cb991b45978d87f0df8a2d3f6b2f234"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwOTgzMg==", "bodyText": "same for Maven", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458409832", "createdAt": "2020-07-21T21:51:35Z", "author": {"login": "chanseokoh"}, "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java", "diffHunk": "@@ -106,7 +107,11 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n           \"<container><workingDirectory> is not an absolute Unix-style path: \"\n               + ex.getInvalidPathValue(),\n           ex);\n-\n+    } catch (InvalidPlatformException ex) {\n+      throw new MojoExecutionException(\n+          \"<from><platforms> contains a platformConfiguration that is missing required fields or has invalid values: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411f03f32cb991b45978d87f0df8a2d3f6b2f234"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxMTA1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (For example, a platform misses a required field or has an invalid value.).\n          \n          \n            \n             * (For example, a platform misses a required field or has an invalid value.)", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458411052", "createdAt": "2020-07-21T21:54:22Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+/**\n+ * Indicates that the {@code container.platforms} config value has at least one invalid platform.\n+ * (For example, a platform misses a required field or has an invalid value.).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411f03f32cb991b45978d87f0df8a2d3f6b2f234"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxMjU5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                TestPlatformConfiguration(String architecture, String os) {\n          \n          \n            \n                private TestPlatformConfiguration(@Nullable String architecture, @Nullable String os) {", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458412599", "createdAt": "2020-07-21T21:57:41Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -104,11 +107,33 @@ private static void assertExtractionPathsUnordered(\n   @Mock private AuthProperty authProperty;\n   @Mock private Consumer<LogEvent> logger;\n \n+  private static class TestPlatformConfiguration implements PlatformConfiguration {\n+    @Nullable private final String os;\n+    @Nullable private final String architecture;\n+\n+    TestPlatformConfiguration(String architecture, String os) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "411f03f32cb991b45978d87f0df8a2d3f6b2f234"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bf674dfdbb6c17128b74c90de2c8956f55d946d", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/3bf674dfdbb6c17128b74c90de2c8956f55d946d", "committedDate": "2020-07-22T14:31:11Z", "message": "Adding clear error messages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMzc5ODc3", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#pullrequestreview-453379877", "createdAt": "2020-07-22T14:35:03Z", "commit": {"oid": "3bf674dfdbb6c17128b74c90de2c8956f55d946d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d23c750cd21762af4977a6c8b34636b47e5d645", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/6d23c750cd21762af4977a6c8b34636b47e5d645", "committedDate": "2020-07-22T16:15:50Z", "message": "empty commit to trigger builds"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 110, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}