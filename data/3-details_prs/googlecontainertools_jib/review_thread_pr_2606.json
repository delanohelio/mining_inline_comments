{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0ODMwMzEw", "number": 2606, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoxODowNFrOERESWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoyODo0MlrOEREmcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzMxNDgwOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoxODowNFrOG1klTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDo1NzoyOVrOG1mayQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNzA4NQ==", "bodyText": "Should we annotate @Nullable on value?\nBTW, Guava checkNotNull returns the input object like the following, although we don't need to follow the same pattern, of course.\nthis.something = Preconditions.checkNotNull(something);", "url": "https://github.com/GoogleContainerTools/jib/pull/2606#discussion_r458827085", "createdAt": "2020-07-22T14:18:04Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.Collection;\n+\n+/**\n+ * Utility helper class to detect errors in parsed yaml values. This class is mostly concerned with\n+ * error message formatting, checking is delegated to guava.\n+ */\n+public class Validator {\n+\n+  /**\n+   * Checks if an object reference is not null.\n+   *\n+   * @param value the object in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   */\n+  public static void checkNotNull(Object value, String propertyName) {\n+    Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6285ec464e8de5756113d636da52ca0260ca6daf"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg1NzE2MQ==", "bodyText": "Yeah I thought about that, it doesn't seem necessary here.", "url": "https://github.com/GoogleContainerTools/jib/pull/2606#discussion_r458857161", "createdAt": "2020-07-22T14:57:29Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.Collection;\n+\n+/**\n+ * Utility helper class to detect errors in parsed yaml values. This class is mostly concerned with\n+ * error message formatting, checking is delegated to guava.\n+ */\n+public class Validator {\n+\n+  /**\n+   * Checks if an object reference is not null.\n+   *\n+   * @param value the object in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   */\n+  public static void checkNotNull(Object value, String propertyName) {\n+    Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNzA4NQ=="}, "originalCommit": {"oid": "6285ec464e8de5756113d636da52ca0260ca6daf"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzMyNDM1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoyMDowM1rOG1krIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoyMDowM1rOG1krIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyODU3OA==", "bodyText": "@Nullable arg?", "url": "https://github.com/GoogleContainerTools/jib/pull/2606#discussion_r458828578", "createdAt": "2020-07-22T14:20:03Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.Collection;\n+\n+/**\n+ * Utility helper class to detect errors in parsed yaml values. This class is mostly concerned with\n+ * error message formatting, checking is delegated to guava.\n+ */\n+public class Validator {\n+\n+  /**\n+   * Checks if an object reference is not null.\n+   *\n+   * @param value the object in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   */\n+  public static void checkNotNull(Object value, String propertyName) {\n+    Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n+  }\n+\n+  /**\n+   * Checks if string is null, empty or only whitespace.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNotEmpty(String value, String propertyName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6285ec464e8de5756113d636da52ca0260ca6daf"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzM0MTAyOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpecTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoyMzozNFrOG1k1aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDo1ODoxMFrOG1mc0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzMTIwOA==", "bodyText": "Interesting. So the mapper catches runtime exceptions and wraps it with JsonProcessingException after attaching the underlying runtime exception message?", "url": "https://github.com/GoogleContainerTools/jib/pull/2606#discussion_r458831208", "createdAt": "2020-07-22T14:23:34Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpecTest.java", "diffHunk": "@@ -46,26 +46,78 @@ public void testArchiveLayerSpec_nameRequired() {\n     String data = \"archive: out/archive\";\n \n     try {\n-      archiveLayerSpecMapper.readValue(data, ArchiveLayerSpec.class);\n+      mapper.readValue(data, ArchiveLayerSpec.class);\n       Assert.fail();\n     } catch (JsonProcessingException jpe) {\n       MatcherAssert.assertThat(\n           jpe.getMessage(), CoreMatchers.startsWith(\"Missing required creator property 'name'\"));\n     }\n   }\n \n+  @Test\n+  public void testArchiveLayerSpec_nameNonNull() {\n+    String data = \"name: null\\n\" + \"archive: out/archive\";\n+\n+    try {\n+      mapper.readValue(data, ArchiveLayerSpec.class);\n+      Assert.fail();\n+    } catch (JsonProcessingException jpe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6285ec464e8de5756113d636da52ca0260ca6daf"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg1NzY4Mw==", "bodyText": "Yes, any exception is always wrapped in JsonProcessingException.", "url": "https://github.com/GoogleContainerTools/jib/pull/2606#discussion_r458857683", "createdAt": "2020-07-22T14:58:10Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpecTest.java", "diffHunk": "@@ -46,26 +46,78 @@ public void testArchiveLayerSpec_nameRequired() {\n     String data = \"archive: out/archive\";\n \n     try {\n-      archiveLayerSpecMapper.readValue(data, ArchiveLayerSpec.class);\n+      mapper.readValue(data, ArchiveLayerSpec.class);\n       Assert.fail();\n     } catch (JsonProcessingException jpe) {\n       MatcherAssert.assertThat(\n           jpe.getMessage(), CoreMatchers.startsWith(\"Missing required creator property 'name'\"));\n     }\n   }\n \n+  @Test\n+  public void testArchiveLayerSpec_nameNonNull() {\n+    String data = \"name: null\\n\" + \"archive: out/archive\";\n+\n+    try {\n+      mapper.readValue(data, ArchiveLayerSpec.class);\n+      Assert.fail();\n+    } catch (JsonProcessingException jpe) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzMTIwOA=="}, "originalCommit": {"oid": "6285ec464e8de5756113d636da52ca0260ca6daf"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzM1NzAwOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoyNjo0MVrOG1k_IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoyNjo0MVrOG1k_IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzMzY5Ng==", "bodyText": "@Nullable arg?", "url": "https://github.com/GoogleContainerTools/jib/pull/2606#discussion_r458833696", "createdAt": "2020-07-22T14:26:41Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.Collection;\n+\n+/**\n+ * Utility helper class to detect errors in parsed yaml values. This class is mostly concerned with\n+ * error message formatting, checking is delegated to guava.\n+ */\n+public class Validator {\n+\n+  /**\n+   * Checks if an object reference is not null.\n+   *\n+   * @param value the object in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   */\n+  public static void checkNotNull(Object value, String propertyName) {\n+    Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n+  }\n+\n+  /**\n+   * Checks if string is null, empty or only whitespace.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNotEmpty(String value, String propertyName) {\n+    checkNotNull(value, propertyName);\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is null or empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   * @throws IllegalArgumentException if {@code value} is empty\n+   */\n+  public static void checkNotEmpty(Collection<?> value, String propertyName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6285ec464e8de5756113d636da52ca0260ca6daf"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzM2NjI2OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoyODo0MlrOG1lE0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoyODo0MlrOG1lE0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzNTE1NQ==", "bodyText": "value.equals(expectedValue) for extra safety since we can't prevent the caller from passing null to expectedValue?", "url": "https://github.com/GoogleContainerTools/jib/pull/2606#discussion_r458835155", "createdAt": "2020-07-22T14:28:42Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.Collection;\n+\n+/**\n+ * Utility helper class to detect errors in parsed yaml values. This class is mostly concerned with\n+ * error message formatting, checking is delegated to guava.\n+ */\n+public class Validator {\n+\n+  /**\n+   * Checks if an object reference is not null.\n+   *\n+   * @param value the object in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   */\n+  public static void checkNotNull(Object value, String propertyName) {\n+    Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n+  }\n+\n+  /**\n+   * Checks if string is null, empty or only whitespace.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNotEmpty(String value, String propertyName) {\n+    checkNotNull(value, propertyName);\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is null or empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   * @throws IllegalArgumentException if {@code value} is empty\n+   */\n+  public static void checkNotEmpty(Collection<?> value, String propertyName) {\n+    checkNotNull(value, propertyName);\n+    Preconditions.checkArgument(\n+        !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n+  }\n+\n+  /**\n+   * Checks if string is what is expected.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @param expectedValue the value we expect {@code value} to be\n+   * @throws NullPointerException if {@code value} is null\n+   * @throws IllegalArgumentException if {@code value} is not equal to {@code expectedValue}\n+   */\n+  public static void checkEquals(String value, String propertyName, String expectedValue) {\n+    checkNotNull(value, propertyName);\n+    Preconditions.checkArgument(\n+        expectedValue.equals(value),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6285ec464e8de5756113d636da52ca0260ca6daf"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 283, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}