{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMDkzNTk5", "number": 2338, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxODo0MDoyOFrODqLgNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxODo0MDoyOFrODqLgNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTU1MjU0OnYy", "diffSide": "RIGHT", "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxODo0MDoyOFrOF5xqjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNToyMjo1MFrOF6KeNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEyNjg2MA==", "bodyText": "Not sure I like the name LayerObject, but that's a different discussion.", "url": "https://github.com/GoogleContainerTools/jib/pull/2338#discussion_r396126860", "createdAt": "2020-03-22T18:40:28Z", "author": {"login": "loosebazooka"}, "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -0,0 +1,495 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.api.buildplan;\n+\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Describes a plan to build a container. */\n+@Immutable\n+public class ContainerBuildPlan {\n+\n+  /** Builder for {@link ContainerBuildPlan}. */\n+  public static class Builder {\n+\n+    private String baseImage = \"scratch\";\n+    private String architectureHint = \"amd64\";\n+    private String osHint = \"linux\";\n+    private Instant creationTime = Instant.EPOCH;\n+    private ImageFormat format = ImageFormat.Docker;\n+\n+    // image execution parameters\n+    private Map<String, String> environment = new HashMap<>();\n+    private Map<String, String> labels = new HashMap<>();\n+    private Set<AbsoluteUnixPath> volumes = new HashSet<>();\n+    private Set<Port> exposedPorts = new HashSet<>();\n+    @Nullable private String user;\n+    @Nullable private AbsoluteUnixPath workingDirectory;\n+    @Nullable private List<String> entrypoint;\n+    @Nullable private List<String> cmd;\n+\n+    private List<LayerObject> layers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d0c4c3e82b9ce6eb86b96c31c28a1b967ccdd1"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyOTAxMw==", "bodyText": "I don't like it either. We already have a non-public Layer interface in jib-core, so I just wanted to avoid name clash.", "url": "https://github.com/GoogleContainerTools/jib/pull/2338#discussion_r396429013", "createdAt": "2020-03-23T12:55:38Z", "author": {"login": "chanseokoh"}, "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -0,0 +1,495 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.api.buildplan;\n+\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Describes a plan to build a container. */\n+@Immutable\n+public class ContainerBuildPlan {\n+\n+  /** Builder for {@link ContainerBuildPlan}. */\n+  public static class Builder {\n+\n+    private String baseImage = \"scratch\";\n+    private String architectureHint = \"amd64\";\n+    private String osHint = \"linux\";\n+    private Instant creationTime = Instant.EPOCH;\n+    private ImageFormat format = ImageFormat.Docker;\n+\n+    // image execution parameters\n+    private Map<String, String> environment = new HashMap<>();\n+    private Map<String, String> labels = new HashMap<>();\n+    private Set<AbsoluteUnixPath> volumes = new HashSet<>();\n+    private Set<Port> exposedPorts = new HashSet<>();\n+    @Nullable private String user;\n+    @Nullable private AbsoluteUnixPath workingDirectory;\n+    @Nullable private List<String> entrypoint;\n+    @Nullable private List<String> cmd;\n+\n+    private List<LayerObject> layers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEyNjg2MA=="}, "originalCommit": {"oid": "f9d0c4c3e82b9ce6eb86b96c31c28a1b967ccdd1"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzMzMwMA==", "bodyText": "Okay, well this shouldn't prevent this PR from going in.", "url": "https://github.com/GoogleContainerTools/jib/pull/2338#discussion_r396533300", "createdAt": "2020-03-23T15:22:50Z", "author": {"login": "loosebazooka"}, "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -0,0 +1,495 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.api.buildplan;\n+\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** Describes a plan to build a container. */\n+@Immutable\n+public class ContainerBuildPlan {\n+\n+  /** Builder for {@link ContainerBuildPlan}. */\n+  public static class Builder {\n+\n+    private String baseImage = \"scratch\";\n+    private String architectureHint = \"amd64\";\n+    private String osHint = \"linux\";\n+    private Instant creationTime = Instant.EPOCH;\n+    private ImageFormat format = ImageFormat.Docker;\n+\n+    // image execution parameters\n+    private Map<String, String> environment = new HashMap<>();\n+    private Map<String, String> labels = new HashMap<>();\n+    private Set<AbsoluteUnixPath> volumes = new HashSet<>();\n+    private Set<Port> exposedPorts = new HashSet<>();\n+    @Nullable private String user;\n+    @Nullable private AbsoluteUnixPath workingDirectory;\n+    @Nullable private List<String> entrypoint;\n+    @Nullable private List<String> cmd;\n+\n+    private List<LayerObject> layers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEyNjg2MA=="}, "originalCommit": {"oid": "f9d0c4c3e82b9ce6eb86b96c31c28a1b967ccdd1"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 302, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}