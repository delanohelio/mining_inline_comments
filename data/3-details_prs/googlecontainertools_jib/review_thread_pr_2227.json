{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNzY4OTEw", "number": 2227, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjoyNjoyM1rODX6KkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNDoyNDozNFrODY1RWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mzk2ODE3OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ImageMetadataOutput.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjoyNjoyM1rOFddqqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1ODoyOVrOFeT2Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzOTA4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   \"image\":\"gcr.io/project/image:tag\",\n          \n          \n            \n             *   \"image\": \"gcr.io/project/image:tag\",", "url": "https://github.com/GoogleContainerTools/jib/pull/2227#discussion_r366439083", "createdAt": "2020-01-14T16:26:23Z", "author": {"login": "briandealwis"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ImageMetadataOutput.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.cloud.tools.jib.api.JibContainer;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+\n+/**\n+ * Builds a JSON string containing metadata about a {@link JibContainer} from a build.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * {\n+ *   \"image\":\"gcr.io/project/image:tag\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bf7aed414fd233aac081f369bab4a3513c2b286"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNjc5NQ==", "bodyText": "Fixed", "url": "https://github.com/GoogleContainerTools/jib/pull/2227#discussion_r367326795", "createdAt": "2020-01-16T09:58:29Z", "author": {"login": "mbruggmann"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ImageMetadataOutput.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.cloud.tools.jib.api.JibContainer;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+\n+/**\n+ * Builds a JSON string containing metadata about a {@link JibContainer} from a build.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * {\n+ *   \"image\":\"gcr.io/project/image:tag\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzOTA4Mw=="}, "originalCommit": {"oid": "5bf7aed414fd233aac081f369bab4a3513c2b286"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDMyNzAxOnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/JibBuildRunnerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODoxODoyMFrOFdhKHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDowMjo0NFrOFeT-dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5NjI4NA==", "bodyText": "I think it would be better to compare this output explicitly as a string to ensure we're producing expected output.  (For example, to detect a situation where we change JSON libraries that produces slightly-invalid JSON.)", "url": "https://github.com/GoogleContainerTools/jib/pull/2227#discussion_r366496284", "createdAt": "2020-01-14T18:18:20Z", "author": {"login": "briandealwis"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/JibBuildRunnerTest.java", "diffHunk": "@@ -215,4 +222,27 @@ public void testBuildImage_other()\n       Assert.assertEquals(TEST_HELPFUL_SUGGESTIONS.none(), ex.getMessage());\n     }\n   }\n+\n+  @Test\n+  public void testBuildImage_writesImageJson() throws Exception {\n+    final ImageReference targetImageReference = ImageReference.parse(\"gcr.io/distroless/java:11\");\n+    final String imageId =\n+        \"sha256:61bb3ec31a47cb730eb58a38bbfa813761a51dca69d10e39c24c3d00a7b2c7a9\";\n+    final String digest = \"sha256:3f1be7e19129edb202c071a659a4db35280ab2bb1a16f223bfd5d1948657b6fc\";\n+\n+    final Path outputPath = temporaryFolder.newFile(\"jib-image.json\").toPath();\n+\n+    Mockito.when(mockJibContainer.getTargetImage()).thenReturn(targetImageReference);\n+    Mockito.when(mockJibContainer.getImageId()).thenReturn(DescriptorDigest.fromDigest(imageId));\n+    Mockito.when(mockJibContainer.getDigest()).thenReturn(DescriptorDigest.fromDigest(digest));\n+    Mockito.when(mockJibContainerBuilder.containerize(mockContainerizer))\n+        .thenReturn(mockJibContainer);\n+    testJibBuildRunner.writeImageJson(outputPath).runBuild();\n+\n+    final String outputJson = new String(Files.readAllBytes(outputPath), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bf7aed414fd233aac081f369bab4a3513c2b286"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyODg4Ng==", "bodyText": "Had a look at this. Beyond putting the full expected json into a string in the testcase (which seems highly specific) I didn't find a good way of doing that.\nAs of now, the next line of ImageMetadataOutput.fromJson(outputJson) will at least make sure it properly parses into the expected type so it should catch any invalid JSON, serialization/deserialization differences and similar.", "url": "https://github.com/GoogleContainerTools/jib/pull/2227#discussion_r367328886", "createdAt": "2020-01-16T10:02:44Z", "author": {"login": "mbruggmann"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/JibBuildRunnerTest.java", "diffHunk": "@@ -215,4 +222,27 @@ public void testBuildImage_other()\n       Assert.assertEquals(TEST_HELPFUL_SUGGESTIONS.none(), ex.getMessage());\n     }\n   }\n+\n+  @Test\n+  public void testBuildImage_writesImageJson() throws Exception {\n+    final ImageReference targetImageReference = ImageReference.parse(\"gcr.io/distroless/java:11\");\n+    final String imageId =\n+        \"sha256:61bb3ec31a47cb730eb58a38bbfa813761a51dca69d10e39c24c3d00a7b2c7a9\";\n+    final String digest = \"sha256:3f1be7e19129edb202c071a659a4db35280ab2bb1a16f223bfd5d1948657b6fc\";\n+\n+    final Path outputPath = temporaryFolder.newFile(\"jib-image.json\").toPath();\n+\n+    Mockito.when(mockJibContainer.getTargetImage()).thenReturn(targetImageReference);\n+    Mockito.when(mockJibContainer.getImageId()).thenReturn(DescriptorDigest.fromDigest(imageId));\n+    Mockito.when(mockJibContainer.getDigest()).thenReturn(DescriptorDigest.fromDigest(digest));\n+    Mockito.when(mockJibContainerBuilder.containerize(mockContainerizer))\n+        .thenReturn(mockJibContainer);\n+    testJibBuildRunner.writeImageJson(outputPath).runBuild();\n+\n+    final String outputJson = new String(Files.readAllBytes(outputPath), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5NjI4NA=="}, "originalCommit": {"oid": "5bf7aed414fd233aac081f369bab4a3513c2b286"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzYzNTg0OnYy", "diffSide": "RIGHT", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/api/JibContainerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNDoxOToxNVrOFe6Vsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNDoxOToxNVrOFe6Vsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1NzQyNw==", "bodyText": "Thanks for improving the tests \ud83e\udd47", "url": "https://github.com/GoogleContainerTools/jib/pull/2227#discussion_r367957427", "createdAt": "2020-01-17T14:19:15Z", "author": {"login": "briandealwis"}, "path": "jib-core/src/test/java/com/google/cloud/tools/jib/api/JibContainerTest.java", "diffHunk": "@@ -44,34 +47,62 @@ public void setUp() throws DigestException, InvalidImageReferenceException {\n     digest2 =\n         DescriptorDigest.fromDigest(\n             \"sha256:9876543210fedcba9876543210fedcba9876543210fedcba9876543210fedcba\");\n-    digest3 =\n-        DescriptorDigest.fromDigest(\n-            \"sha256:fedcba9876543210fedcba9876543210fedcba9876543210fedcba9876543210\");\n+    tags1 = ImmutableSet.of(\"latest\", \"custom-tag\");\n+    tags2 = ImmutableSet.of(\"latest\");\n   }\n \n   @Test\n   public void testCreation() {\n-    JibContainer container = new JibContainer(targetImage1, digest1, digest2);\n+    JibContainer container = new JibContainer(targetImage1, digest1, digest2, tags1);\n \n     Assert.assertEquals(targetImage1, container.getTargetImage());\n     Assert.assertEquals(digest1, container.getDigest());\n     Assert.assertEquals(digest2, container.getImageId());\n+    Assert.assertEquals(tags1, container.getTags());\n   }\n \n   @Test\n   public void testEquality() {\n-    JibContainer container1 = new JibContainer(targetImage1, digest1, digest2);\n-    JibContainer container2 = new JibContainer(targetImage1, digest1, digest2);\n-    JibContainer container3 = new JibContainer(targetImage1, digest2, digest3);\n-    JibContainer container4 = new JibContainer(targetImage2, digest2, digest3);\n+    JibContainer container1 = new JibContainer(targetImage1, digest1, digest2, tags1);\n+    JibContainer container2 = new JibContainer(targetImage1, digest1, digest2, tags1);\n \n     Assert.assertEquals(container1, container2);\n     Assert.assertEquals(container1.hashCode(), container2.hashCode());\n+  }\n+\n+  @Test\n+  public void testEquality_differentTargetImage() {\n+    JibContainer container1 = new JibContainer(targetImage1, digest1, digest2, tags1);\n+    JibContainer container2 = new JibContainer(targetImage2, digest1, digest2, tags1);\n+\n+    Assert.assertNotEquals(container1, container2);\n+    Assert.assertNotEquals(container1.hashCode(), container2.hashCode());\n+  }\n+\n+  @Test\n+  public void testEquality_differentImageDigest() {\n+    JibContainer container1 = new JibContainer(targetImage1, digest1, digest2, tags1);\n+    JibContainer container2 = new JibContainer(targetImage1, digest2, digest2, tags1);\n \n-    Assert.assertNotEquals(container1, container3);\n-    Assert.assertNotEquals(container1.hashCode(), container3.hashCode());\n+    Assert.assertNotEquals(container1, container2);\n+    Assert.assertNotEquals(container1.hashCode(), container2.hashCode());\n+  }\n+\n+  @Test\n+  public void testEquality_differentImageId() {\n+    JibContainer container1 = new JibContainer(targetImage1, digest1, digest1, tags1);\n+    JibContainer container2 = new JibContainer(targetImage1, digest1, digest2, tags1);\n+\n+    Assert.assertNotEquals(container1, container2);\n+    Assert.assertNotEquals(container1.hashCode(), container2.hashCode());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caeb2fe20ebab0cff2bf821e8532e83dabe01ec5"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzY1MjEwOnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ImageMetadataOutput.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNDoyNDozNFrOFe6gEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxODowNDo1MVrOFfLluQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MDA4Mw==", "bodyText": "I think Guava's ImmutableList.sortedCopyOf() is a little more compact, and immutable?", "url": "https://github.com/GoogleContainerTools/jib/pull/2227#discussion_r367960083", "createdAt": "2020-01-17T14:24:34Z", "author": {"login": "briandealwis"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ImageMetadataOutput.java", "diffHunk": "@@ -62,7 +68,11 @@ public static ImageMetadataOutput fromJibContainer(JibContainer jibContainer) {\n     String image = jibContainer.getTargetImage().toString();\n     String imageId = jibContainer.getImageId().toString();\n     String imageDigest = jibContainer.getDigest().toString();\n-    return new ImageMetadataOutput(image, imageId, imageDigest);\n+\n+    // Make sure tags always appear in a predictable way, by sorting them into a list\n+    List<String> tags = jibContainer.getTags().stream().sorted().collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caeb2fe20ebab0cff2bf821e8532e83dabe01ec5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0MDA1Nw==", "bodyText": "Good idea, updated!", "url": "https://github.com/GoogleContainerTools/jib/pull/2227#discussion_r368240057", "createdAt": "2020-01-18T18:04:51Z", "author": {"login": "mbruggmann"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ImageMetadataOutput.java", "diffHunk": "@@ -62,7 +68,11 @@ public static ImageMetadataOutput fromJibContainer(JibContainer jibContainer) {\n     String image = jibContainer.getTargetImage().toString();\n     String imageId = jibContainer.getImageId().toString();\n     String imageDigest = jibContainer.getDigest().toString();\n-    return new ImageMetadataOutput(image, imageId, imageDigest);\n+\n+    // Make sure tags always appear in a predictable way, by sorting them into a list\n+    List<String> tags = jibContainer.getTags().stream().sorted().collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MDA4Mw=="}, "originalCommit": {"oid": "caeb2fe20ebab0cff2bf821e8532e83dabe01ec5"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 441, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}