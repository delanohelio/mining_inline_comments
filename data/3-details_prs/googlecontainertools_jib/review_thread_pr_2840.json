{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MTMyNTg5", "number": 2840, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzoxOTo1N1rOEva3bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjozMTowNVrOEvhzaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTU4NzAwOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzoxOTo1OFrOHkZFTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMzoxNjozMlrOHkk7_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyMTc0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Rule public MockitoRule rule = MockitoJUnit.rule();\n          \n          \n            \n            \n          \n          \n            \n              @Mock ConsoleLogger consoleLogger;\n          \n          \n            \n              @Mock JibCli jibCli;\n          \n          \n            \n              @Rule public final MockitoRule rule = MockitoJUnit.rule();\n          \n          \n            \n            \n          \n          \n            \n              @Mock private ConsoleLogger consoleLogger;\n          \n          \n            \n              @Mock private JibCli jibCli;", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r507921743", "createdAt": "2020-10-19T17:19:58Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java", "diffHunk": "@@ -38,13 +40,27 @@\n import org.hamcrest.CoreMatchers;\n import org.hamcrest.MatcherAssert;\n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n \n public class BuildFilesTest {\n \n   @Rule public final TemporaryFolder tmp = new TemporaryFolder();\n+  @Rule public MockitoRule rule = MockitoJUnit.rule();\n+\n+  @Mock ConsoleLogger consoleLogger;\n+  @Mock JibCli jibCli;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d1ba178731fd8eb3b8089e68721c4bd7a2e056"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExNTk2NQ==", "bodyText": "oof, sorry, it strikes again", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508115965", "createdAt": "2020-10-19T23:16:32Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java", "diffHunk": "@@ -38,13 +40,27 @@\n import org.hamcrest.CoreMatchers;\n import org.hamcrest.MatcherAssert;\n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n \n public class BuildFilesTest {\n \n   @Rule public final TemporaryFolder tmp = new TemporaryFolder();\n+  @Rule public MockitoRule rule = MockitoJUnit.rule();\n+\n+  @Mock ConsoleLogger consoleLogger;\n+  @Mock JibCli jibCli;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyMTc0Mw=="}, "originalCommit": {"oid": "32d1ba178731fd8eb3b8089e68721c4bd7a2e056"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjUyNTczOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyMjowNFrOHkiJKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyODoxNVrOHkiUmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MDE4Nw==", "bodyText": "Is it required for platform spec to be fully specified?", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508070187", "createdAt": "2020-10-19T21:22:04Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -98,4 +103,42 @@ public static JibContainerBuilder toJibContainerBuilder(\n     }\n     return containerBuilder;\n   }\n+\n+  @VisibleForTesting\n+  // TODO: add testing, need to do via intergration tests as there's no good way to extract out that\n+  //   the base image was populated as the user intended currently.\n+  static JibContainerBuilder createJibContainerBuilder(\n+      BaseImageSpec from, JibCli buildOptions, ConsoleLogger logger)\n+      throws InvalidImageReferenceException, FileNotFoundException {\n+    String baseImageReference = from.getImage();\n+    if (baseImageReference.startsWith(DOCKER_DAEMON_IMAGE_PREFIX)) {\n+      return Jib.from(\n+          DockerDaemonImage.named(baseImageReference.replaceFirst(DOCKER_DAEMON_IMAGE_PREFIX, \"\")));\n+    }\n+    if (baseImageReference.startsWith(TAR_IMAGE_PREFIX)) {\n+      return Jib.from(\n+          TarImage.at(Paths.get(baseImageReference.replaceFirst(TAR_IMAGE_PREFIX, \"\"))));\n+    }\n+    ImageReference imageReference =\n+        ImageReference.parse(baseImageReference.replaceFirst(REGISTRY_IMAGE_PREFIX, \"\"));\n+    RegistryImage registryImage = RegistryImage.named(imageReference);\n+    DefaultCredentialRetrievers defaultCredentialRetrievers =\n+        DefaultCredentialRetrievers.init(\n+            CredentialRetrieverFactory.forImage(\n+                imageReference,\n+                logEvent -> logger.log(logEvent.getLevel(), logEvent.getMessage())));\n+    Credentials.getFromCredentialRetrievers(buildOptions, defaultCredentialRetrievers)\n+        .forEach(registryImage::addCredentialRetriever);\n+    JibContainerBuilder containerBuilder = Jib.from(registryImage);\n+    if (!from.getPlatforms().isEmpty()) {\n+      containerBuilder.setPlatforms(\n+          from.getPlatforms()\n+              .stream()\n+              .map(\n+                  platformSpec ->\n+                      new Platform(platformSpec.getArchitecture(), platformSpec.getOs()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a9c75f62126b3f081a2bef0be0b54a127d670eb"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MzExNA==", "bodyText": "Oh looks like it is.", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508073114", "createdAt": "2020-10-19T21:28:15Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -98,4 +103,42 @@ public static JibContainerBuilder toJibContainerBuilder(\n     }\n     return containerBuilder;\n   }\n+\n+  @VisibleForTesting\n+  // TODO: add testing, need to do via intergration tests as there's no good way to extract out that\n+  //   the base image was populated as the user intended currently.\n+  static JibContainerBuilder createJibContainerBuilder(\n+      BaseImageSpec from, JibCli buildOptions, ConsoleLogger logger)\n+      throws InvalidImageReferenceException, FileNotFoundException {\n+    String baseImageReference = from.getImage();\n+    if (baseImageReference.startsWith(DOCKER_DAEMON_IMAGE_PREFIX)) {\n+      return Jib.from(\n+          DockerDaemonImage.named(baseImageReference.replaceFirst(DOCKER_DAEMON_IMAGE_PREFIX, \"\")));\n+    }\n+    if (baseImageReference.startsWith(TAR_IMAGE_PREFIX)) {\n+      return Jib.from(\n+          TarImage.at(Paths.get(baseImageReference.replaceFirst(TAR_IMAGE_PREFIX, \"\"))));\n+    }\n+    ImageReference imageReference =\n+        ImageReference.parse(baseImageReference.replaceFirst(REGISTRY_IMAGE_PREFIX, \"\"));\n+    RegistryImage registryImage = RegistryImage.named(imageReference);\n+    DefaultCredentialRetrievers defaultCredentialRetrievers =\n+        DefaultCredentialRetrievers.init(\n+            CredentialRetrieverFactory.forImage(\n+                imageReference,\n+                logEvent -> logger.log(logEvent.getLevel(), logEvent.getMessage())));\n+    Credentials.getFromCredentialRetrievers(buildOptions, defaultCredentialRetrievers)\n+        .forEach(registryImage::addCredentialRetriever);\n+    JibContainerBuilder containerBuilder = Jib.from(registryImage);\n+    if (!from.getPlatforms().isEmpty()) {\n+      containerBuilder.setPlatforms(\n+          from.getPlatforms()\n+              .stream()\n+              .map(\n+                  platformSpec ->\n+                      new Platform(platformSpec.getArchitecture(), platformSpec.getOs()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MDE4Nw=="}, "originalCommit": {"oid": "6a9c75f62126b3f081a2bef0be0b54a127d670eb"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjU2NzU0OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTozNToyOVrOHkiiRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMDo0MjozN1rOHkmgwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3NjYxNQ==", "bodyText": "maybe we can add a small e.g  at the end to make this more clear?", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508076615", "createdAt": "2020-10-19T21:35:29Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -53,33 +69,22 @@ private static BuildFileSpec toBuildFileSpec(\n    *\n    * @param projectRoot the root context directory of this build\n    * @param buildFilePath a file containing the build definition\n-   * @param templateParameters a map of templating variables to apply on the file before parsing\n+   * @param buildOptions the build configuration from the command line", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a9c75f62126b3f081a2bef0be0b54a127d670eb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExNjIyMQ==", "bodyText": "I could add en example, but not sure what you're for an example of?", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508116221", "createdAt": "2020-10-19T23:17:21Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -53,33 +69,22 @@ private static BuildFileSpec toBuildFileSpec(\n    *\n    * @param projectRoot the root context directory of this build\n    * @param buildFilePath a file containing the build definition\n-   * @param templateParameters a map of templating variables to apply on the file before parsing\n+   * @param buildOptions the build configuration from the command line", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3NjYxNQ=="}, "originalCommit": {"oid": "6a9c75f62126b3f081a2bef0be0b54a127d670eb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MTc2MA==", "bodyText": "Oops I totally missed that buildOptions was of type JibCli.  Adding an example is probably not useful here. Should the name be a more general, like cliOptions, if JibCli also includes things like verbosity and console?", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508141760", "createdAt": "2020-10-20T00:42:37Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -53,33 +69,22 @@ private static BuildFileSpec toBuildFileSpec(\n    *\n    * @param projectRoot the root context directory of this build\n    * @param buildFilePath a file containing the build definition\n-   * @param templateParameters a map of templating variables to apply on the file before parsing\n+   * @param buildOptions the build configuration from the command line", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3NjYxNQ=="}, "originalCommit": {"oid": "6a9c75f62126b3f081a2bef0be0b54a127d670eb"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjU5NTU0OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTo0NTowNFrOHkiy6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMTozNTowN1rOHknZEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MDg3Mg==", "bodyText": "The iteration order is actually important. Internally we used LinkedHashSet everywhere to preserve the order while conveniently removing duplicates (also signifying that duplicates can't exist). However, I see that it can easily make the Jib API user to mess up with the order. Maybe accepting a Set wasn't a good idea.\nAnyways, the question is, would Collectors.toSet() preserve the insertion order?", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508080872", "createdAt": "2020-10-19T21:45:04Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -98,4 +103,42 @@ public static JibContainerBuilder toJibContainerBuilder(\n     }\n     return containerBuilder;\n   }\n+\n+  @VisibleForTesting\n+  // TODO: add testing, need to do via intergration tests as there's no good way to extract out that\n+  //   the base image was populated as the user intended currently.\n+  static JibContainerBuilder createJibContainerBuilder(\n+      BaseImageSpec from, JibCli buildOptions, ConsoleLogger logger)\n+      throws InvalidImageReferenceException, FileNotFoundException {\n+    String baseImageReference = from.getImage();\n+    if (baseImageReference.startsWith(DOCKER_DAEMON_IMAGE_PREFIX)) {\n+      return Jib.from(\n+          DockerDaemonImage.named(baseImageReference.replaceFirst(DOCKER_DAEMON_IMAGE_PREFIX, \"\")));\n+    }\n+    if (baseImageReference.startsWith(TAR_IMAGE_PREFIX)) {\n+      return Jib.from(\n+          TarImage.at(Paths.get(baseImageReference.replaceFirst(TAR_IMAGE_PREFIX, \"\"))));\n+    }\n+    ImageReference imageReference =\n+        ImageReference.parse(baseImageReference.replaceFirst(REGISTRY_IMAGE_PREFIX, \"\"));\n+    RegistryImage registryImage = RegistryImage.named(imageReference);\n+    DefaultCredentialRetrievers defaultCredentialRetrievers =\n+        DefaultCredentialRetrievers.init(\n+            CredentialRetrieverFactory.forImage(\n+                imageReference,\n+                logEvent -> logger.log(logEvent.getLevel(), logEvent.getMessage())));\n+    Credentials.getFromCredentialRetrievers(buildOptions, defaultCredentialRetrievers)\n+        .forEach(registryImage::addCredentialRetriever);\n+    JibContainerBuilder containerBuilder = Jib.from(registryImage);\n+    if (!from.getPlatforms().isEmpty()) {\n+      containerBuilder.setPlatforms(\n+          from.getPlatforms()\n+              .stream()\n+              .map(\n+                  platformSpec ->\n+                      new Platform(platformSpec.getArchitecture(), platformSpec.getOs()))\n+              .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a9c75f62126b3f081a2bef0be0b54a127d670eb"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExNDk2OA==", "bodyText": "no but I think I can do: Collectors.toCollection(LinkedHashSet::new)", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508114968", "createdAt": "2020-10-19T23:13:17Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -98,4 +103,42 @@ public static JibContainerBuilder toJibContainerBuilder(\n     }\n     return containerBuilder;\n   }\n+\n+  @VisibleForTesting\n+  // TODO: add testing, need to do via intergration tests as there's no good way to extract out that\n+  //   the base image was populated as the user intended currently.\n+  static JibContainerBuilder createJibContainerBuilder(\n+      BaseImageSpec from, JibCli buildOptions, ConsoleLogger logger)\n+      throws InvalidImageReferenceException, FileNotFoundException {\n+    String baseImageReference = from.getImage();\n+    if (baseImageReference.startsWith(DOCKER_DAEMON_IMAGE_PREFIX)) {\n+      return Jib.from(\n+          DockerDaemonImage.named(baseImageReference.replaceFirst(DOCKER_DAEMON_IMAGE_PREFIX, \"\")));\n+    }\n+    if (baseImageReference.startsWith(TAR_IMAGE_PREFIX)) {\n+      return Jib.from(\n+          TarImage.at(Paths.get(baseImageReference.replaceFirst(TAR_IMAGE_PREFIX, \"\"))));\n+    }\n+    ImageReference imageReference =\n+        ImageReference.parse(baseImageReference.replaceFirst(REGISTRY_IMAGE_PREFIX, \"\"));\n+    RegistryImage registryImage = RegistryImage.named(imageReference);\n+    DefaultCredentialRetrievers defaultCredentialRetrievers =\n+        DefaultCredentialRetrievers.init(\n+            CredentialRetrieverFactory.forImage(\n+                imageReference,\n+                logEvent -> logger.log(logEvent.getLevel(), logEvent.getMessage())));\n+    Credentials.getFromCredentialRetrievers(buildOptions, defaultCredentialRetrievers)\n+        .forEach(registryImage::addCredentialRetriever);\n+    JibContainerBuilder containerBuilder = Jib.from(registryImage);\n+    if (!from.getPlatforms().isEmpty()) {\n+      containerBuilder.setPlatforms(\n+          from.getPlatforms()\n+              .stream()\n+              .map(\n+                  platformSpec ->\n+                      new Platform(platformSpec.getArchitecture(), platformSpec.getOs()))\n+              .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MDg3Mg=="}, "originalCommit": {"oid": "6a9c75f62126b3f081a2bef0be0b54a127d670eb"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExNTc2MQ==", "bodyText": "Why does the order matter? for selecting defaults?", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508115761", "createdAt": "2020-10-19T23:15:51Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -98,4 +103,42 @@ public static JibContainerBuilder toJibContainerBuilder(\n     }\n     return containerBuilder;\n   }\n+\n+  @VisibleForTesting\n+  // TODO: add testing, need to do via intergration tests as there's no good way to extract out that\n+  //   the base image was populated as the user intended currently.\n+  static JibContainerBuilder createJibContainerBuilder(\n+      BaseImageSpec from, JibCli buildOptions, ConsoleLogger logger)\n+      throws InvalidImageReferenceException, FileNotFoundException {\n+    String baseImageReference = from.getImage();\n+    if (baseImageReference.startsWith(DOCKER_DAEMON_IMAGE_PREFIX)) {\n+      return Jib.from(\n+          DockerDaemonImage.named(baseImageReference.replaceFirst(DOCKER_DAEMON_IMAGE_PREFIX, \"\")));\n+    }\n+    if (baseImageReference.startsWith(TAR_IMAGE_PREFIX)) {\n+      return Jib.from(\n+          TarImage.at(Paths.get(baseImageReference.replaceFirst(TAR_IMAGE_PREFIX, \"\"))));\n+    }\n+    ImageReference imageReference =\n+        ImageReference.parse(baseImageReference.replaceFirst(REGISTRY_IMAGE_PREFIX, \"\"));\n+    RegistryImage registryImage = RegistryImage.named(imageReference);\n+    DefaultCredentialRetrievers defaultCredentialRetrievers =\n+        DefaultCredentialRetrievers.init(\n+            CredentialRetrieverFactory.forImage(\n+                imageReference,\n+                logEvent -> logger.log(logEvent.getLevel(), logEvent.getMessage())));\n+    Credentials.getFromCredentialRetrievers(buildOptions, defaultCredentialRetrievers)\n+        .forEach(registryImage::addCredentialRetriever);\n+    JibContainerBuilder containerBuilder = Jib.from(registryImage);\n+    if (!from.getPlatforms().isEmpty()) {\n+      containerBuilder.setPlatforms(\n+          from.getPlatforms()\n+              .stream()\n+              .map(\n+                  platformSpec ->\n+                      new Platform(platformSpec.getArchitecture(), platformSpec.getOs()))\n+              .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MDg3Mg=="}, "originalCommit": {"oid": "6a9c75f62126b3f081a2bef0be0b54a127d670eb"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzODczNg==", "bodyText": "jib-core will create a manifest list with the given platform order.", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508138736", "createdAt": "2020-10-20T00:32:15Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -98,4 +103,42 @@ public static JibContainerBuilder toJibContainerBuilder(\n     }\n     return containerBuilder;\n   }\n+\n+  @VisibleForTesting\n+  // TODO: add testing, need to do via intergration tests as there's no good way to extract out that\n+  //   the base image was populated as the user intended currently.\n+  static JibContainerBuilder createJibContainerBuilder(\n+      BaseImageSpec from, JibCli buildOptions, ConsoleLogger logger)\n+      throws InvalidImageReferenceException, FileNotFoundException {\n+    String baseImageReference = from.getImage();\n+    if (baseImageReference.startsWith(DOCKER_DAEMON_IMAGE_PREFIX)) {\n+      return Jib.from(\n+          DockerDaemonImage.named(baseImageReference.replaceFirst(DOCKER_DAEMON_IMAGE_PREFIX, \"\")));\n+    }\n+    if (baseImageReference.startsWith(TAR_IMAGE_PREFIX)) {\n+      return Jib.from(\n+          TarImage.at(Paths.get(baseImageReference.replaceFirst(TAR_IMAGE_PREFIX, \"\"))));\n+    }\n+    ImageReference imageReference =\n+        ImageReference.parse(baseImageReference.replaceFirst(REGISTRY_IMAGE_PREFIX, \"\"));\n+    RegistryImage registryImage = RegistryImage.named(imageReference);\n+    DefaultCredentialRetrievers defaultCredentialRetrievers =\n+        DefaultCredentialRetrievers.init(\n+            CredentialRetrieverFactory.forImage(\n+                imageReference,\n+                logEvent -> logger.log(logEvent.getLevel(), logEvent.getMessage())));\n+    Credentials.getFromCredentialRetrievers(buildOptions, defaultCredentialRetrievers)\n+        .forEach(registryImage::addCredentialRetriever);\n+    JibContainerBuilder containerBuilder = Jib.from(registryImage);\n+    if (!from.getPlatforms().isEmpty()) {\n+      containerBuilder.setPlatforms(\n+          from.getPlatforms()\n+              .stream()\n+              .map(\n+                  platformSpec ->\n+                      new Platform(platformSpec.getArchitecture(), platformSpec.getOs()))\n+              .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MDg3Mg=="}, "originalCommit": {"oid": "6a9c75f62126b3f081a2bef0be0b54a127d670eb"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE1NjE3OQ==", "bodyText": "oh right.", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508156179", "createdAt": "2020-10-20T01:35:07Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -98,4 +103,42 @@ public static JibContainerBuilder toJibContainerBuilder(\n     }\n     return containerBuilder;\n   }\n+\n+  @VisibleForTesting\n+  // TODO: add testing, need to do via intergration tests as there's no good way to extract out that\n+  //   the base image was populated as the user intended currently.\n+  static JibContainerBuilder createJibContainerBuilder(\n+      BaseImageSpec from, JibCli buildOptions, ConsoleLogger logger)\n+      throws InvalidImageReferenceException, FileNotFoundException {\n+    String baseImageReference = from.getImage();\n+    if (baseImageReference.startsWith(DOCKER_DAEMON_IMAGE_PREFIX)) {\n+      return Jib.from(\n+          DockerDaemonImage.named(baseImageReference.replaceFirst(DOCKER_DAEMON_IMAGE_PREFIX, \"\")));\n+    }\n+    if (baseImageReference.startsWith(TAR_IMAGE_PREFIX)) {\n+      return Jib.from(\n+          TarImage.at(Paths.get(baseImageReference.replaceFirst(TAR_IMAGE_PREFIX, \"\"))));\n+    }\n+    ImageReference imageReference =\n+        ImageReference.parse(baseImageReference.replaceFirst(REGISTRY_IMAGE_PREFIX, \"\"));\n+    RegistryImage registryImage = RegistryImage.named(imageReference);\n+    DefaultCredentialRetrievers defaultCredentialRetrievers =\n+        DefaultCredentialRetrievers.init(\n+            CredentialRetrieverFactory.forImage(\n+                imageReference,\n+                logEvent -> logger.log(logEvent.getLevel(), logEvent.getMessage())));\n+    Credentials.getFromCredentialRetrievers(buildOptions, defaultCredentialRetrievers)\n+        .forEach(registryImage::addCredentialRetriever);\n+    JibContainerBuilder containerBuilder = Jib.from(registryImage);\n+    if (!from.getPlatforms().isEmpty()) {\n+      containerBuilder.setPlatforms(\n+          from.getPlatforms()\n+              .stream()\n+              .map(\n+                  platformSpec ->\n+                      new Platform(platformSpec.getArchitecture(), platformSpec.getOs()))\n+              .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MDg3Mg=="}, "originalCommit": {"oid": "6a9c75f62126b3f081a2bef0be0b54a127d670eb"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjYwNjg1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTo0ODozNVrOHki5QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMzoxMjo0N1rOHkk3jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MjQ5Nw==", "bodyText": "I think this can be private without @VisibleForTesting?", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508082497", "createdAt": "2020-10-19T21:48:35Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -98,4 +103,42 @@ public static JibContainerBuilder toJibContainerBuilder(\n     }\n     return containerBuilder;\n   }\n+\n+  @VisibleForTesting\n+  // TODO: add testing, need to do via intergration tests as there's no good way to extract out that\n+  //   the base image was populated as the user intended currently.\n+  static JibContainerBuilder createJibContainerBuilder(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a9c75f62126b3f081a2bef0be0b54a127d670eb"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExNDgyOA==", "bodyText": "oh right.", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508114828", "createdAt": "2020-10-19T23:12:47Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -98,4 +103,42 @@ public static JibContainerBuilder toJibContainerBuilder(\n     }\n     return containerBuilder;\n   }\n+\n+  @VisibleForTesting\n+  // TODO: add testing, need to do via intergration tests as there's no good way to extract out that\n+  //   the base image was populated as the user intended currently.\n+  static JibContainerBuilder createJibContainerBuilder(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MjQ5Nw=="}, "originalCommit": {"oid": "6a9c75f62126b3f081a2bef0be0b54a127d670eb"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjcyMzYwOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjozMTowNVrOHkj-iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMDozNzowM1rOHkmaFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMDIzNQ==", "bodyText": "sorry, does this PR need to submitted before we start writing the integration tests?", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508100235", "createdAt": "2020-10-19T22:31:05Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -98,4 +103,42 @@ public static JibContainerBuilder toJibContainerBuilder(\n     }\n     return containerBuilder;\n   }\n+\n+  @VisibleForTesting\n+  // TODO: add testing, need to do via intergration tests as there's no good way to extract out that\n+  //   the base image was populated as the user intended currently.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a9c75f62126b3f081a2bef0be0b54a127d670eb"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExNDcyMw==", "bodyText": "yeah, well, really they all do, so we can run full builds using the CLI.", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508114723", "createdAt": "2020-10-19T23:12:25Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -98,4 +103,42 @@ public static JibContainerBuilder toJibContainerBuilder(\n     }\n     return containerBuilder;\n   }\n+\n+  @VisibleForTesting\n+  // TODO: add testing, need to do via intergration tests as there's no good way to extract out that\n+  //   the base image was populated as the user intended currently.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMDIzNQ=="}, "originalCommit": {"oid": "6a9c75f62126b3f081a2bef0be0b54a127d670eb"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MDA1NA==", "bodyText": "ah right.", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508140054", "createdAt": "2020-10-20T00:37:03Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -98,4 +103,42 @@ public static JibContainerBuilder toJibContainerBuilder(\n     }\n     return containerBuilder;\n   }\n+\n+  @VisibleForTesting\n+  // TODO: add testing, need to do via intergration tests as there's no good way to extract out that\n+  //   the base image was populated as the user intended currently.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMDIzNQ=="}, "originalCommit": {"oid": "6a9c75f62126b3f081a2bef0be0b54a127d670eb"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4981, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}