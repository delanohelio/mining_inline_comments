{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNzY4NDc4", "number": 2813, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDo0Nzo1NlrOEsMV9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDo1ODo0MFrOEurl-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Nzc1MDI4OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDo0Nzo1NlrOHfYL7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDo0Nzo1NlrOHfYL7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY2NDE3Mw==", "bodyText": "This should remain an instance variable (non-static), scoped and limited only to each individual instance. static means a global variable shared by every instance of JavaContainerBuilder.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r502664173", "createdAt": "2020-10-09T20:47:56Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java", "diffHunk": "@@ -204,7 +204,7 @@ public static JavaContainerBuilder from(TarImage tarImage) {\n   private RelativeUnixPath dependenciesDestination = RelativeUnixPath.get(\"libs\");\n   private RelativeUnixPath othersDestination = RelativeUnixPath.get(\"classpath\");\n   @Nullable private String mainClass;\n-  private ModificationTimeProvider modificationTimeProvider =\n+  private static ModificationTimeProvider modificationTimeProvider =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b6478acc9dbda08db223c7337d4e32b14cf20e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Nzc1NzA3OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDo1MDo0M1rOHfYQLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0OTo0MlrOHgnwUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY2NTI2Mg==", "bodyText": "Should remain an instance method.\nAnd note JavaContainerBuilder is a public API. Probably we don't want to expose this internal helper method.\nJust asking: did we decide to use JavaContainerBuilder instead of JibContainerBuilder for some reason? It's fine if JavaContainerBuilder works, but just saying I believe it's a bit curated and limiting.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r502665262", "createdAt": "2020-10-09T20:50:43Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java", "diffHunk": "@@ -691,7 +700,18 @@ private void addFileToLayer(\n     layerBuilders.get(layerType).addEntry(sourceFile, pathInContainer, modificationTime);\n   }\n \n-  private void addDirectoryContentsToLayer(\n+  /**\n+   * Adds the contents of a directory to a {@link FileEntriesLayer.Builder}.\n+   *\n+   * @param layerBuilders map that keeps track of all layers, with the key being the layer type and\n+   *     value being a {@link FileEntriesLayer.Builder}.\n+   * @param layerType the layer type.\n+   * @param sourceRoot path to root directory.\n+   * @param pathFilter predicate to filter the files by.\n+   * @param basePathInContainer base path in container.\n+   * @throws IOException if I/O error occurs when opening the directory.\n+   */\n+  public static void addDirectoryContentsToLayer(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b6478acc9dbda08db223c7337d4e32b14cf20e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2NzgyNw==", "bodyText": "Thanks for pointing this out! No longer using JavaContainerBuilder in JarProcessor.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r503967827", "createdAt": "2020-10-13T13:49:42Z", "author": {"login": "mpeddada1"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java", "diffHunk": "@@ -691,7 +700,18 @@ private void addFileToLayer(\n     layerBuilders.get(layerType).addEntry(sourceFile, pathInContainer, modificationTime);\n   }\n \n-  private void addDirectoryContentsToLayer(\n+  /**\n+   * Adds the contents of a directory to a {@link FileEntriesLayer.Builder}.\n+   *\n+   * @param layerBuilders map that keeps track of all layers, with the key being the layer type and\n+   *     value being a {@link FileEntriesLayer.Builder}.\n+   * @param layerType the layer type.\n+   * @param sourceRoot path to root directory.\n+   * @param pathFilter predicate to filter the files by.\n+   * @param basePathInContainer base path in container.\n+   * @throws IOException if I/O error occurs when opening the directory.\n+   */\n+  public static void addDirectoryContentsToLayer(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY2NTI2Mg=="}, "originalCommit": {"oid": "26b6478acc9dbda08db223c7337d4e32b14cf20e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Nzc2NzM5OnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDo1NDo1OVrOHfYWjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDo1NDo1OVrOHfYWjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY2Njg5NQ==", "bodyText": "Ditto.\nWe need to think twice before making this part of the public API surface.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r502666895", "createdAt": "2020-10-09T20:54:59Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java", "diffHunk": "@@ -679,7 +679,16 @@ private JavaContainerBuilder addDirectory(\n     return this;\n   }\n \n-  private void addFileToLayer(\n+  /**\n+   * Adds a file to a {@link FileEntriesLayer.Builder}.\n+   *\n+   * @param layerBuilders map that keeps track of all layers, with the key being the layer type and\n+   *     value being a {@link FileEntriesLayer.Builder}.\n+   * @param layerType the layer type.\n+   * @param sourceFile the source file path.\n+   * @param pathInContainer path in container.\n+   */\n+  public static void addFileToLayer(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b6478acc9dbda08db223c7337d4e32b14cf20e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzYyMDIwOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo0ODozOFrOHgwZLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDo0MDoxM1rOHhWfRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwOTM1OQ==", "bodyText": "I think this should be configurable and if not then use a temporary directory.\nPotentially we could have a jib local build directory that we can pass in.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504109359", "createdAt": "2020-10-13T16:48:38Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +66,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93c515fd498cb4fdca3e3386148645fe9188cb1"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0MjgzNg==", "bodyText": "Also FYI: generally speaking, we should close Closeable classes like TempDirectoryProvider, e.g., using a try-resource block.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504242836", "createdAt": "2020-10-13T20:35:50Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +66,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwOTM1OQ=="}, "originalCommit": {"oid": "a93c515fd498cb4fdca3e3386148645fe9188cb1"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMzUwOA==", "bodyText": "Thanks for pointing this out.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504733508", "createdAt": "2020-10-14T14:40:13Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +66,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwOTM1OQ=="}, "originalCommit": {"oid": "a93c515fd498cb4fdca3e3386148645fe9188cb1"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzYzNDI0OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo1MjoxOVrOHgwiKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDozNDowMFrOHhWLCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMTY1Nw==", "bodyText": "\"Class-Path\" -> Attributes.Name.CLASS_PATH", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504111657", "createdAt": "2020-10-13T16:52:19Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +66,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies = new ArrayList<>();\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath = jarFile.getManifest().getMainAttributes().getValue(\"Class-Path\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93c515fd498cb4fdca3e3386148645fe9188cb1"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyODMzMA==", "bodyText": "Done:)", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504728330", "createdAt": "2020-10-14T14:34:00Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +66,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies = new ArrayList<>();\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath = jarFile.getManifest().getMainAttributes().getValue(\"Class-Path\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMTY1Nw=="}, "originalCommit": {"oid": "a93c515fd498cb4fdca3e3386148645fe9188cb1"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzYzNzEzOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo1MzoxMFrOHgwkAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDozNzo1NlrOHhWYUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMjEzMQ==", "bodyText": "\" \" -> \"//s+\" for handling any kind of white space\nI might also do classPath.trim() ?", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504112131", "createdAt": "2020-10-13T16:53:10Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +66,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies = new ArrayList<>();\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath = jarFile.getManifest().getMainAttributes().getValue(\"Class-Path\");\n+    if (classPath != null) {\n+      for (String dependency : Splitter.on(\" \").split(classPath)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93c515fd498cb4fdca3e3386148645fe9188cb1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1NjM4Mg==", "bodyText": "May be a good idea. For example, here, I see people saying like\n\ntwo spaces immediately following Class-Path:, a space at the end of [each] line, and one before each line, and finally an extra new-line at the end did the trick.\n\nalthough I'm not sure if the Java API handles all these whitespaces correctly. Worth checking anyway.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504256382", "createdAt": "2020-10-13T21:02:05Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +66,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies = new ArrayList<>();\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath = jarFile.getManifest().getMainAttributes().getValue(\"Class-Path\");\n+    if (classPath != null) {\n+      for (String dependency : Splitter.on(\" \").split(classPath)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMjEzMQ=="}, "originalCommit": {"oid": "a93c515fd498cb4fdca3e3386148645fe9188cb1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMTcyOA==", "bodyText": "Oh great point, added handling for any kind of white space and added extra spaces in the class-path field in the sample jar file  to make sure this is working.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504731728", "createdAt": "2020-10-14T14:37:56Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +66,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies = new ArrayList<>();\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath = jarFile.getManifest().getMainAttributes().getValue(\"Class-Path\");\n+    if (classPath != null) {\n+      for (String dependency : Splitter.on(\" \").split(classPath)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMjEzMQ=="}, "originalCommit": {"oid": "a93c515fd498cb4fdca3e3386148645fe9188cb1"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzYzOTY5OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo1Mzo1OFrOHgwlxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDo0NDoyOFrOHhWszQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMjU4MQ==", "bodyText": "Do we have to fail here? Would this code path also handle the shaded jar style jars (which may not have Class-Path entries)?", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504112581", "createdAt": "2020-10-13T16:53:58Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +66,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies = new ArrayList<>();\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath = jarFile.getManifest().getMainAttributes().getValue(\"Class-Path\");\n+    if (classPath != null) {\n+      for (String dependency : Splitter.on(\" \").split(classPath)) {\n+        Path depPath = Paths.get(dependency);\n+        dependencies.add(depPath);\n+      }\n+    } else {\n+      throw new IllegalStateException(\"Class path is not specified.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93c515fd498cb4fdca3e3386148645fe9188cb1"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5MTY5MA==", "bodyText": "That's a good question. I didn't intend for this code path to handle shaded jars. It mainly focuses on regular jars, which require the class-path to be fully specified in order for it to work. We could try to intelligently determine what the dependencies are in the future implementations, but for now I decided to first check that the Class-Path was present before proceeding to the next steps. What do you think?", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504691690", "createdAt": "2020-10-14T13:47:18Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +66,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies = new ArrayList<>();\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath = jarFile.getManifest().getMainAttributes().getValue(\"Class-Path\");\n+    if (classPath != null) {\n+      for (String dependency : Splitter.on(\" \").split(classPath)) {\n+        Path depPath = Paths.get(dependency);\n+        dependencies.add(depPath);\n+      }\n+    } else {\n+      throw new IllegalStateException(\"Class path is not specified.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMjU4MQ=="}, "originalCommit": {"oid": "a93c515fd498cb4fdca3e3386148645fe9188cb1"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyNTk5MA==", "bodyText": "Regular jars include one that doesn't have Class-Path. It's possible that many people will try a hello-world app (i.e, no dependencies), so I think we shouldn't fail.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504725990", "createdAt": "2020-10-14T14:31:08Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +66,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies = new ArrayList<>();\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath = jarFile.getManifest().getMainAttributes().getValue(\"Class-Path\");\n+    if (classPath != null) {\n+      for (String dependency : Splitter.on(\" \").split(classPath)) {\n+        Path depPath = Paths.get(dependency);\n+        dependencies.add(depPath);\n+      }\n+    } else {\n+      throw new IllegalStateException(\"Class path is not specified.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMjU4MQ=="}, "originalCommit": {"oid": "a93c515fd498cb4fdca3e3386148645fe9188cb1"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczNjk3Mw==", "bodyText": "Oh that's a very valid point! Okay I will remove this exception.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504736973", "createdAt": "2020-10-14T14:44:28Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +66,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies = new ArrayList<>();\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath = jarFile.getManifest().getMainAttributes().getValue(\"Class-Path\");\n+    if (classPath != null) {\n+      for (String dependency : Splitter.on(\" \").split(classPath)) {\n+        Path depPath = Paths.get(dependency);\n+        dependencies.add(depPath);\n+      }\n+    } else {\n+      throw new IllegalStateException(\"Class path is not specified.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMjU4MQ=="}, "originalCommit": {"oid": "a93c515fd498cb4fdca3e3386148645fe9188cb1"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODQ3MTA4OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDozNzoxOVrOHg4lqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzozOTo1MVrOHg9KdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0MzYyNQ==", "bodyText": "Another option is ... isResrouceFile = isClassFile.negate(), which I think works better in this case.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504243625", "createdAt": "2020-10-13T20:37:19Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +64,85 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxODU4MA==", "bodyText": "Oh this is cool.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504318580", "createdAt": "2020-10-13T23:39:51Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +64,85 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0MzYyNQ=="}, "originalCommit": {"oid": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODQ3OTY1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDozOTo1NlrOHg4rAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoxNjozN1rOHhVUeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0NDk5NA==", "bodyText": "How about \"explodedJarRoot\" or \"localExplodedJarRoot\"? tempDirectoryPath gives the impression that it's a directory for a callee to use as a temp storage.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504244994", "createdAt": "2020-10-13T20:39:56Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +64,85 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNDM2Mg==", "bodyText": "Done:)", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504714362", "createdAt": "2020-10-14T14:16:37Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +64,85 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0NDk5NA=="}, "originalCommit": {"oid": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODU1OTI5OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMTowNDoxOFrOHg5beA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoxNjoyMVrOHhVTpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1NzQwMA==", "bodyText": "super nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    dependencies.add(depPath);\n          \n          \n            \n                    dependencies.add(Paths.get(dependency));\n          \n      \n    \n    \n  \n\nJust FYI, another way is\n.splitToList().stream().map(Paths::get).collect(Collectors.toList());", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504257400", "createdAt": "2020-10-13T21:04:18Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +64,85 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies = new ArrayList<>();\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath = jarFile.getManifest().getMainAttributes().getValue(\"Class-Path\");\n+    if (classPath != null) {\n+      for (String dependency : Splitter.on(\" \").split(classPath)) {\n+        Path depPath = Paths.get(dependency);\n+        dependencies.add(depPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNDE0OQ==", "bodyText": "Pretty neat.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504714149", "createdAt": "2020-10-14T14:16:21Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +64,85 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies = new ArrayList<>();\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath = jarFile.getManifest().getMainAttributes().getValue(\"Class-Path\");\n+    if (classPath != null) {\n+      for (String dependency : Splitter.on(\" \").split(classPath)) {\n+        Path depPath = Paths.get(dependency);\n+        dependencies.add(depPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1NzQwMA=="}, "originalCommit": {"oid": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODU3NzI1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMTowOTo1M1rOHg5mFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMTowOTo1M1rOHg5mFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MDExNg==", "bodyText": "I believe we customarily put the most frequently changing layers at the bottom (needs to double-check). So perhaps\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                layers.add(classesLayer);\n          \n          \n            \n                layers.add(resourcesLayer);\n          \n          \n            \n                layers.add(dependenciesLayerBuilder.build());\n          \n          \n            \n                layers.add(dependenciesLayerBuilder.build());\n          \n          \n            \n                layers.add(resourcesLayer);\n          \n          \n            \n                layers.add(classesLayer);", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504260116", "createdAt": "2020-10-13T21:09:53Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +64,85 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies = new ArrayList<>();\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath = jarFile.getManifest().getMainAttributes().getValue(\"Class-Path\");\n+    if (classPath != null) {\n+      for (String dependency : Splitter.on(\" \").split(classPath)) {\n+        Path depPath = Paths.get(dependency);\n+        dependencies.add(depPath);\n+      }\n+    } else {\n+      throw new IllegalStateException(\"Class path is not specified.\");\n+    }\n+    FileEntriesLayer.Builder dependenciesLayerBuilder = FileEntriesLayer.builder();\n+    dependencies.forEach(\n+        path ->\n+            dependenciesLayerBuilder.addEntry(\n+                path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n+    dependenciesLayerBuilder.setName(\"Dependencies\");\n+\n+    layers.add(classesLayer);\n+    layers.add(resourcesLayer);\n+    layers.add(dependenciesLayerBuilder.build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODU4MjIxOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxMToxM1rOHg5o9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxMToxM1rOHg5o9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MDg1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String STANDARD_RESOURCE_DIR_WITH_CP = \"jar/standard/standardJarWithCp.jar\";\n          \n          \n            \n              private static final String STANDARD_JAR_WITH_CLASS_PATH_MANIFEST = \"jar/standard/standardJarWithCp.jar\";\n          \n      \n    \n    \n  \n\nAlso applies to other constants.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504260853", "createdAt": "2020-10-13T21:11:13Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -18,17 +18,24 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntry;\n import com.google.cloud.tools.jib.cli.jar.JarProcessor.JarType;\n+import com.google.common.collect.ImmutableList;\n import com.google.common.io.Resources;\n import java.io.IOException;\n import java.net.URISyntaxException;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import org.junit.Test;\n \n public class JarProcessorTest {\n \n   private static final String SPRING_BOOT_RESOURCE_DIR = \"jar/springboot/springboot_sample.jar\";\n+  private static final String STANDARD_RESOURCE_DIR_WITH_CP = \"jar/standard/standardJarWithCp.jar\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODU4Njg3OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxMjo1M1rOHg5r3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDoxNTowNlrOHhVP2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MTU5Ng==", "bodyText": "Assert before attempting layers.get(2). Otherwise, for example, if the code base accidentally changes to produce only two layer, we'll hit an index-out-of-bound error when attempting .get(2).", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504261596", "createdAt": "2020-10-13T21:12:53Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -44,4 +51,77 @@ public void testDetermineJarType_standard() throws IOException, URISyntaxExcepti\n     JarType jarType = JarProcessor.determineJarType(standardJar);\n     assertThat(jarType).isEqualTo(JarType.STANDARD);\n   }\n+\n+  @Test\n+  public void testExplodeMode_standard() throws IOException, URISyntaxException {\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_RESOURCE_DIR_WITH_CP).toURI());\n+    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar);\n+    FileEntriesLayer classesLayer = layers.get(0);\n+    FileEntriesLayer resourcesLayer = layers.get(1);\n+    FileEntriesLayer dependenciesLayer = layers.get(2);\n+\n+    assertThat(layers.size()).isEqualTo(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxMzE3OQ==", "bodyText": "That's a good idea!", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504713179", "createdAt": "2020-10-14T14:15:06Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -44,4 +51,77 @@ public void testDetermineJarType_standard() throws IOException, URISyntaxExcepti\n     JarType jarType = JarProcessor.determineJarType(standardJar);\n     assertThat(jarType).isEqualTo(JarType.STANDARD);\n   }\n+\n+  @Test\n+  public void testExplodeMode_standard() throws IOException, URISyntaxException {\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_RESOURCE_DIR_WITH_CP).toURI());\n+    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar);\n+    FileEntriesLayer classesLayer = layers.get(0);\n+    FileEntriesLayer resourcesLayer = layers.get(1);\n+    FileEntriesLayer dependenciesLayer = layers.get(2);\n+\n+    assertThat(layers.size()).isEqualTo(3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MTU5Ng=="}, "originalCommit": {"oid": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODU4ODgxOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxMzozMVrOHg5tEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxMzozMVrOHg5tEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MTkwNQ==", "bodyText": "I guess no need to assert the size when using .containsExactly?", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504261905", "createdAt": "2020-10-13T21:13:31Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -44,4 +51,77 @@ public void testDetermineJarType_standard() throws IOException, URISyntaxExcepti\n     JarType jarType = JarProcessor.determineJarType(standardJar);\n     assertThat(jarType).isEqualTo(JarType.STANDARD);\n   }\n+\n+  @Test\n+  public void testExplodeMode_standard() throws IOException, URISyntaxException {\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_RESOURCE_DIR_WITH_CP).toURI());\n+    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar);\n+    FileEntriesLayer classesLayer = layers.get(0);\n+    FileEntriesLayer resourcesLayer = layers.get(1);\n+    FileEntriesLayer dependenciesLayer = layers.get(2);\n+\n+    assertThat(layers.size()).isEqualTo(3);\n+\n+    // Validate classes layer.\n+    // TODO: Validate order of file paths once\n+    // https://github.com/GoogleContainerTools/jib/issues/2821 is fixed.\n+    assertThat(classesLayer.getEntries().size()).isEqualTo(10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODU4OTQyOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxMzo0NVrOHg5teQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxMzo0NVrOHg5teQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MjAwOQ==", "bodyText": "Ditto?", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504262009", "createdAt": "2020-10-13T21:13:45Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -44,4 +51,77 @@ public void testDetermineJarType_standard() throws IOException, URISyntaxExcepti\n     JarType jarType = JarProcessor.determineJarType(standardJar);\n     assertThat(jarType).isEqualTo(JarType.STANDARD);\n   }\n+\n+  @Test\n+  public void testExplodeMode_standard() throws IOException, URISyntaxException {\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_RESOURCE_DIR_WITH_CP).toURI());\n+    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar);\n+    FileEntriesLayer classesLayer = layers.get(0);\n+    FileEntriesLayer resourcesLayer = layers.get(1);\n+    FileEntriesLayer dependenciesLayer = layers.get(2);\n+\n+    assertThat(layers.size()).isEqualTo(3);\n+\n+    // Validate classes layer.\n+    // TODO: Validate order of file paths once\n+    // https://github.com/GoogleContainerTools/jib/issues/2821 is fixed.\n+    assertThat(classesLayer.getEntries().size()).isEqualTo(10);\n+    assertThat(classesLayer.getName()).isEqualTo(\"Classes\");\n+    List<AbsoluteUnixPath> actualClassesPaths =\n+        classesLayer\n+            .getEntries()\n+            .stream()\n+            .map(FileEntry::getExtractionPath)\n+            .collect(Collectors.toList());\n+    assertThat(actualClassesPaths)\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/class5.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory1\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory1/class1.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory1/class2.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/class4.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3/class3.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory4\"));\n+\n+    // Validate resources layer.\n+    // TODO: Validate order of file paths once\n+    // https://github.com/GoogleContainerTools/jib/issues/2821 is fixed.\n+    assertThat(resourcesLayer.getEntries().size()).isEqualTo(9);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODU4OTg3OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxMzo1MlrOHg5tvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxMzo1MlrOHg5tvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MjA3OQ==", "bodyText": "Ditto?", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504262079", "createdAt": "2020-10-13T21:13:52Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -44,4 +51,77 @@ public void testDetermineJarType_standard() throws IOException, URISyntaxExcepti\n     JarType jarType = JarProcessor.determineJarType(standardJar);\n     assertThat(jarType).isEqualTo(JarType.STANDARD);\n   }\n+\n+  @Test\n+  public void testExplodeMode_standard() throws IOException, URISyntaxException {\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_RESOURCE_DIR_WITH_CP).toURI());\n+    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar);\n+    FileEntriesLayer classesLayer = layers.get(0);\n+    FileEntriesLayer resourcesLayer = layers.get(1);\n+    FileEntriesLayer dependenciesLayer = layers.get(2);\n+\n+    assertThat(layers.size()).isEqualTo(3);\n+\n+    // Validate classes layer.\n+    // TODO: Validate order of file paths once\n+    // https://github.com/GoogleContainerTools/jib/issues/2821 is fixed.\n+    assertThat(classesLayer.getEntries().size()).isEqualTo(10);\n+    assertThat(classesLayer.getName()).isEqualTo(\"Classes\");\n+    List<AbsoluteUnixPath> actualClassesPaths =\n+        classesLayer\n+            .getEntries()\n+            .stream()\n+            .map(FileEntry::getExtractionPath)\n+            .collect(Collectors.toList());\n+    assertThat(actualClassesPaths)\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/class5.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory1\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory1/class1.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory1/class2.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/class4.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3/class3.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory4\"));\n+\n+    // Validate resources layer.\n+    // TODO: Validate order of file paths once\n+    // https://github.com/GoogleContainerTools/jib/issues/2821 is fixed.\n+    assertThat(resourcesLayer.getEntries().size()).isEqualTo(9);\n+    assertThat(resourcesLayer.getName()).isEqualTo(\"Resources\");\n+    List<AbsoluteUnixPath> actualResourcesPaths =\n+        resourcesLayer\n+            .getEntries()\n+            .stream()\n+            .map(FileEntry::getExtractionPath)\n+            .collect(Collectors.toList());\n+    assertThat(actualResourcesPaths)\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF/\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF/MANIFEST.MF\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory1\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory1/resource1.txt\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3/resource2.sql\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory4\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory4/resource3.txt\"));\n+\n+    // Validate dependencies layer.\n+    assertThat(dependenciesLayer.getEntries().size()).isEqualTo(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTY4MTc1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDo0Njo0M1rOHhW0JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDo0Njo0M1rOHhW0JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczODg1Mw==", "bodyText": "Once a Closeable class is closed, it's permanently shutdown and not usable. So you should put the entire code that needs to use localExplodedJarRoot into the try-resource block.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504738853", "createdAt": "2020-10-14T14:46:43Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +67,97 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided, doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot;\n+    if (tempDirPath == null) {\n+      try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n+        localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTY4OTM2OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDo0ODoyMFrOHhW44Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzo0NDo0MFrOHheMnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc0MDA2NQ==", "bodyText": "Minor point, but Jib build plugins use non-capitalized name \"classes\" (as defined in JavaContainerBuilder.LayerType).", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504740065", "createdAt": "2020-10-14T14:48:20Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +67,97 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided, doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot;\n+    if (tempDirPath == null) {\n+      try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n+        localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n+      }\n+    } else {\n+      localExplodedJarRoot = tempDirPath;\n+    }\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1OTgwNQ==", "bodyText": "I added an enum for layer types, similar to what's being done in JavaContainerBuilder.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504859805", "createdAt": "2020-10-14T17:44:40Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +67,97 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided, doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot;\n+    if (tempDirPath == null) {\n+      try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n+        localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n+      }\n+    } else {\n+      localExplodedJarRoot = tempDirPath;\n+    }\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc0MDA2NQ=="}, "originalCommit": {"oid": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTY4OTgzOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDo0ODoyNlrOHhW5LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDo0ODoyNlrOHhW5LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc0MDE0MA==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504740140", "createdAt": "2020-10-14T14:48:26Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +67,97 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided, doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot;\n+    if (tempDirPath == null) {\n+      try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n+        localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n+      }\n+    } else {\n+      localExplodedJarRoot = tempDirPath;\n+    }\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTcxMzkzOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDo1MzoxMFrOHhXIBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDo1MzoxMFrOHhXIBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc0Mzk0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String SPRING_BOOT_RESOURCE_DIR = \"jar/springboot/springboot_sample.jar\";\n          \n          \n            \n              private static final String STANDARD_JAR_WITH_CLASS_PATH_MANIFEST =\n          \n          \n            \n                  \"jar/standard/standardJarWithClassPath.jar\";\n          \n          \n            \n              private static final String STANDARD_RESOURCE_DIR = \"jar/standard/standardJar.jar\";\n          \n          \n            \n              private static final String SPRING_BOOT_JAR = \"jar/springboot/springboot_sample.jar\";\n          \n          \n            \n              private static final String STANDARD_JAR_WITH_CLASS_PATH_MANIFEST =\n          \n          \n            \n                  \"jar/standard/standardJarWithClassPath.jar\";\n          \n          \n            \n              private static final String STANDARD_JAR = \"jar/standard/standardJar.jar\";", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504743942", "createdAt": "2020-10-14T14:53:10Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -18,17 +18,25 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntry;\n import com.google.cloud.tools.jib.cli.jar.JarProcessor.JarType;\n+import com.google.common.collect.ImmutableList;\n import com.google.common.io.Resources;\n import java.io.IOException;\n import java.net.URISyntaxException;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import org.junit.Test;\n \n public class JarProcessorTest {\n \n   private static final String SPRING_BOOT_RESOURCE_DIR = \"jar/springboot/springboot_sample.jar\";\n+  private static final String STANDARD_JAR_WITH_CLASS_PATH_MANIFEST =\n+      \"jar/standard/standardJarWithClassPath.jar\";\n   private static final String STANDARD_RESOURCE_DIR = \"jar/standard/standardJar.jar\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTkzMzM3OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTozODoxMVrOHhZQug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzo0MzoyOVrOHheKBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3ODkzOA==", "bodyText": "You can remove this else branch if you initialize the variable on line 118 like List<Path> dependencies = new ArrayList<>();.\nHow about skipping adding the dependencies layer if it's empty? To be fair, it shouldn't matter, because I believe jib-core will drop any empty layers. But we can be conservative at this level too.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504778938", "createdAt": "2020-10-14T15:38:11Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +67,97 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided, doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot;\n+    if (tempDirPath == null) {\n+      try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n+        localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n+      }\n+    } else {\n+      localExplodedJarRoot = tempDirPath;\n+    }\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies;\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath =\n+        jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+    if (classPath != null) {\n+      dependencies =\n+          Splitter.onPattern(\"\\\\s+\")\n+              .splitToList(classPath.trim())\n+              .stream()\n+              .map(Paths::get)\n+              .collect(Collectors.toList());\n+    } else {\n+      dependencies = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ffc0b2bf21e99f27431f2ccff7ccfda6c55b39a"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1OTE0MQ==", "bodyText": "That's good to know. Modified this to not add a dependency layer if there are no dependencies specified in Class-Path.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504859141", "createdAt": "2020-10-14T17:43:29Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +67,97 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided, doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot;\n+    if (tempDirPath == null) {\n+      try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n+        localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n+      }\n+    } else {\n+      localExplodedJarRoot = tempDirPath;\n+    }\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies;\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath =\n+        jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+    if (classPath != null) {\n+      dependencies =\n+          Splitter.onPattern(\"\\\\s+\")\n+              .splitToList(classPath.trim())\n+              .stream()\n+              .map(Paths::get)\n+              .collect(Collectors.toList());\n+    } else {\n+      dependencies = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3ODkzOA=="}, "originalCommit": {"oid": "8ffc0b2bf21e99f27431f2ccff7ccfda6c55b39a"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjQyNzY5OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzo0MTo1N1rOHheGpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzo0MTo1N1rOHheGpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1ODI3OQ==", "bodyText": "I think an enum is unnecessary if this is only to define layer names. It looks okay to me to use the string literals in the code as before.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504858279", "createdAt": "2020-10-14T17:41:57Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -35,6 +54,29 @@\n     SPRING_BOOT;\n   }\n \n+  /** Represents the different types of layers. */\n+  @VisibleForTesting\n+  public enum ExplodedModeLayerType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1982be77724b1762c1260688789b9d034c31102"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjQ3ODgyOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzo1NToyNFrOHhemgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzo1NToyNFrOHhemgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NjQzMg==", "bodyText": "Oh! I realized there's a problem. When TempDirectoryProvider is closed, all the contents (i.e., exploded jar) will be cleaned up. That is, nothing left when exiting the method. However, tar creating happens far later in jib-core. I guess this method should just use tempDirPath (should not be @Nullable), unless the method opts to use a system temp directory. Since the method can accept tempDirPath, maybe we should just use it.\nAnd how about tempDirPath --> tempDirectory?", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504866432", "createdAt": "2020-10-14T17:55:24Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +91,92 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot = tempDirPath;\n+    try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1982be77724b1762c1260688789b9d034c31102"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjQ4Mjk1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzo1NjozM1rOHhepGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzo1NjozM1rOHhepGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NzA5OQ==", "bodyText": "Nit: can chain ...builder().setName(\"dependencies\").", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504867099", "createdAt": "2020-10-14T17:56:33Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +91,92 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot = tempDirPath;\n+    try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n+      if (localExplodedJarRoot == null) {\n+        localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n+      }\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+      List<FileEntriesLayer> layers = new ArrayList<>();\n+      Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+      Predicate<Path> isResourceFile = isClassFile.negate();\n+\n+      // Determine class and resource files in the directory containing jar contents and create\n+      // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+      // file's original project structure.\n+      FileEntriesLayer classesLayer =\n+          addDirectoryContentsToLayer(\n+                  FileEntriesLayer.builder(),\n+                  localExplodedJarRoot,\n+                  isClassFile,\n+                  APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+              .setName(ExplodedModeLayerType.CLASSES.getName())\n+              .build();\n+      FileEntriesLayer resourcesLayer =\n+          addDirectoryContentsToLayer(\n+                  FileEntriesLayer.builder(),\n+                  localExplodedJarRoot,\n+                  isResourceFile,\n+                  APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+              .setName(ExplodedModeLayerType.RESOURCES.getName())\n+              .build();\n+\n+      // Get dependencies from Class-Path in the jar's manifest and create a\n+      // FileEntriesLayer.Builder with these dependencies as entries. If Class-Path in the jar's\n+      // manifest is not present then skip adding a dependencies layer.\n+      JarFile jarFile = new JarFile(jarPath.toFile());\n+      String classPath =\n+          jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+      if (classPath != null) {\n+        List<Path> dependencies =\n+            Splitter.onPattern(\"\\\\s+\")\n+                .splitToList(classPath.trim())\n+                .stream()\n+                .map(Paths::get)\n+                .collect(Collectors.toList());\n+        FileEntriesLayer.Builder dependenciesLayerBuilder = FileEntriesLayer.builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1982be77724b1762c1260688789b9d034c31102"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MzM1NDMwOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjowMzowNFrOHhnAmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNzowNzoyNlrOHjI5sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAwNDE4NA==", "bodyText": "what about a jar that contains no resources?", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r505004184", "createdAt": "2020-10-14T22:03:04Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +65,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot = tempDirPath;\n+\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9cbf0963da6b09eac263444c59d0e603aed295e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwODA0OA==", "bodyText": "Great question. For a jar that doesn't contain resources, the resources layer will only contain the manifest.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r506608048", "createdAt": "2020-10-16T17:07:26Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +65,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot = tempDirPath;\n+\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAwNDE4NA=="}, "originalCommit": {"oid": "b9cbf0963da6b09eac263444c59d0e603aed295e"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MzM2MTc1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjowNDo0MlrOHhnFcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNzoxOToyMFrOHjJUtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAwNTQyNw==", "bodyText": "Perhaps I should've brought this up before, I'm also curious if we should persist the MANIFEST.MF after exploding the jar. That manifest only applies when using a Jar. Does it make sense to filter it out when building container layers?", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r505005427", "createdAt": "2020-10-14T22:04:42Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +65,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot = tempDirPath;\n+\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9cbf0963da6b09eac263444c59d0e603aed295e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3OTY2Mg==", "bodyText": "That's an interesting question. If you remember, at least the Spring Boot launcher requires it. I think it reads the file from classpath. Maybe it's not a great harm to include it ATM and see if someone complains?", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r505779662", "createdAt": "2020-10-15T19:13:21Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +65,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot = tempDirPath;\n+\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAwNTQyNw=="}, "originalCommit": {"oid": "b9cbf0963da6b09eac263444c59d0e603aed295e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxNDk2NQ==", "bodyText": "Along those lines- I decided to keep it, going off of what we've seen with Spring Boot. I couldn't find a particular reason to intentionally remove it so I left in for the time being? Although, the main cost I see is that we will be creating a resources layer just for the manifest if we have a jar with only classes.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r506614965", "createdAt": "2020-10-16T17:19:20Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +65,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot = tempDirPath;\n+\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAwNTQyNw=="}, "originalCommit": {"oid": "b9cbf0963da6b09eac263444c59d0e603aed295e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODEzNjkyOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOToxNToxOFrOHiWZ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOToxNToxOFrOHiWZ4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc4MDcwNg==", "bodyText": "Any reason not using @Rule public final TemporaryFolder as we do in other tests?", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r505780706", "createdAt": "2020-10-15T19:15:18Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -18,30 +18,181 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntry;\n import com.google.cloud.tools.jib.cli.jar.JarProcessor.JarType;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.Files;\n import com.google.common.io.Resources;\n+import java.io.File;\n import java.io.IOException;\n import java.net.URISyntaxException;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import org.junit.Test;\n \n public class JarProcessorTest {\n \n-  private static final String SPRING_BOOT_RESOURCE_DIR = \"jar/springboot/springboot_sample.jar\";\n-  private static final String STANDARD_RESOURCE_DIR = \"jar/standard/standardJar.jar\";\n+  private static final String SPRING_BOOT_JAR = \"jar/springboot/springboot_sample.jar\";\n+  private static final String STANDARD_JAR_WITH_CLASS_PATH_MANIFEST =\n+      \"jar/standard/standardJarWithClassPath.jar\";\n+  private static final String STANDARD_JAR_WITHOUT_CLASS_PATH_MANIFEST =\n+      \"jar/standard/standardJarWithoutClassPath.jar\";\n+  private static final String STANDARD_JAR = \"jar/standard/standardJar.jar\";\n \n   @Test\n   public void testDetermineJarType_springBoot() throws IOException, URISyntaxException {\n-    Path springBootJar = Paths.get(Resources.getResource(SPRING_BOOT_RESOURCE_DIR).toURI());\n+    Path springBootJar = Paths.get(Resources.getResource(SPRING_BOOT_JAR).toURI());\n     JarType jarType = JarProcessor.determineJarType(springBootJar);\n     assertThat(jarType).isEqualTo(JarType.SPRING_BOOT);\n   }\n \n   @Test\n   public void testDetermineJarType_standard() throws IOException, URISyntaxException {\n-    Path standardJar = Paths.get(Resources.getResource(STANDARD_RESOURCE_DIR).toURI());\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_JAR).toURI());\n     JarType jarType = JarProcessor.determineJarType(standardJar);\n     assertThat(jarType).isEqualTo(JarType.STANDARD);\n   }\n+\n+  @Test\n+  public void testExplodeMode_standard_withClassPathInManifest()\n+      throws IOException, URISyntaxException {\n+    Path standardJar =\n+        Paths.get(Resources.getResource(STANDARD_JAR_WITH_CLASS_PATH_MANIFEST).toURI());\n+    File tempDirectory = Files.createTempDir();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bde748299f75ee27f87905093bc26a6b8e845faf"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzgyODkwOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDo1Mzo0OVrOHjPgsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDowOTowNlrOHkQY7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxNjMzNg==", "bodyText": "Sorry, looking at this again, maybe this doesn't need to accept a builder. It can create it locally. That said, it can accept a layer name instead? For example,\nprivate static FileEntriesLayer createLayerFromDirectoryContents(String layerName, ...) {\n  FileEntriesLayer.Builder builder = FileEntriesLayer.builder().setName(layerName);\n  new DirectoryWalker(...)...;\n  return builder.build();\n}\nWDYT?", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r506716336", "createdAt": "2020-10-16T20:53:49Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +65,86 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot = tempDirPath;\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (classes or resources), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer with these\n+    // dependencies as entries. If Class-Path in the jar's manifest is not present then skip adding\n+    // a dependencies layer.\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath =\n+        jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+    if (classPath != null) {\n+      List<Path> dependencies =\n+          Splitter.onPattern(\"\\\\s+\")\n+              .splitToList(classPath.trim())\n+              .stream()\n+              .map(Paths::get)\n+              .collect(Collectors.toList());\n+      FileEntriesLayer.Builder dependenciesLayerBuilder =\n+          FileEntriesLayer.builder().setName(\"dependencies\");\n+      dependencies.forEach(\n+          path ->\n+              dependenciesLayerBuilder.addEntry(\n+                  path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n+      layers.add(dependenciesLayerBuilder.build());\n+    }\n+\n+    layers.add(resourcesLayer);\n+    layers.add(classesLayer);\n+    return layers;\n+  }\n+\n+  private static FileEntriesLayer.Builder addDirectoryContentsToLayer(\n+      FileEntriesLayer.Builder builder,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7adbee46cd82b4589229ffbfcae731665b452a4b"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3OTMxMQ==", "bodyText": "Yeah I think that's a good idea.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r507779311", "createdAt": "2020-10-19T14:09:06Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +65,86 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot = tempDirPath;\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (classes or resources), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer with these\n+    // dependencies as entries. If Class-Path in the jar's manifest is not present then skip adding\n+    // a dependencies layer.\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath =\n+        jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+    if (classPath != null) {\n+      List<Path> dependencies =\n+          Splitter.onPattern(\"\\\\s+\")\n+              .splitToList(classPath.trim())\n+              .stream()\n+              .map(Paths::get)\n+              .collect(Collectors.toList());\n+      FileEntriesLayer.Builder dependenciesLayerBuilder =\n+          FileEntriesLayer.builder().setName(\"dependencies\");\n+      dependencies.forEach(\n+          path ->\n+              dependenciesLayerBuilder.addEntry(\n+                  path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n+      layers.add(dependenciesLayerBuilder.build());\n+    }\n+\n+    layers.add(resourcesLayer);\n+    layers.add(classesLayer);\n+    return layers;\n+  }\n+\n+  private static FileEntriesLayer.Builder addDirectoryContentsToLayer(\n+      FileEntriesLayer.Builder builder,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxNjMzNg=="}, "originalCommit": {"oid": "7adbee46cd82b4589229ffbfcae731665b452a4b"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzgzODQ2OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDo1NzoyM1rOHjPmUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDoxMDo1M1rOHkQe-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxNzc3Ng==", "bodyText": "super nit: I think this comment is obvious enough to be removed.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r506717776", "createdAt": "2020-10-16T20:57:23Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -18,30 +18,260 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntry;\n import com.google.cloud.tools.jib.cli.jar.JarProcessor.JarType;\n+import com.google.common.collect.ImmutableList;\n import com.google.common.io.Resources;\n import java.io.IOException;\n import java.net.URISyntaxException;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n public class JarProcessorTest {\n \n-  private static final String SPRING_BOOT_RESOURCE_DIR = \"jar/springboot/springboot_sample.jar\";\n-  private static final String STANDARD_RESOURCE_DIR = \"jar/standard/standardJar.jar\";\n+  private static final String SPRING_BOOT_JAR = \"jar/springboot/springboot_sample.jar\";\n+  private static final String STANDARD_JAR_WITH_CLASS_PATH_MANIFEST =\n+      \"jar/standard/standardJarWithClassPath.jar\";\n+  private static final String STANDARD_JAR_WITHOUT_CLASS_PATH_MANIFEST =\n+      \"jar/standard/standardJarWithoutClassPath.jar\";\n+  private static final String STANDARD_JAR_WITH_ONLY_CLASSES =\n+      \"jar/standard/standardJarWithOnlyClasses.jar\";\n+  private static final String STANDARD_JAR_EMPTY = \"jar/standard/emptyStandardJar.jar\";\n+\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n \n   @Test\n   public void testDetermineJarType_springBoot() throws IOException, URISyntaxException {\n-    Path springBootJar = Paths.get(Resources.getResource(SPRING_BOOT_RESOURCE_DIR).toURI());\n+    Path springBootJar = Paths.get(Resources.getResource(SPRING_BOOT_JAR).toURI());\n     JarType jarType = JarProcessor.determineJarType(springBootJar);\n     assertThat(jarType).isEqualTo(JarType.SPRING_BOOT);\n   }\n \n   @Test\n   public void testDetermineJarType_standard() throws IOException, URISyntaxException {\n-    Path standardJar = Paths.get(Resources.getResource(STANDARD_RESOURCE_DIR).toURI());\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_JAR_EMPTY).toURI());\n     JarType jarType = JarProcessor.determineJarType(standardJar);\n     assertThat(jarType).isEqualTo(JarType.STANDARD);\n   }\n+\n+  @Test\n+  public void testExplodeMode_standard_emptyJar() throws IOException, URISyntaxException {\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_JAR_EMPTY).toURI());\n+    Path destDir = temporaryFolder.newFolder().toPath();\n+    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar, destDir);\n+\n+    // Validate that only two layers are created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7adbee46cd82b4589229ffbfcae731665b452a4b"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4MDg1OQ==", "bodyText": "True, done.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r507780859", "createdAt": "2020-10-19T14:10:53Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -18,30 +18,260 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntry;\n import com.google.cloud.tools.jib.cli.jar.JarProcessor.JarType;\n+import com.google.common.collect.ImmutableList;\n import com.google.common.io.Resources;\n import java.io.IOException;\n import java.net.URISyntaxException;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n public class JarProcessorTest {\n \n-  private static final String SPRING_BOOT_RESOURCE_DIR = \"jar/springboot/springboot_sample.jar\";\n-  private static final String STANDARD_RESOURCE_DIR = \"jar/standard/standardJar.jar\";\n+  private static final String SPRING_BOOT_JAR = \"jar/springboot/springboot_sample.jar\";\n+  private static final String STANDARD_JAR_WITH_CLASS_PATH_MANIFEST =\n+      \"jar/standard/standardJarWithClassPath.jar\";\n+  private static final String STANDARD_JAR_WITHOUT_CLASS_PATH_MANIFEST =\n+      \"jar/standard/standardJarWithoutClassPath.jar\";\n+  private static final String STANDARD_JAR_WITH_ONLY_CLASSES =\n+      \"jar/standard/standardJarWithOnlyClasses.jar\";\n+  private static final String STANDARD_JAR_EMPTY = \"jar/standard/emptyStandardJar.jar\";\n+\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n \n   @Test\n   public void testDetermineJarType_springBoot() throws IOException, URISyntaxException {\n-    Path springBootJar = Paths.get(Resources.getResource(SPRING_BOOT_RESOURCE_DIR).toURI());\n+    Path springBootJar = Paths.get(Resources.getResource(SPRING_BOOT_JAR).toURI());\n     JarType jarType = JarProcessor.determineJarType(springBootJar);\n     assertThat(jarType).isEqualTo(JarType.SPRING_BOOT);\n   }\n \n   @Test\n   public void testDetermineJarType_standard() throws IOException, URISyntaxException {\n-    Path standardJar = Paths.get(Resources.getResource(STANDARD_RESOURCE_DIR).toURI());\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_JAR_EMPTY).toURI());\n     JarType jarType = JarProcessor.determineJarType(standardJar);\n     assertThat(jarType).isEqualTo(JarType.STANDARD);\n   }\n+\n+  @Test\n+  public void testExplodeMode_standard_emptyJar() throws IOException, URISyntaxException {\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_JAR_EMPTY).toURI());\n+    Path destDir = temporaryFolder.newFolder().toPath();\n+    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar, destDir);\n+\n+    // Validate that only two layers are created.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxNzc3Ng=="}, "originalCommit": {"oid": "7adbee46cd82b4589229ffbfcae731665b452a4b"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzg0MTg3OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDo1ODo0MFrOHjPoVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDo1ODo0MFrOHjPoVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxODI5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Explode jar and create three layers for classes, resources and dependencies on container.\n          \n          \n            \n               * Explodes jar and create three layers for classes, resources and dependencies on container.\n          \n      \n    \n    \n  \n\nand we don't put a period for @param, @return and such, but honestly, I didn't care.", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r506718294", "createdAt": "2020-10-16T20:58:40Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +65,86 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7adbee46cd82b4589229ffbfcae731665b452a4b"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4951, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}