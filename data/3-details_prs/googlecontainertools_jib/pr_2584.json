{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4OTMyNzc3", "number": 2584, "title": "Adding the platform config methods to the ContainerBuildPlan api", "bodyText": "This PR adds the add / set/ get platform methods to the Container Builder Api .", "createdAt": "2020-07-14T14:54:13Z", "url": "https://github.com/GoogleContainerTools/jib/pull/2584", "merged": true, "mergeCommit": {"oid": "5cacef89c97902ad5188ac8e52a173fd70e20033"}, "closed": true, "closedAt": "2020-07-16T15:39:13Z", "author": {"login": "louismurerwa"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0n7jCgH2gAyNDQ4OTMyNzc3OjYxOTgxMzIzNjJmNmQxNDQxNzlhNmIyYTEzZTgwMzNhNDM1Mjg5YWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1g4jUAH2gAyNDQ4OTMyNzc3OmQzNGI2M2NiNWE4ZTMwZjdlZjcyMjg5NWExMGE2OWE1N2YzMTEyZWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6198132362f6d144179a6b2a13e8033a435289ac", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/6198132362f6d144179a6b2a13e8033a435289ac", "committedDate": "2020-07-13T21:01:29Z", "message": "Adding platforms to Build Plan"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab257027b270a12179fec4bf40c6fdc497a74dfb", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/ab257027b270a12179fec4bf40c6fdc497a74dfb", "committedDate": "2020-07-14T14:44:47Z", "message": "Platforms Api Methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MTg4ODkx", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#pullrequestreview-448188891", "createdAt": "2020-07-14T14:57:15Z", "commit": {"oid": "ab257027b270a12179fec4bf40c6fdc497a74dfb"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo1NzoxNVrOGxXoQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTowNzoyNlrOGxYGDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyMDU0Nw==", "bodyText": "nit: remove this", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454420547", "createdAt": "2020-07-14T14:57:15Z", "author": {"login": "chanseokoh"}, "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -93,6 +94,38 @@ public Builder setOsHint(String osHint) {\n       return this;\n     }\n \n+    /**\n+     * Adds a desired platform i.e image os and architecture pair. If the base image reference is a\n+     * Docker manifest list or an OCI image index, must be set so that an image builder can select\n+     * the image matching the given platform. If the base image reference is an image manifest, this\n+     * value is ignored and the platform of the built image follows that of the base image. The\n+     * default is {@code linux amd64 }.\n+     *\n+     * @param os value to select a base image in case of a manifest list\n+     * @param architecture value to select a base image in case of a manifest list\n+     * @return this\n+     */\n+    public Builder addPlatform(String os, String architecture) {\n+      this.platforms.add(new Platform(os, architecture));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab257027b270a12179fec4bf40c6fdc497a74dfb"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyMTM4NQ==", "bodyText": "\"... platform list (for example, OS and architecture) ...\"\nWe will expand platform to include more properties later.", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454421385", "createdAt": "2020-07-14T14:58:22Z", "author": {"login": "chanseokoh"}, "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -93,6 +94,38 @@ public Builder setOsHint(String osHint) {\n       return this;\n     }\n \n+    /**\n+     * Adds a desired platform i.e image os and architecture pair. If the base image reference is a\n+     * Docker manifest list or an OCI image index, must be set so that an image builder can select\n+     * the image matching the given platform. If the base image reference is an image manifest, this\n+     * value is ignored and the platform of the built image follows that of the base image. The\n+     * default is {@code linux amd64 }.\n+     *\n+     * @param os value to select a base image in case of a manifest list\n+     * @param architecture value to select a base image in case of a manifest list\n+     * @return this\n+     */\n+    public Builder addPlatform(String os, String architecture) {\n+      this.platforms.add(new Platform(os, architecture));\n+      return this;\n+    }\n+\n+    /**\n+     * Sets a desired platform list i.e os and architecture pairs. If the base image reference is a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab257027b270a12179fec4bf40c6fdc497a74dfb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyNTUwNQ==", "bodyText": "We don't use @Nonnull. Everything not @Nullable is assumed non-null.\nAlso, always add final if field references never change.", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454425505", "createdAt": "2020-07-14T15:03:42Z", "author": {"login": "chanseokoh"}, "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/Platform.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.api.buildplan;\n+\n+import javax.annotation.Nonnull;\n+\n+public class Platform {\n+  @Nonnull private String os;\n+  @Nonnull private String architecture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab257027b270a12179fec4bf40c6fdc497a74dfb"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyNjY1Mw==", "bodyText": "Add @Immutable as other classes.\nAlso our repo policy is to add a Javadoc for a public class. Can be a short one.", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454426653", "createdAt": "2020-07-14T15:05:19Z", "author": {"login": "chanseokoh"}, "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/Platform.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.api.buildplan;\n+\n+import javax.annotation.Nonnull;\n+\n+public class Platform {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab257027b270a12179fec4bf40c6fdc497a74dfb"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyODE3NA==", "bodyText": "nit: let's just inline this.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .setPlatforms(Arrays.asList(platform))\n          \n          \n            \n                    .setPlatforms(Arrays.asList(new Platform(\"os1\", \"arch1\")))", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454428174", "createdAt": "2020-07-14T15:07:26Z", "author": {"login": "chanseokoh"}, "path": "jib-build-plan/src/test/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlanTest.java", "diffHunk": "@@ -121,10 +127,12 @@ private ContainerBuildPlan createSamplePlan() {\n         FileEntriesLayer.builder()\n             .addEntry(Paths.get(\"/src/file/foo\"), AbsoluteUnixPath.get(\"/path/in/container\"))\n             .build();\n+    Platform platform = new Platform(\"os1\", \"arch1\");\n     return ContainerBuildPlan.builder()\n         .setBaseImage(\"base/image\")\n         .setArchitectureHint(\"arch\")\n         .setOsHint(\"os\")\n+        .setPlatforms(Arrays.asList(platform))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab257027b270a12179fec4bf40c6fdc497a74dfb"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MjE0ODYy", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#pullrequestreview-448214862", "createdAt": "2020-07-14T15:25:03Z", "commit": {"oid": "ab257027b270a12179fec4bf40c6fdc497a74dfb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNToyNTowM1rOGxY4oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNToyNzoxNlrOGxY_Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0MTEyMQ==", "bodyText": "We need to think about if this behavior is logical. For example,\n\n\ncase 1\n\nSomeone calls getPlatforms() at the beginning. It returns linux/amd64.\nThey call addPlatform(linux/arm64).\ngetPlatforms() returns linux/am64.\n\n\n\ncase 2\n\nSomeone calls setPlatforms( [ linux/amd64 ] ).\ngetPlatforms() returns linux/amd64.\nThey call addPlatform(linux/arm64).\ngetPlatforms() returns [ linux/amd64, linux/arm64 ].\n\n\n\nI think it's a bit counter-intuitive and may become a surprise.", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454441121", "createdAt": "2020-07-14T15:25:03Z", "author": {"login": "chanseokoh"}, "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -422,6 +459,20 @@ public String getOsHint() {\n     return osHint;\n   }\n \n+  /**\n+   * Creates and adds the user specified platform to the platforms list if user opts to use\n+   * setOsHint and setArchitectureHint methods.Else the method just returns the platforms list set\n+   * by the user using addPlatform or setPlatforms methods.\n+   *\n+   * @return platforms a list of desired platforms.\n+   */\n+  public List<Platform> getPlatforms() {\n+    if (platforms.isEmpty()) {\n+      platforms.add(new Platform(osHint, architectureHint));\n+    }\n+    return new ArrayList<>(platforms);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab257027b270a12179fec4bf40c6fdc497a74dfb"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0Mjc2Ng==", "bodyText": "Should we guard against passing an empty input?\n    if (platforms.isEmpty()) {\n      throw new IllegalArgumentException(\"some error message telling the caller that the list cannot be empty\");\n    }\nIf we disallow an empty list, it should also be documented in the Javadoc.", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454442766", "createdAt": "2020-07-14T15:27:16Z", "author": {"login": "chanseokoh"}, "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -93,6 +94,38 @@ public Builder setOsHint(String osHint) {\n       return this;\n     }\n \n+    /**\n+     * Adds a desired platform i.e image os and architecture pair. If the base image reference is a\n+     * Docker manifest list or an OCI image index, must be set so that an image builder can select\n+     * the image matching the given platform. If the base image reference is an image manifest, this\n+     * value is ignored and the platform of the built image follows that of the base image. The\n+     * default is {@code linux amd64 }.\n+     *\n+     * @param os value to select a base image in case of a manifest list\n+     * @param architecture value to select a base image in case of a manifest list\n+     * @return this\n+     */\n+    public Builder addPlatform(String os, String architecture) {\n+      this.platforms.add(new Platform(os, architecture));\n+      return this;\n+    }\n+\n+    /**\n+     * Sets a desired platform list i.e os and architecture pairs. If the base image reference is a\n+     * Docker manifest list or an OCI image index, must be set so that an image builder can select\n+     * the images matching the given platforms. If the base image reference is an image manifest,\n+     * this value is ignored and the platform of the built image follows that of the base image. The\n+     * default is {@code linux amd64 }.\n+     *\n+     * @param platforms a list of platform objects to be used to select base images in case of a\n+     *     manifest list\n+     * @return this\n+     */\n+    public Builder setPlatforms(List<Platform> platforms) {\n+      this.platforms = new ArrayList<>(platforms);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab257027b270a12179fec4bf40c6fdc497a74dfb"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b770518fd58e35f4274f10c5c64a797d9236c4a9", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/b770518fd58e35f4274f10c5c64a797d9236c4a9", "committedDate": "2020-07-14T18:04:54Z", "message": "Removed get/set/os/archHint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4803cecc5a3e225c7518ee55ed1f48d1c5b7c557", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/4803cecc5a3e225c7518ee55ed1f48d1c5b7c557", "committedDate": "2020-07-14T18:12:15Z", "message": "Comment Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4da89a964274a73c8144ce4204f1cabbb366ddd4", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/4da89a964274a73c8144ce4204f1cabbb366ddd4", "committedDate": "2020-07-14T18:27:53Z", "message": "Adding default platform to addPlatform"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4Mzc3OTY2", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#pullrequestreview-448377966", "createdAt": "2020-07-14T18:54:40Z", "commit": {"oid": "4da89a964274a73c8144ce4204f1cabbb366ddd4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODo1NDo0MFrOGxg-dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODo1NDo0MFrOGxg-dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU3MzY4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"platforms list cannot be empty.Please pass in a non-empty platforms list.\");\n          \n          \n            \n                        \"platforms list cannot be empty.\");", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454573687", "createdAt": "2020-07-14T18:54:40Z", "author": {"login": "chanseokoh"}, "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -65,31 +64,42 @@ public Builder setBaseImage(String baseImage) {\n     }\n \n     /**\n-     * Desired image architecture. If the base image reference is a Docker manifest list or an OCI\n-     * image index, must be set so that an image builder can select the image matching the given\n-     * architecture. If the base image reference is not a manifest list or an OCI image index, this\n-     * value is ignored and the architecture of the built image follows that of the base image. The\n-     * default is {@code amd64}.\n+     * Adds a desired platform (OS and architecture pair). If the base image reference is a Docker\n+     * manifest list or an OCI image index, must be set so that an image builder can select the\n+     * image matching the given platform. If the base image reference is an image manifest, this\n+     * value is ignored and the platform of the built image follows that of the base image. The\n+     * default is {@code linux amd64 }.\n      *\n-     * @param architectureHint architecture value to select a base image in case of a manifest list\n+     * @param os value to select a base image in case of a manifest list\n+     * @param architecture value to select a base image in case of a manifest list\n      * @return this\n      */\n-    public Builder setArchitectureHint(String architectureHint) {\n-      this.architectureHint = architectureHint;\n+    public Builder addPlatform(String os, String architecture) {\n+      if (platforms.isEmpty()) {\n+        platforms.add(new Platform(\"linux\", \"amd64\"));\n+      }\n+      platforms.add(new Platform(os, architecture));\n       return this;\n     }\n \n     /**\n-     * Desired image OS. If the base image reference is a Docker manifest list or an OCI image\n-     * index, must be set so that an image builder can select the image matching the given OS. If\n-     * the base image reference is an image manifest, this value is ignored and the OS of the built\n-     * image follows that of the base image. The default is {@code linux}.\n+     * Sets a desired platform list ,a list containing (OS and architecture pairs). If the base\n+     * image reference is a Docker manifest list or an OCI image index, must be set so that an image\n+     * builder can select the images matching the given platforms. If the base image reference is an\n+     * image manifest, this value is ignored and the platform of the built image follows that of the\n+     * base image. The default is {@code linux amd64 }.\n      *\n-     * @param osHint OS value to select a base image in case of a manifest list\n+     * @param platforms is a list of platform objects to be used to select base images in case of a\n+     *     manifest list\n      * @return this\n+     * @throws IllegalArgumentException if a user passes in an empty platform list\n      */\n-    public Builder setOsHint(String osHint) {\n-      this.osHint = osHint;\n+    public Builder setPlatforms(List<Platform> platforms) throws IllegalArgumentException {\n+      if (platforms.isEmpty()) {\n+        throw new IllegalArgumentException(\n+            \"platforms list cannot be empty.Please pass in a non-empty platforms list.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4da89a964274a73c8144ce4204f1cabbb366ddd4"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d53153f3dd7ef9066caea2d0c23f3a3d8a6ed527", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/d53153f3dd7ef9066caea2d0c23f3a3d8a6ed527", "committedDate": "2020-07-14T20:02:28Z", "message": "Implemanting the functionality to check for duplicate platforms"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NDI5Nzc4", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#pullrequestreview-448429778", "createdAt": "2020-07-14T20:12:05Z", "commit": {"oid": "d53153f3dd7ef9066caea2d0c23f3a3d8a6ed527"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMDoxMjowNVrOGxjiGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMDoxMjowNVrOGxjiGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxNTU3OA==", "bodyText": "private Set<Platform> platforms = new LinkedHashSet<>(Collections.singleton(new Platform(\"linux\", \"amd64\")));\nYou can then remove all the \"if empty then add amd64/linux as a default\" code in multiple places.", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r454615578", "createdAt": "2020-07-14T20:12:05Z", "author": {"login": "chanseokoh"}, "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -34,11 +35,13 @@\n   public static class Builder {\n \n     private String baseImage = \"scratch\";\n-    private String architectureHint = \"amd64\";\n-    private String osHint = \"linux\";\n     private Instant creationTime = Instant.EPOCH;\n     private ImageFormat format = ImageFormat.Docker;\n \n+    // note that a LinkedHashSet instead of HashSet has been used so as to preserve the platform\n+    // order\n+    private Set<Platform> platforms = new LinkedHashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53153f3dd7ef9066caea2d0c23f3a3d8a6ed527"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a55cafcbdaf65b191dd71a23e2ebcd4f718c7c91", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/a55cafcbdaf65b191dd71a23e2ebcd4f718c7c91", "committedDate": "2020-07-14T20:26:50Z", "message": "Style FIxes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b97d19c6963cc15b13253a4cb249a1a7431423e", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/5b97d19c6963cc15b13253a4cb249a1a7431423e", "committedDate": "2020-07-15T15:07:12Z", "message": "set/addPlatforms Testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95da631902ff3cb7cd59dbf4e67c07484f28f382", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/95da631902ff3cb7cd59dbf4e67c07484f28f382", "committedDate": "2020-07-15T15:12:23Z", "message": "Merge remote-tracking branch 'origin' into ContainerBuildPlan"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MjIyNzQ4", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#pullrequestreview-449222748", "createdAt": "2020-07-15T18:27:42Z", "commit": {"oid": "95da631902ff3cb7cd59dbf4e67c07484f28f382"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODoyNzo0MlrOGyKosQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODoyNzo0MlrOGyKosQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1NjI0MQ==", "bodyText": "platforms set cannot be empty - I will correct this", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r455256241", "createdAt": "2020-07-15T18:27:42Z", "author": {"login": "louismurerwa"}, "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -65,31 +70,41 @@ public Builder setBaseImage(String baseImage) {\n     }\n \n     /**\n-     * Desired image architecture. If the base image reference is a Docker manifest list or an OCI\n-     * image index, must be set so that an image builder can select the image matching the given\n-     * architecture. If the base image reference is not a manifest list or an OCI image index, this\n-     * value is ignored and the architecture of the built image follows that of the base image. The\n-     * default is {@code amd64}.\n+     * Adds a desired platform (OS and architecture pair). If the base image reference is a Docker\n+     * manifest list or an OCI image index, must be set so that an image builder can select the\n+     * image matching the given platform. If the base image reference is an image manifest, this\n+     * value is ignored and the platform of the built image follows that of the base image. The\n+     * default is {@code linux amd64 }.\n+     *\n+     * <p>Note that the build plan starts with amd64/linux as the default platform. If you want to\n+     * reset the default platform instead of adding a new one, use setPlatforms()\"\n      *\n-     * @param architectureHint architecture value to select a base image in case of a manifest list\n+     * @param os value to select a base image in case of a manifest list\n+     * @param architecture value to select a base image in case of a manifest list\n      * @return this\n      */\n-    public Builder setArchitectureHint(String architectureHint) {\n-      this.architectureHint = architectureHint;\n+    public Builder addPlatform(String os, String architecture) {\n+      platforms.add(new Platform(os, architecture));\n       return this;\n     }\n \n     /**\n-     * Desired image OS. If the base image reference is a Docker manifest list or an OCI image\n-     * index, must be set so that an image builder can select the image matching the given OS. If\n-     * the base image reference is an image manifest, this value is ignored and the OS of the built\n-     * image follows that of the base image. The default is {@code linux}.\n+     * Sets a desired platform list ,a list containing (OS and architecture pairs). If the base\n+     * image reference is a Docker manifest list or an OCI image index, must be set so that an image\n+     * builder can select the images matching the given platforms. If the base image reference is an\n+     * image manifest, this value is ignored and the platform of the built image follows that of the\n+     * base image. The default is {@code linux amd64 }.\n      *\n-     * @param osHint OS value to select a base image in case of a manifest list\n+     * @param platforms is a list of platform objects to be used to select base images in case of a\n+     *     manifest list\n      * @return this\n+     * @throws IllegalArgumentException if a user passes in an empty platform list\n      */\n-    public Builder setOsHint(String osHint) {\n-      this.osHint = osHint;\n+    public Builder setPlatforms(Set<Platform> platforms) throws IllegalArgumentException {\n+      if (platforms.isEmpty()) {\n+        throw new IllegalArgumentException(\"platforms list cannot be empty.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95da631902ff3cb7cd59dbf4e67c07484f28f382"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97e4a87fd150656488a2826190bbeea0f526a18b", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/97e4a87fd150656488a2826190bbeea0f526a18b", "committedDate": "2020-07-16T14:33:08Z", "message": "Style Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97115faa9c69493bd98deab16dc6fccd2a8bcde6", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/97115faa9c69493bd98deab16dc6fccd2a8bcde6", "committedDate": "2020-07-16T15:18:12Z", "message": "Test Fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTU0NTky", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#pullrequestreview-449954592", "createdAt": "2020-07-16T15:19:52Z", "commit": {"oid": "97115faa9c69493bd98deab16dc6fccd2a8bcde6"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNToxOTo1MlrOGyv_Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNToxOTo1MlrOGyv_Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg2ODI0Nw==", "bodyText": "e --> ex per Google Java style", "url": "https://github.com/GoogleContainerTools/jib/pull/2584#discussion_r455868247", "createdAt": "2020-07-16T15:19:52Z", "author": {"login": "chanseokoh"}, "path": "jib-build-plan/src/test/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlanTest.java", "diffHunk": "@@ -116,15 +115,37 @@ public void testToBuilder() {\n         ((FileEntriesLayer) plan.getLayers().get(0)).getEntries());\n   }\n \n+  @Test\n+  public void testAddPlatform_DuplicatePlatforms() {\n+    ContainerBuildPlan plan =\n+        ContainerBuildPlan.builder()\n+            .addPlatform(\"testOS\", \"testArchitecture\")\n+            .addPlatform(\"testOS\", \"testArchitecture\")\n+            .build();\n+    Assert.assertEquals(\n+        ImmutableSet.of(new Platform(\"linux\", \"amd64\"), new Platform(\"testOS\", \"testArchitecture\")),\n+        plan.getPlatforms());\n+  }\n+\n+  @Test\n+  public void testSetPlatforms_EmptyPlatformsSet() {\n+    try {\n+      ContainerBuildPlan.builder().setPlatforms(Collections.emptySet()).build();\n+      Assert.fail();\n+    } catch (IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97115faa9c69493bd98deab16dc6fccd2a8bcde6"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d34b63cb5a8e30f7ef722895a10a69a57f3112ee", "author": {"user": {"login": "louismurerwa", "name": "Louis Murerwa"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/d34b63cb5a8e30f7ef722895a10a69a57f3112ee", "committedDate": "2020-07-16T15:22:48Z", "message": "Style Fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 76, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}