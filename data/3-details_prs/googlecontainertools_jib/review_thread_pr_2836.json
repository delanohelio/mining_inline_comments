{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MDkyMzM4", "number": 2836, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDo0MjoyMlrOEurUHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjo0MDozNlrOEus6MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzc5NjEyOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/JibCliTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDo0MjoyMlrOHjPN1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDo0MjoyMlrOHjPN1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxMTUwOQ==", "bodyText": "also just a minor update to fix mixing test case", "url": "https://github.com/GoogleContainerTools/jib/pull/2836#discussion_r506711509", "createdAt": "2020-10-16T20:42:22Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/JibCliTest.java", "diffHunk": "@@ -387,6 +387,8 @@ public void testParse_passwordWithoutUsername() {\n             {{\"--username=x\", \"--password=x\", \"--to-username=x\", \"--to-password=x\"}},\n             {{\"--username=x\", \"--password=x\", \"--to-credential-helper=x\"}},\n             {{\"--username=x\", \"--password=x\", \"--from-credential-helper=x\"}},\n+            {{\"--from-credential-helper=x\", \"--from-username=x\", \"--from-password=x\"}},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6925c046e5ee6172801cff8d6b526a76390fec93"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzg4OTA2OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Credentials.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMToxNzo1M1rOHjQD1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMToxNzo1M1rOHjQD1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcyNTMzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Get credentials for a target image registry.\n          \n          \n            \n               * Gets credentials for a target image registry.", "url": "https://github.com/GoogleContainerTools/jib/pull/2836#discussion_r506725334", "createdAt": "2020-10-16T21:17:53Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Credentials.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.api.CredentialRetriever;\n+import com.google.cloud.tools.jib.plugins.common.DefaultCredentialRetrievers;\n+import java.io.FileNotFoundException;\n+import java.util.List;\n+\n+/**\n+ * A helper class to process command line args and generate a list of {@link CredentialRetriever}s.\n+ */\n+public class Credentials {\n+  /**\n+   * Get credentials for a target image registry.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6925c046e5ee6172801cff8d6b526a76390fec93"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzg5ODU1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CredentialsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMToyMTo0NlrOHjQJjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTozNzowNFrOHjQeeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcyNjc5Nw==", "bodyText": "All these can be final.", "url": "https://github.com/GoogleContainerTools/jib/pull/2836#discussion_r506726797", "createdAt": "2020-10-16T21:21:46Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CredentialsTest.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.api.Credential;\n+import com.google.cloud.tools.jib.plugins.common.DefaultCredentialRetrievers;\n+import java.io.FileNotFoundException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import picocli.CommandLine;\n+\n+public class CredentialsTest {\n+\n+  private static final String[] DEFAULT_ARGS = {\"--target=ignored\"};\n+\n+  @RunWith(Parameterized.class)\n+  public static class GetToCredentialRetrieversNone {\n+    @Rule public MockitoRule mockitoJUnit = MockitoJUnit.rule();\n+    @Mock private DefaultCredentialRetrievers defaultCredentialRetrievers;\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+      return Arrays.asList(\n+          new Object[][] {\n+            {new String[] {\"--from-credential-helper=ignored\"}},\n+            {new String[] {\"--from-username=ignored\", \"--from-password=ignored\"}},\n+          });\n+    }\n+\n+    @Parameterized.Parameter(0)\n+    public String[] args;\n+\n+    @Test\n+    public void testGetToCredentialRetriever() throws FileNotFoundException {\n+      JibCli buildOptions =\n+          CommandLine.populateCommand(new JibCli(), ArrayUtils.addAll(DEFAULT_ARGS, args));\n+      Credentials.getToCredentialRetrievers(buildOptions, defaultCredentialRetrievers);\n+      Mockito.verify(defaultCredentialRetrievers).asList();\n+      Mockito.verifyNoMoreInteractions(defaultCredentialRetrievers);\n+    }\n+  }\n+\n+  @RunWith(Parameterized.class)\n+  public static class GetFromCredentialRetrieversNone {\n+    @Rule public MockitoRule mockitoJUnit = MockitoJUnit.rule();\n+    @Mock private DefaultCredentialRetrievers defaultCredentialRetrievers;\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+      return Arrays.asList(\n+          new Object[][] {\n+            {new String[] {\"--to-credential-helper=ignored\"}},\n+            {new String[] {\"--to-username=ignored\", \"--to-password=ignored\"}},\n+          });\n+    }\n+\n+    @Parameterized.Parameter(0)\n+    public String[] args;\n+\n+    @Test\n+    public void testGetFromCredentialRetriever() throws FileNotFoundException {\n+      JibCli buildOptions =\n+          CommandLine.populateCommand(new JibCli(), ArrayUtils.addAll(DEFAULT_ARGS, args));\n+      Credentials.getFromCredentialRetrievers(buildOptions, defaultCredentialRetrievers);\n+      Mockito.verify(defaultCredentialRetrievers).asList();\n+      Mockito.verifyNoMoreInteractions(defaultCredentialRetrievers);\n+    }\n+  }\n+\n+  @RunWith(Parameterized.class)\n+  public static class GetToCredentialRetrieversCredentialHelpers {\n+    @Rule public MockitoRule mockitoJUnit = MockitoJUnit.rule();\n+    @Mock private DefaultCredentialRetrievers defaultCredentialRetrievers;\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+      return Arrays.asList(\n+          new Object[][] {\n+            {new String[] {\"--credential-helper=abc\"}},\n+            {new String[] {\"--to-credential-helper=abc\"}},\n+            {new String[] {\"--to-credential-helper=abc\", \"--from-credential-helper=ignored\"}},\n+            {\n+              new String[] {\n+                \"--to-credential-helper=abc\", \"--from-username=ignored\", \"--from-password=ignored\"\n+              }\n+            },\n+          });\n+    }\n+\n+    @Parameterized.Parameter public String[] args;\n+\n+    @Test\n+    public void testGetToCredentialRetriever() throws FileNotFoundException {\n+      JibCli buildOptions =\n+          CommandLine.populateCommand(new JibCli(), ArrayUtils.addAll(DEFAULT_ARGS, args));\n+      Credentials.getToCredentialRetrievers(buildOptions, defaultCredentialRetrievers);\n+      Mockito.verify(defaultCredentialRetrievers).setCredentialHelper(\"abc\");\n+      Mockito.verify(defaultCredentialRetrievers).asList();\n+      Mockito.verifyNoMoreInteractions(defaultCredentialRetrievers);\n+    }\n+  }\n+\n+  @RunWith(Parameterized.class)\n+  public static class GetFromCredentialRetrieverCredentialHelper {\n+    @Rule public MockitoRule mockitoJUnit = MockitoJUnit.rule();\n+    @Mock private DefaultCredentialRetrievers defaultCredentialRetrievers;\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+      return Arrays.asList(\n+          new Object[][] {\n+            {new String[] {\"--credential-helper=abc\"}},\n+            {new String[] {\"--from-credential-helper=abc\"}},\n+            {new String[] {\"--from-credential-helper=abc\", \"--to-credential-helper=ignored\"}},\n+            {\n+              new String[] {\n+                \"--from-credential-helper=abc\", \"--to-username=ignored\", \"--to-password=ignored\"\n+              }\n+            },\n+          });\n+    }\n+\n+    @Parameterized.Parameter public String[] args;\n+\n+    @Test\n+    public void testGetFromCredentialRetriever() throws FileNotFoundException {\n+      JibCli buildOptions =\n+          CommandLine.populateCommand(new JibCli(), ArrayUtils.addAll(DEFAULT_ARGS, args));\n+      Credentials.getFromCredentialRetrievers(buildOptions, defaultCredentialRetrievers);\n+      Mockito.verify(defaultCredentialRetrievers).setCredentialHelper(\"abc\");\n+      Mockito.verify(defaultCredentialRetrievers).asList();\n+      Mockito.verifyNoMoreInteractions(defaultCredentialRetrievers);\n+    }\n+  }\n+\n+  @RunWith(Parameterized.class)\n+  public static class GetToCredentialRetrieverUsernamePassword {\n+    @Rule public MockitoRule mockitoJUnit = MockitoJUnit.rule();\n+    @Mock private DefaultCredentialRetrievers defaultCredentialRetrievers;\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+      return Arrays.asList(\n+          new Object[][] {\n+            {\"--username/--password\", new String[] {\"--username=abc\", \"--password=xyz\"}},\n+            {\n+              \"--to-username/--to-password\", new String[] {\"--to-username=abc\", \"--to-password=xyz\"}\n+            },\n+            {\n+              \"--to-username/--to-password\",\n+              new String[] {\n+                \"--to-username=abc\",\n+                \"--to-password=xyz\",\n+                \"--from-username=ignored\",\n+                \"--from-password=ignored\"\n+              }\n+            },\n+            {\n+              \"--to-username/--to-password\",\n+              new String[] {\n+                \"--to-username=abc\", \"--to-password=xyz\", \"--from-credential-helper=ignored\"\n+              }\n+            },\n+          });\n+    }\n+\n+    @Parameterized.Parameter(0)\n+    public String expectedSource;\n+\n+    @Parameterized.Parameter(1)\n+    public String[] args;\n+\n+    @Test\n+    public void testGetToCredentialRetriever() throws FileNotFoundException {\n+      JibCli buildOptions =\n+          CommandLine.populateCommand(new JibCli(), ArrayUtils.addAll(DEFAULT_ARGS, args));\n+      Credentials.getToCredentialRetrievers(buildOptions, defaultCredentialRetrievers);\n+      ArgumentCaptor<Credential> captor = ArgumentCaptor.forClass(Credential.class);\n+      Mockito.verify(defaultCredentialRetrievers)\n+          .setKnownCredential(captor.capture(), ArgumentMatchers.eq(expectedSource));\n+      assertThat(captor.getValue()).isEqualTo(Credential.from(\"abc\", \"xyz\"));\n+      Mockito.verify(defaultCredentialRetrievers).asList();\n+      Mockito.verifyNoMoreInteractions(defaultCredentialRetrievers);\n+    }\n+  }\n+\n+  @RunWith(Parameterized.class)\n+  public static class GetFromCredentialRetrieverUsernamePassword {\n+    @Rule public MockitoRule mockitoJUnit = MockitoJUnit.rule();\n+    @Mock private DefaultCredentialRetrievers defaultCredentialRetrievers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6925c046e5ee6172801cff8d6b526a76390fec93"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczMjE1Mg==", "bodyText": "yeah I keep making this mistake, I should be more careful, maybe there's a rule we can add to something", "url": "https://github.com/GoogleContainerTools/jib/pull/2836#discussion_r506732152", "createdAt": "2020-10-16T21:37:04Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CredentialsTest.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.api.Credential;\n+import com.google.cloud.tools.jib.plugins.common.DefaultCredentialRetrievers;\n+import java.io.FileNotFoundException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import picocli.CommandLine;\n+\n+public class CredentialsTest {\n+\n+  private static final String[] DEFAULT_ARGS = {\"--target=ignored\"};\n+\n+  @RunWith(Parameterized.class)\n+  public static class GetToCredentialRetrieversNone {\n+    @Rule public MockitoRule mockitoJUnit = MockitoJUnit.rule();\n+    @Mock private DefaultCredentialRetrievers defaultCredentialRetrievers;\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+      return Arrays.asList(\n+          new Object[][] {\n+            {new String[] {\"--from-credential-helper=ignored\"}},\n+            {new String[] {\"--from-username=ignored\", \"--from-password=ignored\"}},\n+          });\n+    }\n+\n+    @Parameterized.Parameter(0)\n+    public String[] args;\n+\n+    @Test\n+    public void testGetToCredentialRetriever() throws FileNotFoundException {\n+      JibCli buildOptions =\n+          CommandLine.populateCommand(new JibCli(), ArrayUtils.addAll(DEFAULT_ARGS, args));\n+      Credentials.getToCredentialRetrievers(buildOptions, defaultCredentialRetrievers);\n+      Mockito.verify(defaultCredentialRetrievers).asList();\n+      Mockito.verifyNoMoreInteractions(defaultCredentialRetrievers);\n+    }\n+  }\n+\n+  @RunWith(Parameterized.class)\n+  public static class GetFromCredentialRetrieversNone {\n+    @Rule public MockitoRule mockitoJUnit = MockitoJUnit.rule();\n+    @Mock private DefaultCredentialRetrievers defaultCredentialRetrievers;\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+      return Arrays.asList(\n+          new Object[][] {\n+            {new String[] {\"--to-credential-helper=ignored\"}},\n+            {new String[] {\"--to-username=ignored\", \"--to-password=ignored\"}},\n+          });\n+    }\n+\n+    @Parameterized.Parameter(0)\n+    public String[] args;\n+\n+    @Test\n+    public void testGetFromCredentialRetriever() throws FileNotFoundException {\n+      JibCli buildOptions =\n+          CommandLine.populateCommand(new JibCli(), ArrayUtils.addAll(DEFAULT_ARGS, args));\n+      Credentials.getFromCredentialRetrievers(buildOptions, defaultCredentialRetrievers);\n+      Mockito.verify(defaultCredentialRetrievers).asList();\n+      Mockito.verifyNoMoreInteractions(defaultCredentialRetrievers);\n+    }\n+  }\n+\n+  @RunWith(Parameterized.class)\n+  public static class GetToCredentialRetrieversCredentialHelpers {\n+    @Rule public MockitoRule mockitoJUnit = MockitoJUnit.rule();\n+    @Mock private DefaultCredentialRetrievers defaultCredentialRetrievers;\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+      return Arrays.asList(\n+          new Object[][] {\n+            {new String[] {\"--credential-helper=abc\"}},\n+            {new String[] {\"--to-credential-helper=abc\"}},\n+            {new String[] {\"--to-credential-helper=abc\", \"--from-credential-helper=ignored\"}},\n+            {\n+              new String[] {\n+                \"--to-credential-helper=abc\", \"--from-username=ignored\", \"--from-password=ignored\"\n+              }\n+            },\n+          });\n+    }\n+\n+    @Parameterized.Parameter public String[] args;\n+\n+    @Test\n+    public void testGetToCredentialRetriever() throws FileNotFoundException {\n+      JibCli buildOptions =\n+          CommandLine.populateCommand(new JibCli(), ArrayUtils.addAll(DEFAULT_ARGS, args));\n+      Credentials.getToCredentialRetrievers(buildOptions, defaultCredentialRetrievers);\n+      Mockito.verify(defaultCredentialRetrievers).setCredentialHelper(\"abc\");\n+      Mockito.verify(defaultCredentialRetrievers).asList();\n+      Mockito.verifyNoMoreInteractions(defaultCredentialRetrievers);\n+    }\n+  }\n+\n+  @RunWith(Parameterized.class)\n+  public static class GetFromCredentialRetrieverCredentialHelper {\n+    @Rule public MockitoRule mockitoJUnit = MockitoJUnit.rule();\n+    @Mock private DefaultCredentialRetrievers defaultCredentialRetrievers;\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+      return Arrays.asList(\n+          new Object[][] {\n+            {new String[] {\"--credential-helper=abc\"}},\n+            {new String[] {\"--from-credential-helper=abc\"}},\n+            {new String[] {\"--from-credential-helper=abc\", \"--to-credential-helper=ignored\"}},\n+            {\n+              new String[] {\n+                \"--from-credential-helper=abc\", \"--to-username=ignored\", \"--to-password=ignored\"\n+              }\n+            },\n+          });\n+    }\n+\n+    @Parameterized.Parameter public String[] args;\n+\n+    @Test\n+    public void testGetFromCredentialRetriever() throws FileNotFoundException {\n+      JibCli buildOptions =\n+          CommandLine.populateCommand(new JibCli(), ArrayUtils.addAll(DEFAULT_ARGS, args));\n+      Credentials.getFromCredentialRetrievers(buildOptions, defaultCredentialRetrievers);\n+      Mockito.verify(defaultCredentialRetrievers).setCredentialHelper(\"abc\");\n+      Mockito.verify(defaultCredentialRetrievers).asList();\n+      Mockito.verifyNoMoreInteractions(defaultCredentialRetrievers);\n+    }\n+  }\n+\n+  @RunWith(Parameterized.class)\n+  public static class GetToCredentialRetrieverUsernamePassword {\n+    @Rule public MockitoRule mockitoJUnit = MockitoJUnit.rule();\n+    @Mock private DefaultCredentialRetrievers defaultCredentialRetrievers;\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+      return Arrays.asList(\n+          new Object[][] {\n+            {\"--username/--password\", new String[] {\"--username=abc\", \"--password=xyz\"}},\n+            {\n+              \"--to-username/--to-password\", new String[] {\"--to-username=abc\", \"--to-password=xyz\"}\n+            },\n+            {\n+              \"--to-username/--to-password\",\n+              new String[] {\n+                \"--to-username=abc\",\n+                \"--to-password=xyz\",\n+                \"--from-username=ignored\",\n+                \"--from-password=ignored\"\n+              }\n+            },\n+            {\n+              \"--to-username/--to-password\",\n+              new String[] {\n+                \"--to-username=abc\", \"--to-password=xyz\", \"--from-credential-helper=ignored\"\n+              }\n+            },\n+          });\n+    }\n+\n+    @Parameterized.Parameter(0)\n+    public String expectedSource;\n+\n+    @Parameterized.Parameter(1)\n+    public String[] args;\n+\n+    @Test\n+    public void testGetToCredentialRetriever() throws FileNotFoundException {\n+      JibCli buildOptions =\n+          CommandLine.populateCommand(new JibCli(), ArrayUtils.addAll(DEFAULT_ARGS, args));\n+      Credentials.getToCredentialRetrievers(buildOptions, defaultCredentialRetrievers);\n+      ArgumentCaptor<Credential> captor = ArgumentCaptor.forClass(Credential.class);\n+      Mockito.verify(defaultCredentialRetrievers)\n+          .setKnownCredential(captor.capture(), ArgumentMatchers.eq(expectedSource));\n+      assertThat(captor.getValue()).isEqualTo(Credential.from(\"abc\", \"xyz\"));\n+      Mockito.verify(defaultCredentialRetrievers).asList();\n+      Mockito.verifyNoMoreInteractions(defaultCredentialRetrievers);\n+    }\n+  }\n+\n+  @RunWith(Parameterized.class)\n+  public static class GetFromCredentialRetrieverUsernamePassword {\n+    @Rule public MockitoRule mockitoJUnit = MockitoJUnit.rule();\n+    @Mock private DefaultCredentialRetrievers defaultCredentialRetrievers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcyNjc5Nw=="}, "originalCommit": {"oid": "6925c046e5ee6172801cff8d6b526a76390fec93"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDA1NzQ0OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CredentialsTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjo0MDozNlrOHjRmow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDoxNDozMVrOHkQqMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1MDYyNw==", "bodyText": "optional: Not sure how this would look but how about specifying the params directly in the tests instead of calling a method?", "url": "https://github.com/GoogleContainerTools/jib/pull/2836#discussion_r506750627", "createdAt": "2020-10-16T22:40:36Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CredentialsTest.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.api.Credential;\n+import com.google.cloud.tools.jib.plugins.common.DefaultCredentialRetrievers;\n+import junitparams.JUnitParamsRunner;\n+import junitparams.Parameters;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import picocli.CommandLine;\n+\n+import java.io.FileNotFoundException;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+@RunWith(JUnitParamsRunner.class)\n+public class CredentialsTest {\n+\n+  private static final String[] DEFAULT_ARGS = {\"--target=ignored\"};\n+  @Rule public final MockitoRule mockitoJUnit = MockitoJUnit.rule();\n+  @Mock private DefaultCredentialRetrievers defaultCredentialRetrievers;\n+\n+  private Object paramsToNone() {\n+    return new Object[]{\n+        new String[]{\"--from-credential-helper=ignored\"},\n+        new String[]{\"--from-username=ignored\", \"--from-password=ignored\"},\n+    };\n+  }\n+\n+  @Test\n+  @Parameters(method = \"paramsToNone\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dfa535a5a33b6d10bf4e7d0669248c5e59ac31a"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3Njc4NQ==", "bodyText": "It does doesn't appear to work for array types.", "url": "https://github.com/GoogleContainerTools/jib/pull/2836#discussion_r506776785", "createdAt": "2020-10-17T01:13:21Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CredentialsTest.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.api.Credential;\n+import com.google.cloud.tools.jib.plugins.common.DefaultCredentialRetrievers;\n+import junitparams.JUnitParamsRunner;\n+import junitparams.Parameters;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import picocli.CommandLine;\n+\n+import java.io.FileNotFoundException;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+@RunWith(JUnitParamsRunner.class)\n+public class CredentialsTest {\n+\n+  private static final String[] DEFAULT_ARGS = {\"--target=ignored\"};\n+  @Rule public final MockitoRule mockitoJUnit = MockitoJUnit.rule();\n+  @Mock private DefaultCredentialRetrievers defaultCredentialRetrievers;\n+\n+  private Object paramsToNone() {\n+    return new Object[]{\n+        new String[]{\"--from-credential-helper=ignored\"},\n+        new String[]{\"--from-username=ignored\", \"--from-password=ignored\"},\n+    };\n+  }\n+\n+  @Test\n+  @Parameters(method = \"paramsToNone\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1MDYyNw=="}, "originalCommit": {"oid": "2dfa535a5a33b6d10bf4e7d0669248c5e59ac31a"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4MzcyOA==", "bodyText": "Probably @loosebazooka meant \"doesn't.\"", "url": "https://github.com/GoogleContainerTools/jib/pull/2836#discussion_r507783728", "createdAt": "2020-10-19T14:14:31Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CredentialsTest.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.api.Credential;\n+import com.google.cloud.tools.jib.plugins.common.DefaultCredentialRetrievers;\n+import junitparams.JUnitParamsRunner;\n+import junitparams.Parameters;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import picocli.CommandLine;\n+\n+import java.io.FileNotFoundException;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+@RunWith(JUnitParamsRunner.class)\n+public class CredentialsTest {\n+\n+  private static final String[] DEFAULT_ARGS = {\"--target=ignored\"};\n+  @Rule public final MockitoRule mockitoJUnit = MockitoJUnit.rule();\n+  @Mock private DefaultCredentialRetrievers defaultCredentialRetrievers;\n+\n+  private Object paramsToNone() {\n+    return new Object[]{\n+        new String[]{\"--from-credential-helper=ignored\"},\n+        new String[]{\"--from-username=ignored\", \"--from-password=ignored\"},\n+    };\n+  }\n+\n+  @Test\n+  @Parameters(method = \"paramsToNone\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1MDYyNw=="}, "originalCommit": {"oid": "2dfa535a5a33b6d10bf4e7d0669248c5e59ac31a"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4976, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}