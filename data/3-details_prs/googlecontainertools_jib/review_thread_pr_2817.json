{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxODE0MjIz", "number": 2817, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTowMDozM1rOEthzzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODo1ODoxOVrOEuIa3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTc1MzA5OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CliLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTowMDozM1rOHhXgKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTo0NzoxN1rOHhZp0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1MDEyMQ==", "bodyText": "I was looking through the code again, I think the handling of lifecycle is wrong here. That appears to be always enabled in the plugins.", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r504750121", "createdAt": "2020-10-14T15:00:33Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CliLogger.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLoggerBuilder;\n+import com.google.cloud.tools.jib.plugins.common.logging.SingleThreadedExecutor;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+/** A simple cli logger that logs to the command line based on the configured log level. */\n+public class CliLogger {\n+  public static ConsoleLogger newLogger(JibCli.Verbosity verbosity) {\n+    return newLogger(ConsoleLoggerBuilder.rich(new SingleThreadedExecutor(), true), verbosity);\n+  }\n+\n+  @VisibleForTesting\n+  static ConsoleLogger newLogger(ConsoleLoggerBuilder builder, JibCli.Verbosity verbosity) {\n+    if (verbosity.value() >= JibCli.Verbosity.error.value()) {\n+      builder.error(System.err::println);\n+    }\n+    if (verbosity.value() >= JibCli.Verbosity.warn.value()) {\n+      builder.warn(System.out::println);\n+    }\n+    if (verbosity.value() >= JibCli.Verbosity.lifecycle.value()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d659b763d8f9675a369c025b1ff5a860f3a473"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc4NTM2Mg==", "bodyText": "Well I think this is right, we do something stranger in our code where lifecycle is always enabled (even in warn/error?) but the underlying logger will not print unless lifecycle is enabled.", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r504785362", "createdAt": "2020-10-14T15:47:17Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CliLogger.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLoggerBuilder;\n+import com.google.cloud.tools.jib.plugins.common.logging.SingleThreadedExecutor;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+/** A simple cli logger that logs to the command line based on the configured log level. */\n+public class CliLogger {\n+  public static ConsoleLogger newLogger(JibCli.Verbosity verbosity) {\n+    return newLogger(ConsoleLoggerBuilder.rich(new SingleThreadedExecutor(), true), verbosity);\n+  }\n+\n+  @VisibleForTesting\n+  static ConsoleLogger newLogger(ConsoleLoggerBuilder builder, JibCli.Verbosity verbosity) {\n+    if (verbosity.value() >= JibCli.Verbosity.error.value()) {\n+      builder.error(System.err::println);\n+    }\n+    if (verbosity.value() >= JibCli.Verbosity.warn.value()) {\n+      builder.warn(System.out::println);\n+    }\n+    if (verbosity.value() >= JibCli.Verbosity.lifecycle.value()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1MDEyMQ=="}, "originalCommit": {"oid": "58d659b763d8f9675a369c025b1ff5a860f3a473"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjU1NjA3OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/JibCli.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODoxNjo1NlrOHhfWug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODozMTozOFrOHiU8Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg3ODc3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Validater for parameters defined this this class that could not be done declaratively. */\n          \n          \n            \n              /** Validates parameters defined in this class that could not be done declaratively. */", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r504878778", "createdAt": "2020-10-14T18:16:56Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/JibCli.java", "diffHunk": "@@ -354,4 +381,15 @@ public static void main(String[] args) {\n     int exitCode = new CommandLine(new JibCli()).execute(args);\n     System.exit(exitCode);\n   }\n+\n+  /** Validater for parameters defined this this class that could not be done declaratively. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d659b763d8f9675a369c025b1ff5a860f3a473"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc1NjcxNQ==", "bodyText": "oops, this should not be in this PR.", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r505756715", "createdAt": "2020-10-15T18:31:38Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/JibCli.java", "diffHunk": "@@ -354,4 +381,15 @@ public static void main(String[] args) {\n     int exitCode = new CommandLine(new JibCli()).execute(args);\n     System.exit(exitCode);\n   }\n+\n+  /** Validater for parameters defined this this class that could not be done declaratively. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg3ODc3OA=="}, "originalCommit": {"oid": "58d659b763d8f9675a369c025b1ff5a860f3a473"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjkyNzA1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDoyNTozNlrOHiKi4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDoyNTozNlrOHiKi4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU4NjQwMg==", "bodyText": "@VisibleForTesting?", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r505586402", "createdAt": "2020-10-15T14:25:36Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLogger.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2.logging;\n+\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLoggerBuilder;\n+import com.google.cloud.tools.jib.plugins.common.logging.SingleThreadedExecutor;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.PrintStream;\n+\n+/** A simple cli logger that logs to the command line based on the configured log level. */\n+public class CliLogger {\n+\n+  /**\n+   * Create a new logger for the cli.\n+   *\n+   * @param verbosity the configure verbosity\n+   * @param consoleOutput the configured consoleOutput format\n+   * @return a new ConsoleLogger instance\n+   */\n+  public static ConsoleLogger newLogger(Verbosity verbosity, ConsoleOutput consoleOutput) {\n+    CliLogger cliLogger = new CliLogger(verbosity, System.out, System.err);\n+    boolean isRichConsole = isRichConsole(consoleOutput);\n+\n+    return newLogger(cliLogger, isRichConsole, new SingleThreadedExecutor());\n+  }\n+\n+  static ConsoleLogger newLogger(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9aeb3e90dc58d544fcdde61f3ff1cf91b112144"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Njk0NTE4OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLoggerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDoyOTowNVrOHiKuTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDoyOTowNVrOHiKuTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU4OTMyNg==", "bodyText": "final", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r505589326", "createdAt": "2020-10-15T14:29:05Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLoggerTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2.logging;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.cloud.tools.jib.plugins.common.logging.SingleThreadedExecutor;\n+import java.io.PrintStream;\n+import java.time.Duration;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.EnvironmentVariables;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.runner.RunWith;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/** Tests for {@link CliLogger}. */\n+@RunWith(MockitoJUnitRunner.class)\n+public class CliLoggerTest {\n+\n+  @Rule public RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties();\n+  @Rule public EnvironmentVariables environmentVariables = new EnvironmentVariables();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9aeb3e90dc58d544fcdde61f3ff1cf91b112144"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Njk0NTg0OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLoggerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDoyOToxNVrOHiKuxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDoyOToxNVrOHiKuxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU4OTQ0Ng==", "bodyText": "private", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r505589446", "createdAt": "2020-10-15T14:29:15Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLoggerTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2.logging;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.cloud.tools.jib.plugins.common.logging.SingleThreadedExecutor;\n+import java.io.PrintStream;\n+import java.time.Duration;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.EnvironmentVariables;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.runner.RunWith;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/** Tests for {@link CliLogger}. */\n+@RunWith(MockitoJUnitRunner.class)\n+public class CliLoggerTest {\n+\n+  @Rule public RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties();\n+  @Rule public EnvironmentVariables environmentVariables = new EnvironmentVariables();\n+\n+  @Mock PrintStream mockOut;\n+  @Mock PrintStream mockErr;\n+\n+  @Mock CliLogger mockCliLogger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9aeb3e90dc58d544fcdde61f3ff1cf91b112144"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Njk2NTI0OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLoggerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDozMzoxMFrOHiK7QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODozMzozN1rOHiVAZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU5MjY0MA==", "bodyText": "TIL InOrder. Without this, verify() doesn't care order?\nShould we also use inOrder in _plainConfig() test below?", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r505592640", "createdAt": "2020-10-15T14:33:10Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLoggerTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2.logging;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.cloud.tools.jib.plugins.common.logging.SingleThreadedExecutor;\n+import java.io.PrintStream;\n+import java.time.Duration;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.EnvironmentVariables;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.runner.RunWith;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/** Tests for {@link CliLogger}. */\n+@RunWith(MockitoJUnitRunner.class)\n+public class CliLoggerTest {\n+\n+  @Rule public RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties();\n+  @Rule public EnvironmentVariables environmentVariables = new EnvironmentVariables();\n+\n+  @Mock PrintStream mockOut;\n+  @Mock PrintStream mockErr;\n+\n+  @Mock CliLogger mockCliLogger;\n+\n+  private void sendMessages(CliLogger logger) {\n+    logger.debug(\"debug\");\n+    logger.info(\"info\");\n+    logger.lifecycle(\"lifecycle\");\n+    logger.warn(\"warn\");\n+    logger.error(\"error\");\n+  }\n+\n+  @Test\n+  public void testLog_quiet() {\n+    CliLogger logger = new CliLogger(Verbosity.quiet, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verifyNoInteractions(mockOut);\n+    Mockito.verifyNoInteractions(mockErr);\n+  }\n+\n+  @Test\n+  public void testLog_error() {\n+    CliLogger logger = new CliLogger(Verbosity.error, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verifyNoInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_warn() {\n+    CliLogger logger = new CliLogger(Verbosity.warn, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_lifecycle() {\n+    CliLogger logger = new CliLogger(Verbosity.lifecycle, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verify(mockOut).println(\"lifecycle\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_info() {\n+    CliLogger logger = new CliLogger(Verbosity.info, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verify(mockOut).println(\"lifecycle\");\n+    Mockito.verify(mockOut).println(\"info\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_debug() {\n+    CliLogger logger = new CliLogger(Verbosity.debug, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verify(mockOut).println(\"lifecycle\");\n+    Mockito.verify(mockOut).println(\"info\");\n+    Mockito.verify(mockOut).println(\"debug\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testIsRichConsole_true() {\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.rich)).isTrue();\n+  }\n+\n+  @Test\n+  public void testIsRichConsole_false() {\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.plain)).isFalse();\n+  }\n+\n+  @Test\n+  public void testIsRightConsole_autoWindowsTrue() {\n+    System.setProperty(\"os.name\", \"windows\");\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.auto)).isTrue();\n+  }\n+\n+  @Test\n+  public void testIsRightConsole_autoTermTrue() {\n+    environmentVariables.set(\"TERM\", \"not-dumb\");\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.auto)).isTrue();\n+  }\n+\n+  @Test\n+  public void testIsRightConsole_autoDumbTermFalse() {\n+    environmentVariables.set(\"TERM\", \"dumb\");\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.auto)).isFalse();\n+  }\n+\n+  @Test\n+  public void testNewLogger_richConfig() {\n+    InOrder inOrder = Mockito.inOrder(mockCliLogger);\n+    SingleThreadedExecutor singleThreadedExecutor = new SingleThreadedExecutor();\n+    ConsoleLogger logger = CliLogger.newLogger(mockCliLogger, true, singleThreadedExecutor);\n+\n+    logger.log(LogEvent.Level.DEBUG, \"debug\");\n+    logger.log(LogEvent.Level.INFO, \"info\");\n+    logger.log(LogEvent.Level.LIFECYCLE, \"lifecycle\");\n+    logger.log(LogEvent.Level.PROGRESS, \"progress\");\n+    logger.log(LogEvent.Level.WARN, \"warn\");\n+    logger.log(LogEvent.Level.ERROR, \"error\");\n+\n+    singleThreadedExecutor.shutDownAndAwaitTermination(Duration.ofSeconds(3));\n+\n+    inOrder.verify(mockCliLogger).debug(\"debug\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9aeb3e90dc58d544fcdde61f3ff1cf91b112144"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc1Nzc5Nw==", "bodyText": "Oops, yeah I was messing around trying to decode that test failure.", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r505757797", "createdAt": "2020-10-15T18:33:37Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLoggerTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2.logging;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.cloud.tools.jib.plugins.common.logging.SingleThreadedExecutor;\n+import java.io.PrintStream;\n+import java.time.Duration;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.EnvironmentVariables;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.runner.RunWith;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/** Tests for {@link CliLogger}. */\n+@RunWith(MockitoJUnitRunner.class)\n+public class CliLoggerTest {\n+\n+  @Rule public RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties();\n+  @Rule public EnvironmentVariables environmentVariables = new EnvironmentVariables();\n+\n+  @Mock PrintStream mockOut;\n+  @Mock PrintStream mockErr;\n+\n+  @Mock CliLogger mockCliLogger;\n+\n+  private void sendMessages(CliLogger logger) {\n+    logger.debug(\"debug\");\n+    logger.info(\"info\");\n+    logger.lifecycle(\"lifecycle\");\n+    logger.warn(\"warn\");\n+    logger.error(\"error\");\n+  }\n+\n+  @Test\n+  public void testLog_quiet() {\n+    CliLogger logger = new CliLogger(Verbosity.quiet, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verifyNoInteractions(mockOut);\n+    Mockito.verifyNoInteractions(mockErr);\n+  }\n+\n+  @Test\n+  public void testLog_error() {\n+    CliLogger logger = new CliLogger(Verbosity.error, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verifyNoInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_warn() {\n+    CliLogger logger = new CliLogger(Verbosity.warn, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_lifecycle() {\n+    CliLogger logger = new CliLogger(Verbosity.lifecycle, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verify(mockOut).println(\"lifecycle\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_info() {\n+    CliLogger logger = new CliLogger(Verbosity.info, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verify(mockOut).println(\"lifecycle\");\n+    Mockito.verify(mockOut).println(\"info\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_debug() {\n+    CliLogger logger = new CliLogger(Verbosity.debug, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verify(mockOut).println(\"lifecycle\");\n+    Mockito.verify(mockOut).println(\"info\");\n+    Mockito.verify(mockOut).println(\"debug\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testIsRichConsole_true() {\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.rich)).isTrue();\n+  }\n+\n+  @Test\n+  public void testIsRichConsole_false() {\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.plain)).isFalse();\n+  }\n+\n+  @Test\n+  public void testIsRightConsole_autoWindowsTrue() {\n+    System.setProperty(\"os.name\", \"windows\");\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.auto)).isTrue();\n+  }\n+\n+  @Test\n+  public void testIsRightConsole_autoTermTrue() {\n+    environmentVariables.set(\"TERM\", \"not-dumb\");\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.auto)).isTrue();\n+  }\n+\n+  @Test\n+  public void testIsRightConsole_autoDumbTermFalse() {\n+    environmentVariables.set(\"TERM\", \"dumb\");\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.auto)).isFalse();\n+  }\n+\n+  @Test\n+  public void testNewLogger_richConfig() {\n+    InOrder inOrder = Mockito.inOrder(mockCliLogger);\n+    SingleThreadedExecutor singleThreadedExecutor = new SingleThreadedExecutor();\n+    ConsoleLogger logger = CliLogger.newLogger(mockCliLogger, true, singleThreadedExecutor);\n+\n+    logger.log(LogEvent.Level.DEBUG, \"debug\");\n+    logger.log(LogEvent.Level.INFO, \"info\");\n+    logger.log(LogEvent.Level.LIFECYCLE, \"lifecycle\");\n+    logger.log(LogEvent.Level.PROGRESS, \"progress\");\n+    logger.log(LogEvent.Level.WARN, \"warn\");\n+    logger.log(LogEvent.Level.ERROR, \"error\");\n+\n+    singleThreadedExecutor.shutDownAndAwaitTermination(Duration.ofSeconds(3));\n+\n+    inOrder.verify(mockCliLogger).debug(\"debug\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU5MjY0MA=="}, "originalCommit": {"oid": "d9aeb3e90dc58d544fcdde61f3ff1cf91b112144"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Njk3NDUxOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/logging/Verbosity.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDozNTowMFrOHiLA_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODozMDo0N1rOHiU6Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU5NDExMA==", "bodyText": "Just to confirm, since the constructor is package-private: should these method  be public?", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r505594110", "createdAt": "2020-10-15T14:35:00Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/logging/Verbosity.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2.logging;\n+\n+public enum Verbosity {\n+  quiet(0),\n+  error(1),\n+  warn(2),\n+  lifecycle(3),\n+  info(4),\n+  debug(5);\n+  private final int value;\n+\n+  Verbosity(int value) {\n+    this.value = value;\n+  }\n+\n+  public int value() {\n+    return value;\n+  }\n+\n+  public boolean atLeast(Verbosity target) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9aeb3e90dc58d544fcdde61f3ff1cf91b112144"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc1NjIxNQ==", "bodyText": "So enum constructors cannot be public or protected. I think it's fine to expose these side-effect free methods as public, especially if we do verbosity checks/config elsewhere in the code?", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r505756215", "createdAt": "2020-10-15T18:30:47Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/logging/Verbosity.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2.logging;\n+\n+public enum Verbosity {\n+  quiet(0),\n+  error(1),\n+  warn(2),\n+  lifecycle(3),\n+  info(4),\n+  debug(5);\n+  private final int value;\n+\n+  Verbosity(int value) {\n+    this.value = value;\n+  }\n+\n+  public int value() {\n+    return value;\n+  }\n+\n+  public boolean atLeast(Verbosity target) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU5NDExMA=="}, "originalCommit": {"oid": "d9aeb3e90dc58d544fcdde61f3ff1cf91b112144"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Njk4Mzg5OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLogger.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDozNzowMFrOHiLG0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODo1NDozNlrOHiVuLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU5NTYwMQ==", "bodyText": "This would be private if it were not for the tests?", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r505595601", "createdAt": "2020-10-15T14:37:00Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLogger.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2.logging;\n+\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLoggerBuilder;\n+import com.google.cloud.tools.jib.plugins.common.logging.SingleThreadedExecutor;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.PrintStream;\n+\n+/** A simple cli logger that logs to the command line based on the configured log level. */\n+public class CliLogger {\n+\n+  /**\n+   * Create a new logger for the cli.\n+   *\n+   * @param verbosity the configure verbosity\n+   * @param consoleOutput the configured consoleOutput format\n+   * @return a new ConsoleLogger instance\n+   */\n+  public static ConsoleLogger newLogger(Verbosity verbosity, ConsoleOutput consoleOutput) {\n+    CliLogger cliLogger = new CliLogger(verbosity, System.out, System.err);\n+    boolean isRichConsole = isRichConsole(consoleOutput);\n+\n+    return newLogger(cliLogger, isRichConsole, new SingleThreadedExecutor());\n+  }\n+\n+  static ConsoleLogger newLogger(\n+      CliLogger cliLogger, boolean isRichConsole, SingleThreadedExecutor executor) {\n+    ConsoleLoggerBuilder builder =\n+        isRichConsole\n+            ? ConsoleLoggerBuilder.rich(\n+                executor, true) // rich logger will use an explicit progress handler\n+            : ConsoleLoggerBuilder.plain(executor).progress(cliLogger::lifecycle);\n+    builder.error(cliLogger::error);\n+    builder.warn(cliLogger::warn);\n+    builder.lifecycle(cliLogger::lifecycle);\n+    builder.info(cliLogger::info);\n+    builder.debug(cliLogger::debug);\n+\n+    return builder.build();\n+  }\n+\n+  @VisibleForTesting\n+  static boolean isRichConsole(ConsoleOutput consoleOutput) {\n+    switch (consoleOutput) {\n+      case plain:\n+        return false;\n+      case auto:\n+        // Enables progress footer when ANSI is supported (Windows or TERM not 'dumb').\n+        return System.getProperty(\"os.name\").startsWith(\"windows\")\n+            || !\"dumb\".equals(System.getenv(\"TERM\"));\n+      case rich:\n+      default:\n+        return true;\n+    }\n+  }\n+\n+  private final Verbosity verbosity;\n+  private final PrintStream out;\n+  private final PrintStream err;\n+\n+  @VisibleForTesting\n+  CliLogger(Verbosity verbosity, PrintStream out, PrintStream err) {\n+    this.verbosity = verbosity;\n+    this.out = out;\n+    this.err = err;\n+  }\n+\n+  void debug(String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9aeb3e90dc58d544fcdde61f3ff1cf91b112144"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2OTUxOQ==", "bodyText": "yeah, they don't need to be exposed. Added @VisibleForTesting", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r505769519", "createdAt": "2020-10-15T18:54:36Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLogger.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2.logging;\n+\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLoggerBuilder;\n+import com.google.cloud.tools.jib.plugins.common.logging.SingleThreadedExecutor;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.PrintStream;\n+\n+/** A simple cli logger that logs to the command line based on the configured log level. */\n+public class CliLogger {\n+\n+  /**\n+   * Create a new logger for the cli.\n+   *\n+   * @param verbosity the configure verbosity\n+   * @param consoleOutput the configured consoleOutput format\n+   * @return a new ConsoleLogger instance\n+   */\n+  public static ConsoleLogger newLogger(Verbosity verbosity, ConsoleOutput consoleOutput) {\n+    CliLogger cliLogger = new CliLogger(verbosity, System.out, System.err);\n+    boolean isRichConsole = isRichConsole(consoleOutput);\n+\n+    return newLogger(cliLogger, isRichConsole, new SingleThreadedExecutor());\n+  }\n+\n+  static ConsoleLogger newLogger(\n+      CliLogger cliLogger, boolean isRichConsole, SingleThreadedExecutor executor) {\n+    ConsoleLoggerBuilder builder =\n+        isRichConsole\n+            ? ConsoleLoggerBuilder.rich(\n+                executor, true) // rich logger will use an explicit progress handler\n+            : ConsoleLoggerBuilder.plain(executor).progress(cliLogger::lifecycle);\n+    builder.error(cliLogger::error);\n+    builder.warn(cliLogger::warn);\n+    builder.lifecycle(cliLogger::lifecycle);\n+    builder.info(cliLogger::info);\n+    builder.debug(cliLogger::debug);\n+\n+    return builder.build();\n+  }\n+\n+  @VisibleForTesting\n+  static boolean isRichConsole(ConsoleOutput consoleOutput) {\n+    switch (consoleOutput) {\n+      case plain:\n+        return false;\n+      case auto:\n+        // Enables progress footer when ANSI is supported (Windows or TERM not 'dumb').\n+        return System.getProperty(\"os.name\").startsWith(\"windows\")\n+            || !\"dumb\".equals(System.getenv(\"TERM\"));\n+      case rich:\n+      default:\n+        return true;\n+    }\n+  }\n+\n+  private final Verbosity verbosity;\n+  private final PrintStream out;\n+  private final PrintStream err;\n+\n+  @VisibleForTesting\n+  CliLogger(Verbosity verbosity, PrintStream out, PrintStream err) {\n+    this.verbosity = verbosity;\n+    this.out = out;\n+    this.err = err;\n+  }\n+\n+  void debug(String message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU5NTYwMQ=="}, "originalCommit": {"oid": "d9aeb3e90dc58d544fcdde61f3ff1cf91b112144"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzA1MjYwOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/JibCli.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDo1MTowNVrOHiLxrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODozNDowM1rOHiVBTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYwNjU3NA==", "bodyText": "we can combine these two conditions?", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r505606574", "createdAt": "2020-10-15T14:51:05Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/JibCli.java", "diffHunk": "@@ -354,4 +380,15 @@ public static void main(String[] args) {\n     int exitCode = new CommandLine(new JibCli()).execute(args);\n     System.exit(exitCode);\n   }\n+\n+  /** Validater for parameters defined this this class that could not be done declaratively. */\n+  public void validate() {\n+    if (targetImage.startsWith(TAR_IMAGE_PREFIX)) {\n+      if (name == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9aeb3e90dc58d544fcdde61f3ff1cf91b112144"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc1ODAyOA==", "bodyText": "this code is gone, should be in the other PR", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r505758028", "createdAt": "2020-10-15T18:34:03Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/JibCli.java", "diffHunk": "@@ -354,4 +380,15 @@ public static void main(String[] args) {\n     int exitCode = new CommandLine(new JibCli()).execute(args);\n     System.exit(exitCode);\n   }\n+\n+  /** Validater for parameters defined this this class that could not be done declaratively. */\n+  public void validate() {\n+    if (targetImage.startsWith(TAR_IMAGE_PREFIX)) {\n+      if (name == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYwNjU3NA=="}, "originalCommit": {"oid": "d9aeb3e90dc58d544fcdde61f3ff1cf91b112144"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzE4MDMzOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLoggerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNToxNToxNlrOHiNAow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODozMDo0MlrOHiU6Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyNjc4Nw==", "bodyText": "verifyNoMoreInteractions tend to be used sparingly. Can I have some context into why we need to call it here?", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r505626787", "createdAt": "2020-10-15T15:15:16Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLoggerTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2.logging;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.cloud.tools.jib.plugins.common.logging.SingleThreadedExecutor;\n+import java.io.PrintStream;\n+import java.time.Duration;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.EnvironmentVariables;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.runner.RunWith;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/** Tests for {@link CliLogger}. */\n+@RunWith(MockitoJUnitRunner.class)\n+public class CliLoggerTest {\n+\n+  @Rule public RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties();\n+  @Rule public EnvironmentVariables environmentVariables = new EnvironmentVariables();\n+\n+  @Mock PrintStream mockOut;\n+  @Mock PrintStream mockErr;\n+\n+  @Mock CliLogger mockCliLogger;\n+\n+  private void sendMessages(CliLogger logger) {\n+    logger.debug(\"debug\");\n+    logger.info(\"info\");\n+    logger.lifecycle(\"lifecycle\");\n+    logger.warn(\"warn\");\n+    logger.error(\"error\");\n+  }\n+\n+  @Test\n+  public void testLog_quiet() {\n+    CliLogger logger = new CliLogger(Verbosity.quiet, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verifyNoInteractions(mockOut);\n+    Mockito.verifyNoInteractions(mockErr);\n+  }\n+\n+  @Test\n+  public void testLog_error() {\n+    CliLogger logger = new CliLogger(Verbosity.error, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verifyNoInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_warn() {\n+    CliLogger logger = new CliLogger(Verbosity.warn, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9aeb3e90dc58d544fcdde61f3ff1cf91b112144"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc1NjE2Mw==", "bodyText": "In this case, you want to verify that (1) There's no mixup between mockOut and mockErr and (2) There's no extra logging happening to the printstreams.", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r505756163", "createdAt": "2020-10-15T18:30:42Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLoggerTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2.logging;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.cloud.tools.jib.plugins.common.logging.SingleThreadedExecutor;\n+import java.io.PrintStream;\n+import java.time.Duration;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.EnvironmentVariables;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.runner.RunWith;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/** Tests for {@link CliLogger}. */\n+@RunWith(MockitoJUnitRunner.class)\n+public class CliLoggerTest {\n+\n+  @Rule public RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties();\n+  @Rule public EnvironmentVariables environmentVariables = new EnvironmentVariables();\n+\n+  @Mock PrintStream mockOut;\n+  @Mock PrintStream mockErr;\n+\n+  @Mock CliLogger mockCliLogger;\n+\n+  private void sendMessages(CliLogger logger) {\n+    logger.debug(\"debug\");\n+    logger.info(\"info\");\n+    logger.lifecycle(\"lifecycle\");\n+    logger.warn(\"warn\");\n+    logger.error(\"error\");\n+  }\n+\n+  @Test\n+  public void testLog_quiet() {\n+    CliLogger logger = new CliLogger(Verbosity.quiet, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verifyNoInteractions(mockOut);\n+    Mockito.verifyNoInteractions(mockErr);\n+  }\n+\n+  @Test\n+  public void testLog_error() {\n+    CliLogger logger = new CliLogger(Verbosity.error, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verifyNoInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_warn() {\n+    CliLogger logger = new CliLogger(Verbosity.warn, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyNjc4Nw=="}, "originalCommit": {"oid": "d9aeb3e90dc58d544fcdde61f3ff1cf91b112144"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODA3OTAyOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLoggerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODo1ODoxOVrOHiV2mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOTowMDozMVrOHiV7aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3MTY3NQ==", "bodyText": "BTW, doesn't moreexecutors.directexecutor() work?", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r505771675", "createdAt": "2020-10-15T18:58:19Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLoggerTest.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2.logging;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.cloud.tools.jib.plugins.common.logging.SingleThreadedExecutor;\n+import java.io.PrintStream;\n+import java.time.Duration;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.EnvironmentVariables;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.runner.RunWith;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/** Tests for {@link CliLogger}. */\n+@RunWith(MockitoJUnitRunner.class)\n+public class CliLoggerTest {\n+\n+  @Rule\n+  public final RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties();\n+\n+  @Rule public final EnvironmentVariables environmentVariables = new EnvironmentVariables();\n+\n+  @Mock private PrintStream mockOut;\n+  @Mock private PrintStream mockErr;\n+\n+  @Mock private CliLogger mockCliLogger;\n+\n+  private void sendMessages(CliLogger logger) {\n+    logger.debug(\"debug\");\n+    logger.info(\"info\");\n+    logger.lifecycle(\"lifecycle\");\n+    logger.warn(\"warn\");\n+    logger.error(\"error\");\n+  }\n+\n+  @Test\n+  public void testLog_quiet() {\n+    CliLogger logger = new CliLogger(Verbosity.quiet, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verifyNoInteractions(mockOut);\n+    Mockito.verifyNoInteractions(mockErr);\n+  }\n+\n+  @Test\n+  public void testLog_error() {\n+    CliLogger logger = new CliLogger(Verbosity.error, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verifyNoInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_warn() {\n+    CliLogger logger = new CliLogger(Verbosity.warn, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_lifecycle() {\n+    CliLogger logger = new CliLogger(Verbosity.lifecycle, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verify(mockOut).println(\"lifecycle\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_info() {\n+    CliLogger logger = new CliLogger(Verbosity.info, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verify(mockOut).println(\"lifecycle\");\n+    Mockito.verify(mockOut).println(\"info\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_debug() {\n+    CliLogger logger = new CliLogger(Verbosity.debug, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verify(mockOut).println(\"lifecycle\");\n+    Mockito.verify(mockOut).println(\"info\");\n+    Mockito.verify(mockOut).println(\"debug\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testIsRichConsole_true() {\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.rich)).isTrue();\n+  }\n+\n+  @Test\n+  public void testIsRichConsole_false() {\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.plain)).isFalse();\n+  }\n+\n+  @Test\n+  public void testIsRightConsole_autoWindowsTrue() {\n+    System.setProperty(\"os.name\", \"windows\");\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.auto)).isTrue();\n+  }\n+\n+  @Test\n+  public void testIsRightConsole_autoTermTrue() {\n+    environmentVariables.set(\"TERM\", \"not-dumb\");\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.auto)).isTrue();\n+  }\n+\n+  @Test\n+  public void testIsRightConsole_autoDumbTermFalse() {\n+    environmentVariables.set(\"TERM\", \"dumb\");\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.auto)).isFalse();\n+  }\n+\n+  @Test\n+  public void testNewLogger_richConfig() {\n+    InOrder inOrder = Mockito.inOrder(mockCliLogger);\n+    SingleThreadedExecutor singleThreadedExecutor = new SingleThreadedExecutor();\n+    ConsoleLogger logger = CliLogger.newLogger(mockCliLogger, true, singleThreadedExecutor);\n+\n+    logger.log(LogEvent.Level.DEBUG, \"debug\");\n+    logger.log(LogEvent.Level.INFO, \"info\");\n+    logger.log(LogEvent.Level.LIFECYCLE, \"lifecycle\");\n+    logger.log(LogEvent.Level.PROGRESS, \"progress\");\n+    logger.log(LogEvent.Level.WARN, \"warn\");\n+    logger.log(LogEvent.Level.ERROR, \"error\");\n+\n+    singleThreadedExecutor.shutDownAndAwaitTermination(Duration.ofSeconds(3));\n+\n+    inOrder.verify(mockCliLogger).debug(\"debug\");\n+    inOrder.verify(mockCliLogger).info(\"info\");\n+    inOrder.verify(mockCliLogger).lifecycle(\"lifecycle\");\n+    inOrder.verify(mockCliLogger).warn(\"warn\");\n+    inOrder.verify(mockCliLogger).error(\"error\");\n+    inOrder.verifyNoMoreInteractions(); // progress is not configured\n+  }\n+\n+  @Test\n+  public void testNewLogger_plainConfig() {\n+    InOrder inOrder = Mockito.inOrder(mockCliLogger);\n+    SingleThreadedExecutor singleThreadedExecutor = new SingleThreadedExecutor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1178802a950b370ea7de5b02d9250b1b9f3a1c39"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3MjU2NA==", "bodyText": "It would, but the type that the ConsoleLoggerBuilder accepts is explicitly SingleThreadedExecutor. So kind of limited by that. We must have had a reason for doing this a while ago, maybe to help with testing and didn't know a better way?", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r505772564", "createdAt": "2020-10-15T18:59:56Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLoggerTest.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2.logging;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.cloud.tools.jib.plugins.common.logging.SingleThreadedExecutor;\n+import java.io.PrintStream;\n+import java.time.Duration;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.EnvironmentVariables;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.runner.RunWith;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/** Tests for {@link CliLogger}. */\n+@RunWith(MockitoJUnitRunner.class)\n+public class CliLoggerTest {\n+\n+  @Rule\n+  public final RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties();\n+\n+  @Rule public final EnvironmentVariables environmentVariables = new EnvironmentVariables();\n+\n+  @Mock private PrintStream mockOut;\n+  @Mock private PrintStream mockErr;\n+\n+  @Mock private CliLogger mockCliLogger;\n+\n+  private void sendMessages(CliLogger logger) {\n+    logger.debug(\"debug\");\n+    logger.info(\"info\");\n+    logger.lifecycle(\"lifecycle\");\n+    logger.warn(\"warn\");\n+    logger.error(\"error\");\n+  }\n+\n+  @Test\n+  public void testLog_quiet() {\n+    CliLogger logger = new CliLogger(Verbosity.quiet, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verifyNoInteractions(mockOut);\n+    Mockito.verifyNoInteractions(mockErr);\n+  }\n+\n+  @Test\n+  public void testLog_error() {\n+    CliLogger logger = new CliLogger(Verbosity.error, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verifyNoInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_warn() {\n+    CliLogger logger = new CliLogger(Verbosity.warn, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_lifecycle() {\n+    CliLogger logger = new CliLogger(Verbosity.lifecycle, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verify(mockOut).println(\"lifecycle\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_info() {\n+    CliLogger logger = new CliLogger(Verbosity.info, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verify(mockOut).println(\"lifecycle\");\n+    Mockito.verify(mockOut).println(\"info\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_debug() {\n+    CliLogger logger = new CliLogger(Verbosity.debug, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verify(mockOut).println(\"lifecycle\");\n+    Mockito.verify(mockOut).println(\"info\");\n+    Mockito.verify(mockOut).println(\"debug\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testIsRichConsole_true() {\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.rich)).isTrue();\n+  }\n+\n+  @Test\n+  public void testIsRichConsole_false() {\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.plain)).isFalse();\n+  }\n+\n+  @Test\n+  public void testIsRightConsole_autoWindowsTrue() {\n+    System.setProperty(\"os.name\", \"windows\");\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.auto)).isTrue();\n+  }\n+\n+  @Test\n+  public void testIsRightConsole_autoTermTrue() {\n+    environmentVariables.set(\"TERM\", \"not-dumb\");\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.auto)).isTrue();\n+  }\n+\n+  @Test\n+  public void testIsRightConsole_autoDumbTermFalse() {\n+    environmentVariables.set(\"TERM\", \"dumb\");\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.auto)).isFalse();\n+  }\n+\n+  @Test\n+  public void testNewLogger_richConfig() {\n+    InOrder inOrder = Mockito.inOrder(mockCliLogger);\n+    SingleThreadedExecutor singleThreadedExecutor = new SingleThreadedExecutor();\n+    ConsoleLogger logger = CliLogger.newLogger(mockCliLogger, true, singleThreadedExecutor);\n+\n+    logger.log(LogEvent.Level.DEBUG, \"debug\");\n+    logger.log(LogEvent.Level.INFO, \"info\");\n+    logger.log(LogEvent.Level.LIFECYCLE, \"lifecycle\");\n+    logger.log(LogEvent.Level.PROGRESS, \"progress\");\n+    logger.log(LogEvent.Level.WARN, \"warn\");\n+    logger.log(LogEvent.Level.ERROR, \"error\");\n+\n+    singleThreadedExecutor.shutDownAndAwaitTermination(Duration.ofSeconds(3));\n+\n+    inOrder.verify(mockCliLogger).debug(\"debug\");\n+    inOrder.verify(mockCliLogger).info(\"info\");\n+    inOrder.verify(mockCliLogger).lifecycle(\"lifecycle\");\n+    inOrder.verify(mockCliLogger).warn(\"warn\");\n+    inOrder.verify(mockCliLogger).error(\"error\");\n+    inOrder.verifyNoMoreInteractions(); // progress is not configured\n+  }\n+\n+  @Test\n+  public void testNewLogger_plainConfig() {\n+    InOrder inOrder = Mockito.inOrder(mockCliLogger);\n+    SingleThreadedExecutor singleThreadedExecutor = new SingleThreadedExecutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3MTY3NQ=="}, "originalCommit": {"oid": "1178802a950b370ea7de5b02d9250b1b9f3a1c39"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3MjkwNA==", "bodyText": "but it looks more like just to handle shutting down better.", "url": "https://github.com/GoogleContainerTools/jib/pull/2817#discussion_r505772904", "createdAt": "2020-10-15T19:00:31Z", "author": {"login": "loosebazooka"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLoggerTest.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2.logging;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;\n+import com.google.cloud.tools.jib.plugins.common.logging.SingleThreadedExecutor;\n+import java.io.PrintStream;\n+import java.time.Duration;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.EnvironmentVariables;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.runner.RunWith;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/** Tests for {@link CliLogger}. */\n+@RunWith(MockitoJUnitRunner.class)\n+public class CliLoggerTest {\n+\n+  @Rule\n+  public final RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties();\n+\n+  @Rule public final EnvironmentVariables environmentVariables = new EnvironmentVariables();\n+\n+  @Mock private PrintStream mockOut;\n+  @Mock private PrintStream mockErr;\n+\n+  @Mock private CliLogger mockCliLogger;\n+\n+  private void sendMessages(CliLogger logger) {\n+    logger.debug(\"debug\");\n+    logger.info(\"info\");\n+    logger.lifecycle(\"lifecycle\");\n+    logger.warn(\"warn\");\n+    logger.error(\"error\");\n+  }\n+\n+  @Test\n+  public void testLog_quiet() {\n+    CliLogger logger = new CliLogger(Verbosity.quiet, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verifyNoInteractions(mockOut);\n+    Mockito.verifyNoInteractions(mockErr);\n+  }\n+\n+  @Test\n+  public void testLog_error() {\n+    CliLogger logger = new CliLogger(Verbosity.error, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verifyNoInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_warn() {\n+    CliLogger logger = new CliLogger(Verbosity.warn, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_lifecycle() {\n+    CliLogger logger = new CliLogger(Verbosity.lifecycle, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verify(mockOut).println(\"lifecycle\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_info() {\n+    CliLogger logger = new CliLogger(Verbosity.info, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verify(mockOut).println(\"lifecycle\");\n+    Mockito.verify(mockOut).println(\"info\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testLog_debug() {\n+    CliLogger logger = new CliLogger(Verbosity.debug, mockOut, mockErr);\n+    sendMessages(logger);\n+    Mockito.verify(mockErr).println(\"error\");\n+    Mockito.verifyNoMoreInteractions(mockErr);\n+    Mockito.verify(mockOut).println(\"warn\");\n+    Mockito.verify(mockOut).println(\"lifecycle\");\n+    Mockito.verify(mockOut).println(\"info\");\n+    Mockito.verify(mockOut).println(\"debug\");\n+    Mockito.verifyNoMoreInteractions(mockOut);\n+  }\n+\n+  @Test\n+  public void testIsRichConsole_true() {\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.rich)).isTrue();\n+  }\n+\n+  @Test\n+  public void testIsRichConsole_false() {\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.plain)).isFalse();\n+  }\n+\n+  @Test\n+  public void testIsRightConsole_autoWindowsTrue() {\n+    System.setProperty(\"os.name\", \"windows\");\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.auto)).isTrue();\n+  }\n+\n+  @Test\n+  public void testIsRightConsole_autoTermTrue() {\n+    environmentVariables.set(\"TERM\", \"not-dumb\");\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.auto)).isTrue();\n+  }\n+\n+  @Test\n+  public void testIsRightConsole_autoDumbTermFalse() {\n+    environmentVariables.set(\"TERM\", \"dumb\");\n+    assertThat(CliLogger.isRichConsole(ConsoleOutput.auto)).isFalse();\n+  }\n+\n+  @Test\n+  public void testNewLogger_richConfig() {\n+    InOrder inOrder = Mockito.inOrder(mockCliLogger);\n+    SingleThreadedExecutor singleThreadedExecutor = new SingleThreadedExecutor();\n+    ConsoleLogger logger = CliLogger.newLogger(mockCliLogger, true, singleThreadedExecutor);\n+\n+    logger.log(LogEvent.Level.DEBUG, \"debug\");\n+    logger.log(LogEvent.Level.INFO, \"info\");\n+    logger.log(LogEvent.Level.LIFECYCLE, \"lifecycle\");\n+    logger.log(LogEvent.Level.PROGRESS, \"progress\");\n+    logger.log(LogEvent.Level.WARN, \"warn\");\n+    logger.log(LogEvent.Level.ERROR, \"error\");\n+\n+    singleThreadedExecutor.shutDownAndAwaitTermination(Duration.ofSeconds(3));\n+\n+    inOrder.verify(mockCliLogger).debug(\"debug\");\n+    inOrder.verify(mockCliLogger).info(\"info\");\n+    inOrder.verify(mockCliLogger).lifecycle(\"lifecycle\");\n+    inOrder.verify(mockCliLogger).warn(\"warn\");\n+    inOrder.verify(mockCliLogger).error(\"error\");\n+    inOrder.verifyNoMoreInteractions(); // progress is not configured\n+  }\n+\n+  @Test\n+  public void testNewLogger_plainConfig() {\n+    InOrder inOrder = Mockito.inOrder(mockCliLogger);\n+    SingleThreadedExecutor singleThreadedExecutor = new SingleThreadedExecutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3MTY3NQ=="}, "originalCommit": {"oid": "1178802a950b370ea7de5b02d9250b1b9f3a1c39"}, "originalPosition": 175}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4955, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}