{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyMjQ2Nzk4", "number": 2918, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo0OTowNlrOFCECbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTowNToyM1rOFFJ14g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzA3NjMxOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo0OTowNlrOIBBqfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjowNDoyN1rOID_Sbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0Njc1MQ==", "bodyText": "Do we have to do this? jib-core (JavaContainerBuilder) uses a space.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537946751", "createdAt": "2020-12-08T00:49:06Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -42,7 +50,7 @@\n   private static final String CLASSES = \"classes\";\n   private static final String RESOURCES = \"resources\";\n   private static final String DEPENDENCIES = \"dependencies\";\n-  private static final String SNAPSHOT_DEPENDENCIES = \"snapshot dependencies\";\n+  private static final String SNAPSHOT_DEPENDENCIES = \"snapshot-dependencies\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1MzU1MA==", "bodyText": "I initially changed it to be consistent with the format in layers.idx. But you're right --I reverted the change.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r541053550", "createdAt": "2020-12-11T16:04:27Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -42,7 +50,7 @@\n   private static final String CLASSES = \"classes\";\n   private static final String RESOURCES = \"resources\";\n   private static final String DEPENDENCIES = \"dependencies\";\n-  private static final String SNAPSHOT_DEPENDENCIES = \"snapshot dependencies\";\n+  private static final String SNAPSHOT_DEPENDENCIES = \"snapshot-dependencies\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0Njc1MQ=="}, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzA4MzI4OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1MTozMFrOIBBuHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjowNTozNFrOID_Vbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0NzY3OQ==", "bodyText": "I think tempDirPath is right from the perspective of a caller. A caller is not supposed to provide a JAR content root but a temp directory.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537947679", "createdAt": "2020-12-08T00:51:30Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -79,20 +87,19 @@ static JarType determineJarType(Path jarPath) throws IOException {\n    * a standard jar.\n    *\n    * @param jarPath path to jar file\n-   * @param tempDirPath path to temporary jib local directory\n+   * @param localExplodedJarRoot path to temporary jib local directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1NDMxOQ==", "bodyText": "Right, reverted this change.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r541054319", "createdAt": "2020-12-11T16:05:34Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -79,20 +87,19 @@ static JarType determineJarType(Path jarPath) throws IOException {\n    * a standard jar.\n    *\n    * @param jarPath path to jar file\n-   * @param tempDirPath path to temporary jib local directory\n+   * @param localExplodedJarRoot path to temporary jib local directory", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0NzY3OQ=="}, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzExNjM3OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTowMzoyMVrOIBCAdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTowMzoyMVrOIBCAdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MjM3Mw==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537952373", "createdAt": "2020-12-08T01:03:21Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzE3NjIwOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToyNTo0MVrOIBChbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjowNjowMVrOID_Wjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2MDgxMg==", "bodyText": "Although BOOT-INF/lib works, for non-test code, we do .resolve(\"BOOT-INF\").resolve(\"lib\") to avoid using a certain path separator.\nAnd why do we need getParent() if we are checking startsWith()?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537960812", "createdAt": "2020-12-08T01:25:41Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n+      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+      if (layerIndex != null) {\n+        return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n+      }\n+\n+      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n+\n+      // Non-snapshot layer\n+      Predicate<Path> isInBootInfLib =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1NDYwNg==", "bodyText": "Oops, my bad.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r541054606", "createdAt": "2020-12-11T16:06:01Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n+      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+      if (layerIndex != null) {\n+        return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n+      }\n+\n+      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n+\n+      // Non-snapshot layer\n+      Predicate<Path> isInBootInfLib =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2MDgxMg=="}, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzE5NDEzOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTozMjoyOFrOIBCrSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTozMjoyOFrOIBCrSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2MzMzNw==", "bodyText": "This doesn't seem right. It's surprising this double-resolve actually worked.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537963337", "createdAt": "2020-12-08T01:32:28Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n+      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+      if (layerIndex != null) {\n+        return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n+      }\n+\n+      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n+\n+      // Non-snapshot layer\n+      Predicate<Path> isInBootInfLib =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));\n+      Predicate<Path> isSnapshot = path -> path.getFileName().toString().contains(\"SNAPSHOT\");\n+      Predicate<Path> nonSnapshotPredicate = isInBootInfLib.and(isSnapshot.negate());\n+      FileEntriesLayer nonSnapshotLayer =\n+          addDirectoryContentsToLayer(\n+              DEPENDENCIES, localExplodedJarRoot, nonSnapshotPredicate, APP_ROOT);\n+\n+      // Snapshot layer\n+      Predicate<Path> snapshotPredicate = isInBootInfLib.and(isSnapshot);\n+      FileEntriesLayer snapshotLayer =\n+          addDirectoryContentsToLayer(\n+              SNAPSHOT_DEPENDENCIES, localExplodedJarRoot, snapshotPredicate, APP_ROOT);\n+\n+      // Spring-boot-loader layer.\n+      Predicate<Path> isLoader =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"org\"));\n+      FileEntriesLayer loaderLayer =\n+          addDirectoryContentsToLayer(\n+              \"spring-boot-loader\", localExplodedJarRoot, isLoader, APP_ROOT);\n+\n+      // Classes layer.\n+      Predicate<Path> isClass = path -> path.getFileName().toString().endsWith(\".class\");\n+      Predicate<Path> isInBootInfClasses =\n+          path ->\n+              path.getParent()\n+                  .startsWith(\n+                      localExplodedJarRoot.resolve(\n+                          localExplodedJarRoot.resolve(\"BOOT-INF/classes\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzIwNjQ1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTozNzowN1rOIBCyHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMToxMTo0MFrOICpqOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NTA4Nw==", "bodyText": "I think the following is more accurate:\nisInMetaInf.or(isInBootInfClasses.and(isClass.negate()))\n\nAnd I thought we should also include resources files at the JAR content root? Is it not the case?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537965087", "createdAt": "2020-12-08T01:37:07Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n+      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+      if (layerIndex != null) {\n+        return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n+      }\n+\n+      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n+\n+      // Non-snapshot layer\n+      Predicate<Path> isInBootInfLib =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));\n+      Predicate<Path> isSnapshot = path -> path.getFileName().toString().contains(\"SNAPSHOT\");\n+      Predicate<Path> nonSnapshotPredicate = isInBootInfLib.and(isSnapshot.negate());\n+      FileEntriesLayer nonSnapshotLayer =\n+          addDirectoryContentsToLayer(\n+              DEPENDENCIES, localExplodedJarRoot, nonSnapshotPredicate, APP_ROOT);\n+\n+      // Snapshot layer\n+      Predicate<Path> snapshotPredicate = isInBootInfLib.and(isSnapshot);\n+      FileEntriesLayer snapshotLayer =\n+          addDirectoryContentsToLayer(\n+              SNAPSHOT_DEPENDENCIES, localExplodedJarRoot, snapshotPredicate, APP_ROOT);\n+\n+      // Spring-boot-loader layer.\n+      Predicate<Path> isLoader =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"org\"));\n+      FileEntriesLayer loaderLayer =\n+          addDirectoryContentsToLayer(\n+              \"spring-boot-loader\", localExplodedJarRoot, isLoader, APP_ROOT);\n+\n+      // Classes layer.\n+      Predicate<Path> isClass = path -> path.getFileName().toString().endsWith(\".class\");\n+      Predicate<Path> isInBootInfClasses =\n+          path ->\n+              path.getParent()\n+                  .startsWith(\n+                      localExplodedJarRoot.resolve(\n+                          localExplodedJarRoot.resolve(\"BOOT-INF/classes\")));\n+      Predicate<Path> finalPredicateClasses = isInBootInfClasses.and(isClass);\n+      FileEntriesLayer classesLayer =\n+          addDirectoryContentsToLayer(\n+              CLASSES, localExplodedJarRoot, finalPredicateClasses, APP_ROOT);\n+\n+      // Resources layer.\n+      Predicate<Path> isInMetaInf =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"META-INF\"));\n+      Predicate<Path> finalPredicateResources =\n+          isInBootInfClasses.or(isInMetaInf).and(isClass.negate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU2NzI3OQ==", "bodyText": "Sorry, would that mean resources files outside the BOOT-INF/classes/ and META-INF/ directories?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539567279", "createdAt": "2020-12-09T19:00:46Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n+      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+      if (layerIndex != null) {\n+        return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n+      }\n+\n+      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n+\n+      // Non-snapshot layer\n+      Predicate<Path> isInBootInfLib =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));\n+      Predicate<Path> isSnapshot = path -> path.getFileName().toString().contains(\"SNAPSHOT\");\n+      Predicate<Path> nonSnapshotPredicate = isInBootInfLib.and(isSnapshot.negate());\n+      FileEntriesLayer nonSnapshotLayer =\n+          addDirectoryContentsToLayer(\n+              DEPENDENCIES, localExplodedJarRoot, nonSnapshotPredicate, APP_ROOT);\n+\n+      // Snapshot layer\n+      Predicate<Path> snapshotPredicate = isInBootInfLib.and(isSnapshot);\n+      FileEntriesLayer snapshotLayer =\n+          addDirectoryContentsToLayer(\n+              SNAPSHOT_DEPENDENCIES, localExplodedJarRoot, snapshotPredicate, APP_ROOT);\n+\n+      // Spring-boot-loader layer.\n+      Predicate<Path> isLoader =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"org\"));\n+      FileEntriesLayer loaderLayer =\n+          addDirectoryContentsToLayer(\n+              \"spring-boot-loader\", localExplodedJarRoot, isLoader, APP_ROOT);\n+\n+      // Classes layer.\n+      Predicate<Path> isClass = path -> path.getFileName().toString().endsWith(\".class\");\n+      Predicate<Path> isInBootInfClasses =\n+          path ->\n+              path.getParent()\n+                  .startsWith(\n+                      localExplodedJarRoot.resolve(\n+                          localExplodedJarRoot.resolve(\"BOOT-INF/classes\")));\n+      Predicate<Path> finalPredicateClasses = isInBootInfClasses.and(isClass);\n+      FileEntriesLayer classesLayer =\n+          addDirectoryContentsToLayer(\n+              CLASSES, localExplodedJarRoot, finalPredicateClasses, APP_ROOT);\n+\n+      // Resources layer.\n+      Predicate<Path> isInMetaInf =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"META-INF\"));\n+      Predicate<Path> finalPredicateResources =\n+          isInBootInfClasses.or(isInMetaInf).and(isClass.negate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NTA4Nw=="}, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3Mzg2Ng==", "bodyText": "No, it means isInMetaInf || (isInBootInfClasses && !isClass). OTOH, your original condition is (isInBootInfClasses || isInMetaInf) && !isClass).", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539573866", "createdAt": "2020-12-09T19:11:11Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n+      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+      if (layerIndex != null) {\n+        return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n+      }\n+\n+      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n+\n+      // Non-snapshot layer\n+      Predicate<Path> isInBootInfLib =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));\n+      Predicate<Path> isSnapshot = path -> path.getFileName().toString().contains(\"SNAPSHOT\");\n+      Predicate<Path> nonSnapshotPredicate = isInBootInfLib.and(isSnapshot.negate());\n+      FileEntriesLayer nonSnapshotLayer =\n+          addDirectoryContentsToLayer(\n+              DEPENDENCIES, localExplodedJarRoot, nonSnapshotPredicate, APP_ROOT);\n+\n+      // Snapshot layer\n+      Predicate<Path> snapshotPredicate = isInBootInfLib.and(isSnapshot);\n+      FileEntriesLayer snapshotLayer =\n+          addDirectoryContentsToLayer(\n+              SNAPSHOT_DEPENDENCIES, localExplodedJarRoot, snapshotPredicate, APP_ROOT);\n+\n+      // Spring-boot-loader layer.\n+      Predicate<Path> isLoader =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"org\"));\n+      FileEntriesLayer loaderLayer =\n+          addDirectoryContentsToLayer(\n+              \"spring-boot-loader\", localExplodedJarRoot, isLoader, APP_ROOT);\n+\n+      // Classes layer.\n+      Predicate<Path> isClass = path -> path.getFileName().toString().endsWith(\".class\");\n+      Predicate<Path> isInBootInfClasses =\n+          path ->\n+              path.getParent()\n+                  .startsWith(\n+                      localExplodedJarRoot.resolve(\n+                          localExplodedJarRoot.resolve(\"BOOT-INF/classes\")));\n+      Predicate<Path> finalPredicateClasses = isInBootInfClasses.and(isClass);\n+      FileEntriesLayer classesLayer =\n+          addDirectoryContentsToLayer(\n+              CLASSES, localExplodedJarRoot, finalPredicateClasses, APP_ROOT);\n+\n+      // Resources layer.\n+      Predicate<Path> isInMetaInf =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"META-INF\"));\n+      Predicate<Path> finalPredicateResources =\n+          isInBootInfClasses.or(isInMetaInf).and(isClass.negate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NTA4Nw=="}, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4NDI5OA==", "bodyText": "That said, I'm curious if a spring jar can have resources files at root?\n(OTOH, a regular jar has resource files for the application at root.)", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539584298", "createdAt": "2020-12-09T19:27:02Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n+      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+      if (layerIndex != null) {\n+        return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n+      }\n+\n+      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n+\n+      // Non-snapshot layer\n+      Predicate<Path> isInBootInfLib =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));\n+      Predicate<Path> isSnapshot = path -> path.getFileName().toString().contains(\"SNAPSHOT\");\n+      Predicate<Path> nonSnapshotPredicate = isInBootInfLib.and(isSnapshot.negate());\n+      FileEntriesLayer nonSnapshotLayer =\n+          addDirectoryContentsToLayer(\n+              DEPENDENCIES, localExplodedJarRoot, nonSnapshotPredicate, APP_ROOT);\n+\n+      // Snapshot layer\n+      Predicate<Path> snapshotPredicate = isInBootInfLib.and(isSnapshot);\n+      FileEntriesLayer snapshotLayer =\n+          addDirectoryContentsToLayer(\n+              SNAPSHOT_DEPENDENCIES, localExplodedJarRoot, snapshotPredicate, APP_ROOT);\n+\n+      // Spring-boot-loader layer.\n+      Predicate<Path> isLoader =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"org\"));\n+      FileEntriesLayer loaderLayer =\n+          addDirectoryContentsToLayer(\n+              \"spring-boot-loader\", localExplodedJarRoot, isLoader, APP_ROOT);\n+\n+      // Classes layer.\n+      Predicate<Path> isClass = path -> path.getFileName().toString().endsWith(\".class\");\n+      Predicate<Path> isInBootInfClasses =\n+          path ->\n+              path.getParent()\n+                  .startsWith(\n+                      localExplodedJarRoot.resolve(\n+                          localExplodedJarRoot.resolve(\"BOOT-INF/classes\")));\n+      Predicate<Path> finalPredicateClasses = isInBootInfClasses.and(isClass);\n+      FileEntriesLayer classesLayer =\n+          addDirectoryContentsToLayer(\n+              CLASSES, localExplodedJarRoot, finalPredicateClasses, APP_ROOT);\n+\n+      // Resources layer.\n+      Predicate<Path> isInMetaInf =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"META-INF\"));\n+      Predicate<Path> finalPredicateResources =\n+          isInBootInfClasses.or(isInMetaInf).and(isClass.negate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NTA4Nw=="}, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4ODgzMQ==", "bodyText": "I wonder if it can't be like this for a spring jar:\n\nresources under BOOT-INF/classes/ --> resources for the app\nresources under root (excluding BOOT-INF/) --> resources for the spring launcher? (Not accessible from the app runtime but they are for configuring Spring Boot?)\nresources under META-INF/ --> for the app or the launcher? Or both?\n\nAnyways, all of them can go into the same \"resources\" layer, whether some are for the app or the launcher. I just wonder if we miss adding resources at root.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539588831", "createdAt": "2020-12-09T19:34:04Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n+      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+      if (layerIndex != null) {\n+        return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n+      }\n+\n+      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n+\n+      // Non-snapshot layer\n+      Predicate<Path> isInBootInfLib =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));\n+      Predicate<Path> isSnapshot = path -> path.getFileName().toString().contains(\"SNAPSHOT\");\n+      Predicate<Path> nonSnapshotPredicate = isInBootInfLib.and(isSnapshot.negate());\n+      FileEntriesLayer nonSnapshotLayer =\n+          addDirectoryContentsToLayer(\n+              DEPENDENCIES, localExplodedJarRoot, nonSnapshotPredicate, APP_ROOT);\n+\n+      // Snapshot layer\n+      Predicate<Path> snapshotPredicate = isInBootInfLib.and(isSnapshot);\n+      FileEntriesLayer snapshotLayer =\n+          addDirectoryContentsToLayer(\n+              SNAPSHOT_DEPENDENCIES, localExplodedJarRoot, snapshotPredicate, APP_ROOT);\n+\n+      // Spring-boot-loader layer.\n+      Predicate<Path> isLoader =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"org\"));\n+      FileEntriesLayer loaderLayer =\n+          addDirectoryContentsToLayer(\n+              \"spring-boot-loader\", localExplodedJarRoot, isLoader, APP_ROOT);\n+\n+      // Classes layer.\n+      Predicate<Path> isClass = path -> path.getFileName().toString().endsWith(\".class\");\n+      Predicate<Path> isInBootInfClasses =\n+          path ->\n+              path.getParent()\n+                  .startsWith(\n+                      localExplodedJarRoot.resolve(\n+                          localExplodedJarRoot.resolve(\"BOOT-INF/classes\")));\n+      Predicate<Path> finalPredicateClasses = isInBootInfClasses.and(isClass);\n+      FileEntriesLayer classesLayer =\n+          addDirectoryContentsToLayer(\n+              CLASSES, localExplodedJarRoot, finalPredicateClasses, APP_ROOT);\n+\n+      // Resources layer.\n+      Predicate<Path> isInMetaInf =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"META-INF\"));\n+      Predicate<Path> finalPredicateResources =\n+          isInBootInfClasses.or(isInMetaInf).and(isClass.negate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NTA4Nw=="}, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY1MDYxOQ==", "bodyText": "hm afaik, spring boot jars are structured in this way:\n+-META-INF\n |  +-MANIFEST.MF\n+-org\n |  +-springframework\n |     +-boot\n |        +-loader\n |           +-<spring boot loader classes>\n +-BOOT-INF\n    +-classes\n    |  +-mycompany\n    |     +-project\n    |        +-YourClasses.class\n    +-lib\n       +-dependency1.jar\n       +-dependency2.jar\n\nThe application classes and resources go into BOOT-INF/classes/. META-INF/ can also contain some files such as pom.properties, pom.xml and build-info.properties.  But outside of those three directories (META/, BOOT-INF/, org/) I don't see the possibility of any other resources existing - at least going by the standard structure of the spring boot JAR.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539650619", "createdAt": "2020-12-09T21:11:40Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n+      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+      if (layerIndex != null) {\n+        return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n+      }\n+\n+      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n+\n+      // Non-snapshot layer\n+      Predicate<Path> isInBootInfLib =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));\n+      Predicate<Path> isSnapshot = path -> path.getFileName().toString().contains(\"SNAPSHOT\");\n+      Predicate<Path> nonSnapshotPredicate = isInBootInfLib.and(isSnapshot.negate());\n+      FileEntriesLayer nonSnapshotLayer =\n+          addDirectoryContentsToLayer(\n+              DEPENDENCIES, localExplodedJarRoot, nonSnapshotPredicate, APP_ROOT);\n+\n+      // Snapshot layer\n+      Predicate<Path> snapshotPredicate = isInBootInfLib.and(isSnapshot);\n+      FileEntriesLayer snapshotLayer =\n+          addDirectoryContentsToLayer(\n+              SNAPSHOT_DEPENDENCIES, localExplodedJarRoot, snapshotPredicate, APP_ROOT);\n+\n+      // Spring-boot-loader layer.\n+      Predicate<Path> isLoader =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"org\"));\n+      FileEntriesLayer loaderLayer =\n+          addDirectoryContentsToLayer(\n+              \"spring-boot-loader\", localExplodedJarRoot, isLoader, APP_ROOT);\n+\n+      // Classes layer.\n+      Predicate<Path> isClass = path -> path.getFileName().toString().endsWith(\".class\");\n+      Predicate<Path> isInBootInfClasses =\n+          path ->\n+              path.getParent()\n+                  .startsWith(\n+                      localExplodedJarRoot.resolve(\n+                          localExplodedJarRoot.resolve(\"BOOT-INF/classes\")));\n+      Predicate<Path> finalPredicateClasses = isInBootInfClasses.and(isClass);\n+      FileEntriesLayer classesLayer =\n+          addDirectoryContentsToLayer(\n+              CLASSES, localExplodedJarRoot, finalPredicateClasses, APP_ROOT);\n+\n+      // Resources layer.\n+      Predicate<Path> isInMetaInf =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"META-INF\"));\n+      Predicate<Path> finalPredicateResources =\n+          isInBootInfClasses.or(isInMetaInf).and(isClass.negate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NTA4Nw=="}, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzIxMjYxOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTozOToyNFrOIBC1hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTozOToyNFrOIBC1hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NTk1Nw==", "bodyText": "localExplodedJarRoot.resolve(\"BOOT-INF\").... No need for Paths.get().", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537965957", "createdAt": "2020-12-08T01:39:24Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -233,6 +325,66 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     }\n   }\n \n+  /**\n+   * Creates layers as specified by the layers.idx file (located in the BOOT-INF/ directory of the\n+   * JAR).\n+   *\n+   * @param localExplodedJarRoot Path to temporary directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if temporary directory provided doesn't exist\n+   */\n+  private static List<FileEntriesLayer> createLayersForLayeredSpringBootJar(\n+      Path localExplodedJarRoot) throws IOException {\n+    Path layerIndexPath = localExplodedJarRoot.resolve(Paths.get(\"BOOT-INF/layers.idx\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzIzNjQ1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTo0Nzo1NlrOIBDCbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTo0Nzo1NlrOIBDCbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2OTI2MQ==", "bodyText": "Let's move this down to line 207.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537969261", "createdAt": "2020-12-08T01:47:56Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n+      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+      if (layerIndex != null) {\n+        return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n+      }\n+\n+      ArrayList<FileEntriesLayer> layers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjM2NDIzOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo1NDo0N1rOIBzd4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOToxODo0OVrOIClSIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2MjcyMg==", "bodyText": "In the example above,\n      // - dependencies:\n      //   - BOOT-INF/lib/dependency1.jar\n      // - application:\n      //   - BOOT-INF/classes\n      //   - META-INF/\n\nBOOT-INF/classes is a directory but doesn't end with /. I think it's risky to assume every directory will end with /.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538762722", "createdAt": "2020-12-08T19:54:47Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -262,4 +414,18 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n             });\n     return builder.build();\n   }\n+\n+  private static Optional<Predicate<Path>> computePredicateForLayeredSpringBoot(\n+      List<String> layerContents, Path localExplodedJarRoot) {\n+    List<Predicate<Path>> allPredicates = new ArrayList<>();\n+    for (String pathName : layerContents) {\n+      if (pathName.endsWith(\"/\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3MzU1Mw==", "bodyText": "That is a good point and something I considered while writing this condition. But documentation on the format for layers.idx says that \"a directory name ends with /, a file name does not\" which is why decided to leave it in. (Sorry, the comment was pretty misleading)", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539573553", "createdAt": "2020-12-09T19:10:38Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -262,4 +414,18 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n             });\n     return builder.build();\n   }\n+\n+  private static Optional<Predicate<Path>> computePredicateForLayeredSpringBoot(\n+      List<String> layerContents, Path localExplodedJarRoot) {\n+    List<Predicate<Path>> allPredicates = new ArrayList<>();\n+    for (String pathName : layerContents) {\n+      if (pathName.endsWith(\"/\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2MjcyMg=="}, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3NTY0NA==", "bodyText": "I can modify it if we don't want to rely too much on the documentation.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539575644", "createdAt": "2020-12-09T19:13:55Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -262,4 +414,18 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n             });\n     return builder.build();\n   }\n+\n+  private static Optional<Predicate<Path>> computePredicateForLayeredSpringBoot(\n+      List<String> layerContents, Path localExplodedJarRoot) {\n+    List<Predicate<Path>> allPredicates = new ArrayList<>();\n+    for (String pathName : layerContents) {\n+      if (pathName.endsWith(\"/\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2MjcyMg=="}, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3ODkxMw==", "bodyText": "Ah, it's documented. I think we can rely on it. I thought it's not true based on your sample in the code comment.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539578913", "createdAt": "2020-12-09T19:18:49Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -262,4 +414,18 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n             });\n     return builder.build();\n   }\n+\n+  private static Optional<Predicate<Path>> computePredicateForLayeredSpringBoot(\n+      List<String> layerContents, Path localExplodedJarRoot) {\n+    List<Predicate<Path>> allPredicates = new ArrayList<>();\n+    for (String pathName : layerContents) {\n+      if (pathName.endsWith(\"/\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2MjcyMg=="}, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjM4MDc3OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo1ODozMFrOIBznQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo1ODozMFrOIBznQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2NTEyMA==", "bodyText": "Is it not possible to exclude META-INF, BOOT-INF, and org?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538765120", "createdAt": "2020-12-08T19:58:30Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -417,4 +423,318 @@ public void testComputeEntrypointForPackagedStandard_withMainClass()\n     assertThat(actualEntrypoint)\n         .isEqualTo(ImmutableList.of(\"java\", \"-jar\", \"/app/standardJarWithClassPath.jar\"));\n   }\n+\n+  @Test\n+  public void testCreateLayersForExplodedLayeredSpringBoot()\n+      throws IOException, URISyntaxException {\n+    Path springbootJar = Paths.get(Resources.getResource(SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.newFolder().toPath();\n+    List<FileEntriesLayer> layers =\n+        JarModeProcessor.createLayersForExplodedSpringBootFat(springbootJar, destDir);\n+\n+    assertThat(layers.size()).isEqualTo(4);\n+\n+    FileEntriesLayer nonSnapshotLayer = layers.get(0);\n+    FileEntriesLayer loaderLayer = layers.get(1);\n+    FileEntriesLayer snapshotLayer = layers.get(2);\n+    FileEntriesLayer applicationLayer = layers.get(3);\n+\n+    // Validate dependencies layers.\n+    assertThat(nonSnapshotLayer.getName()).isEqualTo(\"dependencies\");\n+    assertThat(\n+            nonSnapshotLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency1.jar\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency2.jar\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjM4NzgwOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDowMDowOVrOIBzrZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjowNzowNVrOID_ZRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2NjE4MA==", "bodyText": "Interesting. I guess layer.idx in this test doesn't have a resource layer for META-INF?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538766180", "createdAt": "2020-12-08T20:00:09Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -417,4 +423,318 @@ public void testComputeEntrypointForPackagedStandard_withMainClass()\n     assertThat(actualEntrypoint)\n         .isEqualTo(ImmutableList.of(\"java\", \"-jar\", \"/app/standardJarWithClassPath.jar\"));\n   }\n+\n+  @Test\n+  public void testCreateLayersForExplodedLayeredSpringBoot()\n+      throws IOException, URISyntaxException {\n+    Path springbootJar = Paths.get(Resources.getResource(SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.newFolder().toPath();\n+    List<FileEntriesLayer> layers =\n+        JarModeProcessor.createLayersForExplodedSpringBootFat(springbootJar, destDir);\n+\n+    assertThat(layers.size()).isEqualTo(4);\n+\n+    FileEntriesLayer nonSnapshotLayer = layers.get(0);\n+    FileEntriesLayer loaderLayer = layers.get(1);\n+    FileEntriesLayer snapshotLayer = layers.get(2);\n+    FileEntriesLayer applicationLayer = layers.get(3);\n+\n+    // Validate dependencies layers.\n+    assertThat(nonSnapshotLayer.getName()).isEqualTo(\"dependencies\");\n+    assertThat(\n+            nonSnapshotLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency1.jar\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency2.jar\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));\n+    assertThat(loaderLayer.getName()).isEqualTo(\"spring-boot-loader\");\n+    assertThat(\n+            loaderLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data/data1.class\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/launcher1.class\"));\n+\n+    assertThat(snapshotLayer.getName()).isEqualTo(\"snapshot-dependencies\");\n+    assertThat(\n+            snapshotLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency3-SNAPSHOT.jar\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));\n+\n+    assertThat(applicationLayer.getName()).isEqualTo(\"application\");\n+    assertThat(\n+            applicationLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/class1.class\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory/class2.class\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF/MANIFEST.MF\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1NTMwMQ==", "bodyText": "The layer.idx has an \"application\" layer which contains both classes and resources.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r541055301", "createdAt": "2020-12-11T16:07:05Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -417,4 +423,318 @@ public void testComputeEntrypointForPackagedStandard_withMainClass()\n     assertThat(actualEntrypoint)\n         .isEqualTo(ImmutableList.of(\"java\", \"-jar\", \"/app/standardJarWithClassPath.jar\"));\n   }\n+\n+  @Test\n+  public void testCreateLayersForExplodedLayeredSpringBoot()\n+      throws IOException, URISyntaxException {\n+    Path springbootJar = Paths.get(Resources.getResource(SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.newFolder().toPath();\n+    List<FileEntriesLayer> layers =\n+        JarModeProcessor.createLayersForExplodedSpringBootFat(springbootJar, destDir);\n+\n+    assertThat(layers.size()).isEqualTo(4);\n+\n+    FileEntriesLayer nonSnapshotLayer = layers.get(0);\n+    FileEntriesLayer loaderLayer = layers.get(1);\n+    FileEntriesLayer snapshotLayer = layers.get(2);\n+    FileEntriesLayer applicationLayer = layers.get(3);\n+\n+    // Validate dependencies layers.\n+    assertThat(nonSnapshotLayer.getName()).isEqualTo(\"dependencies\");\n+    assertThat(\n+            nonSnapshotLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency1.jar\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency2.jar\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));\n+    assertThat(loaderLayer.getName()).isEqualTo(\"spring-boot-loader\");\n+    assertThat(\n+            loaderLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data/data1.class\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/launcher1.class\"));\n+\n+    assertThat(snapshotLayer.getName()).isEqualTo(\"snapshot-dependencies\");\n+    assertThat(\n+            snapshotLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency3-SNAPSHOT.jar\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));\n+\n+    assertThat(applicationLayer.getName()).isEqualTo(\"application\");\n+    assertThat(\n+            applicationLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/class1.class\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory/class2.class\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF/MANIFEST.MF\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2NjE4MA=="}, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjM5MTQ5OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDowMTowN1rOIBztjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjowNzoxN1rOID_Z9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2NjczNA==", "bodyText": "I think it's worth adding the contents of layer.idx as a code comment.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538766734", "createdAt": "2020-12-08T20:01:07Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -417,4 +423,318 @@ public void testComputeEntrypointForPackagedStandard_withMainClass()\n     assertThat(actualEntrypoint)\n         .isEqualTo(ImmutableList.of(\"java\", \"-jar\", \"/app/standardJarWithClassPath.jar\"));\n   }\n+\n+  @Test\n+  public void testCreateLayersForExplodedLayeredSpringBoot()\n+      throws IOException, URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1NTQ3OA==", "bodyText": "Good idea.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r541055478", "createdAt": "2020-12-11T16:07:17Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -417,4 +423,318 @@ public void testComputeEntrypointForPackagedStandard_withMainClass()\n     assertThat(actualEntrypoint)\n         .isEqualTo(ImmutableList.of(\"java\", \"-jar\", \"/app/standardJarWithClassPath.jar\"));\n   }\n+\n+  @Test\n+  public void testCreateLayersForExplodedLayeredSpringBoot()\n+      throws IOException, URISyntaxException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2NjczNA=="}, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjM5MzE1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDowMToyOFrOIBzuhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDowMToyOFrOIBzuhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2Njk4Mg==", "bodyText": "Content of layers.idx as a comment?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538766982", "createdAt": "2020-12-08T20:01:28Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -417,4 +423,318 @@ public void testComputeEntrypointForPackagedStandard_withMainClass()\n     assertThat(actualEntrypoint)\n         .isEqualTo(ImmutableList.of(\"java\", \"-jar\", \"/app/standardJarWithClassPath.jar\"));\n   }\n+\n+  @Test\n+  public void testCreateLayersForExplodedLayeredSpringBoot()\n+      throws IOException, URISyntaxException {\n+    Path springbootJar = Paths.get(Resources.getResource(SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.newFolder().toPath();\n+    List<FileEntriesLayer> layers =\n+        JarModeProcessor.createLayersForExplodedSpringBootFat(springbootJar, destDir);\n+\n+    assertThat(layers.size()).isEqualTo(4);\n+\n+    FileEntriesLayer nonSnapshotLayer = layers.get(0);\n+    FileEntriesLayer loaderLayer = layers.get(1);\n+    FileEntriesLayer snapshotLayer = layers.get(2);\n+    FileEntriesLayer applicationLayer = layers.get(3);\n+\n+    // Validate dependencies layers.\n+    assertThat(nonSnapshotLayer.getName()).isEqualTo(\"dependencies\");\n+    assertThat(\n+            nonSnapshotLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency1.jar\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency2.jar\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));\n+    assertThat(loaderLayer.getName()).isEqualTo(\"spring-boot-loader\");\n+    assertThat(\n+            loaderLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data/data1.class\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/launcher1.class\"));\n+\n+    assertThat(snapshotLayer.getName()).isEqualTo(\"snapshot-dependencies\");\n+    assertThat(\n+            snapshotLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency3-SNAPSHOT.jar\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));\n+\n+    assertThat(applicationLayer.getName()).isEqualTo(\"application\");\n+    assertThat(\n+            applicationLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/class1.class\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory/class2.class\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF/MANIFEST.MF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));\n+  }\n+\n+  @Test\n+  public void testCreateLayersForExplodedLayeredSpringBoot_singleEmptyLayerListed()\n+      throws IOException, URISyntaxException {\n+    // Springboot JAR with \"snapshot-dependencies\" layer listed as empty in BOOT-INF/layers.idx", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjQxNjczOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDowNzoyM1rOIBz8MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjoxMTozNVrOID_k_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc3MDQ4MQ==", "bodyText": "Can we also check the name of each layer?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538770481", "createdAt": "2020-12-08T20:07:23Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -146,4 +151,222 @@ public void testToJibContainerBuilder_packagedStandard_basicInfo()\n                 .build()\n                 .getEntries());\n   }\n+\n+  @Test\n+  public void testToJibContainerBuilder_explodedLayeredSpringBoot_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();\n+    JibContainerBuilder containerBuilder =\n+        JarFiles.toJibContainerBuilder(springbootJar, destDir, ProcessingMode.exploded);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();\n+    assertThat(buildPlan.getEntrypoint())\n+        .isEqualTo(\n+            ImmutableList.of(\"java\", \"-cp\", \"/app\", \"org.springframework.boot.loader.JarLauncher\"));\n+    assertThat(buildPlan.getLayers().size()).isEqualTo(4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1ODMwMA==", "bodyText": "Done.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r541058300", "createdAt": "2020-12-11T16:11:35Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -146,4 +151,222 @@ public void testToJibContainerBuilder_packagedStandard_basicInfo()\n                 .build()\n                 .getEntries());\n   }\n+\n+  @Test\n+  public void testToJibContainerBuilder_explodedLayeredSpringBoot_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();\n+    JibContainerBuilder containerBuilder =\n+        JarFiles.toJibContainerBuilder(springbootJar, destDir, ProcessingMode.exploded);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();\n+    assertThat(buildPlan.getEntrypoint())\n+        .isEqualTo(\n+            ImmutableList.of(\"java\", \"-cp\", \"/app\", \"org.springframework.boot.loader.JarLauncher\"));\n+    assertThat(buildPlan.getLayers().size()).isEqualTo(4);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc3MDQ4MQ=="}, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjQyMjMxOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDowODo0N1rOIBz_Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjowODowMlrOID_b4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc3MTI3NA==", "bodyText": "I also commented this below, but we should try to exclude directories that don't belong to this layer.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538771274", "createdAt": "2020-12-08T20:08:47Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -146,4 +151,222 @@ public void testToJibContainerBuilder_packagedStandard_basicInfo()\n                 .build()\n                 .getEntries());\n   }\n+\n+  @Test\n+  public void testToJibContainerBuilder_explodedLayeredSpringBoot_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();\n+    JibContainerBuilder containerBuilder =\n+        JarFiles.toJibContainerBuilder(springbootJar, destDir, ProcessingMode.exploded);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();\n+    assertThat(buildPlan.getEntrypoint())\n+        .isEqualTo(\n+            ImmutableList.of(\"java\", \"-cp\", \"/app\", \"org.springframework.boot.loader.JarLauncher\"));\n+    assertThat(buildPlan.getLayers().size()).isEqualTo(4);\n+    assertThatExpectedEntriesPresentInNonSnapshotLayer_SpringBoot(\n+        ((FileEntriesLayer) buildPlan.getLayers().get(0)).getEntries(), destDir);\n+    assertThatExpectedEntriesPresentInLoaderLayer_SpringBoot(\n+        ((FileEntriesLayer) buildPlan.getLayers().get(1)).getEntries(), destDir);\n+    assertThatExpectedEntriesPresentInSnapshotLayer_SpringBoot(\n+        ((FileEntriesLayer) buildPlan.getLayers().get(2)).getEntries(), destDir);\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(3)).getEntries())\n+        .containsExactlyElementsIn(\n+            FileEntriesLayer.builder()\n+                .addEntry(destDir.resolve(\"META-INF/\"), AbsoluteUnixPath.get(\"/app/META-INF/\"))\n+                .addEntry(\n+                    destDir.resolve(\"META-INF/MANIFEST.MF\"),\n+                    AbsoluteUnixPath.get(\"/app/META-INF/MANIFEST.MF\"))\n+                .addEntry(destDir.resolve(\"BOOT-INF/\"), AbsoluteUnixPath.get(\"/app/BOOT-INF/\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1NTk2OQ==", "bodyText": "Good point. Applied this change.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r541055969", "createdAt": "2020-12-11T16:08:02Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -146,4 +151,222 @@ public void testToJibContainerBuilder_packagedStandard_basicInfo()\n                 .build()\n                 .getEntries());\n   }\n+\n+  @Test\n+  public void testToJibContainerBuilder_explodedLayeredSpringBoot_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();\n+    JibContainerBuilder containerBuilder =\n+        JarFiles.toJibContainerBuilder(springbootJar, destDir, ProcessingMode.exploded);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();\n+    assertThat(buildPlan.getEntrypoint())\n+        .isEqualTo(\n+            ImmutableList.of(\"java\", \"-cp\", \"/app\", \"org.springframework.boot.loader.JarLauncher\"));\n+    assertThat(buildPlan.getLayers().size()).isEqualTo(4);\n+    assertThatExpectedEntriesPresentInNonSnapshotLayer_SpringBoot(\n+        ((FileEntriesLayer) buildPlan.getLayers().get(0)).getEntries(), destDir);\n+    assertThatExpectedEntriesPresentInLoaderLayer_SpringBoot(\n+        ((FileEntriesLayer) buildPlan.getLayers().get(1)).getEntries(), destDir);\n+    assertThatExpectedEntriesPresentInSnapshotLayer_SpringBoot(\n+        ((FileEntriesLayer) buildPlan.getLayers().get(2)).getEntries(), destDir);\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(3)).getEntries())\n+        .containsExactlyElementsIn(\n+            FileEntriesLayer.builder()\n+                .addEntry(destDir.resolve(\"META-INF/\"), AbsoluteUnixPath.get(\"/app/META-INF/\"))\n+                .addEntry(\n+                    destDir.resolve(\"META-INF/MANIFEST.MF\"),\n+                    AbsoluteUnixPath.get(\"/app/META-INF/MANIFEST.MF\"))\n+                .addEntry(destDir.resolve(\"BOOT-INF/\"), AbsoluteUnixPath.get(\"/app/BOOT-INF/\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc3MTI3NA=="}, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODU4MjA4OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjowMzo1OVrOICrlcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjowMzo1OVrOICrlcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4MjE2MA==", "bodyText": "The Spring doc makes it very explicit that they are either dash-space or space-space-dash-space. I think we can use ' ' (space) instead of \\\\s. Also the doc says paths and layer names are quoted. So we can have it like Pattern.compile(\"- \\\"([^\\\"]*)\\\":\") (untested) without later removing quotes?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539682160", "createdAt": "2020-12-09T22:03:59Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -233,6 +325,66 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     }\n   }\n \n+  /**\n+   * Creates layers as specified by the layers.idx file (located in the BOOT-INF/ directory of the\n+   * JAR).\n+   *\n+   * @param localExplodedJarRoot Path to temporary directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if temporary directory provided doesn't exist\n+   */\n+  private static List<FileEntriesLayer> createLayersForLayeredSpringBootJar(\n+      Path localExplodedJarRoot) throws IOException {\n+    Path layerIndexPath = localExplodedJarRoot.resolve(Paths.get(\"BOOT-INF/layers.idx\"));\n+    Pattern layerNamePattern = Pattern.compile(\"-\\\\s(.*):\");\n+    Pattern fileNamePattern = Pattern.compile(\"\\\\s\\\\s-\\\\s(.*)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMDE1MzQ1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMzoyMDowMFrOIEUjAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoyNjo0MFrOIFY0XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQwMTg1OA==", "bodyText": "I vaguely remember I added Files.isDirectory(path) to not miss adding empty directories. (It's not because we wanted to add all the directories leading to /. Maybe missing empty directories doesn't matter in practice almost all the time, especially for jib jar. I wonder if we can just get rid of Files.isDirectory(path) and the new while loop below? As long as it works, we should be good?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r541401858", "createdAt": "2020-12-11T23:20:00Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -251,15 +392,36 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n       AbsoluteUnixPath basePathInContainer)\n       throws IOException {\n     FileEntriesLayer.Builder builder = FileEntriesLayer.builder().setName(layerName);\n+    HashSet<Path> addedPaths = new HashSet<>();\n     new DirectoryWalker(sourceRoot)\n         .filterRoot()\n-        .filter(path -> Files.isDirectory(path) || pathFilter.test(path))\n+        .filter(path -> pathFilter.test(path))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e268c65232e4ec0f9912a8c9ccb7744eb5483e"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMDQxMw==", "bodyText": "Good idea - Tried adding the path directly without adding any empty directories and it seemed to work! Will go with this for now.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542520413", "createdAt": "2020-12-14T16:26:40Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -251,15 +392,36 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n       AbsoluteUnixPath basePathInContainer)\n       throws IOException {\n     FileEntriesLayer.Builder builder = FileEntriesLayer.builder().setName(layerName);\n+    HashSet<Path> addedPaths = new HashSet<>();\n     new DirectoryWalker(sourceRoot)\n         .filterRoot()\n-        .filter(path -> Files.isDirectory(path) || pathFilter.test(path))\n+        .filter(path -> pathFilter.test(path))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQwMTg1OA=="}, "originalCommit": {"oid": "97e268c65232e4ec0f9912a8c9ccb7744eb5483e"}, "originalPosition": 309}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODk2MTc5OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzozNzowNFrOIFcI8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozOTowMFrOIFfQjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3NDgzMg==", "bodyText": "Nit: this should also work:\n    Predicate<Path> isFile = Files::isRegularFile;\nor\n    Predicate<Path> isResourceFile = isClassFile.negate().and(Files::isRegularFile);", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542574832", "createdAt": "2020-12-14T17:37:04Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -95,16 +105,21 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     Path localExplodedJarRoot = tempDirPath;\n     ZipUtil.unzip(jarPath, localExplodedJarRoot);\n     Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n-    Predicate<Path> isResourceFile = isClassFile.negate();\n+    Predicate<Path> isFile = path -> path.toFile().isFile();\n+    Predicate<Path> isResourceFile = isFile.and(isClassFile.negate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64797b74123e9dde635eb8de1324c956f11a92c2"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyNTkzNA==", "bodyText": "thank you!", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542625934", "createdAt": "2020-12-14T18:39:00Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -95,16 +105,21 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     Path localExplodedJarRoot = tempDirPath;\n     ZipUtil.unzip(jarPath, localExplodedJarRoot);\n     Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n-    Predicate<Path> isResourceFile = isClassFile.negate();\n+    Predicate<Path> isFile = path -> path.toFile().isFile();\n+    Predicate<Path> isResourceFile = isFile.and(isClassFile.negate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3NDgzMg=="}, "originalCommit": {"oid": "64797b74123e9dde635eb8de1324c956f11a92c2"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODk3MDg3OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzozOTowOFrOIFcOXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo0MDoyNlrOIFfWkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3NjIyMQ==", "bodyText": "Start this with checking a file and remove the AND operation at the caller site?\nPredicate<Path> predicate = Files::isRegularFile;", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542576221", "createdAt": "2020-12-14T17:39:08Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -253,13 +396,24 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n     FileEntriesLayer.Builder builder = FileEntriesLayer.builder().setName(layerName);\n     new DirectoryWalker(sourceRoot)\n         .filterRoot()\n-        .filter(path -> Files.isDirectory(path) || pathFilter.test(path))\n+        .filter(path -> pathFilter.test(path))\n         .walk(\n             path -> {\n-              AbsoluteUnixPath pathOnContainer =\n-                  basePathInContainer.resolve(sourceRoot.relativize(path));\n-              builder.addEntry(path, pathOnContainer);\n+              builder.addEntry(path, basePathInContainer.resolve(sourceRoot.relativize(path)));\n             });\n     return builder.build();\n   }\n+\n+  private static Predicate<Path> isInListedDirectoryOrIsSameFile(\n+      List<String> layerContents, Path localExplodedJarRoot) {\n+    Predicate<Path> predicate = Predicates.alwaysFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64797b74123e9dde635eb8de1324c956f11a92c2"}, "originalPosition": 330}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyNTc0OQ==", "bodyText": "hm this method needs to check if the path is in one of the directories listed or if the path is the same as one of the files listed, which requires us to use the or condition. Since checking for a file requires and (we always want to check or this), starting with this predicate is a little challenging. I added it at the end of the method, once all the predicates were checked, but please let me know if I'm missing something here.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542625749", "createdAt": "2020-12-14T18:38:51Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -253,13 +396,24 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n     FileEntriesLayer.Builder builder = FileEntriesLayer.builder().setName(layerName);\n     new DirectoryWalker(sourceRoot)\n         .filterRoot()\n-        .filter(path -> Files.isDirectory(path) || pathFilter.test(path))\n+        .filter(path -> pathFilter.test(path))\n         .walk(\n             path -> {\n-              AbsoluteUnixPath pathOnContainer =\n-                  basePathInContainer.resolve(sourceRoot.relativize(path));\n-              builder.addEntry(path, pathOnContainer);\n+              builder.addEntry(path, basePathInContainer.resolve(sourceRoot.relativize(path)));\n             });\n     return builder.build();\n   }\n+\n+  private static Predicate<Path> isInListedDirectoryOrIsSameFile(\n+      List<String> layerContents, Path localExplodedJarRoot) {\n+    Predicate<Path> predicate = Predicates.alwaysFalse();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3NjIyMQ=="}, "originalCommit": {"oid": "64797b74123e9dde635eb8de1324c956f11a92c2"}, "originalPosition": 330}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyNzQ3NQ==", "bodyText": "Ah, you're right. Good catch.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542627475", "createdAt": "2020-12-14T18:40:26Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -253,13 +396,24 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n     FileEntriesLayer.Builder builder = FileEntriesLayer.builder().setName(layerName);\n     new DirectoryWalker(sourceRoot)\n         .filterRoot()\n-        .filter(path -> Files.isDirectory(path) || pathFilter.test(path))\n+        .filter(path -> pathFilter.test(path))\n         .walk(\n             path -> {\n-              AbsoluteUnixPath pathOnContainer =\n-                  basePathInContainer.resolve(sourceRoot.relativize(path));\n-              builder.addEntry(path, pathOnContainer);\n+              builder.addEntry(path, basePathInContainer.resolve(sourceRoot.relativize(path)));\n             });\n     return builder.build();\n   }\n+\n+  private static Predicate<Path> isInListedDirectoryOrIsSameFile(\n+      List<String> layerContents, Path localExplodedJarRoot) {\n+    Predicate<Path> predicate = Predicates.alwaysFalse();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3NjIyMQ=="}, "originalCommit": {"oid": "64797b74123e9dde635eb8de1324c956f11a92c2"}, "originalPosition": 330}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTM0MjgwOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo0NjowOFrOIFfupw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo0NjowOFrOIFfupw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYzMzYzOQ==", "bodyText": "Nit: in this case, I think giving a name pathOnContainer via a variable as in the original code improves readabilty. It's not easy to figure out what basePathInContainer.resolve(sourceRoot.relativize(path)) means.", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542633639", "createdAt": "2020-12-14T18:46:08Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -253,13 +394,24 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n     FileEntriesLayer.Builder builder = FileEntriesLayer.builder().setName(layerName);\n     new DirectoryWalker(sourceRoot)\n         .filterRoot()\n-        .filter(path -> Files.isDirectory(path) || pathFilter.test(path))\n+        .filter(path -> pathFilter.test(path))\n         .walk(\n             path -> {\n-              AbsoluteUnixPath pathOnContainer =\n-                  basePathInContainer.resolve(sourceRoot.relativize(path));\n-              builder.addEntry(path, pathOnContainer);\n+              builder.addEntry(path, basePathInContainer.resolve(sourceRoot.relativize(path)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557fc14e51af04d59499e37a753bff4131d41930"}, "originalPosition": 321}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTM3Mjk1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo1MDozMFrOIFgBhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo1MDozMFrOIFgBhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYzODQ3MQ==", "bodyText": "springBootJar per Google-style\nand can we have a bit more meaningful name than destDir?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542638471", "createdAt": "2020-12-14T18:50:30Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -139,11 +134,167 @@ public void testToJibContainerBuilder_packagedStandard_basicInfo()\n                     AbsoluteUnixPath.get(\"/app/dependency1\"))\n                 .build()\n                 .getEntries());\n+    assertThat(buildPlan.getLayers().get(1).getName()).isEqualTo(\"jar\");\n     assertThat(((FileEntriesLayer) buildPlan.getLayers().get(1)).getEntries())\n-        .containsExactlyElementsIn(\n+        .isEqualTo(\n             FileEntriesLayer.builder()\n                 .addEntry(standardJar, AbsoluteUnixPath.get(\"/app/basicStandardJar.jar\"))\n                 .build()\n                 .getEntries());\n   }\n+\n+  @Test\n+  public void testToJibContainerBuilder_explodedLayeredSpringBoot_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557fc14e51af04d59499e37a753bff4131d41930"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTM4NDc4OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo1MjowNVrOIFgIyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo1MjowNVrOIFgIyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0MDMzMQ==", "bodyText": "isEqualTo?", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542640331", "createdAt": "2020-12-14T18:52:05Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -139,11 +134,167 @@ public void testToJibContainerBuilder_packagedStandard_basicInfo()\n                     AbsoluteUnixPath.get(\"/app/dependency1\"))\n                 .build()\n                 .getEntries());\n+    assertThat(buildPlan.getLayers().get(1).getName()).isEqualTo(\"jar\");\n     assertThat(((FileEntriesLayer) buildPlan.getLayers().get(1)).getEntries())\n-        .containsExactlyElementsIn(\n+        .isEqualTo(\n             FileEntriesLayer.builder()\n                 .addEntry(standardJar, AbsoluteUnixPath.get(\"/app/basicStandardJar.jar\"))\n                 .build()\n                 .getEntries());\n   }\n+\n+  @Test\n+  public void testToJibContainerBuilder_explodedLayeredSpringBoot_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();\n+    JibContainerBuilder containerBuilder =\n+        JarFiles.toJibContainerBuilder(springbootJar, destDir, ProcessingMode.exploded);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();\n+    assertThat(buildPlan.getEntrypoint())\n+        .isEqualTo(\n+            ImmutableList.of(\"java\", \"-cp\", \"/app\", \"org.springframework.boot.loader.JarLauncher\"));\n+    assertThat(buildPlan.getLayers().size()).isEqualTo(4);\n+\n+    assertThat(buildPlan.getLayers().get(0).getName()).isEqualTo(\"dependencies\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(0)).getEntries())\n+        .isEqualTo(\n+            FileEntriesLayer.builder()\n+                .addEntry(\n+                    destDir.resolve(\"BOOT-INF/lib/dependency1.jar\"),\n+                    AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency1.jar\"))\n+                .build()\n+                .getEntries());\n+\n+    assertThat(buildPlan.getLayers().get(1).getName()).isEqualTo(\"spring-boot-loader\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(1)).getEntries())\n+        .containsExactlyElementsIn(\n+            FileEntriesLayer.builder()\n+                .addEntry(\n+                    destDir.resolve(\"org/launcher.class\"),\n+                    AbsoluteUnixPath.get(\"/app/org/launcher.class\"))\n+                .addEntry(\n+                    destDir.resolve(\"org/orgDirectory/data1.class\"),\n+                    AbsoluteUnixPath.get(\"/app/org/orgDirectory/data1.class\"))\n+                .build()\n+                .getEntries());\n+\n+    assertThat(buildPlan.getLayers().get(2).getName()).isEqualTo(\"snapshot-dependencies\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(2)).getEntries())\n+        .isEqualTo(\n+            FileEntriesLayer.builder()\n+                .addEntry(\n+                    destDir.resolve(\"BOOT-INF/lib/dependency3-SNAPSHOT.jar\"),\n+                    AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency3-SNAPSHOT.jar\"))\n+                .build()\n+                .getEntries());\n+\n+    assertThat(buildPlan.getLayers().get(3).getName()).isEqualTo(\"application\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(3)).getEntries())\n+        .containsExactlyElementsIn(\n+            FileEntriesLayer.builder()\n+                .addEntry(\n+                    destDir.resolve(\"META-INF/MANIFEST.MF\"),\n+                    AbsoluteUnixPath.get(\"/app/META-INF/MANIFEST.MF\"))\n+                .addEntry(\n+                    destDir.resolve(\"BOOT-INF/classes/class1.class\"),\n+                    AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/class1.class\"))\n+                .addEntry(\n+                    destDir.resolve(\"BOOT-INF/classes/classDirectory/class2.class\"),\n+                    AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory/class2.class\"))\n+                .build()\n+                .getEntries());\n+  }\n+\n+  @Test\n+  public void testToJibContainerBuilder_explodedNonLayeredSpringBoot_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_NON_LAYERED).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();\n+    JibContainerBuilder containerBuilder =\n+        JarFiles.toJibContainerBuilder(springbootJar, destDir, ProcessingMode.exploded);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();\n+    assertThat(buildPlan.getEntrypoint())\n+        .isEqualTo(\n+            ImmutableList.of(\"java\", \"-cp\", \"/app\", \"org.springframework.boot.loader.JarLauncher\"));\n+    assertThat(buildPlan.getLayers().size()).isEqualTo(5);\n+\n+    assertThat(buildPlan.getLayers().get(0).getName()).isEqualTo(\"dependencies\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(0)).getEntries())\n+        .isEqualTo(\n+            FileEntriesLayer.builder()\n+                .addEntry(\n+                    destDir.resolve(\"BOOT-INF/lib/dependency1.jar\"),\n+                    AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency1.jar\"))\n+                .build()\n+                .getEntries());\n+\n+    assertThat(buildPlan.getLayers().get(1).getName()).isEqualTo(\"spring-boot-loader\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(1)).getEntries())\n+        .containsExactlyElementsIn(\n+            FileEntriesLayer.builder()\n+                .addEntry(\n+                    destDir.resolve(\"org/launcher.class\"),\n+                    AbsoluteUnixPath.get(\"/app/org/launcher.class\"))\n+                .addEntry(\n+                    destDir.resolve(\"org/orgDirectory/data1.class\"),\n+                    AbsoluteUnixPath.get(\"/app/org/orgDirectory/data1.class\"))\n+                .build()\n+                .getEntries());\n+\n+    assertThat(buildPlan.getLayers().get(2).getName()).isEqualTo(\"snapshot dependencies\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(2)).getEntries())\n+        .containsExactlyElementsIn(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557fc14e51af04d59499e37a753bff4131d41930"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTQwMjczOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo1NDo0MFrOIFgUMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo1NDo0MFrOIFgUMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0MzI1MA==", "bodyText": "This should go before doing layers.get(0).\nAnd we should also have assertThat(resourcesLayer.getEntries().gietSize()).isEqualTo(1).", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542643250", "createdAt": "2020-12-14T18:54:40Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -70,33 +76,11 @@ public void testCreateLayersForExplodedStandard_emptyJar()\n     Path destDir = temporaryFolder.newFolder().toPath();\n     List<FileEntriesLayer> layers =\n         JarModeProcessor.createLayersForExplodedStandard(standardJar, destDir);\n-\n-    assertThat(layers.size()).isEqualTo(2);\n-\n     FileEntriesLayer resourcesLayer = layers.get(0);\n-    FileEntriesLayer classesLayer = layers.get(1);\n \n-    // Validate resources layer.\n-    List<AbsoluteUnixPath> actualResourcesPath =\n-        resourcesLayer\n-            .getEntries()\n-            .stream()\n-            .map(FileEntry::getExtractionPath)\n-            .collect(Collectors.toList());\n-    assertThat(actualResourcesPath)\n-        .containsExactly(\n-            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF/MANIFEST.MF\"));\n-\n-    // Validate classes layer.\n-    List<AbsoluteUnixPath> actualClassesPath =\n-        classesLayer\n-            .getEntries()\n-            .stream()\n-            .map(FileEntry::getExtractionPath)\n-            .collect(Collectors.toList());\n-    assertThat(actualClassesPath)\n-        .containsExactly(AbsoluteUnixPath.get(\"/app/explodedJar/META-INF\"));\n+    assertThat(layers.size()).isEqualTo(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557fc14e51af04d59499e37a753bff4131d41930"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTQ4MDU1OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTowNDo0N1rOIFhFig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTowNDo0N1rOIFhFig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1NTg4Mg==", "bodyText": "Likewise, need to assert the size of getEntries().", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542655882", "createdAt": "2020-12-14T19:04:47Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -129,14 +113,8 @@ public void testCreateLayersForExplodedStandard_withClassPathInManifest()\n                 AbsoluteUnixPath.get(\"/app/dependencies/dependency2\"),\n                 AbsoluteUnixPath.get(\"/app/dependencies/dependency4\")));\n     assertThat(snapshotLayer.getName()).isEqualTo(\"snapshot dependencies\");\n-    assertThat(\n-            snapshotLayer\n-                .getEntries()\n-                .stream()\n-                .map(FileEntry::getExtractionPath)\n-                .collect(Collectors.toList()))\n-        .isEqualTo(\n-            ImmutableList.of(AbsoluteUnixPath.get(\"/app/dependencies/dependency3-SNAPSHOT-1.jar\")));\n+    assertThat(snapshotLayer.getEntries().get(0).getExtractionPath())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557fc14e51af04d59499e37a753bff4131d41930"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTQ4NDUwOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTowNToyM1rOIFhH5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTowNToyM1rOIFhH5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1NjQ4Ng==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542656486", "createdAt": "2020-12-14T19:05:23Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -252,16 +210,8 @@ public void testCreateLayersForExplodedStandard_withoutClassPathInManifest_conta\n     FileEntriesLayer classesLayer = layers.get(1);\n \n     // Validate resources layer.\n-    List<AbsoluteUnixPath> actualResourcesPath =\n-        resourcesLayer\n-            .getEntries()\n-            .stream()\n-            .map(FileEntry::getExtractionPath)\n-            .collect(Collectors.toList());\n-    assertThat(actualResourcesPath)\n-        .containsExactly(\n-            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF/MANIFEST.MF\"));\n+    assertThat(resourcesLayer.getEntries().get(0).getExtractionPath())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557fc14e51af04d59499e37a753bff4131d41930"}, "originalPosition": 156}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 48, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}