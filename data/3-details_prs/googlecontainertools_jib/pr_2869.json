{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNzk5NTY4", "number": 2869, "title": "Implement class to generate JibContainerBuilder from contents of jar file", "bodyText": "Fixes #2864\nThis will only populate the JibContainerBuilder with the layers and entrypoint derived from the processing the jar. It currently doesn't take into account an option of providing a base image through the cli so it builds the image from scratch.", "createdAt": "2020-10-28T19:52:23Z", "url": "https://github.com/GoogleContainerTools/jib/pull/2869", "merged": true, "mergeCommit": {"oid": "e32183284a77a6682cd46ecf7d7b3239152441db"}, "closed": true, "closedAt": "2020-10-30T16:32:27Z", "author": {"login": "mpeddada1"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXC4XOAH2gAyNTExNzk5NTY4OjU2ZGMyYzk3YThhYTI2ZDQxNTljNjc1NzExNDRmMTc5ODQ1ZTBiMmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXZs_sAFqTUyMDEyNjcxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "56dc2c97a8aa26d4159c67571144f179845e0b2b", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/56dc2c97a8aa26d4159c67571144f179845e0b2b", "committedDate": "2020-10-28T19:38:52Z", "message": "implement class to convert a jar to a JibContainerBuilder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35556ef2c1524c58cbca267c2dbf1187e1632eee", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/35556ef2c1524c58cbca267c2dbf1187e1632eee", "committedDate": "2020-10-28T19:49:11Z", "message": "update javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e98ee2aef44188f98248fbb20b169ed5e00ba26", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/5e98ee2aef44188f98248fbb20b169ed5e00ba26", "committedDate": "2020-10-28T21:51:35Z", "message": "use distroless as base image"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NzU4MDUz", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#pullrequestreview-519758053", "createdAt": "2020-10-29T14:58:58Z", "commit": {"oid": "5e98ee2aef44188f98248fbb20b169ed5e00ba26"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1ODo1OFrOHqgAGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToxOTo0NVrOHqhAbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyNjU1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @throws InvalidImageReferenceException if the base image used is invalid\n          \n          \n            \n               * @throws InvalidImageReferenceException if the base image reference is invalid", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514326553", "createdAt": "2020-10-29T14:58:58Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverter.java", "diffHunk": "@@ -35,10 +36,14 @@\n    * @return JibContainerBuilder\n    * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n    *     provided doesn't exist\n+   * @throws InvalidImageReferenceException if the base image used is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e98ee2aef44188f98248fbb20b169ed5e00ba26"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzNTM2Nw==", "bodyText": "Can you file an issue to use gcr.io/distroless/java:11 when the application is Java 11+?", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514335367", "createdAt": "2020-10-29T15:10:05Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.jar;\n+\n+import com.google.cloud.tools.jib.api.InvalidImageReferenceException;\n+import com.google.cloud.tools.jib.api.Jib;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+/** Class to build a container representation from the contents of a jar file. */\n+public class JarToJibContainerBuilderConverter {\n+\n+  /**\n+   * Generates a {@link JibContainerBuilder} from contents of a jar file.\n+   *\n+   * @param jarPath path to the jar file\n+   * @param tempDirPath path to a temporary directory which will be used store the exploded jar's\n+   *     contents\n+   * @return JibContainerBuilder\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   * @throws InvalidImageReferenceException if the base image used is invalid\n+   */\n+  public static JibContainerBuilder toJibContainerBuilder(Path jarPath, Path tempDirPath)\n+      throws IOException, InvalidImageReferenceException {\n+\n+    // Use distroless as the base image.\n+    JibContainerBuilder containerBuilder = Jib.from(\"gcr.io/distroless/java\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e98ee2aef44188f98248fbb20b169ed5e00ba26"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MDg5Ng==", "bodyText": "Not always, to<AnotherClass>() is conventional for an instance of a class to transform to or provide an instance of another class. And in this case, the method name can be made more clear. Or, maybe, this is a very short code block, and creating a converter class is an overkill? But honestly, I don't grasp the overall design honestly, I am not sure.\nAnd, perhaps this can be package-private? Let's start with limited scope. It's easy to make it public, but it's difficult to find methods with unnecessarily larger access.", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514340896", "createdAt": "2020-10-29T15:17:04Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.jar;\n+\n+import com.google.cloud.tools.jib.api.InvalidImageReferenceException;\n+import com.google.cloud.tools.jib.api.Jib;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+/** Class to build a container representation from the contents of a jar file. */\n+public class JarToJibContainerBuilderConverter {\n+\n+  /**\n+   * Generates a {@link JibContainerBuilder} from contents of a jar file.\n+   *\n+   * @param jarPath path to the jar file\n+   * @param tempDirPath path to a temporary directory which will be used store the exploded jar's\n+   *     contents\n+   * @return JibContainerBuilder\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   * @throws InvalidImageReferenceException if the base image used is invalid\n+   */\n+  public static JibContainerBuilder toJibContainerBuilder(Path jarPath, Path tempDirPath)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e98ee2aef44188f98248fbb20b169ed5e00ba26"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MTMyOA==", "bodyText": "super nit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Path destDir = temporaryFolder.newFolder().toPath();\n          \n          \n            \n                Path destDir = temporaryFolder.getRoot().toPath();", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514341328", "createdAt": "2020-10-29T15:17:36Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverterTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.jar;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.api.InvalidImageReferenceException;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.ContainerBuildPlan;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntry;\n+import com.google.cloud.tools.jib.api.buildplan.ImageFormat;\n+import com.google.cloud.tools.jib.api.buildplan.Platform;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Instant;\n+import java.util.stream.Collectors;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class JarToJibContainerBuilderConverterTest {\n+  private static final String SIMPLE_STANDARD_JAR = \"jar/standard/basicStandardJar.jar\";\n+\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testToJibContainerBuilder_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path standardJar = Paths.get(Resources.getResource(SIMPLE_STANDARD_JAR).toURI());\n+    Path destDir = temporaryFolder.newFolder().toPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e98ee2aef44188f98248fbb20b169ed5e00ba26"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MzAyMg==", "bodyText": "Why is the assertion for .get(0) looks different than other layers below?", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514343022", "createdAt": "2020-10-29T15:19:45Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverterTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.jar;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.api.InvalidImageReferenceException;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.ContainerBuildPlan;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntry;\n+import com.google.cloud.tools.jib.api.buildplan.ImageFormat;\n+import com.google.cloud.tools.jib.api.buildplan.Platform;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Instant;\n+import java.util.stream.Collectors;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class JarToJibContainerBuilderConverterTest {\n+  private static final String SIMPLE_STANDARD_JAR = \"jar/standard/basicStandardJar.jar\";\n+\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testToJibContainerBuilder_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path standardJar = Paths.get(Resources.getResource(SIMPLE_STANDARD_JAR).toURI());\n+    Path destDir = temporaryFolder.newFolder().toPath();\n+    JibContainerBuilder containerBuilder =\n+        JarToJibContainerBuilderConverter.toJibContainerBuilder(standardJar, destDir);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();\n+    assertThat(buildPlan.getEntrypoint())\n+        .isEqualTo(\n+            ImmutableList.of(\"java\", \"-cp\", \"/app/explodedJar:/app/dependencies/*\", \"HelloWorld\"));\n+    assertThat(\n+            ((FileEntriesLayer) buildPlan.getLayers().get(0))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e98ee2aef44188f98248fbb20b169ed5e00ba26"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "657dd676633931407a38824ff8056e1d8f90a5a0", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/657dd676633931407a38824ff8056e1d8f90a5a0", "committedDate": "2020-10-29T18:56:40Z", "message": "fix tests and javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96a9bcb61913dcc4bb04d71ef3c81d1e963ea93d", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/96a9bcb61913dcc4bb04d71ef3c81d1e963ea93d", "committedDate": "2020-10-29T19:37:57Z", "message": "renaming class and method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fc774e95d169f0deee3f18642d93b25d1cdcc8b", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/2fc774e95d169f0deee3f18642d93b25d1cdcc8b", "committedDate": "2020-10-29T19:53:32Z", "message": "delete unrelated file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMTI2NzE1", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#pullrequestreview-520126715", "createdAt": "2020-10-29T22:13:40Z", "commit": {"oid": "2fc774e95d169f0deee3f18642d93b25d1cdcc8b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjoxMzo0MFrOHqwk4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjoxMzo0MFrOHqwk4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5ODExNQ==", "bodyText": "Food for thought: these are certainly interesting things, and I guess the user should be allowed to configure them. Then we get back to the same question we had for the usual Jib build command. Originally, everything was through command-line options and we didn't have a \"build file.\" This makes me think, maybe, the jib jar subcommand should also support a \"build file.\" Then the layers field should probably be interpreted in a different way. I don't know.", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514598115", "createdAt": "2020-10-29T22:13:40Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.jar;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.api.InvalidImageReferenceException;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.ContainerBuildPlan;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.ImageFormat;\n+import com.google.cloud.tools.jib.api.buildplan.Platform;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Instant;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class JarFilesTest {\n+  private static final String SIMPLE_STANDARD_JAR = \"jar/standard/basicStandardJar.jar\";\n+\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testToJibContainerBuilder_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path standardJar = Paths.get(Resources.getResource(SIMPLE_STANDARD_JAR).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();\n+    JibContainerBuilder containerBuilder = JarFiles.toJibContainerBuilder(standardJar, destDir);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fc774e95d169f0deee3f18642d93b25d1cdcc8b"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4854, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}