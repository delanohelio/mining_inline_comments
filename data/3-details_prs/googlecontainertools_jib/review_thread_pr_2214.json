{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NzM1NDY5", "number": 2214, "reviewThreads": {"totalCount": 55, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoxMTo0MFrODW-J2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzo1NjoyMFrODZ1rkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDEzNTk0OnYy", "diffSide": "RIGHT", "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildTarMojo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoxMTo0MFrOFcCFWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoxMTo0MFrOFcCFWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkzODU4Nw==", "bodyText": "I believe this returns the project version, like <version>0.0.1-SNAPSHOT</version> in pom.xml. We have ProjectInfo.VERSION (which works only when the code is packaged as a JAR).", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r364938587", "createdAt": "2020-01-09T20:11:40Z", "author": {"login": "chanseokoh"}, "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildTarMojo.java", "diffHunk": "@@ -65,6 +68,12 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n     MavenProjectProperties projectProperties =\n         MavenProjectProperties.getForProject(\n             getProject(), getSession(), getLog(), tempDirectoryProvider);\n+    UpdateChecker updateChecker =\n+        UpdateChecker.checkForUpdate(\n+            projectProperties.isOffline() || !getLog().isInfoEnabled(),\n+            projectProperties.getVersion(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfe86e9d2fdfadde2c786cc54dd2f88e566eb346"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDE3NzA3OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoyODoxNlrOFcCeyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDoyODoxNlrOFcCeyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0NTA5Nw==", "bodyText": "Abort if", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r364945097", "createdAt": "2020-01-09T20:28:16Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param skip if {@code true}, the update check itself will be skipped\n+   * @param version the current version of Jib being used\n+   * @param versionUrl the location to check for the latest version\n+   * @param executorService the {@link ExecutorService}\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(\n+      boolean skip, String version, String versionUrl, ExecutorService executorService) {\n+    return new UpdateChecker(\n+        executorService.submit(\n+            () -> performUpdateCheck(skip, version, versionUrl, getConfigDir())));\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      boolean skip, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (skip || Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    try {\n+      Path configFile = configDir.resolve(\"config.json\");\n+      if (Files.exists(configFile)) {\n+        // Abort of update checks are disabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDE5MjMxOnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDozNDo0NlrOFcCoTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDoxNzowMlrOFdDTFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0NzUzNA==", "bodyText": "This is not really necessary given the circumstances, but since it's not a big deal to do it, let's have HttpURLConnection connection = (HttpURLConnection) ... and call connection.disconnect() at the end.\nAnd there should be some way to set some timeout values with HttpURLConnection. It's worth setting them a small value.\nAnd can you verify Maven and Gradle both terminate right away even if this thread is alive, e.g., by putting Thread.sleep(10000) here? (UPDATE: see #2214 (comment).)", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r364947534", "createdAt": "2020-01-09T20:34:46Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param skip if {@code true}, the update check itself will be skipped\n+   * @param version the current version of Jib being used\n+   * @param versionUrl the location to check for the latest version\n+   * @param executorService the {@link ExecutorService}\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(\n+      boolean skip, String version, String versionUrl, ExecutorService executorService) {\n+    return new UpdateChecker(\n+        executorService.submit(\n+            () -> performUpdateCheck(skip, version, versionUrl, getConfigDir())));\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      boolean skip, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (skip || Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    try {\n+      Path configFile = configDir.resolve(\"config.json\");\n+      if (Files.exists(configFile)) {\n+        // Abort of update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        JsonTemplateMapper.writeTo(config, Files.newOutputStream(configFile));\n+      }\n+\n+      // Check time of last update check\n+      Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      URLConnection connection = new URL(versionUrl).openConnection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwNzA2MQ==", "bodyText": "Looks like it does terminate right away.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366007061", "createdAt": "2020-01-13T20:17:02Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param skip if {@code true}, the update check itself will be skipped\n+   * @param version the current version of Jib being used\n+   * @param versionUrl the location to check for the latest version\n+   * @param executorService the {@link ExecutorService}\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(\n+      boolean skip, String version, String versionUrl, ExecutorService executorService) {\n+    return new UpdateChecker(\n+        executorService.submit(\n+            () -> performUpdateCheck(skip, version, versionUrl, getConfigDir())));\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      boolean skip, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (skip || Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    try {\n+      Path configFile = configDir.resolve(\"config.json\");\n+      if (Files.exists(configFile)) {\n+        // Abort of update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        JsonTemplateMapper.writeTo(config, Files.newOutputStream(configFile));\n+      }\n+\n+      // Check time of last update check\n+      Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      URLConnection connection = new URL(versionUrl).openConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0NzUzNA=="}, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDIwMDc2OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDozODoxNVrOFcCtnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDozODoxNVrOFcCtnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0ODg5Mg==", "bodyText": "How about attempting to delete both the config file and lastUpdateCheck? That can fix the situation if any of the files is corrupt.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r364948892", "createdAt": "2020-01-09T20:38:15Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param skip if {@code true}, the update check itself will be skipped\n+   * @param version the current version of Jib being used\n+   * @param versionUrl the location to check for the latest version\n+   * @param executorService the {@link ExecutorService}\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(\n+      boolean skip, String version, String versionUrl, ExecutorService executorService) {\n+    return new UpdateChecker(\n+        executorService.submit(\n+            () -> performUpdateCheck(skip, version, versionUrl, getConfigDir())));\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      boolean skip, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (skip || Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    try {\n+      Path configFile = configDir.resolve(\"config.json\");\n+      if (Files.exists(configFile)) {\n+        // Abort of update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        JsonTemplateMapper.writeTo(config, Files.newOutputStream(configFile));\n+      }\n+\n+      // Check time of last update check\n+      Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      URLConnection connection = new URL(versionUrl).openConnection();\n+      BufferedReader bufferedReader =\n+          new BufferedReader(\n+              new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+      String latestVersion = bufferedReader.readLine().trim();\n+      Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+      if (currentVersion.equals(latestVersion)) {\n+        return Optional.empty();\n+      }\n+      return Optional.of(\n+          \"A new version of Jib (\"\n+              + latestVersion\n+              + \") is available (currently using \"\n+              + currentVersion\n+              + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+    } catch (IOException ignored) {\n+      // Fail silently", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDIxMDU2OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDo0MjoxMlrOFcCzxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo1OToxOFrOFdBJxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk1MDQ2OQ==", "bodyText": "I think reading and writing files is fast enough, so they don't have to be in a thread? I think it's OK to run only the network connection code in a thread.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r364950469", "createdAt": "2020-01-09T20:42:12Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param skip if {@code true}, the update check itself will be skipped\n+   * @param version the current version of Jib being used\n+   * @param versionUrl the location to check for the latest version\n+   * @param executorService the {@link ExecutorService}\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(\n+      boolean skip, String version, String versionUrl, ExecutorService executorService) {\n+    return new UpdateChecker(\n+        executorService.submit(\n+            () -> performUpdateCheck(skip, version, versionUrl, getConfigDir())));\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      boolean skip, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (skip || Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1ODg2MQ==", "bodyText": "Is there a disadvantage to just running the whole thing in a different thread?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r365958861", "createdAt": "2020-01-13T18:30:26Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param skip if {@code true}, the update check itself will be skipped\n+   * @param version the current version of Jib being used\n+   * @param versionUrl the location to check for the latest version\n+   * @param executorService the {@link ExecutorService}\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(\n+      boolean skip, String version, String versionUrl, ExecutorService executorService) {\n+    return new UpdateChecker(\n+        executorService.submit(\n+            () -> performUpdateCheck(skip, version, versionUrl, getConfigDir())));\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      boolean skip, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (skip || Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk1MDQ2OQ=="}, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3MTkxMQ==", "bodyText": "Not really. I think either way is fine.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r365971911", "createdAt": "2020-01-13T18:59:18Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param skip if {@code true}, the update check itself will be skipped\n+   * @param version the current version of Jib being used\n+   * @param versionUrl the location to check for the latest version\n+   * @param executorService the {@link ExecutorService}\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(\n+      boolean skip, String version, String versionUrl, ExecutorService executorService) {\n+    return new UpdateChecker(\n+        executorService.submit(\n+            () -> performUpdateCheck(skip, version, versionUrl, getConfigDir())));\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      boolean skip, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (skip || Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk1MDQ2OQ=="}, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDIxMzg3OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDo0MzozM1rOFcC17w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDo0MzozM1rOFcC17w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk1MTAyMw==", "bodyText": "Just temporaryFolder.getRoot()?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r364951023", "createdAt": "2020-01-09T20:43:33Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.http.TestWebServer;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.FileTime;\n+import java.security.GeneralSecurityException;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.rules.TemporaryFolder;\n+\n+/** Tests for {@link UpdateChecker} */\n+public class UpdateCheckerTest {\n+\n+  @Rule public final RestoreSystemProperties systemPropertyRestorer = new RestoreSystemProperties();\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  private TestWebServer testWebServer;\n+  private Path configDir;\n+\n+  @Before\n+  public void setUp()\n+      throws InterruptedException, GeneralSecurityException, URISyntaxException, IOException {\n+    testWebServer =\n+        new TestWebServer(\n+            false, Collections.singletonList(\"HTTP/1.1 200 OK\\nContent-Length:5\\n\\n2.0.0\"), 1);\n+    configDir = temporaryFolder.newFolder().toPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDIyMDQ3OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDo0NjozOFrOFcC6Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDo0NjozOFrOFcC6Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk1MjEwNw==", "bodyText": "I think it's nice to write an actual JSON, like Files.write(..., \"{\\\"disableUpdateCheck\\\":true}\".getBytes(...)).", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r364952107", "createdAt": "2020-01-09T20:46:38Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.http.TestWebServer;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.FileTime;\n+import java.security.GeneralSecurityException;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.rules.TemporaryFolder;\n+\n+/** Tests for {@link UpdateChecker} */\n+public class UpdateCheckerTest {\n+\n+  @Rule public final RestoreSystemProperties systemPropertyRestorer = new RestoreSystemProperties();\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  private TestWebServer testWebServer;\n+  private Path configDir;\n+\n+  @Before\n+  public void setUp()\n+      throws InterruptedException, GeneralSecurityException, URISyntaxException, IOException {\n+    testWebServer =\n+        new TestWebServer(\n+            false, Collections.singletonList(\"HTTP/1.1 200 OK\\nContent-Length:5\\n\\n2.0.0\"), 1);\n+    configDir = temporaryFolder.newFolder().toPath();\n+  }\n+\n+  @After\n+  public void tearDown() throws IOException {\n+    testWebServer.close();\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_newVersionFound() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_onLatest() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"2.0.0\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_noConfigOrLastUpdateCheck() throws IOException {\n+    Instant before = Instant.now();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_lastUpdateCheckTooSoon() throws IOException {\n+    FileTime modifiedTime = FileTime.from(Instant.now().minusSeconds(12));\n+    setupConfigAndLastUpdateCheck();\n+    Files.write(\n+        configDir.resolve(\"lastUpdateCheck\"),\n+        modifiedTime.toString().getBytes(StandardCharsets.UTF_8));\n+    Files.setLastModifiedTime(configDir.resolve(\"lastUpdateCheck\"), modifiedTime);\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+\n+    // lastUpdateCheck should not have changed\n+    String lastUpdateTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertEquals(Instant.parse(lastUpdateTime), modifiedTime.toInstant());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_skip() {\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(true, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_systemProperty() {\n+    System.setProperty(PropertyNames.DISABLE_UPDATE_CHECKS, \"true\");\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(true, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_configDisabled() throws IOException {\n+    UpdateChecker.ConfigJsonTemplate config = new UpdateChecker.ConfigJsonTemplate();\n+    config.setDisableUpdateCheck(true);\n+    JsonTemplateMapper.writeTo(config, Files.newOutputStream(configDir.resolve(\"config.json\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDIyNzkwOnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDo0OTo1OFrOFcC--g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDo0OTo1OFrOFcC--g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk1MzMzOA==", "bodyText": "Does MoreExecutors.newDirectExecutorService() work? You may be able to remove Thread.sleep(). Otherwise, I think this test can be flaky.\nOr better yet, I think Futures.immediateFuture(Optional.of(\"Hello\")).", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r364953338", "createdAt": "2020-01-09T20:49:58Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.http.TestWebServer;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.FileTime;\n+import java.security.GeneralSecurityException;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.rules.TemporaryFolder;\n+\n+/** Tests for {@link UpdateChecker} */\n+public class UpdateCheckerTest {\n+\n+  @Rule public final RestoreSystemProperties systemPropertyRestorer = new RestoreSystemProperties();\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  private TestWebServer testWebServer;\n+  private Path configDir;\n+\n+  @Before\n+  public void setUp()\n+      throws InterruptedException, GeneralSecurityException, URISyntaxException, IOException {\n+    testWebServer =\n+        new TestWebServer(\n+            false, Collections.singletonList(\"HTTP/1.1 200 OK\\nContent-Length:5\\n\\n2.0.0\"), 1);\n+    configDir = temporaryFolder.newFolder().toPath();\n+  }\n+\n+  @After\n+  public void tearDown() throws IOException {\n+    testWebServer.close();\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_newVersionFound() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_onLatest() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"2.0.0\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_noConfigOrLastUpdateCheck() throws IOException {\n+    Instant before = Instant.now();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_lastUpdateCheckTooSoon() throws IOException {\n+    FileTime modifiedTime = FileTime.from(Instant.now().minusSeconds(12));\n+    setupConfigAndLastUpdateCheck();\n+    Files.write(\n+        configDir.resolve(\"lastUpdateCheck\"),\n+        modifiedTime.toString().getBytes(StandardCharsets.UTF_8));\n+    Files.setLastModifiedTime(configDir.resolve(\"lastUpdateCheck\"), modifiedTime);\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+\n+    // lastUpdateCheck should not have changed\n+    String lastUpdateTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertEquals(Instant.parse(lastUpdateTime), modifiedTime.toInstant());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_skip() {\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(true, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_systemProperty() {\n+    System.setProperty(PropertyNames.DISABLE_UPDATE_CHECKS, \"true\");\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(true, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_configDisabled() throws IOException {\n+    UpdateChecker.ConfigJsonTemplate config = new UpdateChecker.ConfigJsonTemplate();\n+    config.setDisableUpdateCheck(true);\n+    JsonTemplateMapper.writeTo(config, Files.newOutputStream(configDir.resolve(\"config.json\")));\n+\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(true, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_failSilently()\n+      throws InterruptedException, GeneralSecurityException, URISyntaxException, IOException {\n+    try (TestWebServer badServer = new TestWebServer(false, Collections.singletonList(\"bad\"), 1)) {\n+      Optional<String> message =\n+          UpdateChecker.performUpdateCheck(true, \"1.0.2\", badServer.getEndpoint(), configDir);\n+      Assert.assertFalse(message.isPresent());\n+    }\n+  }\n+\n+  @Test\n+  public void testFinishUpdateCheck_success() throws InterruptedException {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    UpdateChecker updateChecker =\n+        new UpdateChecker(executorService.submit(() -> Optional.of(\"Hello\")));\n+    Thread.sleep(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDIzNDk3OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDo1MzowMVrOFcDDnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDo1MzowMVrOFcDDnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk1NDUyNQ==", "bodyText": "Future is a simple interface, so I think it's better to implement one whose isDone() always returns false.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r364954525", "createdAt": "2020-01-09T20:53:01Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.http.TestWebServer;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.FileTime;\n+import java.security.GeneralSecurityException;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.rules.TemporaryFolder;\n+\n+/** Tests for {@link UpdateChecker} */\n+public class UpdateCheckerTest {\n+\n+  @Rule public final RestoreSystemProperties systemPropertyRestorer = new RestoreSystemProperties();\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  private TestWebServer testWebServer;\n+  private Path configDir;\n+\n+  @Before\n+  public void setUp()\n+      throws InterruptedException, GeneralSecurityException, URISyntaxException, IOException {\n+    testWebServer =\n+        new TestWebServer(\n+            false, Collections.singletonList(\"HTTP/1.1 200 OK\\nContent-Length:5\\n\\n2.0.0\"), 1);\n+    configDir = temporaryFolder.newFolder().toPath();\n+  }\n+\n+  @After\n+  public void tearDown() throws IOException {\n+    testWebServer.close();\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_newVersionFound() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_onLatest() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"2.0.0\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_noConfigOrLastUpdateCheck() throws IOException {\n+    Instant before = Instant.now();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_lastUpdateCheckTooSoon() throws IOException {\n+    FileTime modifiedTime = FileTime.from(Instant.now().minusSeconds(12));\n+    setupConfigAndLastUpdateCheck();\n+    Files.write(\n+        configDir.resolve(\"lastUpdateCheck\"),\n+        modifiedTime.toString().getBytes(StandardCharsets.UTF_8));\n+    Files.setLastModifiedTime(configDir.resolve(\"lastUpdateCheck\"), modifiedTime);\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+\n+    // lastUpdateCheck should not have changed\n+    String lastUpdateTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertEquals(Instant.parse(lastUpdateTime), modifiedTime.toInstant());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_skip() {\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(true, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_systemProperty() {\n+    System.setProperty(PropertyNames.DISABLE_UPDATE_CHECKS, \"true\");\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(true, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_configDisabled() throws IOException {\n+    UpdateChecker.ConfigJsonTemplate config = new UpdateChecker.ConfigJsonTemplate();\n+    config.setDisableUpdateCheck(true);\n+    JsonTemplateMapper.writeTo(config, Files.newOutputStream(configDir.resolve(\"config.json\")));\n+\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(true, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_failSilently()\n+      throws InterruptedException, GeneralSecurityException, URISyntaxException, IOException {\n+    try (TestWebServer badServer = new TestWebServer(false, Collections.singletonList(\"bad\"), 1)) {\n+      Optional<String> message =\n+          UpdateChecker.performUpdateCheck(true, \"1.0.2\", badServer.getEndpoint(), configDir);\n+      Assert.assertFalse(message.isPresent());\n+    }\n+  }\n+\n+  @Test\n+  public void testFinishUpdateCheck_success() throws InterruptedException {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    UpdateChecker updateChecker =\n+        new UpdateChecker(executorService.submit(() -> Optional.of(\"Hello\")));\n+    Thread.sleep(100);\n+    Optional<String> result = updateChecker.finishUpdateCheck();\n+    Assert.assertTrue(result.isPresent());\n+    Assert.assertEquals(\"Hello\", result.get());\n+  }\n+\n+  @Test\n+  public void testFinishUpdateCheck_notDone() {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    UpdateChecker updateChecker =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDIzNzQ3OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDo1NDowNlrOFcDFJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzoyNDo0OFrOFc-gAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk1NDkxOA==", "bodyText": "Q: this just writes {}?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r364954918", "createdAt": "2020-01-09T20:54:06Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.http.TestWebServer;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.FileTime;\n+import java.security.GeneralSecurityException;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.rules.TemporaryFolder;\n+\n+/** Tests for {@link UpdateChecker} */\n+public class UpdateCheckerTest {\n+\n+  @Rule public final RestoreSystemProperties systemPropertyRestorer = new RestoreSystemProperties();\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  private TestWebServer testWebServer;\n+  private Path configDir;\n+\n+  @Before\n+  public void setUp()\n+      throws InterruptedException, GeneralSecurityException, URISyntaxException, IOException {\n+    testWebServer =\n+        new TestWebServer(\n+            false, Collections.singletonList(\"HTTP/1.1 200 OK\\nContent-Length:5\\n\\n2.0.0\"), 1);\n+    configDir = temporaryFolder.newFolder().toPath();\n+  }\n+\n+  @After\n+  public void tearDown() throws IOException {\n+    testWebServer.close();\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_newVersionFound() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_onLatest() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"2.0.0\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_noConfigOrLastUpdateCheck() throws IOException {\n+    Instant before = Instant.now();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_lastUpdateCheckTooSoon() throws IOException {\n+    FileTime modifiedTime = FileTime.from(Instant.now().minusSeconds(12));\n+    setupConfigAndLastUpdateCheck();\n+    Files.write(\n+        configDir.resolve(\"lastUpdateCheck\"),\n+        modifiedTime.toString().getBytes(StandardCharsets.UTF_8));\n+    Files.setLastModifiedTime(configDir.resolve(\"lastUpdateCheck\"), modifiedTime);\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+\n+    // lastUpdateCheck should not have changed\n+    String lastUpdateTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertEquals(Instant.parse(lastUpdateTime), modifiedTime.toInstant());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_skip() {\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(true, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_systemProperty() {\n+    System.setProperty(PropertyNames.DISABLE_UPDATE_CHECKS, \"true\");\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(true, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_configDisabled() throws IOException {\n+    UpdateChecker.ConfigJsonTemplate config = new UpdateChecker.ConfigJsonTemplate();\n+    config.setDisableUpdateCheck(true);\n+    JsonTemplateMapper.writeTo(config, Files.newOutputStream(configDir.resolve(\"config.json\")));\n+\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(true, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_failSilently()\n+      throws InterruptedException, GeneralSecurityException, URISyntaxException, IOException {\n+    try (TestWebServer badServer = new TestWebServer(false, Collections.singletonList(\"bad\"), 1)) {\n+      Optional<String> message =\n+          UpdateChecker.performUpdateCheck(true, \"1.0.2\", badServer.getEndpoint(), configDir);\n+      Assert.assertFalse(message.isPresent());\n+    }\n+  }\n+\n+  @Test\n+  public void testFinishUpdateCheck_success() throws InterruptedException {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    UpdateChecker updateChecker =\n+        new UpdateChecker(executorService.submit(() -> Optional.of(\"Hello\")));\n+    Thread.sleep(100);\n+    Optional<String> result = updateChecker.finishUpdateCheck();\n+    Assert.assertTrue(result.isPresent());\n+    Assert.assertEquals(\"Hello\", result.get());\n+  }\n+\n+  @Test\n+  public void testFinishUpdateCheck_notDone() {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    UpdateChecker updateChecker =\n+        new UpdateChecker(\n+            executorService.submit(\n+                () -> {\n+                  try {\n+                    Thread.sleep(100);\n+                  } catch (InterruptedException ignored) {\n+                  }\n+                  return Optional.of(\"Hello\");\n+                }));\n+    Optional<String> result = updateChecker.finishUpdateCheck();\n+    Assert.assertFalse(result.isPresent());\n+  }\n+\n+  private void setupConfigAndLastUpdateCheck() throws IOException {\n+    UpdateChecker.ConfigJsonTemplate config = new UpdateChecker.ConfigJsonTemplate();\n+    JsonTemplateMapper.writeTo(config, Files.newOutputStream(configDir.resolve(\"config.json\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkyODQ1MQ==", "bodyText": "Nope, writes {\"disableUpdateCheck\":false}.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r365928451", "createdAt": "2020-01-13T17:24:48Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.http.TestWebServer;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.FileTime;\n+import java.security.GeneralSecurityException;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.rules.TemporaryFolder;\n+\n+/** Tests for {@link UpdateChecker} */\n+public class UpdateCheckerTest {\n+\n+  @Rule public final RestoreSystemProperties systemPropertyRestorer = new RestoreSystemProperties();\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  private TestWebServer testWebServer;\n+  private Path configDir;\n+\n+  @Before\n+  public void setUp()\n+      throws InterruptedException, GeneralSecurityException, URISyntaxException, IOException {\n+    testWebServer =\n+        new TestWebServer(\n+            false, Collections.singletonList(\"HTTP/1.1 200 OK\\nContent-Length:5\\n\\n2.0.0\"), 1);\n+    configDir = temporaryFolder.newFolder().toPath();\n+  }\n+\n+  @After\n+  public void tearDown() throws IOException {\n+    testWebServer.close();\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_newVersionFound() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_onLatest() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"2.0.0\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_noConfigOrLastUpdateCheck() throws IOException {\n+    Instant before = Instant.now();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_lastUpdateCheckTooSoon() throws IOException {\n+    FileTime modifiedTime = FileTime.from(Instant.now().minusSeconds(12));\n+    setupConfigAndLastUpdateCheck();\n+    Files.write(\n+        configDir.resolve(\"lastUpdateCheck\"),\n+        modifiedTime.toString().getBytes(StandardCharsets.UTF_8));\n+    Files.setLastModifiedTime(configDir.resolve(\"lastUpdateCheck\"), modifiedTime);\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+\n+    // lastUpdateCheck should not have changed\n+    String lastUpdateTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertEquals(Instant.parse(lastUpdateTime), modifiedTime.toInstant());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_skip() {\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(true, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_systemProperty() {\n+    System.setProperty(PropertyNames.DISABLE_UPDATE_CHECKS, \"true\");\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(true, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_configDisabled() throws IOException {\n+    UpdateChecker.ConfigJsonTemplate config = new UpdateChecker.ConfigJsonTemplate();\n+    config.setDisableUpdateCheck(true);\n+    JsonTemplateMapper.writeTo(config, Files.newOutputStream(configDir.resolve(\"config.json\")));\n+\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(true, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_failSilently()\n+      throws InterruptedException, GeneralSecurityException, URISyntaxException, IOException {\n+    try (TestWebServer badServer = new TestWebServer(false, Collections.singletonList(\"bad\"), 1)) {\n+      Optional<String> message =\n+          UpdateChecker.performUpdateCheck(true, \"1.0.2\", badServer.getEndpoint(), configDir);\n+      Assert.assertFalse(message.isPresent());\n+    }\n+  }\n+\n+  @Test\n+  public void testFinishUpdateCheck_success() throws InterruptedException {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    UpdateChecker updateChecker =\n+        new UpdateChecker(executorService.submit(() -> Optional.of(\"Hello\")));\n+    Thread.sleep(100);\n+    Optional<String> result = updateChecker.finishUpdateCheck();\n+    Assert.assertTrue(result.isPresent());\n+    Assert.assertEquals(\"Hello\", result.get());\n+  }\n+\n+  @Test\n+  public void testFinishUpdateCheck_notDone() {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    UpdateChecker updateChecker =\n+        new UpdateChecker(\n+            executorService.submit(\n+                () -> {\n+                  try {\n+                    Thread.sleep(100);\n+                  } catch (InterruptedException ignored) {\n+                  }\n+                  return Optional.of(\"Hello\");\n+                }));\n+    Optional<String> result = updateChecker.finishUpdateCheck();\n+    Assert.assertFalse(result.isPresent());\n+  }\n+\n+  private void setupConfigAndLastUpdateCheck() throws IOException {\n+    UpdateChecker.ConfigJsonTemplate config = new UpdateChecker.ConfigJsonTemplate();\n+    JsonTemplateMapper.writeTo(config, Files.newOutputStream(configDir.resolve(\"config.json\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk1NDkxOA=="}, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDI5ODA5OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMToxOTozNFrOFcDrPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMToxOTozNFrOFcDrPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk2NDY3MQ==", "bodyText": "It feels weird to put \"skip\" in here?\nCould the maven/gradle calls to checkForUpdate be implemented in a way like\nUpdater.for(ProjectProperties).checkForUpdates()\n\nwhere \"for\" decides whether to skip or not? Or something of that sort.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r364964671", "createdAt": "2020-01-09T21:19:34Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param skip if {@code true}, the update check itself will be skipped\n+   * @param version the current version of Jib being used\n+   * @param versionUrl the location to check for the latest version\n+   * @param executorService the {@link ExecutorService}\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(\n+      boolean skip, String version, String versionUrl, ExecutorService executorService) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDMwMjIzOnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMToyMToxN1rOFcDt0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDoyMzozNFrOFdDdYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk2NTMyOA==", "bodyText": "do you have do some work here to shutdown the executor?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r364965328", "createdAt": "2020-01-09T21:21:17Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param skip if {@code true}, the update check itself will be skipped\n+   * @param version the current version of Jib being used\n+   * @param versionUrl the location to check for the latest version\n+   * @param executorService the {@link ExecutorService}\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(\n+      boolean skip, String version, String versionUrl, ExecutorService executorService) {\n+    return new UpdateChecker(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwMzI5Nw==", "bodyText": "I should probably provide more context:\nExecutorService x = Executors.newSingleThreadExecutor();\nx.submit(() -> System.out.println(\"goose\"));\n// x.shutdown();\n\nIn this example, without x.shutdown, running this will pause until the thread is cleaned up (or something like that)\nMore context here: https://stackoverflow.com/questions/20057497/program-does-not-terminate-immediately-when-all-executorservice-tasks-are-done", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366003297", "createdAt": "2020-01-13T20:07:36Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param skip if {@code true}, the update check itself will be skipped\n+   * @param version the current version of Jib being used\n+   * @param versionUrl the location to check for the latest version\n+   * @param executorService the {@link ExecutorService}\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(\n+      boolean skip, String version, String versionUrl, ExecutorService executorService) {\n+    return new UpdateChecker(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk2NTMyOA=="}, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwNjMwNQ==", "bodyText": "Yeah, I think we can save the executor service and call shutdown() in finishUpdateCheck().", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366006305", "createdAt": "2020-01-13T20:15:08Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param skip if {@code true}, the update check itself will be skipped\n+   * @param version the current version of Jib being used\n+   * @param versionUrl the location to check for the latest version\n+   * @param executorService the {@link ExecutorService}\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(\n+      boolean skip, String version, String versionUrl, ExecutorService executorService) {\n+    return new UpdateChecker(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk2NTMyOA=="}, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwODM0NA==", "bodyText": "Oh, looks like we can shut it down immediately after submitting.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366008344", "createdAt": "2020-01-13T20:20:05Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param skip if {@code true}, the update check itself will be skipped\n+   * @param version the current version of Jib being used\n+   * @param versionUrl the location to check for the latest version\n+   * @param executorService the {@link ExecutorService}\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(\n+      boolean skip, String version, String versionUrl, ExecutorService executorService) {\n+    return new UpdateChecker(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk2NTMyOA=="}, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwOTA5Nw==", "bodyText": "Should the executor service be isolated to the update checker? I may have missed why we are passing it in?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366009097", "createdAt": "2020-01-13T20:21:59Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param skip if {@code true}, the update check itself will be skipped\n+   * @param version the current version of Jib being used\n+   * @param versionUrl the location to check for the latest version\n+   * @param executorService the {@link ExecutorService}\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(\n+      boolean skip, String version, String versionUrl, ExecutorService executorService) {\n+    return new UpdateChecker(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk2NTMyOA=="}, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwOTY5Ng==", "bodyText": "Yeah you can use shutdown if you know you're not submitting any more jobs.\nBut if the executor is coming from outside, then there's no way to ensure that it is exclusively being used for this purpose?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366009696", "createdAt": "2020-01-13T20:23:34Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param skip if {@code true}, the update check itself will be skipped\n+   * @param version the current version of Jib being used\n+   * @param versionUrl the location to check for the latest version\n+   * @param executorService the {@link ExecutorService}\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(\n+      boolean skip, String version, String versionUrl, ExecutorService executorService) {\n+    return new UpdateChecker(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk2NTMyOA=="}, "originalCommit": {"oid": "3057a5686af6e9063ff02e80edefe9143e198dc1"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTM4Nzg2OnYy", "diffSide": "RIGHT", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTozMDo1NlrOFdFPOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTozMDo1NlrOFdFPOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAzODg0Mg==", "bodyText": "I think s is too short. s --> updateMessage", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366038842", "createdAt": "2020-01-13T21:30:56Z", "author": {"login": "chanseokoh"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java", "diffHunk": "@@ -145,6 +151,10 @@ public void buildDocker()\n \n     } finally {\n       tempDirectoryProvider.close();\n+      updateChecker\n+          .finishUpdateCheck()\n+          .ifPresent(\n+              s -> projectProperties.log(LogEvent.lifecycle(\"\\n\\u001B[33m\" + s + \"\\u001B[0m\\n\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fe3f5911e2c013d56529fa2e4d23f3c33f0e2f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTM4ODIzOnYy", "diffSide": "RIGHT", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildImageTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTozMTowM1rOFdFPbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTozMTowM1rOFdFPbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAzODg5NA==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366038894", "createdAt": "2020-01-13T21:31:03Z", "author": {"login": "chanseokoh"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildImageTask.java", "diffHunk": "@@ -143,6 +149,10 @@ public void buildImage()\n \n     } finally {\n       tempDirectoryProvider.close();\n+      updateChecker\n+          .finishUpdateCheck()\n+          .ifPresent(\n+              s -> projectProperties.log(LogEvent.lifecycle(\"\\n\\u001B[33m\" + s + \"\\u001B[0m\\n\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fe3f5911e2c013d56529fa2e4d23f3c33f0e2f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTM5MTQ0OnYy", "diffSide": "RIGHT", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildTarTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTozMjoyMFrOFdFRrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTozMjoyMFrOFdFRrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAzOTQ2OA==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366039468", "createdAt": "2020-01-13T21:32:20Z", "author": {"login": "chanseokoh"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildTarTask.java", "diffHunk": "@@ -159,6 +165,10 @@ public void buildTar()\n \n     } finally {\n       tempDirectoryProvider.close();\n+      updateChecker\n+          .finishUpdateCheck()\n+          .ifPresent(\n+              s -> projectProperties.log(LogEvent.lifecycle(\"\\n\\u001B[33m\" + s + \"\\u001B[0m\\n\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fe3f5911e2c013d56529fa2e4d23f3c33f0e2f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTM5MTYyOnYy", "diffSide": "RIGHT", "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTozMjoyNVrOFdFRzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTozMjoyNVrOFdFRzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAzOTUwMQ==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366039501", "createdAt": "2020-01-13T21:32:25Z", "author": {"login": "chanseokoh"}, "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java", "diffHunk": "@@ -134,6 +139,10 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n \n     } finally {\n       tempDirectoryProvider.close();\n+      updateChecker\n+          .finishUpdateCheck()\n+          .ifPresent(\n+              s -> projectProperties.log(LogEvent.lifecycle(\"\\n\\u001B[33m\" + s + \"\\u001B[0m\\n\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fe3f5911e2c013d56529fa2e4d23f3c33f0e2f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTM5MTgwOnYy", "diffSide": "RIGHT", "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildImageMojo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTozMjoyOVrOFdFR6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTozMjoyOVrOFdFR6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAzOTUzMQ==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366039531", "createdAt": "2020-01-13T21:32:29Z", "author": {"login": "chanseokoh"}, "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildImageMojo.java", "diffHunk": "@@ -148,6 +153,10 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n \n     } finally {\n       tempDirectoryProvider.close();\n+      updateChecker\n+          .finishUpdateCheck()\n+          .ifPresent(\n+              s -> projectProperties.log(LogEvent.lifecycle(\"\\n\\u001B[33m\" + s + \"\\u001B[0m\\n\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fe3f5911e2c013d56529fa2e4d23f3c33f0e2f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTM5MTk1OnYy", "diffSide": "RIGHT", "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildTarMojo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTozMjozM1rOFdFSBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTozMjozM1rOFdFSBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAzOTU1Nw==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366039557", "createdAt": "2020-01-13T21:32:33Z", "author": {"login": "chanseokoh"}, "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildTarMojo.java", "diffHunk": "@@ -126,6 +131,10 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n \n     } finally {\n       tempDirectoryProvider.close();\n+      updateChecker\n+          .finishUpdateCheck()\n+          .ifPresent(\n+              s -> projectProperties.log(LogEvent.lifecycle(\"\\n\\u001B[33m\" + s + \"\\u001B[0m\\n\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fe3f5911e2c013d56529fa2e4d23f3c33f0e2f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTQxNTE4OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTo0MTowNlrOFdFgdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTo0MTowNlrOFdFgdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA0MzI1Mg==", "bodyText": "I can't explain which one is more suitable, but I use Verify.verifyNotNull() in this situation.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366043252", "createdAt": "2020-01-13T21:41:06Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param skip if {@code true}, the update check itself will be skipped\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(boolean skip, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    skip,\n+                    Preconditions.checkNotNull(ProjectInfo.VERSION),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fe3f5911e2c013d56529fa2e4d23f3c33f0e2f"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTQyMDQwOnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTo0MzowM1rOFdFjtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTo0MzowM1rOFdFjtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA0NDA4NA==", "bodyText": "I think it's meaningful to close newOutputStream() in this case.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366044084", "createdAt": "2020-01-13T21:43:03Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param skip if {@code true}, the update check itself will be skipped\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(boolean skip, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    skip,\n+                    Preconditions.checkNotNull(ProjectInfo.VERSION),\n+                    versionUrl,\n+                    getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      boolean skip, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (skip || Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    try {\n+      Path configFile = configDir.resolve(\"config.json\");\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        JsonTemplateMapper.writeTo(config, Files.newOutputStream(configFile));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fe3f5911e2c013d56529fa2e4d23f3c33f0e2f"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTQzMDEzOnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTo0NjozMFrOFdFpoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTo0NjozMFrOFdFpoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA0NTYwMA==", "bodyText": "I think it's worth putting it in a finally { } block to disconnect early even in an error case.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366045600", "createdAt": "2020-01-13T21:46:30Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param skip if {@code true}, the update check itself will be skipped\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(boolean skip, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    skip,\n+                    Preconditions.checkNotNull(ProjectInfo.VERSION),\n+                    versionUrl,\n+                    getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      boolean skip, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (skip || Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    try {\n+      Path configFile = configDir.resolve(\"config.json\");\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        JsonTemplateMapper.writeTo(config, Files.newOutputStream(configFile));\n+      }\n+\n+      // Check time of last update check\n+      Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      connection.setConnectTimeout(3000);\n+      BufferedReader bufferedReader =\n+          new BufferedReader(\n+              new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+      String latestVersion = bufferedReader.readLine().trim();\n+      connection.disconnect();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fe3f5911e2c013d56529fa2e4d23f3c33f0e2f"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTQzNTU2OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTo0ODozOFrOFdFtKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTo0ODozOFrOFdFtKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA0NjUwNQ==", "bodyText": "nit: Files.deleteIfExists(configFile) and Files.deleteIfExists(lastUpdateCheck) after putting these various outside the try block. As this method is very long, I think it helps avoid the mistake of using different path.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366046505", "createdAt": "2020-01-13T21:48:38Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param skip if {@code true}, the update check itself will be skipped\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(boolean skip, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    skip,\n+                    Preconditions.checkNotNull(ProjectInfo.VERSION),\n+                    versionUrl,\n+                    getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      boolean skip, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (skip || Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    try {\n+      Path configFile = configDir.resolve(\"config.json\");\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        JsonTemplateMapper.writeTo(config, Files.newOutputStream(configFile));\n+      }\n+\n+      // Check time of last update check\n+      Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      connection.setConnectTimeout(3000);\n+      BufferedReader bufferedReader =\n+          new BufferedReader(\n+              new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+      String latestVersion = bufferedReader.readLine().trim();\n+      connection.disconnect();\n+\n+      Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+      if (currentVersion.equals(latestVersion)) {\n+        return Optional.empty();\n+      }\n+      return Optional.of(\n+          \"A new version of Jib (\"\n+              + latestVersion\n+              + \") is available (currently using \"\n+              + currentVersion\n+              + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+    } catch (IOException ex) {\n+      try {\n+        Files.deleteIfExists(configDir.resolve(\"config.json\"));\n+        Files.deleteIfExists(configDir.resolve(\"lastUpdateCheck\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fe3f5911e2c013d56529fa2e4d23f3c33f0e2f"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTQ1MTE5OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTo1NDoxNlrOFdF2vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTo1OTo1N1rOFdGAZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA0ODk1OQ==", "bodyText": "Is this necessary? If not, remove it, because it's confusing?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366048959", "createdAt": "2020-01-13T21:54:16Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.http.TestWebServer;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.FileTime;\n+import java.security.GeneralSecurityException;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/** Tests for {@link UpdateChecker} */\n+@RunWith(MockitoJUnitRunner.class)\n+public class UpdateCheckerTest {\n+\n+  @Rule public final RestoreSystemProperties systemPropertyRestorer = new RestoreSystemProperties();\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  private TestWebServer testWebServer;\n+  private Path configDir;\n+\n+  @Before\n+  public void setUp()\n+      throws InterruptedException, GeneralSecurityException, URISyntaxException, IOException {\n+    testWebServer =\n+        new TestWebServer(\n+            false, Collections.singletonList(\"HTTP/1.1 200 OK\\nContent-Length:5\\n\\n2.0.0\"), 1);\n+    configDir = temporaryFolder.getRoot().toPath();\n+  }\n+\n+  @After\n+  public void tearDown() throws IOException {\n+    testWebServer.close();\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_newVersionFound() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_onLatest() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"2.0.0\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_noConfigOrLastUpdateCheck() throws IOException {\n+    Instant before = Instant.now();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_lastUpdateCheckTooSoon() throws IOException {\n+    FileTime modifiedTime = FileTime.from(Instant.now().minusSeconds(12));\n+    setupConfigAndLastUpdateCheck();\n+    Files.write(\n+        configDir.resolve(\"lastUpdateCheck\"),\n+        modifiedTime.toString().getBytes(StandardCharsets.UTF_8));\n+    Files.setLastModifiedTime(configDir.resolve(\"lastUpdateCheck\"), modifiedTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fe3f5911e2c013d56529fa2e4d23f3c33f0e2f"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA1MTQzMA==", "bodyText": "Oops, old stuff I didn't clean up.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366051430", "createdAt": "2020-01-13T21:59:57Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.http.TestWebServer;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.FileTime;\n+import java.security.GeneralSecurityException;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/** Tests for {@link UpdateChecker} */\n+@RunWith(MockitoJUnitRunner.class)\n+public class UpdateCheckerTest {\n+\n+  @Rule public final RestoreSystemProperties systemPropertyRestorer = new RestoreSystemProperties();\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  private TestWebServer testWebServer;\n+  private Path configDir;\n+\n+  @Before\n+  public void setUp()\n+      throws InterruptedException, GeneralSecurityException, URISyntaxException, IOException {\n+    testWebServer =\n+        new TestWebServer(\n+            false, Collections.singletonList(\"HTTP/1.1 200 OK\\nContent-Length:5\\n\\n2.0.0\"), 1);\n+    configDir = temporaryFolder.getRoot().toPath();\n+  }\n+\n+  @After\n+  public void tearDown() throws IOException {\n+    testWebServer.close();\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_newVersionFound() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_onLatest() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"2.0.0\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_noConfigOrLastUpdateCheck() throws IOException {\n+    Instant before = Instant.now();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(false, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_lastUpdateCheckTooSoon() throws IOException {\n+    FileTime modifiedTime = FileTime.from(Instant.now().minusSeconds(12));\n+    setupConfigAndLastUpdateCheck();\n+    Files.write(\n+        configDir.resolve(\"lastUpdateCheck\"),\n+        modifiedTime.toString().getBytes(StandardCharsets.UTF_8));\n+    Files.setLastModifiedTime(configDir.resolve(\"lastUpdateCheck\"), modifiedTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA0ODk1OQ=="}, "originalCommit": {"oid": "14fe3f5911e2c013d56529fa2e4d23f3c33f0e2f"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTY1NjA0OnYy", "diffSide": "RIGHT", "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzoxOTo0NlrOFdHzFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNToyNzozOVrOFdbe8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4MDc5MQ==", "bodyText": "I still kinda think this would be cleaner if we skip wasn't part of the update checker mechanic and we only created an update checker as needed.\nOptional<UpdateChecker> updaterChecker = MavenUpdateChecker.for(projectProperties, getLog())\n\n...\n...\nupdateChecker.ifPresent().finish....", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366080791", "createdAt": "2020-01-13T23:19:46Z", "author": {"login": "loosebazooka"}, "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java", "diffHunk": "@@ -73,6 +75,9 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n     MavenProjectProperties projectProperties =\n         MavenProjectProperties.getForProject(\n             getProject(), getSession(), getLog(), tempDirectoryProvider);\n+    UpdateChecker updateChecker =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b0f1d76324201c34944f9ab5417a40a7c8ee45"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4MTE1MQ==", "bodyText": "the  MojoCommon.VERSION_URL could be part of MavenUpdateChecker too", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366081151", "createdAt": "2020-01-13T23:20:56Z", "author": {"login": "loosebazooka"}, "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java", "diffHunk": "@@ -73,6 +75,9 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n     MavenProjectProperties projectProperties =\n         MavenProjectProperties.getForProject(\n             getProject(), getSession(), getLog(), tempDirectoryProvider);\n+    UpdateChecker updateChecker =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4MDc5MQ=="}, "originalCommit": {"oid": "55b0f1d76324201c34944f9ab5417a40a7c8ee45"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4MTMyMQ==", "bodyText": "or something like this (not necessarily this exactly)", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366081321", "createdAt": "2020-01-13T23:21:28Z", "author": {"login": "loosebazooka"}, "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java", "diffHunk": "@@ -73,6 +75,9 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n     MavenProjectProperties projectProperties =\n         MavenProjectProperties.getForProject(\n             getProject(), getSession(), getLog(), tempDirectoryProvider);\n+    UpdateChecker updateChecker =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4MDc5MQ=="}, "originalCommit": {"oid": "55b0f1d76324201c34944f9ab5417a40a7c8ee45"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQwMzMxNA==", "bodyText": "I'd rather not make a new class, but I agree the Optional approach could be better, so I'll try something like that.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366403314", "createdAt": "2020-01-14T15:27:39Z", "author": {"login": "TadCordle"}, "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java", "diffHunk": "@@ -73,6 +75,9 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n     MavenProjectProperties projectProperties =\n         MavenProjectProperties.getForProject(\n             getProject(), getSession(), getLog(), tempDirectoryProvider);\n+    UpdateChecker updateChecker =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4MDc5MQ=="}, "originalCommit": {"oid": "55b0f1d76324201c34944f9ab5417a40a7c8ee45"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTA0NjYyOnYy", "diffSide": "RIGHT", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjo0MTo0NlrOFdoMJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjo0MTo0NlrOFdoMJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMTQ5Mg==", "bodyText": "oh this is cool, didn't know you could do that with optionals.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366611492", "createdAt": "2020-01-14T22:41:46Z", "author": {"login": "loosebazooka"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java", "diffHunk": "@@ -145,6 +150,12 @@ public void buildDocker()\n \n     } finally {\n       tempDirectoryProvider.close();\n+      updateChecker\n+          .flatMap(UpdateChecker::finishUpdateCheck)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "789defa56482019432632f6bc98aa4baaffbbf0b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTA1ODk3OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjo0NzoxOVrOFdoT2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTozNDo0NVrOFeD-9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMzQ2Ng==", "bodyText": "I'm not sure I understand what's going on here? why do we delete these files?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366613466", "createdAt": "2020-01-14T22:47:19Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+    try {\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      try {\n+        Files.deleteIfExists(configFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "789defa56482019432632f6bc98aa4baaffbbf0b"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk1NjEyNg==", "bodyText": "Was suggested by @chanseokoh to avoid corruption in case the thread is interrupted while writing to a file.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366956126", "createdAt": "2020-01-15T15:55:41Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+    try {\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      try {\n+        Files.deleteIfExists(configFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMzQ2Ng=="}, "originalCommit": {"oid": "789defa56482019432632f6bc98aa4baaffbbf0b"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk2MDQyMg==", "bodyText": "About corruption: theoretically the files are shared resources among multiple concurrent Jib runs, although the likelihood is very low that the files are concurrently modified. That's why I am OK with not doing any synchronization for a shared object here.\nI'm not saying that this would be the only source of possible corruption. But if the files were ever corrupted somehow, Jib would not be able to recover (it will just throw an IOExcetion again and again) without deleting the corrupted files. I just want it to be able to recover.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366960422", "createdAt": "2020-01-15T16:02:25Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+    try {\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      try {\n+        Files.deleteIfExists(configFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMzQ2Ng=="}, "originalCommit": {"oid": "789defa56482019432632f6bc98aa4baaffbbf0b"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk2MTMzOA==", "bodyText": "And yeah, I think thread interrupted might be another source of possible corruption.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366961338", "createdAt": "2020-01-15T16:03:53Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+    try {\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      try {\n+        Files.deleteIfExists(configFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMzQ2Ng=="}, "originalCommit": {"oid": "789defa56482019432632f6bc98aa4baaffbbf0b"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA1OTQzNA==", "bodyText": "deleting the config file could potentially result in the user's non-update-check config to be deleted no?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367059434", "createdAt": "2020-01-15T19:18:56Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+    try {\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      try {\n+        Files.deleteIfExists(configFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMzQ2Ng=="}, "originalCommit": {"oid": "789defa56482019432632f6bc98aa4baaffbbf0b"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA1OTU4Nw==", "bodyText": "I don't think we should ever delete the user's config file.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367059587", "createdAt": "2020-01-15T19:19:17Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+    try {\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      try {\n+        Files.deleteIfExists(configFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMzQ2Ng=="}, "originalCommit": {"oid": "789defa56482019432632f6bc98aa4baaffbbf0b"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA1OTg3MA==", "bodyText": "We can output a message saying your config is corrupt? And for the user to go clean it up?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367059870", "createdAt": "2020-01-15T19:19:55Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+    try {\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      try {\n+        Files.deleteIfExists(configFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMzQ2Ng=="}, "originalCommit": {"oid": "789defa56482019432632f6bc98aa4baaffbbf0b"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2NDcwNQ==", "bodyText": "Yeah, I wanted a simple solution, but in principle I agree it's better to let the user delete the files.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367064705", "createdAt": "2020-01-15T19:30:14Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+    try {\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      try {\n+        Files.deleteIfExists(configFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMzQ2Ng=="}, "originalCommit": {"oid": "789defa56482019432632f6bc98aa4baaffbbf0b"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2Njg2OA==", "bodyText": "Also, if it is not corruption but a temporary IO error, I think it still makes sense to report the error saying that Jib couldn't read its config file (but not a fatal error).", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367066868", "createdAt": "2020-01-15T19:34:45Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+    try {\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      try {\n+        Files.deleteIfExists(configFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMzQ2Ng=="}, "originalCommit": {"oid": "789defa56482019432632f6bc98aa4baaffbbf0b"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTA2MzY3OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjo0OToyNVrOFdoWtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNjowNzowOVrOFd9ptA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxNDE5OQ==", "bodyText": "I think that this just tries to interrupt the process running the thread if it's still running? Do we need to check in performUpdateCheck that the thread hasn't been interrupted?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366614199", "createdAt": "2020-01-14T22:49:25Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+    try {\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      try {\n+        Files.deleteIfExists(configFile);\n+        Files.deleteIfExists(lastUpdateCheck);\n+      } catch (IOException ignored) {\n+        // Fail silently\n+      }\n+    }\n+\n+    return Optional.empty();\n+  }\n+\n+  /**\n+   * Returns the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   * otherwise returns the default config directory.\n+   *\n+   * @return the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   *     otherwise returns the default config directory.\n+   */\n+  private static Path getConfigDir() {\n+    String configDirProperty = System.getProperty(PropertyNames.CONFIG_DIRECTORY);\n+    if (!Strings.isNullOrEmpty(configDirProperty)) {\n+      return Paths.get(configDirProperty);\n+    }\n+    return XdgDirectories.getConfigHome();\n+  }\n+\n+  private final Future<Optional<String>> updateMessageFuture;\n+\n+  @VisibleForTesting\n+  UpdateChecker(Future<Optional<String>> updateMessageFuture) {\n+    this.updateMessageFuture = updateMessageFuture;\n+  }\n+\n+  /**\n+   * Returns a message indicating Jib should be upgraded if the check succeeded and the current\n+   * version is outdated, or returns {@code Optional.empty()} if the check was interrupted or did\n+   * not determine that a later version was available.\n+   *\n+   * @return the {@link Optional} message to upgrade Jib if a later version was found, else {@code\n+   *     Optional.empty()}.\n+   */\n+  public Optional<String> finishUpdateCheck() {\n+    if (updateMessageFuture.isDone()) {\n+      try {\n+        return updateMessageFuture.get();\n+      } catch (InterruptedException | ExecutionException ignored) {\n+        // Fail silently;\n+      }\n+    }\n+    updateMessageFuture.cancel(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "789defa56482019432632f6bc98aa4baaffbbf0b"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxOTMxNA==", "bodyText": "I regarded this as an optional thing which may have virtually no effect in many cases. @TadCordle tested and observed that the build terminates right away even if \"the thread is still alive.\" (#2214 (comment)). However, I just realized that the test using a single Thread.sleep() to simulate a  long-running thread is flawed, since I believe Thread.sleep() will unblock (by throwing InterruptedException) when a future is cancelled. @TadCordle the code to test this should look like this:\nwhile (true) {\n  try {\n    Thread.sleep(600000);\n  } catch (Exception e) {}\n}", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366619314", "createdAt": "2020-01-14T23:04:10Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+    try {\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      try {\n+        Files.deleteIfExists(configFile);\n+        Files.deleteIfExists(lastUpdateCheck);\n+      } catch (IOException ignored) {\n+        // Fail silently\n+      }\n+    }\n+\n+    return Optional.empty();\n+  }\n+\n+  /**\n+   * Returns the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   * otherwise returns the default config directory.\n+   *\n+   * @return the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   *     otherwise returns the default config directory.\n+   */\n+  private static Path getConfigDir() {\n+    String configDirProperty = System.getProperty(PropertyNames.CONFIG_DIRECTORY);\n+    if (!Strings.isNullOrEmpty(configDirProperty)) {\n+      return Paths.get(configDirProperty);\n+    }\n+    return XdgDirectories.getConfigHome();\n+  }\n+\n+  private final Future<Optional<String>> updateMessageFuture;\n+\n+  @VisibleForTesting\n+  UpdateChecker(Future<Optional<String>> updateMessageFuture) {\n+    this.updateMessageFuture = updateMessageFuture;\n+  }\n+\n+  /**\n+   * Returns a message indicating Jib should be upgraded if the check succeeded and the current\n+   * version is outdated, or returns {@code Optional.empty()} if the check was interrupted or did\n+   * not determine that a later version was available.\n+   *\n+   * @return the {@link Optional} message to upgrade Jib if a later version was found, else {@code\n+   *     Optional.empty()}.\n+   */\n+  public Optional<String> finishUpdateCheck() {\n+    if (updateMessageFuture.isDone()) {\n+      try {\n+        return updateMessageFuture.get();\n+      } catch (InterruptedException | ExecutionException ignored) {\n+        // Fail silently;\n+      }\n+    }\n+    updateMessageFuture.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxNDE5OQ=="}, "originalCommit": {"oid": "789defa56482019432632f6bc98aa4baaffbbf0b"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk1ODcwMQ==", "bodyText": "Still seems to terminate the thread immediately with the new test code.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366958701", "createdAt": "2020-01-15T15:59:47Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+    try {\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      try {\n+        Files.deleteIfExists(configFile);\n+        Files.deleteIfExists(lastUpdateCheck);\n+      } catch (IOException ignored) {\n+        // Fail silently\n+      }\n+    }\n+\n+    return Optional.empty();\n+  }\n+\n+  /**\n+   * Returns the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   * otherwise returns the default config directory.\n+   *\n+   * @return the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   *     otherwise returns the default config directory.\n+   */\n+  private static Path getConfigDir() {\n+    String configDirProperty = System.getProperty(PropertyNames.CONFIG_DIRECTORY);\n+    if (!Strings.isNullOrEmpty(configDirProperty)) {\n+      return Paths.get(configDirProperty);\n+    }\n+    return XdgDirectories.getConfigHome();\n+  }\n+\n+  private final Future<Optional<String>> updateMessageFuture;\n+\n+  @VisibleForTesting\n+  UpdateChecker(Future<Optional<String>> updateMessageFuture) {\n+    this.updateMessageFuture = updateMessageFuture;\n+  }\n+\n+  /**\n+   * Returns a message indicating Jib should be upgraded if the check succeeded and the current\n+   * version is outdated, or returns {@code Optional.empty()} if the check was interrupted or did\n+   * not determine that a later version was available.\n+   *\n+   * @return the {@link Optional} message to upgrade Jib if a later version was found, else {@code\n+   *     Optional.empty()}.\n+   */\n+  public Optional<String> finishUpdateCheck() {\n+    if (updateMessageFuture.isDone()) {\n+      try {\n+        return updateMessageFuture.get();\n+      } catch (InterruptedException | ExecutionException ignored) {\n+        // Fail silently;\n+      }\n+    }\n+    updateMessageFuture.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxNDE5OQ=="}, "originalCommit": {"oid": "789defa56482019432632f6bc98aa4baaffbbf0b"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk2MTgzOQ==", "bodyText": "That's good. For both Maven and Gradle?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366961839", "createdAt": "2020-01-15T16:04:41Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+    try {\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      try {\n+        Files.deleteIfExists(configFile);\n+        Files.deleteIfExists(lastUpdateCheck);\n+      } catch (IOException ignored) {\n+        // Fail silently\n+      }\n+    }\n+\n+    return Optional.empty();\n+  }\n+\n+  /**\n+   * Returns the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   * otherwise returns the default config directory.\n+   *\n+   * @return the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   *     otherwise returns the default config directory.\n+   */\n+  private static Path getConfigDir() {\n+    String configDirProperty = System.getProperty(PropertyNames.CONFIG_DIRECTORY);\n+    if (!Strings.isNullOrEmpty(configDirProperty)) {\n+      return Paths.get(configDirProperty);\n+    }\n+    return XdgDirectories.getConfigHome();\n+  }\n+\n+  private final Future<Optional<String>> updateMessageFuture;\n+\n+  @VisibleForTesting\n+  UpdateChecker(Future<Optional<String>> updateMessageFuture) {\n+    this.updateMessageFuture = updateMessageFuture;\n+  }\n+\n+  /**\n+   * Returns a message indicating Jib should be upgraded if the check succeeded and the current\n+   * version is outdated, or returns {@code Optional.empty()} if the check was interrupted or did\n+   * not determine that a later version was available.\n+   *\n+   * @return the {@link Optional} message to upgrade Jib if a later version was found, else {@code\n+   *     Optional.empty()}.\n+   */\n+  public Optional<String> finishUpdateCheck() {\n+    if (updateMessageFuture.isDone()) {\n+      try {\n+        return updateMessageFuture.get();\n+      } catch (InterruptedException | ExecutionException ignored) {\n+        // Fail silently;\n+      }\n+    }\n+    updateMessageFuture.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxNDE5OQ=="}, "originalCommit": {"oid": "789defa56482019432632f6bc98aa4baaffbbf0b"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk2MzEyNA==", "bodyText": "Yup \ud83d\udc4d", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r366963124", "createdAt": "2020-01-15T16:07:09Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+    try {\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      try {\n+        Files.deleteIfExists(configFile);\n+        Files.deleteIfExists(lastUpdateCheck);\n+      } catch (IOException ignored) {\n+        // Fail silently\n+      }\n+    }\n+\n+    return Optional.empty();\n+  }\n+\n+  /**\n+   * Returns the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   * otherwise returns the default config directory.\n+   *\n+   * @return the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   *     otherwise returns the default config directory.\n+   */\n+  private static Path getConfigDir() {\n+    String configDirProperty = System.getProperty(PropertyNames.CONFIG_DIRECTORY);\n+    if (!Strings.isNullOrEmpty(configDirProperty)) {\n+      return Paths.get(configDirProperty);\n+    }\n+    return XdgDirectories.getConfigHome();\n+  }\n+\n+  private final Future<Optional<String>> updateMessageFuture;\n+\n+  @VisibleForTesting\n+  UpdateChecker(Future<Optional<String>> updateMessageFuture) {\n+    this.updateMessageFuture = updateMessageFuture;\n+  }\n+\n+  /**\n+   * Returns a message indicating Jib should be upgraded if the check succeeded and the current\n+   * version is outdated, or returns {@code Optional.empty()} if the check was interrupted or did\n+   * not determine that a later version was available.\n+   *\n+   * @return the {@link Optional} message to upgrade Jib if a later version was found, else {@code\n+   *     Optional.empty()}.\n+   */\n+  public Optional<String> finishUpdateCheck() {\n+    if (updateMessageFuture.isDone()) {\n+      try {\n+        return updateMessageFuture.get();\n+      } catch (InterruptedException | ExecutionException ignored) {\n+        // Fail silently;\n+      }\n+    }\n+    updateMessageFuture.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxNDE5OQ=="}, "originalCommit": {"oid": "789defa56482019432632f6bc98aa4baaffbbf0b"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzkwOTQ4OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOToyMToyMlrOFeDmFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOToyMToyMlrOFeDmFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2MDUwMw==", "bodyText": "I feel like a bad configfile should be caught here -- and the user should be informed that it is indeed corrupt. We then should not do an update because there's no way to know if they had previously configured it or not.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367060503", "createdAt": "2020-01-15T19:21:22Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+    try {\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa3c32929106d6c7cb9112b052573f572daa9da"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzkxNDkyOnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOToyMzoyOVrOFeDp4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOToyMzoyOVrOFeDp4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2MTQ3Mg==", "bodyText": "perhaps another catch here to cleanup this config file (if we're writing it)", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367061472", "createdAt": "2020-01-15T19:23:29Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+    try {\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa3c32929106d6c7cb9112b052573f572daa9da"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzkzMTI5OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOToyODo0OVrOFeDz9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTo1MDozNVrOFeEbEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2NDA1NA==", "bodyText": "Following @loosebazooka's suggestion, getting here most likely means the file is corrupted.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367064054", "createdAt": "2020-01-15T19:28:49Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+    try {\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa3c32929106d6c7cb9112b052573f572daa9da"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3NDA2Ng==", "bodyText": "I think we can auto-delete this one. The user probably shouldn't be touching lastUpdateCheck.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367074066", "createdAt": "2020-01-15T19:50:35Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+    try {\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        ConfigJsonTemplate config =\n+            JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+        if (config.disableUpdateCheck) {\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        String fileContents =\n+            new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+        try {\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException ex) {\n+          // Ignore parse failure; assume update check hasn't been performed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2NDA1NA=="}, "originalCommit": {"oid": "9aa3c32929106d6c7cb9112b052573f572daa9da"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODA0OTQ0OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDoxMDo1M1rOFeE-rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDoxMTozNlrOFeE__Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4MzE4Mw==", "bodyText": "perhaps we should log debug?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367083183", "createdAt": "2020-01-15T20:10:53Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -137,13 +153,8 @@ public static UpdateChecker checkForUpdate(String versionUrl) {\n         connection.disconnect();\n       }\n \n-    } catch (IOException ex) {\n-      try {\n-        Files.deleteIfExists(configFile);\n-        Files.deleteIfExists(lastUpdateCheck);\n-      } catch (IOException ignored) {\n-        // Fail silently\n-      }\n+    } catch (IOException ignored) {\n+      // Fail other exceptions silently", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "746d7f40aec8f286b7b9cffa8e132459f560e777"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4MzUxNw==", "bodyText": "or maybe that's not useful...", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367083517", "createdAt": "2020-01-15T20:11:36Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -137,13 +153,8 @@ public static UpdateChecker checkForUpdate(String versionUrl) {\n         connection.disconnect();\n       }\n \n-    } catch (IOException ex) {\n-      try {\n-        Files.deleteIfExists(configFile);\n-        Files.deleteIfExists(lastUpdateCheck);\n-      } catch (IOException ignored) {\n-        // Fail silently\n-      }\n+    } catch (IOException ignored) {\n+      // Fail other exceptions silently", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4MzE4Mw=="}, "originalCommit": {"oid": "746d7f40aec8f286b7b9cffa8e132459f560e777"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODA1NDEyOnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDoxMjo0M1rOFeFBvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDoxMjo0M1rOFeFBvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4Mzk2NA==", "bodyText": "Add the exception message too? I guess better than nothing.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367083964", "createdAt": "2020-01-15T20:12:43Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param warningLogger {@link Consumer} used to log warnings\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<String> warningLogger, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    warningLogger,\n+                    Verify.verifyNotNull(ProjectInfo.VERSION),\n+                    versionUrl,\n+                    getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<String> warningLogger, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          warningLogger.accept(\n+              \"Failed to read global Jib config; you may need to fix or delete \" + configFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23d9f473aefb4cb717bc619b59adfd7e51e66af8"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODQ0ODU0OnYy", "diffSide": "RIGHT", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/TaskCommon.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMjo0NDo1M1rOFeI4fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMjo0NjowNlrOFeI6DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0NzEzNA==", "bodyText": "I don't think I know what this is about?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367147134", "createdAt": "2020-01-15T22:44:53Z", "author": {"login": "loosebazooka"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/TaskCommon.java", "diffHunk": "@@ -63,7 +87,8 @@ static void disableHttpLogging() {\n     OutputEventListener defaultOutputEventListener = context.getOutputEventListener();\n     context.setOutputEventListener(\n         event -> {\n-          LogEvent logEvent = (LogEvent) event;\n+          org.gradle.internal.logging.events.LogEvent logEvent =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f4a8c210baed8f40a682860e664e678e0eb594"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0NzQ4Nw==", "bodyText": "Gradle and Jib both have classes named LogEvent, so I opted to use the full name for this one.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367147487", "createdAt": "2020-01-15T22:45:57Z", "author": {"login": "TadCordle"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/TaskCommon.java", "diffHunk": "@@ -63,7 +87,8 @@ static void disableHttpLogging() {\n     OutputEventListener defaultOutputEventListener = context.getOutputEventListener();\n     context.setOutputEventListener(\n         event -> {\n-          LogEvent logEvent = (LogEvent) event;\n+          org.gradle.internal.logging.events.LogEvent logEvent =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0NzEzNA=="}, "originalCommit": {"oid": "28f4a8c210baed8f40a682860e664e678e0eb594"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0NzUzMg==", "bodyText": "oh I figured it out.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367147532", "createdAt": "2020-01-15T22:46:06Z", "author": {"login": "loosebazooka"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/TaskCommon.java", "diffHunk": "@@ -63,7 +87,8 @@ static void disableHttpLogging() {\n     OutputEventListener defaultOutputEventListener = context.getOutputEventListener();\n     context.setOutputEventListener(\n         event -> {\n-          LogEvent logEvent = (LogEvent) event;\n+          org.gradle.internal.logging.events.LogEvent logEvent =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0NzEzNA=="}, "originalCommit": {"oid": "28f4a8c210baed8f40a682860e664e678e0eb594"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTg3ODAxOnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMjozNTowNFrOFepvTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMjozNTowNFrOFepvTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY4NTQ1NA==", "bodyText": "I think this should be in it's own class outside of UpdateChecker (if we're going to be eventually using a common config file for jib), but we can do this in another PR.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367685454", "createdAt": "2020-01-16T22:35:04Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f4a8c210baed8f40a682860e664e678e0eb594"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTg4MzQ5OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMjozNzozOVrOFepyqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMjo0OTozMlrOFeqChQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY4NjMxNA==", "bodyText": "Similarly we should think about how we want to read configFile earlier (maybe as part of project properties?)?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367686314", "createdAt": "2020-01-16T22:37:39Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f4a8c210baed8f40a682860e664e678e0eb594"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5MDM3Mw==", "bodyText": "Will do later if we end up using the config file for anything other than update checks.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367690373", "createdAt": "2020-01-16T22:49:32Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY4NjMxNA=="}, "originalCommit": {"oid": "28f4a8c210baed8f40a682860e664e678e0eb594"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTg5MDI1OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMjo0MDoxNFrOFep2hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMzozNDozMVrOFeq3GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY4NzMwMg==", "bodyText": "can we close the connection here to interrupt a read?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367687302", "createdAt": "2020-01-16T22:40:14Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          Files.deleteIfExists(configFile);\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException | IOException ex) {\n+          // If reading update time failed, file might be corrupt, so delete it\n+          Files.delete(lastUpdateCheck);\n+          log.accept(LogEvent.debug(\"Failed to read lastUpdateCheck; \" + ex.getMessage()));\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      log.accept(LogEvent.debug(\"Update check failed; \" + ex.getMessage()));\n+    }\n+\n+    return Optional.empty();\n+  }\n+\n+  /**\n+   * Returns the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   * otherwise returns the default config directory.\n+   *\n+   * @return the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   *     otherwise returns the default config directory.\n+   */\n+  private static Path getConfigDir() {\n+    String configDirProperty = System.getProperty(PropertyNames.CONFIG_DIRECTORY);\n+    if (!Strings.isNullOrEmpty(configDirProperty)) {\n+      return Paths.get(configDirProperty);\n+    }\n+    return XdgDirectories.getConfigHome();\n+  }\n+\n+  private final Future<Optional<String>> updateMessageFuture;\n+\n+  @VisibleForTesting\n+  UpdateChecker(Future<Optional<String>> updateMessageFuture) {\n+    this.updateMessageFuture = updateMessageFuture;\n+  }\n+\n+  /**\n+   * Returns a message indicating Jib should be upgraded if the check succeeded and the current\n+   * version is outdated, or returns {@code Optional.empty()} if the check was interrupted or did\n+   * not determine that a later version was available.\n+   *\n+   * @return the {@link Optional} message to upgrade Jib if a later version was found, else {@code\n+   *     Optional.empty()}.\n+   */\n+  public Optional<String> finishUpdateCheck() {\n+    if (updateMessageFuture.isDone()) {\n+      try {\n+        return updateMessageFuture.get();\n+      } catch (InterruptedException | ExecutionException ignored) {\n+        // Fail silently;\n+      }\n+    }\n+    updateMessageFuture.cancel(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f4a8c210baed8f40a682860e664e678e0eb594"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5MTMwMg==", "bodyText": "Is it necessary? updateMessageFuture.cancel(true) should interrupt the read regardless, shouldn't it? Or will the connection be left open if we interrupt it and don't disconnect here?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367691302", "createdAt": "2020-01-16T22:52:32Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          Files.deleteIfExists(configFile);\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException | IOException ex) {\n+          // If reading update time failed, file might be corrupt, so delete it\n+          Files.delete(lastUpdateCheck);\n+          log.accept(LogEvent.debug(\"Failed to read lastUpdateCheck; \" + ex.getMessage()));\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      log.accept(LogEvent.debug(\"Update check failed; \" + ex.getMessage()));\n+    }\n+\n+    return Optional.empty();\n+  }\n+\n+  /**\n+   * Returns the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   * otherwise returns the default config directory.\n+   *\n+   * @return the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   *     otherwise returns the default config directory.\n+   */\n+  private static Path getConfigDir() {\n+    String configDirProperty = System.getProperty(PropertyNames.CONFIG_DIRECTORY);\n+    if (!Strings.isNullOrEmpty(configDirProperty)) {\n+      return Paths.get(configDirProperty);\n+    }\n+    return XdgDirectories.getConfigHome();\n+  }\n+\n+  private final Future<Optional<String>> updateMessageFuture;\n+\n+  @VisibleForTesting\n+  UpdateChecker(Future<Optional<String>> updateMessageFuture) {\n+    this.updateMessageFuture = updateMessageFuture;\n+  }\n+\n+  /**\n+   * Returns a message indicating Jib should be upgraded if the check succeeded and the current\n+   * version is outdated, or returns {@code Optional.empty()} if the check was interrupted or did\n+   * not determine that a later version was available.\n+   *\n+   * @return the {@link Optional} message to upgrade Jib if a later version was found, else {@code\n+   *     Optional.empty()}.\n+   */\n+  public Optional<String> finishUpdateCheck() {\n+    if (updateMessageFuture.isDone()) {\n+      try {\n+        return updateMessageFuture.get();\n+      } catch (InterruptedException | ExecutionException ignored) {\n+        // Fail silently;\n+      }\n+    }\n+    updateMessageFuture.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY4NzMwMg=="}, "originalCommit": {"oid": "28f4a8c210baed8f40a682860e664e678e0eb594"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5NDQxNg==", "bodyText": "I'm not really concerned about this. Looks like the Maven/Gradle JVM always terminates no matter what I do in the update checker thread. And particularly it doesn't matter much to close the connection if the build is about to exit.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367694416", "createdAt": "2020-01-16T23:02:34Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          Files.deleteIfExists(configFile);\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException | IOException ex) {\n+          // If reading update time failed, file might be corrupt, so delete it\n+          Files.delete(lastUpdateCheck);\n+          log.accept(LogEvent.debug(\"Failed to read lastUpdateCheck; \" + ex.getMessage()));\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      log.accept(LogEvent.debug(\"Update check failed; \" + ex.getMessage()));\n+    }\n+\n+    return Optional.empty();\n+  }\n+\n+  /**\n+   * Returns the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   * otherwise returns the default config directory.\n+   *\n+   * @return the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   *     otherwise returns the default config directory.\n+   */\n+  private static Path getConfigDir() {\n+    String configDirProperty = System.getProperty(PropertyNames.CONFIG_DIRECTORY);\n+    if (!Strings.isNullOrEmpty(configDirProperty)) {\n+      return Paths.get(configDirProperty);\n+    }\n+    return XdgDirectories.getConfigHome();\n+  }\n+\n+  private final Future<Optional<String>> updateMessageFuture;\n+\n+  @VisibleForTesting\n+  UpdateChecker(Future<Optional<String>> updateMessageFuture) {\n+    this.updateMessageFuture = updateMessageFuture;\n+  }\n+\n+  /**\n+   * Returns a message indicating Jib should be upgraded if the check succeeded and the current\n+   * version is outdated, or returns {@code Optional.empty()} if the check was interrupted or did\n+   * not determine that a later version was available.\n+   *\n+   * @return the {@link Optional} message to upgrade Jib if a later version was found, else {@code\n+   *     Optional.empty()}.\n+   */\n+  public Optional<String> finishUpdateCheck() {\n+    if (updateMessageFuture.isDone()) {\n+      try {\n+        return updateMessageFuture.get();\n+      } catch (InterruptedException | ExecutionException ignored) {\n+        // Fail silently;\n+      }\n+    }\n+    updateMessageFuture.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY4NzMwMg=="}, "originalCommit": {"oid": "28f4a8c210baed8f40a682860e664e678e0eb594"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcwMzgzMg==", "bodyText": "I think the 3 second timeout is generally enough.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367703832", "createdAt": "2020-01-16T23:34:31Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          Files.deleteIfExists(configFile);\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException | IOException ex) {\n+          // If reading update time failed, file might be corrupt, so delete it\n+          Files.delete(lastUpdateCheck);\n+          log.accept(LogEvent.debug(\"Failed to read lastUpdateCheck; \" + ex.getMessage()));\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      log.accept(LogEvent.debug(\"Update check failed; \" + ex.getMessage()));\n+    }\n+\n+    return Optional.empty();\n+  }\n+\n+  /**\n+   * Returns the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   * otherwise returns the default config directory.\n+   *\n+   * @return the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   *     otherwise returns the default config directory.\n+   */\n+  private static Path getConfigDir() {\n+    String configDirProperty = System.getProperty(PropertyNames.CONFIG_DIRECTORY);\n+    if (!Strings.isNullOrEmpty(configDirProperty)) {\n+      return Paths.get(configDirProperty);\n+    }\n+    return XdgDirectories.getConfigHome();\n+  }\n+\n+  private final Future<Optional<String>> updateMessageFuture;\n+\n+  @VisibleForTesting\n+  UpdateChecker(Future<Optional<String>> updateMessageFuture) {\n+    this.updateMessageFuture = updateMessageFuture;\n+  }\n+\n+  /**\n+   * Returns a message indicating Jib should be upgraded if the check succeeded and the current\n+   * version is outdated, or returns {@code Optional.empty()} if the check was interrupted or did\n+   * not determine that a later version was available.\n+   *\n+   * @return the {@link Optional} message to upgrade Jib if a later version was found, else {@code\n+   *     Optional.empty()}.\n+   */\n+  public Optional<String> finishUpdateCheck() {\n+    if (updateMessageFuture.isDone()) {\n+      try {\n+        return updateMessageFuture.get();\n+      } catch (InterruptedException | ExecutionException ignored) {\n+        // Fail silently;\n+      }\n+    }\n+    updateMessageFuture.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY4NzMwMg=="}, "originalCommit": {"oid": "28f4a8c210baed8f40a682860e664e678e0eb594"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTkyNjY1OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMjo1ODowMlrOFeqMxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMzowOTozM1rOFeqaNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5Mjk5OA==", "bodyText": "It's a minor point, but I guess there's no need to generate the file. We can remove this whole section?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367692998", "createdAt": "2020-01-16T22:58:02Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          Files.deleteIfExists(configFile);\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f4a8c210baed8f40a682860e664e678e0eb594"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5NTc4MA==", "bodyText": "I want to generate the file automatically so it's easier to opt-out when the user goes looking for it.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367695780", "createdAt": "2020-01-16T23:07:20Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          Files.deleteIfExists(configFile);\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5Mjk5OA=="}, "originalCommit": {"oid": "28f4a8c210baed8f40a682860e664e678e0eb594"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5NjQzNw==", "bodyText": "Ah, that's a good point.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367696437", "createdAt": "2020-01-16T23:09:33Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          Files.deleteIfExists(configFile);\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5Mjk5OA=="}, "originalCommit": {"oid": "28f4a8c210baed8f40a682860e664e678e0eb594"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTkzMTkzOnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMzowMDo0MFrOFeqQCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMzowOTo1NVrOFeqajQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5MzgzNQ==", "bodyText": "I'd put this before Files.delete(). If we got here due to IOException, there's good chance Files.delete() will fail too. deleteIfExists() will be safer?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367693835", "createdAt": "2020-01-16T23:00:40Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          Files.deleteIfExists(configFile);\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException | IOException ex) {\n+          // If reading update time failed, file might be corrupt, so delete it\n+          Files.delete(lastUpdateCheck);\n+          log.accept(LogEvent.debug(\"Failed to read lastUpdateCheck; \" + ex.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f4a8c210baed8f40a682860e664e678e0eb594"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5NjA3Mg==", "bodyText": "Will deleteIfExists() make a difference when this is inside a block that checks if the file exists?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367696072", "createdAt": "2020-01-16T23:08:19Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          Files.deleteIfExists(configFile);\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException | IOException ex) {\n+          // If reading update time failed, file might be corrupt, so delete it\n+          Files.delete(lastUpdateCheck);\n+          log.accept(LogEvent.debug(\"Failed to read lastUpdateCheck; \" + ex.getMessage()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5MzgzNQ=="}, "originalCommit": {"oid": "28f4a8c210baed8f40a682860e664e678e0eb594"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5NjUyNQ==", "bodyText": "Ah, you're right.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367696525", "createdAt": "2020-01-16T23:09:55Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          Files.deleteIfExists(configFile);\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException | IOException ex) {\n+          // If reading update time failed, file might be corrupt, so delete it\n+          Files.delete(lastUpdateCheck);\n+          log.accept(LogEvent.debug(\"Failed to read lastUpdateCheck; \" + ex.getMessage()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5MzgzNQ=="}, "originalCommit": {"oid": "28f4a8c210baed8f40a682860e664e678e0eb594"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjE3NzY3OnYy", "diffSide": "RIGHT", "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MojoCommon.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMTozMzoxMVrOFesm7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMTozMzoxMVrOFesm7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMjQ2MQ==", "bodyText": "Optional, but it seems a bit unusual to have the non-expected case come last", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367732461", "createdAt": "2020-01-17T01:33:11Z", "author": {"login": "briandealwis"}, "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MojoCommon.java", "diffHunk": "@@ -40,6 +44,27 @@\n   @VisibleForTesting\n   public static final String REQUIRED_VERSION_PROPERTY_NAME = \"jib.requiredVersion\";\n \n+  public static final String VERSION_URL = \"https://storage.googleapis.com/jib-versions/jib-maven\";\n+\n+  static Optional<UpdateChecker> newUpdateChecker(ProjectProperties projectProperties, Log logger) {\n+    if (!projectProperties.isOffline() && logger.isInfoEnabled()) {\n+      return Optional.of(UpdateChecker.checkForUpdate(projectProperties::log, VERSION_URL));\n+    }\n+    return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "946626a35f3b27aac3f6016fc44da8c734b31c69"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjE4MTU4OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMTozNTo1M1rOFespOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo1MTo0NVrOFe9Rgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMzA0OA==", "bodyText": "I guess this is plugins.common but there may be some consumer that wants to provide a execution service", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367733048", "createdAt": "2020-01-17T01:35:53Z", "author": {"login": "briandealwis"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "946626a35f3b27aac3f6016fc44da8c734b31c69"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2NzM3MA==", "bodyText": "It made some sense to me to manage the lifecycle within the updater (so we could shut it down). But I guess taskcommon could do that.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367967370", "createdAt": "2020-01-17T14:38:54Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMzA0OA=="}, "originalCommit": {"oid": "946626a35f3b27aac3f6016fc44da8c734b31c69"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4MDE5Mg==", "bodyText": "It seems a bit unnecessary to me at the moment; like you said, this is plugins common, so we're the only consumer. Wouldn't it just lead to things being more spread out/more duplicate code creating creating an ExecutorService for the updater?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367980192", "createdAt": "2020-01-17T15:02:42Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMzA0OA=="}, "originalCommit": {"oid": "946626a35f3b27aac3f6016fc44da8c734b31c69"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNTUwNw==", "bodyText": "As a framework, this code shouldn't be making that decision (IMHO).", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r368005507", "createdAt": "2020-01-17T15:51:45Z", "author": {"login": "briandealwis"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMzA0OA=="}, "originalCommit": {"oid": "946626a35f3b27aac3f6016fc44da8c734b31c69"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjE4NjAwOnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMTozOToxNVrOFessAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjowODoyNFrOFe9zeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMzc2Mg==", "bodyText": "If you passed in the instant, that would make this more easily tested", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367733762", "createdAt": "2020-01-17T01:39:15Z", "author": {"login": "briandealwis"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+          Files.deleteIfExists(configFile);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "946626a35f3b27aac3f6016fc44da8c734b31c69"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkyNTQwOQ==", "bodyText": "It's easier for us to make the decision to shut it down this way.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367925409", "createdAt": "2020-01-17T13:05:21Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+          Files.deleteIfExists(configFile);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMzc2Mg=="}, "originalCommit": {"oid": "946626a35f3b27aac3f6016fc44da8c734b31c69"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1NDY5OA==", "bodyText": "I just meant pass in the Instant as an argument?  @TadCordle had been asking about testing.  Or alternatively pass in the Clock.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367954698", "createdAt": "2020-01-17T14:13:43Z", "author": {"login": "briandealwis"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+          Files.deleteIfExists(configFile);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMzc2Mg=="}, "originalCommit": {"oid": "946626a35f3b27aac3f6016fc44da8c734b31c69"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2NjgyOQ==", "bodyText": "I commented on the wrong comment... Oops. I meant for the executor", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367966829", "createdAt": "2020-01-17T14:37:47Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+          Files.deleteIfExists(configFile);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMzc2Mg=="}, "originalCommit": {"oid": "946626a35f3b27aac3f6016fc44da8c734b31c69"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk3ODg5OA==", "bodyText": "@briandealwis I think it might help for unit testing, but I think that's in good enough shape right now. The harder problem is integration testing.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367978898", "createdAt": "2020-01-17T15:00:18Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+          Files.deleteIfExists(configFile);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMzc2Mg=="}, "originalCommit": {"oid": "946626a35f3b27aac3f6016fc44da8c734b31c69"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxNDIwMg==", "bodyText": "This class is hard to test because all of the logic is hard-coded into this single method.  Extract the last-check time determination, the current-time generation (Supplier), the modification time comparison (BiPredicate), and this class should be testable through unit tests.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r368014202", "createdAt": "2020-01-17T16:08:24Z", "author": {"login": "briandealwis"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+          Files.deleteIfExists(configFile);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMzc2Mg=="}, "originalCommit": {"oid": "946626a35f3b27aac3f6016fc44da8c734b31c69"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjE4ODc4OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMTo0MTozMFrOFestxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMTo0MTozMFrOFestxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczNDIxMw==", "bodyText": "Could we direct them to the change log?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r367734213", "createdAt": "2020-01-17T01:41:30Z", "author": {"login": "briandealwis"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+          Files.deleteIfExists(configFile);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException | IOException ex) {\n+          // If reading update time failed, file might be corrupt, so delete it\n+          log.accept(LogEvent.debug(\"Failed to read lastUpdateCheck; \" + ex.getMessage()));\n+          Files.delete(lastUpdateCheck);\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        String latestVersion = bufferedReader.readLine().trim();\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(latestVersion)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + latestVersion\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "946626a35f3b27aac3f6016fc44da8c734b31c69"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Mzk1MzQ4OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo1NTowOFrOFe9Yug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMDoyNzo1M1rOFfEbGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNzM1NA==", "bodyText": "This method is quite large and would benefit from being broken down.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r368007354", "createdAt": "2020-01-17T15:55:08Z", "author": {"login": "briandealwis"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "946626a35f3b27aac3f6016fc44da8c734b31c69"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNDY4Mg==", "bodyText": "I'd rather keep it like this; it is a bit long, but it's straightforward to read through. Would rather avoid adding mental context switches to the code. Thoughts @loosebazooka @chanseokoh ?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r368034682", "createdAt": "2020-01-17T16:50:13Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNzM1NA=="}, "originalCommit": {"oid": "946626a35f3b27aac3f6016fc44da8c734b31c69"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODExMzE4OQ==", "bodyText": "Without saying much, I think a pseudo-code-like high-level branching description as a method like below helps:\nvoid performUpdateCheck() {\n    try {\n      if (!checkGlobalConfig(...)) { // or isUpdateCheckDisabled() or something else\n        return Optional.empty();\n      }\n      if (!checkLastUpdateTime(...)) { // or isTimeToCheckBack() or something else, some name that itself gives you the confidence by just reading it that you don't even feel the necessity to look into the method code\n        return Optional.empty();\n      }\n      ... = fetchUrl(versionUrl); // or something else, the method may have a larger scope than just contacting the server, or it may just be okay to not have a method at this point\n      \n    } catch ( ... ) {\n    }\n  }\nA long method may be comfortable to the repo maintainers, but it may not be so to people new to the repo. Like, what I feel when I try to read this.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r368113189", "createdAt": "2020-01-17T20:01:58Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNzM1NA=="}, "originalCommit": {"oid": "946626a35f3b27aac3f6016fc44da8c734b31c69"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEyMjY0OA==", "bodyText": "But since this PR has been dragged too long and having like 100+ comments, let's not do it here. It may trigger another cascade of changes.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r368122648", "createdAt": "2020-01-17T20:27:53Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNzM1NA=="}, "originalCommit": {"oid": "946626a35f3b27aac3f6016fc44da8c734b31c69"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Mzk2NjI5OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo1ODo1MFrOFe9g1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo1ODo1MFrOFe9g1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwOTQyOQ==", "bodyText": "This doesn't seem right: we're returning an instance whose class name suggests that it exists to perform an update, but the operation is already in progress.  We could just return the future and make this be a static class\nOr maybe skip the executor entirely and leave how to actually schedule the check to the caller.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r368009429", "createdAt": "2020-01-17T15:58:50Z", "author": {"login": "briandealwis"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static UpdateChecker checkForUpdate(Consumer<LogEvent> log, String versionUrl) {\n+    ExecutorService executorService = Executors.newSingleThreadExecutor();\n+    Future<Optional<String>> messageFuture =\n+        executorService.submit(\n+            () ->\n+                performUpdateCheck(\n+                    log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+    executorService.shutdown();\n+    return new UpdateChecker(messageFuture);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "946626a35f3b27aac3f6016fc44da8c734b31c69"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDA0MTA0OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoyMzozMlrOFe-QTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoyMzozMlrOFe-QTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMTU4Mg==", "bodyText": "2020", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r368021582", "createdAt": "2020-01-17T16:23:32Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2019 Google LLC.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1fba58ae41fd747e559d54ede4ce45a97675c6f"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDA0MTQ5OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoyMzo0MFrOFe-QmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoyMzo0MFrOFe-QmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMTY1Nw==", "bodyText": "2020", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r368021657", "createdAt": "2020-01-17T16:23:40Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2019 Google LLC.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1fba58ae41fd747e559d54ede4ce45a97675c6f"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDEwMzg3OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo0NDowMVrOFe-3jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo0NDowMVrOFe-3jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMTYyOA==", "bodyText": "Should the logger also be checked that nothing is logged?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r368031628", "createdAt": "2020-01-17T16:44:01Z", "author": {"login": "briandealwis"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.http.TestWebServer;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.FileTime;\n+import java.security.GeneralSecurityException;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/** Tests for {@link UpdateChecker} */\n+@RunWith(MockitoJUnitRunner.class)\n+public class UpdateCheckerTest {\n+\n+  @Rule public final RestoreSystemProperties systemPropertyRestorer = new RestoreSystemProperties();\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  private TestWebServer testWebServer;\n+  private Path configDir;\n+\n+  @Before\n+  public void setUp()\n+      throws InterruptedException, GeneralSecurityException, URISyntaxException, IOException {\n+    testWebServer =\n+        new TestWebServer(\n+            false, Collections.singletonList(\"HTTP/1.1 200 OK\\nContent-Length:5\\n\\n2.0.0\"), 1);\n+    configDir = temporaryFolder.getRoot().toPath();\n+  }\n+\n+  @After\n+  public void tearDown() throws IOException {\n+    testWebServer.close();\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_newVersionFound() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_onLatest() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"2.0.0\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_noConfigOrLastUpdateCheck() throws IOException {\n+    Instant before = Instant.now();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_lastUpdateCheckTooSoon() throws IOException {\n+    FileTime modifiedTime = FileTime.from(Instant.now().minusSeconds(12));\n+    setupConfigAndLastUpdateCheck();\n+    Files.write(\n+        configDir.resolve(\"lastUpdateCheck\"),\n+        modifiedTime.toString().getBytes(StandardCharsets.UTF_8));\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+\n+    // lastUpdateCheck should not have changed\n+    String lastUpdateTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertEquals(Instant.parse(lastUpdateTime), modifiedTime.toInstant());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_systemProperty() {\n+    System.setProperty(PropertyNames.DISABLE_UPDATE_CHECKS, \"true\");\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_configDisabled() throws IOException {\n+    Files.write(\n+        configDir.resolve(\"config.json\"),\n+        \"{\\\"disableUpdateCheck\\\":true}\".getBytes(StandardCharsets.UTF_8));\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_failSilently()\n+      throws InterruptedException, GeneralSecurityException, URISyntaxException, IOException {\n+    try (TestWebServer badServer =\n+        new TestWebServer(false, Collections.singletonList(\"HTTP/1.1 400 Bad Request\\n\\n\"), 1)) {\n+      Optional<String> message =\n+          UpdateChecker.performUpdateCheck(\n+              ignored -> {}, \"1.0.2\", badServer.getEndpoint(), configDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c865371ab7bf8dab76361796af551f485dc743e3"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDExNTc0OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo0NzozNVrOFe--vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo0NzozNVrOFe--vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMzQ3MQ==", "bodyText": "Can we also check for invalid content in the config.json, and that the lastUpdateCheck file is removed on invalid content too.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r368033471", "createdAt": "2020-01-17T16:47:35Z", "author": {"login": "briandealwis"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.http.TestWebServer;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.FileTime;\n+import java.security.GeneralSecurityException;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/** Tests for {@link UpdateChecker} */\n+@RunWith(MockitoJUnitRunner.class)\n+public class UpdateCheckerTest {\n+\n+  @Rule public final RestoreSystemProperties systemPropertyRestorer = new RestoreSystemProperties();\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  private TestWebServer testWebServer;\n+  private Path configDir;\n+\n+  @Before\n+  public void setUp()\n+      throws InterruptedException, GeneralSecurityException, URISyntaxException, IOException {\n+    testWebServer =\n+        new TestWebServer(\n+            false, Collections.singletonList(\"HTTP/1.1 200 OK\\nContent-Length:5\\n\\n2.0.0\"), 1);\n+    configDir = temporaryFolder.getRoot().toPath();\n+  }\n+\n+  @After\n+  public void tearDown() throws IOException {\n+    testWebServer.close();\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_newVersionFound() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_onLatest() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"2.0.0\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_noConfigOrLastUpdateCheck() throws IOException {\n+    Instant before = Instant.now();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_lastUpdateCheckTooSoon() throws IOException {\n+    FileTime modifiedTime = FileTime.from(Instant.now().minusSeconds(12));\n+    setupConfigAndLastUpdateCheck();\n+    Files.write(\n+        configDir.resolve(\"lastUpdateCheck\"),\n+        modifiedTime.toString().getBytes(StandardCharsets.UTF_8));\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+\n+    // lastUpdateCheck should not have changed\n+    String lastUpdateTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertEquals(Instant.parse(lastUpdateTime), modifiedTime.toInstant());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_systemProperty() {\n+    System.setProperty(PropertyNames.DISABLE_UPDATE_CHECKS, \"true\");\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_configDisabled() throws IOException {\n+    Files.write(\n+        configDir.resolve(\"config.json\"),\n+        \"{\\\"disableUpdateCheck\\\":true}\".getBytes(StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c865371ab7bf8dab76361796af551f485dc743e3"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDU4MDUwOnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxOTo0ODowMFrOFfDgGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxOTo0ODowMFrOFfDgGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEwNzU0NA==", "bodyText": "Remember I also suggested ImmediateFuture()? I think there's no good reason to do executorService.submit().", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r368107544", "createdAt": "2020-01-17T19:48:00Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.api.LogEvent.Level;\n+import com.google.cloud.tools.jib.http.TestWebServer;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.FileTime;\n+import java.security.GeneralSecurityException;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/** Tests for {@link UpdateChecker} */\n+@RunWith(MockitoJUnitRunner.class)\n+public class UpdateCheckerTest {\n+\n+  @Rule public final RestoreSystemProperties systemPropertyRestorer = new RestoreSystemProperties();\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  private TestWebServer testWebServer;\n+  private Path configDir;\n+\n+  @Before\n+  public void setUp()\n+      throws InterruptedException, GeneralSecurityException, URISyntaxException, IOException {\n+    testWebServer =\n+        new TestWebServer(\n+            false, Collections.singletonList(\"HTTP/1.1 200 OK\\nContent-Length:5\\n\\n2.0.0\"), 1);\n+    configDir = temporaryFolder.getRoot().toPath();\n+  }\n+\n+  @After\n+  public void tearDown() throws IOException {\n+    testWebServer.close();\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_newVersionFound() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_onLatest() throws IOException {\n+    Instant before = Instant.now();\n+    setupConfigAndLastUpdateCheck();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"2.0.0\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_noConfigOrLastUpdateCheck() throws IOException {\n+    Instant before = Instant.now();\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_lastUpdateCheckTooSoon() throws IOException {\n+    FileTime modifiedTime = FileTime.from(Instant.now().minusSeconds(12));\n+    setupConfigAndLastUpdateCheck();\n+    Files.write(\n+        configDir.resolve(\"lastUpdateCheck\"),\n+        modifiedTime.toString().getBytes(StandardCharsets.UTF_8));\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+\n+    // lastUpdateCheck should not have changed\n+    String lastUpdateTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertEquals(Instant.parse(lastUpdateTime), modifiedTime.toInstant());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_systemProperty() {\n+    System.setProperty(PropertyNames.DISABLE_UPDATE_CHECKS, \"true\");\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_configDisabled() throws IOException {\n+    Files.write(\n+        configDir.resolve(\"config.json\"),\n+        \"{\\\"disableUpdateCheck\\\":true}\".getBytes(StandardCharsets.UTF_8));\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_badConfig() throws IOException {\n+    Files.write(\n+        configDir.resolve(\"config.json\"), \"corrupt config\".getBytes(StandardCharsets.UTF_8));\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    Assert.assertFalse(message.isPresent());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_badLastUpdateTime() throws IOException {\n+    Instant before = Instant.now();\n+    Files.write(\n+        configDir.resolve(\"lastUpdateCheck\"), \"bad timestamp\".getBytes(StandardCharsets.UTF_8));\n+    Optional<String> message =\n+        UpdateChecker.performUpdateCheck(\n+            ignored -> {}, \"1.0.2\", testWebServer.getEndpoint(), configDir);\n+    String modifiedTime =\n+        new String(\n+            Files.readAllBytes(configDir.resolve(\"lastUpdateCheck\")), StandardCharsets.UTF_8);\n+    Assert.assertTrue(Instant.parse(modifiedTime).isAfter(before));\n+    Assert.assertTrue(message.isPresent());\n+    Assert.assertEquals(\n+        \"A new version of Jib (2.0.0) is available (currently using 1.0.2). Update your build \"\n+            + \"configuration to use the latest features and fixes!\",\n+        message.get());\n+  }\n+\n+  @Test\n+  public void testPerformUpdateCheck_failSilently()\n+      throws InterruptedException, GeneralSecurityException, URISyntaxException, IOException {\n+    try (TestWebServer badServer =\n+        new TestWebServer(false, Collections.singletonList(\"HTTP/1.1 400 Bad Request\\n\\n\"), 1)) {\n+      Optional<String> message =\n+          UpdateChecker.performUpdateCheck(\n+              logEvent -> {\n+                Assert.assertEquals(logEvent.getLevel(), Level.DEBUG);\n+                Assert.assertTrue(logEvent.getMessage().contains(\"Update check failed; \"));\n+              },\n+              \"1.0.2\",\n+              badServer.getEndpoint(),\n+              configDir);\n+      Assert.assertFalse(message.isPresent());\n+    }\n+  }\n+\n+  @Test\n+  public void testFinishUpdateCheck_success() {\n+    ExecutorService executorService = MoreExecutors.newDirectExecutorService();\n+    Future<Optional<String>> updateCheckFuture = executorService.submit(() -> Optional.of(\"Hello\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8befde7c10b88ddbabcb55bc41154817a456ab7"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDYzODAzOnYy", "diffSide": "RIGHT", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/TaskCommon.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMDoxMTo0OFrOFfEDqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMDoxMTo0OFrOFfEDqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODExNjY0OA==", "bodyText": "If newUpdateChecker creates Executors.newSingleThreadExecutor(), let's make it \"close\" it, i.e., calling shutdown() in newUpdateChecker. And although I don't care much since I know our plugins just terminate without even calling shutdown(), I guess it doesn't harm to guarantee it in finally.\n} finally {\n   executorService.shutdown();\n}", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r368116648", "createdAt": "2020-01-17T20:11:48Z", "author": {"login": "chanseokoh"}, "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/TaskCommon.java", "diffHunk": "@@ -17,25 +17,58 @@\n package com.google.cloud.tools.jib.gradle;\n \n import com.google.api.client.http.HttpTransport;\n+import com.google.cloud.tools.jib.ProjectInfo;\n import com.google.cloud.tools.jib.api.AbsoluteUnixPath;\n import com.google.cloud.tools.jib.api.FilePermissions;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.plugins.common.ProjectProperties;\n+import com.google.cloud.tools.jib.plugins.common.UpdateChecker;\n+import com.google.common.util.concurrent.Futures;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n import java.util.logging.Level;\n import javax.annotation.Nullable;\n import org.gradle.api.Project;\n import org.gradle.api.Task;\n import org.gradle.api.UnknownTaskException;\n+import org.gradle.api.logging.Logger;\n import org.gradle.api.plugins.WarPlugin;\n import org.gradle.api.tasks.TaskProvider;\n-import org.gradle.internal.logging.events.LogEvent;\n import org.gradle.internal.logging.events.OutputEventListener;\n import org.gradle.internal.logging.slf4j.OutputEventListenerBackedLoggerContext;\n import org.slf4j.LoggerFactory;\n \n /** Collection of common methods to share between Gradle tasks. */\n class TaskCommon {\n \n+  public static final String VERSION_URL = \"https://storage.googleapis.com/jib-versions/jib-gradle\";\n+\n+  static Future<Optional<String>> newUpdateChecker(\n+      ProjectProperties projectProperties, Logger logger) {\n+    if (projectProperties.isOffline() || !logger.isLifecycleEnabled()) {\n+      return Futures.immediateFuture(Optional.empty());\n+    }\n+    return UpdateChecker.checkForUpdate(\n+        Executors.newSingleThreadExecutor(), projectProperties::log, VERSION_URL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8befde7c10b88ddbabcb55bc41154817a456ab7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTA2MjI3OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTo0NDo0M1rOFf-yow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTo1MDoyNFrOFf_A7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA3ODk0Nw==", "bodyText": "any reason for this?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r369078947", "createdAt": "2020-01-21T15:44:43Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -166,10 +166,8 @@ public static JibBuildRunner createJibBuildRunnerForRegistryImage(\n         rawConfiguration.getToCredHelper().orElse(null));\n \n     boolean alwaysCacheBaseImage =\n-        Boolean.valueOf(\n-            rawConfiguration\n-                .getProperty(PropertyNames.ALWAYS_CACHE_BASE_IMAGE)\n-                .orElse(Boolean.FALSE.toString()));\n+        Boolean.parseBoolean(\n+            rawConfiguration.getProperty(PropertyNames.ALWAYS_CACHE_BASE_IMAGE).orElse(\"false\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95d34bd3aaaae05e986bc69760169e7e925aec0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA4MjYwNg==", "bodyText": "Just a cleanup thing I noticed.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r369082606", "createdAt": "2020-01-21T15:50:24Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -166,10 +166,8 @@ public static JibBuildRunner createJibBuildRunnerForRegistryImage(\n         rawConfiguration.getToCredHelper().orElse(null));\n \n     boolean alwaysCacheBaseImage =\n-        Boolean.valueOf(\n-            rawConfiguration\n-                .getProperty(PropertyNames.ALWAYS_CACHE_BASE_IMAGE)\n-                .orElse(Boolean.FALSE.toString()));\n+        Boolean.parseBoolean(\n+            rawConfiguration.getProperty(PropertyNames.ALWAYS_CACHE_BASE_IMAGE).orElse(\"false\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA3ODk0Nw=="}, "originalCommit": {"oid": "d95d34bd3aaaae05e986bc69760169e7e925aec0"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTA2NjU4OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTo0NTo1M1rOFf-1ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjowMjoyN1rOFf_fMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA3OTY1Mg==", "bodyText": "what happens when the verify fails?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r369079652", "createdAt": "2020-01-21T15:45:53Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /** JSON template for content downloaded during version check. */\n+  private static class VersionJsonTemplate implements JsonTemplate {\n+    private String latest = \"\";\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param executorService the {@link ExecutorService}\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static Future<Optional<String>> checkForUpdate(\n+      ExecutorService executorService, Consumer<LogEvent> log, String versionUrl) {\n+    return executorService.submit(\n+        () ->\n+            performUpdateCheck(\n+                log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95d34bd3aaaae05e986bc69760169e7e925aec0"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA4NzI2Mg==", "bodyText": "I added it to make nullaway happy. Will ProjectInfo.VERSION every actually be null in practice?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r369087262", "createdAt": "2020-01-21T15:57:30Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /** JSON template for content downloaded during version check. */\n+  private static class VersionJsonTemplate implements JsonTemplate {\n+    private String latest = \"\";\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param executorService the {@link ExecutorService}\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static Future<Optional<String>> checkForUpdate(\n+      ExecutorService executorService, Consumer<LogEvent> log, String versionUrl) {\n+    return executorService.submit(\n+        () ->\n+            performUpdateCheck(\n+                log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA3OTY1Mg=="}, "originalCommit": {"oid": "d95d34bd3aaaae05e986bc69760169e7e925aec0"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA5MDM1NQ==", "bodyText": "No. As long as the code runs inside a JAR (which is the case, our plugins are downloaded as a JAR), I believe this is never null. However, I think this is null in our tests. We should be good.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r369090355", "createdAt": "2020-01-21T16:02:27Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /** JSON template for content downloaded during version check. */\n+  private static class VersionJsonTemplate implements JsonTemplate {\n+    private String latest = \"\";\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param executorService the {@link ExecutorService}\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static Future<Optional<String>> checkForUpdate(\n+      ExecutorService executorService, Consumer<LogEvent> log, String versionUrl) {\n+    return executorService.submit(\n+        () ->\n+            performUpdateCheck(\n+                log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA3OTY1Mg=="}, "originalCommit": {"oid": "d95d34bd3aaaae05e986bc69760169e7e925aec0"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTA3Njc2OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTo0ODoxMFrOFf-7Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTo1NToxN1rOFf_NhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA4MTE3MA==", "bodyText": "I thought we had some sort of static class do this?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r369081170", "createdAt": "2020-01-21T15:48:10Z", "author": {"login": "loosebazooka"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /** JSON template for content downloaded during version check. */\n+  private static class VersionJsonTemplate implements JsonTemplate {\n+    private String latest = \"\";\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param executorService the {@link ExecutorService}\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static Future<Optional<String>> checkForUpdate(\n+      ExecutorService executorService, Consumer<LogEvent> log, String versionUrl) {\n+    return executorService.submit(\n+        () ->\n+            performUpdateCheck(\n+                log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+          Files.deleteIfExists(configFile);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException | IOException ex) {\n+          // If reading update time failed, file might be corrupt, so delete it\n+          log.accept(LogEvent.debug(\"Failed to read lastUpdateCheck; \" + ex.getMessage()));\n+          Files.delete(lastUpdateCheck);\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        VersionJsonTemplate version =\n+            JsonTemplateMapper.readJson(\n+                bufferedReader.readLine().trim(), VersionJsonTemplate.class);\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(version.latest)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + version.latest\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      log.accept(LogEvent.debug(\"Update check failed; \" + ex.getMessage()));\n+    }\n+\n+    return Optional.empty();\n+  }\n+\n+  /**\n+   * Returns a message indicating Jib should be upgraded if the check succeeded and the current\n+   * version is outdated, or returns {@code Optional.empty()} if the check was interrupted or did\n+   * not determine that a later version was available.\n+   *\n+   * @param updateMessageFuture the {@link Future} returned by {@link UpdateChecker#checkForUpdate}\n+   * @return the {@link Optional} message to upgrade Jib if a later version was found, else {@code\n+   *     Optional.empty()}.\n+   */\n+  public static Optional<String> finishUpdateCheck(Future<Optional<String>> updateMessageFuture) {\n+    if (updateMessageFuture.isDone()) {\n+      try {\n+        return updateMessageFuture.get();\n+      } catch (InterruptedException | ExecutionException ignored) {\n+        // Fail silently;\n+      }\n+    }\n+    updateMessageFuture.cancel(true);\n+    return Optional.empty();\n+  }\n+\n+  /**\n+   * Returns the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   * otherwise returns the default config directory.\n+   *\n+   * @return the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   *     otherwise returns the default config directory.\n+   */\n+  private static Path getConfigDir() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95d34bd3aaaae05e986bc69760169e7e925aec0"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA4NDk5MA==", "bodyText": "This includes some extra system properties stuff, I guess I can move that into the static class.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r369084990", "createdAt": "2020-01-21T15:53:59Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /** JSON template for content downloaded during version check. */\n+  private static class VersionJsonTemplate implements JsonTemplate {\n+    private String latest = \"\";\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param executorService the {@link ExecutorService}\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static Future<Optional<String>> checkForUpdate(\n+      ExecutorService executorService, Consumer<LogEvent> log, String versionUrl) {\n+    return executorService.submit(\n+        () ->\n+            performUpdateCheck(\n+                log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+          Files.deleteIfExists(configFile);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException | IOException ex) {\n+          // If reading update time failed, file might be corrupt, so delete it\n+          log.accept(LogEvent.debug(\"Failed to read lastUpdateCheck; \" + ex.getMessage()));\n+          Files.delete(lastUpdateCheck);\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        VersionJsonTemplate version =\n+            JsonTemplateMapper.readJson(\n+                bufferedReader.readLine().trim(), VersionJsonTemplate.class);\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(version.latest)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + version.latest\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      log.accept(LogEvent.debug(\"Update check failed; \" + ex.getMessage()));\n+    }\n+\n+    return Optional.empty();\n+  }\n+\n+  /**\n+   * Returns a message indicating Jib should be upgraded if the check succeeded and the current\n+   * version is outdated, or returns {@code Optional.empty()} if the check was interrupted or did\n+   * not determine that a later version was available.\n+   *\n+   * @param updateMessageFuture the {@link Future} returned by {@link UpdateChecker#checkForUpdate}\n+   * @return the {@link Optional} message to upgrade Jib if a later version was found, else {@code\n+   *     Optional.empty()}.\n+   */\n+  public static Optional<String> finishUpdateCheck(Future<Optional<String>> updateMessageFuture) {\n+    if (updateMessageFuture.isDone()) {\n+      try {\n+        return updateMessageFuture.get();\n+      } catch (InterruptedException | ExecutionException ignored) {\n+        // Fail silently;\n+      }\n+    }\n+    updateMessageFuture.cancel(true);\n+    return Optional.empty();\n+  }\n+\n+  /**\n+   * Returns the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   * otherwise returns the default config directory.\n+   *\n+   * @return the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   *     otherwise returns the default config directory.\n+   */\n+  private static Path getConfigDir() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA4MTE3MA=="}, "originalCommit": {"oid": "d95d34bd3aaaae05e986bc69760169e7e925aec0"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA4NTgyOQ==", "bodyText": "Oh wait sorry, this uses system property as part of the plugin frontend, so it doesn't belong in jib core.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r369085829", "createdAt": "2020-01-21T15:55:17Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /** JSON template for content downloaded during version check. */\n+  private static class VersionJsonTemplate implements JsonTemplate {\n+    private String latest = \"\";\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param executorService the {@link ExecutorService}\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static Future<Optional<String>> checkForUpdate(\n+      ExecutorService executorService, Consumer<LogEvent> log, String versionUrl) {\n+    return executorService.submit(\n+        () ->\n+            performUpdateCheck(\n+                log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+          Files.deleteIfExists(configFile);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException | IOException ex) {\n+          // If reading update time failed, file might be corrupt, so delete it\n+          log.accept(LogEvent.debug(\"Failed to read lastUpdateCheck; \" + ex.getMessage()));\n+          Files.delete(lastUpdateCheck);\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        VersionJsonTemplate version =\n+            JsonTemplateMapper.readJson(\n+                bufferedReader.readLine().trim(), VersionJsonTemplate.class);\n+        Files.write(lastUpdateCheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n+        if (currentVersion.equals(version.latest)) {\n+          return Optional.empty();\n+        }\n+        return Optional.of(\n+            \"A new version of Jib (\"\n+                + version.latest\n+                + \") is available (currently using \"\n+                + currentVersion\n+                + \"). Update your build configuration to use the latest features and fixes!\");\n+\n+      } finally {\n+        connection.disconnect();\n+      }\n+\n+    } catch (IOException ex) {\n+      log.accept(LogEvent.debug(\"Update check failed; \" + ex.getMessage()));\n+    }\n+\n+    return Optional.empty();\n+  }\n+\n+  /**\n+   * Returns a message indicating Jib should be upgraded if the check succeeded and the current\n+   * version is outdated, or returns {@code Optional.empty()} if the check was interrupted or did\n+   * not determine that a later version was available.\n+   *\n+   * @param updateMessageFuture the {@link Future} returned by {@link UpdateChecker#checkForUpdate}\n+   * @return the {@link Optional} message to upgrade Jib if a later version was found, else {@code\n+   *     Optional.empty()}.\n+   */\n+  public static Optional<String> finishUpdateCheck(Future<Optional<String>> updateMessageFuture) {\n+    if (updateMessageFuture.isDone()) {\n+      try {\n+        return updateMessageFuture.get();\n+      } catch (InterruptedException | ExecutionException ignored) {\n+        // Fail silently;\n+      }\n+    }\n+    updateMessageFuture.cancel(true);\n+    return Optional.empty();\n+  }\n+\n+  /**\n+   * Returns the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   * otherwise returns the default config directory.\n+   *\n+   * @return the config directory set by {@link PropertyNames#CONFIG_DIRECTORY} if not null,\n+   *     otherwise returns the default config directory.\n+   */\n+  private static Path getConfigDir() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA4MTE3MA=="}, "originalCommit": {"oid": "d95d34bd3aaaae05e986bc69760169e7e925aec0"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTA5OTA4OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTo1MzozMFrOFf_IwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTo1MzozMFrOFf_IwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA4NDYwOA==", "bodyText": "readLine() seems unsafe. It will break if our JSON file is not a single-line JSON. I think you used BufferedReader only to use readLine(), so perhaps it's no longer necessary. Maybe use InputStream directly?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r369084608", "createdAt": "2020-01-21T15:53:30Z", "author": {"login": "chanseokoh"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /** JSON template for content downloaded during version check. */\n+  @JsonIgnoreProperties(ignoreUnknown = true)\n+  private static class VersionJsonTemplate implements JsonTemplate {\n+    private String latest = \"\";\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param executorService the {@link ExecutorService}\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static Future<Optional<String>> checkForUpdate(\n+      ExecutorService executorService, Consumer<LogEvent> log, String versionUrl) {\n+    return executorService.submit(\n+        () ->\n+            performUpdateCheck(\n+                log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+          Files.deleteIfExists(configFile);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException | IOException ex) {\n+          // If reading update time failed, file might be corrupt, so delete it\n+          log.accept(LogEvent.debug(\"Failed to read lastUpdateCheck; \" + ex.getMessage()));\n+          Files.delete(lastUpdateCheck);\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();\n+      try {\n+        connection.setConnectTimeout(3000);\n+        BufferedReader bufferedReader =\n+            new BufferedReader(\n+                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n+        VersionJsonTemplate version =\n+            JsonTemplateMapper.readJson(\n+                bufferedReader.readLine().trim(), VersionJsonTemplate.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216bda4c48975c84729b6e9a123cc23b65157224"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDIwNDk3OnYy", "diffSide": "RIGHT", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMzo1NjoyMFrOFgc5WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTo1MjoyN1rOFghPjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU3MjE4NQ==", "bodyText": "I realize that this doesn't handle proxies.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r369572185", "createdAt": "2020-01-22T13:56:20Z", "author": {"login": "briandealwis"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /** JSON template for content downloaded during version check. */\n+  @JsonIgnoreProperties(ignoreUnknown = true)\n+  private static class VersionJsonTemplate implements JsonTemplate {\n+    private String latest = \"\";\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param executorService the {@link ExecutorService}\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static Future<Optional<String>> checkForUpdate(\n+      ExecutorService executorService, Consumer<LogEvent> log, String versionUrl) {\n+    return executorService.submit(\n+        () ->\n+            performUpdateCheck(\n+                log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+          Files.deleteIfExists(configFile);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException | IOException ex) {\n+          // If reading update time failed, file might be corrupt, so delete it\n+          log.accept(LogEvent.debug(\"Failed to read lastUpdateCheck; \" + ex.getMessage()));\n+          Files.delete(lastUpdateCheck);\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05bd091cf4f3228fcd6b46f2d7241c21668179af"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzODQ5OA==", "bodyText": "In what way?", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r369638498", "createdAt": "2020-01-22T15:44:59Z", "author": {"login": "TadCordle"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /** JSON template for content downloaded during version check. */\n+  @JsonIgnoreProperties(ignoreUnknown = true)\n+  private static class VersionJsonTemplate implements JsonTemplate {\n+    private String latest = \"\";\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param executorService the {@link ExecutorService}\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static Future<Optional<String>> checkForUpdate(\n+      ExecutorService executorService, Consumer<LogEvent> log, String versionUrl) {\n+    return executorService.submit(\n+        () ->\n+            performUpdateCheck(\n+                log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+          Files.deleteIfExists(configFile);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException | IOException ex) {\n+          // If reading update time failed, file might be corrupt, so delete it\n+          log.accept(LogEvent.debug(\"Failed to read lastUpdateCheck; \" + ex.getMessage()));\n+          Files.delete(lastUpdateCheck);\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU3MjE4NQ=="}, "originalCommit": {"oid": "05bd091cf4f3228fcd6b46f2d7241c21668179af"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0MzQwNA==", "bodyText": "Sorry should have phrased that as a question \u2014 does this handle proxies?  But it is being called after activating the MavenSettingsProxyProvider, so all good.", "url": "https://github.com/GoogleContainerTools/jib/pull/2214#discussion_r369643404", "createdAt": "2020-01-22T15:52:27Z", "author": {"login": "briandealwis"}, "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.google.cloud.tools.jib.ProjectInfo;\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.base.Verify;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.function.Consumer;\n+\n+/** Checks if Jib is up-to-date. */\n+public class UpdateChecker {\n+\n+  /** JSON template for the configuration file used to enable/disable update checks. */\n+  @VisibleForTesting\n+  static class ConfigJsonTemplate implements JsonTemplate {\n+    private boolean disableUpdateCheck;\n+\n+    @VisibleForTesting\n+    void setDisableUpdateCheck(boolean disableUpdateCheck) {\n+      this.disableUpdateCheck = disableUpdateCheck;\n+    }\n+  }\n+\n+  /** JSON template for content downloaded during version check. */\n+  @JsonIgnoreProperties(ignoreUnknown = true)\n+  private static class VersionJsonTemplate implements JsonTemplate {\n+    private String latest = \"\";\n+  }\n+\n+  /**\n+   * Begins checking for an update in a separate thread.\n+   *\n+   * @param executorService the {@link ExecutorService}\n+   * @param log {@link Consumer} used to log messages\n+   * @param versionUrl the location to check for the latest version\n+   * @return a new {@link UpdateChecker}\n+   */\n+  public static Future<Optional<String>> checkForUpdate(\n+      ExecutorService executorService, Consumer<LogEvent> log, String versionUrl) {\n+    return executorService.submit(\n+        () ->\n+            performUpdateCheck(\n+                log, Verify.verifyNotNull(ProjectInfo.VERSION), versionUrl, getConfigDir()));\n+  }\n+\n+  @VisibleForTesting\n+  static Optional<String> performUpdateCheck(\n+      Consumer<LogEvent> log, String currentVersion, String versionUrl, Path configDir) {\n+    // Abort if offline or update checks are disabled\n+    if (Boolean.getBoolean(PropertyNames.DISABLE_UPDATE_CHECKS)) {\n+      return Optional.empty();\n+    }\n+\n+    Path configFile = configDir.resolve(\"config.json\");\n+    Path lastUpdateCheck = configDir.resolve(\"lastUpdateCheck\");\n+\n+    try {\n+      // Check global config\n+      if (Files.exists(configFile)) {\n+        // Abort if update checks are disabled\n+        try {\n+          ConfigJsonTemplate config =\n+              JsonTemplateMapper.readJsonFromFile(configFile, ConfigJsonTemplate.class);\n+          if (config.disableUpdateCheck) {\n+            return Optional.empty();\n+          }\n+        } catch (IOException ex) {\n+          log.accept(\n+              LogEvent.warn(\n+                  \"Failed to read global Jib config: \"\n+                      + ex.getMessage()\n+                      + \"; you may need to fix or delete \"\n+                      + configFile\n+                      + \"; \"));\n+          return Optional.empty();\n+        }\n+      } else {\n+        // Generate config file if it doesn't exist\n+        ConfigJsonTemplate config = new ConfigJsonTemplate();\n+        Files.createDirectories(configDir);\n+        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+          JsonTemplateMapper.writeTo(config, outputStream);\n+        } catch (IOException ex) {\n+          // If attempt to generate new config file failed, delete so we can try again next time\n+          log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+          Files.deleteIfExists(configFile);\n+        }\n+      }\n+\n+      // Check time of last update check\n+      if (Files.exists(lastUpdateCheck)) {\n+        try {\n+          String fileContents =\n+              new String(Files.readAllBytes(lastUpdateCheck), StandardCharsets.UTF_8);\n+          Instant modifiedTime = Instant.parse(fileContents);\n+          if (modifiedTime.plus(Duration.ofDays(1)).isAfter(Instant.now())) {\n+            return Optional.empty();\n+          }\n+        } catch (DateTimeParseException | IOException ex) {\n+          // If reading update time failed, file might be corrupt, so delete it\n+          log.accept(LogEvent.debug(\"Failed to read lastUpdateCheck; \" + ex.getMessage()));\n+          Files.delete(lastUpdateCheck);\n+        }\n+      }\n+\n+      // Check for update\n+      HttpURLConnection connection = (HttpURLConnection) new URL(versionUrl).openConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU3MjE4NQ=="}, "originalCommit": {"oid": "05bd091cf4f3228fcd6b46f2d7241c21668179af"}, "originalPosition": 142}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 435, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}