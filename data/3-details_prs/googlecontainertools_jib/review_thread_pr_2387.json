{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5Njc4MzE4", "number": 2387, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODozNTozNFrODxxciw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODozNzoyMFrODxxe4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTE2OTM5OnYy", "diffSide": "RIGHT", "path": "proposals/tags-on-existing-images.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODozNTozNFrOGFbzlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODozNTozNFrOGFbzlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1MTYzNg==", "bodyText": "We will have to see, but I feel like this step should return a manifest (as currently built in PushImageStep.makeList()) too, so that PushImageStep accepts the manifest. May need to create a \"struct\" class to contain manifest, imageDigest, and imageId. I think we can return imageDigest and imageId as separate fields instead of putting them into a BuildResult struct.\nBut I think these kinds of details can be sorted out when we actually work on a PR. I don't want too much bike-shedding in this proposal.", "url": "https://github.com/GoogleContainerTools/jib/pull/2387#discussion_r408351636", "createdAt": "2020-04-14T18:35:34Z", "author": {"login": "chanseokoh"}, "path": "proposals/tags-on-existing-images.md", "diffHunk": "@@ -0,0 +1,33 @@\n+# Proposal: Control the pushing of tags on existing images in target registry\n+\n+Relevant issues: [#2360](https://github.com/GoogleContainerTools/jib/issues/2360)\n+\n+## Motivation\n+Currently Jib pushes tags for all built images, irrelevant of whether the image is already \n+present on the target registry. \n+\n+As highlighted by @loosebazooka [#2360](https://github.com/GoogleContainerTools/jib/issues/2360) \n+this can be particularly annoying if some automated orchestrator is monitoring the registry\n+and releases any new tags found. This issue is especially prevalent in cases where the tags are\n+auto-generated by CI systems and added with every triggered build.\n+\n+## Proposal\n+The idea is to give the user the ability to control this functionality by means of a switch/option. \n+There might be use-cases where the current behaviour is preferable, eg, where the tags follow semantic \n+versioning, or where the tags are not automatically generated. Hence, adding a switch seems to be \n+a better solution rather than changing the current behaviour.\n+\n+## Proposed changes\n+A new system property is to be added to control this new behaviour:\n+`-Djib.skipExistingImages`\n+\n+A new step is created with the below signature:\n+`class CheckImageStep implements Callable<BuildResult>`, where its `call()` function performs a ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eaf43bc9b05540afe487039408c0bf6a26a9a4c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTE3NTM4OnYy", "diffSide": "RIGHT", "path": "proposals/tags-on-existing-images.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODozNzoyMFrOGFb3Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOToyNDoxMVrOGFdhFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1MjYxNA==", "bodyText": "I saw in your original PR you just used RegistryClient.pullManifest(). What's the reason you changed your mind to create a new ManifestChecker?", "url": "https://github.com/GoogleContainerTools/jib/pull/2387#discussion_r408352614", "createdAt": "2020-04-14T18:37:20Z", "author": {"login": "chanseokoh"}, "path": "proposals/tags-on-existing-images.md", "diffHunk": "@@ -0,0 +1,33 @@\n+# Proposal: Control the pushing of tags on existing images in target registry\n+\n+Relevant issues: [#2360](https://github.com/GoogleContainerTools/jib/issues/2360)\n+\n+## Motivation\n+Currently Jib pushes tags for all built images, irrelevant of whether the image is already \n+present on the target registry. \n+\n+As highlighted by @loosebazooka [#2360](https://github.com/GoogleContainerTools/jib/issues/2360) \n+this can be particularly annoying if some automated orchestrator is monitoring the registry\n+and releases any new tags found. This issue is especially prevalent in cases where the tags are\n+auto-generated by CI systems and added with every triggered build.\n+\n+## Proposal\n+The idea is to give the user the ability to control this functionality by means of a switch/option. \n+There might be use-cases where the current behaviour is preferable, eg, where the tags follow semantic \n+versioning, or where the tags are not automatically generated. Hence, adding a switch seems to be \n+a better solution rather than changing the current behaviour.\n+\n+## Proposed changes\n+A new system property is to be added to control this new behaviour:\n+`-Djib.skipExistingImages`\n+\n+A new step is created with the below signature:\n+`class CheckImageStep implements Callable<BuildResult>`, where its `call()` function performs a \n+call to the `RegistryClient`. This step is executed in the `StepsRunner.pushImages()` method, \n+before the `PushImageStep.makeList()` part, only if the `skipExistingImages` flag is set to true. \n+Depending on the `BuildResult` of this new step, the `PushImageStep` futures are then created (or not).\n+\n+The registry call used in `CheckImageStep` can be implemented in various ways. It is being \n+proposed that a new `checkManifest` function is added in `RegistryClient`. This should execute \n+a `ManifestChecker`, also a new class. The `ManifestChecker`'s `handleHttpResponseException` class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eaf43bc9b05540afe487039408c0bf6a26a9a4c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM3MTc2Nw==", "bodyText": "pullManifest throws an exception if the manifest does not exist. If used directly in the step, some exception handling would be needed. Anyone making the same check elsewhere would need to handle the same exception, possibly repeating code.\nThe ManifestChecker seems more inline with the current code structure, eg, checkBlob using BlobChecker. Alternatively if it seems like over engineered, the pullManifest can be used within the checkManifest in the RegistryClient, and exception handling is centralized in the RegistryClient. The latter was my original choice, however it seems much cleaner handling the exception within the handleHttpResponseException method rather than a singluar try-catch block.", "url": "https://github.com/GoogleContainerTools/jib/pull/2387#discussion_r408371767", "createdAt": "2020-04-14T19:10:02Z", "author": {"login": "karlmuscat"}, "path": "proposals/tags-on-existing-images.md", "diffHunk": "@@ -0,0 +1,33 @@\n+# Proposal: Control the pushing of tags on existing images in target registry\n+\n+Relevant issues: [#2360](https://github.com/GoogleContainerTools/jib/issues/2360)\n+\n+## Motivation\n+Currently Jib pushes tags for all built images, irrelevant of whether the image is already \n+present on the target registry. \n+\n+As highlighted by @loosebazooka [#2360](https://github.com/GoogleContainerTools/jib/issues/2360) \n+this can be particularly annoying if some automated orchestrator is monitoring the registry\n+and releases any new tags found. This issue is especially prevalent in cases where the tags are\n+auto-generated by CI systems and added with every triggered build.\n+\n+## Proposal\n+The idea is to give the user the ability to control this functionality by means of a switch/option. \n+There might be use-cases where the current behaviour is preferable, eg, where the tags follow semantic \n+versioning, or where the tags are not automatically generated. Hence, adding a switch seems to be \n+a better solution rather than changing the current behaviour.\n+\n+## Proposed changes\n+A new system property is to be added to control this new behaviour:\n+`-Djib.skipExistingImages`\n+\n+A new step is created with the below signature:\n+`class CheckImageStep implements Callable<BuildResult>`, where its `call()` function performs a \n+call to the `RegistryClient`. This step is executed in the `StepsRunner.pushImages()` method, \n+before the `PushImageStep.makeList()` part, only if the `skipExistingImages` flag is set to true. \n+Depending on the `BuildResult` of this new step, the `PushImageStep` futures are then created (or not).\n+\n+The registry call used in `CheckImageStep` can be implemented in various ways. It is being \n+proposed that a new `checkManifest` function is added in `RegistryClient`. This should execute \n+a `ManifestChecker`, also a new class. The `ManifestChecker`'s `handleHttpResponseException` class", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1MjYxNA=="}, "originalCommit": {"oid": "9eaf43bc9b05540afe487039408c0bf6a26a9a4c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM3OTY3MQ==", "bodyText": "Alright, let's go with ManfiestChecker. I looked at the pullManifest code, and now I think we do need a way to distinguish \"manifest not found\" from other errors.", "url": "https://github.com/GoogleContainerTools/jib/pull/2387#discussion_r408379671", "createdAt": "2020-04-14T19:24:11Z", "author": {"login": "chanseokoh"}, "path": "proposals/tags-on-existing-images.md", "diffHunk": "@@ -0,0 +1,33 @@\n+# Proposal: Control the pushing of tags on existing images in target registry\n+\n+Relevant issues: [#2360](https://github.com/GoogleContainerTools/jib/issues/2360)\n+\n+## Motivation\n+Currently Jib pushes tags for all built images, irrelevant of whether the image is already \n+present on the target registry. \n+\n+As highlighted by @loosebazooka [#2360](https://github.com/GoogleContainerTools/jib/issues/2360) \n+this can be particularly annoying if some automated orchestrator is monitoring the registry\n+and releases any new tags found. This issue is especially prevalent in cases where the tags are\n+auto-generated by CI systems and added with every triggered build.\n+\n+## Proposal\n+The idea is to give the user the ability to control this functionality by means of a switch/option. \n+There might be use-cases where the current behaviour is preferable, eg, where the tags follow semantic \n+versioning, or where the tags are not automatically generated. Hence, adding a switch seems to be \n+a better solution rather than changing the current behaviour.\n+\n+## Proposed changes\n+A new system property is to be added to control this new behaviour:\n+`-Djib.skipExistingImages`\n+\n+A new step is created with the below signature:\n+`class CheckImageStep implements Callable<BuildResult>`, where its `call()` function performs a \n+call to the `RegistryClient`. This step is executed in the `StepsRunner.pushImages()` method, \n+before the `PushImageStep.makeList()` part, only if the `skipExistingImages` flag is set to true. \n+Depending on the `BuildResult` of this new step, the `PushImageStep` futures are then created (or not).\n+\n+The registry call used in `CheckImageStep` can be implemented in various ways. It is being \n+proposed that a new `checkManifest` function is added in `RegistryClient`. This should execute \n+a `ManifestChecker`, also a new class. The `ManifestChecker`'s `handleHttpResponseException` class", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1MjYxNA=="}, "originalCommit": {"oid": "9eaf43bc9b05540afe487039408c0bf6a26a9a4c"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 355, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}