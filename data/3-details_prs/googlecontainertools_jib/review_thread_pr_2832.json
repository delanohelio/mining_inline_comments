{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NTQwMDUx", "number": 2832, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDoyNDo0MlrOEuirFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDo1NToxMVrOEujxLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MjM4MDM2OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/JibCliTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDoyNDo0MlrOHjBJCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDoyNDo0MlrOHjBJCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ4MDkwNQ==", "bodyText": "Debug code?", "url": "https://github.com/GoogleContainerTools/jib/pull/2832#discussion_r506480905", "createdAt": "2020-10-16T14:24:42Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/JibCliTest.java", "diffHunk": "@@ -271,43 +373,42 @@ public void testParse_passwordWithoutUsername() {\n   }\n \n   @RunWith(Parameterized.class)\n-  public static class UsernamePasswordNotAllowedWithToAndFrom {\n-    @Parameterized.Parameters(name = \"{0},{1}\")\n-    public static Collection<Object[]> data() {\n+  public static class IncompatibleCredentialCombos {\n+    @Parameterized.Parameters\n+    public static Collection<String[][]> data() {\n       return Arrays.asList(\n-          new Object[][] {\n-            {\"--to-username\", \"--to-password\"},\n-            {\"--from-username\", \"--from-password\"}\n+          new String[][][] {\n+            {{\"--credential-helper=x\", \"--to-credential-helper=x\"}},\n+            {{\"--credential-helper=x\", \"--from-credential-helper=x\"}},\n+            {{\"--credential-helper=x\", \"--username=x\", \"--password=x\"}},\n+            {{\"--credential-helper=x\", \"--from-username=x\", \"--from-password=x\"}},\n+            {{\"--credential-helper=x\", \"--to-username=x\", \"--to-password=x\"}},\n+            {{\"--username=x\", \"--password=x\", \"--from-username=x\", \"--from-password=x\"}},\n+            {{\"--username=x\", \"--password=x\", \"--to-username=x\", \"--to-password=x\"}},\n+            {{\"--username=x\", \"--password=x\", \"--to-credential-helper=x\"}},\n+            {{\"--username=x\", \"--password=x\", \"--from-credential-helper=x\"}},\n           });\n     }\n \n-    @Parameterized.Parameter(0)\n-    public String usernameField;\n-\n-    @Parameterized.Parameter(1)\n-    public String passwordField;\n+    @Parameterized.Parameter public String[] authArgs;\n+    private final String[] requiredArgs = new String[] {\"--target=ignored\"};\n \n     @Test\n     public void testParse_usernameWithoutPassword() {\n+      try {\n+        CommandLine.populateCommand(new JibCli(), ArrayUtils.addAll(requiredArgs, authArgs));\n+      } catch (CommandLine.MaxValuesExceededException error) {\n+        System.out.println(\"goose\");\n+      } catch (Exception ex) {\n+        // do nothing\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ab6b537f2dc141951c57edb4e67a39cd70e06f"}, "originalPosition": 306}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MjU1OTgxOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/JibCliTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDo1NToxMVrOHjC_xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDo1NToxMVrOHjC_xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUxMTMwMQ==", "bodyText": "how about this?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  assertThat(meae.getMessage()).startsWith(\"Error: \");\n          \n          \n            \n                  assertThat(meae).hasMessageThat().startsWith(\"Error:\");\n          \n      \n    \n    \n  \n\nMight produce a more readable error message.", "url": "https://github.com/GoogleContainerTools/jib/pull/2832#discussion_r506511301", "createdAt": "2020-10-16T14:55:11Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/JibCliTest.java", "diffHunk": "@@ -271,43 +373,42 @@ public void testParse_passwordWithoutUsername() {\n   }\n \n   @RunWith(Parameterized.class)\n-  public static class UsernamePasswordNotAllowedWithToAndFrom {\n-    @Parameterized.Parameters(name = \"{0},{1}\")\n-    public static Collection<Object[]> data() {\n+  public static class IncompatibleCredentialCombos {\n+    @Parameterized.Parameters\n+    public static Collection<String[][]> data() {\n       return Arrays.asList(\n-          new Object[][] {\n-            {\"--to-username\", \"--to-password\"},\n-            {\"--from-username\", \"--from-password\"}\n+          new String[][][] {\n+            {{\"--credential-helper=x\", \"--to-credential-helper=x\"}},\n+            {{\"--credential-helper=x\", \"--from-credential-helper=x\"}},\n+            {{\"--credential-helper=x\", \"--username=x\", \"--password=x\"}},\n+            {{\"--credential-helper=x\", \"--from-username=x\", \"--from-password=x\"}},\n+            {{\"--credential-helper=x\", \"--to-username=x\", \"--to-password=x\"}},\n+            {{\"--username=x\", \"--password=x\", \"--from-username=x\", \"--from-password=x\"}},\n+            {{\"--username=x\", \"--password=x\", \"--to-username=x\", \"--to-password=x\"}},\n+            {{\"--username=x\", \"--password=x\", \"--to-credential-helper=x\"}},\n+            {{\"--username=x\", \"--password=x\", \"--from-credential-helper=x\"}},\n           });\n     }\n \n-    @Parameterized.Parameter(0)\n-    public String usernameField;\n-\n-    @Parameterized.Parameter(1)\n-    public String passwordField;\n+    @Parameterized.Parameter public String[] authArgs;\n+    private final String[] requiredArgs = new String[] {\"--target=ignored\"};\n \n     @Test\n     public void testParse_usernameWithoutPassword() {\n+      try {\n+        CommandLine.populateCommand(new JibCli(), ArrayUtils.addAll(requiredArgs, authArgs));\n+      } catch (CommandLine.MaxValuesExceededException error) {\n+        System.out.println(\"goose\");\n+      } catch (Exception ex) {\n+        // do nothing\n+      }\n       MutuallyExclusiveArgsException meae =\n           assertThrows(\n               MutuallyExclusiveArgsException.class,\n               () ->\n                   CommandLine.populateCommand(\n-                      new JibCli(),\n-                      \"--target\",\n-                      \"test-image-ref\",\n-                      \"--username\",\n-                      \"test-username\",\n-                      \"--password\",\n-                      \"test-password\",\n-                      usernameField,\n-                      \"test-username\",\n-                      passwordField,\n-                      \"test-password\"));\n-      assertThat(meae.getMessage())\n-          .isEqualTo(\n-              \"Error: [--username=<username> --password[=<password>]] and [[--to-username=<username> --to-password[=<password>]] [--from-username=<username> --from-password[=<password>]]] are mutually exclusive (specify only one)\");\n+                      new JibCli(), ArrayUtils.addAll(requiredArgs, authArgs)));\n+      assertThat(meae.getMessage()).startsWith(\"Error: \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ab6b537f2dc141951c57edb4e67a39cd70e06f"}, "originalPosition": 327}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4968, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}