{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NjE5MzA2", "number": 2734, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMToyMDowNlrOEd5EpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyMjo0MlrOEqZF7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Nzc5MjM2OnYy", "diffSide": "RIGHT", "path": "jib-maven-plugin/src/test/resources/maven/projects/simple/pom-multiplatform-build.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMToyMDowNlrOHJUxHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMToyMDowNlrOHJUxHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzOTQ4NA==", "bodyText": "Probably we can remove the whole <container>.", "url": "https://github.com/GoogleContainerTools/jib/pull/2734#discussion_r479539484", "createdAt": "2020-08-28T21:20:06Z", "author": {"login": "chanseokoh"}, "path": "jib-maven-plugin/src/test/resources/maven/projects/simple/pom-multiplatform-build.xml", "diffHunk": "@@ -0,0 +1,77 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>com.test</groupId>\n+  <artifactId>my-artifact-id</artifactId>\n+  <version>1</version>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n+    <jib-maven-plugin.version>@@PluginVersion@@</jib-maven-plugin.version>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.test</groupId>\n+      <artifactId>dependency</artifactId>\n+      <version>1.0.0</version>\n+      <scope>system</scope>\n+      <systemPath>${project.basedir}/libs/dependency-1.0.0.jar</systemPath>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <version>3.8.0</version>\n+        <configuration>\n+          <source>1.8</source>\n+          <target>1.8</target>\n+        </configuration>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>com.google.cloud.tools</groupId>\n+        <artifactId>jib-maven-plugin</artifactId>\n+        <version>${jib-maven-plugin.version}</version>\n+        <configuration>\n+           <from>\n+        <image>busybox</image>\n+\t  <platforms>\n+\t    <platform>\n+\t       <architecture>arm64</architecture>\n+\t       <os>linux</os>\n+\t    </platform>\n+\t    <platform>\n+\t       <architecture>amd64</architecture>\n+\t       <os>linux</os>\n+\t    </platform>\n+\t   </platforms>\n+          </from> \n+          <to>\n+            <image>${_TARGET_IMAGE}</image>\n+             <tags>\n+              <tag>latest</tag>\n+            </tags>\n+          </to>\n+          <container>\n+            <args>An argument.</args>\n+            <ports>\n+              <port>1000/tcp</port>\n+              <port>2000-2003/udp</port>\n+            </ports>\n+            <labels>\n+              <key1>value1</key1>\n+              <key2>value2</key2>\n+            </labels>\n+          </container>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff543019d19efd79e8014d8a69df5d8b467ce06"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Nzc5NTgwOnYy", "diffSide": "RIGHT", "path": "jib-maven-plugin/src/test/resources/maven/projects/simple/pom-multiplatform-build.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMToyMToyN1rOHJUzIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMToyMToyN1rOHJUzIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0MDAwMw==", "bodyText": "Oh, how about also testing multiple tags?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          <tag>latest</tag>\n          \n          \n            \n                          <tag>latest</tag>\n          \n          \n            \n                          <tag>another</tag>\n          \n      \n    \n    \n  \n\nYou can then make two pullManifest() calls and compare them they are identical.", "url": "https://github.com/GoogleContainerTools/jib/pull/2734#discussion_r479540003", "createdAt": "2020-08-28T21:21:27Z", "author": {"login": "chanseokoh"}, "path": "jib-maven-plugin/src/test/resources/maven/projects/simple/pom-multiplatform-build.xml", "diffHunk": "@@ -0,0 +1,77 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>com.test</groupId>\n+  <artifactId>my-artifact-id</artifactId>\n+  <version>1</version>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n+    <jib-maven-plugin.version>@@PluginVersion@@</jib-maven-plugin.version>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.test</groupId>\n+      <artifactId>dependency</artifactId>\n+      <version>1.0.0</version>\n+      <scope>system</scope>\n+      <systemPath>${project.basedir}/libs/dependency-1.0.0.jar</systemPath>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <version>3.8.0</version>\n+        <configuration>\n+          <source>1.8</source>\n+          <target>1.8</target>\n+        </configuration>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>com.google.cloud.tools</groupId>\n+        <artifactId>jib-maven-plugin</artifactId>\n+        <version>${jib-maven-plugin.version}</version>\n+        <configuration>\n+           <from>\n+        <image>busybox</image>\n+\t  <platforms>\n+\t    <platform>\n+\t       <architecture>arm64</architecture>\n+\t       <os>linux</os>\n+\t    </platform>\n+\t    <platform>\n+\t       <architecture>amd64</architecture>\n+\t       <os>linux</os>\n+\t    </platform>\n+\t   </platforms>\n+          </from> \n+          <to>\n+            <image>${_TARGET_IMAGE}</image>\n+             <tags>\n+              <tag>latest</tag>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff543019d19efd79e8014d8a69df5d8b467ce06"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzgwMzcyOnYy", "diffSide": "RIGHT", "path": "jib-maven-plugin/src/test/resources/maven/projects/simple/pom-multiplatform-build.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMToyNDo1OFrOHJU34A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMToyNDo1OFrOHJU34A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0MTIxNg==", "bodyText": "busybox@sha256:4f47c01fa91355af2865ac10fef5bf6ec9c7f42ad2321377c21e844427972977\nThis is the digest of the current manifest list I see today.", "url": "https://github.com/GoogleContainerTools/jib/pull/2734#discussion_r479541216", "createdAt": "2020-08-28T21:24:58Z", "author": {"login": "chanseokoh"}, "path": "jib-maven-plugin/src/test/resources/maven/projects/simple/pom-multiplatform-build.xml", "diffHunk": "@@ -0,0 +1,77 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>com.test</groupId>\n+  <artifactId>my-artifact-id</artifactId>\n+  <version>1</version>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n+    <jib-maven-plugin.version>@@PluginVersion@@</jib-maven-plugin.version>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.test</groupId>\n+      <artifactId>dependency</artifactId>\n+      <version>1.0.0</version>\n+      <scope>system</scope>\n+      <systemPath>${project.basedir}/libs/dependency-1.0.0.jar</systemPath>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <version>3.8.0</version>\n+        <configuration>\n+          <source>1.8</source>\n+          <target>1.8</target>\n+        </configuration>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>com.google.cloud.tools</groupId>\n+        <artifactId>jib-maven-plugin</artifactId>\n+        <version>${jib-maven-plugin.version}</version>\n+        <configuration>\n+           <from>\n+        <image>busybox</image>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff543019d19efd79e8014d8a69df5d8b467ce06"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDAwNDU1OnYy", "diffSide": "RIGHT", "path": "jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOTo0MDozM1rOHb5hpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTo0MDozOVrOHci4sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxNjEwMA==", "bodyText": "maybe we can store this in a variable?", "url": "https://github.com/GoogleContainerTools/jib/pull/2734#discussion_r499016100", "createdAt": "2020-10-02T19:40:33Z", "author": {"login": "mpeddada1"}, "path": "jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java", "diffHunk": "@@ -686,6 +695,85 @@ public void testExecute_springBootPackaged()\n     HttpGetVerifier.verifyBody(\"Hello world\", new URL(\"http://localhost:8080\"));\n   }\n \n+  @Test\n+  public void testExecute_multiPlatformBuild()\n+      throws IOException, VerificationException, RegistryException {\n+    String targetImage = \"localhost:5000/multiplatform:maven\" + System.nanoTime();\n+\n+    Verifier verifier = new Verifier(simpleTestProject.getProjectRoot().toString());\n+    verifier.setSystemProperty(\"_TARGET_IMAGE\", targetImage);\n+\n+    verifier.setSystemProperty(\"jib.to.auth.username\", \"testuser\");\n+    verifier.setSystemProperty(\"jib.to.auth.password\", \"testpassword\");\n+    verifier.setSystemProperty(\"sendCredentialsOverHttp\", \"true\");\n+    verifier.setSystemProperty(\"jib.allowInsecureRegistries\", \"true\");\n+\n+    verifier.setAutoclean(false);\n+    verifier.addCliOption(\"-X\");\n+    verifier.addCliOption(\"--file=pom-multiplatform-build.xml\");\n+    verifier.executeGoals(Arrays.asList(\"clean\", \"compile\", \"jib:build\"));\n+    verifier.verifyErrorFreeLog();\n+\n+    FailoverHttpClient httpClient = new FailoverHttpClient(true, true, ignored -> {});\n+    RegistryClient registryClient =\n+        RegistryClient.factory(EventHandlers.NONE, \"localhost:5000\", \"multiplatform\", httpClient)\n+            .setCredential(Credential.from(\"testuser\", \"testpassword\"))\n+            .newRegistryClient();\n+    registryClient.configureBasicAuth();\n+\n+    // manifest list by tag \":latest\"\n+    ManifestTemplate manifestListTemplate = registryClient.pullManifest(\"latest\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList = (V22ManifestListTemplate) manifestListTemplate;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // manifest list by tag \":another\"\n+    ManifestTemplate manifestListTemplate2 = registryClient.pullManifest(\"another\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate2, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList2 = (V22ManifestListTemplate) manifestListTemplate2;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList2.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList2.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // arm64/linux manifest\n+    ManifestAndDigest<ManifestTemplate> manifestAndDigest1 =\n+        registryClient.pullManifest(\n+            \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b6e1eb6d2c1cda552e490a68ee3993a724db18"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5Mzc0Ng==", "bodyText": "Not always, but we usually don't create a variable for constants in tests.", "url": "https://github.com/GoogleContainerTools/jib/pull/2734#discussion_r499693746", "createdAt": "2020-10-05T15:40:39Z", "author": {"login": "chanseokoh"}, "path": "jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java", "diffHunk": "@@ -686,6 +695,85 @@ public void testExecute_springBootPackaged()\n     HttpGetVerifier.verifyBody(\"Hello world\", new URL(\"http://localhost:8080\"));\n   }\n \n+  @Test\n+  public void testExecute_multiPlatformBuild()\n+      throws IOException, VerificationException, RegistryException {\n+    String targetImage = \"localhost:5000/multiplatform:maven\" + System.nanoTime();\n+\n+    Verifier verifier = new Verifier(simpleTestProject.getProjectRoot().toString());\n+    verifier.setSystemProperty(\"_TARGET_IMAGE\", targetImage);\n+\n+    verifier.setSystemProperty(\"jib.to.auth.username\", \"testuser\");\n+    verifier.setSystemProperty(\"jib.to.auth.password\", \"testpassword\");\n+    verifier.setSystemProperty(\"sendCredentialsOverHttp\", \"true\");\n+    verifier.setSystemProperty(\"jib.allowInsecureRegistries\", \"true\");\n+\n+    verifier.setAutoclean(false);\n+    verifier.addCliOption(\"-X\");\n+    verifier.addCliOption(\"--file=pom-multiplatform-build.xml\");\n+    verifier.executeGoals(Arrays.asList(\"clean\", \"compile\", \"jib:build\"));\n+    verifier.verifyErrorFreeLog();\n+\n+    FailoverHttpClient httpClient = new FailoverHttpClient(true, true, ignored -> {});\n+    RegistryClient registryClient =\n+        RegistryClient.factory(EventHandlers.NONE, \"localhost:5000\", \"multiplatform\", httpClient)\n+            .setCredential(Credential.from(\"testuser\", \"testpassword\"))\n+            .newRegistryClient();\n+    registryClient.configureBasicAuth();\n+\n+    // manifest list by tag \":latest\"\n+    ManifestTemplate manifestListTemplate = registryClient.pullManifest(\"latest\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList = (V22ManifestListTemplate) manifestListTemplate;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // manifest list by tag \":another\"\n+    ManifestTemplate manifestListTemplate2 = registryClient.pullManifest(\"another\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate2, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList2 = (V22ManifestListTemplate) manifestListTemplate2;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList2.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList2.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // arm64/linux manifest\n+    ManifestAndDigest<ManifestTemplate> manifestAndDigest1 =\n+        registryClient.pullManifest(\n+            \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxNjEwMA=="}, "originalCommit": {"oid": "89b6e1eb6d2c1cda552e490a68ee3993a724db18"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDAxNjQ3OnYy", "diffSide": "RIGHT", "path": "jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOTo0NToxNFrOHb5pHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOTo0NToxNFrOHb5pHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxODAxNQ==", "bodyText": "Can we move line 755 to be below line 749? To make the assert blocks be separate from the initialization code.", "url": "https://github.com/GoogleContainerTools/jib/pull/2734#discussion_r499018015", "createdAt": "2020-10-02T19:45:14Z", "author": {"login": "mpeddada1"}, "path": "jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java", "diffHunk": "@@ -686,6 +695,85 @@ public void testExecute_springBootPackaged()\n     HttpGetVerifier.verifyBody(\"Hello world\", new URL(\"http://localhost:8080\"));\n   }\n \n+  @Test\n+  public void testExecute_multiPlatformBuild()\n+      throws IOException, VerificationException, RegistryException {\n+    String targetImage = \"localhost:5000/multiplatform:maven\" + System.nanoTime();\n+\n+    Verifier verifier = new Verifier(simpleTestProject.getProjectRoot().toString());\n+    verifier.setSystemProperty(\"_TARGET_IMAGE\", targetImage);\n+\n+    verifier.setSystemProperty(\"jib.to.auth.username\", \"testuser\");\n+    verifier.setSystemProperty(\"jib.to.auth.password\", \"testpassword\");\n+    verifier.setSystemProperty(\"sendCredentialsOverHttp\", \"true\");\n+    verifier.setSystemProperty(\"jib.allowInsecureRegistries\", \"true\");\n+\n+    verifier.setAutoclean(false);\n+    verifier.addCliOption(\"-X\");\n+    verifier.addCliOption(\"--file=pom-multiplatform-build.xml\");\n+    verifier.executeGoals(Arrays.asList(\"clean\", \"compile\", \"jib:build\"));\n+    verifier.verifyErrorFreeLog();\n+\n+    FailoverHttpClient httpClient = new FailoverHttpClient(true, true, ignored -> {});\n+    RegistryClient registryClient =\n+        RegistryClient.factory(EventHandlers.NONE, \"localhost:5000\", \"multiplatform\", httpClient)\n+            .setCredential(Credential.from(\"testuser\", \"testpassword\"))\n+            .newRegistryClient();\n+    registryClient.configureBasicAuth();\n+\n+    // manifest list by tag \":latest\"\n+    ManifestTemplate manifestListTemplate = registryClient.pullManifest(\"latest\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList = (V22ManifestListTemplate) manifestListTemplate;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // manifest list by tag \":another\"\n+    ManifestTemplate manifestListTemplate2 = registryClient.pullManifest(\"another\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate2, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList2 = (V22ManifestListTemplate) manifestListTemplate2;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList2.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList2.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // arm64/linux manifest\n+    ManifestAndDigest<ManifestTemplate> manifestAndDigest1 =\n+        registryClient.pullManifest(\n+            \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\");\n+    Assert.assertEquals(\n+        \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\",\n+        manifestAndDigest1.getDigest().toString());\n+    ManifestTemplate manifestTemplate1 = manifestAndDigest1.getManifest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b6e1eb6d2c1cda552e490a68ee3993a724db18"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDAxOTc0OnYy", "diffSide": "RIGHT", "path": "jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOTo0NjoyN1rOHb5rNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOTo0NjoyN1rOHb5rNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxODU0OQ==", "bodyText": "maybe have a variable for this as well.", "url": "https://github.com/GoogleContainerTools/jib/pull/2734#discussion_r499018549", "createdAt": "2020-10-02T19:46:27Z", "author": {"login": "mpeddada1"}, "path": "jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java", "diffHunk": "@@ -686,6 +695,85 @@ public void testExecute_springBootPackaged()\n     HttpGetVerifier.verifyBody(\"Hello world\", new URL(\"http://localhost:8080\"));\n   }\n \n+  @Test\n+  public void testExecute_multiPlatformBuild()\n+      throws IOException, VerificationException, RegistryException {\n+    String targetImage = \"localhost:5000/multiplatform:maven\" + System.nanoTime();\n+\n+    Verifier verifier = new Verifier(simpleTestProject.getProjectRoot().toString());\n+    verifier.setSystemProperty(\"_TARGET_IMAGE\", targetImage);\n+\n+    verifier.setSystemProperty(\"jib.to.auth.username\", \"testuser\");\n+    verifier.setSystemProperty(\"jib.to.auth.password\", \"testpassword\");\n+    verifier.setSystemProperty(\"sendCredentialsOverHttp\", \"true\");\n+    verifier.setSystemProperty(\"jib.allowInsecureRegistries\", \"true\");\n+\n+    verifier.setAutoclean(false);\n+    verifier.addCliOption(\"-X\");\n+    verifier.addCliOption(\"--file=pom-multiplatform-build.xml\");\n+    verifier.executeGoals(Arrays.asList(\"clean\", \"compile\", \"jib:build\"));\n+    verifier.verifyErrorFreeLog();\n+\n+    FailoverHttpClient httpClient = new FailoverHttpClient(true, true, ignored -> {});\n+    RegistryClient registryClient =\n+        RegistryClient.factory(EventHandlers.NONE, \"localhost:5000\", \"multiplatform\", httpClient)\n+            .setCredential(Credential.from(\"testuser\", \"testpassword\"))\n+            .newRegistryClient();\n+    registryClient.configureBasicAuth();\n+\n+    // manifest list by tag \":latest\"\n+    ManifestTemplate manifestListTemplate = registryClient.pullManifest(\"latest\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList = (V22ManifestListTemplate) manifestListTemplate;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // manifest list by tag \":another\"\n+    ManifestTemplate manifestListTemplate2 = registryClient.pullManifest(\"another\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate2, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList2 = (V22ManifestListTemplate) manifestListTemplate2;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList2.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList2.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // arm64/linux manifest\n+    ManifestAndDigest<ManifestTemplate> manifestAndDigest1 =\n+        registryClient.pullManifest(\n+            \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\");\n+    Assert.assertEquals(\n+        \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\",\n+        manifestAndDigest1.getDigest().toString());\n+    ManifestTemplate manifestTemplate1 = manifestAndDigest1.getManifest();\n+    MatcherAssert.assertThat(manifestTemplate1, CoreMatchers.instanceOf(V22ManifestTemplate.class));\n+    V22ManifestTemplate manifest1 = (V22ManifestTemplate) manifestTemplate1;\n+    Assert.assertEquals(\n+        \"sha256:cecb4d0f179207a1c7f2ee33819d4fb70bbb9d98eebe78dfe1b439896925dc27\",\n+        manifest1.getContainerConfiguration().getDigest().toString());\n+\n+    // amd64/linux manifest\n+    ManifestAndDigest<ManifestTemplate> manifestAndDigest2 =\n+        registryClient.pullManifest(\n+            \"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b6e1eb6d2c1cda552e490a68ee3993a724db18"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDAyMjMyOnYy", "diffSide": "RIGHT", "path": "jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOTo0NzoyOVrOHb5s6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOTo0NzoyOVrOHb5s6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxODk4Ng==", "bodyText": "same here, we could move this to be below line 765?", "url": "https://github.com/GoogleContainerTools/jib/pull/2734#discussion_r499018986", "createdAt": "2020-10-02T19:47:29Z", "author": {"login": "mpeddada1"}, "path": "jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java", "diffHunk": "@@ -686,6 +695,85 @@ public void testExecute_springBootPackaged()\n     HttpGetVerifier.verifyBody(\"Hello world\", new URL(\"http://localhost:8080\"));\n   }\n \n+  @Test\n+  public void testExecute_multiPlatformBuild()\n+      throws IOException, VerificationException, RegistryException {\n+    String targetImage = \"localhost:5000/multiplatform:maven\" + System.nanoTime();\n+\n+    Verifier verifier = new Verifier(simpleTestProject.getProjectRoot().toString());\n+    verifier.setSystemProperty(\"_TARGET_IMAGE\", targetImage);\n+\n+    verifier.setSystemProperty(\"jib.to.auth.username\", \"testuser\");\n+    verifier.setSystemProperty(\"jib.to.auth.password\", \"testpassword\");\n+    verifier.setSystemProperty(\"sendCredentialsOverHttp\", \"true\");\n+    verifier.setSystemProperty(\"jib.allowInsecureRegistries\", \"true\");\n+\n+    verifier.setAutoclean(false);\n+    verifier.addCliOption(\"-X\");\n+    verifier.addCliOption(\"--file=pom-multiplatform-build.xml\");\n+    verifier.executeGoals(Arrays.asList(\"clean\", \"compile\", \"jib:build\"));\n+    verifier.verifyErrorFreeLog();\n+\n+    FailoverHttpClient httpClient = new FailoverHttpClient(true, true, ignored -> {});\n+    RegistryClient registryClient =\n+        RegistryClient.factory(EventHandlers.NONE, \"localhost:5000\", \"multiplatform\", httpClient)\n+            .setCredential(Credential.from(\"testuser\", \"testpassword\"))\n+            .newRegistryClient();\n+    registryClient.configureBasicAuth();\n+\n+    // manifest list by tag \":latest\"\n+    ManifestTemplate manifestListTemplate = registryClient.pullManifest(\"latest\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList = (V22ManifestListTemplate) manifestListTemplate;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // manifest list by tag \":another\"\n+    ManifestTemplate manifestListTemplate2 = registryClient.pullManifest(\"another\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate2, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList2 = (V22ManifestListTemplate) manifestListTemplate2;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList2.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList2.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // arm64/linux manifest\n+    ManifestAndDigest<ManifestTemplate> manifestAndDigest1 =\n+        registryClient.pullManifest(\n+            \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\");\n+    Assert.assertEquals(\n+        \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\",\n+        manifestAndDigest1.getDigest().toString());\n+    ManifestTemplate manifestTemplate1 = manifestAndDigest1.getManifest();\n+    MatcherAssert.assertThat(manifestTemplate1, CoreMatchers.instanceOf(V22ManifestTemplate.class));\n+    V22ManifestTemplate manifest1 = (V22ManifestTemplate) manifestTemplate1;\n+    Assert.assertEquals(\n+        \"sha256:cecb4d0f179207a1c7f2ee33819d4fb70bbb9d98eebe78dfe1b439896925dc27\",\n+        manifest1.getContainerConfiguration().getDigest().toString());\n+\n+    // amd64/linux manifest\n+    ManifestAndDigest<ManifestTemplate> manifestAndDigest2 =\n+        registryClient.pullManifest(\n+            \"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\");\n+    Assert.assertEquals(\n+        \"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\",\n+        manifestAndDigest2.getDigest().toString());\n+    ManifestTemplate manifestTemplate2 = manifestAndDigest2.getManifest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b6e1eb6d2c1cda552e490a68ee3993a724db18"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODg2NzY2OnYy", "diffSide": "RIGHT", "path": "jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyMjo0MlrOHckkhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyNDo1NlrOHckpew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMTM1MQ==", "bodyText": "Sorry, can we move this up to line 753. Similar to what we do in line 737-> line 740. Same below.", "url": "https://github.com/GoogleContainerTools/jib/pull/2734#discussion_r499721351", "createdAt": "2020-10-05T16:22:42Z", "author": {"login": "mpeddada1"}, "path": "jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java", "diffHunk": "@@ -686,6 +695,85 @@ public void testExecute_springBootPackaged()\n     HttpGetVerifier.verifyBody(\"Hello world\", new URL(\"http://localhost:8080\"));\n   }\n \n+  @Test\n+  public void testExecute_multiPlatformBuild()\n+      throws IOException, VerificationException, RegistryException {\n+    String targetImage = \"localhost:5000/multiplatform:maven\" + System.nanoTime();\n+\n+    Verifier verifier = new Verifier(simpleTestProject.getProjectRoot().toString());\n+    verifier.setSystemProperty(\"_TARGET_IMAGE\", targetImage);\n+\n+    verifier.setSystemProperty(\"jib.to.auth.username\", \"testuser\");\n+    verifier.setSystemProperty(\"jib.to.auth.password\", \"testpassword\");\n+    verifier.setSystemProperty(\"sendCredentialsOverHttp\", \"true\");\n+    verifier.setSystemProperty(\"jib.allowInsecureRegistries\", \"true\");\n+\n+    verifier.setAutoclean(false);\n+    verifier.addCliOption(\"-X\");\n+    verifier.addCliOption(\"--file=pom-multiplatform-build.xml\");\n+    verifier.executeGoals(Arrays.asList(\"clean\", \"compile\", \"jib:build\"));\n+    verifier.verifyErrorFreeLog();\n+\n+    FailoverHttpClient httpClient = new FailoverHttpClient(true, true, ignored -> {});\n+    RegistryClient registryClient =\n+        RegistryClient.factory(EventHandlers.NONE, \"localhost:5000\", \"multiplatform\", httpClient)\n+            .setCredential(Credential.from(\"testuser\", \"testpassword\"))\n+            .newRegistryClient();\n+    registryClient.configureBasicAuth();\n+\n+    // manifest list by tag \":latest\"\n+    ManifestTemplate manifestListTemplate = registryClient.pullManifest(\"latest\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList = (V22ManifestListTemplate) manifestListTemplate;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // manifest list by tag \":another\"\n+    ManifestTemplate manifestListTemplate2 = registryClient.pullManifest(\"another\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate2, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList2 = (V22ManifestListTemplate) manifestListTemplate2;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList2.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList2.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // arm64/linux manifest\n+    ManifestAndDigest<ManifestTemplate> manifestAndDigest1 =\n+        registryClient.pullManifest(\n+            \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\");\n+    ManifestTemplate manifestTemplate1 = manifestAndDigest1.getManifest();\n+    Assert.assertEquals(\n+        \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\",\n+        manifestAndDigest1.getDigest().toString());\n+    MatcherAssert.assertThat(manifestTemplate1, CoreMatchers.instanceOf(V22ManifestTemplate.class));\n+    V22ManifestTemplate manifest1 = (V22ManifestTemplate) manifestTemplate1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef63089e17592026a74d37eaeb5f956b3161829c"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMjYxOQ==", "bodyText": "The cast should come below the assertion in line 756. The assertion is to ensure that the template is of type V22ManifestTemplate before attempting casting.", "url": "https://github.com/GoogleContainerTools/jib/pull/2734#discussion_r499722619", "createdAt": "2020-10-05T16:24:56Z", "author": {"login": "chanseokoh"}, "path": "jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java", "diffHunk": "@@ -686,6 +695,85 @@ public void testExecute_springBootPackaged()\n     HttpGetVerifier.verifyBody(\"Hello world\", new URL(\"http://localhost:8080\"));\n   }\n \n+  @Test\n+  public void testExecute_multiPlatformBuild()\n+      throws IOException, VerificationException, RegistryException {\n+    String targetImage = \"localhost:5000/multiplatform:maven\" + System.nanoTime();\n+\n+    Verifier verifier = new Verifier(simpleTestProject.getProjectRoot().toString());\n+    verifier.setSystemProperty(\"_TARGET_IMAGE\", targetImage);\n+\n+    verifier.setSystemProperty(\"jib.to.auth.username\", \"testuser\");\n+    verifier.setSystemProperty(\"jib.to.auth.password\", \"testpassword\");\n+    verifier.setSystemProperty(\"sendCredentialsOverHttp\", \"true\");\n+    verifier.setSystemProperty(\"jib.allowInsecureRegistries\", \"true\");\n+\n+    verifier.setAutoclean(false);\n+    verifier.addCliOption(\"-X\");\n+    verifier.addCliOption(\"--file=pom-multiplatform-build.xml\");\n+    verifier.executeGoals(Arrays.asList(\"clean\", \"compile\", \"jib:build\"));\n+    verifier.verifyErrorFreeLog();\n+\n+    FailoverHttpClient httpClient = new FailoverHttpClient(true, true, ignored -> {});\n+    RegistryClient registryClient =\n+        RegistryClient.factory(EventHandlers.NONE, \"localhost:5000\", \"multiplatform\", httpClient)\n+            .setCredential(Credential.from(\"testuser\", \"testpassword\"))\n+            .newRegistryClient();\n+    registryClient.configureBasicAuth();\n+\n+    // manifest list by tag \":latest\"\n+    ManifestTemplate manifestListTemplate = registryClient.pullManifest(\"latest\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList = (V22ManifestListTemplate) manifestListTemplate;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // manifest list by tag \":another\"\n+    ManifestTemplate manifestListTemplate2 = registryClient.pullManifest(\"another\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate2, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList2 = (V22ManifestListTemplate) manifestListTemplate2;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList2.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList2.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // arm64/linux manifest\n+    ManifestAndDigest<ManifestTemplate> manifestAndDigest1 =\n+        registryClient.pullManifest(\n+            \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\");\n+    ManifestTemplate manifestTemplate1 = manifestAndDigest1.getManifest();\n+    Assert.assertEquals(\n+        \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\",\n+        manifestAndDigest1.getDigest().toString());\n+    MatcherAssert.assertThat(manifestTemplate1, CoreMatchers.instanceOf(V22ManifestTemplate.class));\n+    V22ManifestTemplate manifest1 = (V22ManifestTemplate) manifestTemplate1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMTM1MQ=="}, "originalCommit": {"oid": "ef63089e17592026a74d37eaeb5f956b3161829c"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 163, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}