{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3ODMxODk2", "number": 2888, "title": "Implement packaged mode for standard jar.", "bodyText": "Implementation of #2846\nAdds cli option to set the processing mode, implements packaged mode and adds integration testing. \"Exploded\" mode is set as the default.\nRequires #2885.", "createdAt": "2020-11-09T15:11:12Z", "url": "https://github.com/GoogleContainerTools/jib/pull/2888", "merged": true, "mergeCommit": {"oid": "8d34a28a156894867c6fdd8416a9f03cdf04d863"}, "closed": true, "closedAt": "2020-11-19T18:12:52Z", "author": {"login": "mpeddada1"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZlUMOgH2gAyNTE3ODMxODk2OjgwMTIzZGM4NTg3NTQ1ZDM1MGY3ZWUwNDFiYTIyNzc2MWQ5ZjZhMWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeE19HgH2gAyNTE3ODMxODk2OjBmMjE2YTY3NDk5YTRlNjljM2RhY2QwNDM0ZDNmYzMzYjQ1ZDFhODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "80123dc8587545d350f7ee041ba227761d9f6a1a", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/80123dc8587545d350f7ee041ba227761d9f6a1a", "committedDate": "2020-11-05T16:53:53Z", "message": "Add integration testing for jib cli jar command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4ebcb7466c8acf24fa1f1394fe1e253200e032a", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/f4ebcb7466c8acf24fa1f1394fe1e253200e032a", "committedDate": "2020-11-05T19:07:46Z", "message": "formatting and call method to terminate executor service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a71454d49f07524c5fb6d03567f992ad602b96c", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/2a71454d49f07524c5fb6d03567f992ad602b96c", "committedDate": "2020-11-05T19:20:09Z", "message": "modify javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0c3c361f4dba7d91de5581f459562878cbe1b0e", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/d0c3c361f4dba7d91de5581f459562878cbe1b0e", "committedDate": "2020-11-05T19:22:46Z", "message": "modify test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bb2202235832c9772975c822a83bb6063ac354b", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/2bb2202235832c9772975c822a83bb6063ac354b", "committedDate": "2020-11-05T20:59:02Z", "message": "renaming variable in test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac17e8f382f51ca65f3aa0860b23d94621969497", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/ac17e8f382f51ca65f3aa0860b23d94621969497", "committedDate": "2020-11-06T02:02:00Z", "message": "Merge branch 'master' of github.com:GoogleContainerTools/jib into jar-integration-test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a102c1db8902da4d709f6604c7068a95c631fb7f", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/a102c1db8902da4d709f6604c7068a95c631fb7f", "committedDate": "2020-11-06T02:06:49Z", "message": "packaged mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd2ac6a7e17bd2fb6c50ebcdf5f77a01edb1f940", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/cd2ac6a7e17bd2fb6c50ebcdf5f77a01edb1f940", "committedDate": "2020-11-06T23:28:01Z", "message": "make tests use PrintWriter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a3048a995d5b07c813cdc36ae1a49c19f1e0976", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/1a3048a995d5b07c813cdc36ae1a49c19f1e0976", "committedDate": "2020-11-09T14:56:38Z", "message": "Add packaged mode for standard jar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69b83434a9e2ac7bf056d0b894ad4872f22cead0", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/69b83434a9e2ac7bf056d0b894ad4872f22cead0", "committedDate": "2020-11-09T15:03:15Z", "message": "fixing method name and commenting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8636a53246532d266a759cfebeaf90483ae1afe3", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/8636a53246532d266a759cfebeaf90483ae1afe3", "committedDate": "2020-11-09T15:12:42Z", "message": "Merge branch 'jar-integration-test' of github.com:GoogleContainerTools/jib into packaged-mode-jar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd02ab2d1252337fc1e7cee5f19b8f07f3bd71f7", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/bd02ab2d1252337fc1e7cee5f19b8f07f3bd71f7", "committedDate": "2020-11-09T16:32:12Z", "message": "cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDE3MzEz", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#pullrequestreview-526417313", "createdAt": "2020-11-09T16:14:53Z", "commit": {"oid": "8636a53246532d266a759cfebeaf90483ae1afe3"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjoxNDo1M1rOHv2RQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjozNzoxNFrOHv3Qgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzNDI3Mw==", "bodyText": "I think this will be what the user will see on the command-line with the help usage. Should include what values are available.\nThat said, take a look at the --vebosity and --console options.\n  @Option(\n      names = \"--verbosity\",\n      paramLabel = \"<level>\",\n      defaultValue = \"lifecycle\",\n      description =\n          \"set logging verbosity, candidates: ${COMPLETION-CANDIDATES}, default: ${DEFAULT-VALUE}\")\n  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n  private Verbosity verbosity;\n\n  @Option(\n      names = \"--console\",\n      paramLabel = \"<type>\",\n      defaultValue = \"auto\",\n      description =\n          \"set console output type, candidates: ${COMPLETION-CANDIDATES}, default: ${DEFAULT-VALUE}\")\n  @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n  private ConsoleOutput consoleOutput;", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r519934273", "createdAt": "2020-11-09T16:14:53Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "diffHunk": "@@ -43,6 +44,14 @@\n   @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n   private Path jarFile;\n \n+  @CommandLine.Option(\n+      names = \"--mode\",\n+      defaultValue = \"exploded\",\n+      paramLabel = \"<mode>\",\n+      description = \"The processing mode\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8636a53246532d266a759cfebeaf90483ae1afe3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk0Mjc0MQ==", "bodyText": "I missed this. jib jar will fail if running from a different directory (e.g., jib ... jar ../my.jar). Perhaps the first argument to addEntry should be jarPath.resolve(path)?", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r519942741", "createdAt": "2020-11-09T16:26:22Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -191,4 +208,47 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n             });\n     return builder.build();\n   }\n+\n+  private static List<FileEntriesLayer> getDependenciesLayers(Path jarPath) throws IOException {\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    String classPath = null;\n+\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n+    // and snapshot dependencies. If Class-Path is not present in the jar's manifest then skip\n+    // adding the dependencies layers.\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+    }\n+    if (classPath != null) {\n+      Predicate<String> isSnapshot = name -> name.contains(\"SNAPSHOT\");\n+      List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n+      List<Path> nonSnapshotDependencies =\n+          allDependencies\n+              .stream()\n+              .filter(isSnapshot.negate())\n+              .map(Paths::get)\n+              .collect(Collectors.toList());\n+      List<Path> snapshotDependencies =\n+          allDependencies.stream().filter(isSnapshot).map(Paths::get).collect(Collectors.toList());\n+      if (!nonSnapshotDependencies.isEmpty()) {\n+        FileEntriesLayer.Builder nonSnapshotDependenciesLayerBuilder =\n+            FileEntriesLayer.builder().setName(DEPENDENCIES);\n+        nonSnapshotDependencies.forEach(\n+            path ->\n+                nonSnapshotDependenciesLayerBuilder.addEntry(\n+                    path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8636a53246532d266a759cfebeaf90483ae1afe3"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk0NjcxMA==", "bodyText": "In this case, I think it's fine to have\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                layers.addAll(getDependenciesLayers(jarPath));\n          \n          \n            \n                List<FileEntriesLayer> layers = getDependenciesLayers(jarPath);", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r519946710", "createdAt": "2020-11-09T16:31:50Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -86,47 +87,13 @@ static JarType determineJarType(Path jarPath) throws IOException {\n    */\n   static List<FileEntriesLayer> createExplodedModeLayersForStandardJar(\n       Path jarPath, Path tempDirPath) throws IOException {\n-    Path localExplodedJarRoot = tempDirPath;\n-    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n     List<FileEntriesLayer> layers = new ArrayList<>();\n \n-    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n-    // and snapshot dependencies. If Class-Path is not present in the jar's manifest then skip\n-    // adding the dependencies layers.\n-    String classPath = null;\n-    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n-      classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n-    }\n-    if (classPath != null) {\n-      Predicate<String> isSnapshot = name -> name.contains(\"SNAPSHOT\");\n-      List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n-      List<Path> nonSnapshotDependencies =\n-          allDependencies\n-              .stream()\n-              .filter(isSnapshot.negate())\n-              .map(Paths::get)\n-              .collect(Collectors.toList());\n-      List<Path> snapshotDependencies =\n-          allDependencies.stream().filter(isSnapshot).map(Paths::get).collect(Collectors.toList());\n-      if (!nonSnapshotDependencies.isEmpty()) {\n-        FileEntriesLayer.Builder nonSnapshotDependenciesLayerBuilder =\n-            FileEntriesLayer.builder().setName(DEPENDENCIES);\n-        nonSnapshotDependencies.forEach(\n-            path ->\n-                nonSnapshotDependenciesLayerBuilder.addEntry(\n-                    path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n-        layers.add(nonSnapshotDependenciesLayerBuilder.build());\n-      }\n-      if (!snapshotDependencies.isEmpty()) {\n-        FileEntriesLayer.Builder snapshotDependenciesLayerBuilder =\n-            FileEntriesLayer.builder().setName(SNAPSHOT_DEPENDENCIES);\n-        snapshotDependencies.forEach(\n-            path ->\n-                snapshotDependenciesLayerBuilder.addEntry(\n-                    path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n-        layers.add(snapshotDependenciesLayerBuilder.build());\n-      }\n-    }\n+    // Add dependencies layers.\n+    layers.addAll(getDependenciesLayers(jarPath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8636a53246532d266a759cfebeaf90483ae1afe3"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1MDQ2Nw==", "bodyText": "Not that I care, but just FYI, this doc stylizes the archive as \"JAR.\" It stands for \"Java\u2122 Archive (JAR)\" files.", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r519950467", "createdAt": "2020-11-09T16:37:14Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -173,6 +168,28 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     }\n   }\n \n+  /**\n+   * Computes the entrypoint for a standard jar in packaged mode.\n+   *\n+   * @param jarPath path to jar file\n+   * @return list of {@link String} representing entrypoint\n+   * @throws IOException if I/O error occurs when opening the jar file\n+   */\n+  static ImmutableList<String> computeEntrypointForPackagedStandard(Path jarPath)\n+      throws IOException {\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      String mainClass =\n+          jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);\n+      if (mainClass == null) {\n+        throw new IllegalArgumentException(\n+            \"`Main-Class:` attribute for an application main class not defined in the input Jar's \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8636a53246532d266a759cfebeaf90483ae1afe3"}, "originalPosition": 114}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df578e761a9e76f9a25f3b38d275b6e1bb1dbca5", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/df578e761a9e76f9a25f3b38d275b6e1bb1dbca5", "committedDate": "2020-11-09T22:40:40Z", "message": "fix test to use root directory instead of empty directory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d9f5b77abc755c70d821fa4fe3a2d1f6101c604", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/0d9f5b77abc755c70d821fa4fe3a2d1f6101c604", "committedDate": "2020-11-09T23:03:13Z", "message": "Merge branch 'jar-integration-test' of github.com:GoogleContainerTools/jib into packaged-mode-jar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "686efa79697e803eea5014008d8e37eb87f49f73", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/686efa79697e803eea5014008d8e37eb87f49f73", "committedDate": "2020-11-10T15:54:21Z", "message": "refactoring and fix dependency addition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f40557d0083ee34e15d3035b58748737cfeadf63", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/f40557d0083ee34e15d3035b58748737cfeadf63", "committedDate": "2020-11-10T15:59:54Z", "message": "use JAR instead of jar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c07e34bd88793fe56b4bac0b5f1e3b6f6033515", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/3c07e34bd88793fe56b4bac0b5f1e3b6f6033515", "committedDate": "2020-11-10T16:27:55Z", "message": "pull in changes in master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NTQ0NjQ0", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#pullrequestreview-527544644", "createdAt": "2020-11-10T19:37:13Z", "commit": {"oid": "3c07e34bd88793fe56b4bac0b5f1e3b6f6033515"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTozNzoxM1rOHwsqhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoxNjo1OVrOHwuClw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgyNTQ3Ng==", "bodyText": "Remove all these @Ignores.", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r520825476", "createdAt": "2020-11-10T19:37:13Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -43,11 +44,13 @@\n   @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n \n   @Test\n-  public void testToJibContainerBuilder_basicInfo()\n+  @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c07e34bd88793fe56b4bac0b5f1e3b6f6033515"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0ODAyMw==", "bodyText": "Oh, I remember we decided to do java -jar. In that case, we should retain the directory structure for the dependencies given in Class-Path: in MANIFEST.MF.", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r520848023", "createdAt": "2020-11-10T20:16:59Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -151,6 +116,32 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers for dependencies, snapshot dependencies and the jar itself on container for a\n+   * standard jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file\n+   */\n+  static List<FileEntriesLayer> createPackagedModeLayersForStandardJar(Path jarPath)\n+      throws IOException {\n+    // Add dependencies layers.\n+    List<FileEntriesLayer> layers = getDependenciesLayers(jarPath);\n+\n+    // Add layer for jar.\n+    FileEntriesLayer jarLayer =\n+        FileEntriesLayer.builder()\n+            .setName(JAR)\n+            .addEntry(\n+                jarPath,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"jar\")).resolve(jarPath.getFileName()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c07e34bd88793fe56b4bac0b5f1e3b6f6033515"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NjIzOTE4", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#pullrequestreview-527623918", "createdAt": "2020-11-10T21:31:57Z", "commit": {"oid": "3c07e34bd88793fe56b4bac0b5f1e3b6f6033515"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTozMTo1N1rOHwwZ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTozNToxNVrOHwwgow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4Njc0MA==", "bodyText": "Why not creating a dedicated type and have the descriptions like other options?\n\"set console output type, candidates: ${COMPLETION-CANDIDATES}, default: ${DEFAULT-VALUE}\")\n\nI think it will take care of validation for us too.", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r520886740", "createdAt": "2020-11-10T21:31:57Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "diffHunk": "@@ -44,6 +44,14 @@\n   @SuppressWarnings(\"NullAway.Init\") // initialized by picocli\n   private Path jarFile;\n \n+  @CommandLine.Option(\n+      names = \"--mode\",\n+      defaultValue = \"exploded\",\n+      paramLabel = \"<mode>\",\n+      description = \"The jar processing mode, candidates: packaged, default: exploded\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c07e34bd88793fe56b4bac0b5f1e3b6f6033515"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4ODQ4Mw==", "bodyText": "Actually, I do believe the dependency directory structure will be retained under /app/dependencies. But for the java -jar to work, the easiest solution is to put the main JAR under /app/dependencies. But then, the directory name /app/dependencies doesn't make much sense. Maybe we should place the main JAR and other dependency JARs (while retaining the directory structure) at /app?\nThat said, it's worth having a test that has Class-Path:, e.g., Class-Path: foo.jar nested/bar.jar.", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r520888483", "createdAt": "2020-11-10T21:35:15Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -151,6 +116,32 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers for dependencies, snapshot dependencies and the jar itself on container for a\n+   * standard jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file\n+   */\n+  static List<FileEntriesLayer> createPackagedModeLayersForStandardJar(Path jarPath)\n+      throws IOException {\n+    // Add dependencies layers.\n+    List<FileEntriesLayer> layers = getDependenciesLayers(jarPath);\n+\n+    // Add layer for jar.\n+    FileEntriesLayer jarLayer =\n+        FileEntriesLayer.builder()\n+            .setName(JAR)\n+            .addEntry(\n+                jarPath,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"jar\")).resolve(jarPath.getFileName()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0ODAyMw=="}, "originalCommit": {"oid": "3c07e34bd88793fe56b4bac0b5f1e3b6f6033515"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NjQxNDY0", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#pullrequestreview-527641464", "createdAt": "2020-11-10T21:59:05Z", "commit": {"oid": "3c07e34bd88793fe56b4bac0b5f1e3b6f6033515"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTo1OTowNlrOHwxPZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTo1OTowNlrOHwxPZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkwMDQ1Mg==", "bodyText": "I just tried my C.jar example, but it throws an NPE. In this case, jarPath is simply C.jar (not an absolute path) and jarPath.getParent() returns null.\n~/A$ jib --target=docker://foo --stacktrace jar C.jar\njava.lang.NullPointerException\n        at com.google.cloud.tools.jib.cli.jar.JarModeProcessor.lambda$getDependenciesLayers$6(JarModeProcessor.java:236)\n        at java.util.ArrayList.forEach(ArrayList.java:1257)\n        at com.google.cloud.tools.jib.cli.jar.JarModeProcessor.getDependenciesLayers(JarModeProcessor.java:233)\n\nMaybe it can be\n      Path jarParent = jarPath.getParent() == null ? Paths.get(\"\") : jarPath.getParent();", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r520900452", "createdAt": "2020-11-10T21:59:06Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -191,4 +204,50 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n             });\n     return builder.build();\n   }\n+\n+  private static List<FileEntriesLayer> getDependenciesLayers(Path jarPath) throws IOException {\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    String classPath = null;\n+\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n+    // and snapshot dependencies. If Class-Path is not present in the jar's manifest then skip\n+    // adding the dependencies layers.\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+    }\n+    if (classPath != null) {\n+      Predicate<String> isSnapshot = name -> name.contains(\"SNAPSHOT\");\n+      List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n+      List<Path> nonSnapshotDependencies =\n+          allDependencies\n+              .stream()\n+              .filter(isSnapshot.negate())\n+              .map(Paths::get)\n+              .collect(Collectors.toList());\n+      List<Path> snapshotDependencies =\n+          allDependencies.stream().filter(isSnapshot).map(Paths::get).collect(Collectors.toList());\n+      Path jarParent = jarPath.getParent();\n+      if (!nonSnapshotDependencies.isEmpty()) {\n+        FileEntriesLayer.Builder nonSnapshotDependenciesLayerBuilder =\n+            FileEntriesLayer.builder().setName(DEPENDENCIES);\n+        nonSnapshotDependencies.forEach(\n+            path ->\n+                nonSnapshotDependenciesLayerBuilder.addEntry(\n+                    jarParent.resolve(path),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c07e34bd88793fe56b4bac0b5f1e3b6f6033515"}, "originalPosition": 164}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f2fa573b1b15ba8eed4d18fa3ff7eeccaaac211", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/1f2fa573b1b15ba8eed4d18fa3ff7eeccaaac211", "committedDate": "2020-11-12T15:03:01Z", "message": "modify mode, fix npe and issue with dependency paths"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MjAxODY2", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#pullrequestreview-529201866", "createdAt": "2020-11-12T15:27:26Z", "commit": {"oid": "1f2fa573b1b15ba8eed4d18fa3ff7eeccaaac211"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNToyNzoyNlrOHyAFKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo1MDowOVrOHyBMxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5MjE2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void testJar_unknownMode_toDocker() throws URISyntaxException {\n          \n          \n            \n              public void testJar_unknownMode() throws URISyntaxException {", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r522192169", "createdAt": "2020-11-12T15:27:26Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -57,20 +57,52 @@ public void testErrorLogging_directoryGiven() throws URISyntaxException {\n     assertThat(exitCode).isEqualTo(1);\n     assertThat(stringWriter.toString())\n         .isEqualTo(\n-            \"[ERROR] The file path provided is for a directory. Please provide a path to a jar file: \"\n+            \"[ERROR] The file path provided is for a directory. Please provide a path to a JAR: \"\n                 + jarFile.toString()\n                 + \"\\n\");\n   }\n \n   @Test\n-  public void testJar_toDocker() throws IOException, InterruptedException, URISyntaxException {\n-    Path jarFile = Paths.get(Resources.getResource(\"simpleJar.jar\").toURI());\n+  public void testJar_explodedMode_toDocker()\n+      throws IOException, InterruptedException, URISyntaxException {\n+    Path jarFile = Paths.get(Resources.getResource(\"jarTest/jarWithCp.jar\").toURI());\n     Integer exitCode =\n         new CommandLine(new JibCli())\n             .execute(\"--target\", \"docker://jib-cli-image\", \"jar\", jarFile.toString());\n     String output = new Command(\"docker\", \"run\", \"--rm\", \"jib-cli-image\").run();\n \n     assertThat(exitCode).isEqualTo(0);\n-    assertThat(output).isEqualTo(\"Hello World\");\n+    assertThat(output).isEqualTo(\"HelloWorld\");\n+  }\n+\n+  @Test\n+  public void testJar_packagedMode_toDocker()\n+      throws IOException, InterruptedException, URISyntaxException {\n+    Path jarFile = Paths.get(Resources.getResource(\"jarTest/jarWithCp.jar\").toURI());\n+    Integer exitCode =\n+        new CommandLine(new JibCli())\n+            .execute(\n+                \"--target\", \"docker://jib-cli-image\", \"jar\", jarFile.toString(), \"--mode=packaged\");\n+    String output = new Command(\"docker\", \"run\", \"--rm\", \"jib-cli-image\").run();\n+\n+    assertThat(exitCode).isEqualTo(0);\n+    assertThat(output).isEqualTo(\"HelloWorld\");\n+  }\n+\n+  @Test\n+  public void testJar_unknownMode_toDocker() throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2fa573b1b15ba8eed4d18fa3ff7eeccaaac211"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5MzAwMA==", "bodyText": "Perhaps we don't even need to pass a jar file?", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r522193000", "createdAt": "2020-11-12T15:28:26Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -57,20 +57,52 @@ public void testErrorLogging_directoryGiven() throws URISyntaxException {\n     assertThat(exitCode).isEqualTo(1);\n     assertThat(stringWriter.toString())\n         .isEqualTo(\n-            \"[ERROR] The file path provided is for a directory. Please provide a path to a jar file: \"\n+            \"[ERROR] The file path provided is for a directory. Please provide a path to a JAR: \"\n                 + jarFile.toString()\n                 + \"\\n\");\n   }\n \n   @Test\n-  public void testJar_toDocker() throws IOException, InterruptedException, URISyntaxException {\n-    Path jarFile = Paths.get(Resources.getResource(\"simpleJar.jar\").toURI());\n+  public void testJar_explodedMode_toDocker()\n+      throws IOException, InterruptedException, URISyntaxException {\n+    Path jarFile = Paths.get(Resources.getResource(\"jarTest/jarWithCp.jar\").toURI());\n     Integer exitCode =\n         new CommandLine(new JibCli())\n             .execute(\"--target\", \"docker://jib-cli-image\", \"jar\", jarFile.toString());\n     String output = new Command(\"docker\", \"run\", \"--rm\", \"jib-cli-image\").run();\n \n     assertThat(exitCode).isEqualTo(0);\n-    assertThat(output).isEqualTo(\"Hello World\");\n+    assertThat(output).isEqualTo(\"HelloWorld\");\n+  }\n+\n+  @Test\n+  public void testJar_packagedMode_toDocker()\n+      throws IOException, InterruptedException, URISyntaxException {\n+    Path jarFile = Paths.get(Resources.getResource(\"jarTest/jarWithCp.jar\").toURI());\n+    Integer exitCode =\n+        new CommandLine(new JibCli())\n+            .execute(\n+                \"--target\", \"docker://jib-cli-image\", \"jar\", jarFile.toString(), \"--mode=packaged\");\n+    String output = new Command(\"docker\", \"run\", \"--rm\", \"jib-cli-image\").run();\n+\n+    assertThat(exitCode).isEqualTo(0);\n+    assertThat(output).isEqualTo(\"HelloWorld\");\n+  }\n+\n+  @Test\n+  public void testJar_unknownMode_toDocker() throws URISyntaxException {\n+    CommandLine jibCli = new CommandLine(new JibCli());\n+    StringWriter stringWriter = new StringWriter();\n+    jibCli.setErr(new PrintWriter(stringWriter));\n+\n+    Path jarFile = Paths.get(Resources.getResource(\"jarTest/jarWithCp.jar\").toURI());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2fa573b1b15ba8eed4d18fa3ff7eeccaaac211"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5NDMwOA==", "bodyText": "Let's have exploded (default mode) come first.", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r522194308", "createdAt": "2020-11-12T15:30:02Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/ProcessingMode.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.jar;\n+\n+public enum ProcessingMode {\n+  packaged,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2fa573b1b15ba8eed4d18fa3ff7eeccaaac211"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5NjQ3OQ==", "bodyText": "Maybe we can be consistent with the names. Given that the class name is already JarModeProcessor,\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  layers = JarModeProcessor.createPackagedModeLayersForStandardJar(jarPath);\n          \n          \n            \n                  entrypoint = JarModeProcessor.computeEntrypointForPackagedStandard(jarPath);\n          \n          \n            \n                  layers = JarModeProcessor.createLayersForPackagedStandard(jarPath);\n          \n          \n            \n                  entrypoint = JarModeProcessor.computeEntrypointForPackagedStandard(jarPath);\n          \n      \n    \n    \n  \n\nAnd unfortunately, renaming a method means renaming test methods too.", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r522196479", "createdAt": "2020-11-12T15:32:45Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarFiles.java", "diffHunk": "@@ -33,20 +33,28 @@\n    * @param jarPath path to the jar file\n    * @param tempDirPath path to a temporary directory which will be used store the exploded jar's\n    *     contents\n+   * @param mode mode for processing jar\n    * @return JibContainerBuilder\n    * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n    *     provided doesn't exist\n    * @throws InvalidImageReferenceException if the base image reference is invalid\n    */\n-  public static JibContainerBuilder toJibContainerBuilder(Path jarPath, Path tempDirPath)\n+  public static JibContainerBuilder toJibContainerBuilder(\n+      Path jarPath, Path tempDirPath, ProcessingMode mode)\n       throws IOException, InvalidImageReferenceException {\n \n     // Use distroless as the base image.\n     JibContainerBuilder containerBuilder = Jib.from(\"gcr.io/distroless/java\");\n \n-    List<FileEntriesLayer> layers =\n-        JarModeProcessor.createExplodedModeLayersForStandardJar(jarPath, tempDirPath);\n-    List<String> entrypoint = JarModeProcessor.computeEntrypointForExplodedStandard(jarPath);\n+    List<FileEntriesLayer> layers;\n+    List<String> entrypoint;\n+    if (mode.equals(ProcessingMode.packaged)) {\n+      layers = JarModeProcessor.createPackagedModeLayersForStandardJar(jarPath);\n+      entrypoint = JarModeProcessor.computeEntrypointForPackagedStandard(jarPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2fa573b1b15ba8eed4d18fa3ff7eeccaaac211"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwMzczOQ==", "bodyText": "Now that we have refactored out this logic to this method, short-circuiting is possible, and I think it helps readability. And now I think it should be fine to expand the try block until the end. For example,\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n          \n          \n            \n                  classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n          \n          \n            \n                }\n          \n          \n            \n                if (classPath != null) {\n          \n          \n            \n                  Predicate<String> isSnapshot = name -> name.contains(\"SNAPSHOT\");\n          \n          \n            \n                try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n          \n          \n            \n                  String classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n          \n          \n            \n                  if (classPath == null) {\n          \n          \n            \n                    return new ArrayList<>();\n          \n          \n            \n                  }\n          \n          \n            \n            \n          \n          \n            \n                  List<FileEntriesLayer> layers = new ArrayList<>();\n          \n          \n            \n                  ...\n          \n          \n            \n                }", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r522203739", "createdAt": "2020-11-12T15:41:54Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -191,4 +202,49 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n             });\n     return builder.build();\n   }\n+\n+  private static List<FileEntriesLayer> getDependenciesLayers(\n+      Path jarPath, AbsoluteUnixPath pathOnContainer) throws IOException {\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    String classPath = null;\n+\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n+    // and snapshot dependencies. If Class-Path is not present in the jar's manifest then skip\n+    // adding the dependencies layers.\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+    }\n+    if (classPath != null) {\n+      Predicate<String> isSnapshot = name -> name.contains(\"SNAPSHOT\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2fa573b1b15ba8eed4d18fa3ff7eeccaaac211"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNjIxOQ==", "bodyText": "super nit: I think in this local scope, it's fine to name it nonSnapshotLayer. I think it'll help reduce cognitive load when reading the code block.", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r522206219", "createdAt": "2020-11-12T15:44:57Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -191,4 +202,49 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n             });\n     return builder.build();\n   }\n+\n+  private static List<FileEntriesLayer> getDependenciesLayers(\n+      Path jarPath, AbsoluteUnixPath pathOnContainer) throws IOException {\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    String classPath = null;\n+\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n+    // and snapshot dependencies. If Class-Path is not present in the jar's manifest then skip\n+    // adding the dependencies layers.\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+    }\n+    if (classPath != null) {\n+      Predicate<String> isSnapshot = name -> name.contains(\"SNAPSHOT\");\n+      List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n+      List<Path> nonSnapshotDependencies =\n+          allDependencies\n+              .stream()\n+              .filter(isSnapshot.negate())\n+              .map(Paths::get)\n+              .collect(Collectors.toList());\n+      List<Path> snapshotDependencies =\n+          allDependencies.stream().filter(isSnapshot).map(Paths::get).collect(Collectors.toList());\n+      Path jarParent = jarPath.getParent() == null ? Paths.get(\"\") : jarPath.getParent();\n+      if (!nonSnapshotDependencies.isEmpty()) {\n+        FileEntriesLayer.Builder nonSnapshotDependenciesLayerBuilder =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2fa573b1b15ba8eed4d18fa3ff7eeccaaac211"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNjQ5NA==", "bodyText": "Likewise, snapshotLayer.", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r522206494", "createdAt": "2020-11-12T15:45:17Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -191,4 +202,49 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n             });\n     return builder.build();\n   }\n+\n+  private static List<FileEntriesLayer> getDependenciesLayers(\n+      Path jarPath, AbsoluteUnixPath pathOnContainer) throws IOException {\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    String classPath = null;\n+\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n+    // and snapshot dependencies. If Class-Path is not present in the jar's manifest then skip\n+    // adding the dependencies layers.\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+    }\n+    if (classPath != null) {\n+      Predicate<String> isSnapshot = name -> name.contains(\"SNAPSHOT\");\n+      List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n+      List<Path> nonSnapshotDependencies =\n+          allDependencies\n+              .stream()\n+              .filter(isSnapshot.negate())\n+              .map(Paths::get)\n+              .collect(Collectors.toList());\n+      List<Path> snapshotDependencies =\n+          allDependencies.stream().filter(isSnapshot).map(Paths::get).collect(Collectors.toList());\n+      Path jarParent = jarPath.getParent() == null ? Paths.get(\"\") : jarPath.getParent();\n+      if (!nonSnapshotDependencies.isEmpty()) {\n+        FileEntriesLayer.Builder nonSnapshotDependenciesLayerBuilder =\n+            FileEntriesLayer.builder().setName(DEPENDENCIES);\n+        nonSnapshotDependencies.forEach(\n+            path ->\n+                nonSnapshotDependenciesLayerBuilder.addEntry(\n+                    jarParent.resolve(path), pathOnContainer.resolve(path)));\n+        layers.add(nonSnapshotDependenciesLayerBuilder.build());\n+      }\n+      if (!snapshotDependencies.isEmpty()) {\n+        FileEntriesLayer.Builder snapshotDependenciesLayerBuilder =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2fa573b1b15ba8eed4d18fa3ff7eeccaaac211"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwOTU0Mg==", "bodyText": "jarLayer().getEntries().get(0).getExtractionPath()?\nAnd before this, also assert that the size of jarLayer().getEntries() is 1.", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r522209542", "createdAt": "2020-11-12T15:49:00Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -326,6 +326,125 @@ public void testExplodedMode_standard_computeEntrypoint_noMainClass() throws URI\n     assertThat(ex)\n         .hasMessageThat()\n         .isEqualTo(\n-            \"`Main-Class:` attribute for an application main class not defined in the input Jar's manifest (`META-INF/MANIFEST.MF` in the Jar).\");\n+            \"`Main-Class:` attribute for an application main class not defined in the input JAR's manifest (`META-INF/MANIFEST.MF` in the JAR).\");\n+  }\n+\n+  @Test\n+  public void testCreatePackagedModeLayersForStandardJar_emptyJar()\n+      throws IOException, URISyntaxException {\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_JAR_EMPTY).toURI());\n+    List<FileEntriesLayer> layers =\n+        JarModeProcessor.createPackagedModeLayersForStandardJar(standardJar);\n+\n+    assertThat(layers.size()).isEqualTo(1);\n+\n+    FileEntriesLayer jarLayer = layers.get(0);\n+    assertThat(jarLayer.getName()).isEqualTo(\"jar\");\n+    assertThat(\n+            jarLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList())\n+                .get(0))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2fa573b1b15ba8eed4d18fa3ff7eeccaaac211"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIxMDUwMA==", "bodyText": "ditto\nBut this test is identical to the one above. May be remove this test?", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r522210500", "createdAt": "2020-11-12T15:50:09Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -326,6 +326,125 @@ public void testExplodedMode_standard_computeEntrypoint_noMainClass() throws URI\n     assertThat(ex)\n         .hasMessageThat()\n         .isEqualTo(\n-            \"`Main-Class:` attribute for an application main class not defined in the input Jar's manifest (`META-INF/MANIFEST.MF` in the Jar).\");\n+            \"`Main-Class:` attribute for an application main class not defined in the input JAR's manifest (`META-INF/MANIFEST.MF` in the JAR).\");\n+  }\n+\n+  @Test\n+  public void testCreatePackagedModeLayersForStandardJar_emptyJar()\n+      throws IOException, URISyntaxException {\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_JAR_EMPTY).toURI());\n+    List<FileEntriesLayer> layers =\n+        JarModeProcessor.createPackagedModeLayersForStandardJar(standardJar);\n+\n+    assertThat(layers.size()).isEqualTo(1);\n+\n+    FileEntriesLayer jarLayer = layers.get(0);\n+    assertThat(jarLayer.getName()).isEqualTo(\"jar\");\n+    assertThat(\n+            jarLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList())\n+                .get(0))\n+        .isEqualTo(AbsoluteUnixPath.get(\"/app/emptyStandardJar.jar\"));\n+  }\n+\n+  @Test\n+  public void testCreatePackagedModeLayersForStandardJar_withoutClassPathInManifest()\n+      throws IOException, URISyntaxException {\n+    Path standardJar =\n+        Paths.get(Resources.getResource(STANDARD_JAR_WITHOUT_CLASS_PATH_MANIFEST).toURI());\n+    List<FileEntriesLayer> layers =\n+        JarModeProcessor.createPackagedModeLayersForStandardJar(standardJar);\n+\n+    assertThat(layers.size()).isEqualTo(1);\n+\n+    FileEntriesLayer jarLayer = layers.get(0);\n+\n+    assertThat(jarLayer.getName()).isEqualTo(\"jar\");\n+    assertThat(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2fa573b1b15ba8eed4d18fa3ff7eeccaaac211"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MjM2ODIy", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#pullrequestreview-529236822", "createdAt": "2020-11-12T16:00:35Z", "commit": {"oid": "1f2fa573b1b15ba8eed4d18fa3ff7eeccaaac211"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjowMDozNVrOHyBtbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjowMDozNVrOHyBtbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIxODg2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    getDependenciesLayers(jarPath, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")));\n          \n          \n            \n                    getDependenciesLayers(jarPath, APP_ROOT.resolve(\"dependencies\"));", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r522218860", "createdAt": "2020-11-12T16:00:35Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -86,47 +87,12 @@ static JarType determineJarType(Path jarPath) throws IOException {\n    */\n   static List<FileEntriesLayer> createExplodedModeLayersForStandardJar(\n       Path jarPath, Path tempDirPath) throws IOException {\n+    // Add dependencies layers.\n+    List<FileEntriesLayer> layers =\n+        getDependenciesLayers(jarPath, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2fa573b1b15ba8eed4d18fa3ff7eeccaaac211"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1249db3cb5d2f26f8935ffdaf877fb66f1c74b1", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/d1249db3cb5d2f26f8935ffdaf877fb66f1c74b1", "committedDate": "2020-11-12T17:54:56Z", "message": "Renaming JarModeProcessor methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b42f0e1a5b362008d2dc87c09245c7294c7226c", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/8b42f0e1a5b362008d2dc87c09245c7294c7226c", "committedDate": "2020-11-12T18:08:59Z", "message": "simplify test for unknown mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3ee2875eef1adf0b482ebf1730472f55f7e6e40", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/f3ee2875eef1adf0b482ebf1730472f55f7e6e40", "committedDate": "2020-11-12T18:16:31Z", "message": "remove repetitive test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "369bf2fa4c8e370d0f4cf2d41cbef68242d24ff3", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/369bf2fa4c8e370d0f4cf2d41cbef68242d24ff3", "committedDate": "2020-11-12T18:20:29Z", "message": "clean up packaged mode unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68c64a84999ed44f600c205fb5274d676b7db006", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/68c64a84999ed44f600c205fb5274d676b7db006", "committedDate": "2020-11-13T03:09:00Z", "message": "Merge branch 'master' of github.com:GoogleContainerTools/jib into packaged-mode-jar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bde515b179d0427cb581f8450f57c85a846ea10", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/2bde515b179d0427cb581f8450f57c85a846ea10", "committedDate": "2020-11-18T02:32:08Z", "message": "Pull in changes in master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d371318c97eb5962c49139303788e00cbbae816f", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/d371318c97eb5962c49139303788e00cbbae816f", "committedDate": "2020-11-18T03:27:31Z", "message": "create helper for getting snapshot and non-snapshot dependencies from classpath"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0827cd313ffa26667f14bcfb004b38b99876f88", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/e0827cd313ffa26667f14bcfb004b38b99876f88", "committedDate": "2020-11-18T03:33:22Z", "message": "rename test methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bb15b1dfc002bc8eb6717a7369358b75a8fba90", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/4bb15b1dfc002bc8eb6717a7369358b75a8fba90", "committedDate": "2020-11-18T03:39:07Z", "message": "formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3998396b8f44f323afbdd3df787c16e024aba4d2", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/3998396b8f44f323afbdd3df787c16e024aba4d2", "committedDate": "2020-11-18T03:50:16Z", "message": "add test for jar with no dependencies for packaged mode and assert on classpath"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1324bb8f71cc24bd509c1c686de4e8be17d1211d", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/1324bb8f71cc24bd509c1c686de4e8be17d1211d", "committedDate": "2020-11-18T03:54:43Z", "message": "clean up unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb042325b919b64cbd28bd58a9897a94264320f9", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/bb042325b919b64cbd28bd58a9897a94264320f9", "committedDate": "2020-11-18T04:02:11Z", "message": "remove redundant test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cdcba9f86e06428a29c5070fa465fcf71df8406", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/1cdcba9f86e06428a29c5070fa465fcf71df8406", "committedDate": "2020-11-18T04:06:36Z", "message": "remove unnecesary file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNzk4MTQ5", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#pullrequestreview-533798149", "createdAt": "2020-11-18T19:22:29Z", "commit": {"oid": "1cdcba9f86e06428a29c5070fa465fcf71df8406"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOToyMjoyOVrOH1-Y5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOToyOTo0MlrOH1-qKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1ODc1Ng==", "bodyText": "I'm not a big fan of using a map for the purpose of returning more than one value. How about creating a private inner class? For this purpose, I think we don't even need getters and setters.\nprivate static class LocalDependencies {\n  private final List<Path> snapshots;\n  private final List<Path> nonSnapshots;\n\n  private LocalDependencies(List<Path> snapshots, List<Path> nonSnapshots) {\n    this.snapshots = snapshots;\n    this.nonSnapshots = nonSnapshots;\n  }\n}\nBut is it not possible for this method to return built layers? (I remember the original code worked in that way, and I liked it.) In that way, I think we can remove duplicate code between the exploded mode and the packaged mode?", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r526358756", "createdAt": "2020-11-18T19:22:29Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -163,14 +223,51 @@ static JarType determineJarType(Path jarPath) throws IOException {\n           jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);\n       if (mainClass == null) {\n         throw new IllegalArgumentException(\n-            \"`Main-Class:` attribute for an application main class not defined in the input Jar's \"\n-                + \"manifest (`META-INF/MANIFEST.MF` in the Jar).\");\n+            \"`Main-Class:` attribute for an application main class not defined in the input JAR's \"\n+                + \"manifest (`META-INF/MANIFEST.MF` in the JAR).\");\n       }\n       String classpath = APP_ROOT + \"/explodedJar:\" + APP_ROOT + \"/dependencies/*\";\n       return ImmutableList.of(\"java\", \"-cp\", classpath, mainClass);\n     }\n   }\n \n+  /**\n+   * Computes the entrypoint for a standard jar in packaged mode.\n+   *\n+   * @param jarPath path to jar file\n+   * @return list of {@link String} representing entrypoint\n+   * @throws IOException if I/O error occurs when opening the jar file\n+   */\n+  static ImmutableList<String> computeEntrypointForPackagedStandard(Path jarPath)\n+      throws IOException {\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      String mainClass =\n+          jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);\n+      if (mainClass == null) {\n+        throw new IllegalArgumentException(\n+            \"`Main-Class:` attribute for an application main class not defined in the input JAR's \"\n+                + \"manifest (`META-INF/MANIFEST.MF` in the JAR).\");\n+      }\n+      return ImmutableList.of(\"java\", \"-jar\", APP_ROOT + \"/\" + jarPath.getFileName().toString());\n+    }\n+  }\n+\n+  private static ImmutableMap<String, List<Path>> getSnapshotAndNonSnapshotDependencies(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cdcba9f86e06428a29c5070fa465fcf71df8406"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2MjUzMA==", "bodyText": "Assert that buildPlan.getLayers() is of size 2 before this.", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r526362530", "createdAt": "2020-11-18T19:28:40Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -106,4 +107,41 @@ public void testToJibContainerBuilder_basicInfo()\n                 .build()\n                 .getEntries());\n   }\n+\n+  @Test\n+  public void testToJibContainerBuilder_packagedStandard_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path standardJar = Paths.get(Resources.getResource(SIMPLE_STANDARD_JAR).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();\n+    JibContainerBuilder containerBuilder =\n+        JarFiles.toJibContainerBuilder(standardJar, destDir, ProcessingMode.packaged);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();\n+    assertThat(buildPlan.getEntrypoint())\n+        .isEqualTo(ImmutableList.of(\"java\", \"-jar\", \"/app/basicStandardJar.jar\"));\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(0)).getEntries())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cdcba9f86e06428a29c5070fa465fcf71df8406"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2MzE3OQ==", "bodyText": "Probably no one throws URISyntaxException. Try removing it.", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r526363179", "createdAt": "2020-11-18T19:29:42Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -295,7 +294,21 @@ public void testCreateExplodedModeLayersForStandardJar_dependencyDoesNotExist()\n   }\n \n   @Test\n-  public void testExplodeMode_standard_computeEntrypoint_allLayersPresent()\n+  public void testComputeEntrypointForExplodedStandard_noMainClass() throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cdcba9f86e06428a29c5070fa465fcf71df8406"}, "originalPosition": 114}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c67731c9ca10930a9a176cf03ea05d191e81f169", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/c67731c9ca10930a9a176cf03ea05d191e81f169", "committedDate": "2020-11-18T21:22:27Z", "message": "Refactor test to use helper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTE4ODU5", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#pullrequestreview-533918859", "createdAt": "2020-11-18T22:04:41Z", "commit": {"oid": "c67731c9ca10930a9a176cf03ea05d191e81f169"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjowNDo0MVrOH2EK9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjowOToxMVrOH2EUAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1MzQ5NA==", "bodyText": "We have the enum class defined in this Java package (c.g.c.t.jib.cli.jar.ProcessingMode). Why not use it?", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r526453494", "createdAt": "2020-11-18T22:04:41Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -83,58 +84,16 @@ static JarType determineJarType(Path jarPath) throws IOException {\n    * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n    *     provided doesn't exist\n    */\n-  static List<FileEntriesLayer> createExplodedModeLayersForStandardJar(\n-      Path jarPath, Path tempDirPath) throws IOException, IllegalArgumentException {\n-    Path localExplodedJarRoot = tempDirPath;\n-    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n-    List<FileEntriesLayer> layers = new ArrayList<>();\n-\n-    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n-    // and snapshot dependencies. If Class-Path is not present in the jar's manifest then skip\n-    // adding the dependencies layers.\n-    String classPath = null;\n-    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n-      classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n-    }\n-    if (classPath != null) {\n-      Predicate<String> isSnapshot = name -> name.contains(\"SNAPSHOT\");\n-      List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n-      List<Path> nonSnapshotDependencies =\n-          allDependencies\n-              .stream()\n-              .filter(isSnapshot.negate())\n-              .map(Paths::get)\n-              .collect(Collectors.toList());\n-      List<Path> snapshotDependencies =\n-          allDependencies.stream().filter(isSnapshot).map(Paths::get).collect(Collectors.toList());\n-      Path jarParent = jarPath.getParent() == null ? Paths.get(\"\") : jarPath.getParent();\n-      if (!nonSnapshotDependencies.isEmpty()) {\n-        FileEntriesLayer.Builder nonSnapshotDependenciesLayerBuilder =\n-            FileEntriesLayer.builder().setName(DEPENDENCIES);\n-        nonSnapshotDependencies.forEach(\n-            path ->\n-                addDependency(\n-                    nonSnapshotDependenciesLayerBuilder,\n-                    jarParent.resolve(path),\n-                    APP_ROOT.resolve(\"dependencies\").resolve(path.getFileName())));\n-        layers.add(nonSnapshotDependenciesLayerBuilder.build());\n-      }\n-      if (!snapshotDependencies.isEmpty()) {\n-        FileEntriesLayer.Builder snapshotDependenciesLayerBuilder =\n-            FileEntriesLayer.builder().setName(SNAPSHOT_DEPENDENCIES);\n-        snapshotDependencies.forEach(\n-            path ->\n-                addDependency(\n-                    snapshotDependenciesLayerBuilder,\n-                    jarParent.resolve(path),\n-                    APP_ROOT.resolve(\"dependencies\").resolve(path.getFileName())));\n-        layers.add(snapshotDependenciesLayerBuilder.build());\n-      }\n-    }\n+  static List<FileEntriesLayer> createLayersForExplodedStandard(Path jarPath, Path tempDirPath)\n+      throws IOException {\n+    // Add dependencies layers.\n+    List<FileEntriesLayer> layers = getDependenciesLayers(jarPath, \"exploded\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67731c9ca10930a9a176cf03ea05d191e81f169"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1NDQxNg==", "bodyText": "I think short-circuiting will help readability.\n      if (classPath == null) {  // should flip the comparison\n        return new ArrayList<>();\n      }\n      List<FileEntriesLayer> layers = new ArrayList<>();", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r526454416", "createdAt": "2020-11-18T22:06:28Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -163,14 +145,92 @@ static JarType determineJarType(Path jarPath) throws IOException {\n           jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);\n       if (mainClass == null) {\n         throw new IllegalArgumentException(\n-            \"`Main-Class:` attribute for an application main class not defined in the input Jar's \"\n-                + \"manifest (`META-INF/MANIFEST.MF` in the Jar).\");\n+            \"`Main-Class:` attribute for an application main class not defined in the input JAR's \"\n+                + \"manifest (`META-INF/MANIFEST.MF` in the JAR).\");\n       }\n       String classpath = APP_ROOT + \"/explodedJar:\" + APP_ROOT + \"/dependencies/*\";\n       return ImmutableList.of(\"java\", \"-cp\", classpath, mainClass);\n     }\n   }\n \n+  /**\n+   * Computes the entrypoint for a standard jar in packaged mode.\n+   *\n+   * @param jarPath path to jar file\n+   * @return list of {@link String} representing entrypoint\n+   * @throws IOException if I/O error occurs when opening the jar file\n+   */\n+  static ImmutableList<String> computeEntrypointForPackagedStandard(Path jarPath)\n+      throws IOException {\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      String mainClass =\n+          jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);\n+      if (mainClass == null) {\n+        throw new IllegalArgumentException(\n+            \"`Main-Class:` attribute for an application main class not defined in the input JAR's \"\n+                + \"manifest (`META-INF/MANIFEST.MF` in the JAR).\");\n+      }\n+      return ImmutableList.of(\"java\", \"-jar\", APP_ROOT + \"/\" + jarPath.getFileName().toString());\n+    }\n+  }\n+\n+  private static List<FileEntriesLayer> getDependenciesLayers(Path jarPath, String mode)\n+      throws IOException {\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n+    // and snapshot dependencies. If Class-Path is not present in the jar's manifest then skip\n+    // adding the dependencies layers.\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      String classPath =\n+          jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+      if (classPath != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67731c9ca10930a9a176cf03ea05d191e81f169"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1NTU0Ng==", "bodyText": "nit: let's just call these nonShapshots.", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r526455546", "createdAt": "2020-11-18T22:08:40Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -163,14 +145,92 @@ static JarType determineJarType(Path jarPath) throws IOException {\n           jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);\n       if (mainClass == null) {\n         throw new IllegalArgumentException(\n-            \"`Main-Class:` attribute for an application main class not defined in the input Jar's \"\n-                + \"manifest (`META-INF/MANIFEST.MF` in the Jar).\");\n+            \"`Main-Class:` attribute for an application main class not defined in the input JAR's \"\n+                + \"manifest (`META-INF/MANIFEST.MF` in the JAR).\");\n       }\n       String classpath = APP_ROOT + \"/explodedJar:\" + APP_ROOT + \"/dependencies/*\";\n       return ImmutableList.of(\"java\", \"-cp\", classpath, mainClass);\n     }\n   }\n \n+  /**\n+   * Computes the entrypoint for a standard jar in packaged mode.\n+   *\n+   * @param jarPath path to jar file\n+   * @return list of {@link String} representing entrypoint\n+   * @throws IOException if I/O error occurs when opening the jar file\n+   */\n+  static ImmutableList<String> computeEntrypointForPackagedStandard(Path jarPath)\n+      throws IOException {\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      String mainClass =\n+          jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);\n+      if (mainClass == null) {\n+        throw new IllegalArgumentException(\n+            \"`Main-Class:` attribute for an application main class not defined in the input JAR's \"\n+                + \"manifest (`META-INF/MANIFEST.MF` in the JAR).\");\n+      }\n+      return ImmutableList.of(\"java\", \"-jar\", APP_ROOT + \"/\" + jarPath.getFileName().toString());\n+    }\n+  }\n+\n+  private static List<FileEntriesLayer> getDependenciesLayers(Path jarPath, String mode)\n+      throws IOException {\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n+    // and snapshot dependencies. If Class-Path is not present in the jar's manifest then skip\n+    // adding the dependencies layers.\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      String classPath =\n+          jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+      if (classPath != null) {\n+        Path jarParent = jarPath.getParent() == null ? Paths.get(\"\") : jarPath.getParent();\n+        Predicate<String> isSnapshot = name -> name.contains(\"SNAPSHOT\");\n+        List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n+        List<Path> nonSnapshotDependencies =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67731c9ca10930a9a176cf03ea05d191e81f169"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1NTgxMA==", "bodyText": "nit: nonSnapshotLayer", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#discussion_r526455810", "createdAt": "2020-11-18T22:09:11Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -163,14 +145,92 @@ static JarType determineJarType(Path jarPath) throws IOException {\n           jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);\n       if (mainClass == null) {\n         throw new IllegalArgumentException(\n-            \"`Main-Class:` attribute for an application main class not defined in the input Jar's \"\n-                + \"manifest (`META-INF/MANIFEST.MF` in the Jar).\");\n+            \"`Main-Class:` attribute for an application main class not defined in the input JAR's \"\n+                + \"manifest (`META-INF/MANIFEST.MF` in the JAR).\");\n       }\n       String classpath = APP_ROOT + \"/explodedJar:\" + APP_ROOT + \"/dependencies/*\";\n       return ImmutableList.of(\"java\", \"-cp\", classpath, mainClass);\n     }\n   }\n \n+  /**\n+   * Computes the entrypoint for a standard jar in packaged mode.\n+   *\n+   * @param jarPath path to jar file\n+   * @return list of {@link String} representing entrypoint\n+   * @throws IOException if I/O error occurs when opening the jar file\n+   */\n+  static ImmutableList<String> computeEntrypointForPackagedStandard(Path jarPath)\n+      throws IOException {\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      String mainClass =\n+          jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);\n+      if (mainClass == null) {\n+        throw new IllegalArgumentException(\n+            \"`Main-Class:` attribute for an application main class not defined in the input JAR's \"\n+                + \"manifest (`META-INF/MANIFEST.MF` in the JAR).\");\n+      }\n+      return ImmutableList.of(\"java\", \"-jar\", APP_ROOT + \"/\" + jarPath.getFileName().toString());\n+    }\n+  }\n+\n+  private static List<FileEntriesLayer> getDependenciesLayers(Path jarPath, String mode)\n+      throws IOException {\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n+    // and snapshot dependencies. If Class-Path is not present in the jar's manifest then skip\n+    // adding the dependencies layers.\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      String classPath =\n+          jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+      if (classPath != null) {\n+        Path jarParent = jarPath.getParent() == null ? Paths.get(\"\") : jarPath.getParent();\n+        Predicate<String> isSnapshot = name -> name.contains(\"SNAPSHOT\");\n+        List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n+        List<Path> nonSnapshotDependencies =\n+            allDependencies\n+                .stream()\n+                .filter(isSnapshot.negate())\n+                .map(Paths::get)\n+                .collect(Collectors.toList());\n+        List<Path> snapshotDependencies =\n+            allDependencies\n+                .stream()\n+                .filter(isSnapshot)\n+                .map(Paths::get)\n+                .collect(Collectors.toList());\n+        if (!nonSnapshotDependencies.isEmpty()) {\n+          FileEntriesLayer.Builder nonSnapshotDependenciesLayerBuilder =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67731c9ca10930a9a176cf03ea05d191e81f169"}, "originalPosition": 165}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fd01f7e5f649b96397298ff8b238b02b4e88ca6", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/9fd01f7e5f649b96397298ff8b238b02b4e88ca6", "committedDate": "2020-11-18T23:51:04Z", "message": "changes to helper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NDk5NTAx", "url": "https://github.com/GoogleContainerTools/jib/pull/2888#pullrequestreview-534499501", "createdAt": "2020-11-19T14:27:52Z", "commit": {"oid": "9fd01f7e5f649b96397298ff8b238b02b4e88ca6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f216a67499a4e69c3dacd0434d3fc33b45d1a88", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/0f216a67499a4e69c3dacd0434d3fc33b45d1a88", "committedDate": "2020-11-19T15:53:31Z", "message": "Merge branch 'master' of github.com:GoogleContainerTools/jib into packaged-mode-jar"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4873, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}