{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MDg0NDI1", "number": 2835, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwMToyMjoxNFrOEuuFkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowOToxOVrOEv1Hgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDI1MDQwOnYy", "diffSide": "RIGHT", "path": "proposals/cli-jar-processing.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwMToyMjoxNFrOHjTQWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwMToyMjoxNFrOHjTQWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3NzY4OQ==", "bodyText": "also with a jib.yaml jib-cli buildfile?", "url": "https://github.com/GoogleContainerTools/jib/pull/2835#discussion_r506777689", "createdAt": "2020-10-17T01:22:14Z", "author": {"login": "loosebazooka"}, "path": "proposals/cli-jar-processing.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# Proposal : Jib CLI Jar Processing \n+\n+Relevant Issue: [#2796](https://github.com/GoogleContainerTools/jib/issues/2796)\n+\n+# Motivation \n+Allow users to containerize arbitrary jar files without having to integrate Jib into java build tools (maven and gradle).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38498904718d4a61354563ccf2de2788d5f9b328"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDI2MjY2OnYy", "diffSide": "RIGHT", "path": "proposals/cli-jar-processing.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwMTozNzo1M1rOHjTWbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwMTozNzo1M1rOHjTWbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3OTI0Ng==", "bodyText": "So I think in packaged mode, a fat jar should just be dropped into the container as is. Though we highly recommend against this, the fat jar does not contain an original jar -- it contains classes/resources.", "url": "https://github.com/GoogleContainerTools/jib/pull/2835#discussion_r506779246", "createdAt": "2020-10-17T01:37:53Z", "author": {"login": "loosebazooka"}, "path": "proposals/cli-jar-processing.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# Proposal : Jib CLI Jar Processing \n+\n+Relevant Issue: [#2796](https://github.com/GoogleContainerTools/jib/issues/2796)\n+\n+# Motivation \n+Allow users to containerize arbitrary jar files without having to integrate Jib into java build tools (maven and gradle).\n+\n+# Proposal Changes\n+\n+## Standard Jar \n+A standard jar can be containerized in two modes, exploded or packaged. \n+\n+### Exploded Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY}`\n+The default mode for containerizing a jar. It will explode a jar into the following layers:  \n+- Dependencies Layer: Contains dependencies derived from `Class-Path` in jar manifest. Note that this layer will not be created if `Class-Path` is not present in the manifest.\n+- Resources Layer: Contains resources parsed from jar file. Note that it will also include `MANIFEST.MF`.\n+- Classes Layer: Contains classes parsed from jar file. \n+\n+**Entrypoint** : `java -cp /app/dependencies/ /app/explodedJar/ ${MAIN_CLASS}`\n+\n+### Packaged Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY} --mode packaged`.\n+This will result in the following layers on the container:\n+- Dependencies:  Contains the dependencies derived from `Class-Path` in jar manifest. Note that this layer will not be created if `Class-Path` is not present in the manifest.\n+- Jar Layer: Contains the original jar.\n+\n+**Entrypoint** : `java -jar ${JAR_NAME}.jar`\n+\n+## Spring-Boot Fat Jar\n+A Spring-Boot Fat Jar can be containerized in two modes, exploded or packaged. \n+\n+### Exploded Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY}`\n+The default mode for containerizing a jar. It will explode a jar into the following layers:  \n+- Dependencies Layer: Contains dependencies derived from the `BOOT-INF/libs` directory in the jar.\n+- Resources Layer: Contains resources parsed from the jar. Note that it will also include `MANIFEST.MF`.\n+- Classes Layer: Contains classes parsed from the jar.\n+\n+**Entrypoint** : `java -cp . org.springframework.boot.loader.JarLauncher`\n+\n+### Packaged Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY} --mode packaged`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38498904718d4a61354563ccf2de2788d5f9b328"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDI2Mjg0OnYy", "diffSide": "RIGHT", "path": "proposals/cli-jar-processing.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwMTozODowNlrOHjTWgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo1NjoyNFrOHlBWww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3OTI2NQ==", "bodyText": "I think we should try to parse a layers.idx if we find one: https://spring.io/blog/2020/08/14/creating-efficient-docker-images-with-spring-boot-2-3", "url": "https://github.com/GoogleContainerTools/jib/pull/2835#discussion_r506779265", "createdAt": "2020-10-17T01:38:06Z", "author": {"login": "loosebazooka"}, "path": "proposals/cli-jar-processing.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# Proposal : Jib CLI Jar Processing \n+\n+Relevant Issue: [#2796](https://github.com/GoogleContainerTools/jib/issues/2796)\n+\n+# Motivation \n+Allow users to containerize arbitrary jar files without having to integrate Jib into java build tools (maven and gradle).\n+\n+# Proposal Changes\n+\n+## Standard Jar \n+A standard jar can be containerized in two modes, exploded or packaged. \n+\n+### Exploded Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY}`\n+The default mode for containerizing a jar. It will explode a jar into the following layers:  \n+- Dependencies Layer: Contains dependencies derived from `Class-Path` in jar manifest. Note that this layer will not be created if `Class-Path` is not present in the manifest.\n+- Resources Layer: Contains resources parsed from jar file. Note that it will also include `MANIFEST.MF`.\n+- Classes Layer: Contains classes parsed from jar file. \n+\n+**Entrypoint** : `java -cp /app/dependencies/ /app/explodedJar/ ${MAIN_CLASS}`\n+\n+### Packaged Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY} --mode packaged`.\n+This will result in the following layers on the container:\n+- Dependencies:  Contains the dependencies derived from `Class-Path` in jar manifest. Note that this layer will not be created if `Class-Path` is not present in the manifest.\n+- Jar Layer: Contains the original jar.\n+\n+**Entrypoint** : `java -jar ${JAR_NAME}.jar`\n+\n+## Spring-Boot Fat Jar\n+A Spring-Boot Fat Jar can be containerized in two modes, exploded or packaged. \n+\n+### Exploded Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY}`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38498904718d4a61354563ccf2de2788d5f9b328"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4MTU3MQ==", "bodyText": "Oh nice.", "url": "https://github.com/GoogleContainerTools/jib/pull/2835#discussion_r508581571", "createdAt": "2020-10-20T14:56:24Z", "author": {"login": "mpeddada1"}, "path": "proposals/cli-jar-processing.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# Proposal : Jib CLI Jar Processing \n+\n+Relevant Issue: [#2796](https://github.com/GoogleContainerTools/jib/issues/2796)\n+\n+# Motivation \n+Allow users to containerize arbitrary jar files without having to integrate Jib into java build tools (maven and gradle).\n+\n+# Proposal Changes\n+\n+## Standard Jar \n+A standard jar can be containerized in two modes, exploded or packaged. \n+\n+### Exploded Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY}`\n+The default mode for containerizing a jar. It will explode a jar into the following layers:  \n+- Dependencies Layer: Contains dependencies derived from `Class-Path` in jar manifest. Note that this layer will not be created if `Class-Path` is not present in the manifest.\n+- Resources Layer: Contains resources parsed from jar file. Note that it will also include `MANIFEST.MF`.\n+- Classes Layer: Contains classes parsed from jar file. \n+\n+**Entrypoint** : `java -cp /app/dependencies/ /app/explodedJar/ ${MAIN_CLASS}`\n+\n+### Packaged Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY} --mode packaged`.\n+This will result in the following layers on the container:\n+- Dependencies:  Contains the dependencies derived from `Class-Path` in jar manifest. Note that this layer will not be created if `Class-Path` is not present in the manifest.\n+- Jar Layer: Contains the original jar.\n+\n+**Entrypoint** : `java -jar ${JAR_NAME}.jar`\n+\n+## Spring-Boot Fat Jar\n+A Spring-Boot Fat Jar can be containerized in two modes, exploded or packaged. \n+\n+### Exploded Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY}`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc3OTI2NQ=="}, "originalCommit": {"oid": "38498904718d4a61354563ccf2de2788d5f9b328"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTg1NTE5OnYy", "diffSide": "RIGHT", "path": "proposals/cli-jar-processing.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowMjoyM1rOHlBqQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowMjoyM1rOHlBqQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4NjU2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            **Entrypoint** : `java -cp /app/dependencies/ /app/explodedJar/ ${MAIN_CLASS}`\n          \n          \n            \n            **Entrypoint** : `java -cp /app/dependencies/:/app/explodedJar/ ${MAIN_CLASS}`\n          \n      \n    \n    \n  \n\nWould be ; instead of : on Windows, but we don't support creating Windows images anyway.", "url": "https://github.com/GoogleContainerTools/jib/pull/2835#discussion_r508586562", "createdAt": "2020-10-20T15:02:23Z", "author": {"login": "chanseokoh"}, "path": "proposals/cli-jar-processing.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# Proposal : Jib CLI Jar Processing \n+\n+Relevant Issue: [#2796](https://github.com/GoogleContainerTools/jib/issues/2796)\n+\n+# Motivation \n+Allow users to containerize arbitrary jar files without having to integrate Jib into java build tools (maven and gradle) or use a `.yaml` jib cli buildfile.\n+\n+# Proposal Changes\n+\n+## Standard Jar \n+A standard jar can be containerized in two modes, exploded or packaged. \n+\n+### Exploded Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY}`\n+The default mode for containerizing a jar. It will explode a jar into the following layers:  \n+- Dependencies Layer: Contains dependencies derived from `Class-Path` in jar manifest. Note that this layer will not be created if `Class-Path` is not present in the manifest.\n+- Resources Layer: Contains resources parsed from jar file. Note that it will also include `MANIFEST.MF`.\n+- Classes Layer: Contains classes parsed from jar file. \n+\n+**Entrypoint** : `java -cp /app/dependencies/ /app/explodedJar/ ${MAIN_CLASS}`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06bd242363e23412947babd70c196455a92282e0"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTg2NzkwOnYy", "diffSide": "RIGHT", "path": "proposals/cli-jar-processing.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowNTowN1rOHlByog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzoxMDo1NVrOHlIiyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4ODcwNg==", "bodyText": "We can also create a snapshot dep layer in the non-Spring Boot case.", "url": "https://github.com/GoogleContainerTools/jib/pull/2835#discussion_r508588706", "createdAt": "2020-10-20T15:05:07Z", "author": {"login": "chanseokoh"}, "path": "proposals/cli-jar-processing.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# Proposal : Jib CLI Jar Processing \n+\n+Relevant Issue: [#2796](https://github.com/GoogleContainerTools/jib/issues/2796)\n+\n+# Motivation \n+Allow users to containerize arbitrary jar files without having to integrate Jib into java build tools (maven and gradle) or use a `.yaml` jib cli buildfile.\n+\n+# Proposal Changes\n+\n+## Standard Jar \n+A standard jar can be containerized in two modes, exploded or packaged. \n+\n+### Exploded Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY}`\n+The default mode for containerizing a jar. It will explode a jar into the following layers:  \n+- Dependencies Layer: Contains dependencies derived from `Class-Path` in jar manifest. Note that this layer will not be created if `Class-Path` is not present in the manifest.\n+- Resources Layer: Contains resources parsed from jar file. Note that it will also include `MANIFEST.MF`.\n+- Classes Layer: Contains classes parsed from jar file. \n+\n+**Entrypoint** : `java -cp /app/dependencies/ /app/explodedJar/ ${MAIN_CLASS}`\n+\n+### Packaged Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY} --mode packaged`.\n+It will result in the following layers on the container:\n+- Dependencies Layer: Contains the dependencies derived from `Class-Path` in jar manifest. Note that this layer will not be created if `Class-Path` is not present in the manifest.\n+- Jar Layer: Contains the original jar.\n+\n+**Entrypoint** : `java -jar ${JAR_NAME}.jar`\n+\n+## Spring-Boot Fat Jar\n+A Spring-Boot Fat Jar can be containerized in two modes, exploded or packaged. \n+\n+### Exploded Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY}`\n+The default mode for containerizing a jar. It will explode a jar according to what is specified in the `layers.idx` file of the jar, if present, or according to following format:\n+- Dependencies Layer: For a dependency whose version does not contain `SNAPSHOT`.\n+- Spring-Boot-Loader Layer: Contains jar loader classes.\n+- Snapshot-Dependencies Layer: For a dependency whose version contains `SNAPSHOT`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06bd242363e23412947babd70c196455a92282e0"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyNDcyOA==", "bodyText": "That is an interesting idea. I modified the standard jar description to include a snapshot dep layer. Will create an issue for this.", "url": "https://github.com/GoogleContainerTools/jib/pull/2835#discussion_r508624728", "createdAt": "2020-10-20T15:40:38Z", "author": {"login": "mpeddada1"}, "path": "proposals/cli-jar-processing.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# Proposal : Jib CLI Jar Processing \n+\n+Relevant Issue: [#2796](https://github.com/GoogleContainerTools/jib/issues/2796)\n+\n+# Motivation \n+Allow users to containerize arbitrary jar files without having to integrate Jib into java build tools (maven and gradle) or use a `.yaml` jib cli buildfile.\n+\n+# Proposal Changes\n+\n+## Standard Jar \n+A standard jar can be containerized in two modes, exploded or packaged. \n+\n+### Exploded Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY}`\n+The default mode for containerizing a jar. It will explode a jar into the following layers:  \n+- Dependencies Layer: Contains dependencies derived from `Class-Path` in jar manifest. Note that this layer will not be created if `Class-Path` is not present in the manifest.\n+- Resources Layer: Contains resources parsed from jar file. Note that it will also include `MANIFEST.MF`.\n+- Classes Layer: Contains classes parsed from jar file. \n+\n+**Entrypoint** : `java -cp /app/dependencies/ /app/explodedJar/ ${MAIN_CLASS}`\n+\n+### Packaged Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY} --mode packaged`.\n+It will result in the following layers on the container:\n+- Dependencies Layer: Contains the dependencies derived from `Class-Path` in jar manifest. Note that this layer will not be created if `Class-Path` is not present in the manifest.\n+- Jar Layer: Contains the original jar.\n+\n+**Entrypoint** : `java -jar ${JAR_NAME}.jar`\n+\n+## Spring-Boot Fat Jar\n+A Spring-Boot Fat Jar can be containerized in two modes, exploded or packaged. \n+\n+### Exploded Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY}`\n+The default mode for containerizing a jar. It will explode a jar according to what is specified in the `layers.idx` file of the jar, if present, or according to following format:\n+- Dependencies Layer: For a dependency whose version does not contain `SNAPSHOT`.\n+- Spring-Boot-Loader Layer: Contains jar loader classes.\n+- Snapshot-Dependencies Layer: For a dependency whose version contains `SNAPSHOT`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4ODcwNg=="}, "originalCommit": {"oid": "06bd242363e23412947babd70c196455a92282e0"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyODc0OA==", "bodyText": "Actually now that I'm looking at this again, what is the advantage of having a separate snapshot dependencies layer?", "url": "https://github.com/GoogleContainerTools/jib/pull/2835#discussion_r508628748", "createdAt": "2020-10-20T15:44:01Z", "author": {"login": "mpeddada1"}, "path": "proposals/cli-jar-processing.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# Proposal : Jib CLI Jar Processing \n+\n+Relevant Issue: [#2796](https://github.com/GoogleContainerTools/jib/issues/2796)\n+\n+# Motivation \n+Allow users to containerize arbitrary jar files without having to integrate Jib into java build tools (maven and gradle) or use a `.yaml` jib cli buildfile.\n+\n+# Proposal Changes\n+\n+## Standard Jar \n+A standard jar can be containerized in two modes, exploded or packaged. \n+\n+### Exploded Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY}`\n+The default mode for containerizing a jar. It will explode a jar into the following layers:  \n+- Dependencies Layer: Contains dependencies derived from `Class-Path` in jar manifest. Note that this layer will not be created if `Class-Path` is not present in the manifest.\n+- Resources Layer: Contains resources parsed from jar file. Note that it will also include `MANIFEST.MF`.\n+- Classes Layer: Contains classes parsed from jar file. \n+\n+**Entrypoint** : `java -cp /app/dependencies/ /app/explodedJar/ ${MAIN_CLASS}`\n+\n+### Packaged Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY} --mode packaged`.\n+It will result in the following layers on the container:\n+- Dependencies Layer: Contains the dependencies derived from `Class-Path` in jar manifest. Note that this layer will not be created if `Class-Path` is not present in the manifest.\n+- Jar Layer: Contains the original jar.\n+\n+**Entrypoint** : `java -jar ${JAR_NAME}.jar`\n+\n+## Spring-Boot Fat Jar\n+A Spring-Boot Fat Jar can be containerized in two modes, exploded or packaged. \n+\n+### Exploded Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY}`\n+The default mode for containerizing a jar. It will explode a jar according to what is specified in the `layers.idx` file of the jar, if present, or according to following format:\n+- Dependencies Layer: For a dependency whose version does not contain `SNAPSHOT`.\n+- Spring-Boot-Loader Layer: Contains jar loader classes.\n+- Snapshot-Dependencies Layer: For a dependency whose version contains `SNAPSHOT`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4ODcwNg=="}, "originalCommit": {"oid": "06bd242363e23412947babd70c196455a92282e0"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5OTMzOA==", "bodyText": "SNAPSHOT layers are generally those that are created from a non-release build of a project (like nightly). They could be built locally from a project (like we do for people testing jib in our CONTRIBUTING.md), or they could be something like a nightly build from a project between releases.\nAs a consequence snapshot dependencies are \"mutable\" in a sense (1.0-SNAPSHOT could be built every day with different results), they can change between builds. If we have frequently changing dependencies in the regular dependencies layer then that layer changes on every build and we have to push all dependencies up.\nIf we separate out snapshot dependencies, then we can isolate them from the more stable other regular dependencies and only rebuild/repush a snapshot layer.", "url": "https://github.com/GoogleContainerTools/jib/pull/2835#discussion_r508699338", "createdAt": "2020-10-20T17:10:55Z", "author": {"login": "loosebazooka"}, "path": "proposals/cli-jar-processing.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# Proposal : Jib CLI Jar Processing \n+\n+Relevant Issue: [#2796](https://github.com/GoogleContainerTools/jib/issues/2796)\n+\n+# Motivation \n+Allow users to containerize arbitrary jar files without having to integrate Jib into java build tools (maven and gradle) or use a `.yaml` jib cli buildfile.\n+\n+# Proposal Changes\n+\n+## Standard Jar \n+A standard jar can be containerized in two modes, exploded or packaged. \n+\n+### Exploded Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY}`\n+The default mode for containerizing a jar. It will explode a jar into the following layers:  \n+- Dependencies Layer: Contains dependencies derived from `Class-Path` in jar manifest. Note that this layer will not be created if `Class-Path` is not present in the manifest.\n+- Resources Layer: Contains resources parsed from jar file. Note that it will also include `MANIFEST.MF`.\n+- Classes Layer: Contains classes parsed from jar file. \n+\n+**Entrypoint** : `java -cp /app/dependencies/ /app/explodedJar/ ${MAIN_CLASS}`\n+\n+### Packaged Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY} --mode packaged`.\n+It will result in the following layers on the container:\n+- Dependencies Layer: Contains the dependencies derived from `Class-Path` in jar manifest. Note that this layer will not be created if `Class-Path` is not present in the manifest.\n+- Jar Layer: Contains the original jar.\n+\n+**Entrypoint** : `java -jar ${JAR_NAME}.jar`\n+\n+## Spring-Boot Fat Jar\n+A Spring-Boot Fat Jar can be containerized in two modes, exploded or packaged. \n+\n+### Exploded Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY}`\n+The default mode for containerizing a jar. It will explode a jar according to what is specified in the `layers.idx` file of the jar, if present, or according to following format:\n+- Dependencies Layer: For a dependency whose version does not contain `SNAPSHOT`.\n+- Spring-Boot-Loader Layer: Contains jar loader classes.\n+- Snapshot-Dependencies Layer: For a dependency whose version contains `SNAPSHOT`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4ODcwNg=="}, "originalCommit": {"oid": "06bd242363e23412947babd70c196455a92282e0"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTg4ODAzOnYy", "diffSide": "RIGHT", "path": "proposals/cli-jar-processing.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowOToxOVrOHlB_sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowOToxOVrOHlB_sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU5MjA0OQ==", "bodyText": "Maybe\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            **Entrypoint** : `java -cp . org.springframework.boot.loader.JarLauncher`\n          \n          \n            \n            **Entrypoint** : `java -cp /app org.springframework.boot.loader.JarLauncher`\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/GoogleContainerTools/jib/pull/2835#discussion_r508592049", "createdAt": "2020-10-20T15:09:19Z", "author": {"login": "chanseokoh"}, "path": "proposals/cli-jar-processing.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# Proposal : Jib CLI Jar Processing \n+\n+Relevant Issue: [#2796](https://github.com/GoogleContainerTools/jib/issues/2796)\n+\n+# Motivation \n+Allow users to containerize arbitrary jar files without having to integrate Jib into java build tools (maven and gradle) or use a `.yaml` jib cli buildfile.\n+\n+# Proposal Changes\n+\n+## Standard Jar \n+A standard jar can be containerized in two modes, exploded or packaged. \n+\n+### Exploded Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY}`\n+The default mode for containerizing a jar. It will explode a jar into the following layers:  \n+- Dependencies Layer: Contains dependencies derived from `Class-Path` in jar manifest. Note that this layer will not be created if `Class-Path` is not present in the manifest.\n+- Resources Layer: Contains resources parsed from jar file. Note that it will also include `MANIFEST.MF`.\n+- Classes Layer: Contains classes parsed from jar file. \n+\n+**Entrypoint** : `java -cp /app/dependencies/ /app/explodedJar/ ${MAIN_CLASS}`\n+\n+### Packaged Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY} --mode packaged`.\n+It will result in the following layers on the container:\n+- Dependencies Layer: Contains the dependencies derived from `Class-Path` in jar manifest. Note that this layer will not be created if `Class-Path` is not present in the manifest.\n+- Jar Layer: Contains the original jar.\n+\n+**Entrypoint** : `java -jar ${JAR_NAME}.jar`\n+\n+## Spring-Boot Fat Jar\n+A Spring-Boot Fat Jar can be containerized in two modes, exploded or packaged. \n+\n+### Exploded Mode\n+Achieved by calling `jib jar ${JAR_NAME}.jar --to ${TARGET_REGISTRY}`\n+The default mode for containerizing a jar. It will explode a jar according to what is specified in the `layers.idx` file of the jar, if present, or according to following format:\n+- Dependencies Layer: For a dependency whose version does not contain `SNAPSHOT`.\n+- Spring-Boot-Loader Layer: Contains jar loader classes.\n+- Snapshot-Dependencies Layer: For a dependency whose version contains `SNAPSHOT`.\n+- Resources Layer: Contains resources parsed from `BOOT-INF/classes/` in the jar and `META-INF/`.\n+- Classes Layer: Contains classes parsed from `BOOT-INF/classes/` in the jar.\n+\n+**Entrypoint** : `java -cp . org.springframework.boot.loader.JarLauncher`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06bd242363e23412947babd70c196455a92282e0"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4974, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}