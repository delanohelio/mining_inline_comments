{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMTA1MzM3", "number": 2778, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODoyNDozMVrOEmNhOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNToyMToyOFrOEomqVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTAyODQwOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODoyNDozMVrOHWG9-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzo0OTo0OVrOHW52lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0NDg5MA==", "bodyText": "If multiple platforms are given, this method should return multiple Images (i.e., List<Image> as ImagesAndRegistryClient.images). That is, it shouldn't use Collections.singletonList() on line 112.\nWe should also add a test for the case of multiple platforms.", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r492944890", "createdAt": "2020-09-22T18:24:31Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -97,9 +97,19 @@ public ImagesAndRegistryClient call()\n     // Skip this step if this is a scratch image\n     ImageReference imageReference = buildContext.getBaseImageConfiguration().getImage();\n     if (imageReference.isScratch()) {\n+      String architecture = \"\";\n+      String os = \"\";\n+      for (Platform platform : buildContext.getContainerConfiguration().getPlatforms()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb9c20bb95876c0b10b26ceb051c38b1b32f826c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3ODU4Mg==", "bodyText": "Right, good call. Changed this method to return multiple images if multiple platforms are given.", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r493778582", "createdAt": "2020-09-23T17:49:49Z", "author": {"login": "mpeddada1"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -97,9 +97,19 @@ public ImagesAndRegistryClient call()\n     // Skip this step if this is a scratch image\n     ImageReference imageReference = buildContext.getBaseImageConfiguration().getImage();\n     if (imageReference.isScratch()) {\n+      String architecture = \"\";\n+      String os = \"\";\n+      for (Platform platform : buildContext.getContainerConfiguration().getPlatforms()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0NDg5MA=="}, "originalCommit": {"oid": "eb9c20bb95876c0b10b26ceb051c38b1b32f826c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDk1OTYyOnYy", "diffSide": "RIGHT", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo0ODozMlrOHXAaBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo0ODozMlrOHXAaBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4NTk1Ng==", "bodyText": "By the way we designed this, we can assume platforms is never empty. Let's just say\nVerify.verify(!platforms.isEmpty());", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r493885956", "createdAt": "2020-09-23T20:48:32Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -97,9 +98,19 @@ public ImagesAndRegistryClient call()\n     // Skip this step if this is a scratch image\n     ImageReference imageReference = buildContext.getBaseImageConfiguration().getImage();\n     if (imageReference.isScratch()) {\n+      ImmutableSet<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();\n       eventHandlers.dispatch(LogEvent.progress(\"Getting scratch base image...\"));\n-      return new ImagesAndRegistryClient(\n-          Collections.singletonList(Image.builder(buildContext.getTargetFormat()).build()), null);\n+      if (platforms.isEmpty()) {\n+        return new ImagesAndRegistryClient(\n+            Collections.singletonList(Image.builder(buildContext.getTargetFormat()).build()), null);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba877d072512abd0fe000c1c850c4f6e47389dc"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDk2NzAxOnYy", "diffSide": "RIGHT", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo1MDo0NVrOHXAenw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo1MDo0NVrOHXAenw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4NzEzNQ==", "bodyText": "Since the platform is actually specified as \"slim arch\" and \"fat system\",\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void testCall_scratch_noPlatformSpecified()\n          \n          \n            \n              public void testCall_scratch_singlePlatform()", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r493887135", "createdAt": "2020-09-23T20:50:45Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -87,6 +87,40 @@ public void setUp() {\n     pullBaseImageStep = new PullBaseImageStep(buildContext, progressDispatcherFactory);\n   }\n \n+  @Test\n+  public void testCall_scratch_noPlatformSpecified()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba877d072512abd0fe000c1c850c4f6e47389dc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDk3MTU3OnYy", "diffSide": "RIGHT", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo1MjowNlrOHXAhcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo1MjowNlrOHXAhcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4Nzg1Nw==", "bodyText": "Nit: how about Mockito.when(imageConfiguration.getImage()).thenReturn(ImageReference.scratch());?", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r493887857", "createdAt": "2020-09-23T20:52:06Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -87,6 +87,40 @@ public void setUp() {\n     pullBaseImageStep = new PullBaseImageStep(buildContext, progressDispatcherFactory);\n   }\n \n+  @Test\n+  public void testCall_scratch_noPlatformSpecified()\n+      throws LayerPropertyNotFoundException, IOException, RegistryException,\n+          LayerCountMismatchException, BadContainerConfigurationFormatException,\n+          CacheCorruptedException, CredentialRetrievalException {\n+    ImageReference imageReference = ImageReference.scratch();\n+    Mockito.when(imageConfiguration.getImage()).thenReturn(imageReference);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba877d072512abd0fe000c1c850c4f6e47389dc"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDk3Mjg5OnYy", "diffSide": "RIGHT", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo1MjozMFrOHXAiTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo1MjozMFrOHXAiTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4ODA3Ng==", "bodyText": "Also\nAssert.assertEquals(1, result.images.size());", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r493888076", "createdAt": "2020-09-23T20:52:30Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -87,6 +87,40 @@ public void setUp() {\n     pullBaseImageStep = new PullBaseImageStep(buildContext, progressDispatcherFactory);\n   }\n \n+  @Test\n+  public void testCall_scratch_noPlatformSpecified()\n+      throws LayerPropertyNotFoundException, IOException, RegistryException,\n+          LayerCountMismatchException, BadContainerConfigurationFormatException,\n+          CacheCorruptedException, CredentialRetrievalException {\n+    ImageReference imageReference = ImageReference.scratch();\n+    Mockito.when(imageConfiguration.getImage()).thenReturn(imageReference);\n+    ImagesAndRegistryClient result = pullBaseImageStep.call();\n+\n+    Assert.assertEquals(\"slim arch\", result.images.get(0).getArchitecture());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba877d072512abd0fe000c1c850c4f6e47389dc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDk3MzUyOnYy", "diffSide": "RIGHT", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo1Mjo0MlrOHXAiqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo1Mjo0MlrOHXAiqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4ODE2OA==", "bodyText": "Also\nAssert.assertEquals(2, result.images.size());", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r493888168", "createdAt": "2020-09-23T20:52:42Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -87,6 +87,40 @@ public void setUp() {\n     pullBaseImageStep = new PullBaseImageStep(buildContext, progressDispatcherFactory);\n   }\n \n+  @Test\n+  public void testCall_scratch_noPlatformSpecified()\n+      throws LayerPropertyNotFoundException, IOException, RegistryException,\n+          LayerCountMismatchException, BadContainerConfigurationFormatException,\n+          CacheCorruptedException, CredentialRetrievalException {\n+    ImageReference imageReference = ImageReference.scratch();\n+    Mockito.when(imageConfiguration.getImage()).thenReturn(imageReference);\n+    ImagesAndRegistryClient result = pullBaseImageStep.call();\n+\n+    Assert.assertEquals(\"slim arch\", result.images.get(0).getArchitecture());\n+    Assert.assertEquals(\"fat system\", result.images.get(0).getOs());\n+    Assert.assertNull(result.registryClient);\n+  }\n+\n+  @Test\n+  public void testCall_scratch_multiplePlatformsSpecified()\n+      throws LayerPropertyNotFoundException, IOException, RegistryException,\n+          LayerCountMismatchException, BadContainerConfigurationFormatException,\n+          CacheCorruptedException, CredentialRetrievalException {\n+    ImageReference imageReference = ImageReference.scratch();\n+    Mockito.when(imageConfiguration.getImage()).thenReturn(imageReference);\n+    Mockito.when(containerConfig.getPlatforms())\n+        .thenReturn(\n+            ImmutableSet.of(\n+                new Platform(\"architecture1\", \"os1\"), new Platform(\"architecture2\", \"os2\")));\n+    ImagesAndRegistryClient result = pullBaseImageStep.call();\n+\n+    Assert.assertEquals(\"architecture1\", result.images.get(0).getArchitecture());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba877d072512abd0fe000c1c850c4f6e47389dc"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDk3NDUyOnYy", "diffSide": "RIGHT", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo1Mjo1OFrOHXAjNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo1Mjo1OFrOHXAjNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4ODMwOA==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r493888308", "createdAt": "2020-09-23T20:52:58Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStepTest.java", "diffHunk": "@@ -87,6 +87,40 @@ public void setUp() {\n     pullBaseImageStep = new PullBaseImageStep(buildContext, progressDispatcherFactory);\n   }\n \n+  @Test\n+  public void testCall_scratch_noPlatformSpecified()\n+      throws LayerPropertyNotFoundException, IOException, RegistryException,\n+          LayerCountMismatchException, BadContainerConfigurationFormatException,\n+          CacheCorruptedException, CredentialRetrievalException {\n+    ImageReference imageReference = ImageReference.scratch();\n+    Mockito.when(imageConfiguration.getImage()).thenReturn(imageReference);\n+    ImagesAndRegistryClient result = pullBaseImageStep.call();\n+\n+    Assert.assertEquals(\"slim arch\", result.images.get(0).getArchitecture());\n+    Assert.assertEquals(\"fat system\", result.images.get(0).getOs());\n+    Assert.assertNull(result.registryClient);\n+  }\n+\n+  @Test\n+  public void testCall_scratch_multiplePlatformsSpecified()\n+      throws LayerPropertyNotFoundException, IOException, RegistryException,\n+          LayerCountMismatchException, BadContainerConfigurationFormatException,\n+          CacheCorruptedException, CredentialRetrievalException {\n+    ImageReference imageReference = ImageReference.scratch();\n+    Mockito.when(imageConfiguration.getImage()).thenReturn(imageReference);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba877d072512abd0fe000c1c850c4f6e47389dc"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDk4NDU4OnYy", "diffSide": "RIGHT", "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/JibIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo1NjowNFrOHXApZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoxNzoxMlrOHZvhRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4OTg5NQ==", "bodyText": "I think we should test non-default values, such as \"windows.\"", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r493889895", "createdAt": "2020-09-23T20:56:04Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/JibIntegrationTest.java", "diffHunk": "@@ -220,19 +222,44 @@ public void testBasic_tarBaseImage_jibImageToDockerDaemon()\n   }\n \n   @Test\n-  public void testScratch()\n+  public void testScratch_singlePlatform()\n       throws IOException, InterruptedException, ExecutionException, RegistryException,\n           CacheDirectoryCreationException {\n     ImageReference targetImageReference =\n         ImageReference.of(\"localhost:5000\", \"jib-core\", \"basic-scratch\");\n-    Jib.fromScratch().containerize(getLocalRegistryContainerizer(targetImageReference));\n+    Jib.fromScratch()\n+        .setPlatforms(ImmutableSet.of(new Platform(\"arm64\", \"linux\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba877d072512abd0fe000c1c850c4f6e47389dc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NTAxMg==", "bodyText": "Modified the tests to use non-default values.", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r496755012", "createdAt": "2020-09-29T14:17:12Z", "author": {"login": "mpeddada1"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/JibIntegrationTest.java", "diffHunk": "@@ -220,19 +222,44 @@ public void testBasic_tarBaseImage_jibImageToDockerDaemon()\n   }\n \n   @Test\n-  public void testScratch()\n+  public void testScratch_singlePlatform()\n       throws IOException, InterruptedException, ExecutionException, RegistryException,\n           CacheDirectoryCreationException {\n     ImageReference targetImageReference =\n         ImageReference.of(\"localhost:5000\", \"jib-core\", \"basic-scratch\");\n-    Jib.fromScratch().containerize(getLocalRegistryContainerizer(targetImageReference));\n+    Jib.fromScratch()\n+        .setPlatforms(ImmutableSet.of(new Platform(\"arm64\", \"linux\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4OTg5NQ=="}, "originalCommit": {"oid": "7ba877d072512abd0fe000c1c850c4f6e47389dc"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDk4NTc2OnYy", "diffSide": "RIGHT", "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/JibIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo1NjoyNVrOHXAqIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoxNzo1OFrOHZvjjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg5MDA4Mw==", "bodyText": "ditto", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r493890083", "createdAt": "2020-09-23T20:56:25Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/JibIntegrationTest.java", "diffHunk": "@@ -220,19 +222,44 @@ public void testBasic_tarBaseImage_jibImageToDockerDaemon()\n   }\n \n   @Test\n-  public void testScratch()\n+  public void testScratch_singlePlatform()\n       throws IOException, InterruptedException, ExecutionException, RegistryException,\n           CacheDirectoryCreationException {\n     ImageReference targetImageReference =\n         ImageReference.of(\"localhost:5000\", \"jib-core\", \"basic-scratch\");\n-    Jib.fromScratch().containerize(getLocalRegistryContainerizer(targetImageReference));\n+    Jib.fromScratch()\n+        .setPlatforms(ImmutableSet.of(new Platform(\"arm64\", \"linux\")))\n+        .containerize(getLocalRegistryContainerizer(targetImageReference));\n \n     // Check that resulting image has no layers\n     localRegistry.pull(targetImageReference.toString());\n     String inspectOutput = new Command(\"docker\", \"inspect\", targetImageReference.toString()).run();\n     Assert.assertFalse(\n         \"docker inspect output contained layers: \" + inspectOutput,\n         inspectOutput.contains(\"\\\"Layers\\\": [\"));\n+\n+    // Check that resulting image has specified architecture and os set.\n+    Assert.assertTrue(inspectOutput.contains(\"\\\"Architecture\\\": \\\"arm64\\\"\"));\n+    Assert.assertTrue(inspectOutput.contains(\"\\\"Os\\\": \\\"linux\\\"\"));\n+  }\n+\n+  @Test\n+  public void testScratch_multiPlatform()\n+      throws IOException, InterruptedException, ExecutionException, RegistryException,\n+          CacheDirectoryCreationException {\n+    // TODO: Modify this test to check for multiple platforms instead of throwing exception once\n+    // multi-platform feature is enabled.\n+    ImageReference targetImageReference =\n+        ImageReference.of(\"localhost:5000\", \"jib-core\", \"basic-scratch\");\n+    try {\n+      Jib.fromScratch()\n+          .setPlatforms(\n+              ImmutableSet.of(new Platform(\"arm64\", \"linux\"), new Platform(\"amd64\", \"linux\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba877d072512abd0fe000c1c850c4f6e47389dc"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NTU5Ng==", "bodyText": "Done:)", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r496755596", "createdAt": "2020-09-29T14:17:58Z", "author": {"login": "mpeddada1"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/JibIntegrationTest.java", "diffHunk": "@@ -220,19 +222,44 @@ public void testBasic_tarBaseImage_jibImageToDockerDaemon()\n   }\n \n   @Test\n-  public void testScratch()\n+  public void testScratch_singlePlatform()\n       throws IOException, InterruptedException, ExecutionException, RegistryException,\n           CacheDirectoryCreationException {\n     ImageReference targetImageReference =\n         ImageReference.of(\"localhost:5000\", \"jib-core\", \"basic-scratch\");\n-    Jib.fromScratch().containerize(getLocalRegistryContainerizer(targetImageReference));\n+    Jib.fromScratch()\n+        .setPlatforms(ImmutableSet.of(new Platform(\"arm64\", \"linux\")))\n+        .containerize(getLocalRegistryContainerizer(targetImageReference));\n \n     // Check that resulting image has no layers\n     localRegistry.pull(targetImageReference.toString());\n     String inspectOutput = new Command(\"docker\", \"inspect\", targetImageReference.toString()).run();\n     Assert.assertFalse(\n         \"docker inspect output contained layers: \" + inspectOutput,\n         inspectOutput.contains(\"\\\"Layers\\\": [\"));\n+\n+    // Check that resulting image has specified architecture and os set.\n+    Assert.assertTrue(inspectOutput.contains(\"\\\"Architecture\\\": \\\"arm64\\\"\"));\n+    Assert.assertTrue(inspectOutput.contains(\"\\\"Os\\\": \\\"linux\\\"\"));\n+  }\n+\n+  @Test\n+  public void testScratch_multiPlatform()\n+      throws IOException, InterruptedException, ExecutionException, RegistryException,\n+          CacheDirectoryCreationException {\n+    // TODO: Modify this test to check for multiple platforms instead of throwing exception once\n+    // multi-platform feature is enabled.\n+    ImageReference targetImageReference =\n+        ImageReference.of(\"localhost:5000\", \"jib-core\", \"basic-scratch\");\n+    try {\n+      Jib.fromScratch()\n+          .setPlatforms(\n+              ImmutableSet.of(new Platform(\"arm64\", \"linux\"), new Platform(\"amd64\", \"linux\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg5MDA4Mw=="}, "originalCommit": {"oid": "7ba877d072512abd0fe000c1c850c4f6e47389dc"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDA4NzE0OnYy", "diffSide": "RIGHT", "path": "jib-core/CHANGELOG.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNToxNToyOFrOHZyZBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNToxNToyOFrOHZyZBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwMjA1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Allow setting platform when building image from scratch. [#2765](https://github.com/GoogleContainerTools/jib/issues/2765)\n          \n          \n            \n            - Allow setting platform when building image from scratch. [#2765](https://github.com/GoogleContainerTools/jib/issues/2765))", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r496802054", "createdAt": "2020-09-29T15:15:28Z", "author": {"login": "chanseokoh"}, "path": "jib-core/CHANGELOG.md", "diffHunk": "@@ -5,6 +5,7 @@ All notable changes to this project will be documented in this file.\n \n ### Added\n \n+- Allow setting platform when building image from scratch. [#2765](https://github.com/GoogleContainerTools/jib/issues/2765)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aea8ec594c804555142947d67cf82c1791dfc17"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDExOTI1OnYy", "diffSide": "RIGHT", "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/JibIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNToyMToyOFrOHZysvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNToyMToyOFrOHZysvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwNzEwMA==", "bodyText": "private static", "url": "https://github.com/GoogleContainerTools/jib/pull/2778#discussion_r496807100", "createdAt": "2020-09-29T15:21:28Z", "author": {"login": "chanseokoh"}, "path": "jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/JibIntegrationTest.java", "diffHunk": "@@ -326,4 +386,18 @@ public void testManifestListReferenceByShaDoesNotFail()\n     Jib.from(sourceImageReferenceAsManifestList).containerize(containerizer);\n     // pass, no exceptions thrown\n   }\n+\n+  public RegistryClient getRegistryClient(ImageReference imageReference, Credential credential) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aea8ec594c804555142947d67cf82c1791dfc17"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4918, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}