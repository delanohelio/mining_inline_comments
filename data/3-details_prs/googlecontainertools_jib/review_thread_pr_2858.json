{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NTY3Mjk4", "number": 2858, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToyODoyNVrOEw84dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToyOTozNlrOEw853A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzY0NTk3OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToyODoyNVrOHm0hRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToyODoyNVrOHm0hRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2ODQyMA==", "bodyText": "I think it's okay to embed the predicate. And I think the name 'isSnapshot' is fine in this local scope.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          .filter(isNotSnapshotDependency)\n          \n          \n            \n                          .filter(isSnapshot.negate())", "url": "https://github.com/GoogleContainerTools/jib/pull/2858#discussion_r510468420", "createdAt": "2020-10-22T21:28:25Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -82,27 +82,48 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     ZipUtil.unzip(jarPath, localExplodedJarRoot);\n     List<FileEntriesLayer> layers = new ArrayList<>();\n \n-    // Get dependencies from Class-Path in the jar's manifest and add a layer with these\n-    // dependencies as entries. If Class-Path is not present in the jar's manifest then skip adding\n-    // a dependencies layer.\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n+    // and snapshot dependencies. If Class-Path is not present in the jar's manifest then skip\n+    // adding a dependencies layer.\n     String classPath = null;\n     try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n       classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n     }\n+\n     if (classPath != null) {\n-      List<Path> dependencies =\n-          Splitter.onPattern(\"\\\\s+\")\n-              .splitToList(classPath.trim())\n+      Predicate<String> isSnapshotDependency = name -> name.contains(\"SNAPSHOT\");\n+      Predicate<String> isNotSnapshotDependency = isSnapshotDependency.negate();\n+      List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n+      List<Path> nonSnapshotDependencies =\n+          allDependencies\n+              .stream()\n+              .filter(isNotSnapshotDependency)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec21a715e3b5024af0ea7eccedde7cbd9d4d3e0a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzY0ODgzOnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToyOToyMVrOHm0i4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMTo1OTo1N1rOHm1ZAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2ODgzNQ==", "bodyText": "For consistency, let's use the name as defined by JavaContainerBuilder.LayerType.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        FileEntriesLayer.builder().setName(\"nonSnapshotDependencies\");\n          \n          \n            \n                        FileEntriesLayer.builder().setName(\"dependencies\");", "url": "https://github.com/GoogleContainerTools/jib/pull/2858#discussion_r510468835", "createdAt": "2020-10-22T21:29:21Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -82,27 +82,48 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     ZipUtil.unzip(jarPath, localExplodedJarRoot);\n     List<FileEntriesLayer> layers = new ArrayList<>();\n \n-    // Get dependencies from Class-Path in the jar's manifest and add a layer with these\n-    // dependencies as entries. If Class-Path is not present in the jar's manifest then skip adding\n-    // a dependencies layer.\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n+    // and snapshot dependencies. If Class-Path is not present in the jar's manifest then skip\n+    // adding a dependencies layer.\n     String classPath = null;\n     try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n       classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n     }\n+\n     if (classPath != null) {\n-      List<Path> dependencies =\n-          Splitter.onPattern(\"\\\\s+\")\n-              .splitToList(classPath.trim())\n+      Predicate<String> isSnapshotDependency = name -> name.contains(\"SNAPSHOT\");\n+      Predicate<String> isNotSnapshotDependency = isSnapshotDependency.negate();\n+      List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n+      List<Path> nonSnapshotDependencies =\n+          allDependencies\n+              .stream()\n+              .filter(isNotSnapshotDependency)\n+              .map(Paths::get)\n+              .collect(Collectors.toList());\n+      List<Path> snapshotDependencies =\n+          allDependencies\n               .stream()\n+              .filter(isSnapshotDependency)\n               .map(Paths::get)\n               .collect(Collectors.toList());\n-      FileEntriesLayer.Builder dependenciesLayerBuilder =\n-          FileEntriesLayer.builder().setName(\"dependencies\");\n-      dependencies.forEach(\n-          path ->\n-              dependenciesLayerBuilder.addEntry(\n-                  path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n-      layers.add(dependenciesLayerBuilder.build());\n+      if (!nonSnapshotDependencies.isEmpty()) {\n+        FileEntriesLayer.Builder nonSnapshotDependenciesLayerBuilder =\n+            FileEntriesLayer.builder().setName(\"nonSnapshotDependencies\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec21a715e3b5024af0ea7eccedde7cbd9d4d3e0a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ4MjY5MQ==", "bodyText": "ah yes, nice catch", "url": "https://github.com/GoogleContainerTools/jib/pull/2858#discussion_r510482691", "createdAt": "2020-10-22T21:59:57Z", "author": {"login": "mpeddada1"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -82,27 +82,48 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     ZipUtil.unzip(jarPath, localExplodedJarRoot);\n     List<FileEntriesLayer> layers = new ArrayList<>();\n \n-    // Get dependencies from Class-Path in the jar's manifest and add a layer with these\n-    // dependencies as entries. If Class-Path is not present in the jar's manifest then skip adding\n-    // a dependencies layer.\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n+    // and snapshot dependencies. If Class-Path is not present in the jar's manifest then skip\n+    // adding a dependencies layer.\n     String classPath = null;\n     try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n       classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n     }\n+\n     if (classPath != null) {\n-      List<Path> dependencies =\n-          Splitter.onPattern(\"\\\\s+\")\n-              .splitToList(classPath.trim())\n+      Predicate<String> isSnapshotDependency = name -> name.contains(\"SNAPSHOT\");\n+      Predicate<String> isNotSnapshotDependency = isSnapshotDependency.negate();\n+      List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n+      List<Path> nonSnapshotDependencies =\n+          allDependencies\n+              .stream()\n+              .filter(isNotSnapshotDependency)\n+              .map(Paths::get)\n+              .collect(Collectors.toList());\n+      List<Path> snapshotDependencies =\n+          allDependencies\n               .stream()\n+              .filter(isSnapshotDependency)\n               .map(Paths::get)\n               .collect(Collectors.toList());\n-      FileEntriesLayer.Builder dependenciesLayerBuilder =\n-          FileEntriesLayer.builder().setName(\"dependencies\");\n-      dependencies.forEach(\n-          path ->\n-              dependenciesLayerBuilder.addEntry(\n-                  path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n-      layers.add(dependenciesLayerBuilder.build());\n+      if (!nonSnapshotDependencies.isEmpty()) {\n+        FileEntriesLayer.Builder nonSnapshotDependenciesLayerBuilder =\n+            FileEntriesLayer.builder().setName(\"nonSnapshotDependencies\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2ODgzNQ=="}, "originalCommit": {"oid": "ec21a715e3b5024af0ea7eccedde7cbd9d4d3e0a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzY0OTU2OnYy", "diffSide": "RIGHT", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToyOTozNlrOHm0jXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMToyOTozNlrOHm0jXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2ODk1OQ==", "bodyText": "Likewise,\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        FileEntriesLayer.builder().setName(\"snapshotDependencies\");\n          \n          \n            \n                        FileEntriesLayer.builder().setName(\"snapshot dependencies\");", "url": "https://github.com/GoogleContainerTools/jib/pull/2858#discussion_r510468959", "createdAt": "2020-10-22T21:29:36Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -82,27 +82,48 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     ZipUtil.unzip(jarPath, localExplodedJarRoot);\n     List<FileEntriesLayer> layers = new ArrayList<>();\n \n-    // Get dependencies from Class-Path in the jar's manifest and add a layer with these\n-    // dependencies as entries. If Class-Path is not present in the jar's manifest then skip adding\n-    // a dependencies layer.\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n+    // and snapshot dependencies. If Class-Path is not present in the jar's manifest then skip\n+    // adding a dependencies layer.\n     String classPath = null;\n     try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n       classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n     }\n+\n     if (classPath != null) {\n-      List<Path> dependencies =\n-          Splitter.onPattern(\"\\\\s+\")\n-              .splitToList(classPath.trim())\n+      Predicate<String> isSnapshotDependency = name -> name.contains(\"SNAPSHOT\");\n+      Predicate<String> isNotSnapshotDependency = isSnapshotDependency.negate();\n+      List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n+      List<Path> nonSnapshotDependencies =\n+          allDependencies\n+              .stream()\n+              .filter(isNotSnapshotDependency)\n+              .map(Paths::get)\n+              .collect(Collectors.toList());\n+      List<Path> snapshotDependencies =\n+          allDependencies\n               .stream()\n+              .filter(isSnapshotDependency)\n               .map(Paths::get)\n               .collect(Collectors.toList());\n-      FileEntriesLayer.Builder dependenciesLayerBuilder =\n-          FileEntriesLayer.builder().setName(\"dependencies\");\n-      dependencies.forEach(\n-          path ->\n-              dependenciesLayerBuilder.addEntry(\n-                  path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n-      layers.add(dependenciesLayerBuilder.build());\n+      if (!nonSnapshotDependencies.isEmpty()) {\n+        FileEntriesLayer.Builder nonSnapshotDependenciesLayerBuilder =\n+            FileEntriesLayer.builder().setName(\"nonSnapshotDependencies\");\n+        nonSnapshotDependencies.forEach(\n+            path ->\n+                nonSnapshotDependenciesLayerBuilder.addEntry(\n+                    path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n+        layers.add(nonSnapshotDependenciesLayerBuilder.build());\n+      }\n+      if (!snapshotDependencies.isEmpty()) {\n+        FileEntriesLayer.Builder snapshotDependenciesLayerBuilder =\n+            FileEntriesLayer.builder().setName(\"snapshotDependencies\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec21a715e3b5024af0ea7eccedde7cbd9d4d3e0a"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4992, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}