{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0ODMwMzEw", "number": 2606, "title": "Add validation to required yaml properties", "bodyText": "Only check required values\nAdd validator class with standard error messages\nAdd in tests for value validation\n\nWhy not @JsonInclude?\nBecause @JsonCreator and @JsonInclude do not work at all\nwith eachother. We use @JsonCreator since it handles required fields\nand we can validate non-null, non-empty at creation time. Using @JsonInclude\nwith jackson bean initialized of fields (vs creator) would give us access\nto automatic non-null, non-empty validation, but we would have to push\nour own required infrastructure. This cannot happen at yaml parse time, and\nwould happen after parsing in some sort of post-parsing step (or there is some\njackson validation framework that I was unable to find). I find the\n@JsonCreator workflow slightly cleaner.\npart of #2570", "createdAt": "2020-07-22T01:42:52Z", "url": "https://github.com/GoogleContainerTools/jib/pull/2606", "merged": true, "mergeCommit": {"oid": "0c9aa114ce5cddcd979c75391cadd5320e0dff45"}, "closed": true, "closedAt": "2020-07-22T23:41:29Z", "author": {"login": "loosebazooka"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3QrG6gH2gAyNDU0ODMwMzEwOjYyODVlYzQ2NGU4ZGU1NzU2MTEzZDYzNmRhNTJjYTAyNjBjYTZkYWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3gqJhgFqTQ1MzY1MDkzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6285ec464e8de5756113d636da52ca0260ca6daf", "author": {"user": {"login": "loosebazooka", "name": "Appu"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/6285ec464e8de5756113d636da52ca0260ca6daf", "committedDate": "2020-07-22T01:37:29Z", "message": "Add validation to required yaml properties\n\n- Only check required values\n- Add validator class with standard error messages\n- Add in tests for value validation\n\nWhy not `@JsonInclude`?\nBecause `@JsonCreator` and `@JsonInclude` do not work at all\nwith eachother. We use @JsonCreator since it handles \"required\" fields\nand we can validate non null, non empty at creation time. Using `@JsonInclude`\nwith jackson bean initialized of fields (vs creator) would give us access\nto automatic non-null, non-empty validation, but we would have to push\nour own \"required\" infrastructure. This cannot happen at yaml parse time, and\nwould happen after parsing in some sort of post-parsing step (or there is some\njackson validation framework that I was unable to find). I find the\n`@JsonCreator` workflow slightly cleaner."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMzYzMjcy", "url": "https://github.com/GoogleContainerTools/jib/pull/2606#pullrequestreview-453363272", "createdAt": "2020-07-22T14:18:04Z", "commit": {"oid": "6285ec464e8de5756113d636da52ca0260ca6daf"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoxODowNFrOG1klTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoyODo0MlrOG1lE0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNzA4NQ==", "bodyText": "Should we annotate @Nullable on value?\nBTW, Guava checkNotNull returns the input object like the following, although we don't need to follow the same pattern, of course.\nthis.something = Preconditions.checkNotNull(something);", "url": "https://github.com/GoogleContainerTools/jib/pull/2606#discussion_r458827085", "createdAt": "2020-07-22T14:18:04Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.Collection;\n+\n+/**\n+ * Utility helper class to detect errors in parsed yaml values. This class is mostly concerned with\n+ * error message formatting, checking is delegated to guava.\n+ */\n+public class Validator {\n+\n+  /**\n+   * Checks if an object reference is not null.\n+   *\n+   * @param value the object in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   */\n+  public static void checkNotNull(Object value, String propertyName) {\n+    Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6285ec464e8de5756113d636da52ca0260ca6daf"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyODU3OA==", "bodyText": "@Nullable arg?", "url": "https://github.com/GoogleContainerTools/jib/pull/2606#discussion_r458828578", "createdAt": "2020-07-22T14:20:03Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.Collection;\n+\n+/**\n+ * Utility helper class to detect errors in parsed yaml values. This class is mostly concerned with\n+ * error message formatting, checking is delegated to guava.\n+ */\n+public class Validator {\n+\n+  /**\n+   * Checks if an object reference is not null.\n+   *\n+   * @param value the object in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   */\n+  public static void checkNotNull(Object value, String propertyName) {\n+    Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n+  }\n+\n+  /**\n+   * Checks if string is null, empty or only whitespace.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNotEmpty(String value, String propertyName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6285ec464e8de5756113d636da52ca0260ca6daf"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzMTIwOA==", "bodyText": "Interesting. So the mapper catches runtime exceptions and wraps it with JsonProcessingException after attaching the underlying runtime exception message?", "url": "https://github.com/GoogleContainerTools/jib/pull/2606#discussion_r458831208", "createdAt": "2020-07-22T14:23:34Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpecTest.java", "diffHunk": "@@ -46,26 +46,78 @@ public void testArchiveLayerSpec_nameRequired() {\n     String data = \"archive: out/archive\";\n \n     try {\n-      archiveLayerSpecMapper.readValue(data, ArchiveLayerSpec.class);\n+      mapper.readValue(data, ArchiveLayerSpec.class);\n       Assert.fail();\n     } catch (JsonProcessingException jpe) {\n       MatcherAssert.assertThat(\n           jpe.getMessage(), CoreMatchers.startsWith(\"Missing required creator property 'name'\"));\n     }\n   }\n \n+  @Test\n+  public void testArchiveLayerSpec_nameNonNull() {\n+    String data = \"name: null\\n\" + \"archive: out/archive\";\n+\n+    try {\n+      mapper.readValue(data, ArchiveLayerSpec.class);\n+      Assert.fail();\n+    } catch (JsonProcessingException jpe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6285ec464e8de5756113d636da52ca0260ca6daf"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzMzY5Ng==", "bodyText": "@Nullable arg?", "url": "https://github.com/GoogleContainerTools/jib/pull/2606#discussion_r458833696", "createdAt": "2020-07-22T14:26:41Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.Collection;\n+\n+/**\n+ * Utility helper class to detect errors in parsed yaml values. This class is mostly concerned with\n+ * error message formatting, checking is delegated to guava.\n+ */\n+public class Validator {\n+\n+  /**\n+   * Checks if an object reference is not null.\n+   *\n+   * @param value the object in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   */\n+  public static void checkNotNull(Object value, String propertyName) {\n+    Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n+  }\n+\n+  /**\n+   * Checks if string is null, empty or only whitespace.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNotEmpty(String value, String propertyName) {\n+    checkNotNull(value, propertyName);\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is null or empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   * @throws IllegalArgumentException if {@code value} is empty\n+   */\n+  public static void checkNotEmpty(Collection<?> value, String propertyName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6285ec464e8de5756113d636da52ca0260ca6daf"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzNTE1NQ==", "bodyText": "value.equals(expectedValue) for extra safety since we can't prevent the caller from passing null to expectedValue?", "url": "https://github.com/GoogleContainerTools/jib/pull/2606#discussion_r458835155", "createdAt": "2020-07-22T14:28:42Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.Collection;\n+\n+/**\n+ * Utility helper class to detect errors in parsed yaml values. This class is mostly concerned with\n+ * error message formatting, checking is delegated to guava.\n+ */\n+public class Validator {\n+\n+  /**\n+   * Checks if an object reference is not null.\n+   *\n+   * @param value the object in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   */\n+  public static void checkNotNull(Object value, String propertyName) {\n+    Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n+  }\n+\n+  /**\n+   * Checks if string is null, empty or only whitespace.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNotEmpty(String value, String propertyName) {\n+    checkNotNull(value, propertyName);\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is null or empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws NullPointerException if {@code value} is null\n+   * @throws IllegalArgumentException if {@code value} is empty\n+   */\n+  public static void checkNotEmpty(Collection<?> value, String propertyName) {\n+    checkNotNull(value, propertyName);\n+    Preconditions.checkArgument(\n+        !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n+  }\n+\n+  /**\n+   * Checks if string is what is expected.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @param expectedValue the value we expect {@code value} to be\n+   * @throws NullPointerException if {@code value} is null\n+   * @throws IllegalArgumentException if {@code value} is not equal to {@code expectedValue}\n+   */\n+  public static void checkEquals(String value, String propertyName, String expectedValue) {\n+    checkNotNull(value, propertyName);\n+    Preconditions.checkArgument(\n+        expectedValue.equals(value),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6285ec464e8de5756113d636da52ca0260ca6daf"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e27fb62c65b6ac33a071cb8a0db9e886f8a161d", "author": {"user": {"login": "loosebazooka", "name": "Appu"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/5e27fb62c65b6ac33a071cb8a0db9e886f8a161d", "committedDate": "2020-07-22T18:38:02Z", "message": "Remove checkNotNull wrapper, add @Nullable\n\nTurns out nullaway has special code to handle Preconditions\nconditions. Wrapping checkNotNull didn't trigger the correct\nnull analysis. Removing as we don't use it directly. Each\ncheck now does its own nullness check directly."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNjUwOTMx", "url": "https://github.com/GoogleContainerTools/jib/pull/2606#pullrequestreview-453650931", "createdAt": "2020-07-22T20:14:55Z", "commit": {"oid": "5e27fb62c65b6ac33a071cb8a0db9e886f8a161d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 116, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}