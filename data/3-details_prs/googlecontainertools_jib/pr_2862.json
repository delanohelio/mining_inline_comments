{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MzAyMjU1", "number": 2862, "title": "Compute entrypoint for a standard jar in exploded mode.", "bodyText": "For #2845\nThis PR also contains some minor refactorings.", "createdAt": "2020-10-24T01:25:22Z", "url": "https://github.com/GoogleContainerTools/jib/pull/2862", "merged": true, "mergeCommit": {"oid": "dbba0c640e968140b085fc8cba7495113f9770e9"}, "closed": true, "closedAt": "2020-10-27T20:12:40Z", "author": {"login": "mpeddada1"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVgx66AH2gAyNTA5MzAyMjU1OjdmNGU4M2ZkYzIyMTdkMjU4YWI5ZDNkNGJhNTljZWZmNDc1OWE5MGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWtzXSAFqTUxODA0NzY0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7f4e83fdc2217d258ab9d3d4ba59ceff4759a90f", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/7f4e83fdc2217d258ab9d3d4ba59ceff4759a90f", "committedDate": "2020-10-24T01:21:08Z", "message": "Add method to compute entrypoint for standard jar in exploded mode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODA5OTc5", "url": "https://github.com/GoogleContainerTools/jib/pull/2862#pullrequestreview-516809979", "createdAt": "2020-10-26T14:05:20Z", "commit": {"oid": "7f4e83fdc2217d258ab9d3d4ba59ceff4759a90f"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDowNToyMFrOHoRE_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDozNDowN1rOHoSbDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4NDg5Mw==", "bodyText": "I remember this used to be caught by the formatter. Maybe not anymore.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Compute the entrypoint for a standard jar in exploded mode.\n          \n          \n            \n               * Computes the entrypoint for a standard jar in exploded mode.", "url": "https://github.com/GoogleContainerTools/jib/pull/2862#discussion_r511984893", "createdAt": "2020-10-26T14:05:20Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -145,6 +149,42 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Compute the entrypoint for a standard jar in exploded mode.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4e83fdc2217d258ab9d3d4ba59ceff4759a90f"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4ODE3Mw==", "bodyText": "Just so you know, if you don't need a nested directory or multiple directories, you can use the root: temporaryFolder.getRoot().toPath().", "url": "https://github.com/GoogleContainerTools/jib/pull/2862#discussion_r511988173", "createdAt": "2020-10-26T14:09:45Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -281,4 +282,46 @@ public void testExplodeMode_standard_withoutClassPathInManifest_containsOnlyClas\n             AbsoluteUnixPath.get(\"/app/explodedJar/class1.class\"),\n             AbsoluteUnixPath.get(\"/app/explodedJar/class2.class\"));\n   }\n+\n+  @Test\n+  public void testExplodeMode_standard_computeEntrypoint_allLayersPresent()\n+      throws IOException, URISyntaxException {\n+    Path standardJar =\n+        Paths.get(Resources.getResource(STANDARD_JAR_WITH_CLASS_PATH_MANIFEST).toURI());\n+    Path destDir = temporaryFolder.newFolder().toPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4e83fdc2217d258ab9d3d4ba59ceff4759a90f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4OTI3OA==", "bodyText": "Using _ is only accepted in test method names. computeEntrypointForExplodedStandard()?\nAnd I don't know who will require this method, but you should always double-checking if a method may have a narrower access scope. (Just don't habitually make everything public until necessary.)", "url": "https://github.com/GoogleContainerTools/jib/pull/2862#discussion_r511989278", "createdAt": "2020-10-26T14:11:11Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -145,6 +149,42 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Compute the entrypoint for a standard jar in exploded mode.\n+   *\n+   * @param jarPath path to jar file\n+   * @param tempDirPath path to temporary jib local directory\n+   * @param layers list of {@link FileEntriesLayer}\n+   * @return list of {@link String} representing entrypoint\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   * @throws IllegalArgumentException if main class is not found in the jar manifest\n+   */\n+  public static ImmutableList<String> computeEntrypoint_explodedStandard(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4e83fdc2217d258ab9d3d4ba59ceff4759a90f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5MzA0Ng==", "bodyText": "I admit we don't have a good established policy around throwing, handling, and reporting exceptions and errors. We have not done well so far. But at least the situation for Jib CLI is not so grim, as it is not a library but a CLI. So I think throwing a runtime exception to crash for this type of errors is more or less acceptable.\nAnyways, what I wanted to say is that, I think it's fine to not specify IllegalStateException (or IllegalArgumentException). Also in the Javadoc.", "url": "https://github.com/GoogleContainerTools/jib/pull/2862#discussion_r511993046", "createdAt": "2020-10-26T14:16:25Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -145,6 +149,42 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Compute the entrypoint for a standard jar in exploded mode.\n+   *\n+   * @param jarPath path to jar file\n+   * @param tempDirPath path to temporary jib local directory\n+   * @param layers list of {@link FileEntriesLayer}\n+   * @return list of {@link String} representing entrypoint\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   * @throws IllegalArgumentException if main class is not found in the jar manifest\n+   */\n+  public static ImmutableList<String> computeEntrypoint_explodedStandard(\n+      Path jarPath, Path tempDirPath, List<FileEntriesLayer> layers)\n+      throws IOException, IllegalStateException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4e83fdc2217d258ab9d3d4ba59ceff4759a90f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5NTkwNw==", "bodyText": "The CLI will crash with this message. And providing a clear message implying an actionable fix increases the chance of the user understanding and fixing the issue on their own, resulting in less frustrated getting-started experience (which is important to increase the chance of adoption). It also reduces our workload by reducing the likelyhood of multiple user opening the same issue.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  throw new IllegalArgumentException(\"Main-Class not found in jar's manifest.\");\n          \n          \n            \n                  throw new IllegalArgumentException(\"'Main-Class:' attribute to define an application main class not defined in the input JAR's manifest ('META-INF/MANIFEST.MF` in the JAR).\");", "url": "https://github.com/GoogleContainerTools/jib/pull/2862#discussion_r511995907", "createdAt": "2020-10-26T14:20:19Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -145,6 +149,42 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Compute the entrypoint for a standard jar in exploded mode.\n+   *\n+   * @param jarPath path to jar file\n+   * @param tempDirPath path to temporary jib local directory\n+   * @param layers list of {@link FileEntriesLayer}\n+   * @return list of {@link String} representing entrypoint\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   * @throws IllegalArgumentException if main class is not found in the jar manifest\n+   */\n+  public static ImmutableList<String> computeEntrypoint_explodedStandard(\n+      Path jarPath, Path tempDirPath, List<FileEntriesLayer> layers)\n+      throws IOException, IllegalStateException {\n+    Path localExplodedJarRoot = tempDirPath;\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    String mainClass = null;\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      mainClass = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);\n+    }\n+    if (mainClass == null) {\n+      throw new IllegalArgumentException(\"Main-Class not found in jar's manifest.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4e83fdc2217d258ab9d3d4ba59ceff4759a90f"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwMzQwOQ==", "bodyText": "At least this should be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    classpath.add(APP_ROOT.resolve(\"dependencies\").toString());\n          \n          \n            \n                    classpath.add(APP_ROOT + \"/dependencies/*\");\n          \n      \n    \n    \n  \n\nJust so you know, there's an issue with the order of loading jars (like #1871 for Jib build plugins), but I think there's nothing we can do about it for a standard jar.", "url": "https://github.com/GoogleContainerTools/jib/pull/2862#discussion_r512003409", "createdAt": "2020-10-26T14:29:44Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -145,6 +149,42 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Compute the entrypoint for a standard jar in exploded mode.\n+   *\n+   * @param jarPath path to jar file\n+   * @param tempDirPath path to temporary jib local directory\n+   * @param layers list of {@link FileEntriesLayer}\n+   * @return list of {@link String} representing entrypoint\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   * @throws IllegalArgumentException if main class is not found in the jar manifest\n+   */\n+  public static ImmutableList<String> computeEntrypoint_explodedStandard(\n+      Path jarPath, Path tempDirPath, List<FileEntriesLayer> layers)\n+      throws IOException, IllegalStateException {\n+    Path localExplodedJarRoot = tempDirPath;\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    String mainClass = null;\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      mainClass = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);\n+    }\n+    if (mainClass == null) {\n+      throw new IllegalArgumentException(\"Main-Class not found in jar's manifest.\");\n+    }\n+    List<String> classpath = new ArrayList<>();\n+    for (FileEntriesLayer layer : layers) {\n+      if (layer.getName().equals(DEPENDENCIES) || layer.getName().equals(SNAPSHOT_DEPENDENCIES)) {\n+        classpath.add(APP_ROOT.resolve(\"dependencies\").toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4e83fdc2217d258ab9d3d4ba59ceff4759a90f"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwNjkyNA==", "bodyText": "Considering the order of loading classes, explodedJar should come before dependencies. That said, how about going simple? It's okay to put a non-existing directory. I think the level of code reduction is worth.\nString classpath = APP_ROOT + \"/explodedJar:\" + APP_ROOT + \"/dependencies/*\";", "url": "https://github.com/GoogleContainerTools/jib/pull/2862#discussion_r512006924", "createdAt": "2020-10-26T14:34:07Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -145,6 +149,42 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Compute the entrypoint for a standard jar in exploded mode.\n+   *\n+   * @param jarPath path to jar file\n+   * @param tempDirPath path to temporary jib local directory\n+   * @param layers list of {@link FileEntriesLayer}\n+   * @return list of {@link String} representing entrypoint\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   * @throws IllegalArgumentException if main class is not found in the jar manifest\n+   */\n+  public static ImmutableList<String> computeEntrypoint_explodedStandard(\n+      Path jarPath, Path tempDirPath, List<FileEntriesLayer> layers)\n+      throws IOException, IllegalStateException {\n+    Path localExplodedJarRoot = tempDirPath;\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    String mainClass = null;\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      mainClass = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);\n+    }\n+    if (mainClass == null) {\n+      throw new IllegalArgumentException(\"Main-Class not found in jar's manifest.\");\n+    }\n+    List<String> classpath = new ArrayList<>();\n+    for (FileEntriesLayer layer : layers) {\n+      if (layer.getName().equals(DEPENDENCIES) || layer.getName().equals(SNAPSHOT_DEPENDENCIES)) {\n+        classpath.add(APP_ROOT.resolve(\"dependencies\").toString());\n+        break;\n+      }\n+    }\n+    classpath.add(APP_ROOT.resolve(\"explodedJar\").toString());\n+    String classPathString = String.join(\":\", classpath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f4e83fdc2217d258ab9d3d4ba59ceff4759a90f"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd9300c82f0b330eec4d0a1e380f0bca1246f239", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/fd9300c82f0b330eec4d0a1e380f0bca1246f239", "committedDate": "2020-10-26T22:18:34Z", "message": " improve error messaging, narrow down scope of method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f61293e5301784f83c8a86c8c87fbc7b1b187466", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/f61293e5301784f83c8a86c8c87fbc7b1b187466", "committedDate": "2020-10-26T22:27:20Z", "message": "use getRoot instead of newFolder in test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MjIyMjg4", "url": "https://github.com/GoogleContainerTools/jib/pull/2862#pullrequestreview-517222288", "createdAt": "2020-10-26T22:29:14Z", "commit": {"oid": "f61293e5301784f83c8a86c8c87fbc7b1b187466"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjoyOToxNVrOHokwsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjozNDo0M1rOHok4-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMwNzM3OA==", "bodyText": "Perhaps this can be package-private?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n          \n          \n            \n              static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n          \n      \n    \n    \n  \n\nAnd if this needs to be package-private only to be able to call from tests (i.e., it should have been private if not for the tests), add @VisibleForTesting.", "url": "https://github.com/GoogleContainerTools/jib/pull/2862#discussion_r512307378", "createdAt": "2020-10-26T22:29:15Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -76,7 +81,7 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n    * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n    *     provided doesn't exist\n    */\n-  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n+  protected static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f61293e5301784f83c8a86c8c87fbc7b1b187466"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMwODI4Ng==", "bodyText": "Sorry, I think this reads better:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"`Main-Class:` attribute to define an application main class not defined in the input Jar's manifest (`META-INF/MANIFEST.MF` in the JAR).\");\n          \n          \n            \n                      \"`Main-Class:` attribute for an application main class not defined in the input Jar's manifest (`META-INF/MANIFEST.MF` in the Jar).\");", "url": "https://github.com/GoogleContainerTools/jib/pull/2862#discussion_r512308286", "createdAt": "2020-10-26T22:31:23Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -145,6 +149,33 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Computes the entrypoint for a standard jar in exploded mode.\n+   *\n+   * @param jarPath path to jar file\n+   * @param tempDirPath path to temporary jib local directory\n+   * @param layers list of {@link FileEntriesLayer}\n+   * @return list of {@link String} representing entrypoint\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  protected static ImmutableList<String> computeEntrypointForExplodedStandard(\n+      Path jarPath, Path tempDirPath, List<FileEntriesLayer> layers) throws IOException {\n+    Path localExplodedJarRoot = tempDirPath;\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    String mainClass = null;\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      mainClass = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);\n+    }\n+    if (mainClass == null) {\n+      throw new IllegalArgumentException(\n+          \"`Main-Class:` attribute to define an application main class not defined in the input Jar's manifest (`META-INF/MANIFEST.MF` in the JAR).\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f61293e5301784f83c8a86c8c87fbc7b1b187466"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMwODg5NA==", "bodyText": "Oh, actually, I remember unzipping a jar somewhere else too. Are we unzipping it multiple times? We should unzip only once for efficiency.", "url": "https://github.com/GoogleContainerTools/jib/pull/2862#discussion_r512308894", "createdAt": "2020-10-26T22:33:11Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -145,6 +149,33 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Computes the entrypoint for a standard jar in exploded mode.\n+   *\n+   * @param jarPath path to jar file\n+   * @param tempDirPath path to temporary jib local directory\n+   * @param layers list of {@link FileEntriesLayer}\n+   * @return list of {@link String} representing entrypoint\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  protected static ImmutableList<String> computeEntrypointForExplodedStandard(\n+      Path jarPath, Path tempDirPath, List<FileEntriesLayer> layers) throws IOException {\n+    Path localExplodedJarRoot = tempDirPath;\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f61293e5301784f83c8a86c8c87fbc7b1b187466"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMwOTQ5OA==", "bodyText": "Nit: I think this code block is super fast, so it's good to put everything in to the try-resource block.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n          \n          \n            \n                  mainClass = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);\n          \n          \n            \n                }\n          \n          \n            \n                try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n          \n          \n            \n                  String mainClass = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);\n          \n          \n            \n                  if (mainClass == null)\n          \n          \n            \n                  ...\n          \n          \n            \n                  return ...\n          \n          \n            \n                }", "url": "https://github.com/GoogleContainerTools/jib/pull/2862#discussion_r512309498", "createdAt": "2020-10-26T22:34:43Z", "author": {"login": "chanseokoh"}, "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -145,6 +149,33 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Computes the entrypoint for a standard jar in exploded mode.\n+   *\n+   * @param jarPath path to jar file\n+   * @param tempDirPath path to temporary jib local directory\n+   * @param layers list of {@link FileEntriesLayer}\n+   * @return list of {@link String} representing entrypoint\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  protected static ImmutableList<String> computeEntrypointForExplodedStandard(\n+      Path jarPath, Path tempDirPath, List<FileEntriesLayer> layers) throws IOException {\n+    Path localExplodedJarRoot = tempDirPath;\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    String mainClass = null;\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      mainClass = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f61293e5301784f83c8a86c8c87fbc7b1b187466"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "037672a28d0887d4aa21004ff67b4f7f6a8f65f3", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/037672a28d0887d4aa21004ff67b4f7f6a8f65f3", "committedDate": "2020-10-27T14:24:59Z", "message": "fix parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dcc8f0ef8ed2cb25c679249864a42203686833f", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/3dcc8f0ef8ed2cb25c679249864a42203686833f", "committedDate": "2020-10-27T14:28:43Z", "message": "making methods package-private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "188717e569d99024208d3b77e2d801ec3f43f886", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/188717e569d99024208d3b77e2d801ec3f43f886", "committedDate": "2020-10-27T14:35:27Z", "message": "modify try-resource block"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cbcd621d97d066b830e5ac08cf2ffdf898623a3", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/5cbcd621d97d066b830e5ac08cf2ffdf898623a3", "committedDate": "2020-10-27T14:37:13Z", "message": "minor formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8f1968f6d65365ba74734a4796367768dbfd27b", "author": {"user": {"login": "mpeddada1", "name": "Mridula"}}, "url": "https://github.com/GoogleContainerTools/jib/commit/e8f1968f6d65365ba74734a4796367768dbfd27b", "committedDate": "2020-10-27T14:43:00Z", "message": "modifying tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MDQ3NjQ4", "url": "https://github.com/GoogleContainerTools/jib/pull/2862#pullrequestreview-518047648", "createdAt": "2020-10-27T19:05:24Z", "commit": {"oid": "e8f1968f6d65365ba74734a4796367768dbfd27b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4848, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}