{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyOTU2NTA2", "number": 1030, "reviewThreads": {"totalCount": 49, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo0NDowMVrOEFbJFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowNjo0N1rOEKEPOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTIzMDMwOnYy", "diffSide": "RIGHT", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/api/job/TaskAPI.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo0NDowMVrOGjmq_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMTozODoxNVrOGkXVDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4Njk0MA==", "bodyText": "move task.cancelling() before scheduler.cancel(task)", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r439986940", "createdAt": "2020-06-15T07:44:01Z", "author": {"login": "javeme"}, "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/api/job/TaskAPI.java", "diffHunk": "@@ -161,11 +161,11 @@ public void delete(@Context GraphManager manager,\n \n         TaskScheduler scheduler = graph(manager, graph).taskScheduler();\n         HugeTask<?> task = scheduler.task(IdGenerator.of(id));\n-        if (!task.completed() && scheduler.cancel(task)) {\n+        if (!task.completed() &&\n+            (scheduler.cancel(task) || task.cancelling())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4NDE0MQ==", "bodyText": "scheduler.cancel(task) will change task status to CANCELLING", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r440784141", "createdAt": "2020-06-16T11:38:15Z", "author": {"login": "zhoney"}, "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/api/job/TaskAPI.java", "diffHunk": "@@ -161,11 +161,11 @@ public void delete(@Context GraphManager manager,\n \n         TaskScheduler scheduler = graph(manager, graph).taskScheduler();\n         HugeTask<?> task = scheduler.task(IdGenerator.of(id));\n-        if (!task.completed() && scheduler.cancel(task)) {\n+        if (!task.completed() &&\n+            (scheduler.cancel(task) || task.cancelling())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4Njk0MA=="}, "originalCommit": {"oid": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTIzMTc4OnYy", "diffSide": "LEFT", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/api/job/TaskAPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo0NDoyOVrOGjmr6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo0NDoyOVrOGjmr6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4NzE3Ng==", "bodyText": "assert task.completed() || task.cancelling()", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r439987176", "createdAt": "2020-06-15T07:44:29Z", "author": {"login": "javeme"}, "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/api/job/TaskAPI.java", "diffHunk": "@@ -161,11 +161,11 @@ public void delete(@Context GraphManager manager,\n \n         TaskScheduler scheduler = graph(manager, graph).taskScheduler();\n         HugeTask<?> task = scheduler.task(IdGenerator.of(id));\n-        if (!task.completed() && scheduler.cancel(task)) {\n+        if (!task.completed() &&\n+            (scheduler.cancel(task) || task.cancelling())) {\n             return task.asMap();\n         }\n \n-        assert task.completed();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTIzNTAyOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/StandardHugeGraph.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo0NToyOVrOGjmtzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo0NToyOVrOGjmtzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4NzY2Mw==", "bodyText": "add empty line", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r439987663", "createdAt": "2020-06-15T07:45:29Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/StandardHugeGraph.java", "diffHunk": "@@ -196,6 +199,14 @@ public BackendFeatures backendStoreFeatures() {\n         return this.graphTransaction().storeFeatures();\n     }\n \n+    @Override\n+    public void serverStarted(String serverId, String serverRole) {\n+        LOG.info(\"Init server info for graph '{}'...\", this.name);\n+        this.serverManager.initServerInfo(serverId, serverRole);\n+        LOG.info(\"Restoring incomplete tasks for graph '{}'...\", this.name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTI0ODQxOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo0OTozMlrOGjm2GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo0OTozMlrOGjm2GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4OTc4NA==", "bodyText": "ensure don't throw any exception out of done(), add a method ServerInfoManager.decreaseLoad(int) and just log in that method if error", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r439989784", "createdAt": "2020-06-15T07:49:32Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "diffHunk": "@@ -303,7 +329,14 @@ protected void done() {\n         } catch (Throwable e) {\n             LOG.error(\"An exception occurred when calling done()\", e);\n         } finally {\n-            ((StandardTaskScheduler) this.scheduler()).remove(this.id);\n+            StandardTaskScheduler scheduler = (StandardTaskScheduler)\n+                                              this.scheduler();\n+            scheduler.remove(this.id);\n+            ServerInfoManager manager = scheduler.serverManager();\n+            HugeServerInfo serverInfo = manager.serverInfo();\n+            serverInfo.load(serverInfo.load() - this.load);\n+            manager.save(serverInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTI2NTk5OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo1NDo0OVrOGjnBEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo1NDo0OVrOGjnBEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5MjU5Mw==", "bodyText": "rename to scheduler to not wrap line", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r439992593", "createdAt": "2020-06-15T07:54:49Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "diffHunk": "@@ -59,13 +68,21 @@ private TaskManager(int pool) {\n         this.taskExecutor = ExecutorUtil.newFixedThreadPool(pool, TASK_WORKER);\n         // For save/query task state, just one thread is ok\n         this.dbExecutor = ExecutorUtil.newFixedThreadPool(1, TASK_DB_WORKER);\n+        // For schedule task to run, just one thread is ok\n+        this.taskScheduler = ExecutorUtil.newScheduledThreadPool(\n+                             1, TASK_SCHEDULER);\n+        // Start after 10s waiting for HugeGraphServer startup\n+        this.taskScheduler.scheduleWithFixedDelay(this::periodicJob,\n+                                                  10L, 3, TimeUnit.SECONDS);\n     }\n \n     public void addScheduler(HugeGraphParams graph) {\n         E.checkArgumentNotNull(graph, \"The graph can't be null\");\n         ExecutorService task = this.taskExecutor;\n         ExecutorService db = this.dbExecutor;\n-        this.schedulers.put(graph, new StandardTaskScheduler(graph, task, db));\n+        TaskScheduler taskScheduler = new StandardTaskScheduler(graph, task,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTI2OTAwOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo1NTozOFrOGjnC2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo1NTozOFrOGjnC2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5MzA0OA==", "bodyText": "align with Map", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r439993048", "createdAt": "2020-06-15T07:55:38Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "diffHunk": "@@ -163,6 +189,33 @@ public int pendingTasks() {\n         return size;\n     }\n \n+    private void periodicJob() {\n+        try {\n+            for (Map.Entry<HugeGraphParams, TaskScheduler> entry :\n+                     this.schedulers.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTI3NjA5OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/type/define/GraphRole.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo1NzoyNlrOGjnHLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo1NzoyNlrOGjnHLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5NDE1Nw==", "bodyText": "rename to NodeRole", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r439994157", "createdAt": "2020-06-15T07:57:26Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/type/define/GraphRole.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.type.define;\n+\n+public enum GraphRole implements SerialEnum {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTI5MDM0OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODowMTozN1rOGjnQMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODowMTozN1rOGjnQMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5NjQ2NA==", "bodyText": "two empty lines", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r439996464", "createdAt": "2020-06-15T08:01:37Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.cluster;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+\n+import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.HugeGraphParams;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.backend.query.Condition;\n+import com.baidu.hugegraph.backend.query.ConditionQuery;\n+import com.baidu.hugegraph.backend.query.QueryResults;\n+import com.baidu.hugegraph.backend.tx.GraphTransaction;\n+import com.baidu.hugegraph.event.EventListener;\n+import com.baidu.hugegraph.iterator.MapperIterator;\n+import com.baidu.hugegraph.schema.PropertyKey;\n+import com.baidu.hugegraph.schema.VertexLabel;\n+import com.baidu.hugegraph.structure.HugeVertex;\n+import com.baidu.hugegraph.type.HugeType;\n+import com.baidu.hugegraph.type.define.GraphRole;\n+import com.baidu.hugegraph.type.define.HugeKeys;\n+import com.baidu.hugegraph.util.DateUtil;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.Events;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import static com.baidu.hugegraph.backend.page.PageInfo.PAGE_NONE;\n+import static com.baidu.hugegraph.backend.query.Query.NO_LIMIT;\n+\n+public class ServerInfoManager {\n+\n+    private final HugeGraphParams graph;\n+    private final EventListener eventListener;\n+    private Id serverId;\n+    private GraphRole serverRole;\n+\n+    public ServerInfoManager(HugeGraphParams graph) {\n+        E.checkNotNull(graph, \"graph\");\n+        this.graph = graph;\n+        this.eventListener = this.listenChanges();\n+    }\n+\n+    private EventListener listenChanges() {\n+        // Listen store event: \"store.inited\"\n+        Set<String> storeEvents = ImmutableSet.of(Events.STORE_INITED);\n+        EventListener eventListener = event -> {\n+            // Ensure user schema create after system info initialized\n+            if (storeEvents.contains(event.name())) {\n+                try {\n+                    this.initSchemaIfNeeded();\n+                } finally {\n+                    this.graph.closeTx();\n+                }\n+                return true;\n+            }\n+            return false;\n+        };\n+        this.graph.loadSystemStore().provider().listen(eventListener);\n+        return eventListener;\n+    }\n+\n+    private void unlistenChanges() {\n+        this.graph.loadSystemStore().provider().unlisten(this.eventListener);\n+    }\n+\n+    public boolean close() {\n+        this.unlistenChanges();\n+        return true;\n+    }\n+\n+    public void initServerInfo(String server, String role) {\n+        E.checkArgument(server != null && !server.isEmpty(),\n+                        \"The server name can't be null or empty\");\n+        HugeServerInfo existed = this.serverInfo(server);\n+        E.checkArgument(existed == null || !existed.alive(),\n+                        \"The server with name '%s' already in cluster\",\n+                        server);\n+        E.checkArgument(role != null && !role.isEmpty(),\n+                        \"The server role can't be null or empty\");\n+        GraphRole graphRole = GraphRole.valueOf(role.toUpperCase());\n+        if (graphRole.master()) {\n+            Iterator<HugeServerInfo> servers = this.serverInfos(ImmutableMap.of(\n+                                               HugeServerInfo.P.ROLE,\n+                                               GraphRole.MASTER.code()),\n+                                               1, PAGE_NONE);\n+            if (servers.hasNext()) {\n+                existed = servers.next();\n+                E.checkArgument(!existed.alive(),\n+                                \"Already existed master '%s' in current \" +\n+                                \"cluster\", existed.id());\n+            }\n+        }\n+        HugeServerInfo serverInfo = new HugeServerInfo(server, graphRole);\n+        this.serverId = serverInfo.id();\n+        this.serverRole = graphRole;\n+        this.save(serverInfo);\n+    }\n+\n+    public Id serverId() {\n+        return this.serverId;\n+    }\n+\n+    public GraphRole serverRole() {\n+        return this.serverRole;\n+    }\n+\n+    public boolean master() {\n+        return this.serverRole() != null && this.serverRole().master();\n+    }\n+\n+    public void heartbeat() {\n+        HugeServerInfo server = this.serverInfo();\n+        server.updateTime(DateUtil.now());\n+        this.save(server);\n+    }\n+\n+    private void initSchemaIfNeeded() {\n+        HugeServerInfo.schema(this.graph).initSchemaIfNeeded();\n+    }\n+\n+    private GraphTransaction tx() {\n+        return this.graph.systemTransaction();\n+    }\n+\n+    public Id save(HugeServerInfo server) {\n+        // Construct vertex from task\n+        HugeVertex vertex = this.constructVertex(server);\n+        // Add or update user in backend store, stale index might exist\n+        vertex = this.tx().addVertex(vertex);\n+        this.commitOrRollback();\n+        return vertex.id();\n+    }\n+\n+    private HugeVertex constructVertex(HugeServerInfo server) {\n+        HugeServerInfo.Schema schema = HugeServerInfo.schema(this.graph);\n+        if (!schema.existVertexLabel(HugeServerInfo.P.SERVER)) {\n+            throw new HugeException(\"Schema is missing for %s '%s'\",\n+                                    HugeServerInfo.P.SERVER, server);\n+        }\n+        return this.tx().constructVertex(false, server.asArray());\n+    }\n+\n+    private void commitOrRollback() {\n+        this.tx().commitOrRollback();\n+    }\n+\n+    public HugeServerInfo serverInfo() {\n+        Iterator<Vertex> vertices = this.tx().queryVertices(this.serverId);\n+        Vertex vertex = QueryResults.one(vertices);\n+        if (vertex == null) {\n+            return null;\n+        }\n+        return HugeServerInfo.fromVertex(vertex);\n+    }\n+\n+    public HugeServerInfo serverInfo(String name) {\n+        E.checkArgument(name != null && !name.isEmpty(),\n+                        \"The server name can't be null or emtpy\");\n+        Id server = IdGenerator.of(name);\n+        Iterator<Vertex> vertices = this.tx().queryVertices(server);\n+        Vertex vertex = QueryResults.one(vertices);\n+        if (vertex == null) {\n+            return null;\n+        }\n+        return HugeServerInfo.fromVertex(vertex);\n+    }\n+\n+    public Iterator<HugeServerInfo> serverInfos(long limit, String page) {\n+        return this.serverInfos(ImmutableMap.of(), limit, page);\n+    }\n+\n+    private Iterator<HugeServerInfo> serverInfos(Map<String, Object> conditions,\n+                                                 long limit, String page) {\n+        ConditionQuery query = new ConditionQuery(HugeType.VERTEX);\n+        if (page != null) {\n+            query.page(page);\n+        }\n+        VertexLabel vl = this.graph.graph().vertexLabel(HugeServerInfo.P.SERVER);\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTMwOTQ2OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODowNzoyMVrOGjncRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjowOTozMVrOGkYUWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5OTU1OQ==", "bodyText": "seems no need to query by role", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r439999559", "createdAt": "2020-06-15T08:07:21Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.T;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.apache.tinkerpop.gremlin.structure.VertexProperty;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.HugeGraphParams;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.schema.IndexLabel;\n+import com.baidu.hugegraph.schema.PropertyKey;\n+import com.baidu.hugegraph.schema.SchemaManager;\n+import com.baidu.hugegraph.schema.VertexLabel;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.type.HugeType;\n+import com.baidu.hugegraph.type.define.Cardinality;\n+import com.baidu.hugegraph.type.define.DataType;\n+import com.baidu.hugegraph.type.define.GraphRole;\n+import com.baidu.hugegraph.type.define.SerialEnum;\n+import com.baidu.hugegraph.util.DateUtil;\n+import com.baidu.hugegraph.util.E;\n+\n+public class HugeServerInfo {\n+\n+    public static final int MAX_LOAD = 1000;\n+    public static final long EXPIRED_INTERVAL = 5000L;\n+\n+    private Id id;\n+    private GraphRole role;\n+    private int load;\n+    private Date updateTime;\n+\n+    public HugeServerInfo(String name, GraphRole role) {\n+        this(IdGenerator.of(name), role);\n+    }\n+\n+    public HugeServerInfo(Id id) {\n+        this.id = id;\n+        this.load = 0;\n+        this.role = GraphRole.WORKER;\n+        this.updateTime = DateUtil.now();\n+    }\n+\n+    public HugeServerInfo(Id id, GraphRole role) {\n+        this.id = id;\n+        this.load = 0;\n+        this.role = role;\n+        this.updateTime = DateUtil.now();\n+    }\n+\n+    public Id id() {\n+        return this.id;\n+    }\n+\n+    public String name() {\n+        return this.id.asString();\n+    }\n+\n+    public GraphRole role() {\n+        return this.role;\n+    }\n+\n+    public void role(GraphRole role) {\n+        this.role = role;\n+    }\n+\n+    public int load() {\n+        return this.load;\n+    }\n+\n+    public void load(int load) {\n+        this.load = load;\n+    }\n+\n+    public Date updateTime() {\n+        return this.updateTime;\n+    }\n+\n+    public void updateTime(Date updateTime) {\n+        this.updateTime = updateTime;\n+    }\n+\n+    public boolean alive() {\n+        long now = DateUtil.now().getTime();\n+        return this.updateTime != null &&\n+               this.updateTime.getTime() + EXPIRED_INTERVAL > now;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"HugeServerInfo(%s)%s\", this.id, this.asMap());\n+    }\n+\n+    protected boolean property(String key, Object value) {\n+        switch (key) {\n+            case P.ROLE:\n+                this.role = SerialEnum.fromCode(GraphRole.class, (byte) value);\n+                break;\n+            case P.LOAD:\n+                this.load = (int) value;\n+                break;\n+            case P.UPDATE_TIME:\n+                this.updateTime = (Date) value;\n+                break;\n+            default:\n+                throw new AssertionError(\"Unsupported key: \" + key);\n+        }\n+        return true;\n+    }\n+\n+    protected Object[] asArray() {\n+        E.checkState(this.id != null, \"Server id can't be null\");\n+\n+        List<Object> list = new ArrayList<>(8);\n+\n+        list.add(T.label);\n+        list.add(P.SERVER);\n+\n+        list.add(T.id);\n+        list.add(this.id);\n+\n+        list.add(P.ROLE);\n+        list.add(this.role.code());\n+\n+        list.add(P.LOAD);\n+        list.add(this.load);\n+\n+        list.add(P.UPDATE_TIME);\n+        list.add(this.updateTime);\n+\n+        return list.toArray();\n+    }\n+\n+    public Map<String, Object> asMap() {\n+        E.checkState(this.id != null, \"Server id can't be null\");\n+\n+        Map<String, Object> map = new HashMap<>();\n+\n+        map.put(Graph.Hidden.unHide(P.ID), this.id);\n+        map.put(Graph.Hidden.unHide(P.LABEL), P.SERVER);\n+        map.put(Graph.Hidden.unHide(P.ROLE), this.role);\n+        map.put(Graph.Hidden.unHide(P.LOAD), this.load);\n+        map.put(Graph.Hidden.unHide(P.UPDATE_TIME), this.updateTime);\n+\n+        return map;\n+    }\n+\n+    public static HugeServerInfo fromVertex(Vertex vertex) {\n+        HugeServerInfo server = new HugeServerInfo((Id) vertex.id());\n+        for (Iterator<VertexProperty<Object>> iter = vertex.properties();\n+             iter.hasNext();) {\n+            VertexProperty<Object> prop = iter.next();\n+            server.property(prop.key(), prop.value());\n+        }\n+        return server;\n+    }\n+\n+    public <V> boolean suitableFor(HugeTask<V> task, long now) {\n+        if (this.updateTime.getTime() + EXPIRED_INTERVAL < now ||\n+            this.load() + task.load() > MAX_LOAD) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public static Schema schema(HugeGraphParams graph) {\n+        return new Schema(graph);\n+    }\n+\n+    public static final class P {\n+\n+        public static final String SERVER = Graph.Hidden.hide(\"server\");\n+\n+        public static final String ID = T.id.getAccessor();\n+        public static final String LABEL = T.label.getAccessor();\n+\n+        public static final String NAME = \"~server_name\";\n+        public static final String ROLE = \"~server_role\";\n+        public static final String LOAD = \"~server_load\";\n+        public static final String UPDATE_TIME = \"~server_update_time\";\n+\n+        public static String unhide(String key) {\n+            final String prefix = Graph.Hidden.hide(\"server_\");\n+            if (key.startsWith(prefix)) {\n+                return key.substring(prefix.length());\n+            }\n+            return key;\n+        }\n+    }\n+\n+    public static final class Schema {\n+\n+        public static final String SERVER = P.SERVER;\n+\n+        protected final HugeGraphParams graph;\n+\n+        public Schema(HugeGraphParams graph) {\n+            this.graph = graph;\n+        }\n+\n+        public void initSchemaIfNeeded() {\n+            if (this.existVertexLabel(SERVER)) {\n+                return;\n+            }\n+\n+            HugeGraph graph = this.graph.graph();\n+            String[] properties = this.initProperties();\n+\n+            // Create vertex label '~server'\n+            VertexLabel label = graph.schema().vertexLabel(SERVER)\n+                                     .properties(properties)\n+                                     .useCustomizeStringId()\n+                                     .nullableKeys(P.ROLE, P.LOAD,\n+                                                   P.UPDATE_TIME)\n+                                     .enableLabelIndex(true)\n+                                     .build();\n+            this.graph.schemaTransaction().addVertexLabel(label);\n+\n+            // Create index\n+            this.createIndexLabel(label, P.ROLE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwMDM0Ng==", "bodyText": "query by role in initServerInfo of com/baidu/hugegraph/cluster/ServerInfoManager.java", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r440800346", "createdAt": "2020-06-16T12:09:31Z", "author": {"login": "zhoney"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.T;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.apache.tinkerpop.gremlin.structure.VertexProperty;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.HugeGraphParams;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.schema.IndexLabel;\n+import com.baidu.hugegraph.schema.PropertyKey;\n+import com.baidu.hugegraph.schema.SchemaManager;\n+import com.baidu.hugegraph.schema.VertexLabel;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.type.HugeType;\n+import com.baidu.hugegraph.type.define.Cardinality;\n+import com.baidu.hugegraph.type.define.DataType;\n+import com.baidu.hugegraph.type.define.GraphRole;\n+import com.baidu.hugegraph.type.define.SerialEnum;\n+import com.baidu.hugegraph.util.DateUtil;\n+import com.baidu.hugegraph.util.E;\n+\n+public class HugeServerInfo {\n+\n+    public static final int MAX_LOAD = 1000;\n+    public static final long EXPIRED_INTERVAL = 5000L;\n+\n+    private Id id;\n+    private GraphRole role;\n+    private int load;\n+    private Date updateTime;\n+\n+    public HugeServerInfo(String name, GraphRole role) {\n+        this(IdGenerator.of(name), role);\n+    }\n+\n+    public HugeServerInfo(Id id) {\n+        this.id = id;\n+        this.load = 0;\n+        this.role = GraphRole.WORKER;\n+        this.updateTime = DateUtil.now();\n+    }\n+\n+    public HugeServerInfo(Id id, GraphRole role) {\n+        this.id = id;\n+        this.load = 0;\n+        this.role = role;\n+        this.updateTime = DateUtil.now();\n+    }\n+\n+    public Id id() {\n+        return this.id;\n+    }\n+\n+    public String name() {\n+        return this.id.asString();\n+    }\n+\n+    public GraphRole role() {\n+        return this.role;\n+    }\n+\n+    public void role(GraphRole role) {\n+        this.role = role;\n+    }\n+\n+    public int load() {\n+        return this.load;\n+    }\n+\n+    public void load(int load) {\n+        this.load = load;\n+    }\n+\n+    public Date updateTime() {\n+        return this.updateTime;\n+    }\n+\n+    public void updateTime(Date updateTime) {\n+        this.updateTime = updateTime;\n+    }\n+\n+    public boolean alive() {\n+        long now = DateUtil.now().getTime();\n+        return this.updateTime != null &&\n+               this.updateTime.getTime() + EXPIRED_INTERVAL > now;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"HugeServerInfo(%s)%s\", this.id, this.asMap());\n+    }\n+\n+    protected boolean property(String key, Object value) {\n+        switch (key) {\n+            case P.ROLE:\n+                this.role = SerialEnum.fromCode(GraphRole.class, (byte) value);\n+                break;\n+            case P.LOAD:\n+                this.load = (int) value;\n+                break;\n+            case P.UPDATE_TIME:\n+                this.updateTime = (Date) value;\n+                break;\n+            default:\n+                throw new AssertionError(\"Unsupported key: \" + key);\n+        }\n+        return true;\n+    }\n+\n+    protected Object[] asArray() {\n+        E.checkState(this.id != null, \"Server id can't be null\");\n+\n+        List<Object> list = new ArrayList<>(8);\n+\n+        list.add(T.label);\n+        list.add(P.SERVER);\n+\n+        list.add(T.id);\n+        list.add(this.id);\n+\n+        list.add(P.ROLE);\n+        list.add(this.role.code());\n+\n+        list.add(P.LOAD);\n+        list.add(this.load);\n+\n+        list.add(P.UPDATE_TIME);\n+        list.add(this.updateTime);\n+\n+        return list.toArray();\n+    }\n+\n+    public Map<String, Object> asMap() {\n+        E.checkState(this.id != null, \"Server id can't be null\");\n+\n+        Map<String, Object> map = new HashMap<>();\n+\n+        map.put(Graph.Hidden.unHide(P.ID), this.id);\n+        map.put(Graph.Hidden.unHide(P.LABEL), P.SERVER);\n+        map.put(Graph.Hidden.unHide(P.ROLE), this.role);\n+        map.put(Graph.Hidden.unHide(P.LOAD), this.load);\n+        map.put(Graph.Hidden.unHide(P.UPDATE_TIME), this.updateTime);\n+\n+        return map;\n+    }\n+\n+    public static HugeServerInfo fromVertex(Vertex vertex) {\n+        HugeServerInfo server = new HugeServerInfo((Id) vertex.id());\n+        for (Iterator<VertexProperty<Object>> iter = vertex.properties();\n+             iter.hasNext();) {\n+            VertexProperty<Object> prop = iter.next();\n+            server.property(prop.key(), prop.value());\n+        }\n+        return server;\n+    }\n+\n+    public <V> boolean suitableFor(HugeTask<V> task, long now) {\n+        if (this.updateTime.getTime() + EXPIRED_INTERVAL < now ||\n+            this.load() + task.load() > MAX_LOAD) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public static Schema schema(HugeGraphParams graph) {\n+        return new Schema(graph);\n+    }\n+\n+    public static final class P {\n+\n+        public static final String SERVER = Graph.Hidden.hide(\"server\");\n+\n+        public static final String ID = T.id.getAccessor();\n+        public static final String LABEL = T.label.getAccessor();\n+\n+        public static final String NAME = \"~server_name\";\n+        public static final String ROLE = \"~server_role\";\n+        public static final String LOAD = \"~server_load\";\n+        public static final String UPDATE_TIME = \"~server_update_time\";\n+\n+        public static String unhide(String key) {\n+            final String prefix = Graph.Hidden.hide(\"server_\");\n+            if (key.startsWith(prefix)) {\n+                return key.substring(prefix.length());\n+            }\n+            return key;\n+        }\n+    }\n+\n+    public static final class Schema {\n+\n+        public static final String SERVER = P.SERVER;\n+\n+        protected final HugeGraphParams graph;\n+\n+        public Schema(HugeGraphParams graph) {\n+            this.graph = graph;\n+        }\n+\n+        public void initSchemaIfNeeded() {\n+            if (this.existVertexLabel(SERVER)) {\n+                return;\n+            }\n+\n+            HugeGraph graph = this.graph.graph();\n+            String[] properties = this.initProperties();\n+\n+            // Create vertex label '~server'\n+            VertexLabel label = graph.schema().vertexLabel(SERVER)\n+                                     .properties(properties)\n+                                     .useCustomizeStringId()\n+                                     .nullableKeys(P.ROLE, P.LOAD,\n+                                                   P.UPDATE_TIME)\n+                                     .enableLabelIndex(true)\n+                                     .build();\n+            this.graph.schemaTransaction().addVertexLabel(label);\n+\n+            // Create index\n+            this.createIndexLabel(label, P.ROLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5OTU1OQ=="}, "originalCommit": {"oid": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTMyMDg3OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODoxMDozOFrOGjnjPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODoxMDozOFrOGjnjPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMTM0Mg==", "bodyText": "report MAX_LOAD by itself and add maxLoad field", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r440001342", "createdAt": "2020-06-15T08:10:38Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.T;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.apache.tinkerpop.gremlin.structure.VertexProperty;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.HugeGraphParams;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.schema.IndexLabel;\n+import com.baidu.hugegraph.schema.PropertyKey;\n+import com.baidu.hugegraph.schema.SchemaManager;\n+import com.baidu.hugegraph.schema.VertexLabel;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.type.HugeType;\n+import com.baidu.hugegraph.type.define.Cardinality;\n+import com.baidu.hugegraph.type.define.DataType;\n+import com.baidu.hugegraph.type.define.GraphRole;\n+import com.baidu.hugegraph.type.define.SerialEnum;\n+import com.baidu.hugegraph.util.DateUtil;\n+import com.baidu.hugegraph.util.E;\n+\n+public class HugeServerInfo {\n+\n+    public static final int MAX_LOAD = 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTMyOTU4OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODoxMzoxN1rOGjno2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODoxMzoxN1rOGjno2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMjc3OQ==", "bodyText": "define 3 as const var SCHEDULE_PERIOD", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r440002779", "createdAt": "2020-06-15T08:13:17Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "diffHunk": "@@ -59,13 +68,21 @@ private TaskManager(int pool) {\n         this.taskExecutor = ExecutorUtil.newFixedThreadPool(pool, TASK_WORKER);\n         // For save/query task state, just one thread is ok\n         this.dbExecutor = ExecutorUtil.newFixedThreadPool(1, TASK_DB_WORKER);\n+        // For schedule task to run, just one thread is ok\n+        this.taskScheduler = ExecutorUtil.newScheduledThreadPool(\n+                             1, TASK_SCHEDULER);\n+        // Start after 10s waiting for HugeGraphServer startup\n+        this.taskScheduler.scheduleWithFixedDelay(this::periodicJob,\n+                                                  10L, 3, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTMzMzU2OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODoxNDozMlrOGjnrbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODoxNDozMlrOGjnrbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMzQzOQ==", "bodyText": "SCHEDULE_PERIOD * 3", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r440003439", "createdAt": "2020-06-15T08:14:32Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.T;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.apache.tinkerpop.gremlin.structure.VertexProperty;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.HugeGraphParams;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.schema.IndexLabel;\n+import com.baidu.hugegraph.schema.PropertyKey;\n+import com.baidu.hugegraph.schema.SchemaManager;\n+import com.baidu.hugegraph.schema.VertexLabel;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.type.HugeType;\n+import com.baidu.hugegraph.type.define.Cardinality;\n+import com.baidu.hugegraph.type.define.DataType;\n+import com.baidu.hugegraph.type.define.GraphRole;\n+import com.baidu.hugegraph.type.define.SerialEnum;\n+import com.baidu.hugegraph.util.DateUtil;\n+import com.baidu.hugegraph.util.E;\n+\n+public class HugeServerInfo {\n+\n+    public static final int MAX_LOAD = 1000;\n+    public static final long EXPIRED_INTERVAL = 5000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjcyNTM3OnYy", "diffSide": "RIGHT", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODoyNDo0NFrOGm2oiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODoyNDo0NFrOGm2oiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM5NDE4NQ==", "bodyText": "types", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r443394185", "createdAt": "2020-06-22T08:24:44Z", "author": {"login": "Linary"}, "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java", "diffHunk": "@@ -56,6 +56,15 @@ public static synchronized ServerOptions instance() {\n                     \"server-1\"\n             );\n \n+    public static final ConfigOption<String> SERVER_ROLE =\n+            new ConfigOption<>(\n+                    \"server.role\",\n+                    \"The role of nodes in the cluster, available type are \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mjc0MjE2OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODoyOTowNFrOGm2zNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODoyOTowNFrOGm2zNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM5NjkxOQ==", "bodyText": "initialCapacity should be 10, actually DEFAULT_CAPACITY is 10", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r443396919", "createdAt": "2020-06-22T08:29:04Z", "author": {"login": "Linary"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.T;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.apache.tinkerpop.gremlin.structure.VertexProperty;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.HugeGraphParams;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.schema.IndexLabel;\n+import com.baidu.hugegraph.schema.PropertyKey;\n+import com.baidu.hugegraph.schema.SchemaManager;\n+import com.baidu.hugegraph.schema.VertexLabel;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.type.HugeType;\n+import com.baidu.hugegraph.type.define.Cardinality;\n+import com.baidu.hugegraph.type.define.DataType;\n+import com.baidu.hugegraph.type.define.GraphRole;\n+import com.baidu.hugegraph.type.define.SerialEnum;\n+import com.baidu.hugegraph.util.DateUtil;\n+import com.baidu.hugegraph.util.E;\n+\n+public class HugeServerInfo {\n+\n+    public static final int MAX_LOAD = 1000;\n+    public static final long EXPIRED_INTERVAL = 5000L;\n+\n+    private Id id;\n+    private GraphRole role;\n+    private int load;\n+    private Date updateTime;\n+\n+    public HugeServerInfo(String name, GraphRole role) {\n+        this(IdGenerator.of(name), role);\n+    }\n+\n+    public HugeServerInfo(Id id) {\n+        this.id = id;\n+        this.load = 0;\n+        this.role = GraphRole.WORKER;\n+        this.updateTime = DateUtil.now();\n+    }\n+\n+    public HugeServerInfo(Id id, GraphRole role) {\n+        this.id = id;\n+        this.load = 0;\n+        this.role = role;\n+        this.updateTime = DateUtil.now();\n+    }\n+\n+    public Id id() {\n+        return this.id;\n+    }\n+\n+    public String name() {\n+        return this.id.asString();\n+    }\n+\n+    public GraphRole role() {\n+        return this.role;\n+    }\n+\n+    public void role(GraphRole role) {\n+        this.role = role;\n+    }\n+\n+    public int load() {\n+        return this.load;\n+    }\n+\n+    public void load(int load) {\n+        this.load = load;\n+    }\n+\n+    public Date updateTime() {\n+        return this.updateTime;\n+    }\n+\n+    public void updateTime(Date updateTime) {\n+        this.updateTime = updateTime;\n+    }\n+\n+    public boolean alive() {\n+        long now = DateUtil.now().getTime();\n+        return this.updateTime != null &&\n+               this.updateTime.getTime() + EXPIRED_INTERVAL > now;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"HugeServerInfo(%s)%s\", this.id, this.asMap());\n+    }\n+\n+    protected boolean property(String key, Object value) {\n+        switch (key) {\n+            case P.ROLE:\n+                this.role = SerialEnum.fromCode(GraphRole.class, (byte) value);\n+                break;\n+            case P.LOAD:\n+                this.load = (int) value;\n+                break;\n+            case P.UPDATE_TIME:\n+                this.updateTime = (Date) value;\n+                break;\n+            default:\n+                throw new AssertionError(\"Unsupported key: \" + key);\n+        }\n+        return true;\n+    }\n+\n+    protected Object[] asArray() {\n+        E.checkState(this.id != null, \"Server id can't be null\");\n+\n+        List<Object> list = new ArrayList<>(8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDc2MjIxOnYy", "diffSide": "RIGHT", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzozNzo0OFrOGnKntw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzozNzo0OFrOGnKntw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyMTY1NQ==", "bodyText": "use allowValues", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r443721655", "createdAt": "2020-06-22T17:37:48Z", "author": {"login": "javeme"}, "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java", "diffHunk": "@@ -57,6 +57,15 @@ public static synchronized ServerOptions instance() {\n                     \"server-1\"\n             );\n \n+    public static final ConfigOption<String> SERVER_ROLE =\n+            new ConfigOption<>(\n+                    \"server.role\",\n+                    \"The role of nodes in the cluster, available type are \" +\n+                    \"[master, worker]\",\n+                    disallowEmpty(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDc2Mzc1OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzozODoxOFrOGnKowQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzozODoxOFrOGnKowQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyMTkyMQ==", "bodyText": "Map<String, CachedTypes>", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r443721921", "createdAt": "2020-06-22T17:38:18Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java", "diffHunk": "@@ -47,16 +47,15 @@\n     private EventListener storeEventListener;\n     private EventListener cacheEventListener;\n \n-    private final Map<HugeType, Boolean> cachedTypes;\n+    private static final Map<HugeGraphParams, CachedTypes> CACHED_TYPES =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDc3Mjk2OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo0MTowNFrOGnKupg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo0MTowNFrOGnKupg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyMzQzMA==", "bodyText": "add some comments", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r443723430", "createdAt": "2020-06-22T17:41:04Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "diffHunk": "@@ -163,6 +207,37 @@ public int pendingTasks() {\n         return size;\n     }\n \n+    protected void notifyNewTask(HugeTask<?> task) {\n+        this.schedulerExecutor.submit(this::scheduleOrExecuteJob);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDc3NzgyOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo0MjozN1rOGnKxvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo0MjozN1rOGnKxvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyNDIyMw==", "bodyText": "improve \"not found suitable server when created\"", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r443724223", "createdAt": "2020-06-22T17:42:37Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "diffHunk": "@@ -163,6 +207,37 @@ public int pendingTasks() {\n         return size;\n     }\n \n+    protected void notifyNewTask(HugeTask<?> task) {\n+        this.schedulerExecutor.submit(this::scheduleOrExecuteJob);\n+    }\n+\n+    private void scheduleOrExecuteJob() {\n+        try {\n+            for (Map.Entry<HugeGraphParams, TaskScheduler> entry :\n+                 this.schedulers.entrySet()) {\n+                ServerInfoManager server = entry.getKey().serverManager();\n+                StandardTaskScheduler scheduler = (StandardTaskScheduler)\n+                                                  entry.getValue();\n+\n+                // Update server heartbeat\n+                server.heartbeat();\n+\n+                // Master schedule tasks not found suitable server when created", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjU1MzYxOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/StandardHugeGraph.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzowMzoyNFrOGnb5DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzowMzoyNFrOGnb5DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwNDYyMQ==", "bodyText": "why not change the parameter type", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444004621", "createdAt": "2020-06-23T07:03:24Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/StandardHugeGraph.java", "diffHunk": "@@ -267,6 +267,8 @@ public void truncateBackend() {\n \n         this.storeProvider.truncate();\n         this.storeProvider.initSystemInfo(this);\n+        this.serverStarted(this.serverManager.serverId().asString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjU1NDYzOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzowMzo0N1rOGnb5qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzowMzo0N1rOGnb5qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwNDc3OQ==", "bodyText": "prefer align with CACHED_TYPES", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444004779", "createdAt": "2020-06-23T07:03:47Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java", "diffHunk": "@@ -47,16 +47,15 @@\n     private EventListener storeEventListener;\n     private EventListener cacheEventListener;\n \n-    private final Map<HugeType, Boolean> cachedTypes;\n+    private static final Map<String, CachedTypes> CACHED_TYPES =\n+            new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjU1NTgzOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzowNDoxMlrOGnb6bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzowNDoxMlrOGnb6bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwNDk3Mw==", "bodyText": "align with class", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444004973", "createdAt": "2020-06-23T07:04:12Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java", "diffHunk": "@@ -252,9 +259,12 @@ protected void removeSchema(SchemaElement schema) {\n                     Id prefixedName = generateId(schema.type(), schema.name());\n                     this.nameCache.update(prefixedName, schema);\n                 }\n-                this.cachedTypes.putIfAbsent(type, true);\n+                this.cachedTypes().putIfAbsent(type, true);\n             }\n             return results;\n         }\n     }\n+\n+    private static class CachedTypes\n+            extends ConcurrentHashMap<HugeType, Boolean> {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjU2NDQ4OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzowNzowMlrOGnb_gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzowNzowMlrOGnb_gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwNjI3Mg==", "bodyText": "don't ignore exception here", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444006272", "createdAt": "2020-06-23T07:07:02Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "diffHunk": "@@ -642,28 +636,14 @@ private void checkPropertySize(int propertyLength, String propertyName) {\n     }\n \n     public void syncWait() {\n-        HugeTask task = null;\n+        HugeTask task;\n         try {\n-            Id id = this.id();\n             do {\n-                task = this.scheduler().task(id);\n-                if (task.status.code() > TaskStatus.QUEUED.code()) {\n-                    task.get();\n-                }\n+                task = this.scheduler().task(this.id());\n             } while (!task.completed());\n             assert task.completed();\n-        } catch (ExecutionException e) {\n-            Throwable cause = e.getCause();\n-            if (cause instanceof RuntimeException) {\n-                throw (RuntimeException) cause;\n-            }\n-            throw new HugeException(\"Async task failed with error: %s\",\n-                                    cause, cause.getMessage());\n         } catch (Exception e) {\n-            throw new HugeException(\"Async task failed with error: %s\",\n-                                    e, e.getMessage());\n-        } finally {\n-            ((StandardTaskScheduler) task.scheduler()).remove(id);\n+            // ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjU3MTMxOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzowOToxM1rOGncDkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzowOToxM1rOGncDkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwNzMxNA==", "bodyText": "should sleep between tow times of task-read", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444007314", "createdAt": "2020-06-23T07:09:13Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "diffHunk": "@@ -642,28 +636,14 @@ private void checkPropertySize(int propertyLength, String propertyName) {\n     }\n \n     public void syncWait() {\n-        HugeTask task = null;\n+        HugeTask task;\n         try {\n-            Id id = this.id();\n             do {\n-                task = this.scheduler().task(id);\n-                if (task.status.code() > TaskStatus.QUEUED.code()) {\n-                    task.get();\n-                }\n+                task = this.scheduler().task(this.id());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjU3MjQ4OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzowOTozN1rOGncEUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzowOTozN1rOGncEUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwNzUwNA==", "bodyText": "add const var", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444007504", "createdAt": "2020-06-23T07:09:37Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -322,12 +325,13 @@ private void unlistenChanges() {\n         HugeServerInfo server;\n         do {\n             Iterator<HugeServerInfo> servers = this.serverManager()\n-                                                   .serverInfos(100L, page);\n+                                                   .serverInfos(10L, page);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjU3NDc1OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzoxMDoyM1rOGncFwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzoxMDoyM1rOGncFwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwNzg3Mg==", "bodyText": "keep protected", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444007872", "createdAt": "2020-06-23T07:10:23Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -388,9 +392,10 @@ protected ServerInfoManager serverManager() {\n         return this.graph.serverManager();\n     }\n \n-    protected void remove(Id id) {\n+    public void remove(Id id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjU4NTcyOnYy", "diffSide": "RIGHT", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/VertexLabelCoreTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzoxMzozM1rOGncMQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzoxMzozM1rOGncMQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwOTUzOQ==", "bodyText": "wrap line after \"link \"", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444009539", "createdAt": "2020-06-23T07:13:33Z", "author": {"login": "javeme"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/VertexLabelCoreTest.java", "diffHunk": "@@ -900,13 +904,22 @@ public void testRemoveVertexLabelUsedByEdgeLabel() {\n \n         marko.addEdge(\"write\", java, \"time\", \"2016-12-12\", \"weight\", 0.3);\n \n-        Assert.assertThrows(HugeException.class, () -> {\n-            schema.vertexLabel(\"person\").remove();\n-        });\n-\n-        Assert.assertThrows(HugeException.class, () -> {\n-            schema.vertexLabel(\"book\").remove();\n-        });\n+        TaskScheduler scheduler = graph().taskScheduler();\n+        Id id = schema.vertexLabel(\"person\").remove();\n+        sleepAWhile(1000L);\n+        HugeTask task = scheduler.task(id);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Not allowed to remove vertex label \" +\n+                              \"'person' because the edge label 'write' \" +\n+                              \"still link with it\", task.result());\n+\n+        id = schema.vertexLabel(\"book\").remove();\n+        sleepAWhile(1000L);\n+        task = scheduler.task(id);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Not allowed to remove vertex label 'book' \" +\n+                              \"because the edge label 'write' still link with\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjU4OTg3OnYy", "diffSide": "RIGHT", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzoxNDo1OFrOGncPAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTozOToyOFrOGnhdHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxMDI0MQ==", "bodyText": "why not call this.task().scheduler()", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444010241", "createdAt": "2020-06-23T07:14:58Z", "author": {"login": "javeme"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "diffHunk": "@@ -565,7 +575,38 @@ public void testGremlinJobAndRestore() throws Exception {\n                .input(request.toJson())\n                .job(new GremlinJob());\n \n-        HugeTask<Object> task = builder.schedule();\n-        return task;\n+        return builder.schedule();\n+    }\n+\n+    private static void sleepAWhile() {\n+        sleepAWhile(SLEEP_TIME);\n+    }\n+\n+    private static void sleepAWhile(long ms) {\n+        try {\n+            Thread.sleep(ms);\n+        } catch (InterruptedException e) {\n+            // ignore\n+        }\n+    }\n+\n+    public static class TestTaskCallable<V> extends TaskCallable<V> {\n+\n+        public TestTaskCallable() {\n+            // pass\n+        }\n+\n+        @Override\n+        public V call() throws Exception {\n+            Thread.sleep(SLEEP_TIME);\n+            return null;\n+        }\n+\n+        @Override\n+        public void done() {\n+            StandardTaskScheduler scheduler = Whitebox.getInternalState(\n+                                              this.task(), \"scheduler\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5NTc3NQ==", "bodyText": "HugeTask doesn't have scheduler()\nAlready change to this.graph().taskScheduler()", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444095775", "createdAt": "2020-06-23T09:39:28Z", "author": {"login": "zhoney"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "diffHunk": "@@ -565,7 +575,38 @@ public void testGremlinJobAndRestore() throws Exception {\n                .input(request.toJson())\n                .job(new GremlinJob());\n \n-        HugeTask<Object> task = builder.schedule();\n-        return task;\n+        return builder.schedule();\n+    }\n+\n+    private static void sleepAWhile() {\n+        sleepAWhile(SLEEP_TIME);\n+    }\n+\n+    private static void sleepAWhile(long ms) {\n+        try {\n+            Thread.sleep(ms);\n+        } catch (InterruptedException e) {\n+            // ignore\n+        }\n+    }\n+\n+    public static class TestTaskCallable<V> extends TaskCallable<V> {\n+\n+        public TestTaskCallable() {\n+            // pass\n+        }\n+\n+        @Override\n+        public V call() throws Exception {\n+            Thread.sleep(SLEEP_TIME);\n+            return null;\n+        }\n+\n+        @Override\n+        public void done() {\n+            StandardTaskScheduler scheduler = Whitebox.getInternalState(\n+                                              this.task(), \"scheduler\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxMDI0MQ=="}, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjU5NDQzOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzoxNjoyMlrOGncR4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzoxNjoyMlrOGncR4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxMDk3Ng==", "bodyText": "why read again", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444010976", "createdAt": "2020-06-23T07:16:22Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -246,16 +246,19 @@ private void unlistenChanges() {\n     }\n \n     @Override\n-    public <V> void cancel(HugeTask<V> task) {\n+    public synchronized <V> void cancel(HugeTask<V> task) {\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n         if (!this.serverManager().master()) {\n             return;\n         }\n         if (!task.completed()) {\n             // The task scheduled to workers, waiting for worker cancel\n+            task = this.task(task.id());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjYxMTExOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzoyMToyOFrOGnccOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzoyMToyOFrOGnccOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxMzYyNQ==", "bodyText": "keep private", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444013625", "createdAt": "2020-06-23T07:21:28Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -193,12 +204,26 @@ private void unlistenChanges() {\n \n     @Override\n     public <V> Future<?> schedule(HugeTask<V> task) {\n+        if (!this.serverManager().master()) {\n+            throw new HugeException(\"The worker can't schedule task\");\n+        }\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n+\n         task.status(TaskStatus.QUEUED);\n-        return this.submitTask(task);\n+        if (task.callable() instanceof EphemeralJob) {\n+            return this.submitTask(task);\n+        }\n+\n+        // Just save task to be scheduled by periodic scheduler\n+        this.save(task);\n+\n+        // Notify master server to schedule and execute immediately\n+        TaskManager.instance().notifyNewTask(task);\n+\n+        return task;\n     }\n \n-    private <V> Future<?> submitTask(HugeTask<V> task) {\n+    public  <V> Future<?> submitTask(HugeTask<V> task) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjYyMTUwOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzoyNDozNFrOGnciXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzoyNDozNFrOGnciXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxNTE5OA==", "bodyText": "add comment: Unit second", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444015198", "createdAt": "2020-06-23T07:24:34Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "diffHunk": "@@ -26,27 +26,37 @@\n import java.util.concurrent.Callable;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.ThreadPoolExecutor;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n+import org.slf4j.Logger;\n+\n import com.baidu.hugegraph.HugeException;\n import com.baidu.hugegraph.HugeGraphParams;\n+import com.baidu.hugegraph.cluster.ServerInfoManager;\n import com.baidu.hugegraph.util.E;\n import com.baidu.hugegraph.util.ExecutorUtil;\n+import com.baidu.hugegraph.util.Log;\n \n public final class TaskManager {\n \n+    private static final Logger LOG = Log.logger(TaskManager.class);\n+\n     public static final String TASK_WORKER = \"task-worker-%d\";\n     public static final String TASK_DB_WORKER = \"task-db-worker-%d\";\n+    public static final String TASK_SCHEDULER = \"task-scheduler-%d\";\n \n+    public static final int SCHEDULE_PERIOD = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjY0Mjg5OnYy", "diffSide": "RIGHT", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/MultiGraphsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzozMTowOVrOGncv0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjoxNTowMlrOGnmYvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxODY0MQ==", "bodyText": "prefer set DATA_PATH before openGraphs() in each test", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444018641", "createdAt": "2020-06-23T07:31:09Z", "author": {"login": "javeme"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/MultiGraphsTest.java", "diffHunk": "@@ -325,8 +329,17 @@ public void testCreateGraphsWithMultiDisksForRocksDB() {\n             config.setProperty(key, conf.getProperty(key));\n         }\n         ((BaseConfiguration) config).setDelimiterParsingDisabled(true);\n+        String backend = config.getString(CoreOptions.BACKEND.name());\n+        String data = config.getString(RocksDBOptions.DATA_PATH.name());\n+        String wal = config.getString(RocksDBOptions.DATA_PATH.name());\n         for (String graphName : graphNames) {\n             config.setProperty(CoreOptions.STORE.name(), graphName);\n+            if (backend.equals(\"rocksdb\")) {\n+                String dataPath = data + \"/\" + graphName;\n+                config.setProperty(RocksDBOptions.DATA_PATH.name(), dataPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE3NjU3Mg==", "bodyText": "address it", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444176572", "createdAt": "2020-06-23T12:15:02Z", "author": {"login": "javeme"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/MultiGraphsTest.java", "diffHunk": "@@ -325,8 +329,17 @@ public void testCreateGraphsWithMultiDisksForRocksDB() {\n             config.setProperty(key, conf.getProperty(key));\n         }\n         ((BaseConfiguration) config).setDelimiterParsingDisabled(true);\n+        String backend = config.getString(CoreOptions.BACKEND.name());\n+        String data = config.getString(RocksDBOptions.DATA_PATH.name());\n+        String wal = config.getString(RocksDBOptions.DATA_PATH.name());\n         for (String graphName : graphNames) {\n             config.setProperty(CoreOptions.STORE.name(), graphName);\n+            if (backend.equals(\"rocksdb\")) {\n+                String dataPath = data + \"/\" + graphName;\n+                config.setProperty(RocksDBOptions.DATA_PATH.name(), dataPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxODY0MQ=="}, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjY1MzM2OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzozNDoxOVrOGnc2Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzozNDoxOVrOGnc2Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMDI4Nw==", "bodyText": "unneeded index", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444020287", "createdAt": "2020-06-23T07:34:19Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -550,13 +700,14 @@ public void initSchema() {\n                                      .useCustomizeNumberId()\n                                      .nullableKeys(P.DESCRIPTION, P.CONTEXT,\n                                                    P.UPDATE, P.INPUT, P.RESULT,\n-                                                   P.DEPENDENCIES)\n+                                                   P.DEPENDENCIES, P.SERVER)\n                                      .enableLabelIndex(true)\n                                      .build();\n             this.params().schemaTransaction().addVertexLabel(label);\n \n             // Create index\n             this.createIndexLabel(label, P.STATUS);\n+            this.createIndexLabel(label, P.SERVER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 292}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjY2NjI2OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzozNzoyNlrOGnc92A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzozNzoyNlrOGnc92A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMjIzMg==", "bodyText": "minServer -- the meaning is incomprehensible", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444022232", "createdAt": "2020-06-23T07:37:26Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -226,31 +246,161 @@ private void unlistenChanges() {\n     }\n \n     @Override\n-    public <V> boolean cancel(HugeTask<V> task) {\n+    public synchronized <V> void cancel(HugeTask<V> task) {\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n-        boolean cancelled = false;\n+        if (!this.serverManager().master()) {\n+            return;\n+        }\n         if (!task.completed()) {\n-            /*\n-             * Task may be loaded from backend store and not initialized. like:\n-             * A task is completed but failed to save in the last step,\n-             * resulting in the status of the task not being updated to storage,\n-             * the task is not in memory, so it's not initialized when canceled.\n-             */\n-            this.initTaskCallable(task);\n-            cancelled = task.cancel(true);\n+            // The task scheduled to workers, waiting for worker cancel\n+            task = this.task(task.id());\n+            task.status(TaskStatus.CANCELLING);\n+            this.save(task);\n             this.remove(task.id());\n+            // Notify master server to schedule and execute immediately\n+            TaskManager.instance().notifyNewTask(task);\n         }\n-        assert task.completed();\n-        return cancelled;\n     }\n \n-    protected void remove(Id id) {\n+    protected synchronized <V> void scheduleTasks() {\n+        // Master schedule all queued tasks to suitable servers\n+        String page = PageInfo.PAGE_NONE;\n+        do {\n+            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.QUEUED,\n+                                                     PAGE_SIZE, page);\n+            HugeTask<V> task;\n+            while (tasks.hasNext()) {\n+                task = tasks.next();\n+                if (task.server() != null) {\n+                    // Skip if already scheduled\n+                    continue;\n+                }\n+                HugeServerInfo server = this.pickWorker(task);\n+                if (server == null) {\n+                    LOG.debug(\"The master can not find suitable server to \" +\n+                              \"execute task: {}, wait for next schedule\",\n+                              task.id());\n+                    return;\n+                }\n+\n+                // Found suitable server, update task server and server load\n+                assert server.id() != null;\n+                task.server(server.id());\n+                this.save(task);\n+                server.load(server.load() + task.load());\n+                this.serverManager().save(server);\n+                LOG.info(\"Schedule task {} to server {}\",\n+                         task.id(), server.id());\n+            }\n+            page = PageInfo.pageInfo(tasks);\n+        } while (page != null);\n+    }\n+\n+    protected <V> void executeTasksForWorker(Id server) {\n+        String page = PageInfo.PAGE_NONE;\n+        do {\n+            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.QUEUED,\n+                                                     PAGE_SIZE, page);\n+            while (tasks.hasNext()) {\n+                HugeTask<V> task = tasks.next();\n+                this.initTaskCallable(task);\n+                Id taskServer = task.server();\n+                if (taskServer != null && taskServer.equals(server)) {\n+                    this.submitTask(task);\n+                }\n+            }\n+            page = PageInfo.pageInfo(tasks);\n+        } while (page != null);\n+    }\n+\n+    private synchronized <V> HugeServerInfo pickWorker(HugeTask<V> task) {\n+        HugeServerInfo master = null;\n+        HugeServerInfo minServer = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjY3NjQ4OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzo0MDowNVrOGndD9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzo0MDowNVrOGndD9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMzc5Nw==", "bodyText": "add some comments", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444023797", "createdAt": "2020-06-23T07:40:05Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -193,12 +204,26 @@ private void unlistenChanges() {\n \n     @Override\n     public <V> Future<?> schedule(HugeTask<V> task) {\n+        if (!this.serverManager().master()) {\n+            throw new HugeException(\"The worker can't schedule task\");\n+        }\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n+\n         task.status(TaskStatus.QUEUED);\n-        return this.submitTask(task);\n+        if (task.callable() instanceof EphemeralJob) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjY4MTA3OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzo0MToxOVrOGndGpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzo0MToxOVrOGndGpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyNDQ4NQ==", "bodyText": "rename to selfServer", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444024485", "createdAt": "2020-06-23T07:41:19Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -162,6 +170,7 @@ private void unlistenChanges() {\n     public <V> void restoreTasks() {\n         boolean supportsPaging = this.graph().backendStoreFeatures()\n                                              .supportsQueryByPage();\n+        Id server = this.serverManager().serverId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjY4NTYxOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/config/CoreOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzo0MjozNlrOGndJlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzo0MjozNlrOGndJlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyNTIzNg==", "bodyText": "too much time that client may time out, 20s is ok", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444025236", "createdAt": "2020-06-23T07:42:36Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/config/CoreOptions.java", "diffHunk": "@@ -114,7 +114,7 @@ public static synchronized CoreOptions instance() {\n                     \"Timeout in seconds for waiting for the task to complete,\" +\n                     \"such as when truncating or clearing the backend.\",\n                     rangeInt(0L, Long.MAX_VALUE),\n-                    10L\n+                    30L", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjY5ODMzOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzo0NjowOFrOGndRfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzo0NjowOFrOGndRfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyNzI2Mg==", "bodyText": "move serverId and serverRole assignment to the begin of this method after refactor initServerInfo params", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444027262", "createdAt": "2020-06-23T07:46:08Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.cluster;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.slf4j.Logger;\n+\n+import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.HugeGraphParams;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.backend.page.PageInfo;\n+import com.baidu.hugegraph.backend.query.Condition;\n+import com.baidu.hugegraph.backend.query.ConditionQuery;\n+import com.baidu.hugegraph.backend.query.QueryResults;\n+import com.baidu.hugegraph.backend.tx.GraphTransaction;\n+import com.baidu.hugegraph.event.EventListener;\n+import com.baidu.hugegraph.iterator.MapperIterator;\n+import com.baidu.hugegraph.schema.PropertyKey;\n+import com.baidu.hugegraph.schema.VertexLabel;\n+import com.baidu.hugegraph.structure.HugeVertex;\n+import com.baidu.hugegraph.type.HugeType;\n+import com.baidu.hugegraph.type.define.NodeRole;\n+import com.baidu.hugegraph.type.define.HugeKeys;\n+import com.baidu.hugegraph.util.DateUtil;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.Events;\n+import com.baidu.hugegraph.util.Log;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import static com.baidu.hugegraph.backend.page.PageInfo.PAGE_NONE;\n+import static com.baidu.hugegraph.backend.query.Query.NO_LIMIT;\n+\n+public class ServerInfoManager {\n+\n+    private static final Logger LOG = Log.logger(ServerInfoManager.class);\n+\n+    private final HugeGraphParams graph;\n+    private final EventListener eventListener;\n+    private Id serverId;\n+    private NodeRole serverRole;\n+\n+    public ServerInfoManager(HugeGraphParams graph) {\n+        E.checkNotNull(graph, \"graph\");\n+        this.graph = graph;\n+        this.eventListener = this.listenChanges();\n+    }\n+\n+    private EventListener listenChanges() {\n+        // Listen store event: \"store.inited\"\n+        Set<String> storeEvents = ImmutableSet.of(Events.STORE_INITED);\n+        EventListener eventListener = event -> {\n+            // Ensure user schema create after system info initialized\n+            if (storeEvents.contains(event.name())) {\n+                try {\n+                    this.initSchemaIfNeeded();\n+                } finally {\n+                    this.graph.closeTx();\n+                }\n+                return true;\n+            }\n+            return false;\n+        };\n+        this.graph.loadSystemStore().provider().listen(eventListener);\n+        return eventListener;\n+    }\n+\n+    private void unlistenChanges() {\n+        this.graph.loadSystemStore().provider().unlisten(this.eventListener);\n+    }\n+\n+    public boolean close() {\n+        this.unlistenChanges();\n+        return true;\n+    }\n+\n+    public void initServerInfo(String server, String role) {\n+        E.checkArgument(server != null && !server.isEmpty(),\n+                        \"The server name can't be null or empty\");\n+        HugeServerInfo existed = this.serverInfo(server);\n+        E.checkArgument(existed == null || !existed.alive(),\n+                        \"The server with name '%s' already in cluster\",\n+                        server);\n+        E.checkArgument(role != null && !role.isEmpty(),\n+                        \"The server role can't be null or empty\");\n+        NodeRole nodeRole = NodeRole.valueOf(role.toUpperCase());\n+        if (nodeRole.master()) {\n+            String page = PAGE_NONE;\n+            do {\n+                Iterator<HugeServerInfo> servers = this.serverInfos(10L, page);\n+                while (servers.hasNext()) {\n+                    existed = servers.next();\n+                    E.checkArgument(existed.role().worker() ||\n+                                    !existed.alive(),\n+                                    \"Already existed master '%s' in current \" +\n+                                    \"cluster\", existed.id());\n+                }\n+                page = PageInfo.pageInfo(servers);\n+            } while (page != null);\n+        }\n+\n+        HugeServerInfo serverInfo = new HugeServerInfo(server, nodeRole);\n+        serverInfo.maxLoad(this.calcMaxLoad());\n+        this.serverId = serverInfo.id();\n+        this.serverRole = nodeRole;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjcwMDA3OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzo0NjozOFrOGndSqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzo0NjozOFrOGndSqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyNzU2Mw==", "bodyText": "add const var", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444027563", "createdAt": "2020-06-23T07:46:38Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.cluster;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.slf4j.Logger;\n+\n+import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.HugeGraphParams;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.backend.page.PageInfo;\n+import com.baidu.hugegraph.backend.query.Condition;\n+import com.baidu.hugegraph.backend.query.ConditionQuery;\n+import com.baidu.hugegraph.backend.query.QueryResults;\n+import com.baidu.hugegraph.backend.tx.GraphTransaction;\n+import com.baidu.hugegraph.event.EventListener;\n+import com.baidu.hugegraph.iterator.MapperIterator;\n+import com.baidu.hugegraph.schema.PropertyKey;\n+import com.baidu.hugegraph.schema.VertexLabel;\n+import com.baidu.hugegraph.structure.HugeVertex;\n+import com.baidu.hugegraph.type.HugeType;\n+import com.baidu.hugegraph.type.define.NodeRole;\n+import com.baidu.hugegraph.type.define.HugeKeys;\n+import com.baidu.hugegraph.util.DateUtil;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.Events;\n+import com.baidu.hugegraph.util.Log;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import static com.baidu.hugegraph.backend.page.PageInfo.PAGE_NONE;\n+import static com.baidu.hugegraph.backend.query.Query.NO_LIMIT;\n+\n+public class ServerInfoManager {\n+\n+    private static final Logger LOG = Log.logger(ServerInfoManager.class);\n+\n+    private final HugeGraphParams graph;\n+    private final EventListener eventListener;\n+    private Id serverId;\n+    private NodeRole serverRole;\n+\n+    public ServerInfoManager(HugeGraphParams graph) {\n+        E.checkNotNull(graph, \"graph\");\n+        this.graph = graph;\n+        this.eventListener = this.listenChanges();\n+    }\n+\n+    private EventListener listenChanges() {\n+        // Listen store event: \"store.inited\"\n+        Set<String> storeEvents = ImmutableSet.of(Events.STORE_INITED);\n+        EventListener eventListener = event -> {\n+            // Ensure user schema create after system info initialized\n+            if (storeEvents.contains(event.name())) {\n+                try {\n+                    this.initSchemaIfNeeded();\n+                } finally {\n+                    this.graph.closeTx();\n+                }\n+                return true;\n+            }\n+            return false;\n+        };\n+        this.graph.loadSystemStore().provider().listen(eventListener);\n+        return eventListener;\n+    }\n+\n+    private void unlistenChanges() {\n+        this.graph.loadSystemStore().provider().unlisten(this.eventListener);\n+    }\n+\n+    public boolean close() {\n+        this.unlistenChanges();\n+        return true;\n+    }\n+\n+    public void initServerInfo(String server, String role) {\n+        E.checkArgument(server != null && !server.isEmpty(),\n+                        \"The server name can't be null or empty\");\n+        HugeServerInfo existed = this.serverInfo(server);\n+        E.checkArgument(existed == null || !existed.alive(),\n+                        \"The server with name '%s' already in cluster\",\n+                        server);\n+        E.checkArgument(role != null && !role.isEmpty(),\n+                        \"The server role can't be null or empty\");\n+        NodeRole nodeRole = NodeRole.valueOf(role.toUpperCase());\n+        if (nodeRole.master()) {\n+            String page = PAGE_NONE;\n+            do {\n+                Iterator<HugeServerInfo> servers = this.serverInfos(10L, page);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzY1NTY2OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjoyNDoxN1rOGnmtHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjoyNjoyMVrOGnmxnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4MTc4OA==", "bodyText": "10L", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444181788", "createdAt": "2020-06-23T12:24:17Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "diffHunk": "@@ -592,18 +637,10 @@ private void checkPropertySize(int propertyLength, String propertyName) {\n \n     public void syncWait() {\n         try {\n-            this.get();\n-            assert this.completed();\n-        } catch (ExecutionException e) {\n-            Throwable cause = e.getCause();\n-            if (cause instanceof RuntimeException) {\n-                throw (RuntimeException) cause;\n-            }\n-            throw new HugeException(\"Async task failed with error: %s\",\n-                                    cause, cause.getMessage());\n+            this.scheduler().waitUntilTaskCompleted(this.id(), 20L, 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec3d46152e5df44c3eea790c524154c151d336a"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4Mjk0MA==", "bodyText": "seems can delete syncWait() method", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444182940", "createdAt": "2020-06-23T12:26:21Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "diffHunk": "@@ -592,18 +637,10 @@ private void checkPropertySize(int propertyLength, String propertyName) {\n \n     public void syncWait() {\n         try {\n-            this.get();\n-            assert this.completed();\n-        } catch (ExecutionException e) {\n-            Throwable cause = e.getCause();\n-            if (cause instanceof RuntimeException) {\n-                throw (RuntimeException) cause;\n-            }\n-            throw new HugeException(\"Async task failed with error: %s\",\n-                                    cause, cause.getMessage());\n+            this.scheduler().waitUntilTaskCompleted(this.id(), 20L, 10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4MTc4OA=="}, "originalCommit": {"oid": "1ec3d46152e5df44c3eea790c524154c151d336a"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzY2NzM3OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjoyNzozNlrOGnm0hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjoyNzozNlrOGnm0hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4MzY4Nw==", "bodyText": "\"can't\"", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444183687", "createdAt": "2020-06-23T12:27:36Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -226,31 +250,160 @@ private void unlistenChanges() {\n     }\n \n     @Override\n-    public <V> boolean cancel(HugeTask<V> task) {\n+    public synchronized <V> void cancel(HugeTask<V> task) {\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n-        boolean cancelled = false;\n+        if (!this.serverManager().master()) {\n+            return;\n+        }\n         if (!task.completed()) {\n-            /*\n-             * Task may be loaded from backend store and not initialized. like:\n-             * A task is completed but failed to save in the last step,\n-             * resulting in the status of the task not being updated to storage,\n-             * the task is not in memory, so it's not initialized when canceled.\n-             */\n-            this.initTaskCallable(task);\n-            cancelled = task.cancel(true);\n+            // The task scheduled to workers, waiting for worker cancel\n+            task.status(TaskStatus.CANCELLING);\n+            this.save(task);\n             this.remove(task.id());\n+            // Notify master server to schedule and execute immediately\n+            TaskManager.instance().notifyNewTask(task);\n+        }\n+    }\n+\n+    protected synchronized <V> void scheduleTasks() {\n+        // Master schedule all queued tasks to suitable servers\n+        String page = PageInfo.PAGE_NONE;\n+        do {\n+            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.QUEUED,\n+                                                     PAGE_SIZE, page);\n+            HugeTask<V> task;\n+            while (tasks.hasNext()) {\n+                task = tasks.next();\n+                if (task.server() != null) {\n+                    // Skip if already scheduled\n+                    continue;\n+                }\n+                HugeServerInfo server = this.pickWorker(task);\n+                if (server == null) {\n+                    LOG.debug(\"The master can not find suitable server to \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec3d46152e5df44c3eea790c524154c151d336a"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Nzc3OTc1OnYy", "diffSide": "RIGHT", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjo1Njo0MVrOGnn5-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMjo1Njo0MVrOGnn5-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwMTQ2Ng==", "bodyText": "task = scheduler.waitUntilTaskCompleted()", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444201466", "createdAt": "2020-06-23T12:56:41Z", "author": {"login": "javeme"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "diffHunk": "@@ -325,6 +316,7 @@ public void testGremlinJobWithFailure() throws TimeoutException {\n                .job(new GremlinJob());\n         HugeTask<Object> task = builder.schedule();\n         scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        task = scheduler.task(task.id());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec3d46152e5df44c3eea790c524154c151d336a"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDE5OTU1OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMToyOTo0N1rOGn_4fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMToyOTo0N1rOGn_4fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU5NDMwMQ==", "bodyText": "seem contrary to common sense, it should accept new task if it is alive", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444594301", "createdAt": "2020-06-24T01:29:47Z", "author": {"login": "houzhizhen"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java", "diffHunk": "@@ -176,9 +183,8 @@ public static HugeServer fromVertex(Vertex vertex) {\n         return server;\n     }\n \n-    public <V> boolean suitableFor(HugeTask<V> task, long now) {\n-        if (this.updateTime.getTime() + 5000L < now ||\n-            this.load() + task.load() > MAX_LOAD) {\n+    public <V> boolean suitableFor(HugeTask<V> task) {\n+        if (this.alive() || this.load() + task.load() > MAX_LOAD) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33b32fabc2c1396f8fedc9dcd4afc6fe87677048"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDIxNTYyOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMTo0MDoyMVrOGoACjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMTo0MDoyMVrOGoACjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU5Njg3OQ==", "bodyText": "Exception information may not correct.", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444596879", "createdAt": "2020-06-24T01:40:21Z", "author": {"login": "houzhizhen"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java", "diffHunk": "@@ -93,13 +94,29 @@ public boolean close() {\n     public void initServerInfo(String server, String role) {\n         E.checkArgument(server != null && !server.isEmpty(),\n                         \"The server name can't be null or empty\");\n+        HugeServerInfo existed = this.serverInfo(server);\n+        E.checkArgument(existed == null || !existed.alive(),\n+                        \"The server with name '%s' already in cluster\",\n+                        server);\n         E.checkArgument(role != null && !role.isEmpty(),\n                         \"The server role can't be null or empty\");\n         GraphRole graphRole = GraphRole.valueOf(role.toUpperCase());\n-        HugeServer hugeServer = new HugeServer(server, graphRole);\n-        this.serverId = hugeServer.id();\n+        if (graphRole.master()) {\n+            Iterator<HugeServerInfo> servers = this.serverInfos(ImmutableMap.of(\n+                                               HugeServerInfo.P.ROLE,\n+                                               GraphRole.MASTER.code()),\n+                                               1, PAGE_NONE);\n+            if (servers.hasNext()) {\n+                existed = servers.next();\n+                E.checkArgument(!existed.alive(),\n+                                \"Already existed master '%s' in current \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33b32fabc2c1396f8fedc9dcd4afc6fe87677048"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTMyMjQ4OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOToxOTo1NVrOGqzoYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOToxOTo1NVrOGqzoYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzOTI5Nw==", "bodyText": "define a field or method supportsPaging", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r447539297", "createdAt": "2020-06-30T09:19:55Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -293,12 +295,16 @@ private void unlistenChanges() {\n                 LOG.info(\"Schedule task {} to server {}\",\n                          task.id(), server.id());\n             }\n-            page = PageInfo.pageInfo(tasks);\n+            if (page != null) {\n+                page = PageInfo.pageInfo(tasks);\n+            }\n         } while (page != null);\n     }\n \n     protected <V> void executeTasksForWorker(Id server) {\n-        String page = PageInfo.PAGE_NONE;\n+        boolean supportsPaging = this.graph().backendStoreFeatures()\n+                                     .supportsQueryByPage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abf01c75ae252c64890acfb239b679a710dd3714"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTMzODU4OnYy", "diffSide": "RIGHT", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOToyMzo1N1rOGqzyNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOToyMzo1N1rOGqzyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU0MTgxNA==", "bodyText": "add \"computer\"", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r447541814", "createdAt": "2020-06-30T09:23:57Z", "author": {"login": "javeme"}, "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java", "diffHunk": "@@ -57,6 +57,15 @@ public static synchronized ServerOptions instance() {\n                     \"server-1\"\n             );\n \n+    public static final ConfigOption<String> SERVER_ROLE =\n+            new ConfigOption<>(\n+                    \"server.role\",\n+                    \"The role of nodes in the cluster, available types are \" +\n+                    \"[master, worker]\",\n+                    allowValues(\"master\", \"worker\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abf01c75ae252c64890acfb239b679a710dd3714"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTM4NTU3OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTozNjowMFrOGq0Pzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTozNjowMFrOGq0Pzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU0OTM5MA==", "bodyText": "not supported by auth graph", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r447549390", "createdAt": "2020-06-30T09:36:00Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "diffHunk": "@@ -591,19 +636,22 @@ private void checkPropertySize(int propertyLength, String propertyName) {\n     }\n \n     public void syncWait() {\n+        long timeout = ((HugeConfig) this.scheduler.graph().configuration())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abf01c75ae252c64890acfb239b679a710dd3714"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTM5MDg0OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTozNzoyMFrOGq0TAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTozNzoyMFrOGq0TAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1MDIxMA==", "bodyText": "can read timeout in scheduler.waitUntilTaskCompleted()", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r447550210", "createdAt": "2020-06-30T09:37:20Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "diffHunk": "@@ -591,19 +636,22 @@ private void checkPropertySize(int propertyLength, String propertyName) {\n     }\n \n     public void syncWait() {\n+        long timeout = ((HugeConfig) this.scheduler.graph().configuration())\n+                       .get(CoreOptions.TASK_WAIT_TIMEOUT);\n         try {\n-            this.get();\n-            assert this.completed();\n-        } catch (ExecutionException e) {\n-            Throwable cause = e.getCause();\n-            if (cause instanceof RuntimeException) {\n-                throw (RuntimeException) cause;\n-            }\n-            throw new HugeException(\"Async task failed with error: %s\",\n-                                    cause, cause.getMessage());\n+            this.scheduler().waitUntilTaskCompleted(this.id(), timeout, 10L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abf01c75ae252c64890acfb239b679a710dd3714"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTQzNDIyOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTo0ODoyN1rOGq0twQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTo0ODoyN1rOGq0twQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1NzA1Nw==", "bodyText": "ensure completed, call this.schedulerExecutor.submit(closeTx).get()", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r447557057", "createdAt": "2020-06-30T09:48:27Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "diffHunk": "@@ -114,18 +151,49 @@ private void closeTaskTx(HugeGraphParams graph) {\n         }\n     }\n \n+    private void closeSchedulerTx(HugeGraphParams graph) {\n+        final Callable<Void> closeTx = () -> {\n+            // Do close-tx for current thread\n+            graph.closeTx();\n+            // Let other threads run\n+            Thread.yield();\n+            return null;\n+        };\n+\n+        try {\n+            this.schedulerExecutor.submit(closeTx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abf01c75ae252c64890acfb239b679a710dd3714"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTkwNjQ4OnYy", "diffSide": "RIGHT", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowNjo0N1rOGq5PFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowNjo0N1rOGq5PFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzMTEyNA==", "bodyText": "also update line 64", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r447631124", "createdAt": "2020-06-30T12:06:47Z", "author": {"login": "javeme"}, "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java", "diffHunk": "@@ -62,7 +62,7 @@ public static synchronized ServerOptions instance() {\n                     \"server.role\",\n                     \"The role of nodes in the cluster, available types are \" +\n                     \"[master, worker]\",\n-                    allowValues(\"master\", \"worker\"),\n+                    allowValues(\"master\", \"worker\", \"computer\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d073d36e4a3dc6f88afbebcbfde889557ad2b25"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1639, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}