{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMTQ4ODc2", "number": 1024, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMToxNzowOVrOED03xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMToxOTo1NVrOED07Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDQ3NDI5OnYy", "diffSide": "RIGHT", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/MultiGraphsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMToxNzowOVrOGhEkwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMToxNzowOVrOGhEkwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMzMTEzNw==", "bodyText": "add space between \"city\" and \"weight\"", "url": "https://github.com/hugegraph/hugegraph/pull/1024#discussion_r437331137", "createdAt": "2020-06-09T11:17:09Z", "author": {"login": "Linary"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/MultiGraphsTest.java", "diffHunk": "@@ -55,6 +61,150 @@ public void testCreateMultiGraphs() {\n         destoryGraphs(graphs);\n     }\n \n+    @Test\n+    public void testCopySchemaWithMultiGraphs() {\n+        List<HugeGraph> graphs = openGraphs(\"schema_g1\", \"schema_g2\");\n+        for (HugeGraph graph : graphs) {\n+            graph.initBackend();\n+        }\n+        HugeGraph g1 = graphs.get(0);\n+        HugeGraph g2 = graphs.get(1);\n+\n+        SchemaManager schema = g1.schema();\n+\n+        schema.propertyKey(\"id\").asInt().create();\n+        schema.propertyKey(\"name\").asText().create();\n+        schema.propertyKey(\"age\").asInt().valueSingle().create();\n+        schema.propertyKey(\"city\").asText().create();\n+        schema.propertyKey(\"weight\").asDouble().valueList().create();\n+        schema.propertyKey(\"born\").asDate().ifNotExist().create();\n+        schema.propertyKey(\"time\").asDate().ifNotExist().create();\n+\n+        schema.vertexLabel(\"person\")\n+              .properties(\"id\", \"name\", \"age\", \"city\",\"weight\", \"born\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e0b27c3746b66d7ad4b1c7d266903d39e5acd9"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDQ4Mjc5OnYy", "diffSide": "RIGHT", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/MultiGraphsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMToxOTo1NVrOGhEqJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMToxOTo1NVrOGhEqJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMzMjUxNg==", "bodyText": "rename pk -> copied, expected -> origin", "url": "https://github.com/hugegraph/hugegraph/pull/1024#discussion_r437332516", "createdAt": "2020-06-09T11:19:55Z", "author": {"login": "Linary"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/MultiGraphsTest.java", "diffHunk": "@@ -55,6 +61,150 @@ public void testCreateMultiGraphs() {\n         destoryGraphs(graphs);\n     }\n \n+    @Test\n+    public void testCopySchemaWithMultiGraphs() {\n+        List<HugeGraph> graphs = openGraphs(\"schema_g1\", \"schema_g2\");\n+        for (HugeGraph graph : graphs) {\n+            graph.initBackend();\n+        }\n+        HugeGraph g1 = graphs.get(0);\n+        HugeGraph g2 = graphs.get(1);\n+\n+        SchemaManager schema = g1.schema();\n+\n+        schema.propertyKey(\"id\").asInt().create();\n+        schema.propertyKey(\"name\").asText().create();\n+        schema.propertyKey(\"age\").asInt().valueSingle().create();\n+        schema.propertyKey(\"city\").asText().create();\n+        schema.propertyKey(\"weight\").asDouble().valueList().create();\n+        schema.propertyKey(\"born\").asDate().ifNotExist().create();\n+        schema.propertyKey(\"time\").asDate().ifNotExist().create();\n+\n+        schema.vertexLabel(\"person\")\n+              .properties(\"id\", \"name\", \"age\", \"city\",\"weight\", \"born\")\n+              .primaryKeys(\"id\").create();\n+        schema.vertexLabel(\"person2\")\n+              .properties(\"id\", \"name\", \"age\", \"city\")\n+              .primaryKeys(\"id\").create();\n+        schema.edgeLabel(\"friend\").sourceLabel(\"person\").targetLabel(\"person\")\n+              .properties(\"time\").create();\n+\n+        schema.indexLabel(\"personByName\").onV(\"person\").secondary()\n+              .by(\"name\").create();\n+        schema.indexLabel(\"personByCity\").onV(\"person\").search()\n+              .by(\"city\").create();\n+        schema.indexLabel(\"personByAge\").onV(\"person\").range()\n+              .by(\"age\").create();\n+        schema.indexLabel(\"friendByTime\").onE(\"friend\").range()\n+              .by(\"time\").create();\n+\n+        Assert.assertFalse(g2.existsPropertyKey(\"id\"));\n+        Assert.assertFalse(g2.existsPropertyKey(\"name\"));\n+        Assert.assertFalse(g2.existsPropertyKey(\"age\"));\n+        Assert.assertFalse(g2.existsPropertyKey(\"city\"));\n+        Assert.assertFalse(g2.existsPropertyKey(\"weight\"));\n+        Assert.assertFalse(g2.existsPropertyKey(\"born\"));\n+        Assert.assertFalse(g2.existsPropertyKey(\"time\"));\n+\n+        Assert.assertFalse(g2.existsVertexLabel(\"person\"));\n+        Assert.assertFalse(g2.existsVertexLabel(\"person2\"));\n+        Assert.assertFalse(g2.existsEdgeLabel(\"friend\"));\n+\n+        Assert.assertFalse(g2.existsIndexLabel(\"personByName\"));\n+        Assert.assertFalse(g2.existsIndexLabel(\"personByCity\"));\n+        Assert.assertFalse(g2.existsIndexLabel(\"personByAge\"));\n+        Assert.assertFalse(g2.existsIndexLabel(\"friendByTime\"));\n+\n+        // Copy schema from g1 to g2\n+        g2.schema().copyFrom(g1.schema());\n+\n+        Assert.assertTrue(g2.existsPropertyKey(\"id\"));\n+        Assert.assertTrue(g2.existsPropertyKey(\"name\"));\n+        Assert.assertTrue(g2.existsPropertyKey(\"age\"));\n+        Assert.assertTrue(g2.existsPropertyKey(\"city\"));\n+        Assert.assertTrue(g2.existsPropertyKey(\"weight\"));\n+        Assert.assertTrue(g2.existsPropertyKey(\"born\"));\n+        Assert.assertTrue(g2.existsPropertyKey(\"time\"));\n+\n+        Assert.assertTrue(g2.existsVertexLabel(\"person\"));\n+        Assert.assertTrue(g2.existsVertexLabel(\"person2\"));\n+        Assert.assertTrue(g2.existsEdgeLabel(\"friend\"));\n+\n+        Assert.assertTrue(g2.existsIndexLabel(\"personByName\"));\n+        Assert.assertTrue(g2.existsIndexLabel(\"personByCity\"));\n+        Assert.assertTrue(g2.existsIndexLabel(\"personByAge\"));\n+        Assert.assertTrue(g2.existsIndexLabel(\"friendByTime\"));\n+\n+        for (PropertyKey pk : g2.schema().getPropertyKeys()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e0b27c3746b66d7ad4b1c7d266903d39e5acd9"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1635, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}