{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMTY4NzE0", "number": 827, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjozNDoyN1rODgX94Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxMjo0Mjo0MVrODiJqHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjczNjk3OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/schema/RebuildIndexCallable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjozNDoyN1rOFqi64Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMzo1MjoyOFrOFsUE2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NjY0MQ==", "bodyText": "When will the schema be null", "url": "https://github.com/hugegraph/hugegraph/pull/827#discussion_r380156641", "createdAt": "2020-02-17T12:34:27Z", "author": {"login": "Linary"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/schema/RebuildIndexCallable.java", "diffHunk": "@@ -50,7 +50,11 @@ public String type() {\n \n     @Override\n     public Object execute() {\n-        this.rebuildIndex(this.schemaElement());\n+        SchemaElement schema = this.schemaElement();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "818c1b6c491d3ea1f1a9013f67968940b920d755"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAxMDU4Nw==", "bodyText": "Maybe the schema is removed when task running, I'm not quite sure of the exact scene.", "url": "https://github.com/hugegraph/hugegraph/pull/827#discussion_r382010587", "createdAt": "2020-02-20T13:52:28Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/schema/RebuildIndexCallable.java", "diffHunk": "@@ -50,7 +50,11 @@ public String type() {\n \n     @Override\n     public Object execute() {\n-        this.rebuildIndex(this.schemaElement());\n+        SchemaElement schema = this.schemaElement();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NjY0MQ=="}, "originalCommit": {"oid": "818c1b6c491d3ea1f1a9013f67968940b920d755"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mjg1OTY5OnYy", "diffSide": "RIGHT", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzoxNzowM1rOFqkE9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzoxNzowM1rOFqkE9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3NTYwNw==", "bodyText": "add empty line", "url": "https://github.com/hugegraph/hugegraph/pull/827#discussion_r380175607", "createdAt": "2020-02-17T13:17:03Z", "author": {"login": "Linary"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "diffHunk": "@@ -0,0 +1,555 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.core;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.api.job.GremlinAPI.GremlinRequest;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.exception.LimitExceedException;\n+import com.baidu.hugegraph.exception.NotFoundException;\n+import com.baidu.hugegraph.job.EphemeralJob;\n+import com.baidu.hugegraph.job.EphemeralJobBuilder;\n+import com.baidu.hugegraph.job.GremlinJob;\n+import com.baidu.hugegraph.job.JobBuilder;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.task.TaskCallable;\n+import com.baidu.hugegraph.task.TaskScheduler;\n+import com.baidu.hugegraph.task.TaskStatus;\n+import com.baidu.hugegraph.testutil.Assert;\n+import com.baidu.hugegraph.testutil.Whitebox;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class TaskCoreTest extends BaseCoreTest {\n+\n+    private static final int SLEEP_TIME = 200;\n+\n+    @After\n+    @Override\n+    public void setup() {\n+        super.setup();\n+\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        Iterator<HugeTask<Object>> iter = scheduler.findAllTask(-1, null);\n+        while (iter.hasNext()) {\n+            scheduler.deleteTask(iter.next().id());\n+        }\n+    }\n+\n+    @Test\n+    public void testTask() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        TaskCallable<Integer> callable =  new TaskCallable<Integer>() {\n+            @Override\n+            public Integer call() throws Exception {\n+                Thread.sleep(SLEEP_TIME);\n+                return 125;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "818c1b6c491d3ea1f1a9013f67968940b920d755"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzI0NTA2OnYy", "diffSide": "RIGHT", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzo1OTo0NFrOFsrBDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzo1OTo0NFrOFsrBDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM4NjQ0NA==", "bodyText": "= new", "url": "https://github.com/hugegraph/hugegraph/pull/827#discussion_r382386444", "createdAt": "2020-02-21T03:59:44Z", "author": {"login": "Linary"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "diffHunk": "@@ -0,0 +1,555 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.core;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.api.job.GremlinAPI.GremlinRequest;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.exception.LimitExceedException;\n+import com.baidu.hugegraph.exception.NotFoundException;\n+import com.baidu.hugegraph.job.EphemeralJob;\n+import com.baidu.hugegraph.job.EphemeralJobBuilder;\n+import com.baidu.hugegraph.job.GremlinJob;\n+import com.baidu.hugegraph.job.JobBuilder;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.task.TaskCallable;\n+import com.baidu.hugegraph.task.TaskScheduler;\n+import com.baidu.hugegraph.task.TaskStatus;\n+import com.baidu.hugegraph.testutil.Assert;\n+import com.baidu.hugegraph.testutil.Whitebox;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class TaskCoreTest extends BaseCoreTest {\n+\n+    private static final int SLEEP_TIME = 200;\n+\n+    @After\n+    @Override\n+    public void setup() {\n+        super.setup();\n+\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        Iterator<HugeTask<Object>> iter = scheduler.findAllTask(-1, null);\n+        while (iter.hasNext()) {\n+            scheduler.deleteTask(iter.next().id());\n+        }\n+    }\n+\n+    @Test\n+    public void testTask() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        TaskCallable<Integer> callable =  new TaskCallable<Integer>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "818c1b6c491d3ea1f1a9013f67968940b920d755"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzI0NTM4OnYy", "diffSide": "RIGHT", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzo1OTo1OVrOFsrBQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzo1OTo1OVrOFsrBQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM4NjQ5OA==", "bodyText": "ditto", "url": "https://github.com/hugegraph/hugegraph/pull/827#discussion_r382386498", "createdAt": "2020-02-21T03:59:59Z", "author": {"login": "Linary"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "diffHunk": "@@ -0,0 +1,555 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.core;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.api.job.GremlinAPI.GremlinRequest;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.exception.LimitExceedException;\n+import com.baidu.hugegraph.exception.NotFoundException;\n+import com.baidu.hugegraph.job.EphemeralJob;\n+import com.baidu.hugegraph.job.EphemeralJobBuilder;\n+import com.baidu.hugegraph.job.GremlinJob;\n+import com.baidu.hugegraph.job.JobBuilder;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.task.TaskCallable;\n+import com.baidu.hugegraph.task.TaskScheduler;\n+import com.baidu.hugegraph.task.TaskStatus;\n+import com.baidu.hugegraph.testutil.Assert;\n+import com.baidu.hugegraph.testutil.Whitebox;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class TaskCoreTest extends BaseCoreTest {\n+\n+    private static final int SLEEP_TIME = 200;\n+\n+    @After\n+    @Override\n+    public void setup() {\n+        super.setup();\n+\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        Iterator<HugeTask<Object>> iter = scheduler.findAllTask(-1, null);\n+        while (iter.hasNext()) {\n+            scheduler.deleteTask(iter.next().id());\n+        }\n+    }\n+\n+    @Test\n+    public void testTask() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        TaskCallable<Integer> callable =  new TaskCallable<Integer>() {\n+            @Override\n+            public Integer call() throws Exception {\n+                Thread.sleep(SLEEP_TIME);\n+                return 125;\n+            }\n+            @Override\n+            protected void done() {\n+                scheduler.save(this.task());\n+            }\n+        };\n+\n+        Id id = IdGenerator.of(88888);\n+        HugeTask<?> task = new HugeTask<>(id, null, callable);\n+        task.type(\"test\");\n+        task.name(\"test-task\");\n+\n+        scheduler.schedule(task);\n+        Assert.assertEquals(id, task.id());\n+        Assert.assertFalse(task.completed());\n+\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            scheduler.deleteTask(id);\n+        }, e -> {\n+            Assert.assertContains(\"Can't delete incomplete task '88888'\",\n+                                  e.getMessage());\n+        });\n+\n+        task = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(id, task.id());\n+        Assert.assertEquals(\"test-task\", task.name());\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+\n+        Assert.assertEquals(\"test-task\", scheduler.task(id).name());\n+        Assert.assertEquals(\"test-task\", scheduler.findTask(id).name());\n+\n+        Iterator<HugeTask<Object>> iter = scheduler.tasks(ImmutableList.of(id));\n+        Assert.assertTrue(iter.hasNext());\n+        Assert.assertEquals(\"test-task\", iter.next().name());\n+        Assert.assertFalse(iter.hasNext());\n+\n+        iter = scheduler.findTask(TaskStatus.SUCCESS, 10, null);\n+        Assert.assertTrue(iter.hasNext());\n+        Assert.assertEquals(\"test-task\", iter.next().name());\n+        Assert.assertFalse(iter.hasNext());\n+\n+        iter = scheduler.findAllTask(10, null);\n+        Assert.assertTrue(iter.hasNext());\n+        Assert.assertEquals(\"test-task\", iter.next().name());\n+        Assert.assertFalse(iter.hasNext());\n+\n+        scheduler.deleteTask(id);\n+        iter = scheduler.findAllTask(10, null);\n+        Assert.assertFalse(iter.hasNext());\n+        Assert.assertThrows(NotFoundException.class, () -> {\n+            scheduler.task(id);\n+        });\n+    }\n+\n+    @Test\n+    public void testTaskWithFailure() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        TaskCallable<Integer> callable =  new TaskCallable<Integer>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "818c1b6c491d3ea1f1a9013f67968940b920d755"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzQ5MTg0OnYy", "diffSide": "RIGHT", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNjo1OToxOVrOFstSrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNjo1OToxOVrOFstSrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQyMzcyNQ==", "bodyText": "teardown may be better", "url": "https://github.com/hugegraph/hugegraph/pull/827#discussion_r382423725", "createdAt": "2020-02-21T06:59:19Z", "author": {"login": "zhoney"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "diffHunk": "@@ -0,0 +1,556 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.core;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.api.job.GremlinAPI.GremlinRequest;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.exception.LimitExceedException;\n+import com.baidu.hugegraph.exception.NotFoundException;\n+import com.baidu.hugegraph.job.EphemeralJob;\n+import com.baidu.hugegraph.job.EphemeralJobBuilder;\n+import com.baidu.hugegraph.job.GremlinJob;\n+import com.baidu.hugegraph.job.JobBuilder;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.task.TaskCallable;\n+import com.baidu.hugegraph.task.TaskScheduler;\n+import com.baidu.hugegraph.task.TaskStatus;\n+import com.baidu.hugegraph.testutil.Assert;\n+import com.baidu.hugegraph.testutil.Whitebox;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class TaskCoreTest extends BaseCoreTest {\n+\n+    private static final int SLEEP_TIME = 200;\n+\n+    @After\n+    @Override\n+    public void setup() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a19f3031850a30a7ba363070797a618fd055ca2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTM2NDE0OnYy", "diffSide": "RIGHT", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxMjo0Mjo0MVrOFtQg6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxMjo0Mjo0MVrOFtQg6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAwMDgwOQ==", "bodyText": "// Cancel success task", "url": "https://github.com/hugegraph/hugegraph/pull/827#discussion_r383000809", "createdAt": "2020-02-23T12:42:41Z", "author": {"login": "zhoney"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "diffHunk": "@@ -0,0 +1,556 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.core;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.api.job.GremlinAPI.GremlinRequest;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.exception.LimitExceedException;\n+import com.baidu.hugegraph.exception.NotFoundException;\n+import com.baidu.hugegraph.job.EphemeralJob;\n+import com.baidu.hugegraph.job.EphemeralJobBuilder;\n+import com.baidu.hugegraph.job.GremlinJob;\n+import com.baidu.hugegraph.job.JobBuilder;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.task.TaskCallable;\n+import com.baidu.hugegraph.task.TaskScheduler;\n+import com.baidu.hugegraph.task.TaskStatus;\n+import com.baidu.hugegraph.testutil.Assert;\n+import com.baidu.hugegraph.testutil.Whitebox;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class TaskCoreTest extends BaseCoreTest {\n+\n+    private static final int SLEEP_TIME = 200;\n+\n+    @Before\n+    @Override\n+    public void setup() {\n+        super.setup();\n+\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        Iterator<HugeTask<Object>> iter = scheduler.findAllTask(-1, null);\n+        while (iter.hasNext()) {\n+            scheduler.deleteTask(iter.next().id());\n+        }\n+    }\n+\n+    @Test\n+    public void testTask() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        TaskCallable<Integer> callable = new TaskCallable<Integer>() {\n+            @Override\n+            public Integer call() throws Exception {\n+                Thread.sleep(SLEEP_TIME);\n+                return 125;\n+            }\n+\n+            @Override\n+            protected void done() {\n+                scheduler.save(this.task());\n+            }\n+        };\n+\n+        Id id = IdGenerator.of(88888);\n+        HugeTask<?> task = new HugeTask<>(id, null, callable);\n+        task.type(\"test\");\n+        task.name(\"test-task\");\n+\n+        scheduler.schedule(task);\n+        Assert.assertEquals(id, task.id());\n+        Assert.assertFalse(task.completed());\n+\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            scheduler.deleteTask(id);\n+        }, e -> {\n+            Assert.assertContains(\"Can't delete incomplete task '88888'\",\n+                                  e.getMessage());\n+        });\n+\n+        task = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(id, task.id());\n+        Assert.assertEquals(\"test-task\", task.name());\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+\n+        Assert.assertEquals(\"test-task\", scheduler.task(id).name());\n+        Assert.assertEquals(\"test-task\", scheduler.findTask(id).name());\n+\n+        Iterator<HugeTask<Object>> iter = scheduler.tasks(ImmutableList.of(id));\n+        Assert.assertTrue(iter.hasNext());\n+        Assert.assertEquals(\"test-task\", iter.next().name());\n+        Assert.assertFalse(iter.hasNext());\n+\n+        iter = scheduler.findTask(TaskStatus.SUCCESS, 10, null);\n+        Assert.assertTrue(iter.hasNext());\n+        Assert.assertEquals(\"test-task\", iter.next().name());\n+        Assert.assertFalse(iter.hasNext());\n+\n+        iter = scheduler.findAllTask(10, null);\n+        Assert.assertTrue(iter.hasNext());\n+        Assert.assertEquals(\"test-task\", iter.next().name());\n+        Assert.assertFalse(iter.hasNext());\n+\n+        scheduler.deleteTask(id);\n+        iter = scheduler.findAllTask(10, null);\n+        Assert.assertFalse(iter.hasNext());\n+        Assert.assertThrows(NotFoundException.class, () -> {\n+            scheduler.task(id);\n+        });\n+    }\n+\n+    @Test\n+    public void testTaskWithFailure() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        TaskCallable<Integer> callable = new TaskCallable<Integer>() {\n+            @Override\n+            public Integer call() throws Exception {\n+                Thread.sleep(SLEEP_TIME);\n+                return 125;\n+            }\n+            @Override\n+            protected void done() {\n+                scheduler.save(this.task());\n+            }\n+        };\n+\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            new HugeTask<>(null, null, callable);\n+        }, e -> {\n+            Assert.assertContains(\"Task id can't be null\", e.getMessage());\n+        });\n+\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            Id id = IdGenerator.of(\"88888\");\n+            new HugeTask<>(id, null, callable);\n+        }, e -> {\n+            Assert.assertContains(\"Invalid task id type, it must be number\",\n+                                  e.getMessage());\n+        });\n+\n+        Assert.assertThrows(NullPointerException.class, () -> {\n+            Id id = IdGenerator.of(88888);\n+            new HugeTask<>(id, null, null);\n+        });\n+\n+        Assert.assertThrows(IllegalStateException.class, () -> {\n+            Id id = IdGenerator.of(88888);\n+            HugeTask<?> task2 = new HugeTask<>(id, null, callable);\n+            task2.name(\"test-task\");\n+            scheduler.schedule(task2);\n+        }, e -> {\n+            Assert.assertContains(\"Task type can't be null\", e.getMessage());\n+        });\n+\n+        Assert.assertThrows(IllegalStateException.class, () -> {\n+            Id id = IdGenerator.of(88888);\n+            HugeTask<?> task2 = new HugeTask<>(id, null, callable);\n+            task2.type(\"test\");\n+            scheduler.schedule(task2);\n+        }, e -> {\n+            Assert.assertContains(\"Task name can't be null\", e.getMessage());\n+        });\n+    }\n+\n+    @Test\n+    public void testEphemeralJob() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        EphemeralJobBuilder<Object> builder = EphemeralJobBuilder.of(graph);\n+        builder.name(\"test-job-ephemeral\")\n+               .job(new EphemeralJob<Object>() {\n+                    @Override\n+                    public String type() {\n+                        return \"test\";\n+                    }\n+                    @Override\n+                    public Object execute() throws Exception {\n+                        Thread.sleep(SLEEP_TIME);\n+                        return ImmutableMap.of(\"k1\", 13579, \"k2\", \"24680\");\n+                    }\n+               });\n+\n+        HugeTask<Object> task = builder.schedule();\n+        Assert.assertEquals(\"test-job-ephemeral\", task.name());\n+        Assert.assertEquals(\"test\", task.type());\n+        Assert.assertFalse(task.completed());\n+\n+        HugeTask<?> task2 = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+        Assert.assertEquals(\"{\\\"k1\\\":13579,\\\"k2\\\":\\\"24680\\\"}\", task.result());\n+\n+        Assert.assertEquals(TaskStatus.SUCCESS, task2.status());\n+        Assert.assertEquals(\"{\\\"k1\\\":13579,\\\"k2\\\":\\\"24680\\\"}\", task2.result());\n+\n+        Assert.assertThrows(NotFoundException.class, () -> {\n+            scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        });\n+        Assert.assertThrows(NotFoundException.class, () -> {\n+            scheduler.task(task.id());\n+        });\n+    }\n+\n+    @Test\n+    public void testGremlinJob() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        GremlinRequest request = new GremlinRequest();\n+        request.gremlin(\"3 + 5\");\n+\n+        JobBuilder<Object> builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(request.toJson())\n+               .job(new GremlinJob());\n+\n+        HugeTask<Object> task = builder.schedule();\n+        Assert.assertEquals(\"test-job-gremlin\", task.name());\n+        Assert.assertEquals(\"gremlin\", task.type());\n+        Assert.assertFalse(task.completed());\n+        Assert.assertNull(task.result());\n+\n+        task = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(\"test-job-gremlin\", task.name());\n+        Assert.assertEquals(\"gremlin\", task.type());\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+        Assert.assertEquals(\"8\", task.result());\n+\n+        task = scheduler.task(task.id());\n+        Assert.assertEquals(\"test-job-gremlin\", task.name());\n+        Assert.assertEquals(\"gremlin\", task.type());\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+        Assert.assertEquals(\"8\", task.result());\n+    }\n+\n+    @Test\n+    public void testGremlinJobWithScript() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        String script = \"schema=graph.schema();\"\n+                + \"schema.propertyKey('name').asText().ifNotExist().create();\"\n+                + \"schema.propertyKey('age').asInt().ifNotExist().create();\"\n+                + \"schema.propertyKey('lang').asText().ifNotExist().create();\"\n+                + \"schema.propertyKey('date').asDate().ifNotExist().create();\"\n+                + \"schema.propertyKey('price').asInt().ifNotExist().create();\"\n+                + \"person1=schema.vertexLabel('person1').properties('name','age').ifNotExist().create();\"\n+                + \"person2=schema.vertexLabel('person2').properties('name','age').ifNotExist().create();\"\n+                + \"knows=schema.edgeLabel('knows').sourceLabel('person1').targetLabel('person2').properties('date').ifNotExist().create();\"\n+                + \"for(int i = 0; i < 1000; i++) {\"\n+                + \"  p1=graph.addVertex(T.label,'person1','name','p1-'+i,'age',29);\"\n+                + \"  p2=graph.addVertex(T.label,'person2','name','p2-'+i,'age',27);\"\n+                + \"  p1.addEdge('knows',p2,'date','2016-01-10');\"\n+                + \"}\";\n+\n+        HugeTask<Object> task = runGremlinJob(script);\n+        task = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(\"test-gremlin-job\", task.name());\n+        Assert.assertEquals(\"gremlin\", task.type());\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+        Assert.assertEquals(\"[]\", task.result());\n+\n+        script = \"g.V().count()\";\n+        task = runGremlinJob(script);\n+        task = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+        Assert.assertEquals(\"[2000]\", task.result());\n+\n+        script = \"g.V().hasLabel('person1').count()\";\n+        task = runGremlinJob(script);\n+        task = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+        Assert.assertEquals(\"[1000]\", task.result());\n+\n+        script = \"g.V().hasLabel('person2').count()\";\n+        task = runGremlinJob(script);\n+        task = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+        Assert.assertEquals(\"[1000]\", task.result());\n+\n+        script = \"g.E().count()\";\n+        task = runGremlinJob(script);\n+        task = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+        Assert.assertEquals(\"[1000]\", task.result());\n+\n+        script = \"g.E().hasLabel('knows').count()\";\n+        task = runGremlinJob(script);\n+        task = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+        Assert.assertEquals(\"[1000]\", task.result());\n+    }\n+\n+    @Test\n+    public void testGremlinJobWithFailure() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        JobBuilder<Object> builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(\"\")\n+               .job(new GremlinJob());\n+        HugeTask<Object> task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Can't read json\", task.result());\n+\n+        builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .job(new GremlinJob());\n+        task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"The input can't be null\", task.result());\n+\n+        builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(\"{}\")\n+               .job(new GremlinJob());\n+        task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Invalid gremlin value 'null'\", task.result());\n+\n+        builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(\"{\\\"gremlin\\\":8}\")\n+               .job(new GremlinJob());\n+        task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Invalid gremlin value '8'\", task.result());\n+\n+        builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(\"{\\\"gremlin\\\":\\\"\\\"}\")\n+               .job(new GremlinJob());\n+        task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Invalid bindings value 'null'\", task.result());\n+\n+        builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(\"{\\\"gremlin\\\":\\\"\\\", \\\"bindings\\\":\\\"\\\"}\")\n+               .job(new GremlinJob());\n+        task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Invalid bindings value ''\", task.result());\n+\n+        builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(\"{\\\"gremlin\\\":\\\"\\\", \\\"bindings\\\":{}}\")\n+               .job(new GremlinJob());\n+        task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Invalid language value 'null'\", task.result());\n+\n+        builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(\"{\\\"gremlin\\\":\\\"\\\", \\\"bindings\\\":{}, \\\"language\\\":{}}\")\n+               .job(new GremlinJob());\n+        task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Invalid language value '{}'\", task.result());\n+\n+        builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(\"{\\\"gremlin\\\":\\\"\\\", \\\"bindings\\\":{}, \\\"language\\\":\\\"\\\"}\")\n+               .job(new GremlinJob());\n+        task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Invalid aliases value 'null'\", task.result());\n+\n+        builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(\"{\\\"gremlin\\\":\\\"\\\", \\\"bindings\\\":{}, \" +\n+                      \"\\\"language\\\":\\\"test\\\", \\\"aliases\\\":{}}\")\n+               .job(new GremlinJob());\n+        task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"test is not an available GremlinScriptEngine\",\n+                              task.result());\n+    }\n+\n+    @Test\n+    public void testGremlinJobWithError() throws TimeoutException {\n+        HugeGraph graph = graph();\n+\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            JobBuilder.of(graph)\n+                      .job(new GremlinJob())\n+                      .schedule();\n+        }, e -> {\n+            Assert.assertContains(\"Job name can't be null\", e.getMessage());\n+        });\n+\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            JobBuilder.of(graph)\n+                      .name(\"test-job-gremlin\")\n+                      .schedule();\n+        }, e -> {\n+            Assert.assertContains(\"Job callable can't be null\", e.getMessage());\n+        });\n+\n+        // failure task with big input\n+        char[] chars = new char[65536];\n+        for (int i = 0; i < chars.length; i++) {\n+            chars[i] = '8';\n+        }\n+        String bigInput = new String(chars);\n+        Assert.assertThrows(LimitExceedException.class, () -> {\n+            runGremlinJob(bigInput);\n+        }, e -> {\n+            Assert.assertContains(\"Task input size 65605 exceeded \" +\n+                                  \"limit 65535 bytes\", e.getMessage());\n+        });\n+    }\n+\n+    @Test\n+    public void testGremlinJobAndCancel() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        HugeTask<Object> task = runGremlinJob(\"Thread.sleep(1000 * 10);\");\n+        scheduler.cancel(task);\n+\n+        Assert.assertEquals(TaskStatus.CANCELLED, task.status());\n+        Assert.assertTrue(task.result(), task.result() == null ||\n+                          task.result().endsWith(\"InterruptedException\"));\n+\n+        task = scheduler.findTask(task.id());\n+        Assert.assertEquals(TaskStatus.CANCELLED, task.status());\n+        Assert.assertEquals(\"test-gremlin-job\", task.name());\n+        Assert.assertTrue(task.result(), task.result() == null ||\n+                          task.result().endsWith(\"InterruptedException\"));\n+\n+        // cancel success task", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d73cefba04c325bd22bda014137d1163d60a73"}, "originalPosition": 463}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1569, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}