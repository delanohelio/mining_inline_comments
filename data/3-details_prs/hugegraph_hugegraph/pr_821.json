{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNzU0MTY0", "number": 821, "title": "add \"nodes\" metadata for backends", "bodyText": "implemented: #816\nChange-Id: Ica7be59f1af1f290342b010c0c018cc541a1122b", "createdAt": "2020-01-09T03:40:21Z", "url": "https://github.com/hugegraph/hugegraph/pull/821", "merged": true, "mergeCommit": {"oid": "1428c8bf111ffcccd3d2102597b68b3d161a6ee6"}, "closed": true, "closedAt": "2020-02-04T13:03:45Z", "author": {"login": "zhoney"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4lGXsAFqTM0MDMxMzQ1OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBBL-6AFqTM1Mjk1NjQ5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMzEzNDU5", "url": "https://github.com/hugegraph/hugegraph/pull/821#pullrequestreview-340313459", "createdAt": "2020-01-09T06:39:42Z", "commit": {"oid": "861807e2c0c4bfc7672bb8364fa6d6afed09b153"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNjozOTo0MlrOFbsGYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNzoyODowOFrOFbsynA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3ODQwMg==", "bodyText": "don't override regions of one table", "url": "https://github.com/hugegraph/hugegraph/pull/821#discussion_r364578402", "createdAt": "2020-01-09T06:39:42Z", "author": {"login": "javeme"}, "path": "hugegraph-hbase/src/main/java/com/baidu/hugegraph/backend/store/hbase/HbaseMetrics.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.hbase;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hbase.ClusterMetrics;\n+import org.apache.hadoop.hbase.RegionMetrics;\n+import org.apache.hadoop.hbase.ServerMetrics;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.Size;\n+import org.apache.hadoop.hbase.client.Admin;\n+import org.apache.hadoop.hbase.client.Connection;\n+\n+import com.baidu.hugegraph.backend.store.BackendMetrics;\n+import com.baidu.hugegraph.util.InsertionOrderUtil;\n+\n+public class HbaseMetrics implements BackendMetrics {\n+\n+    private final Connection hbase;\n+\n+    public HbaseMetrics(Connection hbase) {\n+        this.hbase = hbase;\n+    }\n+\n+    @Override\n+    public Map<String, Object> getMetrics() {\n+        Map<String, Object> results = InsertionOrderUtil.newMap();\n+        try {\n+            Admin admin = this.hbase.getAdmin();\n+            // Cluster info\n+            ClusterMetrics clusterMetrics = admin.getClusterMetrics();\n+            results.put(\"cluster_id\", clusterMetrics.getClusterId());\n+            results.put(\"average_load\", clusterMetrics.getAverageLoad());\n+            results.put(\"hbase_version\", clusterMetrics.getHBaseVersion());\n+            results.put(\"region_count\", clusterMetrics.getRegionCount());\n+            // Region servers info\n+            Collection<ServerName> servers = admin.getRegionServers();\n+            results.put(NODES, servers.size());\n+            Map<ServerName, ServerMetrics> metrics =\n+                            clusterMetrics.getLiveServerMetrics();\n+            Map<String, Object> regionServers = InsertionOrderUtil.newMap();\n+            for (Map.Entry<ServerName, ServerMetrics> e : metrics.entrySet()) {\n+                ServerName server = e.getKey();\n+                String address = server.getAddress().toString();\n+                List<RegionMetrics> regions = admin.getRegionMetrics(server);\n+                regionServers.put(address, this.getRegionServerMetrics(\n+                                           e.getValue(), regions));\n+            }\n+            results.put(\"region_servers\", regionServers);\n+        } catch (Throwable e) {\n+            results.put(EXCEPTION, e.getMessage());\n+        }\n+        return results;\n+    }\n+\n+    private Map<String, Object> getRegionServerMetrics(\n+                                ServerMetrics serverMetrics,\n+                                List<RegionMetrics> regions) {\n+        Map<String, Object> metrics = InsertionOrderUtil.newMap();\n+        metrics.put(\"max_heap_size\",\n+                    serverMetrics.getMaxHeapSize().get(Size.Unit.MEGABYTE));\n+        metrics.put(\"used_heap_size\",\n+                    serverMetrics.getUsedHeapSize().get(Size.Unit.MEGABYTE));\n+        metrics.put(\"request_count\", serverMetrics.getRequestCount());\n+        metrics.put(\"request_count_per_second\",\n+                    serverMetrics.getRequestCountPerSecond());\n+        for (RegionMetrics region : regions) {\n+            String table = region.getNameAsString().split(\",\")[0];\n+            metrics.put(table, this.getRegionMetrics(region));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "861807e2c0c4bfc7672bb8364fa6d6afed09b153"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3ODc3NQ==", "bodyText": "try(Admin admin = this.hbase.getAdmin())", "url": "https://github.com/hugegraph/hugegraph/pull/821#discussion_r364578775", "createdAt": "2020-01-09T06:41:26Z", "author": {"login": "javeme"}, "path": "hugegraph-hbase/src/main/java/com/baidu/hugegraph/backend/store/hbase/HbaseMetrics.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.hbase;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hbase.ClusterMetrics;\n+import org.apache.hadoop.hbase.RegionMetrics;\n+import org.apache.hadoop.hbase.ServerMetrics;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.Size;\n+import org.apache.hadoop.hbase.client.Admin;\n+import org.apache.hadoop.hbase.client.Connection;\n+\n+import com.baidu.hugegraph.backend.store.BackendMetrics;\n+import com.baidu.hugegraph.util.InsertionOrderUtil;\n+\n+public class HbaseMetrics implements BackendMetrics {\n+\n+    private final Connection hbase;\n+\n+    public HbaseMetrics(Connection hbase) {\n+        this.hbase = hbase;\n+    }\n+\n+    @Override\n+    public Map<String, Object> getMetrics() {\n+        Map<String, Object> results = InsertionOrderUtil.newMap();\n+        try {\n+            Admin admin = this.hbase.getAdmin();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "861807e2c0c4bfc7672bb8364fa6d6afed09b153"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU4MDEzMw==", "bodyText": "NODES", "url": "https://github.com/hugegraph/hugegraph/pull/821#discussion_r364580133", "createdAt": "2020-01-09T06:47:30Z", "author": {"login": "javeme"}, "path": "hugegraph-mysql/src/main/java/com/baidu/hugegraph/backend/store/mysql/MysqlMetrics.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.mysql;\n+\n+import java.util.Map;\n+\n+import com.baidu.hugegraph.backend.store.BackendMetrics;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class MysqlMetrics implements BackendMetrics {\n+\n+    @Override\n+    public Map<String, Object> getMetrics() {\n+        return ImmutableMap.of(\"nodes\", 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "861807e2c0c4bfc7672bb8364fa6d6afed09b153"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU4MDIxMg==", "bodyText": "NODES", "url": "https://github.com/hugegraph/hugegraph/pull/821#discussion_r364580212", "createdAt": "2020-01-09T06:47:56Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/memory/InMemoryMetrics.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.memory;\n+\n+import java.util.Map;\n+\n+import com.baidu.hugegraph.backend.store.BackendMetrics;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class InMemoryMetrics implements BackendMetrics {\n+\n+    @Override\n+    public Map<String, Object> getMetrics() {\n+        return ImmutableMap.of(\"nodes\", 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "861807e2c0c4bfc7672bb8364fa6d6afed09b153"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU4OTcyNA==", "bodyText": "define a var for e.getValue()", "url": "https://github.com/hugegraph/hugegraph/pull/821#discussion_r364589724", "createdAt": "2020-01-09T07:28:08Z", "author": {"login": "javeme"}, "path": "hugegraph-hbase/src/main/java/com/baidu/hugegraph/backend/store/hbase/HbaseMetrics.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.hbase;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hbase.ClusterMetrics;\n+import org.apache.hadoop.hbase.RegionMetrics;\n+import org.apache.hadoop.hbase.ServerMetrics;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.Size;\n+import org.apache.hadoop.hbase.client.Admin;\n+import org.apache.hadoop.hbase.client.Connection;\n+\n+import com.baidu.hugegraph.backend.store.BackendMetrics;\n+import com.baidu.hugegraph.util.InsertionOrderUtil;\n+\n+public class HbaseMetrics implements BackendMetrics {\n+\n+    private final Connection hbase;\n+\n+    public HbaseMetrics(Connection hbase) {\n+        this.hbase = hbase;\n+    }\n+\n+    @Override\n+    public Map<String, Object> getMetrics() {\n+        Map<String, Object> results = InsertionOrderUtil.newMap();\n+        try {\n+            Admin admin = this.hbase.getAdmin();\n+            // Cluster info\n+            ClusterMetrics clusterMetrics = admin.getClusterMetrics();\n+            results.put(\"cluster_id\", clusterMetrics.getClusterId());\n+            results.put(\"average_load\", clusterMetrics.getAverageLoad());\n+            results.put(\"hbase_version\", clusterMetrics.getHBaseVersion());\n+            results.put(\"region_count\", clusterMetrics.getRegionCount());\n+            // Region servers info\n+            Collection<ServerName> servers = admin.getRegionServers();\n+            results.put(NODES, servers.size());\n+            Map<ServerName, ServerMetrics> metrics =\n+                            clusterMetrics.getLiveServerMetrics();\n+            Map<String, Object> regionServers = InsertionOrderUtil.newMap();\n+            for (Map.Entry<ServerName, ServerMetrics> e : metrics.entrySet()) {\n+                ServerName server = e.getKey();\n+                String address = server.getAddress().toString();\n+                List<RegionMetrics> regions = admin.getRegionMetrics(server);\n+                regionServers.put(address, this.getRegionServerMetrics(\n+                                           e.getValue(), regions));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "861807e2c0c4bfc7672bb8364fa6d6afed09b153"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMzM4MzAz", "url": "https://github.com/hugegraph/hugegraph/pull/821#pullrequestreview-340338303", "createdAt": "2020-01-09T07:55:00Z", "commit": {"oid": "c6aeb94e62dd279dcee4a0da0573fccc7244627f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNzo1NTowMFrOFbtSlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNzo1NTowMFrOFbtSlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU5NzkxMA==", "bodyText": "this.sessions\nCassandra protected Cluster cluster()", "url": "https://github.com/hugegraph/hugegraph/pull/821#discussion_r364597910", "createdAt": "2020-01-09T07:55:00Z", "author": {"login": "javeme"}, "path": "hugegraph-hbase/src/main/java/com/baidu/hugegraph/backend/store/hbase/HbaseStore.java", "diffHunk": "@@ -73,12 +74,26 @@ public HbaseStore(final BackendStoreProvider provider,\n         this.namespace = namespace;\n         this.store = store;\n         this.sessions = null;\n+\n+        this.registerMetaHandlers();\n+        LOG.debug(\"Store loaded: {}\", store);\n+    }\n+\n+    private void registerMetaHandlers() {\n+        this.registerMetaHandler(\"metrics\", (session, meta, args) -> {\n+            HbaseMetrics metrics = new HbaseMetrics(hbase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6aeb94e62dd279dcee4a0da0573fccc7244627f"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMzM4NjQw", "url": "https://github.com/hugegraph/hugegraph/pull/821#pullrequestreview-340338640", "createdAt": "2020-01-09T07:55:52Z", "commit": {"oid": "c6aeb94e62dd279dcee4a0da0573fccc7244627f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNzo1NTo1MlrOFbtTjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNzo1NjoxMVrOFbtT-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU5ODE1Ng==", "bodyText": "set package access or protected\ncheck this.hbase != null", "url": "https://github.com/hugegraph/hugegraph/pull/821#discussion_r364598156", "createdAt": "2020-01-09T07:55:52Z", "author": {"login": "javeme"}, "path": "hugegraph-hbase/src/main/java/com/baidu/hugegraph/backend/store/hbase/HbaseSessions.java", "diffHunk": "@@ -85,6 +85,10 @@ public HbaseSessions(HugeConfig config, String namespace, String store) {\n         this.namespace = namespace;\n     }\n \n+    public Connection hbase() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6aeb94e62dd279dcee4a0da0573fccc7244627f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU5ODI2NA==", "bodyText": "delete it", "url": "https://github.com/hugegraph/hugegraph/pull/821#discussion_r364598264", "createdAt": "2020-01-09T07:56:11Z", "author": {"login": "javeme"}, "path": "hugegraph-hbase/src/main/java/com/baidu/hugegraph/backend/store/hbase/HbaseStore.java", "diffHunk": "@@ -73,12 +74,26 @@ public HbaseStore(final BackendStoreProvider provider,\n         this.namespace = namespace;\n         this.store = store;\n         this.sessions = null;\n+\n+        this.registerMetaHandlers();\n+        LOG.debug(\"Store loaded: {}\", store);\n+    }\n+\n+    private void registerMetaHandlers() {\n+        this.registerMetaHandler(\"metrics\", (session, meta, args) -> {\n+            HbaseMetrics metrics = new HbaseMetrics(hbase());\n+            return metrics.getMetrics();\n+        });\n     }\n \n     protected void registerTableManager(HugeType type, HbaseTable table) {\n         this.tables.put(type, table);\n     }\n \n+    private Connection hbase() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6aeb94e62dd279dcee4a0da0573fccc7244627f"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMzk5NjAw", "url": "https://github.com/hugegraph/hugegraph/pull/821#pullrequestreview-340399600", "createdAt": "2020-01-09T09:50:49Z", "commit": {"oid": "7566bc066903696d624aad1862c97c7fb47d37d9"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwOTo1MDo0OVrOFbwLug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMDowNDowN1rOFbwlnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0NTMwNg==", "bodyText": "move to line 64", "url": "https://github.com/hugegraph/hugegraph/pull/821#discussion_r364645306", "createdAt": "2020-01-09T09:50:49Z", "author": {"login": "javeme"}, "path": "hugegraph-hbase/src/main/java/com/baidu/hugegraph/backend/store/hbase/HbaseMetrics.java", "diffHunk": "@@ -63,8 +64,9 @@ public HbaseMetrics(Connection hbase) {\n                 ServerName server = e.getKey();\n                 String address = server.getAddress().toString();\n                 List<RegionMetrics> regions = admin.getRegionMetrics(server);\n+                ServerMetrics serverMetrics = e.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7566bc066903696d624aad1862c97c7fb47d37d9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0Nzc2OA==", "bodyText": "set static and rename formatMetrics", "url": "https://github.com/hugegraph/hugegraph/pull/821#discussion_r364647768", "createdAt": "2020-01-09T09:55:38Z", "author": {"login": "javeme"}, "path": "hugegraph-hbase/src/main/java/com/baidu/hugegraph/backend/store/hbase/HbaseMetrics.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.hbase;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hbase.ClusterMetrics;\n+import org.apache.hadoop.hbase.RegionMetrics;\n+import org.apache.hadoop.hbase.ServerMetrics;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.Size;\n+import org.apache.hadoop.hbase.client.Admin;\n+import org.apache.hadoop.hbase.client.Connection;\n+\n+import com.baidu.hugegraph.backend.store.BackendMetrics;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.InsertionOrderUtil;\n+\n+public class HbaseMetrics implements BackendMetrics {\n+\n+    private final Connection hbase;\n+\n+    public HbaseMetrics(HbaseSessions hbase) {\n+        E.checkArgumentNotNull(hbase, \"HBase connection is not opened\");\n+        this.hbase = hbase.hbase();\n+    }\n+\n+    @Override\n+    public Map<String, Object> getMetrics() {\n+        Map<String, Object> results = InsertionOrderUtil.newMap();\n+        try (Admin admin = this.hbase.getAdmin()) {\n+            // Cluster info\n+            ClusterMetrics clusterMetrics = admin.getClusterMetrics();\n+            results.put(\"cluster_id\", clusterMetrics.getClusterId());\n+            results.put(\"average_load\", clusterMetrics.getAverageLoad());\n+            results.put(\"hbase_version\", clusterMetrics.getHBaseVersion());\n+            results.put(\"region_count\", clusterMetrics.getRegionCount());\n+            // Region servers info\n+            Collection<ServerName> servers = admin.getRegionServers();\n+            results.put(NODES, servers.size());\n+            Map<ServerName, ServerMetrics> metrics =\n+                            clusterMetrics.getLiveServerMetrics();\n+            Map<String, Object> regionServers = InsertionOrderUtil.newMap();\n+            for (Map.Entry<ServerName, ServerMetrics> e : metrics.entrySet()) {\n+                ServerName server = e.getKey();\n+                String address = server.getAddress().toString();\n+                List<RegionMetrics> regions = admin.getRegionMetrics(server);\n+                ServerMetrics serverMetrics = e.getValue();\n+                regionServers.put(address, this.getRegionServerMetrics(\n+                                           serverMetrics, regions));\n+            }\n+            results.put(\"region_servers\", regionServers);\n+        } catch (Throwable e) {\n+            results.put(EXCEPTION, e.getMessage());\n+        }\n+        return results;\n+    }\n+\n+    private Map<String, Object> getRegionServerMetrics(\n+                                ServerMetrics serverMetrics,\n+                                List<RegionMetrics> regions) {\n+        Map<String, Object> metrics = InsertionOrderUtil.newMap();\n+        metrics.put(\"max_heap_size\",\n+                    serverMetrics.getMaxHeapSize().get(Size.Unit.MEGABYTE));\n+        metrics.put(\"used_heap_size\",\n+                    serverMetrics.getUsedHeapSize().get(Size.Unit.MEGABYTE));\n+        metrics.put(\"request_count\", serverMetrics.getRequestCount());\n+        metrics.put(\"request_count_per_second\",\n+                    serverMetrics.getRequestCountPerSecond());\n+        for (RegionMetrics region : regions) {\n+            metrics.put(region.getNameAsString(),\n+                        this.getRegionMetrics(region));\n+        }\n+        return metrics;\n+    }\n+\n+    private Map<String, Object> getRegionMetrics(RegionMetrics region) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7566bc066903696d624aad1862c97c7fb47d37d9"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY0ODg4MQ==", "bodyText": "set static\nand rename to formatMetrics", "url": "https://github.com/hugegraph/hugegraph/pull/821#discussion_r364648881", "createdAt": "2020-01-09T09:57:58Z", "author": {"login": "javeme"}, "path": "hugegraph-hbase/src/main/java/com/baidu/hugegraph/backend/store/hbase/HbaseMetrics.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.hbase;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hbase.ClusterMetrics;\n+import org.apache.hadoop.hbase.RegionMetrics;\n+import org.apache.hadoop.hbase.ServerMetrics;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.Size;\n+import org.apache.hadoop.hbase.client.Admin;\n+import org.apache.hadoop.hbase.client.Connection;\n+\n+import com.baidu.hugegraph.backend.store.BackendMetrics;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.InsertionOrderUtil;\n+\n+public class HbaseMetrics implements BackendMetrics {\n+\n+    private final Connection hbase;\n+\n+    public HbaseMetrics(HbaseSessions hbase) {\n+        E.checkArgumentNotNull(hbase, \"HBase connection is not opened\");\n+        this.hbase = hbase.hbase();\n+    }\n+\n+    @Override\n+    public Map<String, Object> getMetrics() {\n+        Map<String, Object> results = InsertionOrderUtil.newMap();\n+        try (Admin admin = this.hbase.getAdmin()) {\n+            // Cluster info\n+            ClusterMetrics clusterMetrics = admin.getClusterMetrics();\n+            results.put(\"cluster_id\", clusterMetrics.getClusterId());\n+            results.put(\"average_load\", clusterMetrics.getAverageLoad());\n+            results.put(\"hbase_version\", clusterMetrics.getHBaseVersion());\n+            results.put(\"region_count\", clusterMetrics.getRegionCount());\n+            // Region servers info\n+            Collection<ServerName> servers = admin.getRegionServers();\n+            results.put(NODES, servers.size());\n+            Map<ServerName, ServerMetrics> metrics =\n+                            clusterMetrics.getLiveServerMetrics();\n+            Map<String, Object> regionServers = InsertionOrderUtil.newMap();\n+            for (Map.Entry<ServerName, ServerMetrics> e : metrics.entrySet()) {\n+                ServerName server = e.getKey();\n+                String address = server.getAddress().toString();\n+                List<RegionMetrics> regions = admin.getRegionMetrics(server);\n+                ServerMetrics serverMetrics = e.getValue();\n+                regionServers.put(address, this.getRegionServerMetrics(\n+                                           serverMetrics, regions));\n+            }\n+            results.put(\"region_servers\", regionServers);\n+        } catch (Throwable e) {\n+            results.put(EXCEPTION, e.getMessage());\n+        }\n+        return results;\n+    }\n+\n+    private Map<String, Object> getRegionServerMetrics(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7566bc066903696d624aad1862c97c7fb47d37d9"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1MTEzNg==", "bodyText": "add regions layer", "url": "https://github.com/hugegraph/hugegraph/pull/821#discussion_r364651136", "createdAt": "2020-01-09T10:02:21Z", "author": {"login": "javeme"}, "path": "hugegraph-hbase/src/main/java/com/baidu/hugegraph/backend/store/hbase/HbaseMetrics.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.hbase;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hbase.ClusterMetrics;\n+import org.apache.hadoop.hbase.RegionMetrics;\n+import org.apache.hadoop.hbase.ServerMetrics;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.Size;\n+import org.apache.hadoop.hbase.client.Admin;\n+import org.apache.hadoop.hbase.client.Connection;\n+\n+import com.baidu.hugegraph.backend.store.BackendMetrics;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.InsertionOrderUtil;\n+\n+public class HbaseMetrics implements BackendMetrics {\n+\n+    private final Connection hbase;\n+\n+    public HbaseMetrics(HbaseSessions hbase) {\n+        E.checkArgumentNotNull(hbase, \"HBase connection is not opened\");\n+        this.hbase = hbase.hbase();\n+    }\n+\n+    @Override\n+    public Map<String, Object> getMetrics() {\n+        Map<String, Object> results = InsertionOrderUtil.newMap();\n+        try (Admin admin = this.hbase.getAdmin()) {\n+            // Cluster info\n+            ClusterMetrics clusterMetrics = admin.getClusterMetrics();\n+            results.put(\"cluster_id\", clusterMetrics.getClusterId());\n+            results.put(\"average_load\", clusterMetrics.getAverageLoad());\n+            results.put(\"hbase_version\", clusterMetrics.getHBaseVersion());\n+            results.put(\"region_count\", clusterMetrics.getRegionCount());\n+            // Region servers info\n+            Collection<ServerName> servers = admin.getRegionServers();\n+            results.put(NODES, servers.size());\n+            Map<ServerName, ServerMetrics> metrics =\n+                            clusterMetrics.getLiveServerMetrics();\n+            Map<String, Object> regionServers = InsertionOrderUtil.newMap();\n+            for (Map.Entry<ServerName, ServerMetrics> e : metrics.entrySet()) {\n+                ServerName server = e.getKey();\n+                String address = server.getAddress().toString();\n+                List<RegionMetrics> regions = admin.getRegionMetrics(server);\n+                ServerMetrics serverMetrics = e.getValue();\n+                regionServers.put(address, this.getRegionServerMetrics(\n+                                           serverMetrics, regions));\n+            }\n+            results.put(\"region_servers\", regionServers);\n+        } catch (Throwable e) {\n+            results.put(EXCEPTION, e.getMessage());\n+        }\n+        return results;\n+    }\n+\n+    private Map<String, Object> getRegionServerMetrics(\n+                                ServerMetrics serverMetrics,\n+                                List<RegionMetrics> regions) {\n+        Map<String, Object> metrics = InsertionOrderUtil.newMap();\n+        metrics.put(\"max_heap_size\",\n+                    serverMetrics.getMaxHeapSize().get(Size.Unit.MEGABYTE));\n+        metrics.put(\"used_heap_size\",\n+                    serverMetrics.getUsedHeapSize().get(Size.Unit.MEGABYTE));\n+        metrics.put(\"request_count\", serverMetrics.getRequestCount());\n+        metrics.put(\"request_count_per_second\",\n+                    serverMetrics.getRequestCountPerSecond());\n+        for (RegionMetrics region : regions) {\n+            metrics.put(region.getNameAsString(),\n+                        this.getRegionMetrics(region));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7566bc066903696d624aad1862c97c7fb47d37d9"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY1MTkzMg==", "bodyText": "regionServers.put(server.getAddress().toString(), \n                  formatMetri(csserverMetrics, regions));", "url": "https://github.com/hugegraph/hugegraph/pull/821#discussion_r364651932", "createdAt": "2020-01-09T10:04:07Z", "author": {"login": "javeme"}, "path": "hugegraph-hbase/src/main/java/com/baidu/hugegraph/backend/store/hbase/HbaseMetrics.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.hbase;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hbase.ClusterMetrics;\n+import org.apache.hadoop.hbase.RegionMetrics;\n+import org.apache.hadoop.hbase.ServerMetrics;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.Size;\n+import org.apache.hadoop.hbase.client.Admin;\n+import org.apache.hadoop.hbase.client.Connection;\n+\n+import com.baidu.hugegraph.backend.store.BackendMetrics;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.InsertionOrderUtil;\n+\n+public class HbaseMetrics implements BackendMetrics {\n+\n+    private final Connection hbase;\n+\n+    public HbaseMetrics(HbaseSessions hbase) {\n+        E.checkArgumentNotNull(hbase, \"HBase connection is not opened\");\n+        this.hbase = hbase.hbase();\n+    }\n+\n+    @Override\n+    public Map<String, Object> getMetrics() {\n+        Map<String, Object> results = InsertionOrderUtil.newMap();\n+        try (Admin admin = this.hbase.getAdmin()) {\n+            // Cluster info\n+            ClusterMetrics clusterMetrics = admin.getClusterMetrics();\n+            results.put(\"cluster_id\", clusterMetrics.getClusterId());\n+            results.put(\"average_load\", clusterMetrics.getAverageLoad());\n+            results.put(\"hbase_version\", clusterMetrics.getHBaseVersion());\n+            results.put(\"region_count\", clusterMetrics.getRegionCount());\n+            // Region servers info\n+            Collection<ServerName> servers = admin.getRegionServers();\n+            results.put(NODES, servers.size());\n+            Map<ServerName, ServerMetrics> metrics =\n+                            clusterMetrics.getLiveServerMetrics();\n+            Map<String, Object> regionServers = InsertionOrderUtil.newMap();\n+            for (Map.Entry<ServerName, ServerMetrics> e : metrics.entrySet()) {\n+                ServerName server = e.getKey();\n+                String address = server.getAddress().toString();\n+                List<RegionMetrics> regions = admin.getRegionMetrics(server);\n+                ServerMetrics serverMetrics = e.getValue();\n+                regionServers.put(address, this.getRegionServerMetrics(\n+                                           serverMetrics, regions));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7566bc066903696d624aad1862c97c7fb47d37d9"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MzgyNzE4", "url": "https://github.com/hugegraph/hugegraph/pull/821#pullrequestreview-348382718", "createdAt": "2020-01-26T14:26:01Z", "commit": {"oid": "83b5fb42f32ac90210968c65d9a266c31be459ae"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNDoyNjowMVrOFh0Pmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNDoyODowMlrOFh0QIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAwMzI5MA==", "bodyText": "add \"heap_size_unit: MB\"", "url": "https://github.com/hugegraph/hugegraph/pull/821#discussion_r371003290", "createdAt": "2020-01-26T14:26:01Z", "author": {"login": "javeme"}, "path": "hugegraph-hbase/src/main/java/com/baidu/hugegraph/backend/store/hbase/HbaseMetrics.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.hbase;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hbase.ClusterMetrics;\n+import org.apache.hadoop.hbase.RegionMetrics;\n+import org.apache.hadoop.hbase.ServerMetrics;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.Size;\n+import org.apache.hadoop.hbase.client.Admin;\n+import org.apache.hadoop.hbase.client.Connection;\n+\n+import com.baidu.hugegraph.backend.store.BackendMetrics;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.InsertionOrderUtil;\n+\n+public class HbaseMetrics implements BackendMetrics {\n+\n+    private final Connection hbase;\n+\n+    public HbaseMetrics(HbaseSessions hbase) {\n+        E.checkArgumentNotNull(hbase, \"HBase connection is not opened\");\n+        this.hbase = hbase.hbase();\n+    }\n+\n+    @Override\n+    public Map<String, Object> getMetrics() {\n+        Map<String, Object> results = InsertionOrderUtil.newMap();\n+        try (Admin admin = this.hbase.getAdmin()) {\n+            // Cluster info\n+            ClusterMetrics clusterMetrics = admin.getClusterMetrics();\n+            results.put(\"cluster_id\", clusterMetrics.getClusterId());\n+            results.put(\"average_load\", clusterMetrics.getAverageLoad());\n+            results.put(\"hbase_version\", clusterMetrics.getHBaseVersion());\n+            results.put(\"region_count\", clusterMetrics.getRegionCount());\n+            // Region servers info\n+            Collection<ServerName> servers = admin.getRegionServers();\n+            results.put(NODES, servers.size());\n+            Map<ServerName, ServerMetrics> metrics =\n+                            clusterMetrics.getLiveServerMetrics();\n+            Map<String, Object> regionServers = InsertionOrderUtil.newMap();\n+            for (Map.Entry<ServerName, ServerMetrics> e : metrics.entrySet()) {\n+                ServerName server = e.getKey();\n+                ServerMetrics serverMetrics = e.getValue();\n+                List<RegionMetrics> regions = admin.getRegionMetrics(server);\n+                regionServers.put(server.getAddress().toString(),\n+                                  formatMetrics(serverMetrics, regions));\n+            }\n+            results.put(\"region_servers\", regionServers);\n+        } catch (Throwable e) {\n+            results.put(EXCEPTION, e.getMessage());\n+        }\n+        return results;\n+    }\n+\n+    private static Map<String, Object> formatMetrics(\n+                                       ServerMetrics serverMetrics,\n+                                       List<RegionMetrics> regions) {\n+        Map<String, Object> metrics = InsertionOrderUtil.newMap();\n+        metrics.put(\"max_heap_size\",\n+                    serverMetrics.getMaxHeapSize().get(Size.Unit.MEGABYTE));\n+        metrics.put(\"used_heap_size\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b5fb42f32ac90210968c65d9a266c31be459ae"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAwMzQxNQ==", "bodyText": "prefer file_store_size", "url": "https://github.com/hugegraph/hugegraph/pull/821#discussion_r371003415", "createdAt": "2020-01-26T14:27:49Z", "author": {"login": "javeme"}, "path": "hugegraph-hbase/src/main/java/com/baidu/hugegraph/backend/store/hbase/HbaseMetrics.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.hbase;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hbase.ClusterMetrics;\n+import org.apache.hadoop.hbase.RegionMetrics;\n+import org.apache.hadoop.hbase.ServerMetrics;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.Size;\n+import org.apache.hadoop.hbase.client.Admin;\n+import org.apache.hadoop.hbase.client.Connection;\n+\n+import com.baidu.hugegraph.backend.store.BackendMetrics;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.InsertionOrderUtil;\n+\n+public class HbaseMetrics implements BackendMetrics {\n+\n+    private final Connection hbase;\n+\n+    public HbaseMetrics(HbaseSessions hbase) {\n+        E.checkArgumentNotNull(hbase, \"HBase connection is not opened\");\n+        this.hbase = hbase.hbase();\n+    }\n+\n+    @Override\n+    public Map<String, Object> getMetrics() {\n+        Map<String, Object> results = InsertionOrderUtil.newMap();\n+        try (Admin admin = this.hbase.getAdmin()) {\n+            // Cluster info\n+            ClusterMetrics clusterMetrics = admin.getClusterMetrics();\n+            results.put(\"cluster_id\", clusterMetrics.getClusterId());\n+            results.put(\"average_load\", clusterMetrics.getAverageLoad());\n+            results.put(\"hbase_version\", clusterMetrics.getHBaseVersion());\n+            results.put(\"region_count\", clusterMetrics.getRegionCount());\n+            // Region servers info\n+            Collection<ServerName> servers = admin.getRegionServers();\n+            results.put(NODES, servers.size());\n+            Map<ServerName, ServerMetrics> metrics =\n+                            clusterMetrics.getLiveServerMetrics();\n+            Map<String, Object> regionServers = InsertionOrderUtil.newMap();\n+            for (Map.Entry<ServerName, ServerMetrics> e : metrics.entrySet()) {\n+                ServerName server = e.getKey();\n+                ServerMetrics serverMetrics = e.getValue();\n+                List<RegionMetrics> regions = admin.getRegionMetrics(server);\n+                regionServers.put(server.getAddress().toString(),\n+                                  formatMetrics(serverMetrics, regions));\n+            }\n+            results.put(\"region_servers\", regionServers);\n+        } catch (Throwable e) {\n+            results.put(EXCEPTION, e.getMessage());\n+        }\n+        return results;\n+    }\n+\n+    private static Map<String, Object> formatMetrics(\n+                                       ServerMetrics serverMetrics,\n+                                       List<RegionMetrics> regions) {\n+        Map<String, Object> metrics = InsertionOrderUtil.newMap();\n+        metrics.put(\"max_heap_size\",\n+                    serverMetrics.getMaxHeapSize().get(Size.Unit.MEGABYTE));\n+        metrics.put(\"used_heap_size\",\n+                    serverMetrics.getUsedHeapSize().get(Size.Unit.MEGABYTE));\n+        metrics.put(\"request_count\", serverMetrics.getRequestCount());\n+        metrics.put(\"request_count_per_second\",\n+                    serverMetrics.getRequestCountPerSecond());\n+        metrics.put(\"regions\", formatMetrics(regions));\n+        return metrics;\n+    }\n+\n+    private static Map<String, Object> formatMetrics(\n+                                       List<RegionMetrics> regions) {\n+        Map<String, Object> metrics = InsertionOrderUtil.newMap();\n+        for (RegionMetrics region : regions) {\n+            metrics.put(region.getNameAsString(), formatMetrics(region));\n+        }\n+        return metrics;\n+    }\n+\n+    private static Map<String, Object> formatMetrics(RegionMetrics region) {\n+        Map<String, Object> metrics = InsertionOrderUtil.newMap();\n+        metrics.put(\"mem_store_size\",\n+                    region.getMemStoreSize().get(Size.Unit.MEGABYTE));\n+        metrics.put(\"mem_store_file_size\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b5fb42f32ac90210968c65d9a266c31be459ae"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAwMzQyNw==", "bodyText": "also add unit", "url": "https://github.com/hugegraph/hugegraph/pull/821#discussion_r371003427", "createdAt": "2020-01-26T14:28:02Z", "author": {"login": "javeme"}, "path": "hugegraph-hbase/src/main/java/com/baidu/hugegraph/backend/store/hbase/HbaseMetrics.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.hbase;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hbase.ClusterMetrics;\n+import org.apache.hadoop.hbase.RegionMetrics;\n+import org.apache.hadoop.hbase.ServerMetrics;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.Size;\n+import org.apache.hadoop.hbase.client.Admin;\n+import org.apache.hadoop.hbase.client.Connection;\n+\n+import com.baidu.hugegraph.backend.store.BackendMetrics;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.InsertionOrderUtil;\n+\n+public class HbaseMetrics implements BackendMetrics {\n+\n+    private final Connection hbase;\n+\n+    public HbaseMetrics(HbaseSessions hbase) {\n+        E.checkArgumentNotNull(hbase, \"HBase connection is not opened\");\n+        this.hbase = hbase.hbase();\n+    }\n+\n+    @Override\n+    public Map<String, Object> getMetrics() {\n+        Map<String, Object> results = InsertionOrderUtil.newMap();\n+        try (Admin admin = this.hbase.getAdmin()) {\n+            // Cluster info\n+            ClusterMetrics clusterMetrics = admin.getClusterMetrics();\n+            results.put(\"cluster_id\", clusterMetrics.getClusterId());\n+            results.put(\"average_load\", clusterMetrics.getAverageLoad());\n+            results.put(\"hbase_version\", clusterMetrics.getHBaseVersion());\n+            results.put(\"region_count\", clusterMetrics.getRegionCount());\n+            // Region servers info\n+            Collection<ServerName> servers = admin.getRegionServers();\n+            results.put(NODES, servers.size());\n+            Map<ServerName, ServerMetrics> metrics =\n+                            clusterMetrics.getLiveServerMetrics();\n+            Map<String, Object> regionServers = InsertionOrderUtil.newMap();\n+            for (Map.Entry<ServerName, ServerMetrics> e : metrics.entrySet()) {\n+                ServerName server = e.getKey();\n+                ServerMetrics serverMetrics = e.getValue();\n+                List<RegionMetrics> regions = admin.getRegionMetrics(server);\n+                regionServers.put(server.getAddress().toString(),\n+                                  formatMetrics(serverMetrics, regions));\n+            }\n+            results.put(\"region_servers\", regionServers);\n+        } catch (Throwable e) {\n+            results.put(EXCEPTION, e.getMessage());\n+        }\n+        return results;\n+    }\n+\n+    private static Map<String, Object> formatMetrics(\n+                                       ServerMetrics serverMetrics,\n+                                       List<RegionMetrics> regions) {\n+        Map<String, Object> metrics = InsertionOrderUtil.newMap();\n+        metrics.put(\"max_heap_size\",\n+                    serverMetrics.getMaxHeapSize().get(Size.Unit.MEGABYTE));\n+        metrics.put(\"used_heap_size\",\n+                    serverMetrics.getUsedHeapSize().get(Size.Unit.MEGABYTE));\n+        metrics.put(\"request_count\", serverMetrics.getRequestCount());\n+        metrics.put(\"request_count_per_second\",\n+                    serverMetrics.getRequestCountPerSecond());\n+        metrics.put(\"regions\", formatMetrics(regions));\n+        return metrics;\n+    }\n+\n+    private static Map<String, Object> formatMetrics(\n+                                       List<RegionMetrics> regions) {\n+        Map<String, Object> metrics = InsertionOrderUtil.newMap();\n+        for (RegionMetrics region : regions) {\n+            metrics.put(region.getNameAsString(), formatMetrics(region));\n+        }\n+        return metrics;\n+    }\n+\n+    private static Map<String, Object> formatMetrics(RegionMetrics region) {\n+        Map<String, Object> metrics = InsertionOrderUtil.newMap();\n+        metrics.put(\"mem_store_size\",\n+                    region.getMemStoreSize().get(Size.Unit.MEGABYTE));\n+        metrics.put(\"mem_store_file_size\",\n+                    region.getStoreFileSize().get(Size.Unit.MEGABYTE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b5fb42f32ac90210968c65d9a266c31be459ae"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41a9cc716f1273b9ff9fe60bd49a95e78583bbef", "author": {"user": {"login": "zhoney", "name": null}}, "url": "https://github.com/hugegraph/hugegraph/commit/41a9cc716f1273b9ff9fe60bd49a95e78583bbef", "committedDate": "2020-02-04T09:04:35Z", "message": "add \"nodes\" metadata for backends\n\nimplemented: #816\n\nChange-Id: Ica7be59f1af1f290342b010c0c018cc541a1122b"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e164e746bd965c394542936d18d80151a0b4de64", "author": {"user": {"login": "zhoney", "name": null}}, "url": "https://github.com/hugegraph/hugegraph/commit/e164e746bd965c394542936d18d80151a0b4de64", "committedDate": "2020-02-04T09:04:35Z", "message": "update api test for metrics/backend\n\nChange-Id: I7538d76682d0e6620eefc3ce53c787e111ba1dcf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4f5d0d8d962613d04d1fb30be4395d4cbe5aa59", "author": {"user": {"login": "zhoney", "name": null}}, "url": "https://github.com/hugegraph/hugegraph/commit/d4f5d0d8d962613d04d1fb30be4395d4cbe5aa59", "committedDate": "2020-02-04T09:04:35Z", "message": "avoid expose Cassandra cluster and Hbase connection\n\nChange-Id: I041cf915e565b4ba90c94b73d938ff9e27abf905"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "936b2b214c835b48164af269f8a851786fa6bd2d", "author": {"user": {"login": "zhoney", "name": null}}, "url": "https://github.com/hugegraph/hugegraph/commit/936b2b214c835b48164af269f8a851786fa6bd2d", "committedDate": "2020-02-04T09:04:35Z", "message": "improve\n\nChange-Id: Ia8abda118a0cf181b31ff39cb0a7a0a9d94996e8"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "835e70b570552df857d60d6e0647ab57ca399f64", "author": {"user": {"login": "zhoney", "name": null}}, "url": "https://github.com/hugegraph/hugegraph/commit/835e70b570552df857d60d6e0647ab57ca399f64", "committedDate": "2020-02-04T09:17:39Z", "message": "improve\n\nChange-Id: I538eb57a52873c139a3302428f61851c1040ab5a"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "83b5fb42f32ac90210968c65d9a266c31be459ae", "author": {"user": {"login": "zhoney", "name": null}}, "url": "https://github.com/hugegraph/hugegraph/commit/83b5fb42f32ac90210968c65d9a266c31be459ae", "committedDate": "2020-01-09T11:14:10Z", "message": "improve\n\nChange-Id: Ia8abda118a0cf181b31ff39cb0a7a0a9d94996e8"}, "afterCommit": {"oid": "835e70b570552df857d60d6e0647ab57ca399f64", "author": {"user": {"login": "zhoney", "name": null}}, "url": "https://github.com/hugegraph/hugegraph/commit/835e70b570552df857d60d6e0647ab57ca399f64", "committedDate": "2020-02-04T09:17:39Z", "message": "improve\n\nChange-Id: I538eb57a52873c139a3302428f61851c1040ab5a"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyODg4NTI3", "url": "https://github.com/hugegraph/hugegraph/pull/821#pullrequestreview-352888527", "createdAt": "2020-02-04T10:59:51Z", "commit": {"oid": "835e70b570552df857d60d6e0647ab57ca399f64"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTU2NDk2", "url": "https://github.com/hugegraph/hugegraph/pull/821#pullrequestreview-352956496", "createdAt": "2020-02-04T13:03:00Z", "commit": {"oid": "835e70b570552df857d60d6e0647ab57ca399f64"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2360, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}