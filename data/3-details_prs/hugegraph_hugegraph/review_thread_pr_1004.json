{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNDQxNjk3", "number": 1004, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMTowOTozN1rOEB9_SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMToxNTo1MFrOEB-DRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDk5NjU2OnYy", "diffSide": "RIGHT", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/auth/HugeAuthenticator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMTowOTozN1rOGeI3Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMTowOTozN1rOGeI3Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NTY5NQ==", "bodyText": "rename to KEY_ADDRESS", "url": "https://github.com/hugegraph/hugegraph/pull/1004#discussion_r434255695", "createdAt": "2020-06-03T01:09:37Z", "author": {"login": "zhoney"}, "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/auth/HugeAuthenticator.java", "diffHunk": "@@ -48,7 +48,7 @@\n     public static final String KEY_PASSWORD =\n                                CredentialGraphTokens.PROPERTY_PASSWORD;\n     public static final String KEY_ROLE = \"role\";\n-    public static final String KEY_CLIENT = \"client\";\n+    public static final String KEY_CLIENT = \"address\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82afc2dc4e66047e7cbb540d40a85542083d9488"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTAwMjU5OnYy", "diffSide": "RIGHT", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/auth/WsAndHttpBasicAuthHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMToxMzoxMVrOGeI64w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzoxNjoyM1rOGe4yrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NjYxMQ==", "bodyText": "recheck to make sure it's expected", "url": "https://github.com/hugegraph/hugegraph/pull/1004#discussion_r434256611", "createdAt": "2020-06-03T01:13:11Z", "author": {"login": "zhoney"}, "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/auth/WsAndHttpBasicAuthHandler.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.auth;\n+\n+import static io.netty.handler.codec.http.HttpHeaderNames.CONNECTION;\n+import static io.netty.handler.codec.http.HttpHeaderNames.UPGRADE;\n+import static io.netty.handler.codec.http.HttpResponseStatus.UNAUTHORIZED;\n+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n+import static org.apache.tinkerpop.gremlin.groovy.jsr223.dsl.credential.CredentialGraphTokens.PROPERTY_PASSWORD;\n+import static org.apache.tinkerpop.gremlin.groovy.jsr223.dsl.credential.CredentialGraphTokens.PROPERTY_USERNAME;\n+\n+import java.nio.charset.Charset;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.apache.tinkerpop.gremlin.server.auth.AuthenticationException;\n+import org.apache.tinkerpop.gremlin.server.auth.Authenticator;\n+import org.apache.tinkerpop.gremlin.server.handler.AbstractAuthenticationHandler;\n+import org.apache.tinkerpop.gremlin.server.handler.SaslAuthenticationHandler;\n+\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.http.DefaultFullHttpResponse;\n+import io.netty.handler.codec.http.FullHttpMessage;\n+import io.netty.handler.codec.http.HttpMessage;\n+import io.netty.util.ReferenceCountUtil;\n+\n+/**\n+ * An Authentication Handler for doing WebSocket and Http Basic auth\n+ * TODO: remove this class after fixed TINKERPOP-2374\n+ */\n+@ChannelHandler.Sharable\n+public class WsAndHttpBasicAuthHandler extends SaslAuthenticationHandler {\n+\n+    private static final String AUTHENTICATOR = \"authenticator\";\n+    private static final String HTTP_AUTH = \"http-authentication\";\n+\n+    public WsAndHttpBasicAuthHandler(Authenticator authenticator,\n+                                     Settings.AuthenticationSettings settings) {\n+        super(authenticator, settings);\n+    }\n+\n+    @Override\n+    public void channelRead(final ChannelHandlerContext ctx, final Object obj)\n+                            throws Exception {\n+        if (obj instanceof HttpMessage && !isWebSocket((HttpMessage) obj)) {\n+            ChannelPipeline pipeline = ctx.pipeline();\n+            ChannelHandler authHandler = pipeline.get(HTTP_AUTH);\n+            if (authHandler != null) {\n+                authHandler = pipeline.remove(HTTP_AUTH);\n+            } else {\n+                authHandler = new HttpBasicAuthHandler(\n+                              this.authenticator,  this.authenticationSettings);\n+            }\n+            pipeline.addAfter(AUTHENTICATOR, HTTP_AUTH, authHandler);\n+            ctx.fireChannelRead(obj);\n+        } else {\n+            super.channelRead(ctx, obj);\n+        }\n+    }\n+\n+    public static boolean isWebSocket(final HttpMessage msg) {\n+        final String connectionHeader = msg.headers().get(CONNECTION);\n+        final String upgradeHeader = msg.headers().get(UPGRADE);\n+        return \"Upgrade\".equalsIgnoreCase(connectionHeader) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82afc2dc4e66047e7cbb540d40a85542083d9488"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0MDk0Mg==", "bodyText": "sure", "url": "https://github.com/hugegraph/hugegraph/pull/1004#discussion_r435040942", "createdAt": "2020-06-04T07:16:23Z", "author": {"login": "javeme"}, "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/auth/WsAndHttpBasicAuthHandler.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.auth;\n+\n+import static io.netty.handler.codec.http.HttpHeaderNames.CONNECTION;\n+import static io.netty.handler.codec.http.HttpHeaderNames.UPGRADE;\n+import static io.netty.handler.codec.http.HttpResponseStatus.UNAUTHORIZED;\n+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n+import static org.apache.tinkerpop.gremlin.groovy.jsr223.dsl.credential.CredentialGraphTokens.PROPERTY_PASSWORD;\n+import static org.apache.tinkerpop.gremlin.groovy.jsr223.dsl.credential.CredentialGraphTokens.PROPERTY_USERNAME;\n+\n+import java.nio.charset.Charset;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.apache.tinkerpop.gremlin.server.auth.AuthenticationException;\n+import org.apache.tinkerpop.gremlin.server.auth.Authenticator;\n+import org.apache.tinkerpop.gremlin.server.handler.AbstractAuthenticationHandler;\n+import org.apache.tinkerpop.gremlin.server.handler.SaslAuthenticationHandler;\n+\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.handler.codec.http.DefaultFullHttpResponse;\n+import io.netty.handler.codec.http.FullHttpMessage;\n+import io.netty.handler.codec.http.HttpMessage;\n+import io.netty.util.ReferenceCountUtil;\n+\n+/**\n+ * An Authentication Handler for doing WebSocket and Http Basic auth\n+ * TODO: remove this class after fixed TINKERPOP-2374\n+ */\n+@ChannelHandler.Sharable\n+public class WsAndHttpBasicAuthHandler extends SaslAuthenticationHandler {\n+\n+    private static final String AUTHENTICATOR = \"authenticator\";\n+    private static final String HTTP_AUTH = \"http-authentication\";\n+\n+    public WsAndHttpBasicAuthHandler(Authenticator authenticator,\n+                                     Settings.AuthenticationSettings settings) {\n+        super(authenticator, settings);\n+    }\n+\n+    @Override\n+    public void channelRead(final ChannelHandlerContext ctx, final Object obj)\n+                            throws Exception {\n+        if (obj instanceof HttpMessage && !isWebSocket((HttpMessage) obj)) {\n+            ChannelPipeline pipeline = ctx.pipeline();\n+            ChannelHandler authHandler = pipeline.get(HTTP_AUTH);\n+            if (authHandler != null) {\n+                authHandler = pipeline.remove(HTTP_AUTH);\n+            } else {\n+                authHandler = new HttpBasicAuthHandler(\n+                              this.authenticator,  this.authenticationSettings);\n+            }\n+            pipeline.addAfter(AUTHENTICATOR, HTTP_AUTH, authHandler);\n+            ctx.fireChannelRead(obj);\n+        } else {\n+            super.channelRead(ctx, obj);\n+        }\n+    }\n+\n+    public static boolean isWebSocket(final HttpMessage msg) {\n+        final String connectionHeader = msg.headers().get(CONNECTION);\n+        final String upgradeHeader = msg.headers().get(UPGRADE);\n+        return \"Upgrade\".equalsIgnoreCase(connectionHeader) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NjYxMQ=="}, "originalCommit": {"oid": "82afc2dc4e66047e7cbb540d40a85542083d9488"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTAwNTkxOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/schema/PropertyKey.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMToxNToyNFrOGeI86w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMToxNToyNFrOGeI86w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NzEzMQ==", "bodyText": "this. cardinality.single()", "url": "https://github.com/hugegraph/hugegraph/pull/1004#discussion_r434257131", "createdAt": "2020-06-03T01:15:24Z", "author": {"login": "zhoney"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/schema/PropertyKey.java", "diffHunk": "@@ -214,11 +181,43 @@ public String clazz() {\n         return valid;\n     }\n \n+    /**\n+     * Check type of the value valid\n+     * @param value the property value to be checked data type\n+     * @param <V>   the property value original data type\n+     * @return true if the value is or can convert to the data type,\n+     *         otherwise false\n+     */\n+    private <V> boolean checkDataType(V value) {\n+        return this.dataType().clazz().isInstance(value);\n+    }\n+\n+    /**\n+     * Check type of all the values(may be some of list properties) valid\n+     * @param values the property values to be checked data type\n+     * @param <V> the property value class\n+     * @return true if all the values are or can convert to the data type,\n+     *         otherwise false\n+     */\n+    private <V> boolean checkDataType(Collection<V> values) {\n+        boolean valid = true;\n+        for (Object o : values) {\n+            if (!this.checkDataType(o)) {\n+                valid = false;\n+                break;\n+            }\n+        }\n+        return valid;\n+    }\n+\n     public <V> Object serialValue(V value) {\n         V validValue = this.validValue(value);\n         E.checkArgument(validValue != null,\n                         \"Invalid property value '%s' for key '%s'\",\n                         value, this.name());\n+        E.checkArgument(this.cardinality == Cardinality.SINGLE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82afc2dc4e66047e7cbb540d40a85542083d9488"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTAwNjc5OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/schema/PropertyKey.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMToxNTo1MFrOGeI9bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMToxNTo1MFrOGeI9bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NzI2Mw==", "bodyText": "this.cardinality.single()", "url": "https://github.com/hugegraph/hugegraph/pull/1004#discussion_r434257263", "createdAt": "2020-06-03T01:15:50Z", "author": {"login": "zhoney"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/schema/PropertyKey.java", "diffHunk": "@@ -238,46 +237,61 @@ public String clazz() {\n     }\n \n     public <V> V validValue(V value) {\n-        return this.convValue(value, true);\n+        try {\n+            return this.convValue(value);\n+        } catch (RuntimeException e) {\n+            throw new IllegalArgumentException(String.format(\n+                      \"Invalid property value '%s' for key '%s': %s\",\n+                      value, this.name(), e.getMessage()));\n+        }\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public <V, T> V convValue(V value, boolean checkValue) {\n+    private <V, T> V convValue(V value) {\n         if (value == null) {\n             return null;\n         }\n+        if (this.checkValueType(value)) {\n+            // Same as expected type, no conversion required\n+            return value;\n+        }\n \n-        V validValue;\n+        V validValue = null;\n         Collection<T> validValues;\n-        if (!(value instanceof Collection)) {\n+        if (this.cardinality == Cardinality.SINGLE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82afc2dc4e66047e7cbb540d40a85542083d9488"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1620, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}