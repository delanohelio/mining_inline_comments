{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMTY4NzE0", "number": 827, "title": "fix task-cancel error with saving failure task", "bodyText": "This bug is caused by failure task status has not been saved to backend store(\nthe root cause is result size exceeded 64k, and failed to save), so its status is\nstill RUNNING even the task is finished, if call cancel() then the task will be loaded\nfrom backend store and its scheduler is null.\nfix hugegraph/hugegraph-tools#50\nChange-Id: If70a2233f73c578f38842b6b015241b5ba6b86a1", "createdAt": "2020-01-13T15:11:54Z", "url": "https://github.com/hugegraph/hugegraph/pull/827", "merged": true, "mergeCommit": {"oid": "dee579d989e1b28e92c6f2ebe570e222e5ed1a34"}, "closed": true, "closedAt": "2020-02-24T01:27:16Z", "author": {"login": "javeme"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6IM_bABqjI5NDU1MzI0MjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHTNgXAFqTM2MzE0MjM5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f57349c288f310b89e8b9f8523388cac68b998f", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/2f57349c288f310b89e8b9f8523388cac68b998f", "committedDate": "2020-01-13T15:05:10Z", "message": "add test\n\nChange-Id: I906039eca6b88dc450ee7adac36fe1e3d252be61"}, "afterCommit": {"oid": "5ae81946ada4d32f575b2efcbb187f2a2332a5b3", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/5ae81946ada4d32f575b2efcbb187f2a2332a5b3", "committedDate": "2020-01-14T03:14:08Z", "message": "add test\n\nChange-Id: I906039eca6b88dc450ee7adac36fe1e3d252be61"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "18071c71f3a268881fd7f3ca9a9207e49901410c", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/18071c71f3a268881fd7f3ca9a9207e49901410c", "committedDate": "2020-01-16T10:50:30Z", "message": "fix cancel() test\n\nChange-Id: I606d389f06b2f8145463586308981f741c908ac0"}, "afterCommit": {"oid": "94af65532e44db3c36fc9428ac2f8601c421154e", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/94af65532e44db3c36fc9428ac2f8601c421154e", "committedDate": "2020-01-16T11:37:27Z", "message": "fix cancel() test\n\nChange-Id: I606d389f06b2f8145463586308981f741c908ac0"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "94af65532e44db3c36fc9428ac2f8601c421154e", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/94af65532e44db3c36fc9428ac2f8601c421154e", "committedDate": "2020-01-16T11:37:27Z", "message": "fix cancel() test\n\nChange-Id: I606d389f06b2f8145463586308981f741c908ac0"}, "afterCommit": {"oid": "d32a6009fe84e4c4362fedf9bc9b50b89f368d27", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/d32a6009fe84e4c4362fedf9bc9b50b89f368d27", "committedDate": "2020-01-16T12:01:03Z", "message": "fix cancel() test\n\nChange-Id: I606d389f06b2f8145463586308981f741c908ac0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e4ccfa15b1f31e71f6123f7978f3564d140ea34", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/3e4ccfa15b1f31e71f6123f7978f3564d140ea34", "committedDate": "2020-02-06T05:11:36Z", "message": "fix task-cancel bug\n\nChange-Id: If70a2233f73c578f38842b6b015241b5ba6b86a1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "266edae5313766cfa7ec4454c3243e2a58d54083", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/266edae5313766cfa7ec4454c3243e2a58d54083", "committedDate": "2020-02-06T05:11:36Z", "message": "add test\n\nChange-Id: I906039eca6b88dc450ee7adac36fe1e3d252be61"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c26901161a47710182e761bbf53c7b31c4ac4fea", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/c26901161a47710182e761bbf53c7b31c4ac4fea", "committedDate": "2020-02-06T05:11:36Z", "message": "add task-cancel api test\n\nChange-Id: Ia47213935de8b76691e65098e95989b152bfb4b1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cba8735e105476057b6aca2d1b0fc58e7b41c68b", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/cba8735e105476057b6aca2d1b0fc58e7b41c68b", "committedDate": "2020-02-06T05:11:36Z", "message": "add more check\n\nChange-Id: I57bdf5eb72ccebcde186b20ee079442236d4584d"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c40c9398572b0378b731d38f6926eb54b212f37", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/2c40c9398572b0378b731d38f6926eb54b212f37", "committedDate": "2020-02-06T05:11:36Z", "message": "remove debug info\n\nChange-Id: I0adde8d686ca10b938c2660446463fa26fd4bb89"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce6ef4b942306e0418b18556e754c9cb71e34578", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/ce6ef4b942306e0418b18556e754c9cb71e34578", "committedDate": "2020-02-06T05:11:36Z", "message": "improve GremlinJob.execute()\n\nChange-Id: I0ac694d21ea5cbdf1234490afb2afda660f1349c"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8082800cdb935d7bba06d059d12e24482c073cb8", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/8082800cdb935d7bba06d059d12e24482c073cb8", "committedDate": "2020-02-06T05:11:36Z", "message": "add script job test with count()\n\nChange-Id: I1a2acadd27ee7820d240c3f987b8e061c2441e55"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65d263513672b65b40c0799bcda79de7de30fdf2", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/65d263513672b65b40c0799bcda79de7de30fdf2", "committedDate": "2020-02-06T05:11:36Z", "message": "fix cancel() test\n\nChange-Id: I606d389f06b2f8145463586308981f741c908ac0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "818c1b6c491d3ea1f1a9013f67968940b920d755", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/818c1b6c491d3ea1f1a9013f67968940b920d755", "committedDate": "2020-02-06T05:12:56Z", "message": "rebase and tiny fix\n\nChange-Id: Ice0ea021096bc86046dbe6621b72c26a892ce215"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d32a6009fe84e4c4362fedf9bc9b50b89f368d27", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/d32a6009fe84e4c4362fedf9bc9b50b89f368d27", "committedDate": "2020-01-16T12:01:03Z", "message": "fix cancel() test\n\nChange-Id: I606d389f06b2f8145463586308981f741c908ac0"}, "afterCommit": {"oid": "818c1b6c491d3ea1f1a9013f67968940b920d755", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/818c1b6c491d3ea1f1a9013f67968940b920d755", "committedDate": "2020-02-06T05:12:56Z", "message": "rebase and tiny fix\n\nChange-Id: Ice0ea021096bc86046dbe6621b72c26a892ce215"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NzAyNjA0", "url": "https://github.com/hugegraph/hugegraph/pull/827#pullrequestreview-359702604", "createdAt": "2020-02-17T12:34:27Z", "commit": {"oid": "818c1b6c491d3ea1f1a9013f67968940b920d755"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjozNDoyN1rOFqi64Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzoxNzowM1rOFqkE9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NjY0MQ==", "bodyText": "When will the schema be null", "url": "https://github.com/hugegraph/hugegraph/pull/827#discussion_r380156641", "createdAt": "2020-02-17T12:34:27Z", "author": {"login": "Linary"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/job/schema/RebuildIndexCallable.java", "diffHunk": "@@ -50,7 +50,11 @@ public String type() {\n \n     @Override\n     public Object execute() {\n-        this.rebuildIndex(this.schemaElement());\n+        SchemaElement schema = this.schemaElement();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "818c1b6c491d3ea1f1a9013f67968940b920d755"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3NTYwNw==", "bodyText": "add empty line", "url": "https://github.com/hugegraph/hugegraph/pull/827#discussion_r380175607", "createdAt": "2020-02-17T13:17:03Z", "author": {"login": "Linary"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "diffHunk": "@@ -0,0 +1,555 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.core;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.api.job.GremlinAPI.GremlinRequest;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.exception.LimitExceedException;\n+import com.baidu.hugegraph.exception.NotFoundException;\n+import com.baidu.hugegraph.job.EphemeralJob;\n+import com.baidu.hugegraph.job.EphemeralJobBuilder;\n+import com.baidu.hugegraph.job.GremlinJob;\n+import com.baidu.hugegraph.job.JobBuilder;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.task.TaskCallable;\n+import com.baidu.hugegraph.task.TaskScheduler;\n+import com.baidu.hugegraph.task.TaskStatus;\n+import com.baidu.hugegraph.testutil.Assert;\n+import com.baidu.hugegraph.testutil.Whitebox;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class TaskCoreTest extends BaseCoreTest {\n+\n+    private static final int SLEEP_TIME = 200;\n+\n+    @After\n+    @Override\n+    public void setup() {\n+        super.setup();\n+\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        Iterator<HugeTask<Object>> iter = scheduler.findAllTask(-1, null);\n+        while (iter.hasNext()) {\n+            scheduler.deleteTask(iter.next().id());\n+        }\n+    }\n+\n+    @Test\n+    public void testTask() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        TaskCallable<Integer> callable =  new TaskCallable<Integer>() {\n+            @Override\n+            public Integer call() throws Exception {\n+                Thread.sleep(SLEEP_TIME);\n+                return 125;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "818c1b6c491d3ea1f1a9013f67968940b920d755"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a19f3031850a30a7ba363070797a618fd055ca2", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/6a19f3031850a30a7ba363070797a618fd055ca2", "committedDate": "2020-02-20T13:57:54Z", "message": "tiny improve\n\nChange-Id: Ib9a26b1851b8477da8c20df77a19a4a2c9589a34"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzg1OTc1", "url": "https://github.com/hugegraph/hugegraph/pull/827#pullrequestreview-362385975", "createdAt": "2020-02-21T03:54:10Z", "commit": {"oid": "6a19f3031850a30a7ba363070797a618fd055ca2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzg3MjU3", "url": "https://github.com/hugegraph/hugegraph/pull/827#pullrequestreview-362387257", "createdAt": "2020-02-21T03:59:44Z", "commit": {"oid": "818c1b6c491d3ea1f1a9013f67968940b920d755"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzo1OTo0NFrOFsrBDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzo1OTo1OVrOFsrBQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM4NjQ0NA==", "bodyText": "= new", "url": "https://github.com/hugegraph/hugegraph/pull/827#discussion_r382386444", "createdAt": "2020-02-21T03:59:44Z", "author": {"login": "Linary"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "diffHunk": "@@ -0,0 +1,555 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.core;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.api.job.GremlinAPI.GremlinRequest;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.exception.LimitExceedException;\n+import com.baidu.hugegraph.exception.NotFoundException;\n+import com.baidu.hugegraph.job.EphemeralJob;\n+import com.baidu.hugegraph.job.EphemeralJobBuilder;\n+import com.baidu.hugegraph.job.GremlinJob;\n+import com.baidu.hugegraph.job.JobBuilder;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.task.TaskCallable;\n+import com.baidu.hugegraph.task.TaskScheduler;\n+import com.baidu.hugegraph.task.TaskStatus;\n+import com.baidu.hugegraph.testutil.Assert;\n+import com.baidu.hugegraph.testutil.Whitebox;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class TaskCoreTest extends BaseCoreTest {\n+\n+    private static final int SLEEP_TIME = 200;\n+\n+    @After\n+    @Override\n+    public void setup() {\n+        super.setup();\n+\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        Iterator<HugeTask<Object>> iter = scheduler.findAllTask(-1, null);\n+        while (iter.hasNext()) {\n+            scheduler.deleteTask(iter.next().id());\n+        }\n+    }\n+\n+    @Test\n+    public void testTask() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        TaskCallable<Integer> callable =  new TaskCallable<Integer>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "818c1b6c491d3ea1f1a9013f67968940b920d755"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM4NjQ5OA==", "bodyText": "ditto", "url": "https://github.com/hugegraph/hugegraph/pull/827#discussion_r382386498", "createdAt": "2020-02-21T03:59:59Z", "author": {"login": "Linary"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "diffHunk": "@@ -0,0 +1,555 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.core;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.api.job.GremlinAPI.GremlinRequest;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.exception.LimitExceedException;\n+import com.baidu.hugegraph.exception.NotFoundException;\n+import com.baidu.hugegraph.job.EphemeralJob;\n+import com.baidu.hugegraph.job.EphemeralJobBuilder;\n+import com.baidu.hugegraph.job.GremlinJob;\n+import com.baidu.hugegraph.job.JobBuilder;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.task.TaskCallable;\n+import com.baidu.hugegraph.task.TaskScheduler;\n+import com.baidu.hugegraph.task.TaskStatus;\n+import com.baidu.hugegraph.testutil.Assert;\n+import com.baidu.hugegraph.testutil.Whitebox;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class TaskCoreTest extends BaseCoreTest {\n+\n+    private static final int SLEEP_TIME = 200;\n+\n+    @After\n+    @Override\n+    public void setup() {\n+        super.setup();\n+\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        Iterator<HugeTask<Object>> iter = scheduler.findAllTask(-1, null);\n+        while (iter.hasNext()) {\n+            scheduler.deleteTask(iter.next().id());\n+        }\n+    }\n+\n+    @Test\n+    public void testTask() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        TaskCallable<Integer> callable =  new TaskCallable<Integer>() {\n+            @Override\n+            public Integer call() throws Exception {\n+                Thread.sleep(SLEEP_TIME);\n+                return 125;\n+            }\n+            @Override\n+            protected void done() {\n+                scheduler.save(this.task());\n+            }\n+        };\n+\n+        Id id = IdGenerator.of(88888);\n+        HugeTask<?> task = new HugeTask<>(id, null, callable);\n+        task.type(\"test\");\n+        task.name(\"test-task\");\n+\n+        scheduler.schedule(task);\n+        Assert.assertEquals(id, task.id());\n+        Assert.assertFalse(task.completed());\n+\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            scheduler.deleteTask(id);\n+        }, e -> {\n+            Assert.assertContains(\"Can't delete incomplete task '88888'\",\n+                                  e.getMessage());\n+        });\n+\n+        task = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(id, task.id());\n+        Assert.assertEquals(\"test-task\", task.name());\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+\n+        Assert.assertEquals(\"test-task\", scheduler.task(id).name());\n+        Assert.assertEquals(\"test-task\", scheduler.findTask(id).name());\n+\n+        Iterator<HugeTask<Object>> iter = scheduler.tasks(ImmutableList.of(id));\n+        Assert.assertTrue(iter.hasNext());\n+        Assert.assertEquals(\"test-task\", iter.next().name());\n+        Assert.assertFalse(iter.hasNext());\n+\n+        iter = scheduler.findTask(TaskStatus.SUCCESS, 10, null);\n+        Assert.assertTrue(iter.hasNext());\n+        Assert.assertEquals(\"test-task\", iter.next().name());\n+        Assert.assertFalse(iter.hasNext());\n+\n+        iter = scheduler.findAllTask(10, null);\n+        Assert.assertTrue(iter.hasNext());\n+        Assert.assertEquals(\"test-task\", iter.next().name());\n+        Assert.assertFalse(iter.hasNext());\n+\n+        scheduler.deleteTask(id);\n+        iter = scheduler.findAllTask(10, null);\n+        Assert.assertFalse(iter.hasNext());\n+        Assert.assertThrows(NotFoundException.class, () -> {\n+            scheduler.task(id);\n+        });\n+    }\n+\n+    @Test\n+    public void testTaskWithFailure() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        TaskCallable<Integer> callable =  new TaskCallable<Integer>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "818c1b6c491d3ea1f1a9013f67968940b920d755"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNDMwMTQ1", "url": "https://github.com/hugegraph/hugegraph/pull/827#pullrequestreview-362430145", "createdAt": "2020-02-21T06:59:19Z", "commit": {"oid": "6a19f3031850a30a7ba363070797a618fd055ca2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNjo1OToxOVrOFstSrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNjo1OToxOVrOFstSrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQyMzcyNQ==", "bodyText": "teardown may be better", "url": "https://github.com/hugegraph/hugegraph/pull/827#discussion_r382423725", "createdAt": "2020-02-21T06:59:19Z", "author": {"login": "zhoney"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "diffHunk": "@@ -0,0 +1,556 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.core;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.api.job.GremlinAPI.GremlinRequest;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.exception.LimitExceedException;\n+import com.baidu.hugegraph.exception.NotFoundException;\n+import com.baidu.hugegraph.job.EphemeralJob;\n+import com.baidu.hugegraph.job.EphemeralJobBuilder;\n+import com.baidu.hugegraph.job.GremlinJob;\n+import com.baidu.hugegraph.job.JobBuilder;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.task.TaskCallable;\n+import com.baidu.hugegraph.task.TaskScheduler;\n+import com.baidu.hugegraph.task.TaskStatus;\n+import com.baidu.hugegraph.testutil.Assert;\n+import com.baidu.hugegraph.testutil.Whitebox;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class TaskCoreTest extends BaseCoreTest {\n+\n+    private static final int SLEEP_TIME = 200;\n+\n+    @After\n+    @Override\n+    public void setup() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a19f3031850a30a7ba363070797a618fd055ca2"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "240c263b699458ab64cc1564585466c97abd0738", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/240c263b699458ab64cc1564585466c97abd0738", "committedDate": "2020-02-21T11:31:36Z", "message": "tiny fix\n\nChange-Id: Ic02398d5c8310510ae3524407f2fbf9ef1801135"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2d73cefba04c325bd22bda014137d1163d60a73", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/d2d73cefba04c325bd22bda014137d1163d60a73", "committedDate": "2020-02-21T12:14:06Z", "message": "fix teardown()\n\nChange-Id: Idb4fe8d349c09d0384705641b27efddef10f44c2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDkyMjUz", "url": "https://github.com/hugegraph/hugegraph/pull/827#pullrequestreview-363092253", "createdAt": "2020-02-23T12:42:41Z", "commit": {"oid": "d2d73cefba04c325bd22bda014137d1163d60a73"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxMjo0Mjo0MVrOFtQg6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxMjo0Mjo0MVrOFtQg6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAwMDgwOQ==", "bodyText": "// Cancel success task", "url": "https://github.com/hugegraph/hugegraph/pull/827#discussion_r383000809", "createdAt": "2020-02-23T12:42:41Z", "author": {"login": "zhoney"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "diffHunk": "@@ -0,0 +1,556 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.core;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.api.job.GremlinAPI.GremlinRequest;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.exception.LimitExceedException;\n+import com.baidu.hugegraph.exception.NotFoundException;\n+import com.baidu.hugegraph.job.EphemeralJob;\n+import com.baidu.hugegraph.job.EphemeralJobBuilder;\n+import com.baidu.hugegraph.job.GremlinJob;\n+import com.baidu.hugegraph.job.JobBuilder;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.task.TaskCallable;\n+import com.baidu.hugegraph.task.TaskScheduler;\n+import com.baidu.hugegraph.task.TaskStatus;\n+import com.baidu.hugegraph.testutil.Assert;\n+import com.baidu.hugegraph.testutil.Whitebox;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class TaskCoreTest extends BaseCoreTest {\n+\n+    private static final int SLEEP_TIME = 200;\n+\n+    @Before\n+    @Override\n+    public void setup() {\n+        super.setup();\n+\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        Iterator<HugeTask<Object>> iter = scheduler.findAllTask(-1, null);\n+        while (iter.hasNext()) {\n+            scheduler.deleteTask(iter.next().id());\n+        }\n+    }\n+\n+    @Test\n+    public void testTask() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        TaskCallable<Integer> callable = new TaskCallable<Integer>() {\n+            @Override\n+            public Integer call() throws Exception {\n+                Thread.sleep(SLEEP_TIME);\n+                return 125;\n+            }\n+\n+            @Override\n+            protected void done() {\n+                scheduler.save(this.task());\n+            }\n+        };\n+\n+        Id id = IdGenerator.of(88888);\n+        HugeTask<?> task = new HugeTask<>(id, null, callable);\n+        task.type(\"test\");\n+        task.name(\"test-task\");\n+\n+        scheduler.schedule(task);\n+        Assert.assertEquals(id, task.id());\n+        Assert.assertFalse(task.completed());\n+\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            scheduler.deleteTask(id);\n+        }, e -> {\n+            Assert.assertContains(\"Can't delete incomplete task '88888'\",\n+                                  e.getMessage());\n+        });\n+\n+        task = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(id, task.id());\n+        Assert.assertEquals(\"test-task\", task.name());\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+\n+        Assert.assertEquals(\"test-task\", scheduler.task(id).name());\n+        Assert.assertEquals(\"test-task\", scheduler.findTask(id).name());\n+\n+        Iterator<HugeTask<Object>> iter = scheduler.tasks(ImmutableList.of(id));\n+        Assert.assertTrue(iter.hasNext());\n+        Assert.assertEquals(\"test-task\", iter.next().name());\n+        Assert.assertFalse(iter.hasNext());\n+\n+        iter = scheduler.findTask(TaskStatus.SUCCESS, 10, null);\n+        Assert.assertTrue(iter.hasNext());\n+        Assert.assertEquals(\"test-task\", iter.next().name());\n+        Assert.assertFalse(iter.hasNext());\n+\n+        iter = scheduler.findAllTask(10, null);\n+        Assert.assertTrue(iter.hasNext());\n+        Assert.assertEquals(\"test-task\", iter.next().name());\n+        Assert.assertFalse(iter.hasNext());\n+\n+        scheduler.deleteTask(id);\n+        iter = scheduler.findAllTask(10, null);\n+        Assert.assertFalse(iter.hasNext());\n+        Assert.assertThrows(NotFoundException.class, () -> {\n+            scheduler.task(id);\n+        });\n+    }\n+\n+    @Test\n+    public void testTaskWithFailure() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        TaskCallable<Integer> callable = new TaskCallable<Integer>() {\n+            @Override\n+            public Integer call() throws Exception {\n+                Thread.sleep(SLEEP_TIME);\n+                return 125;\n+            }\n+            @Override\n+            protected void done() {\n+                scheduler.save(this.task());\n+            }\n+        };\n+\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            new HugeTask<>(null, null, callable);\n+        }, e -> {\n+            Assert.assertContains(\"Task id can't be null\", e.getMessage());\n+        });\n+\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            Id id = IdGenerator.of(\"88888\");\n+            new HugeTask<>(id, null, callable);\n+        }, e -> {\n+            Assert.assertContains(\"Invalid task id type, it must be number\",\n+                                  e.getMessage());\n+        });\n+\n+        Assert.assertThrows(NullPointerException.class, () -> {\n+            Id id = IdGenerator.of(88888);\n+            new HugeTask<>(id, null, null);\n+        });\n+\n+        Assert.assertThrows(IllegalStateException.class, () -> {\n+            Id id = IdGenerator.of(88888);\n+            HugeTask<?> task2 = new HugeTask<>(id, null, callable);\n+            task2.name(\"test-task\");\n+            scheduler.schedule(task2);\n+        }, e -> {\n+            Assert.assertContains(\"Task type can't be null\", e.getMessage());\n+        });\n+\n+        Assert.assertThrows(IllegalStateException.class, () -> {\n+            Id id = IdGenerator.of(88888);\n+            HugeTask<?> task2 = new HugeTask<>(id, null, callable);\n+            task2.type(\"test\");\n+            scheduler.schedule(task2);\n+        }, e -> {\n+            Assert.assertContains(\"Task name can't be null\", e.getMessage());\n+        });\n+    }\n+\n+    @Test\n+    public void testEphemeralJob() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        EphemeralJobBuilder<Object> builder = EphemeralJobBuilder.of(graph);\n+        builder.name(\"test-job-ephemeral\")\n+               .job(new EphemeralJob<Object>() {\n+                    @Override\n+                    public String type() {\n+                        return \"test\";\n+                    }\n+                    @Override\n+                    public Object execute() throws Exception {\n+                        Thread.sleep(SLEEP_TIME);\n+                        return ImmutableMap.of(\"k1\", 13579, \"k2\", \"24680\");\n+                    }\n+               });\n+\n+        HugeTask<Object> task = builder.schedule();\n+        Assert.assertEquals(\"test-job-ephemeral\", task.name());\n+        Assert.assertEquals(\"test\", task.type());\n+        Assert.assertFalse(task.completed());\n+\n+        HugeTask<?> task2 = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+        Assert.assertEquals(\"{\\\"k1\\\":13579,\\\"k2\\\":\\\"24680\\\"}\", task.result());\n+\n+        Assert.assertEquals(TaskStatus.SUCCESS, task2.status());\n+        Assert.assertEquals(\"{\\\"k1\\\":13579,\\\"k2\\\":\\\"24680\\\"}\", task2.result());\n+\n+        Assert.assertThrows(NotFoundException.class, () -> {\n+            scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        });\n+        Assert.assertThrows(NotFoundException.class, () -> {\n+            scheduler.task(task.id());\n+        });\n+    }\n+\n+    @Test\n+    public void testGremlinJob() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        GremlinRequest request = new GremlinRequest();\n+        request.gremlin(\"3 + 5\");\n+\n+        JobBuilder<Object> builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(request.toJson())\n+               .job(new GremlinJob());\n+\n+        HugeTask<Object> task = builder.schedule();\n+        Assert.assertEquals(\"test-job-gremlin\", task.name());\n+        Assert.assertEquals(\"gremlin\", task.type());\n+        Assert.assertFalse(task.completed());\n+        Assert.assertNull(task.result());\n+\n+        task = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(\"test-job-gremlin\", task.name());\n+        Assert.assertEquals(\"gremlin\", task.type());\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+        Assert.assertEquals(\"8\", task.result());\n+\n+        task = scheduler.task(task.id());\n+        Assert.assertEquals(\"test-job-gremlin\", task.name());\n+        Assert.assertEquals(\"gremlin\", task.type());\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+        Assert.assertEquals(\"8\", task.result());\n+    }\n+\n+    @Test\n+    public void testGremlinJobWithScript() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        String script = \"schema=graph.schema();\"\n+                + \"schema.propertyKey('name').asText().ifNotExist().create();\"\n+                + \"schema.propertyKey('age').asInt().ifNotExist().create();\"\n+                + \"schema.propertyKey('lang').asText().ifNotExist().create();\"\n+                + \"schema.propertyKey('date').asDate().ifNotExist().create();\"\n+                + \"schema.propertyKey('price').asInt().ifNotExist().create();\"\n+                + \"person1=schema.vertexLabel('person1').properties('name','age').ifNotExist().create();\"\n+                + \"person2=schema.vertexLabel('person2').properties('name','age').ifNotExist().create();\"\n+                + \"knows=schema.edgeLabel('knows').sourceLabel('person1').targetLabel('person2').properties('date').ifNotExist().create();\"\n+                + \"for(int i = 0; i < 1000; i++) {\"\n+                + \"  p1=graph.addVertex(T.label,'person1','name','p1-'+i,'age',29);\"\n+                + \"  p2=graph.addVertex(T.label,'person2','name','p2-'+i,'age',27);\"\n+                + \"  p1.addEdge('knows',p2,'date','2016-01-10');\"\n+                + \"}\";\n+\n+        HugeTask<Object> task = runGremlinJob(script);\n+        task = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(\"test-gremlin-job\", task.name());\n+        Assert.assertEquals(\"gremlin\", task.type());\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+        Assert.assertEquals(\"[]\", task.result());\n+\n+        script = \"g.V().count()\";\n+        task = runGremlinJob(script);\n+        task = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+        Assert.assertEquals(\"[2000]\", task.result());\n+\n+        script = \"g.V().hasLabel('person1').count()\";\n+        task = runGremlinJob(script);\n+        task = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+        Assert.assertEquals(\"[1000]\", task.result());\n+\n+        script = \"g.V().hasLabel('person2').count()\";\n+        task = runGremlinJob(script);\n+        task = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+        Assert.assertEquals(\"[1000]\", task.result());\n+\n+        script = \"g.E().count()\";\n+        task = runGremlinJob(script);\n+        task = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+        Assert.assertEquals(\"[1000]\", task.result());\n+\n+        script = \"g.E().hasLabel('knows').count()\";\n+        task = runGremlinJob(script);\n+        task = scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.SUCCESS, task.status());\n+        Assert.assertEquals(\"[1000]\", task.result());\n+    }\n+\n+    @Test\n+    public void testGremlinJobWithFailure() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        JobBuilder<Object> builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(\"\")\n+               .job(new GremlinJob());\n+        HugeTask<Object> task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Can't read json\", task.result());\n+\n+        builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .job(new GremlinJob());\n+        task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"The input can't be null\", task.result());\n+\n+        builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(\"{}\")\n+               .job(new GremlinJob());\n+        task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Invalid gremlin value 'null'\", task.result());\n+\n+        builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(\"{\\\"gremlin\\\":8}\")\n+               .job(new GremlinJob());\n+        task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Invalid gremlin value '8'\", task.result());\n+\n+        builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(\"{\\\"gremlin\\\":\\\"\\\"}\")\n+               .job(new GremlinJob());\n+        task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Invalid bindings value 'null'\", task.result());\n+\n+        builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(\"{\\\"gremlin\\\":\\\"\\\", \\\"bindings\\\":\\\"\\\"}\")\n+               .job(new GremlinJob());\n+        task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Invalid bindings value ''\", task.result());\n+\n+        builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(\"{\\\"gremlin\\\":\\\"\\\", \\\"bindings\\\":{}}\")\n+               .job(new GremlinJob());\n+        task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Invalid language value 'null'\", task.result());\n+\n+        builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(\"{\\\"gremlin\\\":\\\"\\\", \\\"bindings\\\":{}, \\\"language\\\":{}}\")\n+               .job(new GremlinJob());\n+        task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Invalid language value '{}'\", task.result());\n+\n+        builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(\"{\\\"gremlin\\\":\\\"\\\", \\\"bindings\\\":{}, \\\"language\\\":\\\"\\\"}\")\n+               .job(new GremlinJob());\n+        task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Invalid aliases value 'null'\", task.result());\n+\n+        builder = JobBuilder.of(graph);\n+        builder.name(\"test-job-gremlin\")\n+               .input(\"{\\\"gremlin\\\":\\\"\\\", \\\"bindings\\\":{}, \" +\n+                      \"\\\"language\\\":\\\"test\\\", \\\"aliases\\\":{}}\")\n+               .job(new GremlinJob());\n+        task = builder.schedule();\n+        scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"test is not an available GremlinScriptEngine\",\n+                              task.result());\n+    }\n+\n+    @Test\n+    public void testGremlinJobWithError() throws TimeoutException {\n+        HugeGraph graph = graph();\n+\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            JobBuilder.of(graph)\n+                      .job(new GremlinJob())\n+                      .schedule();\n+        }, e -> {\n+            Assert.assertContains(\"Job name can't be null\", e.getMessage());\n+        });\n+\n+        Assert.assertThrows(IllegalArgumentException.class, () -> {\n+            JobBuilder.of(graph)\n+                      .name(\"test-job-gremlin\")\n+                      .schedule();\n+        }, e -> {\n+            Assert.assertContains(\"Job callable can't be null\", e.getMessage());\n+        });\n+\n+        // failure task with big input\n+        char[] chars = new char[65536];\n+        for (int i = 0; i < chars.length; i++) {\n+            chars[i] = '8';\n+        }\n+        String bigInput = new String(chars);\n+        Assert.assertThrows(LimitExceedException.class, () -> {\n+            runGremlinJob(bigInput);\n+        }, e -> {\n+            Assert.assertContains(\"Task input size 65605 exceeded \" +\n+                                  \"limit 65535 bytes\", e.getMessage());\n+        });\n+    }\n+\n+    @Test\n+    public void testGremlinJobAndCancel() throws TimeoutException {\n+        HugeGraph graph = graph();\n+        TaskScheduler scheduler = graph.taskScheduler();\n+\n+        HugeTask<Object> task = runGremlinJob(\"Thread.sleep(1000 * 10);\");\n+        scheduler.cancel(task);\n+\n+        Assert.assertEquals(TaskStatus.CANCELLED, task.status());\n+        Assert.assertTrue(task.result(), task.result() == null ||\n+                          task.result().endsWith(\"InterruptedException\"));\n+\n+        task = scheduler.findTask(task.id());\n+        Assert.assertEquals(TaskStatus.CANCELLED, task.status());\n+        Assert.assertEquals(\"test-gremlin-job\", task.name());\n+        Assert.assertTrue(task.result(), task.result() == null ||\n+                          task.result().endsWith(\"InterruptedException\"));\n+\n+        // cancel success task", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d73cefba04c325bd22bda014137d1163d60a73"}, "originalPosition": 463}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e63d3525cec9ff320c353a3b7616e8e1bf11156d", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/e63d3525cec9ff320c353a3b7616e8e1bf11156d", "committedDate": "2020-02-23T17:21:35Z", "message": "fix comments\n\nChange-Id: Ib61c8cdae2e73d346dd611791d47faa30eac6e5a"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMTExMzE3", "url": "https://github.com/hugegraph/hugegraph/pull/827#pullrequestreview-363111317", "createdAt": "2020-02-23T17:49:20Z", "commit": {"oid": "e63d3525cec9ff320c353a3b7616e8e1bf11156d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMTQyMzkx", "url": "https://github.com/hugegraph/hugegraph/pull/827#pullrequestreview-363142391", "createdAt": "2020-02-24T01:26:30Z", "commit": {"oid": "e63d3525cec9ff320c353a3b7616e8e1bf11156d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2367, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}