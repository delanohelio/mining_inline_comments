{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5OTcyNTg5", "number": 846, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMzowNzozMlrODfxFRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMzowNzozMlrODfxFRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjM2NjE0OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/OffheapCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMzowNzozMlrOFpqb2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMzowNzozMlrOFpqb2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIzMTE5Mg==", "bodyText": "delete it?", "url": "https://github.com/hugegraph/hugegraph/pull/846#discussion_r379231192", "createdAt": "2020-02-14T03:07:32Z", "author": {"login": "Linary"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/OffheapCache.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.cache;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import org.caffinitas.ohc.CacheSerializer;\n+import org.caffinitas.ohc.CloseableIterator;\n+import org.caffinitas.ohc.Eviction;\n+import org.caffinitas.ohc.OHCache;\n+import org.caffinitas.ohc.OHCacheBuilder;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.serializer.AbstractSerializer;\n+import com.baidu.hugegraph.backend.serializer.BinaryBackendEntry;\n+import com.baidu.hugegraph.backend.serializer.BinaryInlineSerializer;\n+import com.baidu.hugegraph.backend.serializer.BytesBuffer;\n+import com.baidu.hugegraph.backend.store.BackendEntry;\n+import com.baidu.hugegraph.backend.store.BackendEntry.BackendColumn;\n+import com.baidu.hugegraph.structure.HugeEdge;\n+import com.baidu.hugegraph.structure.HugeVertex;\n+import com.baidu.hugegraph.type.HugeType;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.InsertionOrderUtil;\n+\n+public class OffheapCache extends AbstractCache {\n+\n+    private final OHCache<Id, Value> cache;\n+    private final HugeGraph graph;\n+    private final AbstractSerializer serializer;\n+\n+    public OffheapCache(HugeGraph graph, int capacity) {\n+        super(capacity);\n+        this.graph = graph;\n+        this.cache = this.builder().capacity(capacity).build();\n+        this.serializer = new BinaryInlineSerializer();\n+    }\n+\n+    private HugeGraph graph() {\n+        return this.graph;\n+    }\n+\n+    private AbstractSerializer serializer() {\n+        return this.serializer;\n+    }\n+\n+    @Override\n+    public void traverse(Consumer<Object> consumer) {\n+        CloseableIterator<Id> iter = this.cache.keyIterator();\n+        while (iter.hasNext()) {\n+            Id key = iter.next();\n+            Value value = this.cache.get(key);\n+            consumer.accept(value.value());\n+        }\n+    }\n+\n+    @Override\n+    public void clear() {\n+        this.cache.clear();\n+    }\n+\n+    @Override\n+    public long size() {\n+        return this.cache.size();\n+    }\n+\n+    @Override\n+    protected Object access(Id id) {\n+        Value value = this.cache.get(id);\n+        return value == null ? null : value.value();\n+    }\n+\n+    @Override\n+    protected void write(Id id, Object value) {\n+        this.cache.put(id, new Value(value));\n+    }\n+\n+    @Override\n+    protected void remove(Id id) {\n+        this.cache.remove(id);\n+    }\n+\n+    @Override\n+    protected boolean containsKey(Id id) {\n+        return this.cache.containsKey(id);\n+    }\n+\n+    @Override\n+    protected <K, V> Iterator<CacheNode<K, V>> nodes() {\n+        // No needed to expire by timer, return none\n+        return Collections.emptyIterator();\n+    }\n+\n+    private OHCacheBuilder<Id, Value> builder() {\n+        return OHCacheBuilder.<Id, Value>newBuilder()\n+                             .keySerializer(new IdSerializer())\n+                             .valueSerializer(new ValueSerializer())\n+                             .eviction(Eviction.LRU);\n+    }\n+\n+//    private OHCacheBuilder<byte[], byte[]> builder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0e9ae5c0b4253d3e74dfe5ab34820cdc938e1d0"}, "originalPosition": 123}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1583, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}