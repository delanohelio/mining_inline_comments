{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwMDY3MDYy", "number": 1020, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTozNjoxNVrOEDTjcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODowMzoxOVrOEHrSnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAxNTU0OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/StandardHugeGraph.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTozNjoxNVrOGgPvNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTozNjoxNVrOGgPvNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NTQ2MA==", "bodyText": "can we move the log to BackendProviderFactory.open()", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r436465460", "createdAt": "2020-06-08T05:36:15Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/StandardHugeGraph.java", "diffHunk": "@@ -343,9 +343,15 @@ private GraphTransaction graphTransaction() {\n \n     private BackendStoreProvider loadStoreProvider() {\n         String backend = this.configuration.get(CoreOptions.BACKEND);\n-        LOG.info(\"Opening backend store '{}' for graph '{}'\",\n-                 backend, this.name);\n-        return BackendProviderFactory.open(backend, this.name);\n+        boolean raftMode = this.configuration.get(CoreOptions.RAFT_MODE);\n+        if (raftMode) {\n+            LOG.info(\"Opening backend store '{}' in raft mode for graph '{}'\",\n+                     backend, this.name);\n+        } else {\n+            LOG.info(\"Opening backend store '{}' for graph '{}'\",\n+                     backend, this.name);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d29a3a923a3a00810f9013584783a8bdcd14a0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAxODg2OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/BackendStoreStateMachine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTozODoyOVrOGgPxUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTozODoyOVrOGgPxUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NjAwMg==", "bodyText": "log who", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r436466002", "createdAt": "2020-06-08T05:38:29Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/BackendStoreStateMachine.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.slf4j.Logger;\n+\n+import com.alipay.sofa.jraft.Iterator;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.core.StateMachineAdapter;\n+import com.baidu.hugegraph.backend.store.BackendStore;\n+import com.baidu.hugegraph.util.Log;\n+\n+public class BackendStoreStateMachine extends StateMachineAdapter {\n+\n+    private static final Logger LOG = Log.logger(BackendStoreStateMachine.class);\n+\n+    private final BackendStore store;\n+    private final AtomicLong leaderTerm;\n+\n+    public BackendStoreStateMachine(BackendStore store) {\n+        this.store = store;\n+        this.leaderTerm = new AtomicLong(-1);\n+    }\n+\n+    @Override\n+    public void onApply(Iterator iter) {\n+        LOG.debug(\"Node role: {}\", this.isLeader() ? \"leader\" : \"follower\");\n+        while (iter.hasNext()) {\n+            StoreCommand command;\n+            StoreClosure closure = (StoreClosure) iter.done();\n+            if (closure != null) {\n+                // Leader just take it out from the closure\n+                command = closure.command();\n+            } else {\n+                // Follower need deserializeMutation data\n+                ByteBuffer buffer = iter.getData();\n+                command = StoreCommand.fromBytes(buffer.array());\n+            }\n+            try {\n+                Object data = this.applyCommand(command);\n+                success(closure, data);\n+            } catch (Exception e) {\n+                failure(closure, e);\n+            }\n+            iter.next();\n+        }\n+    }\n+\n+    private Object applyCommand(StoreCommand command) throws Exception {\n+        Object result = command.apply();\n+        LOG.debug(\"The store {} performed command {}\", this.store,\n+                  command.command());\n+        return result;\n+    }\n+\n+    public boolean isLeader() {\n+        return this.leaderTerm.get() > 0;\n+    }\n+\n+    @Override\n+    public void onLeaderStart(long term) {\n+        LOG.debug(\"Become to Leader\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d29a3a923a3a00810f9013584783a8bdcd14a0"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAyMDQ1OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStoreProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTozOTo0MlrOGgPyTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTozOTo0MlrOGgPyTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NjI1NQ==", "bodyText": "prefer one nodes map each Provider", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r436466255", "createdAt": "2020-06-08T05:39:42Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStoreProvider.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.backend.store.BackendStore;\n+import com.baidu.hugegraph.backend.store.BackendStoreProvider;\n+import com.baidu.hugegraph.config.HugeConfig;\n+import com.baidu.hugegraph.event.EventListener;\n+import com.baidu.hugegraph.util.Log;\n+\n+/**\n+ * Is actually an proxy\n+ */\n+public class RaftBackendStoreProvider implements BackendStoreProvider {\n+\n+    private static final Logger LOG = Log.logger(RaftBackendStoreProvider.class);\n+\n+    // It will be synchronized wrap\n+    public static final Map<String, RaftNode> RAFT_NODES = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d29a3a923a3a00810f9013584783a8bdcd14a0"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAyMTUxOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0MDoxNlrOGgPy5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0MDoxNlrOGgPy5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NjQwNw==", "bodyText": "rename to stateMachine", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r436466407", "createdAt": "2020-06-08T05:40:16Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+\n+import com.alipay.sofa.jraft.Node;\n+import com.alipay.sofa.jraft.RaftGroupService;\n+import com.alipay.sofa.jraft.StateMachine;\n+import com.alipay.sofa.jraft.conf.Configuration;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.alipay.sofa.jraft.entity.Task;\n+import com.alipay.sofa.jraft.option.NodeOptions;\n+import com.alipay.sofa.jraft.rpc.RpcServer;\n+import com.baidu.hugegraph.backend.BackendException;\n+import com.baidu.hugegraph.backend.store.BackendStore;\n+import com.baidu.hugegraph.config.CoreOptions;\n+import com.baidu.hugegraph.config.HugeConfig;\n+import com.baidu.hugegraph.util.Log;\n+\n+public class RaftNode {\n+\n+    private static final Logger LOG = Log.logger(RaftNode.class);\n+\n+    private final StateMachine fsm;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d29a3a923a3a00810f9013584783a8bdcd14a0"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAyNjkwOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0MzowMVrOGgP16Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0MzowMVrOGgP16Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NzE3Nw==", "bodyText": "set private", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r436467177", "createdAt": "2020-06-08T05:43:01Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+\n+import com.alipay.sofa.jraft.Node;\n+import com.alipay.sofa.jraft.RaftGroupService;\n+import com.alipay.sofa.jraft.StateMachine;\n+import com.alipay.sofa.jraft.conf.Configuration;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.alipay.sofa.jraft.entity.Task;\n+import com.alipay.sofa.jraft.option.NodeOptions;\n+import com.alipay.sofa.jraft.rpc.RpcServer;\n+import com.baidu.hugegraph.backend.BackendException;\n+import com.baidu.hugegraph.backend.store.BackendStore;\n+import com.baidu.hugegraph.config.CoreOptions;\n+import com.baidu.hugegraph.config.HugeConfig;\n+import com.baidu.hugegraph.util.Log;\n+\n+public class RaftNode {\n+\n+    private static final Logger LOG = Log.logger(RaftNode.class);\n+\n+    private final StateMachine fsm;\n+    private final Node node;\n+\n+    public RaftNode(BackendStore store, RaftSharedComponent component) {\n+        this.fsm = new BackendStoreStateMachine(store);\n+        try {\n+            this.node = this.initRaftNode(store, component);\n+        } catch (IOException e) {\n+            throw new BackendException(\"Failed to init raft node\", e);\n+        }\n+    }\n+\n+    public Node node() {\n+        return this.node;\n+    }\n+\n+    public Node initRaftNode(BackendStore store, RaftSharedComponent component)\n+                             throws IOException {\n+        final HugeConfig config = component.config();\n+        String storePath = store.database() + \"-\" + store.store();\n+        // TODO: When sharding is supported, groupId needs to be bound to\n+        //  the shard Id\n+        final String groupId = storePath;\n+        final PeerId serverId = new PeerId();\n+        serverId.parse(config.get(CoreOptions.RAFT_PEERID));\n+\n+        NodeOptions nodeOptions = this.initNodeOptions(config);\n+        nodeOptions.setFsm(this.fsm);\n+        String raftLogPath = config.get(CoreOptions.RAFT_LOG_PATH);\n+        String logUri = Paths.get(raftLogPath, \"log\", storePath).toString();\n+        FileUtils.forceMkdir(new File(logUri));\n+        nodeOptions.setLogUri(logUri);\n+        String metaUri = Paths.get(raftLogPath, \"raft_meta\", storePath)\n+                              .toString();\n+        FileUtils.forceMkdir(new File(metaUri));\n+        nodeOptions.setRaftMetaUri(metaUri);\n+        String snapshotUri = Paths.get(raftLogPath, \"snapshot\", storePath)\n+                                  .toString();\n+        FileUtils.forceMkdir(new File(snapshotUri));\n+        // TODO\uff1a\u4e3a\u65b9\u4fbf\u8c03\u8bd5\uff0c\u6682\u65f6\u5173\u95ed\u5feb\u7167\u529f\u80fd\n+        snapshotUri = null;\n+        nodeOptions.setSnapshotUri(snapshotUri);\n+\n+        // \u8fd9\u91cc\u8ba9 raft RPC \u548c\u4e1a\u52a1 RPC \u4f7f\u7528\u540c\u4e00\u4e2a RPC server, \u901a\u5e38\u4e5f\u53ef\u4ee5\u5206\u5f00\n+        RpcServer rpcServer = component.rpcServer();\n+        // \u521d\u59cb\u5316 raft group \u670d\u52a1\u6846\u67b6\n+        RaftGroupService raftGroupService;\n+        raftGroupService = new RaftGroupService(groupId, serverId, nodeOptions,\n+                                                rpcServer, true);\n+        // \u542f\u52a8\n+        return raftGroupService.start(false);\n+    }\n+\n+    public NodeOptions initNodeOptions(HugeConfig config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d29a3a923a3a00810f9013584783a8bdcd14a0"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAyNzgzOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0MzozM1rOGgP2dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0MzozM1rOGgP2dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NzMxNw==", "bodyText": "set private", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r436467317", "createdAt": "2020-06-08T05:43:33Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+\n+import com.alipay.sofa.jraft.Node;\n+import com.alipay.sofa.jraft.RaftGroupService;\n+import com.alipay.sofa.jraft.StateMachine;\n+import com.alipay.sofa.jraft.conf.Configuration;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.alipay.sofa.jraft.entity.Task;\n+import com.alipay.sofa.jraft.option.NodeOptions;\n+import com.alipay.sofa.jraft.rpc.RpcServer;\n+import com.baidu.hugegraph.backend.BackendException;\n+import com.baidu.hugegraph.backend.store.BackendStore;\n+import com.baidu.hugegraph.config.CoreOptions;\n+import com.baidu.hugegraph.config.HugeConfig;\n+import com.baidu.hugegraph.util.Log;\n+\n+public class RaftNode {\n+\n+    private static final Logger LOG = Log.logger(RaftNode.class);\n+\n+    private final StateMachine fsm;\n+    private final Node node;\n+\n+    public RaftNode(BackendStore store, RaftSharedComponent component) {\n+        this.fsm = new BackendStoreStateMachine(store);\n+        try {\n+            this.node = this.initRaftNode(store, component);\n+        } catch (IOException e) {\n+            throw new BackendException(\"Failed to init raft node\", e);\n+        }\n+    }\n+\n+    public Node node() {\n+        return this.node;\n+    }\n+\n+    public Node initRaftNode(BackendStore store, RaftSharedComponent component)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d29a3a923a3a00810f9013584783a8bdcd14a0"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAyODM2OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedComponent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0Mzo1N1rOGgP2xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjo0MDo1MVrOGi4y9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NzM5Ng==", "bodyText": "set protected", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r436467396", "createdAt": "2020-06-08T05:43:57Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedComponent.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.alipay.sofa.jraft.rpc.RaftRpcServerFactory;\n+import com.alipay.sofa.jraft.rpc.RpcServer;\n+import com.alipay.sofa.jraft.util.NamedThreadFactory;\n+import com.alipay.sofa.jraft.util.ThreadPoolUtil;\n+import com.alipay.sofa.jraft.util.Utils;\n+import com.baidu.hugegraph.config.CoreOptions;\n+import com.baidu.hugegraph.config.HugeConfig;\n+\n+public final class RaftSharedComponent {\n+\n+    private final HugeConfig config;\n+    private final RpcServer rpcServer;\n+    private final Executor readIndexExecutor;\n+\n+    public RaftSharedComponent(HugeConfig config) {\n+        this.config = config;\n+        this.rpcServer = this.initAndStartRpcServer();\n+        this.readIndexExecutor = this.initReadIndexExecutor();\n+    }\n+\n+    public HugeConfig config() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d29a3a923a3a00810f9013584783a8bdcd14a0"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzNTMxNw==", "bodyText": "use public keep the same with others", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r439235317", "createdAt": "2020-06-12T06:40:51Z", "author": {"login": "Linary"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedComponent.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.alipay.sofa.jraft.rpc.RaftRpcServerFactory;\n+import com.alipay.sofa.jraft.rpc.RpcServer;\n+import com.alipay.sofa.jraft.util.NamedThreadFactory;\n+import com.alipay.sofa.jraft.util.ThreadPoolUtil;\n+import com.alipay.sofa.jraft.util.Utils;\n+import com.baidu.hugegraph.config.CoreOptions;\n+import com.baidu.hugegraph.config.HugeConfig;\n+\n+public final class RaftSharedComponent {\n+\n+    private final HugeConfig config;\n+    private final RpcServer rpcServer;\n+    private final Executor readIndexExecutor;\n+\n+    public RaftSharedComponent(HugeConfig config) {\n+        this.config = config;\n+        this.rpcServer = this.initAndStartRpcServer();\n+        this.readIndexExecutor = this.initReadIndexExecutor();\n+    }\n+\n+    public HugeConfig config() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NzM5Ng=="}, "originalCommit": {"oid": "20d29a3a923a3a00810f9013584783a8bdcd14a0"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAyOTgyOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedComponent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0NDo1OVrOGgP3yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0NDo1OVrOGgP3yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NzY1Ng==", "bodyText": "delete this method", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r436467656", "createdAt": "2020-06-08T05:44:59Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedComponent.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.alipay.sofa.jraft.rpc.RaftRpcServerFactory;\n+import com.alipay.sofa.jraft.rpc.RpcServer;\n+import com.alipay.sofa.jraft.util.NamedThreadFactory;\n+import com.alipay.sofa.jraft.util.ThreadPoolUtil;\n+import com.alipay.sofa.jraft.util.Utils;\n+import com.baidu.hugegraph.config.CoreOptions;\n+import com.baidu.hugegraph.config.HugeConfig;\n+\n+public final class RaftSharedComponent {\n+\n+    private final HugeConfig config;\n+    private final RpcServer rpcServer;\n+    private final Executor readIndexExecutor;\n+\n+    public RaftSharedComponent(HugeConfig config) {\n+        this.config = config;\n+        this.rpcServer = this.initAndStartRpcServer();\n+        this.readIndexExecutor = this.initReadIndexExecutor();\n+    }\n+\n+    public HugeConfig config() {\n+        return this.config;\n+    }\n+\n+    public RpcServer rpcServer() {\n+        return this.rpcServer;\n+    }\n+\n+    public Executor readIndexExecutor() {\n+        return this.readIndexExecutor;\n+    }\n+\n+    private RpcServer initAndStartRpcServer() {\n+        PeerId serverId = new PeerId();\n+        serverId.parse(this.config.get(CoreOptions.RAFT_PEERID));\n+        return RaftRpcServerFactory.createAndStartRaftRpcServer(\n+                                    serverId.getEndpoint());\n+    }\n+\n+    private Executor initReadIndexExecutor() {\n+        return createReadIndexExecutor(Math.max(Utils.cpus() << 2, 4));\n+    }\n+\n+    private static ExecutorService createReadIndexExecutor(final int coreThreads) {\n+        final int maxThreads = coreThreads << 2;\n+        final RejectedExecutionHandler handler = new ThreadPoolExecutor.AbortPolicy();\n+        return newPool(coreThreads, maxThreads, \"kvstore-read-index-callback\", handler);\n+    }\n+\n+    private static ExecutorService newPool(final int coreThreads, final int maxThreads,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d29a3a923a3a00810f9013584783a8bdcd14a0"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAzMDg2OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedComponent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0NTozMFrOGgP4aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0NTozMFrOGgP4aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2NzgxNw==", "bodyText": "can remove the final for align", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r436467817", "createdAt": "2020-06-08T05:45:30Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedComponent.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.alipay.sofa.jraft.rpc.RaftRpcServerFactory;\n+import com.alipay.sofa.jraft.rpc.RpcServer;\n+import com.alipay.sofa.jraft.util.NamedThreadFactory;\n+import com.alipay.sofa.jraft.util.ThreadPoolUtil;\n+import com.alipay.sofa.jraft.util.Utils;\n+import com.baidu.hugegraph.config.CoreOptions;\n+import com.baidu.hugegraph.config.HugeConfig;\n+\n+public final class RaftSharedComponent {\n+\n+    private final HugeConfig config;\n+    private final RpcServer rpcServer;\n+    private final Executor readIndexExecutor;\n+\n+    public RaftSharedComponent(HugeConfig config) {\n+        this.config = config;\n+        this.rpcServer = this.initAndStartRpcServer();\n+        this.readIndexExecutor = this.initReadIndexExecutor();\n+    }\n+\n+    public HugeConfig config() {\n+        return this.config;\n+    }\n+\n+    public RpcServer rpcServer() {\n+        return this.rpcServer;\n+    }\n+\n+    public Executor readIndexExecutor() {\n+        return this.readIndexExecutor;\n+    }\n+\n+    private RpcServer initAndStartRpcServer() {\n+        PeerId serverId = new PeerId();\n+        serverId.parse(this.config.get(CoreOptions.RAFT_PEERID));\n+        return RaftRpcServerFactory.createAndStartRaftRpcServer(\n+                                    serverId.getEndpoint());\n+    }\n+\n+    private Executor initReadIndexExecutor() {\n+        return createReadIndexExecutor(Math.max(Utils.cpus() << 2, 4));\n+    }\n+\n+    private static ExecutorService createReadIndexExecutor(final int coreThreads) {\n+        final int maxThreads = coreThreads << 2;\n+        final RejectedExecutionHandler handler = new ThreadPoolExecutor.AbortPolicy();\n+        return newPool(coreThreads, maxThreads, \"kvstore-read-index-callback\", handler);\n+    }\n+\n+    private static ExecutorService newPool(final int coreThreads, final int maxThreads,\n+                                           final String name,\n+                                           final RejectedExecutionHandler handler) {\n+        final BlockingQueue<Runnable> defaultWorkQueue = new SynchronousQueue<>();\n+        return newPool(coreThreads, maxThreads, defaultWorkQueue, name, handler);\n+    }\n+\n+    private static ExecutorService newPool(final int coreThreads, final int maxThreads,\n+                                           final BlockingQueue<Runnable> workQueue,\n+                                           final String name,\n+                                           final RejectedExecutionHandler handler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d29a3a923a3a00810f9013584783a8bdcd14a0"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTAzMjIzOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/BackendStoreStateMachine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0NjoxOVrOGgP5Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTo0NjoxOVrOGgP5Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2ODAzNQ==", "bodyText": "pass this.store to StoreCommand", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r436468035", "createdAt": "2020-06-08T05:46:19Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/BackendStoreStateMachine.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.slf4j.Logger;\n+\n+import com.alipay.sofa.jraft.Iterator;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.core.StateMachineAdapter;\n+import com.baidu.hugegraph.backend.store.BackendStore;\n+import com.baidu.hugegraph.util.Log;\n+\n+public class BackendStoreStateMachine extends StateMachineAdapter {\n+\n+    private static final Logger LOG = Log.logger(BackendStoreStateMachine.class);\n+\n+    private final BackendStore store;\n+    private final AtomicLong leaderTerm;\n+\n+    public BackendStoreStateMachine(BackendStore store) {\n+        this.store = store;\n+        this.leaderTerm = new AtomicLong(-1);\n+    }\n+\n+    @Override\n+    public void onApply(Iterator iter) {\n+        LOG.debug(\"Node role: {}\", this.isLeader() ? \"leader\" : \"follower\");\n+        while (iter.hasNext()) {\n+            StoreCommand command;\n+            StoreClosure closure = (StoreClosure) iter.done();\n+            if (closure != null) {\n+                // Leader just take it out from the closure\n+                command = closure.command();\n+            } else {\n+                // Follower need deserializeMutation data\n+                ByteBuffer buffer = iter.getData();\n+                command = StoreCommand.fromBytes(buffer.array());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d29a3a923a3a00810f9013584783a8bdcd14a0"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzQ2NjE3OnYy", "diffSide": "RIGHT", "path": "hugegraph-rocksdb/src/main/java/com/baidu/hugegraph/backend/store/rocksdb/RocksDBStdSessions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjozNzozMFrOGg6sxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjoyODozMlrOGi4hxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2OTM0OQ==", "bodyText": "this.dataPath", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r437169349", "createdAt": "2020-06-09T06:37:30Z", "author": {"login": "javeme"}, "path": "hugegraph-rocksdb/src/main/java/com/baidu/hugegraph/backend/store/rocksdb/RocksDBStdSessions.java", "diffHunk": "@@ -592,6 +603,16 @@ public boolean hasChanges() {\n             return this.batch.count() > 0;\n         }\n \n+        @Override\n+        public String dataPath() {\n+            return dataPath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c71ac822c3d48b6954e1cbebd60de2805ccd295"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMDkxNw==", "bodyText": "Here is in StdSession class, it's a inner class", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r439230917", "createdAt": "2020-06-12T06:28:32Z", "author": {"login": "Linary"}, "path": "hugegraph-rocksdb/src/main/java/com/baidu/hugegraph/backend/store/rocksdb/RocksDBStdSessions.java", "diffHunk": "@@ -592,6 +603,16 @@ public boolean hasChanges() {\n             return this.batch.count() > 0;\n         }\n \n+        @Override\n+        public String dataPath() {\n+            return dataPath;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2OTM0OQ=="}, "originalCommit": {"oid": "7c71ac822c3d48b6954e1cbebd60de2805ccd295"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzQ2NjM1OnYy", "diffSide": "RIGHT", "path": "hugegraph-rocksdb/src/main/java/com/baidu/hugegraph/backend/store/rocksdb/RocksDBStdSessions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjozNzozNlrOGg6s4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjoyODo1NVrOGi4iTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2OTM3Ng==", "bodyText": "ditto", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r437169376", "createdAt": "2020-06-09T06:37:36Z", "author": {"login": "javeme"}, "path": "hugegraph-rocksdb/src/main/java/com/baidu/hugegraph/backend/store/rocksdb/RocksDBStdSessions.java", "diffHunk": "@@ -592,6 +603,16 @@ public boolean hasChanges() {\n             return this.batch.count() > 0;\n         }\n \n+        @Override\n+        public String dataPath() {\n+            return dataPath;\n+        }\n+\n+        @Override\n+        public String walPath() {\n+            return walPath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c71ac822c3d48b6954e1cbebd60de2805ccd295"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMTA1NA==", "bodyText": "Here is in StdSession class, it's a inner class", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r439231054", "createdAt": "2020-06-12T06:28:55Z", "author": {"login": "Linary"}, "path": "hugegraph-rocksdb/src/main/java/com/baidu/hugegraph/backend/store/rocksdb/RocksDBStdSessions.java", "diffHunk": "@@ -592,6 +603,16 @@ public boolean hasChanges() {\n             return this.batch.count() > 0;\n         }\n \n+        @Override\n+        public String dataPath() {\n+            return dataPath;\n+        }\n+\n+        @Override\n+        public String walPath() {\n+            return walPath;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2OTM3Ng=="}, "originalCommit": {"oid": "7c71ac822c3d48b6954e1cbebd60de2805ccd295"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjM3NjEyOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreStateMachine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNzo1NDowNFrOGiSdcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjo0Mjo1MFrOGi41rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYwNzIxOQ==", "bodyText": "address history comments", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r438607219", "createdAt": "2020-06-11T07:54:04Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreStateMachine.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.slf4j.Logger;\n+\n+import com.alipay.sofa.jraft.Closure;\n+import com.alipay.sofa.jraft.Iterator;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.core.StateMachineAdapter;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotReader;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotWriter;\n+import com.baidu.hugegraph.backend.store.BackendStore;\n+import com.baidu.hugegraph.util.Log;\n+\n+public class StoreStateMachine extends StateMachineAdapter {\n+\n+    private static final Logger LOG = Log.logger(StoreStateMachine.class);\n+\n+    private final BackendStore store;\n+    private final RaftSharedContext context;\n+    private final StoreSnapshotFile snapshotFile;\n+    private final AtomicLong leaderTerm;\n+\n+    public StoreStateMachine(BackendStore store, RaftSharedContext context) {\n+        this.store = store;\n+        this.context = context;\n+        this.snapshotFile = new StoreSnapshotFile();\n+        this.leaderTerm = new AtomicLong(-1);\n+    }\n+\n+    @Override\n+    public void onApply(Iterator iter) {\n+        LOG.debug(\"Node role: {}\", this.isLeader() ? \"leader\" : \"follower\");\n+        while (iter.hasNext()) {\n+            StoreCommand command;\n+            StoreClosure closure = (StoreClosure) iter.done();\n+            if (closure != null) {\n+                // Leader just take it out from the closure\n+                command = closure.command();\n+            } else {\n+                // Follower need deserializeMutation data\n+                ByteBuffer buffer = iter.getData();\n+                command = StoreCommand.fromBytes(buffer.array());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e815e8fcf816c7538644b96b82c1478e557028"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzNjAxMg==", "bodyText": "handled", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r439236012", "createdAt": "2020-06-12T06:42:50Z", "author": {"login": "Linary"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreStateMachine.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.backend.store.raft;\n+\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.slf4j.Logger;\n+\n+import com.alipay.sofa.jraft.Closure;\n+import com.alipay.sofa.jraft.Iterator;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.core.StateMachineAdapter;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotReader;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotWriter;\n+import com.baidu.hugegraph.backend.store.BackendStore;\n+import com.baidu.hugegraph.util.Log;\n+\n+public class StoreStateMachine extends StateMachineAdapter {\n+\n+    private static final Logger LOG = Log.logger(StoreStateMachine.class);\n+\n+    private final BackendStore store;\n+    private final RaftSharedContext context;\n+    private final StoreSnapshotFile snapshotFile;\n+    private final AtomicLong leaderTerm;\n+\n+    public StoreStateMachine(BackendStore store, RaftSharedContext context) {\n+        this.store = store;\n+        this.context = context;\n+        this.snapshotFile = new StoreSnapshotFile();\n+        this.leaderTerm = new AtomicLong(-1);\n+    }\n+\n+    @Override\n+    public void onApply(Iterator iter) {\n+        LOG.debug(\"Node role: {}\", this.isLeader() ? \"leader\" : \"follower\");\n+        while (iter.hasNext()) {\n+            StoreCommand command;\n+            StoreClosure closure = (StoreClosure) iter.done();\n+            if (closure != null) {\n+                // Leader just take it out from the closure\n+                command = closure.command();\n+            } else {\n+                // Follower need deserializeMutation data\n+                ByteBuffer buffer = iter.getData();\n+                command = StoreCommand.fromBytes(buffer.array());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYwNzIxOQ=="}, "originalCommit": {"oid": "59e815e8fcf816c7538644b96b82c1478e557028"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDgyODg2OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo1NzoyN1rOGnLR1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo1NzoyN1rOGnLR1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczMjQzNg==", "bodyText": "set static and rename to MutationBatch", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r443732436", "createdAt": "2020-06-22T17:57:27Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java", "diffHunk": "@@ -40,10 +42,38 @@\n \n     private final BackendStore store;\n     private final RaftSharedContext context;\n+    private final ThreadLocal<MutateBatch> threadLocalBatch;\n+\n+    private class MutateBatch {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04e3bbddc409189a68d993acd344399ad525672a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDgzNjE3OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo1OTo0NlrOGnLWrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo1OTo0NlrOGnLWrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczMzY3Nw==", "bodyText": "add try-finally for clear", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r443733677", "createdAt": "2020-06-22T17:59:46Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftBackendStore.java", "diffHunk": "@@ -179,17 +208,19 @@ public Number queryNumber(Query query) {\n \n     @Override\n     public void beginTx() {\n-        this.submitAndWait(StoreCommand.BEGIN_TX);\n     }\n \n     @Override\n     public void commitTx() {\n-        this.submitAndWait(StoreCommand.COMMIT_TX);\n+        MutateBatch batch = this.getOrNewBatch();\n+        byte[] bytes = StoreSerializer.writeMutations(batch.mutations);\n+        this.submitAndWait(StoreAction.COMMIT_TX, bytes);\n+        batch.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04e3bbddc409189a68d993acd344399ad525672a"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDg0NzY0OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreStateMachine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODowMzoxOVrOGnLeJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODowMzoxOVrOGnLeJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczNTU4OA==", "bodyText": "call this.store.beginTx() before mutate()", "url": "https://github.com/hugegraph/hugegraph/pull/1020#discussion_r443735588", "createdAt": "2020-06-22T18:03:19Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreStateMachine.java", "diffHunk": "@@ -48,50 +49,51 @@\n     private final RaftSharedContext context;\n     private final StoreSnapshotFile snapshotFile;\n     private final AtomicLong leaderTerm;\n-    private final Map<Byte, Function<BytesBuffer, Object>> funcs;\n+    private final Map<StoreAction, Function<BytesBuffer, Object>> funcs;\n \n     public StoreStateMachine(BackendStore store, RaftSharedContext context) {\n-        this.nodeId = nodeId;\n         this.store = store;\n         this.context = context;\n         this.snapshotFile = new StoreSnapshotFile();\n         this.leaderTerm = new AtomicLong(-1);\n-        this.funcs = new ConcurrentHashMap<>();\n+        this.funcs = new EnumMap<>(StoreAction.class);\n         this.registerCommands();\n     }\n \n     private void registerCommands() {\n         // StoreCommand.register(StoreCommand.INIT, this.store::init);\n-        this.register(StoreCommand.TRUNCATE, this.store::truncate);\n-        this.register(StoreCommand.BEGIN_TX, this.store::beginTx);\n-        this.register(StoreCommand.COMMIT_TX, this.store::commitTx);\n-        this.register(StoreCommand.ROLLBACK_TX, this.store::rollbackTx);\n+        this.register(StoreAction.TRUNCATE, this.store::truncate);\n         // clear\n-        this.register(StoreCommand.CLEAR, buffer -> {\n+        this.register(StoreAction.CLEAR, buffer -> {\n             boolean clearSpace = buffer.read() > 0;\n             this.store.clear(clearSpace);\n             return null;\n         });\n-        // mutate\n-        this.register(StoreCommand.MUTATE, buffer -> {\n-            BackendMutation m = StoreSerializer.deserializeMutation(buffer);\n-            this.store.mutate(m);\n+        this.register(StoreAction.BEGIN_TX, this.store::beginTx);\n+        this.register(StoreAction.COMMIT_TX, buffer -> {\n+            List<BackendMutation> ms = StoreSerializer.readMutations(buffer);\n+            for (BackendMutation mutation : ms) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04e3bbddc409189a68d993acd344399ad525672a"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1632, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}