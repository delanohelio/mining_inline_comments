{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NDg5NTQz", "number": 1057, "title": "fix query adjacent by filtering conditions with limit", "bodyText": "fix #1052\nChange-Id: I11075c56e89a57cbf8e599a2e5fa6c0122663f6d", "createdAt": "2020-06-24T20:44:31Z", "url": "https://github.com/hugegraph/hugegraph/pull/1057", "merged": true, "mergeCommit": {"oid": "3a7316dcc803b521a08096249abeadf7ca017fcd"}, "closed": true, "closedAt": "2020-07-02T03:11:50Z", "author": {"login": "javeme"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvmormgFqTQzODc0ODc4Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcw2BEIgFqTQ0MTMyMDc1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzQ4Nzgz", "url": "https://github.com/hugegraph/hugegraph/pull/1057#pullrequestreview-438748783", "createdAt": "2020-06-28T06:37:21Z", "commit": {"oid": "7df4b74d4533c4edaa1e182e095edcbe1b3d1245"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjozNzoyMlrOGp6z5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjo0MDozMFrOGp60-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODM1Nw==", "bodyText": "first batch only loop 1 time", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r446608357", "createdAt": "2020-06-28T06:37:22Z", "author": {"login": "houzhizhen"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java", "diffHunk": "@@ -1932,6 +1932,430 @@ public void testQueryEdgesWithLimitOnMultiLevel() {\n         Assert.assertEquals(1, edges.size());\n     }\n \n+    @Test\n+    public void testQueryEdgesWithLimitOnMultiLevelAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        graph.tx().commit();\n+\n+        // outE\n+        List<Edge> edges = graph.traversal().V()\n+                                .outE().has(\"score\", 0)\n+                                .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // inE\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // bothE\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesAdjacentVerticesWithLimitAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+        Vertex guido = graph.addVertex(T.label, \"author\", \"id\", 2,\n+                                       \"name\", \"Guido van Rossum\", \"age\", 62,\n+                                       \"lived\", \"California\");\n+        Vertex marko = graph.addVertex(T.label, \"author\", \"id\", 3,\n+                                       \"name\", \"Marko\", \"age\", 61,\n+                                       \"lived\", \"California\");\n+        guido.addEdge(\"know\", james);\n+        guido.addEdge(\"know\", marko);\n+        marko.addEdge(\"know\", james);\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+\n+            marko.addEdge(\"authored\", java, \"score\", i % 2);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        Vertex jeff = graph.addVertex(T.label, \"person\", \"name\", \"Jeff\",\n+                                      \"city\", \"Beijing\", \"age\", 62);\n+        Vertex sean = graph.addVertex(T.label, \"person\", \"name\", \"Sean\",\n+                                      \"city\", \"Beijing\", \"age\", 61);\n+\n+        louise.addEdge(\"friend\", jeff);\n+        louise.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"follow\", marko);\n+        sean.addEdge(\"follow\", marko);\n+\n+        graph.tx().commit();\n+\n+        // out\n+        List<Vertex> vertices = graph.traversal().V()\n+                                     .out().has(\"age\", 62)\n+                                     .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(6).toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(12).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(2).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V(louise, james)\n+                        .out(\"look\", \"write\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(9, vertices.size()); // two look edges not matched\n+\n+        // in\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(4, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(5).toList();\n+        Assert.assertEquals(4, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        // both\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(louise));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(sean));\n+        Assert.assertTrue(vertices.contains(marko));\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesWithLimitOnSuperVertexAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        int txCap = this.superNodeSize();\n+        for (int i = 0; i < txCap; i++) {\n+            Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                           \"name\", \"James Gosling\", \"age\", 62,\n+                                           \"lived\", \"Canadian\");\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+            if (i % TX_BATCH == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df4b74d4533c4edaa1e182e095edcbe1b3d1245"}, "originalPosition": 416}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODQ0OQ==", "bodyText": "add duplicate vertex in every loop?", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r446608449", "createdAt": "2020-06-28T06:38:28Z", "author": {"login": "houzhizhen"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java", "diffHunk": "@@ -1932,6 +1932,430 @@ public void testQueryEdgesWithLimitOnMultiLevel() {\n         Assert.assertEquals(1, edges.size());\n     }\n \n+    @Test\n+    public void testQueryEdgesWithLimitOnMultiLevelAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        graph.tx().commit();\n+\n+        // outE\n+        List<Edge> edges = graph.traversal().V()\n+                                .outE().has(\"score\", 0)\n+                                .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // inE\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // bothE\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesAdjacentVerticesWithLimitAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+        Vertex guido = graph.addVertex(T.label, \"author\", \"id\", 2,\n+                                       \"name\", \"Guido van Rossum\", \"age\", 62,\n+                                       \"lived\", \"California\");\n+        Vertex marko = graph.addVertex(T.label, \"author\", \"id\", 3,\n+                                       \"name\", \"Marko\", \"age\", 61,\n+                                       \"lived\", \"California\");\n+        guido.addEdge(\"know\", james);\n+        guido.addEdge(\"know\", marko);\n+        marko.addEdge(\"know\", james);\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+\n+            marko.addEdge(\"authored\", java, \"score\", i % 2);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        Vertex jeff = graph.addVertex(T.label, \"person\", \"name\", \"Jeff\",\n+                                      \"city\", \"Beijing\", \"age\", 62);\n+        Vertex sean = graph.addVertex(T.label, \"person\", \"name\", \"Sean\",\n+                                      \"city\", \"Beijing\", \"age\", 61);\n+\n+        louise.addEdge(\"friend\", jeff);\n+        louise.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"follow\", marko);\n+        sean.addEdge(\"follow\", marko);\n+\n+        graph.tx().commit();\n+\n+        // out\n+        List<Vertex> vertices = graph.traversal().V()\n+                                     .out().has(\"age\", 62)\n+                                     .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(6).toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(12).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(2).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V(louise, james)\n+                        .out(\"look\", \"write\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(9, vertices.size()); // two look edges not matched\n+\n+        // in\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(4, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(5).toList();\n+        Assert.assertEquals(4, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        // both\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(louise));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(sean));\n+        Assert.assertTrue(vertices.contains(marko));\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesWithLimitOnSuperVertexAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        int txCap = this.superNodeSize();\n+        for (int i = 0; i < txCap; i++) {\n+            Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df4b74d4533c4edaa1e182e095edcbe1b3d1245"}, "originalPosition": 410}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODYzMw==", "bodyText": "what about limit 0?", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r446608633", "createdAt": "2020-06-28T06:40:30Z", "author": {"login": "houzhizhen"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java", "diffHunk": "@@ -1932,6 +1932,430 @@ public void testQueryEdgesWithLimitOnMultiLevel() {\n         Assert.assertEquals(1, edges.size());\n     }\n \n+    @Test\n+    public void testQueryEdgesWithLimitOnMultiLevelAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        graph.tx().commit();\n+\n+        // outE\n+        List<Edge> edges = graph.traversal().V()\n+                                .outE().has(\"score\", 0)\n+                                .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // inE\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // bothE\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesAdjacentVerticesWithLimitAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+        Vertex guido = graph.addVertex(T.label, \"author\", \"id\", 2,\n+                                       \"name\", \"Guido van Rossum\", \"age\", 62,\n+                                       \"lived\", \"California\");\n+        Vertex marko = graph.addVertex(T.label, \"author\", \"id\", 3,\n+                                       \"name\", \"Marko\", \"age\", 61,\n+                                       \"lived\", \"California\");\n+        guido.addEdge(\"know\", james);\n+        guido.addEdge(\"know\", marko);\n+        marko.addEdge(\"know\", james);\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+\n+            marko.addEdge(\"authored\", java, \"score\", i % 2);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        Vertex jeff = graph.addVertex(T.label, \"person\", \"name\", \"Jeff\",\n+                                      \"city\", \"Beijing\", \"age\", 62);\n+        Vertex sean = graph.addVertex(T.label, \"person\", \"name\", \"Sean\",\n+                                      \"city\", \"Beijing\", \"age\", 61);\n+\n+        louise.addEdge(\"friend\", jeff);\n+        louise.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"follow\", marko);\n+        sean.addEdge(\"follow\", marko);\n+\n+        graph.tx().commit();\n+\n+        // out\n+        List<Vertex> vertices = graph.traversal().V()\n+                                     .out().has(\"age\", 62)\n+                                     .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(6).toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(12).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(2).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V(louise, james)\n+                        .out(\"look\", \"write\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(9, vertices.size()); // two look edges not matched\n+\n+        // in\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(4, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(5).toList();\n+        Assert.assertEquals(4, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        // both\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(louise));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(sean));\n+        Assert.assertTrue(vertices.contains(marko));\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df4b74d4533c4edaa1e182e095edcbe1b3d1245"}, "originalPosition": 401}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NjM2MDcw", "url": "https://github.com/hugegraph/hugegraph/pull/1057#pullrequestreview-439636070", "createdAt": "2020-06-30T03:01:29Z", "commit": {"oid": "7ce59e20548c903db9c9e893f15ad7b7cc0d093c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMzowMTozMFrOGqp4Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMzowMjo1NFrOGqp5xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3OTQ4Ng==", "bodyText": "if not use 0xff at all, prefer delete it and no need to assert", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r447379486", "createdAt": "2020-06-30T03:01:30Z", "author": {"login": "zhoney"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/serializer/BytesBuffer.java", "diffHunk": "@@ -332,14 +333,27 @@ public String readString() {\n         return StringEncoding.decode(this.readBytes());\n     }\n \n-    public BytesBuffer writeStringWithEnding(String val) {\n-        if (!val.isEmpty()) {\n-            byte[] bytes = StringEncoding.encode(val);\n-            // assert '0xff' not exist in string-id-with-ending (utf8 bytes)\n-            assert !Bytes.contains(bytes, STRING_ENDING_BYTE);\n+    public BytesBuffer writeStringWithEnding(String value) {\n+        if (!value.isEmpty()) {\n+            byte[] bytes = StringEncoding.encode(value);\n+            /*\n+             * assert '0x00'/'0xFF' not exist in string index id\n+             * NOTE:\n+             *   0x00 is NULL in UTF8(or ASCII) bytes\n+             *   0xFF is not a valid byte in UTF8 bytes\n+             */\n+            assert !Bytes.contains(bytes, STRING_ENDING_BYTE_FF) :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ce59e20548c903db9c9e893f15ad7b7cc0d093c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3OTg1OQ==", "bodyText": "INDEX_EMPTY_SYM -> INDEX_SYM_EMPTY", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r447379859", "createdAt": "2020-06-30T03:02:46Z", "author": {"login": "zhoney"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java", "diffHunk": "@@ -1066,6 +1045,9 @@ private static ConditionQuery constructQuery(ConditionQuery query,\n                              indexType, indexFields);\n                 Object fieldValue = query.userpropValue(indexFields.get(0));\n                 assert fieldValue instanceof String;\n+                // Escape empty String to INDEX_EMPTY_SYM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ce59e20548c903db9c9e893f15ad7b7cc0d093c"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3OTkwOA==", "bodyText": "ditto", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r447379908", "createdAt": "2020-06-30T03:02:54Z", "author": {"login": "zhoney"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java", "diffHunk": "@@ -1074,11 +1056,9 @@ private static ConditionQuery constructQuery(ConditionQuery query,\n             case SECONDARY:\n                 List<Id> joinedKeys = indexFields.subList(0, queryKeys.size());\n                 String joinedValues = query.userpropValuesString(joinedKeys);\n+                // Escape empty String to INDEX_EMPTY_SYM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ce59e20548c903db9c9e893f15ad7b7cc0d093c"}, "originalPosition": 98}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ce59e20548c903db9c9e893f15ad7b7cc0d093c", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/7ce59e20548c903db9c9e893f15ad7b7cc0d093c", "committedDate": "2020-06-29T19:01:32Z", "message": "fix invalid byte of postgre utf8 encoding\n\nChange-Id: I63f8c56463314fa3a14b565f2619154951948b45"}, "afterCommit": {"oid": "956730cf418fb013cae6fb161362628dbbabaf81", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/956730cf418fb013cae6fb161362628dbbabaf81", "committedDate": "2020-06-30T08:04:24Z", "message": "fix invalid byte of postgre utf8 encoding\n\nChange-Id: I63f8c56463314fa3a14b565f2619154951948b45"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a54a985ff7ba7b300386b188034eac0a0ad45e4c", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/a54a985ff7ba7b300386b188034eac0a0ad45e4c", "committedDate": "2020-06-30T11:37:20Z", "message": "improve comments\n\nChange-Id: Iba78468738f25f1c0bc40817f56c9597e66d165a"}, "afterCommit": {"oid": "a9a371bb180a2f701e48f8804ead116c06461d44", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/a9a371bb180a2f701e48f8804ead116c06461d44", "committedDate": "2020-06-30T11:40:12Z", "message": "improve comments\n\nChange-Id: Iba78468738f25f1c0bc40817f56c9597e66d165a"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTI1MjI1", "url": "https://github.com/hugegraph/hugegraph/pull/1057#pullrequestreview-440525225", "createdAt": "2020-07-01T03:39:42Z", "commit": {"oid": "a9a371bb180a2f701e48f8804ead116c06461d44"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTg0MDc3", "url": "https://github.com/hugegraph/hugegraph/pull/1057#pullrequestreview-440584077", "createdAt": "2020-07-01T06:39:59Z", "commit": {"oid": "a9a371bb180a2f701e48f8804ead116c06461d44"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjozOTo1OVrOGrYtvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjo0ODoxMVrOGrY7jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0Njg3OA==", "bodyText": "add a comment later", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r448146878", "createdAt": "2020-07-01T06:39:59Z", "author": {"login": "Linary"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphTransaction.java", "diffHunk": "@@ -1189,7 +1195,9 @@ public static boolean matchEdgeSortKeys(ConditionQuery query,\n         for (int i = sortKeys.size(); i > 0; i--) {\n             List<Id> subFields = sortKeys.subList(0, i);\n             if (queryKeys.containsAll(subFields)) {\n-                return true;\n+                if (queryKeys.size() == subFields.size() || !matchAll) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a371bb180a2f701e48f8804ead116c06461d44"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MDQxNQ==", "bodyText": "suggest rename to partialMatchEdgeSortKeys", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r448150415", "createdAt": "2020-07-01T06:48:11Z", "author": {"login": "Linary"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/traversal/optimize/HugeVertexStep.java", "diffHunk": "@@ -124,9 +124,15 @@ public HugeVertexStep(final VertexStep<E> originVertexStep) {\n         // Query by sort-keys\n         if (withEdgeCond && edgeLabels.length > 0) {\n             TraversalUtil.fillConditionQuery(conditions, query, graph);\n-            if (!GraphTransaction.matchEdgeSortKeys(query, graph)) {\n+            if (!GraphTransaction.matchEdgeSortKeys(query, false, graph)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a371bb180a2f701e48f8804ead116c06461d44"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e49b96cdc6b7e293ef8fd58ca88544544d1cfa8c", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/e49b96cdc6b7e293ef8fd58ca88544544d1cfa8c", "committedDate": "2020-07-01T08:11:49Z", "message": "fix query adjacent by filtering conditions with limit\n\nfix #1052\n\nChange-Id: I11075c56e89a57cbf8e599a2e5fa6c0122663f6d"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96d684a8eaf1161591bec70d32a482c8a374131a", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/96d684a8eaf1161591bec70d32a482c8a374131a", "committedDate": "2020-07-01T08:11:49Z", "message": "improve test for: out().limit(m).has(k,v).limit(n)\n\nChange-Id: I34de752d7ba8a0eede3d98d29a8a841803f1fc80"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8448e38383f92dff1be4fa13aade91f3142338a9", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/8448e38383f92dff1be4fa13aade91f3142338a9", "committedDate": "2020-07-01T08:11:49Z", "message": "uniform edges order with sortkey\n\nChange-Id: Iba776e18809f77f592283e664e93689f53ab8719"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9e787ef8a3d6c054e2b0a34bbcf4a58e341cb3c", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/f9e787ef8a3d6c054e2b0a34bbcf4a58e341cb3c", "committedDate": "2020-07-01T08:11:49Z", "message": "fix IdUtil.writeBinString test\n\nChange-Id: I36096d6723e8ddf121abb1684b6f5b93e2698c78"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca4f343239d14d6864870c04f5d217d904de0cee", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/ca4f343239d14d6864870c04f5d217d904de0cee", "committedDate": "2020-07-01T08:11:49Z", "message": "fix invalid byte of postgre utf8 encoding\n\nChange-Id: I63f8c56463314fa3a14b565f2619154951948b45"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fefe769247bc8c3487536f7dfa3bdeb8b8cbce01", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/fefe769247bc8c3487536f7dfa3bdeb8b8cbce01", "committedDate": "2020-07-01T08:11:49Z", "message": "throw BackendException instead HugeException in backend store\n\nChange-Id: If28ca2dca496821eb36a1fc678b1827b4aa08588"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "667fb02de9c3602c303693df915937d16074029c", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/667fb02de9c3602c303693df915937d16074029c", "committedDate": "2020-07-01T08:11:49Z", "message": "improve comments\n\nChange-Id: Iba78468738f25f1c0bc40817f56c9597e66d165a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41816bab80398d128312edaa07b799d06637745e", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/41816bab80398d128312edaa07b799d06637745e", "committedDate": "2020-07-01T08:12:21Z", "message": "improve matchEdgeSortKeys\n\nChange-Id: I81bcb8efb41597860416f92f53eb8ca2b769cd5d"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b68f90e048a4319fb4ade1d1c30d3de3bc53e48", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/7b68f90e048a4319fb4ade1d1c30d3de3bc53e48", "committedDate": "2020-07-01T12:03:37Z", "message": "fix fillFilterBySortKeys\n\nChange-Id: I57af518e3dc79b2afe4f82174c130e5a3a9ffc7a"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9a371bb180a2f701e48f8804ead116c06461d44", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/a9a371bb180a2f701e48f8804ead116c06461d44", "committedDate": "2020-06-30T11:40:12Z", "message": "improve comments\n\nChange-Id: Iba78468738f25f1c0bc40817f56c9597e66d165a"}, "afterCommit": {"oid": "7b68f90e048a4319fb4ade1d1c30d3de3bc53e48", "author": {"user": {"login": "javeme", "name": "Jermy Li"}}, "url": "https://github.com/hugegraph/hugegraph/commit/7b68f90e048a4319fb4ade1d1c30d3de3bc53e48", "committedDate": "2020-07-01T12:03:37Z", "message": "fix fillFilterBySortKeys\n\nChange-Id: I57af518e3dc79b2afe4f82174c130e5a3a9ffc7a"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzE2MTkz", "url": "https://github.com/hugegraph/hugegraph/pull/1057#pullrequestreview-441316193", "createdAt": "2020-07-02T02:53:56Z", "commit": {"oid": "7b68f90e048a4319fb4ade1d1c30d3de3bc53e48"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzIwNzU1", "url": "https://github.com/hugegraph/hugegraph/pull/1057#pullrequestreview-441320755", "createdAt": "2020-07-02T03:10:29Z", "commit": {"oid": "7b68f90e048a4319fb4ade1d1c30d3de3bc53e48"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2463, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}