{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NDg5NTQz", "number": 1057, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjozNzoyMlrOEJalVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjo0ODoxMVrOEKYkdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzA4MTgxOnYy", "diffSide": "RIGHT", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjozNzoyMlrOGp6z5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNzowMTowNlrOGp68aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODM1Nw==", "bodyText": "first batch only loop 1 time", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r446608357", "createdAt": "2020-06-28T06:37:22Z", "author": {"login": "houzhizhen"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java", "diffHunk": "@@ -1932,6 +1932,430 @@ public void testQueryEdgesWithLimitOnMultiLevel() {\n         Assert.assertEquals(1, edges.size());\n     }\n \n+    @Test\n+    public void testQueryEdgesWithLimitOnMultiLevelAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        graph.tx().commit();\n+\n+        // outE\n+        List<Edge> edges = graph.traversal().V()\n+                                .outE().has(\"score\", 0)\n+                                .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // inE\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // bothE\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesAdjacentVerticesWithLimitAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+        Vertex guido = graph.addVertex(T.label, \"author\", \"id\", 2,\n+                                       \"name\", \"Guido van Rossum\", \"age\", 62,\n+                                       \"lived\", \"California\");\n+        Vertex marko = graph.addVertex(T.label, \"author\", \"id\", 3,\n+                                       \"name\", \"Marko\", \"age\", 61,\n+                                       \"lived\", \"California\");\n+        guido.addEdge(\"know\", james);\n+        guido.addEdge(\"know\", marko);\n+        marko.addEdge(\"know\", james);\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+\n+            marko.addEdge(\"authored\", java, \"score\", i % 2);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        Vertex jeff = graph.addVertex(T.label, \"person\", \"name\", \"Jeff\",\n+                                      \"city\", \"Beijing\", \"age\", 62);\n+        Vertex sean = graph.addVertex(T.label, \"person\", \"name\", \"Sean\",\n+                                      \"city\", \"Beijing\", \"age\", 61);\n+\n+        louise.addEdge(\"friend\", jeff);\n+        louise.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"follow\", marko);\n+        sean.addEdge(\"follow\", marko);\n+\n+        graph.tx().commit();\n+\n+        // out\n+        List<Vertex> vertices = graph.traversal().V()\n+                                     .out().has(\"age\", 62)\n+                                     .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(6).toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(12).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(2).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V(louise, james)\n+                        .out(\"look\", \"write\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(9, vertices.size()); // two look edges not matched\n+\n+        // in\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(4, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(5).toList();\n+        Assert.assertEquals(4, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        // both\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(louise));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(sean));\n+        Assert.assertTrue(vertices.contains(marko));\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesWithLimitOnSuperVertexAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        int txCap = this.superNodeSize();\n+        for (int i = 0; i < txCap; i++) {\n+            Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                           \"name\", \"James Gosling\", \"age\", 62,\n+                                           \"lived\", \"Canadian\");\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+            if (i % TX_BATCH == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df4b74d4533c4edaa1e182e095edcbe1b3d1245"}, "originalPosition": 416}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMDUzNw==", "bodyText": "not affect logic", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r446610537", "createdAt": "2020-06-28T07:01:06Z", "author": {"login": "javeme"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java", "diffHunk": "@@ -1932,6 +1932,430 @@ public void testQueryEdgesWithLimitOnMultiLevel() {\n         Assert.assertEquals(1, edges.size());\n     }\n \n+    @Test\n+    public void testQueryEdgesWithLimitOnMultiLevelAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        graph.tx().commit();\n+\n+        // outE\n+        List<Edge> edges = graph.traversal().V()\n+                                .outE().has(\"score\", 0)\n+                                .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // inE\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // bothE\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesAdjacentVerticesWithLimitAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+        Vertex guido = graph.addVertex(T.label, \"author\", \"id\", 2,\n+                                       \"name\", \"Guido van Rossum\", \"age\", 62,\n+                                       \"lived\", \"California\");\n+        Vertex marko = graph.addVertex(T.label, \"author\", \"id\", 3,\n+                                       \"name\", \"Marko\", \"age\", 61,\n+                                       \"lived\", \"California\");\n+        guido.addEdge(\"know\", james);\n+        guido.addEdge(\"know\", marko);\n+        marko.addEdge(\"know\", james);\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+\n+            marko.addEdge(\"authored\", java, \"score\", i % 2);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        Vertex jeff = graph.addVertex(T.label, \"person\", \"name\", \"Jeff\",\n+                                      \"city\", \"Beijing\", \"age\", 62);\n+        Vertex sean = graph.addVertex(T.label, \"person\", \"name\", \"Sean\",\n+                                      \"city\", \"Beijing\", \"age\", 61);\n+\n+        louise.addEdge(\"friend\", jeff);\n+        louise.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"follow\", marko);\n+        sean.addEdge(\"follow\", marko);\n+\n+        graph.tx().commit();\n+\n+        // out\n+        List<Vertex> vertices = graph.traversal().V()\n+                                     .out().has(\"age\", 62)\n+                                     .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(6).toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(12).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(2).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V(louise, james)\n+                        .out(\"look\", \"write\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(9, vertices.size()); // two look edges not matched\n+\n+        // in\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(4, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(5).toList();\n+        Assert.assertEquals(4, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        // both\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(louise));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(sean));\n+        Assert.assertTrue(vertices.contains(marko));\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesWithLimitOnSuperVertexAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        int txCap = this.superNodeSize();\n+        for (int i = 0; i < txCap; i++) {\n+            Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                           \"name\", \"James Gosling\", \"age\", 62,\n+                                           \"lived\", \"Canadian\");\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+            if (i % TX_BATCH == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODM1Nw=="}, "originalCommit": {"oid": "7df4b74d4533c4edaa1e182e095edcbe1b3d1245"}, "originalPosition": 416}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzA4MjU3OnYy", "diffSide": "RIGHT", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjozODoyOFrOGp60QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjo0NjozNlrOGp63QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODQ0OQ==", "bodyText": "add duplicate vertex in every loop?", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r446608449", "createdAt": "2020-06-28T06:38:28Z", "author": {"login": "houzhizhen"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java", "diffHunk": "@@ -1932,6 +1932,430 @@ public void testQueryEdgesWithLimitOnMultiLevel() {\n         Assert.assertEquals(1, edges.size());\n     }\n \n+    @Test\n+    public void testQueryEdgesWithLimitOnMultiLevelAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        graph.tx().commit();\n+\n+        // outE\n+        List<Edge> edges = graph.traversal().V()\n+                                .outE().has(\"score\", 0)\n+                                .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // inE\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // bothE\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesAdjacentVerticesWithLimitAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+        Vertex guido = graph.addVertex(T.label, \"author\", \"id\", 2,\n+                                       \"name\", \"Guido van Rossum\", \"age\", 62,\n+                                       \"lived\", \"California\");\n+        Vertex marko = graph.addVertex(T.label, \"author\", \"id\", 3,\n+                                       \"name\", \"Marko\", \"age\", 61,\n+                                       \"lived\", \"California\");\n+        guido.addEdge(\"know\", james);\n+        guido.addEdge(\"know\", marko);\n+        marko.addEdge(\"know\", james);\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+\n+            marko.addEdge(\"authored\", java, \"score\", i % 2);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        Vertex jeff = graph.addVertex(T.label, \"person\", \"name\", \"Jeff\",\n+                                      \"city\", \"Beijing\", \"age\", 62);\n+        Vertex sean = graph.addVertex(T.label, \"person\", \"name\", \"Sean\",\n+                                      \"city\", \"Beijing\", \"age\", 61);\n+\n+        louise.addEdge(\"friend\", jeff);\n+        louise.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"follow\", marko);\n+        sean.addEdge(\"follow\", marko);\n+\n+        graph.tx().commit();\n+\n+        // out\n+        List<Vertex> vertices = graph.traversal().V()\n+                                     .out().has(\"age\", 62)\n+                                     .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(6).toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(12).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(2).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V(louise, james)\n+                        .out(\"look\", \"write\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(9, vertices.size()); // two look edges not matched\n+\n+        // in\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(4, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(5).toList();\n+        Assert.assertEquals(4, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        // both\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(louise));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(sean));\n+        Assert.assertTrue(vertices.contains(marko));\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesWithLimitOnSuperVertexAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        int txCap = this.superNodeSize();\n+        for (int i = 0; i < txCap; i++) {\n+            Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df4b74d4533c4edaa1e182e095edcbe1b3d1245"}, "originalPosition": 410}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwOTIxNg==", "bodyText": "yes, to improve performance to avoid reading every time", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r446609216", "createdAt": "2020-06-28T06:46:36Z", "author": {"login": "javeme"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java", "diffHunk": "@@ -1932,6 +1932,430 @@ public void testQueryEdgesWithLimitOnMultiLevel() {\n         Assert.assertEquals(1, edges.size());\n     }\n \n+    @Test\n+    public void testQueryEdgesWithLimitOnMultiLevelAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        graph.tx().commit();\n+\n+        // outE\n+        List<Edge> edges = graph.traversal().V()\n+                                .outE().has(\"score\", 0)\n+                                .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // inE\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // bothE\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesAdjacentVerticesWithLimitAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+        Vertex guido = graph.addVertex(T.label, \"author\", \"id\", 2,\n+                                       \"name\", \"Guido van Rossum\", \"age\", 62,\n+                                       \"lived\", \"California\");\n+        Vertex marko = graph.addVertex(T.label, \"author\", \"id\", 3,\n+                                       \"name\", \"Marko\", \"age\", 61,\n+                                       \"lived\", \"California\");\n+        guido.addEdge(\"know\", james);\n+        guido.addEdge(\"know\", marko);\n+        marko.addEdge(\"know\", james);\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+\n+            marko.addEdge(\"authored\", java, \"score\", i % 2);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        Vertex jeff = graph.addVertex(T.label, \"person\", \"name\", \"Jeff\",\n+                                      \"city\", \"Beijing\", \"age\", 62);\n+        Vertex sean = graph.addVertex(T.label, \"person\", \"name\", \"Sean\",\n+                                      \"city\", \"Beijing\", \"age\", 61);\n+\n+        louise.addEdge(\"friend\", jeff);\n+        louise.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"follow\", marko);\n+        sean.addEdge(\"follow\", marko);\n+\n+        graph.tx().commit();\n+\n+        // out\n+        List<Vertex> vertices = graph.traversal().V()\n+                                     .out().has(\"age\", 62)\n+                                     .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(6).toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(12).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(2).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V(louise, james)\n+                        .out(\"look\", \"write\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(9, vertices.size()); // two look edges not matched\n+\n+        // in\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(4, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(5).toList();\n+        Assert.assertEquals(4, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        // both\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(louise));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(sean));\n+        Assert.assertTrue(vertices.contains(marko));\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesWithLimitOnSuperVertexAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        int txCap = this.superNodeSize();\n+        for (int i = 0; i < txCap; i++) {\n+            Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODQ0OQ=="}, "originalCommit": {"oid": "7df4b74d4533c4edaa1e182e095edcbe1b3d1245"}, "originalPosition": 410}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzA4Mzk1OnYy", "diffSide": "RIGHT", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjo0MDozMFrOGp60-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMToxNDoxM1rOGqoDfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODYzMw==", "bodyText": "what about limit 0?", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r446608633", "createdAt": "2020-06-28T06:40:30Z", "author": {"login": "houzhizhen"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java", "diffHunk": "@@ -1932,6 +1932,430 @@ public void testQueryEdgesWithLimitOnMultiLevel() {\n         Assert.assertEquals(1, edges.size());\n     }\n \n+    @Test\n+    public void testQueryEdgesWithLimitOnMultiLevelAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        graph.tx().commit();\n+\n+        // outE\n+        List<Edge> edges = graph.traversal().V()\n+                                .outE().has(\"score\", 0)\n+                                .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // inE\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // bothE\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesAdjacentVerticesWithLimitAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+        Vertex guido = graph.addVertex(T.label, \"author\", \"id\", 2,\n+                                       \"name\", \"Guido van Rossum\", \"age\", 62,\n+                                       \"lived\", \"California\");\n+        Vertex marko = graph.addVertex(T.label, \"author\", \"id\", 3,\n+                                       \"name\", \"Marko\", \"age\", 61,\n+                                       \"lived\", \"California\");\n+        guido.addEdge(\"know\", james);\n+        guido.addEdge(\"know\", marko);\n+        marko.addEdge(\"know\", james);\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+\n+            marko.addEdge(\"authored\", java, \"score\", i % 2);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        Vertex jeff = graph.addVertex(T.label, \"person\", \"name\", \"Jeff\",\n+                                      \"city\", \"Beijing\", \"age\", 62);\n+        Vertex sean = graph.addVertex(T.label, \"person\", \"name\", \"Sean\",\n+                                      \"city\", \"Beijing\", \"age\", 61);\n+\n+        louise.addEdge(\"friend\", jeff);\n+        louise.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"follow\", marko);\n+        sean.addEdge(\"follow\", marko);\n+\n+        graph.tx().commit();\n+\n+        // out\n+        List<Vertex> vertices = graph.traversal().V()\n+                                     .out().has(\"age\", 62)\n+                                     .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(6).toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(12).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(2).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V(louise, james)\n+                        .out(\"look\", \"write\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(9, vertices.size()); // two look edges not matched\n+\n+        // in\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(4, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(5).toList();\n+        Assert.assertEquals(4, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        // both\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(louise));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(sean));\n+        Assert.assertTrue(vertices.contains(marko));\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df4b74d4533c4edaa1e182e095edcbe1b3d1245"}, "originalPosition": 401}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODk0NQ==", "bodyText": "0 means none, and -1 means no limit", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r446608945", "createdAt": "2020-06-28T06:43:50Z", "author": {"login": "javeme"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java", "diffHunk": "@@ -1932,6 +1932,430 @@ public void testQueryEdgesWithLimitOnMultiLevel() {\n         Assert.assertEquals(1, edges.size());\n     }\n \n+    @Test\n+    public void testQueryEdgesWithLimitOnMultiLevelAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        graph.tx().commit();\n+\n+        // outE\n+        List<Edge> edges = graph.traversal().V()\n+                                .outE().has(\"score\", 0)\n+                                .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // inE\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // bothE\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesAdjacentVerticesWithLimitAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+        Vertex guido = graph.addVertex(T.label, \"author\", \"id\", 2,\n+                                       \"name\", \"Guido van Rossum\", \"age\", 62,\n+                                       \"lived\", \"California\");\n+        Vertex marko = graph.addVertex(T.label, \"author\", \"id\", 3,\n+                                       \"name\", \"Marko\", \"age\", 61,\n+                                       \"lived\", \"California\");\n+        guido.addEdge(\"know\", james);\n+        guido.addEdge(\"know\", marko);\n+        marko.addEdge(\"know\", james);\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+\n+            marko.addEdge(\"authored\", java, \"score\", i % 2);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        Vertex jeff = graph.addVertex(T.label, \"person\", \"name\", \"Jeff\",\n+                                      \"city\", \"Beijing\", \"age\", 62);\n+        Vertex sean = graph.addVertex(T.label, \"person\", \"name\", \"Sean\",\n+                                      \"city\", \"Beijing\", \"age\", 61);\n+\n+        louise.addEdge(\"friend\", jeff);\n+        louise.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"follow\", marko);\n+        sean.addEdge(\"follow\", marko);\n+\n+        graph.tx().commit();\n+\n+        // out\n+        List<Vertex> vertices = graph.traversal().V()\n+                                     .out().has(\"age\", 62)\n+                                     .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(6).toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(12).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(2).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V(louise, james)\n+                        .out(\"look\", \"write\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(9, vertices.size()); // two look edges not matched\n+\n+        // in\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(4, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(5).toList();\n+        Assert.assertEquals(4, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        // both\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(louise));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(sean));\n+        Assert.assertTrue(vertices.contains(marko));\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODYzMw=="}, "originalCommit": {"oid": "7df4b74d4533c4edaa1e182e095edcbe1b3d1245"}, "originalPosition": 401}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0OTYyOA==", "bodyText": "It's better to add a limit(0) boundary test.", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r447349628", "createdAt": "2020-06-30T01:14:13Z", "author": {"login": "houzhizhen"}, "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java", "diffHunk": "@@ -1932,6 +1932,430 @@ public void testQueryEdgesWithLimitOnMultiLevel() {\n         Assert.assertEquals(1, edges.size());\n     }\n \n+    @Test\n+    public void testQueryEdgesWithLimitOnMultiLevelAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        graph.tx().commit();\n+\n+        // outE\n+        List<Edge> edges = graph.traversal().V()\n+                                .outE().has(\"score\", 0)\n+                                .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // inE\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // bothE\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesAdjacentVerticesWithLimitAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+        Vertex guido = graph.addVertex(T.label, \"author\", \"id\", 2,\n+                                       \"name\", \"Guido van Rossum\", \"age\", 62,\n+                                       \"lived\", \"California\");\n+        Vertex marko = graph.addVertex(T.label, \"author\", \"id\", 3,\n+                                       \"name\", \"Marko\", \"age\", 61,\n+                                       \"lived\", \"California\");\n+        guido.addEdge(\"know\", james);\n+        guido.addEdge(\"know\", marko);\n+        marko.addEdge(\"know\", james);\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+\n+            marko.addEdge(\"authored\", java, \"score\", i % 2);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        Vertex jeff = graph.addVertex(T.label, \"person\", \"name\", \"Jeff\",\n+                                      \"city\", \"Beijing\", \"age\", 62);\n+        Vertex sean = graph.addVertex(T.label, \"person\", \"name\", \"Sean\",\n+                                      \"city\", \"Beijing\", \"age\", 61);\n+\n+        louise.addEdge(\"friend\", jeff);\n+        louise.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"follow\", marko);\n+        sean.addEdge(\"follow\", marko);\n+\n+        graph.tx().commit();\n+\n+        // out\n+        List<Vertex> vertices = graph.traversal().V()\n+                                     .out().has(\"age\", 62)\n+                                     .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(6).toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(12).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(2).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V(louise, james)\n+                        .out(\"look\", \"write\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(9, vertices.size()); // two look edges not matched\n+\n+        // in\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(4, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(5).toList();\n+        Assert.assertEquals(4, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        // both\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(louise));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(sean));\n+        Assert.assertTrue(vertices.contains(marko));\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODYzMw=="}, "originalCommit": {"oid": "7df4b74d4533c4edaa1e182e095edcbe1b3d1245"}, "originalPosition": 401}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODI4MjA3OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/serializer/BytesBuffer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMzowMTozMFrOGqp4Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjo1NDoyNFrOGquP6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3OTQ4Ng==", "bodyText": "if not use 0xff at all, prefer delete it and no need to assert", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r447379486", "createdAt": "2020-06-30T03:01:30Z", "author": {"login": "zhoney"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/serializer/BytesBuffer.java", "diffHunk": "@@ -332,14 +333,27 @@ public String readString() {\n         return StringEncoding.decode(this.readBytes());\n     }\n \n-    public BytesBuffer writeStringWithEnding(String val) {\n-        if (!val.isEmpty()) {\n-            byte[] bytes = StringEncoding.encode(val);\n-            // assert '0xff' not exist in string-id-with-ending (utf8 bytes)\n-            assert !Bytes.contains(bytes, STRING_ENDING_BYTE);\n+    public BytesBuffer writeStringWithEnding(String value) {\n+        if (!value.isEmpty()) {\n+            byte[] bytes = StringEncoding.encode(value);\n+            /*\n+             * assert '0x00'/'0xFF' not exist in string index id\n+             * NOTE:\n+             *   0x00 is NULL in UTF8(or ASCII) bytes\n+             *   0xFF is not a valid byte in UTF8 bytes\n+             */\n+            assert !Bytes.contains(bytes, STRING_ENDING_BYTE_FF) :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ce59e20548c903db9c9e893f15ad7b7cc0d093c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1MTExMw==", "bodyText": "to preserve the byte for future usages", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r447451113", "createdAt": "2020-06-30T06:54:24Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/serializer/BytesBuffer.java", "diffHunk": "@@ -332,14 +333,27 @@ public String readString() {\n         return StringEncoding.decode(this.readBytes());\n     }\n \n-    public BytesBuffer writeStringWithEnding(String val) {\n-        if (!val.isEmpty()) {\n-            byte[] bytes = StringEncoding.encode(val);\n-            // assert '0xff' not exist in string-id-with-ending (utf8 bytes)\n-            assert !Bytes.contains(bytes, STRING_ENDING_BYTE);\n+    public BytesBuffer writeStringWithEnding(String value) {\n+        if (!value.isEmpty()) {\n+            byte[] bytes = StringEncoding.encode(value);\n+            /*\n+             * assert '0x00'/'0xFF' not exist in string index id\n+             * NOTE:\n+             *   0x00 is NULL in UTF8(or ASCII) bytes\n+             *   0xFF is not a valid byte in UTF8 bytes\n+             */\n+            assert !Bytes.contains(bytes, STRING_ENDING_BYTE_FF) :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3OTQ4Ng=="}, "originalCommit": {"oid": "7ce59e20548c903db9c9e893f15ad7b7cc0d093c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODI4NDY3OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMzowMjo0NlrOGqp5kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMzowMjo0NlrOGqp5kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3OTg1OQ==", "bodyText": "INDEX_EMPTY_SYM -> INDEX_SYM_EMPTY", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r447379859", "createdAt": "2020-06-30T03:02:46Z", "author": {"login": "zhoney"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java", "diffHunk": "@@ -1066,6 +1045,9 @@ private static ConditionQuery constructQuery(ConditionQuery query,\n                              indexType, indexFields);\n                 Object fieldValue = query.userpropValue(indexFields.get(0));\n                 assert fieldValue instanceof String;\n+                // Escape empty String to INDEX_EMPTY_SYM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ce59e20548c903db9c9e893f15ad7b7cc0d093c"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODI4NTAyOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMzowMjo1NFrOGqp5xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMzowMjo1NFrOGqp5xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3OTkwOA==", "bodyText": "ditto", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r447379908", "createdAt": "2020-06-30T03:02:54Z", "author": {"login": "zhoney"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java", "diffHunk": "@@ -1074,11 +1056,9 @@ private static ConditionQuery constructQuery(ConditionQuery query,\n             case SECONDARY:\n                 List<Id> joinedKeys = indexFields.subList(0, queryKeys.size());\n                 String joinedValues = query.userpropValuesString(joinedKeys);\n+                // Escape empty String to INDEX_EMPTY_SYM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ce59e20548c903db9c9e893f15ad7b7cc0d093c"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzIxNDkyOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjozOTo1OVrOGrYtvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjowNTowMlrOGrjEIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0Njg3OA==", "bodyText": "add a comment later", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r448146878", "createdAt": "2020-07-01T06:39:59Z", "author": {"login": "Linary"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphTransaction.java", "diffHunk": "@@ -1189,7 +1195,9 @@ public static boolean matchEdgeSortKeys(ConditionQuery query,\n         for (int i = sortKeys.size(); i > 0; i--) {\n             List<Id> subFields = sortKeys.subList(0, i);\n             if (queryKeys.containsAll(subFields)) {\n-                return true;\n+                if (queryKeys.size() == subFields.size() || !matchAll) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a371bb180a2f701e48f8804ead116c06461d44"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxNjQ1MQ==", "bodyText": "done", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r448316451", "createdAt": "2020-07-01T12:05:02Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphTransaction.java", "diffHunk": "@@ -1189,7 +1195,9 @@ public static boolean matchEdgeSortKeys(ConditionQuery query,\n         for (int i = sortKeys.size(); i > 0; i--) {\n             List<Id> subFields = sortKeys.subList(0, i);\n             if (queryKeys.containsAll(subFields)) {\n-                return true;\n+                if (queryKeys.size() == subFields.size() || !matchAll) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0Njg3OA=="}, "originalCommit": {"oid": "a9a371bb180a2f701e48f8804ead116c06461d44"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzIzNzY0OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/traversal/optimize/HugeVertexStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjo0ODoxMVrOGrY7jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjo0ODoxMVrOGrY7jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MDQxNQ==", "bodyText": "suggest rename to partialMatchEdgeSortKeys", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r448150415", "createdAt": "2020-07-01T06:48:11Z", "author": {"login": "Linary"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/traversal/optimize/HugeVertexStep.java", "diffHunk": "@@ -124,9 +124,15 @@ public HugeVertexStep(final VertexStep<E> originVertexStep) {\n         // Query by sort-keys\n         if (withEdgeCond && edgeLabels.length > 0) {\n             TraversalUtil.fillConditionQuery(conditions, query, graph);\n-            if (!GraphTransaction.matchEdgeSortKeys(query, graph)) {\n+            if (!GraphTransaction.matchEdgeSortKeys(query, false, graph)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a371bb180a2f701e48f8804ead116c06461d44"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1648, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}