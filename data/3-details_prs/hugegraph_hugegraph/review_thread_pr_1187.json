{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNzIxNzU2", "number": 1187, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzoxNTo0MFrOEmZumg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjowNzo1MlrOEoYfpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzAyODc0OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzoxNTo0MFrOHWZkKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzoxNTo0MFrOHWZkKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI0OTU3Nw==", "bodyText": "should keep comment \"// TODO: When support sharding, groupId needs to be bound to shard Id\"?", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r493249577", "createdAt": "2020-09-23T07:15:40Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -59,61 +58,71 @@\n \n     private static final Logger LOG = Log.logger(RaftNode.class);\n \n-    private final String group;\n-    private final StoreStateMachine stateMachine;\n+    private final RaftSharedContext context;\n     private final Node node;\n+    private final StoreStateMachine stateMachine;\n+    private final AtomicLong leaderTerm;\n \n     private final Object electedLock;\n     private volatile boolean elected;\n     private volatile boolean started;\n     private final AtomicInteger busyCounter;\n \n-    public RaftNode(String group, BackendStore store,\n-                    RaftSharedContext context) {\n-        this.group = group;\n-        this.stateMachine = new StoreStateMachine(store, this, context);\n+    public RaftNode(RaftSharedContext context) {\n+        this.context = context;\n+        this.stateMachine = new StoreStateMachine(context);\n         try {\n-            this.node = this.initRaftNode(store, context);\n+            this.node = this.initRaftNode();\n         } catch (IOException e) {\n             throw new BackendException(\"Failed to init raft node\", e);\n         }\n         this.node.addReplicatorStateListener(new RaftNodeStateListener());\n+        this.leaderTerm = new AtomicLong(-1);\n         this.electedLock = new Object();\n         this.elected = false;\n         this.started = false;\n         this.busyCounter = new AtomicInteger();\n     }\n \n-    public String group() {\n-        return this.group;\n+    public RaftSharedContext context() {\n+        return this.context;\n     }\n \n     public Node node() {\n         return this.node;\n     }\n \n-    public NodeId nodeId() {\n-        return this.node.getNodeId();\n+    public PeerId nodeId() {\n+        return this.node.getNodeId().getPeerId();\n+    }\n+\n+    public PeerId leaderId() {\n+        return this.node.getLeaderId();\n+    }\n+\n+    public boolean isRaftLeader() {\n+        return this.leaderTerm.get() > 0;\n+    }\n+\n+    public void leaderTerm(long term) {\n+        this.leaderTerm.set(term);\n     }\n \n     public void shutdown() {\n         this.node.shutdown();\n     }\n \n-    private Node initRaftNode(BackendStore store, RaftSharedContext context)\n-                              throws IOException {\n-        String storePath = store.database() + \"-\" + store.store();\n-        NodeOptions nodeOptions = context.nodeOptions(storePath);\n+    private Node initRaftNode() throws IOException {\n+        NodeOptions nodeOptions = this.context.nodeOptions();\n         nodeOptions.setFsm(this.stateMachine);\n \n-        // TODO: When support sharding, groupId needs to be bound to shard Id\n-        String groupId = storePath;\n-        PeerId endpoint = context.endpoint();\n-\n+        String groupId = this.context.group();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8023c6e3ca31465bce50f77b2f6a5e044d39e9da"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzAzODk3OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzoxODo0NVrOHWZqfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzoxOTowOFrOHWZrVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1MTE5OA==", "bodyText": "remove \"election\"", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r493251198", "createdAt": "2020-09-23T07:18:45Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -176,7 +186,7 @@ protected void waitLeaderElected(int timeout) {\n                 } catch (InterruptedException e) {\n                     throw new BackendException(\n                               \"Wait raft group '%s' election error\",\n-                              e, this.group(), \"election\");\n+                              e, group, \"election\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8023c6e3ca31465bce50f77b2f6a5e044d39e9da"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1MTQxNA==", "bodyText": "improve message: \"Interrupted while waiting raft group '%s' election\"", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r493251414", "createdAt": "2020-09-23T07:19:08Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -176,7 +186,7 @@ protected void waitLeaderElected(int timeout) {\n                 } catch (InterruptedException e) {\n                     throw new BackendException(\n                               \"Wait raft group '%s' election error\",\n-                              e, this.group(), \"election\");\n+                              e, group, \"election\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1MTE5OA=="}, "originalCommit": {"oid": "8023c6e3ca31465bce50f77b2f6a5e044d39e9da"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzA0ODIxOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzoyMToxOVrOHWZv4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzoyMToxOVrOHWZv4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1MjU3OQ==", "bodyText": "assert storeType == StoreType.SYSTEM", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r493252579", "createdAt": "2020-09-23T07:21:19Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java", "diffHunk": "@@ -92,31 +108,69 @@ public RaftSharedContext(HugeGraphParams params) {\n         }\n         int backendThreads = config.get(CoreOptions.RAFT_BACKEND_THREADS);\n         this.backendExecutor = this.createBackendExecutor(backendThreads);\n+\n+        this.raftNode = null;\n+    }\n+\n+    public void initRaftNode() {\n+        this.raftNode = new RaftNode(this);\n+        CliOptions cliOptions = new CliOptions();\n+        cliOptions.setTimeoutMs(WAIT_LEADER_TIMEOUT);\n+        cliOptions.setMaxRetry(1);\n+    }\n+\n+    public void waitRaftNodeStarted() {\n+        RaftNode node = this.node();\n+        node.waitLeaderElected(RaftSharedContext.WAIT_LEADER_TIMEOUT);\n+        if (node.isRaftLeader()) {\n+            node.waitStarted(RaftSharedContext.NO_TIMEOUT);\n+        }\n     }\n \n     public void close() {\n         LOG.info(\"Stopping raft nodes\");\n-        this.nodes.values().forEach(RaftNode::shutdown);\n         this.rpcServer.shutdown();\n     }\n \n-    public RaftNode node(String group) {\n-        return this.nodes.get(group);\n+    public RaftNode node() {\n+        return this.raftNode;\n+    }\n+\n+    public String group() {\n+        return DEFAULT_GROUP;\n     }\n \n-    public void addNode(String group, BackendStore store) {\n-        if (!this.nodes.containsKey(group)) {\n-            synchronized (this.nodes) {\n-                if (!this.nodes.containsKey(group)) {\n-                    LOG.info(\"Initing raft node for '{}'\", group);\n-                    RaftNode node = new RaftNode(group, store, this);\n-                    this.nodes.put(group, node);\n-                }\n-            }\n+    public void addStore(String name, RaftBackendStore store) {\n+        this.stores.put(name, store);\n+    }\n+\n+    public StoreType storeType(String store) {\n+        if (this.schemaStoreName.equals(store)) {\n+            return StoreType.SCHEMA;\n+        } else if (this.graphStoreName.equals(store)) {\n+            return StoreType.GRAPH;\n+        } else {\n+            assert this.systemStoreName.equals(store);\n+            return StoreType.SYSTEM;\n+        }\n+    }\n+\n+    public BackendStore originStore(StoreType storeType) {\n+        if (storeType == StoreType.SCHEMA) {\n+            return this.stores.get(this.schemaStoreName).originStore();\n+        } else if (storeType == StoreType.GRAPH) {\n+            return this.stores.get(this.graphStoreName).originStore();\n+        } else {\n+            return this.stores.get(this.systemStoreName).originStore();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8023c6e3ca31465bce50f77b2f6a5e044d39e9da"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzA1NjUxOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzoyMzozOVrOHWZ06Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzoyMzozOVrOHWZ06Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1Mzg2NQ==", "bodyText": "don't copy, just wrap by bytebuffer with offset", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r493253865", "createdAt": "2020-09-23T07:23:39Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java", "diffHunk": "@@ -44,16 +53,18 @@ public StoreAction action() {\n     }\n \n     public byte[] toBytes() {\n-        byte[] bytes = new byte[1 + this.data.length];\n-        bytes[0] = this.action.code();\n-        System.arraycopy(this.data, 0, bytes, 1, this.data.length);\n+        byte[] bytes = new byte[1 + 1 + this.data.length];\n+        bytes[0] = (byte) this.type.getNumber();\n+        bytes[1] = (byte) this.action.getNumber();\n+        System.arraycopy(this.data, 0, bytes, 2, this.data.length);\n         return bytes;\n     }\n \n     public static StoreCommand fromBytes(byte[] bytes) {\n-        StoreAction action = StoreAction.fromCode(bytes[0]);\n-        byte[] data = new byte[bytes.length - 1];\n-        System.arraycopy(bytes, 1, data, 0, bytes.length - 1);\n-        return new StoreCommand(action, data);\n+        StoreType type = StoreType.valueOf(bytes[0]);\n+        StoreAction action = StoreAction.valueOf(bytes[1]);\n+        byte[] data = new byte[bytes.length - 2];\n+        System.arraycopy(bytes, 2, data, 0, bytes.length - 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8023c6e3ca31465bce50f77b2f6a5e044d39e9da"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzA3MDk3OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzoyNjo1NFrOHWZ9Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzoyNjo1NFrOHWZ9Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1NTk4Mw==", "bodyText": "reserve two bytes when allocate this.data", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r493255983", "createdAt": "2020-09-23T07:26:54Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java", "diffHunk": "@@ -44,16 +53,18 @@ public StoreAction action() {\n     }\n \n     public byte[] toBytes() {\n-        byte[] bytes = new byte[1 + this.data.length];\n-        bytes[0] = this.action.code();\n-        System.arraycopy(this.data, 0, bytes, 1, this.data.length);\n+        byte[] bytes = new byte[1 + 1 + this.data.length];\n+        bytes[0] = (byte) this.type.getNumber();\n+        bytes[1] = (byte) this.action.getNumber();\n+        System.arraycopy(this.data, 0, bytes, 2, this.data.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8023c6e3ca31465bce50f77b2f6a5e044d39e9da"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzA5NTI0OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzozMzoyMFrOHWaMNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzozMzoyMFrOHWaMNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1OTgzMQ==", "bodyText": "use array instead stores[StoreType.SCHEMA]", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r493259831", "createdAt": "2020-09-23T07:33:20Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java", "diffHunk": "@@ -92,31 +108,69 @@ public RaftSharedContext(HugeGraphParams params) {\n         }\n         int backendThreads = config.get(CoreOptions.RAFT_BACKEND_THREADS);\n         this.backendExecutor = this.createBackendExecutor(backendThreads);\n+\n+        this.raftNode = null;\n+    }\n+\n+    public void initRaftNode() {\n+        this.raftNode = new RaftNode(this);\n+        CliOptions cliOptions = new CliOptions();\n+        cliOptions.setTimeoutMs(WAIT_LEADER_TIMEOUT);\n+        cliOptions.setMaxRetry(1);\n+    }\n+\n+    public void waitRaftNodeStarted() {\n+        RaftNode node = this.node();\n+        node.waitLeaderElected(RaftSharedContext.WAIT_LEADER_TIMEOUT);\n+        if (node.isRaftLeader()) {\n+            node.waitStarted(RaftSharedContext.NO_TIMEOUT);\n+        }\n     }\n \n     public void close() {\n         LOG.info(\"Stopping raft nodes\");\n-        this.nodes.values().forEach(RaftNode::shutdown);\n         this.rpcServer.shutdown();\n     }\n \n-    public RaftNode node(String group) {\n-        return this.nodes.get(group);\n+    public RaftNode node() {\n+        return this.raftNode;\n+    }\n+\n+    public String group() {\n+        return DEFAULT_GROUP;\n     }\n \n-    public void addNode(String group, BackendStore store) {\n-        if (!this.nodes.containsKey(group)) {\n-            synchronized (this.nodes) {\n-                if (!this.nodes.containsKey(group)) {\n-                    LOG.info(\"Initing raft node for '{}'\", group);\n-                    RaftNode node = new RaftNode(group, store, this);\n-                    this.nodes.put(group, node);\n-                }\n-            }\n+    public void addStore(String name, RaftBackendStore store) {\n+        this.stores.put(name, store);\n+    }\n+\n+    public StoreType storeType(String store) {\n+        if (this.schemaStoreName.equals(store)) {\n+            return StoreType.SCHEMA;\n+        } else if (this.graphStoreName.equals(store)) {\n+            return StoreType.GRAPH;\n+        } else {\n+            assert this.systemStoreName.equals(store);\n+            return StoreType.SYSTEM;\n+        }\n+    }\n+\n+    public BackendStore originStore(StoreType storeType) {\n+        if (storeType == StoreType.SCHEMA) {\n+            return this.stores.get(this.schemaStoreName).originStore();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8023c6e3ca31465bce50f77b2f6a5e044d39e9da"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzEwNzQ3OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/resources/raft.proto", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzozNjoyMFrOHWaTkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNzozNjoyMFrOHWaTkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2MTcxNA==", "bodyText": "add SIZE", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r493261714", "createdAt": "2020-09-23T07:36:20Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/resources/raft.proto", "diffHunk": "@@ -5,6 +5,12 @@ package com.baidu.hugegraph.backend.store.raft;\n option java_package=\"com.baidu.hugegraph.backend.store.raft\";\n option java_outer_classname = \"RaftRequests\";\n \n+enum StoreType {\n+    SCHEMA = 1;\n+    GRAPH = 2;\n+    SYSTEM = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8023c6e3ca31465bce50f77b2f6a5e044d39e9da"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzgxNTU4OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoxNTowN1rOHYBITQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoxNTowN1rOHYBITQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NjM4MQ==", "bodyText": "remove it", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r494946381", "createdAt": "2020-09-25T12:15:07Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -287,6 +287,7 @@ public void setResponse(StoreCommandResponse resp) {\n                     LOG.debug(\"StoreCommandResponse status error\");\n                     Status status = new Status(RaftError.UNKNOWN,\n                                                \"fowared request failed\");\n+                    System.out.println(\"\u5931\u8d25\u7684\u8bf7\u6c42\uff1a\" + request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455fa68cdc5e85d02ce7055a70b9fee89304aeac"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzgyNzA4OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoxODo0MlrOHYBPSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoyOTo1MlrOHYzhzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0ODE2OQ==", "bodyText": "define StoreCommand.HEADER_SIZE", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r494948169", "createdAt": "2020-09-25T12:18:42Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java", "diffHunk": "@@ -43,7 +43,11 @@\n \n     public static byte[] writeMutations(List<BackendMutation> mutations) {\n         int estimateSize = mutations.size() * MUTATION_SIZE;\n-        BytesBuffer buffer = BytesBuffer.allocate(1 + estimateSize);\n+        // The first two bytes are reserved for StoreType and StoreAction\n+        BytesBuffer buffer = BytesBuffer.allocate(2 + 4 + estimateSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455fa68cdc5e85d02ce7055a70b9fee89304aeac"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MjExMQ==", "bodyText": "use HEADER_SIZE + 4 + estimateSize", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r495772111", "createdAt": "2020-09-28T08:29:52Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java", "diffHunk": "@@ -43,7 +43,11 @@\n \n     public static byte[] writeMutations(List<BackendMutation> mutations) {\n         int estimateSize = mutations.size() * MUTATION_SIZE;\n-        BytesBuffer buffer = BytesBuffer.allocate(1 + estimateSize);\n+        // The first two bytes are reserved for StoreType and StoreAction\n+        BytesBuffer buffer = BytesBuffer.allocate(2 + 4 + estimateSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0ODE2OQ=="}, "originalCommit": {"oid": "455fa68cdc5e85d02ce7055a70b9fee89304aeac"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzgyNzI2OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoxODo0NVrOHYBPYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoxODo0NVrOHYBPYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0ODE5NQ==", "bodyText": "add static method StoreCommand.writeHeader(buffer)", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r494948195", "createdAt": "2020-09-25T12:18:45Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java", "diffHunk": "@@ -43,7 +43,11 @@\n \n     public static byte[] writeMutations(List<BackendMutation> mutations) {\n         int estimateSize = mutations.size() * MUTATION_SIZE;\n-        BytesBuffer buffer = BytesBuffer.allocate(1 + estimateSize);\n+        // The first two bytes are reserved for StoreType and StoreAction\n+        BytesBuffer buffer = BytesBuffer.allocate(2 + 4 + estimateSize);\n+        buffer.write((byte) 0);\n+        buffer.write((byte) 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455fa68cdc5e85d02ce7055a70b9fee89304aeac"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzgyNzg4OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoxODo1N1rOHYBPwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoxODo1N1rOHYBPwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0ODI4OA==", "bodyText": "ditto", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r494948288", "createdAt": "2020-09-25T12:18:57Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java", "diffHunk": "@@ -128,7 +132,11 @@ public static BackendMutation readMutation(BytesBuffer buffer) {\n     }\n \n     public static byte[] writeIncrCounter(IncrCounter incrCounter) {\n-        BytesBuffer buffer = BytesBuffer.allocate(1 + BytesBuffer.LONG_LEN);\n+        // The first two bytes are reserved for StoreType and StoreAction\n+        BytesBuffer buffer = BytesBuffer.allocate(2 + 1 + BytesBuffer.LONG_LEN);\n+        buffer.write((byte) 0);\n+        buffer.write((byte) 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455fa68cdc5e85d02ce7055a70b9fee89304aeac"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzgzNDU2OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoyMDo1NFrOHYBTxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjoyMDo1NFrOHYBTxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0OTMxOQ==", "bodyText": "also use getNumber()", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r494949319", "createdAt": "2020-09-25T12:20:54Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java", "diffHunk": "@@ -93,31 +108,66 @@ public RaftSharedContext(HugeGraphParams params) {\n         }\n         int backendThreads = config.get(CoreOptions.RAFT_BACKEND_THREADS);\n         this.backendExecutor = this.createBackendExecutor(backendThreads);\n+\n+        this.raftNode = null;\n+    }\n+\n+    public void initRaftNode() {\n+        this.raftNode = new RaftNode(this);\n+        CliOptions cliOptions = new CliOptions();\n+        cliOptions.setTimeoutMs(WAIT_LEADER_TIMEOUT);\n+        cliOptions.setMaxRetry(1);\n+    }\n+\n+    public void waitRaftNodeStarted() {\n+        RaftNode node = this.node();\n+        node.waitLeaderElected(RaftSharedContext.WAIT_LEADER_TIMEOUT);\n+        if (node.isRaftLeader()) {\n+            node.waitStarted(RaftSharedContext.NO_TIMEOUT);\n+        }\n     }\n \n     public void close() {\n         LOG.info(\"Stopping raft nodes\");\n-        this.nodes.values().forEach(RaftNode::shutdown);\n         this.rpcServer.shutdown();\n     }\n \n-    public RaftNode node(String group) {\n-        return this.nodes.get(group);\n+    public RaftNode node() {\n+        return this.raftNode;\n+    }\n+\n+    public String group() {\n+        return DEFAULT_GROUP;\n+    }\n+\n+    public void addStore(StoreType type, RaftBackendStore store) {\n+        this.stores[type.ordinal()] = store;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455fa68cdc5e85d02ce7055a70b9fee89304aeac"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzUxNTg4OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoyNjoyNlrOHYzZ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoyNjoyNlrOHYzZ1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MDA3MQ==", "bodyText": "check store is not null", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r495770071", "createdAt": "2020-09-28T08:26:26Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java", "diffHunk": "@@ -93,31 +108,66 @@ public RaftSharedContext(HugeGraphParams params) {\n         }\n         int backendThreads = config.get(CoreOptions.RAFT_BACKEND_THREADS);\n         this.backendExecutor = this.createBackendExecutor(backendThreads);\n+\n+        this.raftNode = null;\n+    }\n+\n+    public void initRaftNode() {\n+        this.raftNode = new RaftNode(this);\n+        CliOptions cliOptions = new CliOptions();\n+        cliOptions.setTimeoutMs(WAIT_LEADER_TIMEOUT);\n+        cliOptions.setMaxRetry(1);\n+    }\n+\n+    public void waitRaftNodeStarted() {\n+        RaftNode node = this.node();\n+        node.waitLeaderElected(RaftSharedContext.WAIT_LEADER_TIMEOUT);\n+        if (node.isRaftLeader()) {\n+            node.waitStarted(RaftSharedContext.NO_TIMEOUT);\n+        }\n     }\n \n     public void close() {\n         LOG.info(\"Stopping raft nodes\");\n-        this.nodes.values().forEach(RaftNode::shutdown);\n         this.rpcServer.shutdown();\n     }\n \n-    public RaftNode node(String group) {\n-        return this.nodes.get(group);\n+    public RaftNode node() {\n+        return this.raftNode;\n+    }\n+\n+    public String group() {\n+        return DEFAULT_GROUP;\n+    }\n+\n+    public void addStore(StoreType type, RaftBackendStore store) {\n+        this.stores[type.getNumber()] = store;\n+    }\n+\n+    public StoreType storeType(String store) {\n+        if (this.schemaStoreName.equals(store)) {\n+            return StoreType.SCHEMA;\n+        } else if (this.graphStoreName.equals(store)) {\n+            return StoreType.GRAPH;\n+        } else {\n+            assert this.systemStoreName.equals(store);\n+            return StoreType.SYSTEM;\n+        }\n     }\n \n-    public void addNode(String group, BackendStore store) {\n-        if (!this.nodes.containsKey(group)) {\n-            synchronized (this.nodes) {\n-                if (!this.nodes.containsKey(group)) {\n-                    LOG.info(\"Initing raft node for '{}'\", group);\n-                    RaftNode node = new RaftNode(group, store, this);\n-                    this.nodes.put(group, node);\n-                }\n-            }\n+    public BackendStore originStore(StoreType storeType) {\n+        return this.stores[storeType.getNumber()].originStore();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c19c4e1445198f1c42c8201262070c6aa1325f1"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzUxOTgxOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoyNzoyMVrOHYzcFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoyNzoyMVrOHYzcFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MDY0NQ==", "bodyText": "use HEADER_SIZE here", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r495770645", "createdAt": "2020-09-28T08:27:21Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java", "diffHunk": "@@ -19,20 +19,33 @@\n \n package com.baidu.hugegraph.backend.store.raft;\n \n+import com.baidu.hugegraph.backend.serializer.BytesBuffer;\n+import com.baidu.hugegraph.backend.store.raft.RaftRequests.StoreAction;\n+import com.baidu.hugegraph.backend.store.raft.RaftRequests.StoreType;\n+\n public class StoreCommand {\n \n-    private static byte[] EMPTY = new byte[0];\n+    public static final int HEADER_SIZE = 2;\n \n+    private final StoreType type;\n     private final StoreAction action;\n     private final byte[] data;\n \n-    public StoreCommand(StoreAction action) {\n-        this(action, EMPTY);\n+    public StoreCommand(StoreType type, StoreAction action, byte[] data) {\n+        this.type = type;\n+        this.action = action;\n+        if (data == null) {\n+            this.data = new byte[2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c19c4e1445198f1c42c8201262070c6aa1325f1"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzUyMjU5OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoyODowMlrOHYzdsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoyODowMlrOHYzdsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MTA1OA==", "bodyText": "use HEADER_SIZE here", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r495771058", "createdAt": "2020-09-28T08:28:02Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java", "diffHunk": "@@ -43,17 +56,20 @@ public StoreAction action() {\n         return this.data;\n     }\n \n-    public byte[] toBytes() {\n-        byte[] bytes = new byte[1 + this.data.length];\n-        bytes[0] = this.action.code();\n-        System.arraycopy(this.data, 0, bytes, 1, this.data.length);\n+    public static void writeHeader(BytesBuffer buffer) {\n+        buffer.write((byte) 0);\n+        buffer.write((byte) 0);\n+    }\n+\n+    public static byte[] wrap(byte value) {\n+        byte[] bytes = new byte[3];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c19c4e1445198f1c42c8201262070c6aa1325f1"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzUyOTQ1OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozMDowMFrOHYziHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozMDowMFrOHYziHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MjE4OQ==", "bodyText": "ditto", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r495772189", "createdAt": "2020-09-28T08:30:00Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java", "diffHunk": "@@ -128,7 +131,10 @@ public static BackendMutation readMutation(BytesBuffer buffer) {\n     }\n \n     public static byte[] writeIncrCounter(IncrCounter incrCounter) {\n-        BytesBuffer buffer = BytesBuffer.allocate(1 + BytesBuffer.LONG_LEN);\n+        // The first two bytes are reserved for StoreType and StoreAction\n+        BytesBuffer buffer = BytesBuffer.allocate(2 + 1 + BytesBuffer.LONG_LEN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c19c4e1445198f1c42c8201262070c6aa1325f1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzU0Mjc1OnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommandRequestProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozMzo1MVrOHYzqQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoyNTowNlrOHY9jgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NDI3Mg==", "bodyText": "if request.getData() returns ByteBuffer, just wrap it with BytesBuffer then pass into  StoreCommand", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r495774272", "createdAt": "2020-09-28T08:33:51Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommandRequestProcessor.java", "diffHunk": "@@ -75,9 +68,9 @@ public String interest() {\n     }\n \n     private StoreCommand parseStoreCommand(StoreCommandRequest request) {\n-        byte actionByte = (byte) request.getAction().getNumber();\n-        StoreAction action = StoreAction.fromCode(actionByte);\n+        StoreType type = request.getType();\n+        StoreAction action = request.getAction();\n         byte[] data = request.getData().toByteArray();\n-        return new StoreCommand(action, data);\n+        return new StoreCommand(type, action, data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c19c4e1445198f1c42c8201262070c6aa1325f1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNjM4Nw==", "bodyText": "no, it return com.google.protobuf.ByteString", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r495936387", "createdAt": "2020-09-28T13:25:06Z", "author": {"login": "Linary"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommandRequestProcessor.java", "diffHunk": "@@ -75,9 +68,9 @@ public String interest() {\n     }\n \n     private StoreCommand parseStoreCommand(StoreCommandRequest request) {\n-        byte actionByte = (byte) request.getAction().getNumber();\n-        StoreAction action = StoreAction.fromCode(actionByte);\n+        StoreType type = request.getType();\n+        StoreAction action = request.getAction();\n         byte[] data = request.getData().toByteArray();\n-        return new StoreCommand(action, data);\n+        return new StoreCommand(type, action, data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NDI3Mg=="}, "originalCommit": {"oid": "3c19c4e1445198f1c42c8201262070c6aa1325f1"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzc5ODEzOnYy", "diffSide": "RIGHT", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjowNzo1MlrOHZcMmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjowNzo1MlrOHZcMmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzODQyNg==", "bodyText": "missing parameter, and improve \"The raft store of type %s shouldn't be null\"", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r496438426", "createdAt": "2020-09-29T06:07:52Z", "author": {"login": "javeme"}, "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java", "diffHunk": "@@ -156,7 +157,10 @@ public StoreType storeType(String store) {\n     }\n \n     public BackendStore originStore(StoreType storeType) {\n-        return this.stores[storeType.getNumber()].originStore();\n+        RaftBackendStore raftStore = this.stores[storeType.getNumber()];\n+        E.checkState(raftStore != null,\n+                     \"The raft store type %s shouldn't be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1819bf2016bd6f249240aa5786ad36f039444d96"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1495, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}