{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMDEwOTkx", "number": 7039, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1Mzo0NFrOEKIvVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1Mzo0NFrOEKIvVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDY0NDA1OnYy", "diffSide": "RIGHT", "path": "scripts/installer/ec2-create-instance.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1Mzo0NFrOGrAWDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1Mzo0NFrOGrAWDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NzU5Ng==", "bodyText": "This fine but we could also just remove this script. Maybe some other day.", "url": "https://github.com/IQSS/dataverse/pull/7039#discussion_r447747596", "createdAt": "2020-06-30T14:53:44Z", "author": {"login": "pdurbin"}, "path": "scripts/installer/ec2-create-instance.sh", "diffHunk": "@@ -1,206 +1,4 @@\n-#!/bin/bash -e\n+#!/bin/sh\n \n-# For docs, see the \"Deployment\" page in the Dev Guide.\n-\n-# repo and branch defaults\n-REPO_URL_DEFAULT='https://github.com/IQSS/dataverse.git'\n-BRANCH_DEFAULT='develop'\n-PEM_DEFAULT=${HOME}\n-AWS_AMI_DEFAULT='ami-9887c6e7'\n-\n-usage() {\n-  echo \"Usage: $0 -b <branch> -r <repo> -p <pem_dir> -g <group_vars> -a <dataverse-ansible branch> -i aws_image -s aws_size -t aws_tag -l local_log_path\" 1>&2\n-  echo \"default branch is develop\"\n-  echo \"default repo is https://github.com/IQSS/dataverse\"\n-  echo \"default .pem location is ${HOME}\"\n-  echo \"example group_vars may be retrieved from https://raw.githubusercontent.com/IQSS/dataverse-ansible/master/defaults/main.yml\"\n-  echo \"default AWS AMI ID is $AWS_AMI_DEFAULT\"\n-  echo \"default AWS size is t2.medium\"\n-  echo \"local log path\"\n-  exit 1\n-}\n-\n-while getopts \":a:r:b:g:p:i:s:t:l:\" o; do\n-  case \"${o}\" in\n-  a)\n-    DA_BRANCH=${OPTARG}\n-    ;;\n-  r)\n-    REPO_URL=${OPTARG}\n-    ;;\n-  b)\n-    BRANCH=${OPTARG}\n-    ;;\n-  g)\n-    GRPVRS=${OPTARG}\n-    ;;\n-  p)\n-    PEM_DIR=${OPTARG}\n-    ;;\n-  i)\n-    AWS_IMAGE=${OPTARG}\n-    ;;\n-  s)\n-    AWS_SIZE=${OPTARG}\n-    ;;\n-  t)\n-    TAG=${OPTARG}\n-    ;;\n-  l)\n-    LOCAL_LOG_PATH=${OPTARG}\n-    ;;\n-  *)\n-    usage\n-    ;;\n-  esac\n-done\n-\n-# test for ansible group_vars\n-if [ ! -z \"$GRPVRS\" ]; then\n-   GVFILE=$(basename \"$GRPVRS\")\n-   GVARG=\"-e @$GVFILE\"\n-   echo \"using $GRPVRS for extra vars\"\n-fi\n-\n-# test for CLI args\n-if [ ! -z \"$REPO_URL\" ]; then\n-   GVARG+=\" -e dataverse_repo=$REPO_URL\"\n-   echo \"using repo $REPO_URL\"\n-fi\n-\n-if [ ! -z \"$BRANCH\" ]; then\n-   GVARG+=\" -e dataverse_branch=$BRANCH\"\n-   echo \"building branch $BRANCH\"\n-fi\n-\n-# The AMI ID may change in the future and the way to look it up is with the following command, which takes a long time to run:\n-# aws ec2 describe-images  --owners 'aws-marketplace' --filters 'Name=product-code,Values=aw0evgkw8e5c1q413zgy5pjce' --query 'sort_by(Images, &CreationDate)[-1].[ImageId]' --output 'text'\n-# To use an AMI, one must subscribe to it via the AWS GUI.\n-# AMI IDs are specific to the region.\n-\n-if [ ! -z \"$AWS_IMAGE\" ]; then\n-   AMI_ID=$AWS_IMAGE\n-else\n-   AMI_ID=\"$AWS_AMI_DEFAULT\"\n-fi \n-echo \"using $AMI_ID\"\n-\n-if [ ! -z \"$AWS_SIZE\" ]; then\n-   SIZE=$AWS_SIZE\n-else\n-   SIZE=\"t2.medium\"\n-fi\n-echo \"using $SIZE\"\n-\n-if [ ! -z \"$TAG\" ]; then\n-   TAGARG=\"--tag-specifications ResourceType=instance,Tags=[{Key=name,Value=$TAG}]\"\n-   echo \"using tag $TAG\"\n-fi\n-\n-# default to dataverse-ansible/master\n-if [ -z \"$DA_BRANCH\" ]; then\n-   DA_BRANCH=\"master\"\n-fi\n-\n-# ansible doesn't care about pem_dir (yet)\n-if [ -z \"$PEM_DIR\" ]; then\n-   PEM_DIR=\"$PEM_DEFAULT\"\n-fi\n-\n-AWS_CLI_VERSION=$(aws --version)\n-if [[ \"$?\" -ne 0 ]]; then\n-  echo 'The \"aws\" program could not be executed. Is it in your $PATH?'\n-  exit 1\n-fi\n-\n-if [[ $(git ls-remote --heads $REPO_URL $BRANCH | wc -l) -eq 0 ]]; then\n-  echo \"Branch \\\"$BRANCH\\\" does not exist at $REPO_URL\"\n-  usage\n-  exit 1\n-fi\n-\n-SECURITY_GROUP='dataverse-sg'\n-GROUP_CHECK=$(aws ec2 describe-security-groups --group-name $SECURITY_GROUP)\n-if [[ \"$?\" -ne 0 ]]; then\n-  echo \"Creating security group \\\"$SECURITY_GROUP\\\".\"\n-  aws ec2 create-security-group --group-name $SECURITY_GROUP --description \"security group for Dataverse\"\n-  aws ec2 authorize-security-group-ingress --group-name $SECURITY_GROUP --protocol tcp --port 22 --cidr 0.0.0.0/0\n-  aws ec2 authorize-security-group-ingress --group-name $SECURITY_GROUP --protocol tcp --port 80 --cidr 0.0.0.0/0\n-  aws ec2 authorize-security-group-ingress --group-name $SECURITY_GROUP --protocol tcp --port 443 --cidr 0.0.0.0/0\n-  aws ec2 authorize-security-group-ingress --group-name $SECURITY_GROUP --protocol tcp --port 8080 --cidr 0.0.0.0/0\n-fi\n-\n-RANDOM_STRING=\"$(uuidgen | cut -c-8)\"\n-KEY_NAME=\"key-$USER-$RANDOM_STRING\"\n-\n-PRIVATE_KEY=$(aws ec2 create-key-pair --key-name $PEM_DIR/$KEY_NAME --query 'KeyMaterial' --output text)\n-if [[ $PRIVATE_KEY == '-----BEGIN RSA PRIVATE KEY-----'* ]]; then\n-  PEM_FILE=\"$PEM_DIR/$KEY_NAME.pem\"\n-  printf -- \"$PRIVATE_KEY\" >$PEM_FILE\n-  chmod 400 $PEM_FILE\n-  echo \"Your newly created private key file is \\\"$PEM_FILE\\\". Keep it secret. Keep it safe.\"\n-else\n-  echo \"Could not create key pair. Exiting.\"\n-  exit 1\n-fi\n-\n-echo \"Creating EC2 instance\"\n-# TODO: Add some error checking for \"ec2 run-instances\".\n-INSTANCE_ID=$(aws ec2 run-instances --image-id $AMI_ID --security-groups $SECURITY_GROUP $TAGARG --count 1 --instance-type $SIZE --key-name $PEM_DIR/$KEY_NAME --query 'Instances[0].InstanceId' --block-device-mappings '[ { \"DeviceName\": \"/dev/sda1\", \"Ebs\": { \"DeleteOnTermination\": true } } ]' | tr -d \\\")\n-echo \"Instance ID: \"$INSTANCE_ID\n-echo \"giving instance 60 seconds to wake up...\"\n-sleep 60\n-echo \"End creating EC2 instance\"\n-\n-PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query \"Reservations[*].Instances[*].[PublicDnsName]\" --output text)\n-PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query \"Reservations[*].Instances[*].[PublicIpAddress]\" --output text)\n-\n-USER_AT_HOST=\"centos@${PUBLIC_DNS}\"\n-echo \"New instance created with ID \\\"$INSTANCE_ID\\\". To ssh into it:\"\n-echo \"ssh -i $PEM_FILE $USER_AT_HOST\"\n-\n-echo \"Please wait at least 15 minutes while the branch \\\"$BRANCH\\\" from $REPO_URL is being deployed.\"\n-\n-if [ ! -z \"$GRPVRS\" ]; then\n-   scp -i $PEM_FILE -o 'StrictHostKeyChecking no' -o 'UserKnownHostsFile=/dev/null' -o 'ConnectTimeout=300' $GRPVRS $USER_AT_HOST:$GVFILE\n-fi\n-\n-# epel-release is installed first to ensure the latest ansible is installed after\n-# TODO: Add some error checking for this ssh command.\n-ssh -T -i $PEM_FILE -o 'StrictHostKeyChecking no' -o 'UserKnownHostsFile=/dev/null' -o 'ConnectTimeout=300' $USER_AT_HOST <<EOF\n-sudo yum -y install epel-release\n-sudo yum -y install https://releases.ansible.com/ansible/rpm/release/epel-7-x86_64/ansible-2.7.9-1.el7.ans.noarch.rpm\n-sudo yum -y install git nano\n-git clone -b $DA_BRANCH https://github.com/IQSS/dataverse-ansible.git dataverse\n-export ANSIBLE_ROLES_PATH=.\n-ansible-playbook -v -i dataverse/inventory dataverse/dataverse.pb --connection=local $GVARG\n-EOF\n-\n-if [ ! -z \"$LOCAL_LOG_PATH\" ]; then\n-   echo \"copying logs to $LOCAL_LOG_PATH.\"\n-   # 1 accept SSH keys\n-   ssh-keyscan ${PUBLIC_DNS} >> ~/.ssh/known_hosts\n-   # 2 logdir should exist\n-   mkdir -p $LOCAL_LOG_PATH\n-   # 3 grab logs for local processing in jenkins\n-   rsync -av -e \"ssh -i $PEM_FILE\" --ignore-missing-args centos@$PUBLIC_DNS:/tmp/dataverse/target/site $LOCAL_LOG_PATH/\n-   rsync -av -e \"ssh -i $PEM_FILE\" --ignore-missing-args centos@$PUBLIC_DNS:/tmp/dataverse/target/surefire-reports $LOCAL_LOG_PATH/\n-   rsync -av -e \"ssh -i $PEM_FILE\" centos@$PUBLIC_DNS:/usr/local/glassfish4/glassfish/domains/domain1/logs/server* $LOCAL_LOG_PATH/\n-   # 4 grab mvn.out\n-   rsync -av -e \"ssh -i $PEM_FILE\" --ignore-missing-args centos@$PUBLIC_DNS:/tmp/dataverse/mvn.out $LOCAL_LOG_PATH/\n-   # 5 jacoco\n-   rsync -av -e \"ssh -i $PEM_FILE\" --ignore-missing-args centos@$PUBLIC_DNS:/tmp/dataverse/target/coverage-it $LOCAL_LOG_PATH/\n-   rsync -av -e \"ssh -i $PEM_FILE\" --ignore-missing-args centos@$PUBLIC_DNS:/tmp/dataverse/target/*.exec $LOCAL_LOG_PATH/\n-   rsync -av -e \"ssh -i $PEM_FILE\" --ignore-missing-args centos@$PUBLIC_DNS:/tmp/dataverse/target/classes $LOCAL_LOG_PATH/\n-   rsync -av -e \"ssh -i $PEM_FILE\" --ignore-missing-args centos@$PUBLIC_DNS:/tmp/dataverse/src $LOCAL_LOG_PATH/\n-fi\n-\n-# Port 8080 has been added because Ansible puts a redirect in place\n-# from HTTP to HTTPS and the cert is invalid (self-signed), forcing\n-# the user to click through browser warnings.\n-CLICKABLE_LINK=\"http://${PUBLIC_DNS}\"\n-echo \"To ssh into the new instance:\"\n-echo \"ssh -i $PEM_FILE $USER_AT_HOST\"\n-echo \"Branch $BRANCH from $REPO_URL has been deployed to $CLICKABLE_LINK\"\n-echo \"When you are done, please terminate your instance with:\"\n-echo \"aws ec2 terminate-instances --instance-ids $INSTANCE_ID\"\n+echo \"The current copy of this script has been moved to https://github.com/GlobalDataverseCommunityConsortium/dataverse-ansible/tree/master/ec2\"\n+echo \"You may call it directly: https://raw.githubusercontent.com/GlobalDataverseCommunityConsortium/dataverse-ansible/master/ec2/ec2-create-instance.sh\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b924332f0a577c59abe5aa9ef5b6df592ae3c6a"}, "originalPosition": 209}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3246, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}