{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3ODg3ODA1", "number": 6790, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoyOTo0MFrODvO2Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODoyMDo1OFrODvQA3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODUyODk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/edu/harvard/iq/dataverse/DatasetPage.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoyOTo0MFrOGBiZtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1ODozOVrOGCXriA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NTM5OA==", "bodyText": "Because we want the admin to intercede here we probably don't want to remove the lock, but should we update the  edit data button so that if there is a file validation failure the user cannot add files? We would still allow them to make other edits?", "url": "https://github.com/IQSS/dataverse/pull/6790#discussion_r404265398", "createdAt": "2020-04-06T17:29:40Z", "author": {"login": "sekmiller"}, "path": "src/main/java/edu/harvard/iq/dataverse/DatasetPage.java", "diffHunk": "@@ -2011,48 +2037,42 @@ private String init(boolean initFull) {\n                 lockedDueToDcmUpload = true;\n             }\n             //This is a hack to remove dataset locks for File PID registration if \n-                //the dataset is released\n-                //in testing we had cases where datasets with 1000 files were remaining locked after being published successfully\n-                /*if(dataset.getLatestVersion().isReleased() && dataset.isLockedFor(DatasetLock.Reason.pidRegister)){\n-                    datasetService.removeDatasetLocks(dataset.getId(), DatasetLock.Reason.pidRegister);\n-                }*/\n-            if (dataset.isLockedFor(DatasetLock.Reason.pidRegister)) {\n+            //the dataset is released\n+            //in testing we had cases where datasets with 1000 files were remaining locked after being published successfully\n+            /*if(dataset.getLatestVersion().isReleased() && dataset.isLockedFor(DatasetLock.Reason.finalizePublication)){\n+                datasetService.removeDatasetLocks(dataset.getId(), DatasetLock.Reason.finalizePublication);\n+            }*/\n+            if (dataset.isLockedFor(DatasetLock.Reason.finalizePublication)) {\n+                // \"finalizePublication\" lock is used to lock the dataset while \n+                // the FinalizeDatasetPublicationCommand is running asynchronously. \n+                // the tasks currently performed by the command are the  pid registration \n+                // for files and (or) physical file validation (either or both \n+                // of these two can be disabled via database settings). More \n+                // such asynchronous processing tasks may be added in the future. \n                 JH.addMessage(FacesMessage.SEVERITY_WARN, BundleUtil.getStringFromBundle(\"dataset.publish.workflow.message\"),\n                         BundleUtil.getStringFromBundle(\"dataset.pidRegister.workflow.inprogress\"));\n             }\n+            if (dataset.isLockedFor(DatasetLock.Reason.FileValidationFailed)) {\n+                // the dataset is locked, because one or more datafiles in it \n+                // failed validation during an attempt to publish it. \n+                if (FacesContext.getCurrentInstance().getExternalContext().getFlash().get(\"errorMsg\") == null) {\n+                    JH.addMessage(FacesMessage.SEVERITY_ERROR, BundleUtil.getStringFromBundle(\"dataset.publish.file.validation.error.message\"),\n+                            BundleUtil.getStringFromBundle(\"dataset.publish.file.validation.error.contactSupport\"));\n+                }\n+                /* and now that we've shown the message to the user - remove the lock? */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74badcbee4f92a7cd2930bbd750ce9a7e666d84e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MDA2MA==", "bodyText": "Or maybe use the file validation failure lock to disable the publish button?", "url": "https://github.com/IQSS/dataverse/pull/6790#discussion_r404270060", "createdAt": "2020-04-06T17:37:15Z", "author": {"login": "sekmiller"}, "path": "src/main/java/edu/harvard/iq/dataverse/DatasetPage.java", "diffHunk": "@@ -2011,48 +2037,42 @@ private String init(boolean initFull) {\n                 lockedDueToDcmUpload = true;\n             }\n             //This is a hack to remove dataset locks for File PID registration if \n-                //the dataset is released\n-                //in testing we had cases where datasets with 1000 files were remaining locked after being published successfully\n-                /*if(dataset.getLatestVersion().isReleased() && dataset.isLockedFor(DatasetLock.Reason.pidRegister)){\n-                    datasetService.removeDatasetLocks(dataset.getId(), DatasetLock.Reason.pidRegister);\n-                }*/\n-            if (dataset.isLockedFor(DatasetLock.Reason.pidRegister)) {\n+            //the dataset is released\n+            //in testing we had cases where datasets with 1000 files were remaining locked after being published successfully\n+            /*if(dataset.getLatestVersion().isReleased() && dataset.isLockedFor(DatasetLock.Reason.finalizePublication)){\n+                datasetService.removeDatasetLocks(dataset.getId(), DatasetLock.Reason.finalizePublication);\n+            }*/\n+            if (dataset.isLockedFor(DatasetLock.Reason.finalizePublication)) {\n+                // \"finalizePublication\" lock is used to lock the dataset while \n+                // the FinalizeDatasetPublicationCommand is running asynchronously. \n+                // the tasks currently performed by the command are the  pid registration \n+                // for files and (or) physical file validation (either or both \n+                // of these two can be disabled via database settings). More \n+                // such asynchronous processing tasks may be added in the future. \n                 JH.addMessage(FacesMessage.SEVERITY_WARN, BundleUtil.getStringFromBundle(\"dataset.publish.workflow.message\"),\n                         BundleUtil.getStringFromBundle(\"dataset.pidRegister.workflow.inprogress\"));\n             }\n+            if (dataset.isLockedFor(DatasetLock.Reason.FileValidationFailed)) {\n+                // the dataset is locked, because one or more datafiles in it \n+                // failed validation during an attempt to publish it. \n+                if (FacesContext.getCurrentInstance().getExternalContext().getFlash().get(\"errorMsg\") == null) {\n+                    JH.addMessage(FacesMessage.SEVERITY_ERROR, BundleUtil.getStringFromBundle(\"dataset.publish.file.validation.error.message\"),\n+                            BundleUtil.getStringFromBundle(\"dataset.publish.file.validation.error.contactSupport\"));\n+                }\n+                /* and now that we've shown the message to the user - remove the lock? */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NTM5OA=="}, "originalCommit": {"oid": "74badcbee4f92a7cd2930bbd750ce9a7e666d84e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyMzc0Nw==", "bodyText": "No, we don't want to remove that lock automatically - that was an idea I was entertaining during the development. I should remove that comment.\nAs for the second comment - that's exactly what that \"failed validation\" lock does. It disables the publish button, and will prevent an execution of the publish command, if called via API. But it shouldn't prevent the contributor from making changes. But yes, this should be documented clearly.", "url": "https://github.com/IQSS/dataverse/pull/6790#discussion_r404323747", "createdAt": "2020-04-06T19:08:02Z", "author": {"login": "landreev"}, "path": "src/main/java/edu/harvard/iq/dataverse/DatasetPage.java", "diffHunk": "@@ -2011,48 +2037,42 @@ private String init(boolean initFull) {\n                 lockedDueToDcmUpload = true;\n             }\n             //This is a hack to remove dataset locks for File PID registration if \n-                //the dataset is released\n-                //in testing we had cases where datasets with 1000 files were remaining locked after being published successfully\n-                /*if(dataset.getLatestVersion().isReleased() && dataset.isLockedFor(DatasetLock.Reason.pidRegister)){\n-                    datasetService.removeDatasetLocks(dataset.getId(), DatasetLock.Reason.pidRegister);\n-                }*/\n-            if (dataset.isLockedFor(DatasetLock.Reason.pidRegister)) {\n+            //the dataset is released\n+            //in testing we had cases where datasets with 1000 files were remaining locked after being published successfully\n+            /*if(dataset.getLatestVersion().isReleased() && dataset.isLockedFor(DatasetLock.Reason.finalizePublication)){\n+                datasetService.removeDatasetLocks(dataset.getId(), DatasetLock.Reason.finalizePublication);\n+            }*/\n+            if (dataset.isLockedFor(DatasetLock.Reason.finalizePublication)) {\n+                // \"finalizePublication\" lock is used to lock the dataset while \n+                // the FinalizeDatasetPublicationCommand is running asynchronously. \n+                // the tasks currently performed by the command are the  pid registration \n+                // for files and (or) physical file validation (either or both \n+                // of these two can be disabled via database settings). More \n+                // such asynchronous processing tasks may be added in the future. \n                 JH.addMessage(FacesMessage.SEVERITY_WARN, BundleUtil.getStringFromBundle(\"dataset.publish.workflow.message\"),\n                         BundleUtil.getStringFromBundle(\"dataset.pidRegister.workflow.inprogress\"));\n             }\n+            if (dataset.isLockedFor(DatasetLock.Reason.FileValidationFailed)) {\n+                // the dataset is locked, because one or more datafiles in it \n+                // failed validation during an attempt to publish it. \n+                if (FacesContext.getCurrentInstance().getExternalContext().getFlash().get(\"errorMsg\") == null) {\n+                    JH.addMessage(FacesMessage.SEVERITY_ERROR, BundleUtil.getStringFromBundle(\"dataset.publish.file.validation.error.message\"),\n+                            BundleUtil.getStringFromBundle(\"dataset.publish.file.validation.error.contactSupport\"));\n+                }\n+                /* and now that we've shown the message to the user - remove the lock? */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NTM5OA=="}, "originalCommit": {"oid": "74badcbee4f92a7cd2930bbd750ce9a7e666d84e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyOTQ1NA==", "bodyText": "OK. I missed that the lock disables publish because it's if it's locked for any reason, not just file validation failure.", "url": "https://github.com/IQSS/dataverse/pull/6790#discussion_r404329454", "createdAt": "2020-04-06T19:18:13Z", "author": {"login": "sekmiller"}, "path": "src/main/java/edu/harvard/iq/dataverse/DatasetPage.java", "diffHunk": "@@ -2011,48 +2037,42 @@ private String init(boolean initFull) {\n                 lockedDueToDcmUpload = true;\n             }\n             //This is a hack to remove dataset locks for File PID registration if \n-                //the dataset is released\n-                //in testing we had cases where datasets with 1000 files were remaining locked after being published successfully\n-                /*if(dataset.getLatestVersion().isReleased() && dataset.isLockedFor(DatasetLock.Reason.pidRegister)){\n-                    datasetService.removeDatasetLocks(dataset.getId(), DatasetLock.Reason.pidRegister);\n-                }*/\n-            if (dataset.isLockedFor(DatasetLock.Reason.pidRegister)) {\n+            //the dataset is released\n+            //in testing we had cases where datasets with 1000 files were remaining locked after being published successfully\n+            /*if(dataset.getLatestVersion().isReleased() && dataset.isLockedFor(DatasetLock.Reason.finalizePublication)){\n+                datasetService.removeDatasetLocks(dataset.getId(), DatasetLock.Reason.finalizePublication);\n+            }*/\n+            if (dataset.isLockedFor(DatasetLock.Reason.finalizePublication)) {\n+                // \"finalizePublication\" lock is used to lock the dataset while \n+                // the FinalizeDatasetPublicationCommand is running asynchronously. \n+                // the tasks currently performed by the command are the  pid registration \n+                // for files and (or) physical file validation (either or both \n+                // of these two can be disabled via database settings). More \n+                // such asynchronous processing tasks may be added in the future. \n                 JH.addMessage(FacesMessage.SEVERITY_WARN, BundleUtil.getStringFromBundle(\"dataset.publish.workflow.message\"),\n                         BundleUtil.getStringFromBundle(\"dataset.pidRegister.workflow.inprogress\"));\n             }\n+            if (dataset.isLockedFor(DatasetLock.Reason.FileValidationFailed)) {\n+                // the dataset is locked, because one or more datafiles in it \n+                // failed validation during an attempt to publish it. \n+                if (FacesContext.getCurrentInstance().getExternalContext().getFlash().get(\"errorMsg\") == null) {\n+                    JH.addMessage(FacesMessage.SEVERITY_ERROR, BundleUtil.getStringFromBundle(\"dataset.publish.file.validation.error.message\"),\n+                            BundleUtil.getStringFromBundle(\"dataset.publish.file.validation.error.contactSupport\"));\n+                }\n+                /* and now that we've shown the message to the user - remove the lock? */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NTM5OA=="}, "originalCommit": {"oid": "74badcbee4f92a7cd2930bbd750ce9a7e666d84e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzODMxMg==", "bodyText": "The way that page is dealing with/checking for various types of locks is a little scary.\nAdded a quick note to the \"dataset management\"/\"publish dataset\" section of the user guide.", "url": "https://github.com/IQSS/dataverse/pull/6790#discussion_r405138312", "createdAt": "2020-04-07T21:58:39Z", "author": {"login": "landreev"}, "path": "src/main/java/edu/harvard/iq/dataverse/DatasetPage.java", "diffHunk": "@@ -2011,48 +2037,42 @@ private String init(boolean initFull) {\n                 lockedDueToDcmUpload = true;\n             }\n             //This is a hack to remove dataset locks for File PID registration if \n-                //the dataset is released\n-                //in testing we had cases where datasets with 1000 files were remaining locked after being published successfully\n-                /*if(dataset.getLatestVersion().isReleased() && dataset.isLockedFor(DatasetLock.Reason.pidRegister)){\n-                    datasetService.removeDatasetLocks(dataset.getId(), DatasetLock.Reason.pidRegister);\n-                }*/\n-            if (dataset.isLockedFor(DatasetLock.Reason.pidRegister)) {\n+            //the dataset is released\n+            //in testing we had cases where datasets with 1000 files were remaining locked after being published successfully\n+            /*if(dataset.getLatestVersion().isReleased() && dataset.isLockedFor(DatasetLock.Reason.finalizePublication)){\n+                datasetService.removeDatasetLocks(dataset.getId(), DatasetLock.Reason.finalizePublication);\n+            }*/\n+            if (dataset.isLockedFor(DatasetLock.Reason.finalizePublication)) {\n+                // \"finalizePublication\" lock is used to lock the dataset while \n+                // the FinalizeDatasetPublicationCommand is running asynchronously. \n+                // the tasks currently performed by the command are the  pid registration \n+                // for files and (or) physical file validation (either or both \n+                // of these two can be disabled via database settings). More \n+                // such asynchronous processing tasks may be added in the future. \n                 JH.addMessage(FacesMessage.SEVERITY_WARN, BundleUtil.getStringFromBundle(\"dataset.publish.workflow.message\"),\n                         BundleUtil.getStringFromBundle(\"dataset.pidRegister.workflow.inprogress\"));\n             }\n+            if (dataset.isLockedFor(DatasetLock.Reason.FileValidationFailed)) {\n+                // the dataset is locked, because one or more datafiles in it \n+                // failed validation during an attempt to publish it. \n+                if (FacesContext.getCurrentInstance().getExternalContext().getFlash().get(\"errorMsg\") == null) {\n+                    JH.addMessage(FacesMessage.SEVERITY_ERROR, BundleUtil.getStringFromBundle(\"dataset.publish.file.validation.error.message\"),\n+                            BundleUtil.getStringFromBundle(\"dataset.publish.file.validation.error.contactSupport\"));\n+                }\n+                /* and now that we've shown the message to the user - remove the lock? */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NTM5OA=="}, "originalCommit": {"oid": "74badcbee4f92a7cd2930bbd750ce9a7e666d84e"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODcyMDMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/FinalizeDatasetPublicationCommand.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODoyMDo1OFrOGBkSIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1NzowOVrOGCXo0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5NjIyNQ==", "bodyText": "I think it would be desirable to attempt to validate all of the files before throwing an exception. It would make the admins job easier if they knew more than one file failed validation.", "url": "https://github.com/IQSS/dataverse/pull/6790#discussion_r404296225", "createdAt": "2020-04-06T18:20:58Z", "author": {"login": "sekmiller"}, "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/FinalizeDatasetPublicationCommand.java", "diffHunk": "@@ -225,6 +240,98 @@ private void updateParentDataversesSubjectsField(Dataset savedDataset, CommandCo\n         }\n     }\n \n+    private void validateDataFiles(Dataset dataset, CommandContext ctxt) throws CommandException {\n+        try {\n+            for (DataFile dataFile : dataset.getFiles()) {\n+                // TODO: Should we validate all the files in the dataset, or only \n+                // the files that haven't been published previously?\n+                logger.log(Level.FINE, \"validating DataFile {0}\", dataFile.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74badcbee4f92a7cd2930bbd750ce9a7e666d84e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyNjE3MQ==", "bodyText": "Thanks for the suggestion. I decided to quit on the first invalid file, so that it's faster. And then I tell the admin in the troubleshooting instruction that they need to verify all the files in the dataset.\nI just had this idea: I should probably leave the finalizePublication command as is, stopping on the first file that fails - but then I should provide a one step API for the admin, that will validate all the files in the dataset (using the existing code), and spell out to them which ones need to be fixed - ?", "url": "https://github.com/IQSS/dataverse/pull/6790#discussion_r404326171", "createdAt": "2020-04-06T19:12:26Z", "author": {"login": "landreev"}, "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/FinalizeDatasetPublicationCommand.java", "diffHunk": "@@ -225,6 +240,98 @@ private void updateParentDataversesSubjectsField(Dataset savedDataset, CommandCo\n         }\n     }\n \n+    private void validateDataFiles(Dataset dataset, CommandContext ctxt) throws CommandException {\n+        try {\n+            for (DataFile dataFile : dataset.getFiles()) {\n+                // TODO: Should we validate all the files in the dataset, or only \n+                // the files that haven't been published previously?\n+                logger.log(Level.FINE, \"validating DataFile {0}\", dataFile.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5NjIyNQ=="}, "originalCommit": {"oid": "74badcbee4f92a7cd2930bbd750ce9a7e666d84e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNzYxNw==", "bodyText": "OK, this is done.", "url": "https://github.com/IQSS/dataverse/pull/6790#discussion_r405137617", "createdAt": "2020-04-07T21:57:09Z", "author": {"login": "landreev"}, "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/FinalizeDatasetPublicationCommand.java", "diffHunk": "@@ -225,6 +240,98 @@ private void updateParentDataversesSubjectsField(Dataset savedDataset, CommandCo\n         }\n     }\n \n+    private void validateDataFiles(Dataset dataset, CommandContext ctxt) throws CommandException {\n+        try {\n+            for (DataFile dataFile : dataset.getFiles()) {\n+                // TODO: Should we validate all the files in the dataset, or only \n+                // the files that haven't been published previously?\n+                logger.log(Level.FINE, \"validating DataFile {0}\", dataFile.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5NjIyNQ=="}, "originalCommit": {"oid": "74badcbee4f92a7cd2930bbd750ce9a7e666d84e"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3334, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}