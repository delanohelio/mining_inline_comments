{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3Mjk4NDMz", "number": 6957, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOToxMjowM1rOECSTcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo1NjozMVrOECTNtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODMyNDk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/edu/harvard/iq/dataverse/api/Access.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOToxMjowM1rOGept5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDozNzoxNVrOGfW5kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5Mzk1Ng==", "bodyText": "I was playing with this using curl and got a NullPointerException when fileIds was null (and a 500 error). Some error checking would be nice.", "url": "https://github.com/IQSS/dataverse/pull/6957#discussion_r434793956", "createdAt": "2020-06-03T19:12:03Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Access.java", "diffHunk": "@@ -525,15 +527,38 @@ public DownloadInstance tabularDatafileMetadataPreprocessed(@PathParam(\"fileId\")\n     }\n     \n     /* \n-     * API method for downloading zipped bundles of multiple files:\n+     * API method for downloading zipped bundles of multiple files. Uses POST to avoid long lists of file IDs that can make the URL longer than what's supported by browsers/servers\n     */\n     \n-    // TODO: Rather than only supporting looking up files by their database IDs, consider supporting persistent identifiers.\n+    // TODO: Rather than only supporting looking up files by their database IDs,\n+    // consider supporting persistent identifiers.\n+    @Path(\"datafiles\")\n+    @POST\n+    @Consumes(\"text/plain\")\n+    @Produces({ \"application/zip\" })\n+    public Response postDownloadDatafiles(String fileIds, @QueryParam(\"gbrecs\") boolean gbrecs, @QueryParam(\"key\") String apiTokenParam, @Context UriInfo uriInfo, @Context HttpHeaders headers, @Context HttpServletResponse response) throws WebApplicationException {\n+        \n+        fileIds = fileIds.substring(8); // String \"fileIds=\" from the front", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73e42e24d6ed21c64a881391b03dbdc1e45361f0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzNDIyNg==", "bodyText": "There is error checking. I just defeated it by taking a substring of null before the error check is done in downloadDataFiles() :-) Will fix.", "url": "https://github.com/IQSS/dataverse/pull/6957#discussion_r435534226", "createdAt": "2020-06-04T20:37:15Z", "author": {"login": "qqmyers"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Access.java", "diffHunk": "@@ -525,15 +527,38 @@ public DownloadInstance tabularDatafileMetadataPreprocessed(@PathParam(\"fileId\")\n     }\n     \n     /* \n-     * API method for downloading zipped bundles of multiple files:\n+     * API method for downloading zipped bundles of multiple files. Uses POST to avoid long lists of file IDs that can make the URL longer than what's supported by browsers/servers\n     */\n     \n-    // TODO: Rather than only supporting looking up files by their database IDs, consider supporting persistent identifiers.\n+    // TODO: Rather than only supporting looking up files by their database IDs,\n+    // consider supporting persistent identifiers.\n+    @Path(\"datafiles\")\n+    @POST\n+    @Consumes(\"text/plain\")\n+    @Produces({ \"application/zip\" })\n+    public Response postDownloadDatafiles(String fileIds, @QueryParam(\"gbrecs\") boolean gbrecs, @QueryParam(\"key\") String apiTokenParam, @Context UriInfo uriInfo, @Context HttpHeaders headers, @Context HttpServletResponse response) throws WebApplicationException {\n+        \n+        fileIds = fileIds.substring(8); // String \"fileIds=\" from the front", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5Mzk1Ng=="}, "originalCommit": {"oid": "73e42e24d6ed21c64a881391b03dbdc1e45361f0"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODMzMTM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/edu/harvard/iq/dataverse/api/Access.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOToxMzo1M1rOGepxzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDo1MDo1OVrOGfXUTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NDk1OQ==", "bodyText": "I think this API should be documented along side the other ones in the Data Access API page of the API Guide. I can imagine the same error that was reported in #6943 could easily happen to API users.", "url": "https://github.com/IQSS/dataverse/pull/6957#discussion_r434794959", "createdAt": "2020-06-03T19:13:53Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Access.java", "diffHunk": "@@ -525,15 +527,38 @@ public DownloadInstance tabularDatafileMetadataPreprocessed(@PathParam(\"fileId\")\n     }\n     \n     /* \n-     * API method for downloading zipped bundles of multiple files:\n+     * API method for downloading zipped bundles of multiple files. Uses POST to avoid long lists of file IDs that can make the URL longer than what's supported by browsers/servers\n     */\n     \n-    // TODO: Rather than only supporting looking up files by their database IDs, consider supporting persistent identifiers.\n+    // TODO: Rather than only supporting looking up files by their database IDs,\n+    // consider supporting persistent identifiers.\n+    @Path(\"datafiles\")\n+    @POST", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73e42e24d6ed21c64a881391b03dbdc1e45361f0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0MTA3MQ==", "bodyText": "Added - feel free to change.", "url": "https://github.com/IQSS/dataverse/pull/6957#discussion_r435541071", "createdAt": "2020-06-04T20:50:59Z", "author": {"login": "qqmyers"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Access.java", "diffHunk": "@@ -525,15 +527,38 @@ public DownloadInstance tabularDatafileMetadataPreprocessed(@PathParam(\"fileId\")\n     }\n     \n     /* \n-     * API method for downloading zipped bundles of multiple files:\n+     * API method for downloading zipped bundles of multiple files. Uses POST to avoid long lists of file IDs that can make the URL longer than what's supported by browsers/servers\n     */\n     \n-    // TODO: Rather than only supporting looking up files by their database IDs, consider supporting persistent identifiers.\n+    // TODO: Rather than only supporting looking up files by their database IDs,\n+    // consider supporting persistent identifiers.\n+    @Path(\"datafiles\")\n+    @POST", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NDk1OQ=="}, "originalCommit": {"oid": "73e42e24d6ed21c64a881391b03dbdc1e45361f0"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODQ3NDE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/edu/harvard/iq/dataverse/FileDownloadServiceBean.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo1NjozMVrOGerNiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDo0MDozNFrOGfXAYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxODQ0Mw==", "bodyText": "This is just a comment but I assume that PrimeFaces is being used here because there's no JSF standard way (FacesContext way) to execute a script.", "url": "https://github.com/IQSS/dataverse/pull/6957#discussion_r434818443", "createdAt": "2020-06-03T19:56:31Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/FileDownloadServiceBean.java", "diffHunk": "@@ -212,11 +213,7 @@ private void redirectToBatchDownloadAPI(String multiFileString, Boolean guestboo\n             fileDownloadUrl += \"?format=original\";\n         }\n         \n-        try {\n-            FacesContext.getCurrentInstance().getExternalContext().redirect(fileDownloadUrl);\n-        } catch (IOException ex) {\n-            logger.info(\"Failed to issue a redirect to file download url.\");\n-        }\n+        PrimeFaces.current().executeScript(\"downloadFiles('\"+fileDownloadUrl + \"','\"+ multiFileString+\"');\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73e42e24d6ed21c64a881391b03dbdc1e45361f0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzNTk2OQ==", "bodyText": "I'm not certain but this is done elsewhere and I assume PF needed this method for some reason. I didn't find anything else with a quick web check.", "url": "https://github.com/IQSS/dataverse/pull/6957#discussion_r435535969", "createdAt": "2020-06-04T20:40:34Z", "author": {"login": "qqmyers"}, "path": "src/main/java/edu/harvard/iq/dataverse/FileDownloadServiceBean.java", "diffHunk": "@@ -212,11 +213,7 @@ private void redirectToBatchDownloadAPI(String multiFileString, Boolean guestboo\n             fileDownloadUrl += \"?format=original\";\n         }\n         \n-        try {\n-            FacesContext.getCurrentInstance().getExternalContext().redirect(fileDownloadUrl);\n-        } catch (IOException ex) {\n-            logger.info(\"Failed to issue a redirect to file download url.\");\n-        }\n+        PrimeFaces.current().executeScript(\"downloadFiles('\"+fileDownloadUrl + \"','\"+ multiFileString+\"');\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxODQ0Mw=="}, "originalCommit": {"oid": "73e42e24d6ed21c64a881391b03dbdc1e45361f0"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3215, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}