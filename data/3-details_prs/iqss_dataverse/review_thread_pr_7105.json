{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0MDUxOTcz", "number": 7105, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1OTozNFrOERKGjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDo1NDo1NVrOERfLMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDI2NzY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/CreateDataverseCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1OTozNFrOG1t8_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNToyODo1MlrOG3nvpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MDYwNw==", "bodyText": "The index dataverse here does not index permissions. Should you be using index((Dataverse) r, true)?", "url": "https://github.com/IQSS/dataverse/pull/7105#discussion_r458980607", "createdAt": "2020-07-22T17:59:34Z", "author": {"login": "sekmiller"}, "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/CreateDataverseCommand.java", "diffHunk": "@@ -168,17 +169,8 @@ public Dataverse execute(CommandContext ctxt) throws CommandException {\n     }\n     \n     @Override\n-    public boolean onSuccess(CommandContext ctxt, Object r) {\n-        try{\n-            ctxt.index().indexDataverse((Dataverse) r);\n-        } catch (IOException | SolrServerException e){           \n-            Dataverse dv = (Dataverse) r;            \n-            String failureLogText = \"Indexing failed. You can kickoff a re-index of this dataverse with: \\r\\n curl http://localhost:8080/api/admin/index/dataverses/\" + dv.getId().toString();\n-            failureLogText += \"\\r\\n\" + e.getLocalizedMessage();\n-            LoggingUtil.writeOnSuccessFailureLog(this, failureLogText,  dv);\n-            return false;\n-        }\n-        return true;\n+    public boolean onSuccess(CommandContext ctxt, Object r) {  \n+        return ctxt.dataverses().index((Dataverse) r);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ccc23bf2d2e97ab181518c0f26a3199d8519cd"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk3NjAzOQ==", "bodyText": "Actually, the index without the boolean (of false) does index the call indePermissionForOneDVObject.\nindexPermissions or (index with true) adds a call to indexPermissionOnSelfAndChildren, but that shouldn't be needed in the case of creating a dataverse.", "url": "https://github.com/IQSS/dataverse/pull/7105#discussion_r460976039", "createdAt": "2020-07-27T15:28:52Z", "author": {"login": "scolapasta"}, "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/CreateDataverseCommand.java", "diffHunk": "@@ -168,17 +169,8 @@ public Dataverse execute(CommandContext ctxt) throws CommandException {\n     }\n     \n     @Override\n-    public boolean onSuccess(CommandContext ctxt, Object r) {\n-        try{\n-            ctxt.index().indexDataverse((Dataverse) r);\n-        } catch (IOException | SolrServerException e){           \n-            Dataverse dv = (Dataverse) r;            \n-            String failureLogText = \"Indexing failed. You can kickoff a re-index of this dataverse with: \\r\\n curl http://localhost:8080/api/admin/index/dataverses/\" + dv.getId().toString();\n-            failureLogText += \"\\r\\n\" + e.getLocalizedMessage();\n-            LoggingUtil.writeOnSuccessFailureLog(this, failureLogText,  dv);\n-            return false;\n-        }\n-        return true;\n+    public boolean onSuccess(CommandContext ctxt, Object r) {  \n+        return ctxt.dataverses().index((Dataverse) r);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MDYwNw=="}, "originalCommit": {"oid": "68ccc23bf2d2e97ab181518c0f26a3199d8519cd"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDQ3OTk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/UpdateDataverseCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo1Nzo0NlrOG1wCKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozMTo1M1rOG3n4PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxNDY5OQ==", "bodyText": "reindexing datasets may not actually be needed here. (based on the instances where it is called ManageTemplates, Guestbook, etc.)", "url": "https://github.com/IQSS/dataverse/pull/7105#discussion_r459014699", "createdAt": "2020-07-22T18:57:46Z", "author": {"login": "sekmiller"}, "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/UpdateDataverseCommand.java", "diffHunk": "@@ -90,20 +90,19 @@ public Dataverse execute(CommandContext ctxt) throws CommandException {\n         \n     @Override\n     public boolean onSuccess(CommandContext ctxt, Object r) {\n-        Dataverse result = (Dataverse) r;\n-\n-        List<Dataset> datasets = ctxt.datasets().findByOwnerId(result.getId());\n+        \n+        // first kick of async index of datasets\n+        // TODO: is this actually needed? Is there a better way to handle\n         try {\n-            Future<String> indResponse = ctxt.index().indexDataverse(result);\n+            Dataverse result = (Dataverse) r;\n+            List<Dataset> datasets = ctxt.datasets().findByOwnerId(result.getId());\n             ctxt.index().asyncIndexDatasetList(datasets, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ccc23bf2d2e97ab181518c0f26a3199d8519cd"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk3ODIzNg==", "bodyText": "I think you're right, but I wanted to change as little as possible while surgically fixing the deadlocks. So left this code as it was, but added the TODO.", "url": "https://github.com/IQSS/dataverse/pull/7105#discussion_r460978236", "createdAt": "2020-07-27T15:31:53Z", "author": {"login": "scolapasta"}, "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/UpdateDataverseCommand.java", "diffHunk": "@@ -90,20 +90,19 @@ public Dataverse execute(CommandContext ctxt) throws CommandException {\n         \n     @Override\n     public boolean onSuccess(CommandContext ctxt, Object r) {\n-        Dataverse result = (Dataverse) r;\n-\n-        List<Dataset> datasets = ctxt.datasets().findByOwnerId(result.getId());\n+        \n+        // first kick of async index of datasets\n+        // TODO: is this actually needed? Is there a better way to handle\n         try {\n-            Future<String> indResponse = ctxt.index().indexDataverse(result);\n+            Dataverse result = (Dataverse) r;\n+            List<Dataset> datasets = ctxt.datasets().findByOwnerId(result.getId());\n             ctxt.index().asyncIndexDatasetList(datasets, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxNDY5OQ=="}, "originalCommit": {"oid": "68ccc23bf2d2e97ab181518c0f26a3199d8519cd"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzM2ODU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/UpdatePermissionRootCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzozOToyM1rOG2K9Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozMjoxM1rOG3n5Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ1NTgyNg==", "bodyText": "This will never be a dataset so we can simplify the code here", "url": "https://github.com/IQSS/dataverse/pull/7105#discussion_r459455826", "createdAt": "2020-07-23T13:39:23Z", "author": {"login": "sekmiller"}, "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/UpdatePermissionRootCommand.java", "diffHunk": "@@ -37,6 +37,13 @@ public Dataverse execute( final CommandContext ctxt) throws CommandException {\n \t\t}\n \t}\n \n+    @Override\n+    public boolean onSuccess(CommandContext ctxt, Object r) {  \n+        return ctxt.dataverses().index((Dataverse) r,true);\n+    }        \n+\n+\n+    //TODO: Review this as this will never be an instance of Dataset, will it?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ccc23bf2d2e97ab181518c0f26a3199d8519cd"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk3ODQ1OA==", "bodyText": "Similar to last, left as todo and out of scope.", "url": "https://github.com/IQSS/dataverse/pull/7105#discussion_r460978458", "createdAt": "2020-07-27T15:32:13Z", "author": {"login": "scolapasta"}, "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/UpdatePermissionRootCommand.java", "diffHunk": "@@ -37,6 +37,13 @@ public Dataverse execute( final CommandContext ctxt) throws CommandException {\n \t\t}\n \t}\n \n+    @Override\n+    public boolean onSuccess(CommandContext ctxt, Object r) {  \n+        return ctxt.dataverses().index((Dataverse) r,true);\n+    }        \n+\n+\n+    //TODO: Review this as this will never be an instance of Dataset, will it?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ1NTgyNg=="}, "originalCommit": {"oid": "68ccc23bf2d2e97ab181518c0f26a3199d8519cd"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzcyMDE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/edu/harvard/iq/dataverse/DataverseServiceBean.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDo1NDo1NVrOG2OY5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTo1MDowNlrOG3on6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUxMjAzOQ==", "bodyText": "Kind of a nit, but there are cases where this isn't being called by onSuccess so the failure message so maybe add to the general log in those cases.", "url": "https://github.com/IQSS/dataverse/pull/7105#discussion_r459512039", "createdAt": "2020-07-23T14:54:55Z", "author": {"login": "sekmiller"}, "path": "src/main/java/edu/harvard/iq/dataverse/DataverseServiceBean.java", "diffHunk": "@@ -91,21 +92,33 @@ public Dataverse save(Dataverse dataverse) {\n        \n         dataverse.setModificationTime(new Timestamp(new Date().getTime()));\n         Dataverse savedDataverse = em.merge(dataverse);\n+        return savedDataverse;\n+    }\n+    \n+    public boolean index(Dataverse dataverse) {\n+        return index(dataverse, false);\n+\n+    }\n+        \n+    public boolean index(Dataverse dataverse, boolean indexPermissions) {    \n         /**\n          * @todo check the result to see if indexing was successful or not\n          * added logging of exceptions \n          */\n         try {\n-            Future<String> indexingResult = indexService.indexDataverse(savedDataverse);\n+            indexService.indexDataverse(dataverse);\n+            if (indexPermissions) {\n+                solrIndexService.indexPermissionsOnSelfAndChildren(dataverse);\n+            }\n         } catch (IOException | SolrServerException e) {\n-            String failureLogText = \"Post-save indexing failed. You can kickoff a re-index of this dataverse with: \\r\\n curl http://localhost:8080/api/admin/index/dataverses/\" + savedDataverse.getId().toString();\n+            String failureLogText = \"Post-save indexing failed. You can kickoff a re-index of this dataverse with: \\r\\n curl http://localhost:8080/api/admin/index/dataverses/\" + dataverse.getId().toString();\n             failureLogText += \"\\r\\n\" + e.getLocalizedMessage();\n-            LoggingUtil.writeOnSuccessFailureLog(null, failureLogText, savedDataverse);\n+            LoggingUtil.writeOnSuccessFailureLog(null, failureLogText, dataverse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ccc23bf2d2e97ab181518c0f26a3199d8519cd"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk5MDQ0MA==", "bodyText": "This is a brand new method and all the calls I added are in onSuccess methods. Additionally as a tech design decision, we've said we want all such indexing to be onSuccess, no? So I think it's ok.\nNote, that currently not all indexing is actually on success (see MoveDataverse), but changing that was out of scope for this issue).", "url": "https://github.com/IQSS/dataverse/pull/7105#discussion_r460990440", "createdAt": "2020-07-27T15:50:06Z", "author": {"login": "scolapasta"}, "path": "src/main/java/edu/harvard/iq/dataverse/DataverseServiceBean.java", "diffHunk": "@@ -91,21 +92,33 @@ public Dataverse save(Dataverse dataverse) {\n        \n         dataverse.setModificationTime(new Timestamp(new Date().getTime()));\n         Dataverse savedDataverse = em.merge(dataverse);\n+        return savedDataverse;\n+    }\n+    \n+    public boolean index(Dataverse dataverse) {\n+        return index(dataverse, false);\n+\n+    }\n+        \n+    public boolean index(Dataverse dataverse, boolean indexPermissions) {    \n         /**\n          * @todo check the result to see if indexing was successful or not\n          * added logging of exceptions \n          */\n         try {\n-            Future<String> indexingResult = indexService.indexDataverse(savedDataverse);\n+            indexService.indexDataverse(dataverse);\n+            if (indexPermissions) {\n+                solrIndexService.indexPermissionsOnSelfAndChildren(dataverse);\n+            }\n         } catch (IOException | SolrServerException e) {\n-            String failureLogText = \"Post-save indexing failed. You can kickoff a re-index of this dataverse with: \\r\\n curl http://localhost:8080/api/admin/index/dataverses/\" + savedDataverse.getId().toString();\n+            String failureLogText = \"Post-save indexing failed. You can kickoff a re-index of this dataverse with: \\r\\n curl http://localhost:8080/api/admin/index/dataverses/\" + dataverse.getId().toString();\n             failureLogText += \"\\r\\n\" + e.getLocalizedMessage();\n-            LoggingUtil.writeOnSuccessFailureLog(null, failureLogText, savedDataverse);\n+            LoggingUtil.writeOnSuccessFailureLog(null, failureLogText, dataverse);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUxMjAzOQ=="}, "originalCommit": {"oid": "68ccc23bf2d2e97ab181518c0f26a3199d8519cd"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3268, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}