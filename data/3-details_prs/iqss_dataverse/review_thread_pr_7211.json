{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMTk5NzAx", "number": 7211, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToyNzowMVrOEh0mjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTo1NDoyOVrOEh1cXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTAwMzAwOnYy", "diffSide": "RIGHT", "path": "doc/sphinx-guides/source/api/native-api.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToyNzowMVrOHPWg5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTozMDoyMlrOHP5urQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1OTU1OQ==", "bodyText": "These docs look fine but I would prefer seeing them on this page: http://guides.dataverse.org/en/latest/admin/solr-search-index.html\nIt's nice having a single \"clear-orphans\" endpoint but is it fast enough? Will there be demand for a \"clear dataset orphan\"? I'm fine with putting \"clear-orphans\" out into the world and getting feedback about if more granularity is needed.", "url": "https://github.com/IQSS/dataverse/pull/7211#discussion_r485859559", "createdAt": "2020-09-09T19:27:01Z", "author": {"login": "pdurbin"}, "path": "doc/sphinx-guides/source/api/native-api.rst", "diffHunk": "@@ -3061,6 +3061,20 @@ Note that if you are attempting to validate a very large number of datasets in y\n  \n      asadmin set server-config.network-config.protocols.protocol.http-listener-1.http.request-timeout-seconds=3600\n \n+\n+\n+Index and Database Consistency\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Get a list of all database objects that are missing in Solr, and Solr documents that are missing in the database::\n+\n+  curl $SERVER_URL/api/admin/index/status\n+\n+Remove all Solr documents that are orphaned (ie not associated with objects in the database)::\n+\n+  curl $SERVER_URL/api/admin/index/clear-orphans\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbdac70e25f59b83e54a76a2a6f55b7436af71d7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzNjUyNQ==", "bodyText": "moving the documentation to search-index.html.", "url": "https://github.com/IQSS/dataverse/pull/7211#discussion_r486436525", "createdAt": "2020-09-10T15:30:22Z", "author": {"login": "ekraffmiller"}, "path": "doc/sphinx-guides/source/api/native-api.rst", "diffHunk": "@@ -3061,6 +3061,20 @@ Note that if you are attempting to validate a very large number of datasets in y\n  \n      asadmin set server-config.network-config.protocols.protocol.http-listener-1.http.request-timeout-seconds=3600\n \n+\n+\n+Index and Database Consistency\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Get a list of all database objects that are missing in Solr, and Solr documents that are missing in the database::\n+\n+  curl $SERVER_URL/api/admin/index/status\n+\n+Remove all Solr documents that are orphaned (ie not associated with objects in the database)::\n+\n+  curl $SERVER_URL/api/admin/index/clear-orphans\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1OTU1OQ=="}, "originalCommit": {"oid": "fbdac70e25f59b83e54a76a2a6f55b7436af71d7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTAwNjc2OnYy", "diffSide": "RIGHT", "path": "doc/release-notes/4225-stale-solr-records.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToyNzo1MFrOHPWi9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToyNzo1MFrOHPWi9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2MDA4Nw==", "bodyText": "We should fill this in before it goes to QA. If my suggestion below is followed, we would point to http://guides.dataverse.org/en/latest/admin/solr-search-index.html", "url": "https://github.com/IQSS/dataverse/pull/7211#discussion_r485860087", "createdAt": "2020-09-09T19:27:50Z", "author": {"login": "pdurbin"}, "path": "doc/release-notes/4225-stale-solr-records.md", "diffHunk": "@@ -0,0 +1,7 @@\n+## Major Use Cases\n+\n+- Administrators will be able to use new APIs to keep the Solr index and the DB in sync, allowing easier resolution of an issue that would occasionally cause search results to not load. \n+\n+## Notes for Dataverse Installation Administrators\n+\n+New API endpoints... point to Guides", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbdac70e25f59b83e54a76a2a6f55b7436af71d7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTAyODM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/edu/harvard/iq/dataverse/api/Index.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTozMjoyOFrOHPWwrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTozMjoyOFrOHPWwrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2MzU5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             } catch (SearchException ex) {\n          \n          \n            \n                    } catch (SearchException ex) {", "url": "https://github.com/IQSS/dataverse/pull/7211#discussion_r485863596", "createdAt": "2020-09-09T19:32:28Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Index.java", "diffHunk": "@@ -384,15 +384,16 @@ public Response indexStatus() {\n         JsonObjectBuilder contentInDatabaseButStaleInOrMissingFromSolr = getContentInDatabaseButStaleInOrMissingFromSolr();\n \n         JsonObjectBuilder contentInSolrButNotDatabase;\n+        JsonObjectBuilder permissionsInSolrButNotDatabase;\n         try {\n             contentInSolrButNotDatabase = getContentInSolrButNotDatabase();\n-        } catch (SearchException ex) {\n+            permissionsInSolrButNotDatabase = getPermissionsInSolrButNotDatabase();\n+ } catch (SearchException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbdac70e25f59b83e54a76a2a6f55b7436af71d7"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTA4Nzg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/edu/harvard/iq/dataverse/search/SolrIndexServiceBean.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTo0NDoyNVrOHPXW1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo0NDozM1rOHP6WSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3MzM2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * re-indexed Solr was down when a permission was added. The permission\n          \n          \n            \n                 * re-indexed because Solr was down when a permission was added. The permission", "url": "https://github.com/IQSS/dataverse/pull/7211#discussion_r485873365", "createdAt": "2020-09-09T19:44:25Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/search/SolrIndexServiceBean.java", "diffHunk": "@@ -532,12 +528,15 @@ public JsonObjectBuilder deleteAllFromSolrAndResetIndexTimes() throws SolrServer\n     }\n \n     /**\n-     * @todo Do we want to report the root dataverse (id 1, often) in\n-     * permissionsInDatabaseButMissingFromSolr?\n+     * \n      *\n      * @return A list of dvobject ids that should have their permissions\n      * re-indexed Solr was down when a permission was added. The permission", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbdac70e25f59b83e54a76a2a6f55b7436af71d7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ0NjY2NA==", "bodyText": "updated comments", "url": "https://github.com/IQSS/dataverse/pull/7211#discussion_r486446664", "createdAt": "2020-09-10T15:44:33Z", "author": {"login": "ekraffmiller"}, "path": "src/main/java/edu/harvard/iq/dataverse/search/SolrIndexServiceBean.java", "diffHunk": "@@ -532,12 +528,15 @@ public JsonObjectBuilder deleteAllFromSolrAndResetIndexTimes() throws SolrServer\n     }\n \n     /**\n-     * @todo Do we want to report the root dataverse (id 1, often) in\n-     * permissionsInDatabaseButMissingFromSolr?\n+     * \n      *\n      * @return A list of dvobject ids that should have their permissions\n      * re-indexed Solr was down when a permission was added. The permission", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3MzM2NQ=="}, "originalCommit": {"oid": "fbdac70e25f59b83e54a76a2a6f55b7436af71d7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTExODYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/edu/harvard/iq/dataverse/search/SolrIndexServiceBean.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTo1MDoxNlrOHPXquw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo0Mjo1MlrOHP6Rng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3ODQ1OQ==", "bodyText": "As a possible performance optimization, since we're skipping data files anyway, perhaps instead of the dvObjectService.findAll() above we could get just a list of dataverses and datasets. I don't know if it would help with performance or not, or if performance is even a problem.", "url": "https://github.com/IQSS/dataverse/pull/7211#discussion_r485878459", "createdAt": "2020-09-09T19:50:16Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/search/SolrIndexServiceBean.java", "diffHunk": "@@ -547,7 +546,7 @@ public JsonObjectBuilder deleteAllFromSolrAndResetIndexTimes() throws SolrServer\n             Timestamp permissionModificationTime = dvObject.getPermissionModificationTime();\n             Timestamp permissionIndexTime = dvObject.getPermissionIndexTime();\n             if (permissionIndexTime == null) {\n-                if (dvObject.getId() != rootDvId) {\n+                if (dvObject.getId() != rootDvId && !dvObject.isInstanceofDataFile()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbdac70e25f59b83e54a76a2a6f55b7436af71d7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ0NTQ3MA==", "bodyText": "talked about this and decided to see how performance is in production before making a change", "url": "https://github.com/IQSS/dataverse/pull/7211#discussion_r486445470", "createdAt": "2020-09-10T15:42:52Z", "author": {"login": "ekraffmiller"}, "path": "src/main/java/edu/harvard/iq/dataverse/search/SolrIndexServiceBean.java", "diffHunk": "@@ -547,7 +546,7 @@ public JsonObjectBuilder deleteAllFromSolrAndResetIndexTimes() throws SolrServer\n             Timestamp permissionModificationTime = dvObject.getPermissionModificationTime();\n             Timestamp permissionIndexTime = dvObject.getPermissionIndexTime();\n             if (permissionIndexTime == null) {\n-                if (dvObject.getId() != rootDvId) {\n+                if (dvObject.getId() != rootDvId && !dvObject.isInstanceofDataFile()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3ODQ1OQ=="}, "originalCommit": {"oid": "fbdac70e25f59b83e54a76a2a6f55b7436af71d7"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTE0MDc4OnYy", "diffSide": "RIGHT", "path": "src/test/java/edu/harvard/iq/dataverse/api/IndexIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTo1NDozMFrOHPX5gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo0NDowMVrOHP6U0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg4MjI0MA==", "bodyText": "I go back and forth on cleanup like this. One one hand it's nice not to junk up your dev environment with test data. On the other hand, if the delete fails and the whole test suite fails as a result, it's frustrating. One thing I sometimes do is put the delete calls in but don't assert that they succeed. No need to changes anything here. It's just something that popped in my head.", "url": "https://github.com/IQSS/dataverse/pull/7211#discussion_r485882240", "createdAt": "2020-09-09T19:54:30Z", "author": {"login": "pdurbin"}, "path": "src/test/java/edu/harvard/iq/dataverse/api/IndexIT.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package edu.harvard.iq.dataverse.api;\n+\n+import com.jayway.restassured.RestAssured;\n+import static com.jayway.restassured.RestAssured.given;\n+import com.jayway.restassured.path.json.JsonPath;\n+import com.jayway.restassured.response.Response;\n+import static edu.harvard.iq.dataverse.api.UtilIT.API_TOKEN_HTTP_HEADER;\n+import edu.harvard.iq.dataverse.settings.SettingsServiceBean;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+import static javax.ws.rs.core.Response.Status.CREATED;\n+import static javax.ws.rs.core.Response.Status.NO_CONTENT;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import static javax.ws.rs.core.Response.Status.OK;\n+import static junit.framework.Assert.assertEquals;\n+import org.hamcrest.CoreMatchers;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import org.junit.After;\n+\n+public class IndexIT {\n+\n+    private static final Logger logger = Logger.getLogger(IndexIT.class.getCanonicalName());\n+\n+    @BeforeClass\n+    public static void setUpClass() {\n+\n+        RestAssured.baseURI = UtilIT.getRestAssuredBaseUri();\n+\n+        Response makeSureTokenlessSearchIsEnabled = UtilIT.deleteSetting(SettingsServiceBean.Key.SearchApiRequiresToken);\n+        makeSureTokenlessSearchIsEnabled.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+\n+        Response remove = UtilIT.deleteSetting(SettingsServiceBean.Key.ThumbnailSizeLimitImage);\n+        remove.then().assertThat()\n+                .statusCode(200);\n+\n+    }\n+\n+  \n+    @Test\n+    public void testIndexStatus() {\n+\n+        Response createUser = UtilIT.createRandomUser();\n+        createUser.prettyPrint();\n+        String username = UtilIT.getUsernameFromResponse(createUser);\n+        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n+\n+        Response createDataverseResponse = UtilIT.createRandomDataverse(apiToken);\n+        createDataverseResponse.prettyPrint();\n+        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverseResponse);\n+\n+        Response createDatasetResponse = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n+        createDatasetResponse.prettyPrint();\n+        Integer datasetId = UtilIT.getDatasetIdFromResponse(createDatasetResponse);\n+        Response getDatasetJsonNoFiles = UtilIT.nativeGet(datasetId, apiToken);\n+        getDatasetJsonNoFiles.prettyPrint();\n+        String protocol1 = JsonPath.from(getDatasetJsonNoFiles.getBody().asString()).getString(\"data.protocol\");\n+        String authority1 = JsonPath.from(getDatasetJsonNoFiles.getBody().asString()).getString(\"data.authority\");\n+        String identifier1 = JsonPath.from(getDatasetJsonNoFiles.getBody().asString()).getString(\"data.identifier\");\n+        String dataset1PersistentId = protocol1 + \":\" + authority1 + \"/\" + identifier1;\n+\n+        Response uploadMd5File = UtilIT.uploadRandomFile(dataset1PersistentId, apiToken);\n+        uploadMd5File.prettyPrint();\n+        assertEquals(CREATED.getStatusCode(), uploadMd5File.getStatusCode());\n+   \n+        Response response = given()\n+                .header(API_TOKEN_HTTP_HEADER, apiToken)\n+                .get(\"/api/admin/index/status\");\n+        response.prettyPrint();\n+        ArrayList emptyList = new ArrayList<>();\n+        HashMap data = response.getBody().jsonPath().get(\"data.contentInDatabaseButStaleInOrMissingFromIndex\");\n+        System.out.println(data + \" \" + data.getClass());\n+        response.then().assertThat().statusCode(OK.getStatusCode())\n+                .body(\"data.contentInDatabaseButStaleInOrMissingFromIndex.dataverses\", CoreMatchers.equalTo(emptyList))\n+                .body(\"data.contentInDatabaseButStaleInOrMissingFromIndex.datasets\", CoreMatchers.equalTo(emptyList))\n+                .body(\"data.contentInIndexButNotDatabase.dataverses\", CoreMatchers.equalTo(emptyList))\n+                .body(\"data.contentInIndexButNotDatabase.datasets\", CoreMatchers.equalTo(emptyList))\n+                .body(\"data.contentInIndexButNotDatabase.files\", CoreMatchers.equalTo(emptyList))\n+                .body(\"data.permissionsInDatabaseButStaleInOrMissingFromIndex.dvobjects\", CoreMatchers.equalTo(emptyList))\n+                .body(\"data.permissionsInIndexButNotDatabase.permissions\", CoreMatchers.equalTo(emptyList));\n+        \n+        Response getDatasetJsonAfterMd5File = UtilIT.nativeGet(datasetId, apiToken);\n+        getDatasetJsonAfterMd5File.prettyPrint();\n+        getDatasetJsonAfterMd5File.then().assertThat()\n+                .body(\"data.latestVersion.files[0].dataFile.md5\", equalTo(\"0386269a5acb2c57b4eade587ff4db64\"))\n+                .body(\"data.latestVersion.files[0].dataFile.checksum.type\", equalTo(\"MD5\"))\n+                .body(\"data.latestVersion.files[0].dataFile.checksum.value\", equalTo(\"0386269a5acb2c57b4eade587ff4db64\"));\n+\n+        int fileId = JsonPath.from(getDatasetJsonAfterMd5File.getBody().asString()).getInt(\"data.latestVersion.files[0].dataFile.id\");\n+        Response deleteFile = UtilIT.deleteFile(fileId, apiToken);\n+        deleteFile.prettyPrint();\n+        deleteFile.then().assertThat()\n+                .statusCode(NO_CONTENT.getStatusCode());\n+\n+        Response deleteDatasetResponse = UtilIT.deleteDatasetViaNativeApi(datasetId, apiToken);\n+        deleteDatasetResponse.prettyPrint();\n+        deleteDatasetResponse.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+\n+        Response deleteDataverseResponse = UtilIT.deleteDataverse(dataverseAlias, apiToken);\n+        deleteDataverseResponse.prettyPrint();\n+        deleteDataverseResponse.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+\n+        Response deleteUserResponse = UtilIT.deleteUser(username);\n+        deleteUserResponse.prettyPrint();\n+        assertEquals(200, deleteUserResponse.getStatusCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbdac70e25f59b83e54a76a2a6f55b7436af71d7"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ0NjI5MA==", "bodyText": "removing the assert tests from the delete calls.", "url": "https://github.com/IQSS/dataverse/pull/7211#discussion_r486446290", "createdAt": "2020-09-10T15:44:01Z", "author": {"login": "ekraffmiller"}, "path": "src/test/java/edu/harvard/iq/dataverse/api/IndexIT.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package edu.harvard.iq.dataverse.api;\n+\n+import com.jayway.restassured.RestAssured;\n+import static com.jayway.restassured.RestAssured.given;\n+import com.jayway.restassured.path.json.JsonPath;\n+import com.jayway.restassured.response.Response;\n+import static edu.harvard.iq.dataverse.api.UtilIT.API_TOKEN_HTTP_HEADER;\n+import edu.harvard.iq.dataverse.settings.SettingsServiceBean;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.logging.Logger;\n+import static javax.ws.rs.core.Response.Status.CREATED;\n+import static javax.ws.rs.core.Response.Status.NO_CONTENT;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import static javax.ws.rs.core.Response.Status.OK;\n+import static junit.framework.Assert.assertEquals;\n+import org.hamcrest.CoreMatchers;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import org.junit.After;\n+\n+public class IndexIT {\n+\n+    private static final Logger logger = Logger.getLogger(IndexIT.class.getCanonicalName());\n+\n+    @BeforeClass\n+    public static void setUpClass() {\n+\n+        RestAssured.baseURI = UtilIT.getRestAssuredBaseUri();\n+\n+        Response makeSureTokenlessSearchIsEnabled = UtilIT.deleteSetting(SettingsServiceBean.Key.SearchApiRequiresToken);\n+        makeSureTokenlessSearchIsEnabled.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+\n+        Response remove = UtilIT.deleteSetting(SettingsServiceBean.Key.ThumbnailSizeLimitImage);\n+        remove.then().assertThat()\n+                .statusCode(200);\n+\n+    }\n+\n+  \n+    @Test\n+    public void testIndexStatus() {\n+\n+        Response createUser = UtilIT.createRandomUser();\n+        createUser.prettyPrint();\n+        String username = UtilIT.getUsernameFromResponse(createUser);\n+        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n+\n+        Response createDataverseResponse = UtilIT.createRandomDataverse(apiToken);\n+        createDataverseResponse.prettyPrint();\n+        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverseResponse);\n+\n+        Response createDatasetResponse = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n+        createDatasetResponse.prettyPrint();\n+        Integer datasetId = UtilIT.getDatasetIdFromResponse(createDatasetResponse);\n+        Response getDatasetJsonNoFiles = UtilIT.nativeGet(datasetId, apiToken);\n+        getDatasetJsonNoFiles.prettyPrint();\n+        String protocol1 = JsonPath.from(getDatasetJsonNoFiles.getBody().asString()).getString(\"data.protocol\");\n+        String authority1 = JsonPath.from(getDatasetJsonNoFiles.getBody().asString()).getString(\"data.authority\");\n+        String identifier1 = JsonPath.from(getDatasetJsonNoFiles.getBody().asString()).getString(\"data.identifier\");\n+        String dataset1PersistentId = protocol1 + \":\" + authority1 + \"/\" + identifier1;\n+\n+        Response uploadMd5File = UtilIT.uploadRandomFile(dataset1PersistentId, apiToken);\n+        uploadMd5File.prettyPrint();\n+        assertEquals(CREATED.getStatusCode(), uploadMd5File.getStatusCode());\n+   \n+        Response response = given()\n+                .header(API_TOKEN_HTTP_HEADER, apiToken)\n+                .get(\"/api/admin/index/status\");\n+        response.prettyPrint();\n+        ArrayList emptyList = new ArrayList<>();\n+        HashMap data = response.getBody().jsonPath().get(\"data.contentInDatabaseButStaleInOrMissingFromIndex\");\n+        System.out.println(data + \" \" + data.getClass());\n+        response.then().assertThat().statusCode(OK.getStatusCode())\n+                .body(\"data.contentInDatabaseButStaleInOrMissingFromIndex.dataverses\", CoreMatchers.equalTo(emptyList))\n+                .body(\"data.contentInDatabaseButStaleInOrMissingFromIndex.datasets\", CoreMatchers.equalTo(emptyList))\n+                .body(\"data.contentInIndexButNotDatabase.dataverses\", CoreMatchers.equalTo(emptyList))\n+                .body(\"data.contentInIndexButNotDatabase.datasets\", CoreMatchers.equalTo(emptyList))\n+                .body(\"data.contentInIndexButNotDatabase.files\", CoreMatchers.equalTo(emptyList))\n+                .body(\"data.permissionsInDatabaseButStaleInOrMissingFromIndex.dvobjects\", CoreMatchers.equalTo(emptyList))\n+                .body(\"data.permissionsInIndexButNotDatabase.permissions\", CoreMatchers.equalTo(emptyList));\n+        \n+        Response getDatasetJsonAfterMd5File = UtilIT.nativeGet(datasetId, apiToken);\n+        getDatasetJsonAfterMd5File.prettyPrint();\n+        getDatasetJsonAfterMd5File.then().assertThat()\n+                .body(\"data.latestVersion.files[0].dataFile.md5\", equalTo(\"0386269a5acb2c57b4eade587ff4db64\"))\n+                .body(\"data.latestVersion.files[0].dataFile.checksum.type\", equalTo(\"MD5\"))\n+                .body(\"data.latestVersion.files[0].dataFile.checksum.value\", equalTo(\"0386269a5acb2c57b4eade587ff4db64\"));\n+\n+        int fileId = JsonPath.from(getDatasetJsonAfterMd5File.getBody().asString()).getInt(\"data.latestVersion.files[0].dataFile.id\");\n+        Response deleteFile = UtilIT.deleteFile(fileId, apiToken);\n+        deleteFile.prettyPrint();\n+        deleteFile.then().assertThat()\n+                .statusCode(NO_CONTENT.getStatusCode());\n+\n+        Response deleteDatasetResponse = UtilIT.deleteDatasetViaNativeApi(datasetId, apiToken);\n+        deleteDatasetResponse.prettyPrint();\n+        deleteDatasetResponse.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+\n+        Response deleteDataverseResponse = UtilIT.deleteDataverse(dataverseAlias, apiToken);\n+        deleteDataverseResponse.prettyPrint();\n+        deleteDataverseResponse.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+\n+        Response deleteUserResponse = UtilIT.deleteUser(username);\n+        deleteUserResponse.prettyPrint();\n+        assertEquals(200, deleteUserResponse.getStatusCode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg4MjI0MA=="}, "originalCommit": {"oid": "fbdac70e25f59b83e54a76a2a6f55b7436af71d7"}, "originalPosition": 110}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2385, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}