{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MDE2NTgw", "number": 7165, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzozMjo0OFrOEV1IVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDozNzowMFrOEV--zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzI2MDM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/edu/harvard/iq/dataverse/DatasetServiceBean.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzozMjo0OFrOG8zstQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzo1MTo0NFrOG80fSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxNDc3Mw==", "bodyText": "if this submit fails, isn't something beyond logging required?", "url": "https://github.com/IQSS/dataverse/pull/7165#discussion_r466414773", "createdAt": "2020-08-06T13:32:48Z", "author": {"login": "qqmyers"}, "path": "src/main/java/edu/harvard/iq/dataverse/DatasetServiceBean.java", "diffHunk": "@@ -780,21 +780,36 @@ public WorkflowComment addWorkflowComment(WorkflowComment workflowComment) {\n         return workflowComment;\n     }\n     \n+    /**\n+     * This method used to throw CommandException, which was pretty pointless \n+     * seeing how it's called asynchronously. As of v5.0 any CommanExceptiom \n+     * thrown by the FinalizeDatasetPublicationCommand below will be caught \n+     * and we'll log it as a warning - which is the best we can do at this point.\n+     * Any failure notifications to users should be sent from inside the command.\n+     */\n     @Asynchronous\n-    public void callFinalizePublishCommandAsynchronously(Long datasetId, CommandContext ctxt, DataverseRequest request, boolean isPidPrePublished) throws CommandException {\n+    public void callFinalizePublishCommandAsynchronously(Long datasetId, CommandContext ctxt, DataverseRequest request, boolean isPidPrePublished) {\n \n         // Since we are calling the next command asynchronously anyway - sleep here \n         // for a few seconds, just in case, to make sure the database update of \n         // the dataset initiated by the PublishDatasetCommand has finished, \n         // to avoid any concurrency/optimistic lock issues. \n-        try {\n-            Thread.sleep(15000);\n+        // Aug. 2020/v5.0: It appears to be working consistently without any \n+        // sleep here, after the call the method has been moved to the onSuccess()\n+        // portion of the PublishDatasetCommand. I'm going to leave the 1 second\n+        // sleep commented-out below for now: -- L.A.\n+        /*try {\n+            Thread.sleep(1000);\n         } catch (Exception ex) {\n-            logger.warning(\"Failed to sleep for 15 seconds.\");\n-        }\n+            logger.warning(\"Failed to sleep for 1 second.\");\n+        }*/\n         logger.fine(\"Running FinalizeDatasetPublicationCommand, asynchronously\");\n         Dataset theDataset = find(datasetId);\n-        commandEngine.submit(new FinalizeDatasetPublicationCommand(theDataset, request, isPidPrePublished));\n+        try {\n+            commandEngine.submit(new FinalizeDatasetPublicationCommand(theDataset, request, isPidPrePublished));\n+        } catch (CommandException cex) {\n+            logger.warning(\"CommandException caught when executing the asynchronous portion of the Dataset Publication Command.\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c95927af39f1d6fbd0c6a5026ac6ba2f8eb14d3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQyNzcyMQ==", "bodyText": "Not sure what else could be done here.  I added a comment there; we weren't even logging before - that method was throwing CommandException - which was pointless combined with Async.\nThe main idea is that the finalize command should send any notifications, or do any other failure handling internally.", "url": "https://github.com/IQSS/dataverse/pull/7165#discussion_r466427721", "createdAt": "2020-08-06T13:51:44Z", "author": {"login": "landreev"}, "path": "src/main/java/edu/harvard/iq/dataverse/DatasetServiceBean.java", "diffHunk": "@@ -780,21 +780,36 @@ public WorkflowComment addWorkflowComment(WorkflowComment workflowComment) {\n         return workflowComment;\n     }\n     \n+    /**\n+     * This method used to throw CommandException, which was pretty pointless \n+     * seeing how it's called asynchronously. As of v5.0 any CommanExceptiom \n+     * thrown by the FinalizeDatasetPublicationCommand below will be caught \n+     * and we'll log it as a warning - which is the best we can do at this point.\n+     * Any failure notifications to users should be sent from inside the command.\n+     */\n     @Asynchronous\n-    public void callFinalizePublishCommandAsynchronously(Long datasetId, CommandContext ctxt, DataverseRequest request, boolean isPidPrePublished) throws CommandException {\n+    public void callFinalizePublishCommandAsynchronously(Long datasetId, CommandContext ctxt, DataverseRequest request, boolean isPidPrePublished) {\n \n         // Since we are calling the next command asynchronously anyway - sleep here \n         // for a few seconds, just in case, to make sure the database update of \n         // the dataset initiated by the PublishDatasetCommand has finished, \n         // to avoid any concurrency/optimistic lock issues. \n-        try {\n-            Thread.sleep(15000);\n+        // Aug. 2020/v5.0: It appears to be working consistently without any \n+        // sleep here, after the call the method has been moved to the onSuccess()\n+        // portion of the PublishDatasetCommand. I'm going to leave the 1 second\n+        // sleep commented-out below for now: -- L.A.\n+        /*try {\n+            Thread.sleep(1000);\n         } catch (Exception ex) {\n-            logger.warning(\"Failed to sleep for 15 seconds.\");\n-        }\n+            logger.warning(\"Failed to sleep for 1 second.\");\n+        }*/\n         logger.fine(\"Running FinalizeDatasetPublicationCommand, asynchronously\");\n         Dataset theDataset = find(datasetId);\n-        commandEngine.submit(new FinalizeDatasetPublicationCommand(theDataset, request, isPidPrePublished));\n+        try {\n+            commandEngine.submit(new FinalizeDatasetPublicationCommand(theDataset, request, isPidPrePublished));\n+        } catch (CommandException cex) {\n+            logger.warning(\"CommandException caught when executing the asynchronous portion of the Dataset Publication Command.\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxNDc3Mw=="}, "originalCommit": {"oid": "1c95927af39f1d6fbd0c6a5026ac6ba2f8eb14d3"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzI3MjA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/edu/harvard/iq/dataverse/api/Datasets.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzozNTozOVrOG8z0Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTozNDozNVrOG848CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxNjY0Mg==", "bodyText": "does this result in a 200 when the dataset is still inprogress/publishing not yet finalized? Seems like 202 is the right code for that (as it was) and the test should be watching for a 202?", "url": "https://github.com/IQSS/dataverse/pull/7165#discussion_r466416642", "createdAt": "2020-08-06T13:35:39Z", "author": {"login": "qqmyers"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Datasets.java", "diffHunk": "@@ -1020,7 +1020,7 @@ public Response publishDataset(@PathParam(\"id\") String id, @QueryParam(\"type\") S\n             PublishDatasetResult res = execCommand(new PublishDatasetCommand(ds,\n                         createDataverseRequest(user),\n                     isMinor));\n-            return res.isCompleted() ? ok(json(res.getDataset())) : accepted(json(res.getDataset()));\n+            return res.isWorkflow() ? accepted(json(res.getDataset())) : ok(json(res.getDataset()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c95927af39f1d6fbd0c6a5026ac6ba2f8eb14d3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzNDYzNA==", "bodyText": "With the async publication in progress it returns a 200; the presence of the \"finalizing\" lock is the indication of it being in progress.\nTo me it seemed like the 202 return code was specifically added for the workflow situation; and there may be some third party code that relies on it in that context. When the async publication was added we just used that mechanism that was there for the workflow.  But using the same code for this scenario seemed wrong.\nAnd most importantly, yes, this allowed me not to have to modify much more RestAssured code.", "url": "https://github.com/IQSS/dataverse/pull/7165#discussion_r466434634", "createdAt": "2020-08-06T14:01:12Z", "author": {"login": "landreev"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Datasets.java", "diffHunk": "@@ -1020,7 +1020,7 @@ public Response publishDataset(@PathParam(\"id\") String id, @QueryParam(\"type\") S\n             PublishDatasetResult res = execCommand(new PublishDatasetCommand(ds,\n                         createDataverseRequest(user),\n                     isMinor));\n-            return res.isCompleted() ? ok(json(res.getDataset())) : accepted(json(res.getDataset()));\n+            return res.isWorkflow() ? accepted(json(res.getDataset())) : ok(json(res.getDataset()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxNjY0Mg=="}, "originalCommit": {"oid": "1c95927af39f1d6fbd0c6a5026ac6ba2f8eb14d3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0NDQ2Nw==", "bodyText": "I understand the practicality and don't think it's a big issue in terms of any effect, but I think 202 is the right code for anything asynchronous that could fail after you get your response. If its not worth addressing now, I'd suggest a ToDo/note in the code.", "url": "https://github.com/IQSS/dataverse/pull/7165#discussion_r466444467", "createdAt": "2020-08-06T14:15:30Z", "author": {"login": "qqmyers"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Datasets.java", "diffHunk": "@@ -1020,7 +1020,7 @@ public Response publishDataset(@PathParam(\"id\") String id, @QueryParam(\"type\") S\n             PublishDatasetResult res = execCommand(new PublishDatasetCommand(ds,\n                         createDataverseRequest(user),\n                     isMinor));\n-            return res.isCompleted() ? ok(json(res.getDataset())) : accepted(json(res.getDataset()));\n+            return res.isWorkflow() ? accepted(json(res.getDataset())) : ok(json(res.getDataset()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxNjY0Mg=="}, "originalCommit": {"oid": "1c95927af39f1d6fbd0c6a5026ac6ba2f8eb14d3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwMDYxNw==", "bodyText": "So maybe the same code 202, but something in the body to differentiate from the \"workflow\" state. As it was implemented, it was returning the code 202 and {\"status\":\"WORKFLOW...} in both cases - which was wrong.\nIt feels like this warrants its own issue - I'll open it.", "url": "https://github.com/IQSS/dataverse/pull/7165#discussion_r466500617", "createdAt": "2020-08-06T15:34:35Z", "author": {"login": "landreev"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Datasets.java", "diffHunk": "@@ -1020,7 +1020,7 @@ public Response publishDataset(@PathParam(\"id\") String id, @QueryParam(\"type\") S\n             PublishDatasetResult res = execCommand(new PublishDatasetCommand(ds,\n                         createDataverseRequest(user),\n                     isMinor));\n-            return res.isCompleted() ? ok(json(res.getDataset())) : accepted(json(res.getDataset()));\n+            return res.isWorkflow() ? accepted(json(res.getDataset())) : ok(json(res.getDataset()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxNjY0Mg=="}, "originalCommit": {"oid": "1c95927af39f1d6fbd0c6a5026ac6ba2f8eb14d3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzQ3NDEzOnYy", "diffSide": "RIGHT", "path": "src/test/java/edu/harvard/iq/dataverse/api/UtilIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoyMjoyOVrOG81zmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDozMjo1OFrOG82S0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0OTMwNg==", "bodyText": "Broad question - now that finalize is always asynchronous, it looks like these tests check that the publish call succeeds and the lock goes away, but is there anything to check that the async publish succeeded rather than failed? (E.g. test that a new version exists after the lock?).", "url": "https://github.com/IQSS/dataverse/pull/7165#discussion_r466449306", "createdAt": "2020-08-06T14:22:29Z", "author": {"login": "qqmyers"}, "path": "src/test/java/edu/harvard/iq/dataverse/api/UtilIT.java", "diffHunk": "@@ -2232,12 +2251,27 @@ static Boolean sleepForSearch(String searchPart, String apiToken,  String subTre\n \n     }\n     \n-    \n-    \n+    // backward compatibility version of the method that takes long for the id:\n     static Response checkDatasetLocks(long datasetId, String lockType, String apiToken) {\n+        String datasetIdAsString = String.valueOf(datasetId);\n+        return checkDatasetLocks(datasetIdAsString, lockType, apiToken);\n+    }\n+    \n+    static Response checkDatasetLocks(String idOrPersistentId, String lockType, String apiToken) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c95927af39f1d6fbd0c6a5026ac6ba2f8eb14d3"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1NzI5Nw==", "bodyText": "That would be the proper way to handle it, yes.\nIt didn't look like we were ever checking anything other than the return http code of that publish call. But you are right, even that was more than what we are doing now.\nIn many tests the success of the publish call is tested indirectly, because what the test does requires the dataset to be published. But I agree it would be prudent, to check on the version numbers before and after - or perform some other explicit checks.", "url": "https://github.com/IQSS/dataverse/pull/7165#discussion_r466457297", "createdAt": "2020-08-06T14:32:58Z", "author": {"login": "landreev"}, "path": "src/test/java/edu/harvard/iq/dataverse/api/UtilIT.java", "diffHunk": "@@ -2232,12 +2251,27 @@ static Boolean sleepForSearch(String searchPart, String apiToken,  String subTre\n \n     }\n     \n-    \n-    \n+    // backward compatibility version of the method that takes long for the id:\n     static Response checkDatasetLocks(long datasetId, String lockType, String apiToken) {\n+        String datasetIdAsString = String.valueOf(datasetId);\n+        return checkDatasetLocks(datasetIdAsString, lockType, apiToken);\n+    }\n+    \n+    static Response checkDatasetLocks(String idOrPersistentId, String lockType, String apiToken) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0OTMwNg=="}, "originalCommit": {"oid": "1c95927af39f1d6fbd0c6a5026ac6ba2f8eb14d3"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDg2MjI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/edu/harvard/iq/dataverse/DatasetServiceBean.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDozMzowN1rOG9DR1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjozNDozNFrOG9GaqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3MDAzOA==", "bodyText": "Did you try it without this? I'd love to get this removed, if we don't actually need it.", "url": "https://github.com/IQSS/dataverse/pull/7165#discussion_r466670038", "createdAt": "2020-08-06T20:33:07Z", "author": {"login": "scolapasta"}, "path": "src/main/java/edu/harvard/iq/dataverse/DatasetServiceBean.java", "diffHunk": "@@ -780,21 +780,37 @@ public WorkflowComment addWorkflowComment(WorkflowComment workflowComment) {\n         return workflowComment;\n     }\n     \n+    /**\n+     * This method used to throw CommandException, which was pretty pointless \n+     * seeing how it's called asynchronously. As of v5.0 any CommanExceptiom \n+     * thrown by the FinalizeDatasetPublicationCommand below will be caught \n+     * and we'll log it as a warning - which is the best we can do at this point.\n+     * Any failure notifications to users should be sent from inside the command.\n+     */\n     @Asynchronous\n-    public void callFinalizePublishCommandAsynchronously(Long datasetId, CommandContext ctxt, DataverseRequest request, boolean isPidPrePublished) throws CommandException {\n+    @TransactionAttribute(TransactionAttributeType.SUPPORTS)\n+    public void callFinalizePublishCommandAsynchronously(Long datasetId, CommandContext ctxt, DataverseRequest request, boolean isPidPrePublished) {\n \n         // Since we are calling the next command asynchronously anyway - sleep here \n         // for a few seconds, just in case, to make sure the database update of \n         // the dataset initiated by the PublishDatasetCommand has finished, \n         // to avoid any concurrency/optimistic lock issues. \n+        // Aug. 2020/v5.0: It MAY be working consistently without any \n+        // sleep here, after the call the method has been moved to the onSuccess()\n+        // portion of the PublishDatasetCommand. I'm going to leave the 1 second\n+        // sleep below, for just in case reasons: -- L.A.\n         try {\n-            Thread.sleep(15000);\n+            Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32756fce3428621a8d28699bbf59cc3fffa5d955"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyMTQ0OA==", "bodyText": "Can I leave it in place?\nI initially removed it completely; but I'm just afraid to take it out. Publishing appears to be working (at least I haven't seen it fail yet). But I believe if it happens instantly/very fast, on small datasets w/ fast registration, etc., it can confuse the autorefresh on the page.", "url": "https://github.com/IQSS/dataverse/pull/7165#discussion_r466721448", "createdAt": "2020-08-06T22:34:34Z", "author": {"login": "landreev"}, "path": "src/main/java/edu/harvard/iq/dataverse/DatasetServiceBean.java", "diffHunk": "@@ -780,21 +780,37 @@ public WorkflowComment addWorkflowComment(WorkflowComment workflowComment) {\n         return workflowComment;\n     }\n     \n+    /**\n+     * This method used to throw CommandException, which was pretty pointless \n+     * seeing how it's called asynchronously. As of v5.0 any CommanExceptiom \n+     * thrown by the FinalizeDatasetPublicationCommand below will be caught \n+     * and we'll log it as a warning - which is the best we can do at this point.\n+     * Any failure notifications to users should be sent from inside the command.\n+     */\n     @Asynchronous\n-    public void callFinalizePublishCommandAsynchronously(Long datasetId, CommandContext ctxt, DataverseRequest request, boolean isPidPrePublished) throws CommandException {\n+    @TransactionAttribute(TransactionAttributeType.SUPPORTS)\n+    public void callFinalizePublishCommandAsynchronously(Long datasetId, CommandContext ctxt, DataverseRequest request, boolean isPidPrePublished) {\n \n         // Since we are calling the next command asynchronously anyway - sleep here \n         // for a few seconds, just in case, to make sure the database update of \n         // the dataset initiated by the PublishDatasetCommand has finished, \n         // to avoid any concurrency/optimistic lock issues. \n+        // Aug. 2020/v5.0: It MAY be working consistently without any \n+        // sleep here, after the call the method has been moved to the onSuccess()\n+        // portion of the PublishDatasetCommand. I'm going to leave the 1 second\n+        // sleep below, for just in case reasons: -- L.A.\n         try {\n-            Thread.sleep(15000);\n+            Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3MDAzOA=="}, "originalCommit": {"oid": "32756fce3428621a8d28699bbf59cc3fffa5d955"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDg3NDM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/PublishDatasetCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDozNzowMFrOG9DZVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjozMTozNlrOG9GW-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3MTk1OQ==", "bodyText": "I guess this is just to be extra safe, but would this ever be false? (since we're already in OnSuccess, that means the execute succeeded, no?", "url": "https://github.com/IQSS/dataverse/pull/7165#discussion_r466671959", "createdAt": "2020-08-06T20:37:00Z", "author": {"login": "scolapasta"}, "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/PublishDatasetCommand.java", "diffHunk": "@@ -196,6 +199,24 @@ private void verifyCommandArguments() throws IllegalCommandException {\n                 throw new IllegalCommandException(\"Cannot release as minor version. Re-try as major release.\", this);\n             }\n         }\n-    }   \n+    }\n+    \n+    \n+    @Override\n+    public boolean onSuccess(CommandContext ctxt, Object r) {\n+        Dataset dataset = null;\n+        try{\n+            dataset = (Dataset) r;\n+        } catch (ClassCastException e){\n+            dataset  = ((PublishDatasetResult) r).getDataset();\n+        }\n+\n+        if (dataset != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32756fce3428621a8d28699bbf59cc3fffa5d955"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyMDUwNg==", "bodyText": "I guess in case something else still goes wrong, in some other way? - idk.", "url": "https://github.com/IQSS/dataverse/pull/7165#discussion_r466720506", "createdAt": "2020-08-06T22:31:36Z", "author": {"login": "landreev"}, "path": "src/main/java/edu/harvard/iq/dataverse/engine/command/impl/PublishDatasetCommand.java", "diffHunk": "@@ -196,6 +199,24 @@ private void verifyCommandArguments() throws IllegalCommandException {\n                 throw new IllegalCommandException(\"Cannot release as minor version. Re-try as major release.\", this);\n             }\n         }\n-    }   \n+    }\n+    \n+    \n+    @Override\n+    public boolean onSuccess(CommandContext ctxt, Object r) {\n+        Dataset dataset = null;\n+        try{\n+            dataset = (Dataset) r;\n+        } catch (ClassCastException e){\n+            dataset  = ((PublishDatasetResult) r).getDataset();\n+        }\n+\n+        if (dataset != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3MTk1OQ=="}, "originalCommit": {"oid": "32756fce3428621a8d28699bbf59cc3fffa5d955"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2373, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}