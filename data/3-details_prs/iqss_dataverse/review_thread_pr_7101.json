{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxNDg3MjU3", "number": 7101, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODozMzo0MFrOEQUqRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNToyNzo0OFrOEQrUQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTUxMTczOnYy", "diffSide": "LEFT", "path": "src/main/java/edu/harvard/iq/dataverse/SettingsWrapper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODozMzo0MFrOG0aZuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOTo1NTo0OVrOG0dFvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxMTcwNw==", "bodyText": "There's something weird going on. I expected isDataCiteInstallation to be in use by dataset.xhtml but it's not, in either this branch or the develop branch. It was added in 28f3222 to grey out the publish button if a DOI hasn't been registered. But now this logic is... gone? Do we still want it? Flagging @landreev .", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r457611707", "createdAt": "2020-07-20T18:33:40Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/SettingsWrapper.java", "diffHunk": "@@ -251,15 +251,6 @@ public boolean isDoiInstallation() {\n         }\n     }\n \n-    public boolean isDataCiteInstallation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83a44a20db7cd73c0cd8531eee5a6758f0c661e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxOTEwMA==", "bodyText": "I only deleted this method because I couldn't find it being used. If it is, we can restore.", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r457619100", "createdAt": "2020-07-20T18:47:09Z", "author": {"login": "qqmyers"}, "path": "src/main/java/edu/harvard/iq/dataverse/SettingsWrapper.java", "diffHunk": "@@ -251,15 +251,6 @@ public boolean isDoiInstallation() {\n         }\n     }\n \n-    public boolean isDataCiteInstallation() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxMTcwNw=="}, "originalCommit": {"oid": "b83a44a20db7cd73c0cd8531eee5a6758f0c661e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1NTc0MQ==", "bodyText": "@qqmyers you're right that it isn't being used but that's only because something got lost on the xhtml side. Please restore it. For more details, please see #7102.", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r457655741", "createdAt": "2020-07-20T19:55:49Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/SettingsWrapper.java", "diffHunk": "@@ -251,15 +251,6 @@ public boolean isDoiInstallation() {\n         }\n     }\n \n-    public boolean isDataCiteInstallation() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxMTcwNw=="}, "originalCommit": {"oid": "b83a44a20db7cd73c0cd8531eee5a6758f0c661e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTUxMzYxOnYy", "diffSide": "LEFT", "path": "src/main/java/edu/harvard/iq/dataverse/DOIDataCiteServiceBean.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODozNDoxOVrOG0aa-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODo1NzowMlrOG0bMPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxMjAyNw==", "bodyText": "@qqmyers I don't think we talked about this updateIdentifierStatus method. Was it simply unused?", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r457612027", "createdAt": "2020-07-20T18:34:19Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/DOIDataCiteServiceBean.java", "diffHunk": "@@ -171,33 +178,79 @@ public void deleteRecordFromCache(Dataset datasetIn){\n         }\n     }\n \n+    /*\n+     * Deletes a DOI if it is in DRAFT/RESERVED state or removes metadata and changes it from PUBLIC/FINDABLE to REGISTERED.\n+     */\n+    @Override\n+    public void deleteIdentifier(DvObject dvObject) throws Exception {\n+        logger.log(Level.FINE,\"deleteIdentifier\");\n+        String identifier = getIdentifier(dvObject);\n+        Map<String, String> doiMetadata = new HashMap<>();\n+        try {\n+            doiMetadata = doiDataCiteRegisterService.getMetadata(identifier);\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"deleteIdentifier: get matadata failed. \" + e.getMessage(), e);\n+        }\n+\n+        String idStatus = doiMetadata.get(\"_status\");\n+        if ( idStatus != null ) {\n+            switch ( idStatus ) {\n+                case RESERVED:\n+                case DRAFT:    \n+                    logger.log(Level.INFO, \"Delete status is reserved..\");\n+                    try {\n+                    \t//service only removes the identifier from the cache (since it was written before DOIs could be registered in draft state)\n+                        doiDataCiteRegisterService.deleteIdentifier(identifier);\n+                        //So we call the deleteDraftIdentifier method below until things are refactored\n+                        deleteDraftIdentifier(dvObject);\n+                    } catch (Exception e) {\n+                        logger.log(Level.WARNING, \"delete failed: \" + e.getMessage(), e);\n+                    }\n+                    break;\n+\n+                case PUBLIC:\n+                case FINDABLE:\n+                    //if public then it has been released set to unavailable and reset target to n2t url\n+                    Map<String, String> metadata = addDOIMetadataForDestroyedDataset(dvObject);\n+                    metadata.put(\"_status\", \"registered\");\n+                    metadata.put(\"_target\", getTargetUrl(dvObject));                   \n+                    doiDataCiteRegisterService.deactivateIdentifier(identifier, metadata, dvObject);\n+                    break;\n+            }\n+        }\n+    }\n+        \n     /**\n      * Deletes DOI from the DataCite side, if possible. Only \"draft\" DOIs can be\n      * deleted.\n      */\n-    @Override\n-    public void deleteIdentifier(DvObject dvObject) throws IOException {\n+    private void deleteDraftIdentifier(DvObject dvObject) throws IOException {\n+    \t\n+    \t//ToDo - incorporate into DataCiteRESTfulClient\n         String baseUrl = System.getProperty(\"doi.baseurlstringnext\");\n         String username = System.getProperty(\"doi.username\");\n         String password = System.getProperty(\"doi.password\");\n-        String pid = dvObject.getGlobalId().asString();\n-        int result = PidUtil.deleteDoi(pid, baseUrl, username, password);\n-        logger.fine(\"Result of deleteIdentifier for \" + pid + \": \" + result);\n-    }\n+        GlobalId doi = dvObject.getGlobalId();\n+        /**\n+         * Deletes the DOI from DataCite if it can. Returns 204 if PID was deleted\n+         * (only possible for \"draft\" DOIs), 405 (method not allowed) if the DOI\n+         * wasn't deleted (because it's in \"findable\" state, for example, 404 if the\n+         * DOI wasn't found, and possibly other status codes such as 500 if DataCite\n+         * is down.\n+         */\n \n-    private boolean updateIdentifierStatus(DvObject dvObject, String statusIn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83a44a20db7cd73c0cd8531eee5a6758f0c661e"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYyNDYzNw==", "bodyText": "Yeah - looks like this private method exists in the EZID and Handle code, called by the public publicizeIdentifier() method but the DataCite code just have the same code directly in the publicizeIdentifier method.", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r457624637", "createdAt": "2020-07-20T18:57:02Z", "author": {"login": "qqmyers"}, "path": "src/main/java/edu/harvard/iq/dataverse/DOIDataCiteServiceBean.java", "diffHunk": "@@ -171,33 +178,79 @@ public void deleteRecordFromCache(Dataset datasetIn){\n         }\n     }\n \n+    /*\n+     * Deletes a DOI if it is in DRAFT/RESERVED state or removes metadata and changes it from PUBLIC/FINDABLE to REGISTERED.\n+     */\n+    @Override\n+    public void deleteIdentifier(DvObject dvObject) throws Exception {\n+        logger.log(Level.FINE,\"deleteIdentifier\");\n+        String identifier = getIdentifier(dvObject);\n+        Map<String, String> doiMetadata = new HashMap<>();\n+        try {\n+            doiMetadata = doiDataCiteRegisterService.getMetadata(identifier);\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"deleteIdentifier: get matadata failed. \" + e.getMessage(), e);\n+        }\n+\n+        String idStatus = doiMetadata.get(\"_status\");\n+        if ( idStatus != null ) {\n+            switch ( idStatus ) {\n+                case RESERVED:\n+                case DRAFT:    \n+                    logger.log(Level.INFO, \"Delete status is reserved..\");\n+                    try {\n+                    \t//service only removes the identifier from the cache (since it was written before DOIs could be registered in draft state)\n+                        doiDataCiteRegisterService.deleteIdentifier(identifier);\n+                        //So we call the deleteDraftIdentifier method below until things are refactored\n+                        deleteDraftIdentifier(dvObject);\n+                    } catch (Exception e) {\n+                        logger.log(Level.WARNING, \"delete failed: \" + e.getMessage(), e);\n+                    }\n+                    break;\n+\n+                case PUBLIC:\n+                case FINDABLE:\n+                    //if public then it has been released set to unavailable and reset target to n2t url\n+                    Map<String, String> metadata = addDOIMetadataForDestroyedDataset(dvObject);\n+                    metadata.put(\"_status\", \"registered\");\n+                    metadata.put(\"_target\", getTargetUrl(dvObject));                   \n+                    doiDataCiteRegisterService.deactivateIdentifier(identifier, metadata, dvObject);\n+                    break;\n+            }\n+        }\n+    }\n+        \n     /**\n      * Deletes DOI from the DataCite side, if possible. Only \"draft\" DOIs can be\n      * deleted.\n      */\n-    @Override\n-    public void deleteIdentifier(DvObject dvObject) throws IOException {\n+    private void deleteDraftIdentifier(DvObject dvObject) throws IOException {\n+    \t\n+    \t//ToDo - incorporate into DataCiteRESTfulClient\n         String baseUrl = System.getProperty(\"doi.baseurlstringnext\");\n         String username = System.getProperty(\"doi.username\");\n         String password = System.getProperty(\"doi.password\");\n-        String pid = dvObject.getGlobalId().asString();\n-        int result = PidUtil.deleteDoi(pid, baseUrl, username, password);\n-        logger.fine(\"Result of deleteIdentifier for \" + pid + \": \" + result);\n-    }\n+        GlobalId doi = dvObject.getGlobalId();\n+        /**\n+         * Deletes the DOI from DataCite if it can. Returns 204 if PID was deleted\n+         * (only possible for \"draft\" DOIs), 405 (method not allowed) if the DOI\n+         * wasn't deleted (because it's in \"findable\" state, for example, 404 if the\n+         * DOI wasn't found, and possibly other status codes such as 500 if DataCite\n+         * is down.\n+         */\n \n-    private boolean updateIdentifierStatus(DvObject dvObject, String statusIn) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxMjAyNw=="}, "originalCommit": {"oid": "b83a44a20db7cd73c0cd8531eee5a6758f0c661e"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTUxNzQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/edu/harvard/iq/dataverse/DOIDataCiteServiceBean.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODozNTozMFrOG0adiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODo0ODozM1rOG0a5fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxMjY4MQ==", "bodyText": "What happens if this deleteDraftIdentifier method is called on a non-DataCite installation (Handle or EZID)?", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r457612681", "createdAt": "2020-07-20T18:35:30Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/DOIDataCiteServiceBean.java", "diffHunk": "@@ -171,33 +178,79 @@ public void deleteRecordFromCache(Dataset datasetIn){\n         }\n     }\n \n+    /*\n+     * Deletes a DOI if it is in DRAFT/RESERVED state or removes metadata and changes it from PUBLIC/FINDABLE to REGISTERED.\n+     */\n+    @Override\n+    public void deleteIdentifier(DvObject dvObject) throws Exception {\n+        logger.log(Level.FINE,\"deleteIdentifier\");\n+        String identifier = getIdentifier(dvObject);\n+        Map<String, String> doiMetadata = new HashMap<>();\n+        try {\n+            doiMetadata = doiDataCiteRegisterService.getMetadata(identifier);\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"deleteIdentifier: get matadata failed. \" + e.getMessage(), e);\n+        }\n+\n+        String idStatus = doiMetadata.get(\"_status\");\n+        if ( idStatus != null ) {\n+            switch ( idStatus ) {\n+                case RESERVED:\n+                case DRAFT:    \n+                    logger.log(Level.INFO, \"Delete status is reserved..\");\n+                    try {\n+                    \t//service only removes the identifier from the cache (since it was written before DOIs could be registered in draft state)\n+                        doiDataCiteRegisterService.deleteIdentifier(identifier);\n+                        //So we call the deleteDraftIdentifier method below until things are refactored\n+                        deleteDraftIdentifier(dvObject);\n+                    } catch (Exception e) {\n+                        logger.log(Level.WARNING, \"delete failed: \" + e.getMessage(), e);\n+                    }\n+                    break;\n+\n+                case PUBLIC:\n+                case FINDABLE:\n+                    //if public then it has been released set to unavailable and reset target to n2t url\n+                    Map<String, String> metadata = addDOIMetadataForDestroyedDataset(dvObject);\n+                    metadata.put(\"_status\", \"registered\");\n+                    metadata.put(\"_target\", getTargetUrl(dvObject));                   \n+                    doiDataCiteRegisterService.deactivateIdentifier(identifier, metadata, dvObject);\n+                    break;\n+            }\n+        }\n+    }\n+        \n     /**\n      * Deletes DOI from the DataCite side, if possible. Only \"draft\" DOIs can be\n      * deleted.\n      */\n-    @Override\n-    public void deleteIdentifier(DvObject dvObject) throws IOException {\n+    private void deleteDraftIdentifier(DvObject dvObject) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83a44a20db7cd73c0cd8531eee5a6758f0c661e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxODUyMQ==", "bodyText": "It's private in the DataCite code. THe code here could be put in the public deleteIdentifier method - just decided to keep it separate since it will hopefully become part of the doiDataCiteRegisterService.deleteIdentifier(identifier); call on line 204 at some point.", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r457618521", "createdAt": "2020-07-20T18:46:05Z", "author": {"login": "qqmyers"}, "path": "src/main/java/edu/harvard/iq/dataverse/DOIDataCiteServiceBean.java", "diffHunk": "@@ -171,33 +178,79 @@ public void deleteRecordFromCache(Dataset datasetIn){\n         }\n     }\n \n+    /*\n+     * Deletes a DOI if it is in DRAFT/RESERVED state or removes metadata and changes it from PUBLIC/FINDABLE to REGISTERED.\n+     */\n+    @Override\n+    public void deleteIdentifier(DvObject dvObject) throws Exception {\n+        logger.log(Level.FINE,\"deleteIdentifier\");\n+        String identifier = getIdentifier(dvObject);\n+        Map<String, String> doiMetadata = new HashMap<>();\n+        try {\n+            doiMetadata = doiDataCiteRegisterService.getMetadata(identifier);\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"deleteIdentifier: get matadata failed. \" + e.getMessage(), e);\n+        }\n+\n+        String idStatus = doiMetadata.get(\"_status\");\n+        if ( idStatus != null ) {\n+            switch ( idStatus ) {\n+                case RESERVED:\n+                case DRAFT:    \n+                    logger.log(Level.INFO, \"Delete status is reserved..\");\n+                    try {\n+                    \t//service only removes the identifier from the cache (since it was written before DOIs could be registered in draft state)\n+                        doiDataCiteRegisterService.deleteIdentifier(identifier);\n+                        //So we call the deleteDraftIdentifier method below until things are refactored\n+                        deleteDraftIdentifier(dvObject);\n+                    } catch (Exception e) {\n+                        logger.log(Level.WARNING, \"delete failed: \" + e.getMessage(), e);\n+                    }\n+                    break;\n+\n+                case PUBLIC:\n+                case FINDABLE:\n+                    //if public then it has been released set to unavailable and reset target to n2t url\n+                    Map<String, String> metadata = addDOIMetadataForDestroyedDataset(dvObject);\n+                    metadata.put(\"_status\", \"registered\");\n+                    metadata.put(\"_target\", getTargetUrl(dvObject));                   \n+                    doiDataCiteRegisterService.deactivateIdentifier(identifier, metadata, dvObject);\n+                    break;\n+            }\n+        }\n+    }\n+        \n     /**\n      * Deletes DOI from the DataCite side, if possible. Only \"draft\" DOIs can be\n      * deleted.\n      */\n-    @Override\n-    public void deleteIdentifier(DvObject dvObject) throws IOException {\n+    private void deleteDraftIdentifier(DvObject dvObject) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxMjY4MQ=="}, "originalCommit": {"oid": "b83a44a20db7cd73c0cd8531eee5a6758f0c661e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxOTgzOA==", "bodyText": "Ah, right, I forgot we're in the DataCite-specific bean. Thanks.", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r457619838", "createdAt": "2020-07-20T18:48:33Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/DOIDataCiteServiceBean.java", "diffHunk": "@@ -171,33 +178,79 @@ public void deleteRecordFromCache(Dataset datasetIn){\n         }\n     }\n \n+    /*\n+     * Deletes a DOI if it is in DRAFT/RESERVED state or removes metadata and changes it from PUBLIC/FINDABLE to REGISTERED.\n+     */\n+    @Override\n+    public void deleteIdentifier(DvObject dvObject) throws Exception {\n+        logger.log(Level.FINE,\"deleteIdentifier\");\n+        String identifier = getIdentifier(dvObject);\n+        Map<String, String> doiMetadata = new HashMap<>();\n+        try {\n+            doiMetadata = doiDataCiteRegisterService.getMetadata(identifier);\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"deleteIdentifier: get matadata failed. \" + e.getMessage(), e);\n+        }\n+\n+        String idStatus = doiMetadata.get(\"_status\");\n+        if ( idStatus != null ) {\n+            switch ( idStatus ) {\n+                case RESERVED:\n+                case DRAFT:    \n+                    logger.log(Level.INFO, \"Delete status is reserved..\");\n+                    try {\n+                    \t//service only removes the identifier from the cache (since it was written before DOIs could be registered in draft state)\n+                        doiDataCiteRegisterService.deleteIdentifier(identifier);\n+                        //So we call the deleteDraftIdentifier method below until things are refactored\n+                        deleteDraftIdentifier(dvObject);\n+                    } catch (Exception e) {\n+                        logger.log(Level.WARNING, \"delete failed: \" + e.getMessage(), e);\n+                    }\n+                    break;\n+\n+                case PUBLIC:\n+                case FINDABLE:\n+                    //if public then it has been released set to unavailable and reset target to n2t url\n+                    Map<String, String> metadata = addDOIMetadataForDestroyedDataset(dvObject);\n+                    metadata.put(\"_status\", \"registered\");\n+                    metadata.put(\"_target\", getTargetUrl(dvObject));                   \n+                    doiDataCiteRegisterService.deactivateIdentifier(identifier, metadata, dvObject);\n+                    break;\n+            }\n+        }\n+    }\n+        \n     /**\n      * Deletes DOI from the DataCite side, if possible. Only \"draft\" DOIs can be\n      * deleted.\n      */\n-    @Override\n-    public void deleteIdentifier(DvObject dvObject) throws IOException {\n+    private void deleteDraftIdentifier(DvObject dvObject) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxMjY4MQ=="}, "originalCommit": {"oid": "b83a44a20db7cd73c0cd8531eee5a6758f0c661e"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTUyNzg0OnYy", "diffSide": "LEFT", "path": "src/main/java/edu/harvard/iq/dataverse/pidproviders/PidUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODozODozNVrOG0akBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNToxMjo0NVrOG08yoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxNDM0Mw==", "bodyText": "The test in PidUtilTest that calls this method should be deleted:\n-------------------------------------------------------------\nCOMPILATION ERROR : \n-------------------------------------------------------------\nedu/harvard/iq/dataverse/pidproviders/PidUtilTest.java:[35,29] cannot find symbol\n  symbol:   method deleteDoi(java.lang.String,java.lang.String,java.lang.String,java.lang.String)\n  location: class edu.harvard.iq.dataverse.pidproviders.PidUtil\n1 error\n\nSee also https://travis-ci.org/github/IQSS/dataverse/builds/710110797", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r457614343", "createdAt": "2020-07-20T18:38:35Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/pidproviders/PidUtil.java", "diffHunk": "@@ -83,26 +83,4 @@ private static String acceptOnlyDoi(String persistentId) {\n         }\n         return globalId.getAuthority() + \"/\" + globalId.getIdentifier();\n     }\n-\n-    /**\n-     * Deletes the DOI from DataCite if it can. Returns 204 if PID was deleted\n-     * (only possible for \"draft\" DOIs), 405 (method not allowed) if the DOI\n-     * wasn't deleted (because it's in \"findable\" state, for example, 404 if the\n-     * DOI wasn't found, and possibly other status codes such as 500 if DataCite\n-     * is down.\n-     */\n-    public static int deleteDoi(String persistentId, String baseUrl, String username, String password) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83a44a20db7cd73c0cd8531eee5a6758f0c661e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3NTEzNw==", "bodyText": "Fixed.", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r458175137", "createdAt": "2020-07-21T15:12:45Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/pidproviders/PidUtil.java", "diffHunk": "@@ -83,26 +83,4 @@ private static String acceptOnlyDoi(String persistentId) {\n         }\n         return globalId.getAuthority() + \"/\" + globalId.getIdentifier();\n     }\n-\n-    /**\n-     * Deletes the DOI from DataCite if it can. Returns 204 if PID was deleted\n-     * (only possible for \"draft\" DOIs), 405 (method not allowed) if the DOI\n-     * wasn't deleted (because it's in \"findable\" state, for example, 404 if the\n-     * DOI wasn't found, and possibly other status codes such as 500 if DataCite\n-     * is down.\n-     */\n-    public static int deleteDoi(String persistentId, String baseUrl, String username, String password) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxNDM0Mw=="}, "originalCommit": {"oid": "b83a44a20db7cd73c0cd8531eee5a6758f0c661e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTIyMzcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/edu/harvard/iq/dataverse/api/Pids.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNToyNzo0OFrOG09fXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTo1MDowMFrOG1xxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NjU5MA==", "bodyText": "This \"isReleased\" check is making me question if we should remove this \"delete PID\" API endpoint altogether (as well as the DeletePidCommand and docs, of course).\nI added it because I was looking at DataCite APIs from a CRUD perspective. How can I create a PID, read it, update it, delete it. I was learning how to do these things with curl and I'm aware that sometimes sysadmins have a need to operate on the DataCite API directly to fix certain things. My thought was that we could make it easier by giving them APIs in Dataverse to operate on DataCite, rather than re-documenting the DataCite API or simply sending them to those docs.\nThe other thing I was thinking when adding this Delete PID API is that I wanted a way to blank out GlobalIdCreateTime and IdentifierRegistered so I could test the \"register PID\" API (which I still think is a useful, necessary API). This is much more of a dev concern than prod, however.", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r458186590", "createdAt": "2020-07-21T15:27:48Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Pids.java", "diffHunk": "@@ -104,6 +104,12 @@ public Response reservePid(@PathParam(\"id\") String idSupplied) {\n     public Response deletePid(@PathParam(\"id\") String idSupplied) {\n         try {\n             Dataset dataset = findDatasetOrDie(idSupplied);\n+            //Restrict to never-published datasets (that should have draft/nonpublic pids). The underlying code will invalidate\n+            //pids that have been made public by a pid-specific method, but it's not clear that invalidating such a pid via an api that doesn't\n+            //destroy the dataset is a good idea.\n+            if(dataset.isReleased()) {\n+            \treturn badRequest(\"Not allowed for Datasets that have been published.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37f2b45a98f4a11d2b2a09cb4cf21925ecdf426c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNzA5MA==", "bodyText": "I would agree that having an API just for dev or test should either be removed or moved to a different area of the API (I think we have admin/test? we could also add admin/dev?)", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r458207090", "createdAt": "2020-07-21T15:55:12Z", "author": {"login": "scolapasta"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Pids.java", "diffHunk": "@@ -104,6 +104,12 @@ public Response reservePid(@PathParam(\"id\") String idSupplied) {\n     public Response deletePid(@PathParam(\"id\") String idSupplied) {\n         try {\n             Dataset dataset = findDatasetOrDie(idSupplied);\n+            //Restrict to never-published datasets (that should have draft/nonpublic pids). The underlying code will invalidate\n+            //pids that have been made public by a pid-specific method, but it's not clear that invalidating such a pid via an api that doesn't\n+            //destroy the dataset is a good idea.\n+            if(dataset.isReleased()) {\n+            \treturn badRequest(\"Not allowed for Datasets that have been published.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NjU5MA=="}, "originalCommit": {"oid": "37f2b45a98f4a11d2b2a09cb4cf21925ecdf426c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzMDc1MA==", "bodyText": "Moving this, or all of these calls to admin, and then potentially removing the !isReleased() restriction could make sense - if anyone has been destroying datasets with earlier versions of Dataverse, a way to sync up with current practice might be helpful.", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r458230750", "createdAt": "2020-07-21T16:29:48Z", "author": {"login": "qqmyers"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Pids.java", "diffHunk": "@@ -104,6 +104,12 @@ public Response reservePid(@PathParam(\"id\") String idSupplied) {\n     public Response deletePid(@PathParam(\"id\") String idSupplied) {\n         try {\n             Dataset dataset = findDatasetOrDie(idSupplied);\n+            //Restrict to never-published datasets (that should have draft/nonpublic pids). The underlying code will invalidate\n+            //pids that have been made public by a pid-specific method, but it's not clear that invalidating such a pid via an api that doesn't\n+            //destroy the dataset is a good idea.\n+            if(dataset.isReleased()) {\n+            \treturn badRequest(\"Not allowed for Datasets that have been published.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NjU5MA=="}, "originalCommit": {"oid": "37f2b45a98f4a11d2b2a09cb4cf21925ecdf426c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzMjAxOA==", "bodyText": "is there a best practice about only having isSuperUser() restrictions for admin api calls? (I seem to remember that argument from something I did, but not sure if it was a general practice.)", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r458232018", "createdAt": "2020-07-21T16:31:47Z", "author": {"login": "qqmyers"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Pids.java", "diffHunk": "@@ -104,6 +104,12 @@ public Response reservePid(@PathParam(\"id\") String idSupplied) {\n     public Response deletePid(@PathParam(\"id\") String idSupplied) {\n         try {\n             Dataset dataset = findDatasetOrDie(idSupplied);\n+            //Restrict to never-published datasets (that should have draft/nonpublic pids). The underlying code will invalidate\n+            //pids that have been made public by a pid-specific method, but it's not clear that invalidating such a pid via an api that doesn't\n+            //destroy the dataset is a good idea.\n+            if(dataset.isReleased()) {\n+            \treturn badRequest(\"Not allowed for Datasets that have been published.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NjU5MA=="}, "originalCommit": {"oid": "37f2b45a98f4a11d2b2a09cb4cf21925ecdf426c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzNDY4MQ==", "bodyText": "they don't have isSuperUser() in the code, because they don't require a token - things like indexing, etc. They are protected by security policy in that they can only be run from localhost. (they also don't use commands, since commands require user / permission checks).", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r458234681", "createdAt": "2020-07-21T16:35:57Z", "author": {"login": "scolapasta"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Pids.java", "diffHunk": "@@ -104,6 +104,12 @@ public Response reservePid(@PathParam(\"id\") String idSupplied) {\n     public Response deletePid(@PathParam(\"id\") String idSupplied) {\n         try {\n             Dataset dataset = findDatasetOrDie(idSupplied);\n+            //Restrict to never-published datasets (that should have draft/nonpublic pids). The underlying code will invalidate\n+            //pids that have been made public by a pid-specific method, but it's not clear that invalidating such a pid via an api that doesn't\n+            //destroy the dataset is a good idea.\n+            if(dataset.isReleased()) {\n+            \treturn badRequest(\"Not allowed for Datasets that have been published.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NjU5MA=="}, "originalCommit": {"oid": "37f2b45a98f4a11d2b2a09cb4cf21925ecdf426c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0MTg0Mg==", "bodyText": "There are actually a bunch in Admin.java (some from me) but maybe they're not needed. My question was more in the other direction and taking a look, I see there are lots of non-admin api calls that have a superuser restriction. (If there weren't it might add to the argument that the Pids api should be admin.)", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r458241842", "createdAt": "2020-07-21T16:46:48Z", "author": {"login": "qqmyers"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Pids.java", "diffHunk": "@@ -104,6 +104,12 @@ public Response reservePid(@PathParam(\"id\") String idSupplied) {\n     public Response deletePid(@PathParam(\"id\") String idSupplied) {\n         try {\n             Dataset dataset = findDatasetOrDie(idSupplied);\n+            //Restrict to never-published datasets (that should have draft/nonpublic pids). The underlying code will invalidate\n+            //pids that have been made public by a pid-specific method, but it's not clear that invalidating such a pid via an api that doesn't\n+            //destroy the dataset is a good idea.\n+            if(dataset.isReleased()) {\n+            \treturn badRequest(\"Not allowed for Datasets that have been published.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NjU5MA=="}, "originalCommit": {"oid": "37f2b45a98f4a11d2b2a09cb4cf21925ecdf426c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0MzYwOQ==", "bodyText": "I guess I should have said - api calls in admin should be for things that don't require a user, and are protected by policy. There are definitely a lot of non admin calls that do have a superuser restriction. Things like Destroy. We want superusers, who don't have localhost access, to be able to call these.", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r458243609", "createdAt": "2020-07-21T16:49:36Z", "author": {"login": "scolapasta"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Pids.java", "diffHunk": "@@ -104,6 +104,12 @@ public Response reservePid(@PathParam(\"id\") String idSupplied) {\n     public Response deletePid(@PathParam(\"id\") String idSupplied) {\n         try {\n             Dataset dataset = findDatasetOrDie(idSupplied);\n+            //Restrict to never-published datasets (that should have draft/nonpublic pids). The underlying code will invalidate\n+            //pids that have been made public by a pid-specific method, but it's not clear that invalidating such a pid via an api that doesn't\n+            //destroy the dataset is a good idea.\n+            if(dataset.isReleased()) {\n+            \treturn badRequest(\"Not allowed for Datasets that have been published.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NjU5MA=="}, "originalCommit": {"oid": "37f2b45a98f4a11d2b2a09cb4cf21925ecdf426c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA0MzEyNg==", "bodyText": "As I mentioned to @qqmyers today, I found the \"delete PID\" API useful today in development. Also, it's used in the testCannotPublishUntilReserved test in PidsIT.", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r459043126", "createdAt": "2020-07-22T19:50:00Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Pids.java", "diffHunk": "@@ -104,6 +104,12 @@ public Response reservePid(@PathParam(\"id\") String idSupplied) {\n     public Response deletePid(@PathParam(\"id\") String idSupplied) {\n         try {\n             Dataset dataset = findDatasetOrDie(idSupplied);\n+            //Restrict to never-published datasets (that should have draft/nonpublic pids). The underlying code will invalidate\n+            //pids that have been made public by a pid-specific method, but it's not clear that invalidating such a pid via an api that doesn't\n+            //destroy the dataset is a good idea.\n+            if(dataset.isReleased()) {\n+            \treturn badRequest(\"Not allowed for Datasets that have been published.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NjU5MA=="}, "originalCommit": {"oid": "37f2b45a98f4a11d2b2a09cb4cf21925ecdf426c"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3264, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}