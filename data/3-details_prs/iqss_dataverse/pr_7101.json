{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxNDg3MjU3", "number": 7101, "title": "restore code from #2471, changes to merge that with new pid api", "bodyText": "What this PR does / why we need it: restores PIDS being invalidated when a dataset is destroyed\nWhich issue(s) this PR closes:\nCloses #7078\nSpecial notes for your reviewer: Tried to make minimal changes. #6901 created a separate delete method in PidUtils which I was able to move back into the DataCiteServiecBean code so that the Pids delete api isn't DataCIte specific any more. I did leave the API as only delete PIDs for unpublished Datasets though (with the assumption that, for DataCite, they have draft DOIs).\nSuggestions on how to test this: The API should work as before (except delete would also work for EZID and Handles (to the extent that their delete code is correct). The change this PR should make is the same as for #6060 - publish a dataset, and destroy it via the API and you should see the DataCite DOI change from findable to registered and have it's metadata replaced with :unav entries. (4.20 should already work this way, the 5.0 dev branch no longer did).\nDoes this PR introduce a user interface change? If mockups are available, please link/include them here: No\nIs there a release notes update needed for this change?:\nAdditional documentation:", "createdAt": "2020-07-17T21:53:15Z", "url": "https://github.com/IQSS/dataverse/pull/7101", "merged": true, "mergeCommit": {"oid": "a547fece7400a07b7e9faabc5d97afa8d383cea9"}, "closed": true, "closedAt": "2020-07-28T18:30:49Z", "author": {"login": "qqmyers"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc166x_AH2gAyNDUxNDg3MjU3OmI4M2E0NGEyMGRiN2NkNzNjMGNkODUzMWVlZTVhNjc1OGYwYzY2MWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3H_8pAFqTQ1MjU3NDg3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b83a44a20db7cd73c0cd8531eee5a6758f0c661e", "author": {"user": {"login": "qqmyers", "name": null}}, "url": "https://github.com/IQSS/dataverse/commit/b83a44a20db7cd73c0cd8531eee5a6758f0c661e", "committedDate": "2020-07-17T21:42:46Z", "message": "restore code from #2471, changes to merge that with new pid api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5f3e2b9d17e900a4b29764957530c31ca63da0e", "author": {"user": {"login": "qqmyers", "name": null}}, "url": "https://github.com/IQSS/dataverse/commit/e5f3e2b9d17e900a4b29764957530c31ca63da0e", "committedDate": "2020-07-20T18:25:48Z", "message": "fix delete error handling and refactor to let command set user messages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODU5MTY5", "url": "https://github.com/IQSS/dataverse/pull/7101#pullrequestreview-451859169", "createdAt": "2020-07-20T18:33:40Z", "commit": {"oid": "b83a44a20db7cd73c0cd8531eee5a6758f0c661e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODozMzo0MFrOG0aZuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODozODozNVrOG0akBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxMTcwNw==", "bodyText": "There's something weird going on. I expected isDataCiteInstallation to be in use by dataset.xhtml but it's not, in either this branch or the develop branch. It was added in 28f3222 to grey out the publish button if a DOI hasn't been registered. But now this logic is... gone? Do we still want it? Flagging @landreev .", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r457611707", "createdAt": "2020-07-20T18:33:40Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/SettingsWrapper.java", "diffHunk": "@@ -251,15 +251,6 @@ public boolean isDoiInstallation() {\n         }\n     }\n \n-    public boolean isDataCiteInstallation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83a44a20db7cd73c0cd8531eee5a6758f0c661e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxMjAyNw==", "bodyText": "@qqmyers I don't think we talked about this updateIdentifierStatus method. Was it simply unused?", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r457612027", "createdAt": "2020-07-20T18:34:19Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/DOIDataCiteServiceBean.java", "diffHunk": "@@ -171,33 +178,79 @@ public void deleteRecordFromCache(Dataset datasetIn){\n         }\n     }\n \n+    /*\n+     * Deletes a DOI if it is in DRAFT/RESERVED state or removes metadata and changes it from PUBLIC/FINDABLE to REGISTERED.\n+     */\n+    @Override\n+    public void deleteIdentifier(DvObject dvObject) throws Exception {\n+        logger.log(Level.FINE,\"deleteIdentifier\");\n+        String identifier = getIdentifier(dvObject);\n+        Map<String, String> doiMetadata = new HashMap<>();\n+        try {\n+            doiMetadata = doiDataCiteRegisterService.getMetadata(identifier);\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"deleteIdentifier: get matadata failed. \" + e.getMessage(), e);\n+        }\n+\n+        String idStatus = doiMetadata.get(\"_status\");\n+        if ( idStatus != null ) {\n+            switch ( idStatus ) {\n+                case RESERVED:\n+                case DRAFT:    \n+                    logger.log(Level.INFO, \"Delete status is reserved..\");\n+                    try {\n+                    \t//service only removes the identifier from the cache (since it was written before DOIs could be registered in draft state)\n+                        doiDataCiteRegisterService.deleteIdentifier(identifier);\n+                        //So we call the deleteDraftIdentifier method below until things are refactored\n+                        deleteDraftIdentifier(dvObject);\n+                    } catch (Exception e) {\n+                        logger.log(Level.WARNING, \"delete failed: \" + e.getMessage(), e);\n+                    }\n+                    break;\n+\n+                case PUBLIC:\n+                case FINDABLE:\n+                    //if public then it has been released set to unavailable and reset target to n2t url\n+                    Map<String, String> metadata = addDOIMetadataForDestroyedDataset(dvObject);\n+                    metadata.put(\"_status\", \"registered\");\n+                    metadata.put(\"_target\", getTargetUrl(dvObject));                   \n+                    doiDataCiteRegisterService.deactivateIdentifier(identifier, metadata, dvObject);\n+                    break;\n+            }\n+        }\n+    }\n+        \n     /**\n      * Deletes DOI from the DataCite side, if possible. Only \"draft\" DOIs can be\n      * deleted.\n      */\n-    @Override\n-    public void deleteIdentifier(DvObject dvObject) throws IOException {\n+    private void deleteDraftIdentifier(DvObject dvObject) throws IOException {\n+    \t\n+    \t//ToDo - incorporate into DataCiteRESTfulClient\n         String baseUrl = System.getProperty(\"doi.baseurlstringnext\");\n         String username = System.getProperty(\"doi.username\");\n         String password = System.getProperty(\"doi.password\");\n-        String pid = dvObject.getGlobalId().asString();\n-        int result = PidUtil.deleteDoi(pid, baseUrl, username, password);\n-        logger.fine(\"Result of deleteIdentifier for \" + pid + \": \" + result);\n-    }\n+        GlobalId doi = dvObject.getGlobalId();\n+        /**\n+         * Deletes the DOI from DataCite if it can. Returns 204 if PID was deleted\n+         * (only possible for \"draft\" DOIs), 405 (method not allowed) if the DOI\n+         * wasn't deleted (because it's in \"findable\" state, for example, 404 if the\n+         * DOI wasn't found, and possibly other status codes such as 500 if DataCite\n+         * is down.\n+         */\n \n-    private boolean updateIdentifierStatus(DvObject dvObject, String statusIn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83a44a20db7cd73c0cd8531eee5a6758f0c661e"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxMjY4MQ==", "bodyText": "What happens if this deleteDraftIdentifier method is called on a non-DataCite installation (Handle or EZID)?", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r457612681", "createdAt": "2020-07-20T18:35:30Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/DOIDataCiteServiceBean.java", "diffHunk": "@@ -171,33 +178,79 @@ public void deleteRecordFromCache(Dataset datasetIn){\n         }\n     }\n \n+    /*\n+     * Deletes a DOI if it is in DRAFT/RESERVED state or removes metadata and changes it from PUBLIC/FINDABLE to REGISTERED.\n+     */\n+    @Override\n+    public void deleteIdentifier(DvObject dvObject) throws Exception {\n+        logger.log(Level.FINE,\"deleteIdentifier\");\n+        String identifier = getIdentifier(dvObject);\n+        Map<String, String> doiMetadata = new HashMap<>();\n+        try {\n+            doiMetadata = doiDataCiteRegisterService.getMetadata(identifier);\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"deleteIdentifier: get matadata failed. \" + e.getMessage(), e);\n+        }\n+\n+        String idStatus = doiMetadata.get(\"_status\");\n+        if ( idStatus != null ) {\n+            switch ( idStatus ) {\n+                case RESERVED:\n+                case DRAFT:    \n+                    logger.log(Level.INFO, \"Delete status is reserved..\");\n+                    try {\n+                    \t//service only removes the identifier from the cache (since it was written before DOIs could be registered in draft state)\n+                        doiDataCiteRegisterService.deleteIdentifier(identifier);\n+                        //So we call the deleteDraftIdentifier method below until things are refactored\n+                        deleteDraftIdentifier(dvObject);\n+                    } catch (Exception e) {\n+                        logger.log(Level.WARNING, \"delete failed: \" + e.getMessage(), e);\n+                    }\n+                    break;\n+\n+                case PUBLIC:\n+                case FINDABLE:\n+                    //if public then it has been released set to unavailable and reset target to n2t url\n+                    Map<String, String> metadata = addDOIMetadataForDestroyedDataset(dvObject);\n+                    metadata.put(\"_status\", \"registered\");\n+                    metadata.put(\"_target\", getTargetUrl(dvObject));                   \n+                    doiDataCiteRegisterService.deactivateIdentifier(identifier, metadata, dvObject);\n+                    break;\n+            }\n+        }\n+    }\n+        \n     /**\n      * Deletes DOI from the DataCite side, if possible. Only \"draft\" DOIs can be\n      * deleted.\n      */\n-    @Override\n-    public void deleteIdentifier(DvObject dvObject) throws IOException {\n+    private void deleteDraftIdentifier(DvObject dvObject) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83a44a20db7cd73c0cd8531eee5a6758f0c661e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxNDM0Mw==", "bodyText": "The test in PidUtilTest that calls this method should be deleted:\n-------------------------------------------------------------\nCOMPILATION ERROR : \n-------------------------------------------------------------\nedu/harvard/iq/dataverse/pidproviders/PidUtilTest.java:[35,29] cannot find symbol\n  symbol:   method deleteDoi(java.lang.String,java.lang.String,java.lang.String,java.lang.String)\n  location: class edu.harvard.iq.dataverse.pidproviders.PidUtil\n1 error\n\nSee also https://travis-ci.org/github/IQSS/dataverse/builds/710110797", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r457614343", "createdAt": "2020-07-20T18:38:35Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/pidproviders/PidUtil.java", "diffHunk": "@@ -83,26 +83,4 @@ private static String acceptOnlyDoi(String persistentId) {\n         }\n         return globalId.getAuthority() + \"/\" + globalId.getIdentifier();\n     }\n-\n-    /**\n-     * Deletes the DOI from DataCite if it can. Returns 204 if PID was deleted\n-     * (only possible for \"draft\" DOIs), 405 (method not allowed) if the DOI\n-     * wasn't deleted (because it's in \"findable\" state, for example, 404 if the\n-     * DOI wasn't found, and possibly other status codes such as 500 if DataCite\n-     * is down.\n-     */\n-    public static int deleteDoi(String persistentId, String baseUrl, String username, String password) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83a44a20db7cd73c0cd8531eee5a6758f0c661e"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e15031dd813797311d76b5971ace9ed74901dab", "author": {"user": {"login": "qqmyers", "name": null}}, "url": "https://github.com/IQSS/dataverse/commit/2e15031dd813797311d76b5971ace9ed74901dab", "committedDate": "2020-07-20T18:49:00Z", "message": "delete test of method that was removed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a86fe781e8c2abb9d01c0cec8af295d09406ee5a", "author": {"user": {"login": "qqmyers", "name": null}}, "url": "https://github.com/IQSS/dataverse/commit/a86fe781e8c2abb9d01c0cec8af295d09406ee5a", "committedDate": "2020-07-20T22:01:05Z", "message": "restore method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37f2b45a98f4a11d2b2a09cb4cf21925ecdf426c", "author": {"user": {"login": "qqmyers", "name": null}}, "url": "https://github.com/IQSS/dataverse/commit/37f2b45a98f4a11d2b2a09cb4cf21925ecdf426c", "committedDate": "2020-07-20T22:02:11Z", "message": "return correct status\n\nprior code returned public for a dataset that was never released\n(anything not in the unused cache is 'public', which is not true)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNTc0ODc3", "url": "https://github.com/IQSS/dataverse/pull/7101#pullrequestreview-452574877", "createdAt": "2020-07-21T15:27:48Z", "commit": {"oid": "37f2b45a98f4a11d2b2a09cb4cf21925ecdf426c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNToyNzo0OFrOG09fXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNToyNzo0OFrOG09fXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NjU5MA==", "bodyText": "This \"isReleased\" check is making me question if we should remove this \"delete PID\" API endpoint altogether (as well as the DeletePidCommand and docs, of course).\nI added it because I was looking at DataCite APIs from a CRUD perspective. How can I create a PID, read it, update it, delete it. I was learning how to do these things with curl and I'm aware that sometimes sysadmins have a need to operate on the DataCite API directly to fix certain things. My thought was that we could make it easier by giving them APIs in Dataverse to operate on DataCite, rather than re-documenting the DataCite API or simply sending them to those docs.\nThe other thing I was thinking when adding this Delete PID API is that I wanted a way to blank out GlobalIdCreateTime and IdentifierRegistered so I could test the \"register PID\" API (which I still think is a useful, necessary API). This is much more of a dev concern than prod, however.", "url": "https://github.com/IQSS/dataverse/pull/7101#discussion_r458186590", "createdAt": "2020-07-21T15:27:48Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Pids.java", "diffHunk": "@@ -104,6 +104,12 @@ public Response reservePid(@PathParam(\"id\") String idSupplied) {\n     public Response deletePid(@PathParam(\"id\") String idSupplied) {\n         try {\n             Dataset dataset = findDatasetOrDie(idSupplied);\n+            //Restrict to never-published datasets (that should have draft/nonpublic pids). The underlying code will invalidate\n+            //pids that have been made public by a pid-specific method, but it's not clear that invalidating such a pid via an api that doesn't\n+            //destroy the dataset is a good idea.\n+            if(dataset.isReleased()) {\n+            \treturn badRequest(\"Not allowed for Datasets that have been published.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37f2b45a98f4a11d2b2a09cb4cf21925ecdf426c"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 894, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}