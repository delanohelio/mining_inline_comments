{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NDk2NDY5", "number": 7350, "title": "7275 upload auxiliary files", "bodyText": "What this PR does / why we need it: This is a generic API for uploading and downloading Auxiliary files. Needed for OpenDP use case\nWhich issue(s) this PR closes: 7275\nCloses #7275\nSpecial notes for your reviewer:\nSuggestions on how to test this: Integration test in AccessIT\nDoes this PR introduce a user interface change? If mockups are available, please link/include them here: no UI change\nIs there a release notes update needed for this change?:\nAdditional documentation: documentation added to Dataverse Developer doc", "createdAt": "2020-10-22T19:00:42Z", "url": "https://github.com/IQSS/dataverse/pull/7350", "merged": true, "mergeCommit": {"oid": "6f88c11a54971b755176c7352aa01ec05550cb6f"}, "closed": true, "closedAt": "2020-11-30T21:53:29Z", "author": {"login": "ekraffmiller"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSMqvYgH2gAyNTA4NDk2NDY5OjVjMjM5MWJlYjY1NTI4Njc1NjA5ZDQ5OTg4MmU0MWViNTY3MDk1MTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdhsjf8AH2gAyNTA4NDk2NDY5OjgyYzVmNjY5OWNlM2U1N2YzMTg1MTA3OTY3ZmRhYjIzMjI0NDk4OGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5c2391beb65528675609d499882e41eb56709518", "author": {"user": {"login": "ekraffmiller", "name": "Ellen Kraffmiller"}}, "url": "https://github.com/IQSS/dataverse/commit/5c2391beb65528675609d499882e41eb56709518", "committedDate": "2020-10-13T18:13:25Z", "message": "new API method for saving a generic auxiliary file to a data file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91748b3e395c78b176eab1fd9f66085cfaae36bb", "author": {"user": {"login": "landreev", "name": null}}, "url": "https://github.com/IQSS/dataverse/commit/91748b3e395c78b176eab1fd9f66085cfaae36bb", "committedDate": "2020-10-19T22:44:09Z", "message": "modified framework for the download/GET part of the new aux. metadata API. will post more info tomorrow, about what may still needs to be done there. #7275"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6ce1d7e5066a6ad2c68f5f6aac6974fa799c1e9", "author": {"user": {"login": "ekraffmiller", "name": "Ellen Kraffmiller"}}, "url": "https://github.com/IQSS/dataverse/commit/d6ce1d7e5066a6ad2c68f5f6aac6974fa799c1e9", "committedDate": "2020-10-22T18:56:28Z", "message": "added checksum and contentType to AuxiliaryFile entity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDA1NjM3", "url": "https://github.com/IQSS/dataverse/pull/7350#pullrequestreview-516005637", "createdAt": "2020-10-23T20:56:35Z", "commit": {"oid": "d6ce1d7e5066a6ad2c68f5f6aac6974fa799c1e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo1NjozNlrOHneOHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo1NjozNlrOHneOHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MTY0Ng==", "bodyText": "storageIO.open called above creates the inputStream for the main file. If it's not going to be used, it needs to be closed (storageIO.getInpputStream().close() - StorageIO doesn't implement Closeable yet/have a close() method - which could be useful someday).", "url": "https://github.com/IQSS/dataverse/pull/7350#discussion_r511151646", "createdAt": "2020-10-23T20:56:36Z", "author": {"login": "qqmyers"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/DownloadInstanceWriter.java", "diffHunk": "@@ -227,6 +227,18 @@ public void writeTo(DownloadInstance di, Class<?> clazz, Type type, Annotation[]\n                         // (similarly to what the Access API returns when a thumbnail is requested on a text file, etc.)\n                         throw new NotFoundException(\"datafile access error: requested optional service (image scaling, format conversion, etc.) could not be performed on this datafile.\");\n                     }\n+                } else if (di.getAuxiliaryFile() != null) {\n+                    String auxTag = di.getAuxiliaryFile().getFormatTag(); \n+                    String auxVersion = di.getAuxiliaryFile().getFormatVersion();\n+                    if (auxVersion != null) {\n+                        auxTag = auxTag + \"_\" + auxVersion;\n+                    }\n+                    long auxFileSize = di.getAuxiliaryFile().getFileSize();\n+                    InputStreamIO auxStreamIO = new InputStreamIO(storageIO.getAuxFileAsInputStream(auxTag), auxFileSize);\n+                    auxStreamIO.setFileName(storageIO.getFileName() + \".\" + auxTag);\n+                    auxStreamIO.setMimeType(di.getAuxiliaryFile().getContentType());\n+                    storageIO = auxStreamIO;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6ce1d7e5066a6ad2c68f5f6aac6974fa799c1e9"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDEwMTU1", "url": "https://github.com/IQSS/dataverse/pull/7350#pullrequestreview-516010155", "createdAt": "2020-10-23T21:05:38Z", "commit": {"oid": "d6ce1d7e5066a6ad2c68f5f6aac6974fa799c1e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTowNTozOVrOHnebyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTowNTozOVrOHnebyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1NTE0NA==", "bodyText": "So far Tika is only used for full-text indexing and content-type detection is done differently for Datafiles. Could/should these both be done the same way? (not necessarily in this PR)", "url": "https://github.com/IQSS/dataverse/pull/7350#discussion_r511155144", "createdAt": "2020-10-23T21:05:39Z", "author": {"login": "qqmyers"}, "path": "src/main/java/edu/harvard/iq/dataverse/AuxiliaryFileServiceBean.java", "diffHunk": "@@ -0,0 +1,114 @@\n+\n+package edu.harvard.iq.dataverse;\n+\n+import edu.harvard.iq.dataverse.dataaccess.StorageIO;\n+import edu.harvard.iq.dataverse.util.FileUtil;\n+import edu.harvard.iq.dataverse.util.SystemConfig;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.logging.Logger;\n+import javax.ejb.EJB;\n+import javax.ejb.Stateless;\n+import javax.inject.Named;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.Query;\n+import org.apache.tika.Tika;\n+\n+/**\n+ *\n+ * @author ekraffmiller\n+ *  Methods related to the AuxiliaryFile Entity.\n+ */\n+@Stateless\n+@Named\n+public class AuxiliaryFileServiceBean implements java.io.Serializable {\n+   private static final Logger logger = Logger.getLogger(AuxiliaryFileServiceBean.class.getCanonicalName());\n+\n+    @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n+    private EntityManager em;\n+    \n+    @EJB\n+    private SystemConfig systemConfig;\n+    \n+\n+    public AuxiliaryFile find(Object pk) {\n+        return em.find(AuxiliaryFile.class, pk);\n+    }\n+\n+    public AuxiliaryFile save(AuxiliaryFile auxiliaryFile) {\n+        AuxiliaryFile savedFile = em.merge(auxiliaryFile);\n+        return savedFile;\n+\n+    }\n+    \n+    /**\n+     * Save the physical file to storageIO, and save the AuxiliaryFile entity\n+     * to the database.  This should be an all or nothing transaction - if either\n+     * process fails, than nothing will be saved\n+     * @param fileInputStream - auxiliary file data to be saved\n+     * @param dataFile  - the dataFile entity this will be added to\n+     * @param formatTag - type of file being saved\n+     * @param formatVersion - to distinguish between multiple versions of a file\n+     * @param origin - name of the tool/system that created the file\n+     * @param isPublic boolean - is this file available to any user?\n+     * @return success boolean - returns whether the save was successful\n+     */\n+    public boolean processAuxiliaryFile(InputStream fileInputStream, DataFile dataFile, String formatTag, String formatVersion, String origin, boolean isPublic) {\n+    \n+        StorageIO<DataFile> storageIO =null;\n+      \n+        String auxExtension = formatTag + \"_\" + formatVersion;\n+        try {\n+            // Save to storage first.\n+            // If that is successful (does not throw exception),\n+            // then save to db.\n+            // If the db fails for any reason, then rollback\n+            // by removing the auxfile from storage.\n+            storageIO = dataFile.getStorageIO();\n+            AuxiliaryFile auxFile = new AuxiliaryFile();\n+            storageIO.saveInputStreamAsAux(fileInputStream, auxExtension);\n+            auxFile.setChecksum(FileUtil.calculateChecksum(storageIO.getAuxFileAsInputStream(auxExtension), systemConfig.getFileFixityChecksumAlgorithm()));\n+\n+            Tika tika = new Tika();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6ce1d7e5066a6ad2c68f5f6aac6974fa799c1e9"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDExMTA0", "url": "https://github.com/IQSS/dataverse/pull/7350#pullrequestreview-516011104", "createdAt": "2020-10-23T21:07:40Z", "commit": {"oid": "d6ce1d7e5066a6ad2c68f5f6aac6974fa799c1e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTowNzo0MFrOHneetg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTowNzo0MFrOHneetg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1NTg5NA==", "bodyText": "It's not too hard to wrap the fileInputStream and calculate the has during the original write (versus having to retrieve the file and scan it a second time. (The util.Bag code has examples.)", "url": "https://github.com/IQSS/dataverse/pull/7350#discussion_r511155894", "createdAt": "2020-10-23T21:07:40Z", "author": {"login": "qqmyers"}, "path": "src/main/java/edu/harvard/iq/dataverse/AuxiliaryFileServiceBean.java", "diffHunk": "@@ -0,0 +1,114 @@\n+\n+package edu.harvard.iq.dataverse;\n+\n+import edu.harvard.iq.dataverse.dataaccess.StorageIO;\n+import edu.harvard.iq.dataverse.util.FileUtil;\n+import edu.harvard.iq.dataverse.util.SystemConfig;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.logging.Logger;\n+import javax.ejb.EJB;\n+import javax.ejb.Stateless;\n+import javax.inject.Named;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.Query;\n+import org.apache.tika.Tika;\n+\n+/**\n+ *\n+ * @author ekraffmiller\n+ *  Methods related to the AuxiliaryFile Entity.\n+ */\n+@Stateless\n+@Named\n+public class AuxiliaryFileServiceBean implements java.io.Serializable {\n+   private static final Logger logger = Logger.getLogger(AuxiliaryFileServiceBean.class.getCanonicalName());\n+\n+    @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n+    private EntityManager em;\n+    \n+    @EJB\n+    private SystemConfig systemConfig;\n+    \n+\n+    public AuxiliaryFile find(Object pk) {\n+        return em.find(AuxiliaryFile.class, pk);\n+    }\n+\n+    public AuxiliaryFile save(AuxiliaryFile auxiliaryFile) {\n+        AuxiliaryFile savedFile = em.merge(auxiliaryFile);\n+        return savedFile;\n+\n+    }\n+    \n+    /**\n+     * Save the physical file to storageIO, and save the AuxiliaryFile entity\n+     * to the database.  This should be an all or nothing transaction - if either\n+     * process fails, than nothing will be saved\n+     * @param fileInputStream - auxiliary file data to be saved\n+     * @param dataFile  - the dataFile entity this will be added to\n+     * @param formatTag - type of file being saved\n+     * @param formatVersion - to distinguish between multiple versions of a file\n+     * @param origin - name of the tool/system that created the file\n+     * @param isPublic boolean - is this file available to any user?\n+     * @return success boolean - returns whether the save was successful\n+     */\n+    public boolean processAuxiliaryFile(InputStream fileInputStream, DataFile dataFile, String formatTag, String formatVersion, String origin, boolean isPublic) {\n+    \n+        StorageIO<DataFile> storageIO =null;\n+      \n+        String auxExtension = formatTag + \"_\" + formatVersion;\n+        try {\n+            // Save to storage first.\n+            // If that is successful (does not throw exception),\n+            // then save to db.\n+            // If the db fails for any reason, then rollback\n+            // by removing the auxfile from storage.\n+            storageIO = dataFile.getStorageIO();\n+            AuxiliaryFile auxFile = new AuxiliaryFile();\n+            storageIO.saveInputStreamAsAux(fileInputStream, auxExtension);\n+            auxFile.setChecksum(FileUtil.calculateChecksum(storageIO.getAuxFileAsInputStream(auxExtension), systemConfig.getFileFixityChecksumAlgorithm()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6ce1d7e5066a6ad2c68f5f6aac6974fa799c1e9"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDEzNjc1", "url": "https://github.com/IQSS/dataverse/pull/7350#pullrequestreview-516013675", "createdAt": "2020-10-23T21:13:20Z", "commit": {"oid": "d6ce1d7e5066a6ad2c68f5f6aac6974fa799c1e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMToxMzoyMFrOHnemjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMToxMzoyMFrOHnemjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1NzkwMg==", "bodyText": "FWIW: the normal file add uses a single jsonData param rather than multiple FormDataParams. Not sure if that's intended to be consistent across the API.", "url": "https://github.com/IQSS/dataverse/pull/7350#discussion_r511157902", "createdAt": "2020-10-23T21:13:20Z", "author": {"login": "qqmyers"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Access.java", "diffHunk": "@@ -1084,6 +1113,65 @@ private String getWebappImageResource(String imageName) {\n     }\n     */\n     \n+    /**\n+     * \n+     * @param fileId\n+     * @param formatTag\n+     * @param formatVersion\n+     * @param origin\n+     * @param isPublic\n+     * @param fileInputStream\n+     * @param contentDispositionHeader\n+     * @param formDataBodyPart\n+     * @return \n+     */\n+    @Path(\"datafile/{fileId}/metadata/{formatTag}/{formatVersion}\")\n+    @POST\n+    @Consumes(MediaType.MULTIPART_FORM_DATA)\n+\n+    public Response saveAuxiliaryFileWithVersion(@PathParam(\"fileId\") Long fileId,\n+            @PathParam(\"formatTag\") String formatTag,\n+            @PathParam(\"formatVersion\") String formatVersion,\n+            @FormDataParam(\"origin\") String origin,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6ce1d7e5066a6ad2c68f5f6aac6974fa799c1e9"}, "originalPosition": 194}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e473163032c742eab609346223455abcdadc13f", "author": {"user": {"login": "landreev", "name": null}}, "url": "https://github.com/IQSS/dataverse/commit/1e473163032c742eab609346223455abcdadc13f", "committedDate": "2020-10-26T14:38:42Z", "message": "Making sure there's no open inputstreams left. (#7275)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1af5a24dfb45f968e4f9e6e84d0f6f37121b17fa", "author": {"user": {"login": "ekraffmiller", "name": "Ellen Kraffmiller"}}, "url": "https://github.com/IQSS/dataverse/commit/1af5a24dfb45f968e4f9e6e84d0f6f37121b17fa", "committedDate": "2020-11-02T21:18:30Z", "message": "Use DigestInputStream so that checksum can be calculated when stream\nis being written to storage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NDc0MzU5", "url": "https://github.com/IQSS/dataverse/pull/7350#pullrequestreview-525474359", "createdAt": "2020-11-06T20:31:14Z", "commit": {"oid": "1af5a24dfb45f968e4f9e6e84d0f6f37121b17fa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDozMToxNFrOHu8o2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMToyMDozM1rOHu95iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk5MDA0MA==", "bodyText": "The method that's used for DataFiles is determineContentType in FileUtil. It would probably be good to use the same code path, instead of using Tika. Or switch it all to Tika, I guess, but that seems daunting to me. Or I guess we could use Tika here for now and work on consistency later. And sure, this is a fine topic for tech hours. \ud83d\ude04", "url": "https://github.com/IQSS/dataverse/pull/7350#discussion_r518990040", "createdAt": "2020-11-06T20:31:14Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/AuxiliaryFileServiceBean.java", "diffHunk": "@@ -0,0 +1,114 @@\n+\n+package edu.harvard.iq.dataverse;\n+\n+import edu.harvard.iq.dataverse.dataaccess.StorageIO;\n+import edu.harvard.iq.dataverse.util.FileUtil;\n+import edu.harvard.iq.dataverse.util.SystemConfig;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.logging.Logger;\n+import javax.ejb.EJB;\n+import javax.ejb.Stateless;\n+import javax.inject.Named;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.Query;\n+import org.apache.tika.Tika;\n+\n+/**\n+ *\n+ * @author ekraffmiller\n+ *  Methods related to the AuxiliaryFile Entity.\n+ */\n+@Stateless\n+@Named\n+public class AuxiliaryFileServiceBean implements java.io.Serializable {\n+   private static final Logger logger = Logger.getLogger(AuxiliaryFileServiceBean.class.getCanonicalName());\n+\n+    @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n+    private EntityManager em;\n+    \n+    @EJB\n+    private SystemConfig systemConfig;\n+    \n+\n+    public AuxiliaryFile find(Object pk) {\n+        return em.find(AuxiliaryFile.class, pk);\n+    }\n+\n+    public AuxiliaryFile save(AuxiliaryFile auxiliaryFile) {\n+        AuxiliaryFile savedFile = em.merge(auxiliaryFile);\n+        return savedFile;\n+\n+    }\n+    \n+    /**\n+     * Save the physical file to storageIO, and save the AuxiliaryFile entity\n+     * to the database.  This should be an all or nothing transaction - if either\n+     * process fails, than nothing will be saved\n+     * @param fileInputStream - auxiliary file data to be saved\n+     * @param dataFile  - the dataFile entity this will be added to\n+     * @param formatTag - type of file being saved\n+     * @param formatVersion - to distinguish between multiple versions of a file\n+     * @param origin - name of the tool/system that created the file\n+     * @param isPublic boolean - is this file available to any user?\n+     * @return success boolean - returns whether the save was successful\n+     */\n+    public boolean processAuxiliaryFile(InputStream fileInputStream, DataFile dataFile, String formatTag, String formatVersion, String origin, boolean isPublic) {\n+    \n+        StorageIO<DataFile> storageIO =null;\n+      \n+        String auxExtension = formatTag + \"_\" + formatVersion;\n+        try {\n+            // Save to storage first.\n+            // If that is successful (does not throw exception),\n+            // then save to db.\n+            // If the db fails for any reason, then rollback\n+            // by removing the auxfile from storage.\n+            storageIO = dataFile.getStorageIO();\n+            AuxiliaryFile auxFile = new AuxiliaryFile();\n+            storageIO.saveInputStreamAsAux(fileInputStream, auxExtension);\n+            auxFile.setChecksum(FileUtil.calculateChecksum(storageIO.getAuxFileAsInputStream(auxExtension), systemConfig.getFileFixityChecksumAlgorithm()));\n+\n+            Tika tika = new Tika();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1NTE0NA=="}, "originalCommit": {"oid": "d6ce1d7e5066a6ad2c68f5f6aac6974fa799c1e9"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk5NDYzNg==", "bodyText": "This method seems to work file so I'd suggest removing this TODO.", "url": "https://github.com/IQSS/dataverse/pull/7350#discussion_r518994636", "createdAt": "2020-11-06T20:41:53Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/AuxiliaryFileServiceBean.java", "diffHunk": "@@ -0,0 +1,120 @@\n+\n+package edu.harvard.iq.dataverse;\n+\n+import edu.harvard.iq.dataverse.dataaccess.StorageIO;\n+import edu.harvard.iq.dataverse.util.FileUtil;\n+import edu.harvard.iq.dataverse.util.SystemConfig;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.DigestInputStream;\n+import java.security.MessageDigest;\n+import java.util.logging.Logger;\n+import javax.ejb.EJB;\n+import javax.ejb.Stateless;\n+import javax.inject.Named;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.Query;\n+import org.apache.tika.Tika;\n+\n+/**\n+ *\n+ * @author ekraffmiller\n+ *  Methods related to the AuxiliaryFile Entity.\n+ */\n+@Stateless\n+@Named\n+public class AuxiliaryFileServiceBean implements java.io.Serializable {\n+   private static final Logger logger = Logger.getLogger(AuxiliaryFileServiceBean.class.getCanonicalName());\n+\n+    @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n+    private EntityManager em;\n+    \n+    @EJB\n+    private SystemConfig systemConfig;\n+    \n+\n+    public AuxiliaryFile find(Object pk) {\n+        return em.find(AuxiliaryFile.class, pk);\n+    }\n+\n+    public AuxiliaryFile save(AuxiliaryFile auxiliaryFile) {\n+        AuxiliaryFile savedFile = em.merge(auxiliaryFile);\n+        return savedFile;\n+\n+    }\n+    \n+    /**\n+     * Save the physical file to storageIO, and save the AuxiliaryFile entity\n+     * to the database.  This should be an all or nothing transaction - if either\n+     * process fails, than nothing will be saved\n+     * @param fileInputStream - auxiliary file data to be saved\n+     * @param dataFile  - the dataFile entity this will be added to\n+     * @param formatTag - type of file being saved\n+     * @param formatVersion - to distinguish between multiple versions of a file\n+     * @param origin - name of the tool/system that created the file\n+     * @param isPublic boolean - is this file available to any user?\n+     * @return success boolean - returns whether the save was successful\n+     */\n+    public boolean processAuxiliaryFile(InputStream fileInputStream, DataFile dataFile, String formatTag, String formatVersion, String origin, boolean isPublic) {\n+    \n+        StorageIO<DataFile> storageIO =null;\n+      \n+        String auxExtension = formatTag + \"_\" + formatVersion;\n+        try {\n+            // Save to storage first.\n+            // If that is successful (does not throw exception),\n+            // then save to db.\n+            // If the db fails for any reason, then rollback\n+            // by removing the auxfile from storage.\n+            storageIO = dataFile.getStorageIO();\n+            AuxiliaryFile auxFile = new AuxiliaryFile();\n+            MessageDigest md = MessageDigest.getInstance(systemConfig.getFileFixityChecksumAlgorithm().toString());\n+            DigestInputStream di \n+                = new DigestInputStream(fileInputStream, md); \n+  \n+            storageIO.saveInputStreamAsAux(fileInputStream, auxExtension);          \n+            auxFile.setChecksum(FileUtil.checksumDigestToString(di.getMessageDigest().digest())    );\n+\n+            Tika tika = new Tika();\n+            auxFile.setContentType(tika.detect(storageIO.getAuxFileAsInputStream(auxExtension)));\n+            auxFile.setFormatTag(formatTag);\n+            auxFile.setFormatVersion(formatVersion);\n+            auxFile.setOrigin(origin);\n+            auxFile.setIsPublic(isPublic);\n+            auxFile.setDataFile(dataFile);         \n+            auxFile.setFileSize(storageIO.getAuxObjectSize(auxExtension));\n+            save(auxFile);\n+        } catch (IOException ioex) {\n+            logger.info(\"IO Exception trying to save auxiliary file: \" + ioex.getMessage());\n+            return false;\n+        } catch (Exception e) {\n+            // If anything fails during database insert, remove file from storage\n+            try {\n+                storageIO.deleteAuxObject(auxExtension);\n+            } catch(IOException ioex) {\n+                    logger.info(\"IO Exception trying remove auxiliary file in exception handler: \" + ioex.getMessage());\n+            return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n+    // Looks up an auxiliary file by its parent DataFile, the formatTag and version\n+    // TODO: improve as needed. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1af5a24dfb45f968e4f9e6e84d0f6f37121b17fa"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk5NjIwOA==", "bodyText": "These methods aren't used. It would be nice to get a listing of aux files based on a data file.", "url": "https://github.com/IQSS/dataverse/pull/7350#discussion_r518996208", "createdAt": "2020-11-06T20:45:33Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/DataFile.java", "diffHunk": "@@ -281,6 +284,14 @@ public String getDuplicateFilename() {\n     public void setDuplicateFilename(String duplicateFilename) {\n         this.duplicateFilename = duplicateFilename;\n     }\n+\n+    public List<AuxiliaryFile> getAuxiliaryFiles() {\n+        return auxiliaryFiles;\n+    }\n+\n+    public void setAuxiliaryFiles(List<AuxiliaryFile> auxiliaryFiles) {\n+        this.auxiliaryFiles = auxiliaryFiles;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1af5a24dfb45f968e4f9e6e84d0f6f37121b17fa"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwMjc0OA==", "bodyText": "Instead of tabularDatafileMetadataPreprocessed maybe this should be called tabularDatafileMetadataAux or something (or something entirely new) to deemphasize the older preprocessed format.", "url": "https://github.com/IQSS/dataverse/pull/7350#discussion_r519002748", "createdAt": "2020-11-06T21:00:25Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Access.java", "diffHunk": "@@ -505,35 +500,69 @@ public String dataVariableMetadataDDI(@PathParam(\"varId\") Long varId, @QueryPara\n     }\n     \n     /*\n-     * \"Preprocessed data\" metadata format:\n-     * (this was previously provided as a \"format conversion\" option of the \n-     * file download form of the access API call)\n+     * GET method for retrieving various auxiliary files associated with \n+     * a tabular datafile.\n      */\n     \n-    @Path(\"datafile/{fileId}/metadata/preprocessed\")\n+    @Path(\"datafile/{fileId}/metadata/{formatTag}/{formatVersion}\")\n     @GET\n-    @Produces({\"text/xml\"})\n     \n-    public DownloadInstance tabularDatafileMetadataPreprocessed(@PathParam(\"fileId\") String fileId, @QueryParam(\"key\") String apiToken, @Context UriInfo uriInfo, @Context HttpHeaders headers, @Context HttpServletResponse response) throws ServiceUnavailableException {\n+    public DownloadInstance tabularDatafileMetadataPreprocessed(@PathParam(\"fileId\") String fileId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1af5a24dfb45f968e4f9e6e84d0f6f37121b17fa"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwOTQ2NQ==", "bodyText": "It seems like only InputStream is used. What are FormDataContentDisposition and FormDataBodyPart for?", "url": "https://github.com/IQSS/dataverse/pull/7350#discussion_r519009465", "createdAt": "2020-11-06T21:17:28Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Access.java", "diffHunk": "@@ -1084,6 +1113,65 @@ private String getWebappImageResource(String imageName) {\n     }\n     */\n     \n+    /**\n+     * \n+     * @param fileId\n+     * @param formatTag\n+     * @param formatVersion\n+     * @param origin\n+     * @param isPublic\n+     * @param fileInputStream\n+     * @param contentDispositionHeader\n+     * @param formDataBodyPart\n+     * @return \n+     */\n+    @Path(\"datafile/{fileId}/metadata/{formatTag}/{formatVersion}\")\n+    @POST\n+    @Consumes(MediaType.MULTIPART_FORM_DATA)\n+\n+    public Response saveAuxiliaryFileWithVersion(@PathParam(\"fileId\") Long fileId,\n+            @PathParam(\"formatTag\") String formatTag,\n+            @PathParam(\"formatVersion\") String formatVersion,\n+            @FormDataParam(\"origin\") String origin,\n+            @FormDataParam(\"isPublic\") boolean isPublic,\n+            @FormDataParam(\"file\") InputStream fileInputStream,\n+            @FormDataParam(\"file\") FormDataContentDisposition contentDispositionHeader,\n+            @FormDataParam(\"file\") final FormDataBodyPart formDataBodyPart\n+    ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1af5a24dfb45f968e4f9e6e84d0f6f37121b17fa"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAxMDY5Ng==", "bodyText": "What if we return the aux file id and the detected content type? If we add AuxiliaryFile to JsonPrinter.java, what would the JSON look like?", "url": "https://github.com/IQSS/dataverse/pull/7350#discussion_r519010696", "createdAt": "2020-11-06T21:20:33Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Access.java", "diffHunk": "@@ -1084,6 +1113,65 @@ private String getWebappImageResource(String imageName) {\n     }\n     */\n     \n+    /**\n+     * \n+     * @param fileId\n+     * @param formatTag\n+     * @param formatVersion\n+     * @param origin\n+     * @param isPublic\n+     * @param fileInputStream\n+     * @param contentDispositionHeader\n+     * @param formDataBodyPart\n+     * @return \n+     */\n+    @Path(\"datafile/{fileId}/metadata/{formatTag}/{formatVersion}\")\n+    @POST\n+    @Consumes(MediaType.MULTIPART_FORM_DATA)\n+\n+    public Response saveAuxiliaryFileWithVersion(@PathParam(\"fileId\") Long fileId,\n+            @PathParam(\"formatTag\") String formatTag,\n+            @PathParam(\"formatVersion\") String formatVersion,\n+            @FormDataParam(\"origin\") String origin,\n+            @FormDataParam(\"isPublic\") boolean isPublic,\n+            @FormDataParam(\"file\") InputStream fileInputStream,\n+            @FormDataParam(\"file\") FormDataContentDisposition contentDispositionHeader,\n+            @FormDataParam(\"file\") final FormDataBodyPart formDataBodyPart\n+    ) {\n+        AuthenticatedUser authenticatedUser;\n+        try {\n+            authenticatedUser = findAuthenticatedUserOrDie();\n+        } catch (WrappedResponse ex) {\n+            return error(FORBIDDEN, \"Authorized users only.\");\n+        }\n+\n+        DataFile dataFile = dataFileService.find(fileId);\n+        if (dataFile == null) {\n+            return error(BAD_REQUEST, \"File not found based on id \" + fileId + \".\");\n+        }\n+        \n+         if (!permissionService.userOn(authenticatedUser, dataFile.getOwner()).has(Permission.EditDataset)) {\n+            return error(FORBIDDEN, \"User not authorized to edit the dataset.\");\n+        }\n+\n+        if (!dataFile.isTabularData()) {\n+            return error(BAD_REQUEST, \"Not a tabular DataFile (db id=\" + fileId + \")\");\n+        }\n+         \n+\n+        boolean saved = auxiliaryFileService.processAuxiliaryFile(fileInputStream, dataFile, formatTag, formatVersion, origin, isPublic);\n+      \n+        if (saved) {\n+            return ok(\"Auxiliary file has been saved.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1af5a24dfb45f968e4f9e6e84d0f6f37121b17fa"}, "originalPosition": 224}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8098f6ff695e10bd2acf31e6048be2ea788a43ae", "author": {"user": {"login": "ekraffmiller", "name": "Ellen Kraffmiller"}}, "url": "https://github.com/IQSS/dataverse/commit/8098f6ff695e10bd2acf31e6048be2ea788a43ae", "committedDate": "2020-11-16T20:28:49Z", "message": "Merge branch 'develop' into 7275-upload-auxliary-files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1e03a0e302666585123865116a49eba7ee9d031", "author": {"user": {"login": "ekraffmiller", "name": "Ellen Kraffmiller"}}, "url": "https://github.com/IQSS/dataverse/commit/c1e03a0e302666585123865116a49eba7ee9d031", "committedDate": "2020-11-16T23:50:56Z", "message": "Updated deposit API method to return JSon data for saved file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee61a381b05e37274484f47d2d4042171aac624e", "author": {"user": {"login": "ekraffmiller", "name": "Ellen Kraffmiller"}}, "url": "https://github.com/IQSS/dataverse/commit/ee61a381b05e37274484f47d2d4042171aac624e", "committedDate": "2020-11-16T23:52:46Z", "message": "Merge branch '7275-upload-auxliary-files' of github.com:IQSS/dataverse into 7275-upload-auxliary-files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11b9db65a453229dee6d5242223433e25fff2259", "author": {"user": {"login": "ekraffmiller", "name": "Ellen Kraffmiller"}}, "url": "https://github.com/IQSS/dataverse/commit/11b9db65a453229dee6d5242223433e25fff2259", "committedDate": "2020-11-17T00:07:23Z", "message": "removed unneeded comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "867ad10a7d99b8db5a7ee92407eb7fd72d9a4759", "author": {"user": {"login": "ekraffmiller", "name": "Ellen Kraffmiller"}}, "url": "https://github.com/IQSS/dataverse/commit/867ad10a7d99b8db5a7ee92407eb7fd72d9a4759", "committedDate": "2020-11-17T00:08:57Z", "message": "removed redundant initialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e88b55e6ee62a84def7bb23f7a7526172317eae", "author": {"user": {"login": "ekraffmiller", "name": "Ellen Kraffmiller"}}, "url": "https://github.com/IQSS/dataverse/commit/6e88b55e6ee62a84def7bb23f7a7526172317eae", "committedDate": "2020-11-17T18:49:03Z", "message": "added documentation for Auxiliary File APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2c3f0d9e59b098026278f77053fcd6c61b89bf9", "author": {"user": {"login": "djbrooke", "name": "Danny Brooke"}}, "url": "https://github.com/IQSS/dataverse/commit/a2c3f0d9e59b098026278f77053fcd6c61b89bf9", "committedDate": "2020-11-17T21:56:02Z", "message": "doc updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36b69df6ebf8a32b72cd524337645df22720c0e5", "author": {"user": {"login": "djbrooke", "name": "Danny Brooke"}}, "url": "https://github.com/IQSS/dataverse/commit/36b69df6ebf8a32b72cd524337645df22720c0e5", "committedDate": "2020-11-17T21:58:54Z", "message": "removing :"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NzYxNjI5", "url": "https://github.com/IQSS/dataverse/pull/7350#pullrequestreview-536761629", "createdAt": "2020-11-23T18:59:13Z", "commit": {"oid": "36b69df6ebf8a32b72cd524337645df22720c0e5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NzYzMDc1", "url": "https://github.com/IQSS/dataverse/pull/7350#pullrequestreview-536763075", "createdAt": "2020-11-23T19:01:26Z", "commit": {"oid": "36b69df6ebf8a32b72cd524337645df22720c0e5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NzI2MDU0", "url": "https://github.com/IQSS/dataverse/pull/7350#pullrequestreview-537726054", "createdAt": "2020-11-24T17:04:14Z", "commit": {"oid": "36b69df6ebf8a32b72cd524337645df22720c0e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzowNDoxNFrOH5Mi4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzowNDoxNFrOH5Mi4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczNjQxOA==", "bodyText": "This use of created with an id seems to be out of step with all other uses. Notice below that we always return the path to the object just created so it can be further manipulated:\n\nSince this API is experimental, we could just switch it from created to ok (both \"add file\" and \"add prov\" use ok and this code itself used ok until I started asking about returning an id in a JSON response which lead to created being added in c1e03a0) or we could put a proper path in, like created expects. From the test in AccessIT, the file can be downloaded from a path like this:\n.get(\"/api/access/datafile/\" + tabFile1Id + \"/metadata/dpJSON/v1\")", "url": "https://github.com/IQSS/dataverse/pull/7350#discussion_r529736418", "createdAt": "2020-11-24T17:04:14Z", "author": {"login": "pdurbin"}, "path": "src/main/java/edu/harvard/iq/dataverse/api/Access.java", "diffHunk": "@@ -1084,6 +1113,64 @@ private String getWebappImageResource(String imageName) {\n     }\n     */\n     \n+    /**\n+     * \n+     * @param fileId\n+     * @param formatTag\n+     * @param formatVersion\n+     * @param origin\n+     * @param isPublic\n+     * @param fileInputStream\n+     * @param contentDispositionHeader\n+     * @param formDataBodyPart\n+     * @return \n+     */\n+    @Path(\"datafile/{fileId}/metadata/{formatTag}/{formatVersion}\")\n+    @POST\n+    @Consumes(MediaType.MULTIPART_FORM_DATA)\n+\n+    public Response saveAuxiliaryFileWithVersion(@PathParam(\"fileId\") Long fileId,\n+            @PathParam(\"formatTag\") String formatTag,\n+            @PathParam(\"formatVersion\") String formatVersion,\n+            @FormDataParam(\"origin\") String origin,\n+            @FormDataParam(\"isPublic\") boolean isPublic,\n+            @FormDataParam(\"file\") InputStream fileInputStream\n+          \n+    ) {\n+        AuthenticatedUser authenticatedUser;\n+        try {\n+            authenticatedUser = findAuthenticatedUserOrDie();\n+        } catch (WrappedResponse ex) {\n+            return error(FORBIDDEN, \"Authorized users only.\");\n+        }\n+\n+        DataFile dataFile = dataFileService.find(fileId);\n+        if (dataFile == null) {\n+            return error(BAD_REQUEST, \"File not found based on id \" + fileId + \".\");\n+        }\n+        \n+         if (!permissionService.userOn(authenticatedUser, dataFile.getOwner()).has(Permission.EditDataset)) {\n+            return error(FORBIDDEN, \"User not authorized to edit the dataset.\");\n+        }\n+\n+        if (!dataFile.isTabularData()) {\n+            return error(BAD_REQUEST, \"Not a tabular DataFile (db id=\" + fileId + \")\");\n+        }\n+         \n+\n+        AuxiliaryFile saved = auxiliaryFileService.processAuxiliaryFile(fileInputStream, dataFile, formatTag, formatVersion, origin, isPublic);\n+      \n+        if (saved!=null) {\n+            return created(saved.getId().toString(),JsonPrinter.json(saved));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36b69df6ebf8a32b72cd524337645df22720c0e5"}, "originalPosition": 225}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "471dd25d46c253e158aefe382873599719141786", "author": {"user": {"login": "pdurbin", "name": "Philip Durbin"}}, "url": "https://github.com/IQSS/dataverse/commit/471dd25d46c253e158aefe382873599719141786", "committedDate": "2020-11-24T18:48:18Z", "message": "switch from created to ok #7275"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "023c5b57763bcb62cd972cb41d8f689dc289975c", "author": {"user": {"login": "pdurbin", "name": "Philip Durbin"}}, "url": "https://github.com/IQSS/dataverse/commit/023c5b57763bcb62cd972cb41d8f689dc289975c", "committedDate": "2020-11-24T18:49:12Z", "message": "Merge branch 'develop' into 7275-upload-auxliary-files #7275"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21977d0688e3b3465ce8f5a9db081134bcef95fa", "author": {"user": {"login": "pdurbin", "name": "Philip Durbin"}}, "url": "https://github.com/IQSS/dataverse/commit/21977d0688e3b3465ce8f5a9db081134bcef95fa", "committedDate": "2020-11-24T18:53:47Z", "message": "make docs match OK/200 response from add #7275"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3ODE0NDY3", "url": "https://github.com/IQSS/dataverse/pull/7350#pullrequestreview-537814467", "createdAt": "2020-11-24T18:55:36Z", "commit": {"oid": "21977d0688e3b3465ce8f5a9db081134bcef95fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "103b591015df8292174c934e1fde43beee081f16", "author": {"user": {"login": "djbrooke", "name": "Danny Brooke"}}, "url": "https://github.com/IQSS/dataverse/commit/103b591015df8292174c934e1fde43beee081f16", "committedDate": "2020-11-30T16:46:16Z", "message": "adding release notes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82c5f6699ce3e57f3185107967fdab232244988c", "author": {"user": {"login": "ekraffmiller", "name": "Ellen Kraffmiller"}}, "url": "https://github.com/IQSS/dataverse/commit/82c5f6699ce3e57f3185107967fdab232244988c", "committedDate": "2020-11-30T21:51:20Z", "message": "Update aux-file-support.rst\n\nfixed typo in deposit URL"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 804, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}