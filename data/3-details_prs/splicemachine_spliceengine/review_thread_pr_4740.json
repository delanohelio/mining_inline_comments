{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NzA0MjA4", "number": 4740, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTozNzozNVrOE-z0ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMTowOTo1OFrOE_4PEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mjk2MTg3OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTozNzozNVrOH8KnEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDoxODowNFrOH8un7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MDQ1MA==", "bodyText": "I guess we can't quite deprecate that one until we support an alternative that can be used for a transition though, but I agree we need to deprecate this in favour of a single parameter for timestamp precision, and a new way to specify the precision at function level: e.g. CURRENT TIMESTAMP(9)", "url": "https://github.com/splicemachine/spliceengine/pull/4740#discussion_r532850450", "createdAt": "2020-11-30T19:37:35Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "diffHunk": "@@ -603,6 +604,10 @@ else if (newMergeJoinString.equals(\"forced\"))\n                 }\n                 cc.setDisablePerParallelTaskJoinCosting(disablePerParallelTaskJoinCosting);\n \n+                /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfdd5759d74ac284395575eca1977dda7ecd84e5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ0MDQ5NQ==", "bodyText": "Yes, maybe I shouldn't write that until we have an alternative. will remove it.", "url": "https://github.com/splicemachine/spliceengine/pull/4740#discussion_r533440495", "createdAt": "2020-12-01T14:18:04Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "diffHunk": "@@ -603,6 +604,10 @@ else if (newMergeJoinString.equals(\"forced\"))\n                 }\n                 cc.setDisablePerParallelTaskJoinCosting(disablePerParallelTaskJoinCosting);\n \n+                /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MDQ1MA=="}, "originalCommit": {"oid": "bfdd5759d74ac284395575eca1977dda7ecd84e5"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mjk4MzU0OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/CastNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo0MzoyMlrOH8K0bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo0MzoyMlrOH8K0bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1Mzg2OA==", "bodyText": "@martinrupp are you familiar with that? I seem to remember that you worked with precisions before.", "url": "https://github.com/splicemachine/spliceengine/pull/4740#discussion_r532853868", "createdAt": "2020-11-30T19:43:22Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/CastNode.java", "diffHunk": "@@ -1101,6 +1123,7 @@ private void genDataValueConversion(ExpressionClassBuilder acb,\n              * of VSDV.\n              */\n \n+            // not sure if this is important", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfdd5759d74ac284395575eca1977dda7ecd84e5"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzM3MDEzOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/utils/SpliceAdmin.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMDo0NTozM1rOH9tcNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjowNzoxMlrOH-kUQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ2OTY4NA==", "bodyText": "I like the idea of automatically forcing recompile for convenience, but are you sure we want to do this?  It may have a performance impact.  Every time a flag is changed we have to recompile all SQLs and triggers.  There is no option for the user to set a database property without calling these cache-clearing functions if they wish to avoid it.  Something we should think about, perhaps, before making this change.", "url": "https://github.com/splicemachine/spliceengine/pull/4740#discussion_r534469684", "createdAt": "2020-12-02T20:45:33Z", "author": {"login": "msirek"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/utils/SpliceAdmin.java", "diffHunk": "@@ -1283,6 +1283,9 @@ public static void SYSCS_SET_GLOBAL_DATABASE_PROPERTY(final String key,final Str\n             PropertyInfo.setDatabaseProperty(key, value);\n             DDLMessage.DDLChange ddlChange = ProtoUtil.createSetDatabaseProperty(tc.getActiveStateTxn().getTxnId(), key);\n             tc.prepareDataDictionaryChange(DDLUtils.notifyMetadataChange(ddlChange));\n+            // we need to invalidate the statement caches since we could set parameters that affect query plans.\n+            SYSCS_INVALIDATE_STORED_STATEMENTS();\n+            SYSCS_EMPTY_GLOBAL_STATEMENT_CACHE();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a04d9071a02ba10c7d9b62afea244e1c935729ed"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYxNDY5MA==", "bodyText": "We can decide this point later, so the build can proceed.  Opened the following Jira:  https://splicemachine.atlassian.net/browse/DB-10948", "url": "https://github.com/splicemachine/spliceengine/pull/4740#discussion_r534614690", "createdAt": "2020-12-03T02:13:23Z", "author": {"login": "msirek"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/utils/SpliceAdmin.java", "diffHunk": "@@ -1283,6 +1283,9 @@ public static void SYSCS_SET_GLOBAL_DATABASE_PROPERTY(final String key,final Str\n             PropertyInfo.setDatabaseProperty(key, value);\n             DDLMessage.DDLChange ddlChange = ProtoUtil.createSetDatabaseProperty(tc.getActiveStateTxn().getTxnId(), key);\n             tc.prepareDataDictionaryChange(DDLUtils.notifyMetadataChange(ddlChange));\n+            // we need to invalidate the statement caches since we could set parameters that affect query plans.\n+            SYSCS_INVALIDATE_STORED_STATEMENTS();\n+            SYSCS_EMPTY_GLOBAL_STATEMENT_CACHE();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ2OTY4NA=="}, "originalCommit": {"oid": "a04d9071a02ba10c7d9b62afea244e1c935729ed"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAxMjY4Nw==", "bodyText": "Thanks @msirek for your observation, maybe it is OK to keep this implementation as setting a global database property doesn't happen very often but let's follow up in the JIRA you opened to discuss improvements (one improvement that @dgomezferro mentioned was e.g. to only invalidated affected statements using the dependency manager).", "url": "https://github.com/splicemachine/spliceengine/pull/4740#discussion_r535012687", "createdAt": "2020-12-03T09:37:58Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/utils/SpliceAdmin.java", "diffHunk": "@@ -1283,6 +1283,9 @@ public static void SYSCS_SET_GLOBAL_DATABASE_PROPERTY(final String key,final Str\n             PropertyInfo.setDatabaseProperty(key, value);\n             DDLMessage.DDLChange ddlChange = ProtoUtil.createSetDatabaseProperty(tc.getActiveStateTxn().getTxnId(), key);\n             tc.prepareDataDictionaryChange(DDLUtils.notifyMetadataChange(ddlChange));\n+            // we need to invalidate the statement caches since we could set parameters that affect query plans.\n+            SYSCS_INVALIDATE_STORED_STATEMENTS();\n+            SYSCS_EMPTY_GLOBAL_STATEMENT_CACHE();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ2OTY4NA=="}, "originalCommit": {"oid": "a04d9071a02ba10c7d9b62afea244e1c935729ed"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM2MzUxNA==", "bodyText": "This is not needed for all database properties. You can do this if the property is timestamp precision", "url": "https://github.com/splicemachine/spliceengine/pull/4740#discussion_r535363514", "createdAt": "2020-12-03T16:00:35Z", "author": {"login": "jyuanca"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/utils/SpliceAdmin.java", "diffHunk": "@@ -1283,6 +1283,9 @@ public static void SYSCS_SET_GLOBAL_DATABASE_PROPERTY(final String key,final Str\n             PropertyInfo.setDatabaseProperty(key, value);\n             DDLMessage.DDLChange ddlChange = ProtoUtil.createSetDatabaseProperty(tc.getActiveStateTxn().getTxnId(), key);\n             tc.prepareDataDictionaryChange(DDLUtils.notifyMetadataChange(ddlChange));\n+            // we need to invalidate the statement caches since we could set parameters that affect query plans.\n+            SYSCS_INVALIDATE_STORED_STATEMENTS();\n+            SYSCS_EMPTY_GLOBAL_STATEMENT_CACHE();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ2OTY4NA=="}, "originalCommit": {"oid": "a04d9071a02ba10c7d9b62afea244e1c935729ed"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM2ODc2OQ==", "bodyText": "Thanks @jyuanca! I will address it in DB-10948 then.", "url": "https://github.com/splicemachine/spliceengine/pull/4740#discussion_r535368769", "createdAt": "2020-12-03T16:07:12Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/utils/SpliceAdmin.java", "diffHunk": "@@ -1283,6 +1283,9 @@ public static void SYSCS_SET_GLOBAL_DATABASE_PROPERTY(final String key,final Str\n             PropertyInfo.setDatabaseProperty(key, value);\n             DDLMessage.DDLChange ddlChange = ProtoUtil.createSetDatabaseProperty(tc.getActiveStateTxn().getTxnId(), key);\n             tc.prepareDataDictionaryChange(DDLUtils.notifyMetadataChange(ddlChange));\n+            // we need to invalidate the statement caches since we could set parameters that affect query plans.\n+            SYSCS_INVALIDATE_STORED_STATEMENTS();\n+            SYSCS_EMPTY_GLOBAL_STATEMENT_CACHE();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ2OTY4NA=="}, "originalCommit": {"oid": "a04d9071a02ba10c7d9b62afea244e1c935729ed"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDE3MTA2OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMTowOTo1OFrOH901fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTozOTo0N1rOH-Osng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU5MDg0Nw==", "bodyText": "Better to throw the error so that the user can correct the property values", "url": "https://github.com/splicemachine/spliceengine/pull/4740#discussion_r534590847", "createdAt": "2020-12-03T01:09:58Z", "author": {"login": "jyuanca"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "diffHunk": "@@ -619,6 +620,22 @@ else if (newMergeJoinString.equals(\"forced\"))\n                 }\n                 cc.setCurrentTimestampPrecision(currentTimestampPrecision);\n \n+                String timestampPrecisionString =\n+                        PropertyUtil.getCachedDatabaseProperty(lcc, Property.SPLICE_TIMESTAMP_PRECISION);\n+                int timestampPrecision = CompilerContext.DEFAULT_TIMESTAMP_PRECISION;\n+                try {\n+                    if (timestampPrecisionString != null)\n+                        timestampPrecision = Integer.parseInt(timestampPrecisionString);\n+                    if (timestampPrecision < Limits.MIN_TIMESTAMP_PRECISION)\n+                        timestampPrecision = Limits.MIN_TIMESTAMP_PRECISION;\n+                    if (timestampPrecision > Limits.MAX_TIMESTAMP_PRECISION)\n+                        timestampPrecision = Limits.MAX_TIMESTAMP_PRECISION;\n+                } catch (Exception e) {\n+                    // If the property value failed to convert to a boolean, don't throw an error,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58e674947b07ff0d456be8080f7de64bd33fca3a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU5NjE4OQ==", "bodyText": "@jyuanca I believe this is not the code to handle the statement itself, but to parse the value once it's already been set.  So, if we throw the Exception here, that would cause all SQL requests to fail after a user has set an out-of-range value for this property.  So, the current code may be OK.", "url": "https://github.com/splicemachine/spliceengine/pull/4740#discussion_r534596189", "createdAt": "2020-12-03T01:23:41Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "diffHunk": "@@ -619,6 +620,22 @@ else if (newMergeJoinString.equals(\"forced\"))\n                 }\n                 cc.setCurrentTimestampPrecision(currentTimestampPrecision);\n \n+                String timestampPrecisionString =\n+                        PropertyUtil.getCachedDatabaseProperty(lcc, Property.SPLICE_TIMESTAMP_PRECISION);\n+                int timestampPrecision = CompilerContext.DEFAULT_TIMESTAMP_PRECISION;\n+                try {\n+                    if (timestampPrecisionString != null)\n+                        timestampPrecision = Integer.parseInt(timestampPrecisionString);\n+                    if (timestampPrecision < Limits.MIN_TIMESTAMP_PRECISION)\n+                        timestampPrecision = Limits.MIN_TIMESTAMP_PRECISION;\n+                    if (timestampPrecision > Limits.MAX_TIMESTAMP_PRECISION)\n+                        timestampPrecision = Limits.MAX_TIMESTAMP_PRECISION;\n+                } catch (Exception e) {\n+                    // If the property value failed to convert to a boolean, don't throw an error,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU5MDg0Nw=="}, "originalCommit": {"oid": "58e674947b07ff0d456be8080f7de64bd33fca3a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAxNDU1OA==", "bodyText": "@jyuanca does @msirek's address your comment?", "url": "https://github.com/splicemachine/spliceengine/pull/4740#discussion_r535014558", "createdAt": "2020-12-03T09:39:47Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "diffHunk": "@@ -619,6 +620,22 @@ else if (newMergeJoinString.equals(\"forced\"))\n                 }\n                 cc.setCurrentTimestampPrecision(currentTimestampPrecision);\n \n+                String timestampPrecisionString =\n+                        PropertyUtil.getCachedDatabaseProperty(lcc, Property.SPLICE_TIMESTAMP_PRECISION);\n+                int timestampPrecision = CompilerContext.DEFAULT_TIMESTAMP_PRECISION;\n+                try {\n+                    if (timestampPrecisionString != null)\n+                        timestampPrecision = Integer.parseInt(timestampPrecisionString);\n+                    if (timestampPrecision < Limits.MIN_TIMESTAMP_PRECISION)\n+                        timestampPrecision = Limits.MIN_TIMESTAMP_PRECISION;\n+                    if (timestampPrecision > Limits.MAX_TIMESTAMP_PRECISION)\n+                        timestampPrecision = Limits.MAX_TIMESTAMP_PRECISION;\n+                } catch (Exception e) {\n+                    // If the property value failed to convert to a boolean, don't throw an error,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU5MDg0Nw=="}, "originalCommit": {"oid": "58e674947b07ff0d456be8080f7de64bd33fca3a"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2769, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}