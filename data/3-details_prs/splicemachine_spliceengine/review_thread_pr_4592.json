{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNTM2NjI4", "number": 4592, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDozMDo1MFrOE4r_Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDozMTo0OFrOE4sA_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODc2NDE5OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/FunctionIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDozMDo1MFrOHywgqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDo1ODo1M1rOHyxoIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NTY0MA==", "bodyText": "You can do insert into sbcs values (NULL, NULL) the case trick is only needed when you want a NULL in the select portion of a query I think.", "url": "https://github.com/splicemachine/spliceengine/pull/4592#discussion_r522985640", "createdAt": "2020-11-13T14:30:50Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/FunctionIT.java", "diffHunk": "@@ -782,5 +782,36 @@ public void testLengthOfCastToVarchar() throws Exception {\n             assertEquals(2, rs.getInt(1));\n         }\n     }\n+\n+    @Test\n+    public void testCastToCharCcsidAscii() throws SQLException {\n+        try (ResultSet rs = methodWatcher.executeQuery(\"select cast('abc' as char(5)), cast('abc' as char(5) ccsid ascii),\" +\n+                \"cast('abc' as varchar(5)), cast('abc' as varchar(5) ccsid ascii)\")) {\n+            rs.next();\n+            assertEquals(rs.getString(1), rs.getString(2));\n+            assertEquals(rs.getString(3), rs.getString(4));\n+        }\n+    }\n+\n+    @Test\n+    public void testCastToCharForSbcsData() throws Exception\n+    {\n+        methodWatcher.executeUpdate(\"drop table sbcs if exists\");\n+        methodWatcher.executeUpdate(\"create table sbcs(a varchar(30) for bit data, b char(30) for bit data)\");\n+        methodWatcher.executeUpdate(\"insert into sbcs values (cast('a' as varchar(30) for bit data), cast('b' as char(30) for bit data))\");\n+        methodWatcher.executeUpdate(\"insert into sbcs values (case when 1 = 2 then 'dummy' end, case when 1 = 2 then 'dummy' end)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe0add2b542e22e53e35a8db3f8ac7d80e44e57"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAwMzkzOA==", "bodyText": "Ah, good to know, thanks!", "url": "https://github.com/splicemachine/spliceengine/pull/4592#discussion_r523003938", "createdAt": "2020-11-13T14:58:53Z", "author": {"login": "arnaud-splice"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/FunctionIT.java", "diffHunk": "@@ -782,5 +782,36 @@ public void testLengthOfCastToVarchar() throws Exception {\n             assertEquals(2, rs.getInt(1));\n         }\n     }\n+\n+    @Test\n+    public void testCastToCharCcsidAscii() throws SQLException {\n+        try (ResultSet rs = methodWatcher.executeQuery(\"select cast('abc' as char(5)), cast('abc' as char(5) ccsid ascii),\" +\n+                \"cast('abc' as varchar(5)), cast('abc' as varchar(5) ccsid ascii)\")) {\n+            rs.next();\n+            assertEquals(rs.getString(1), rs.getString(2));\n+            assertEquals(rs.getString(3), rs.getString(4));\n+        }\n+    }\n+\n+    @Test\n+    public void testCastToCharForSbcsData() throws Exception\n+    {\n+        methodWatcher.executeUpdate(\"drop table sbcs if exists\");\n+        methodWatcher.executeUpdate(\"create table sbcs(a varchar(30) for bit data, b char(30) for bit data)\");\n+        methodWatcher.executeUpdate(\"insert into sbcs values (cast('a' as varchar(30) for bit data), cast('b' as char(30) for bit data))\");\n+        methodWatcher.executeUpdate(\"insert into sbcs values (case when 1 = 2 then 'dummy' end, case when 1 = 2 then 'dummy' end)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NTY0MA=="}, "originalCommit": {"oid": "2fe0add2b542e22e53e35a8db3f8ac7d80e44e57"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODc2ODYyOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/catalog/types/TypeDescriptorImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDozMTo0OFrOHywjSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNToyNDoxN1rOHyyptA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NjMxNA==", "bodyText": "@arnaud-splice have you tested this with triggers?\n@jyuanca @yxia92 do you think this could cause issues if we don't serialize it?", "url": "https://github.com/splicemachine/spliceengine/pull/4592#discussion_r522986314", "createdAt": "2020-11-13T14:31:48Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/catalog/types/TypeDescriptorImpl.java", "diffHunk": "@@ -65,6 +65,8 @@\n     private int                        scale;\n     private boolean                    isNullable;\n     private int                        maximumWidth;\n+\n+    transient private boolean          forSbcsData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe0add2b542e22e53e35a8db3f8ac7d80e44e57"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAwNDY1OQ==", "bodyText": "I have, everything works well. We only use this variable in CastNode.generateExpression. I think it'd be cleaner to add this boolean to the cast node itself, but that means reworking the grammar quite a bit, I'll see what I can do there. (May have to push that refactor to next sprint)", "url": "https://github.com/splicemachine/spliceengine/pull/4592#discussion_r523004659", "createdAt": "2020-11-13T14:59:52Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/catalog/types/TypeDescriptorImpl.java", "diffHunk": "@@ -65,6 +65,8 @@\n     private int                        scale;\n     private boolean                    isNullable;\n     private int                        maximumWidth;\n+\n+    transient private boolean          forSbcsData;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NjMxNA=="}, "originalCommit": {"oid": "2fe0add2b542e22e53e35a8db3f8ac7d80e44e57"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAyMDcyNA==", "bodyText": "Refactoring done.", "url": "https://github.com/splicemachine/spliceengine/pull/4592#discussion_r523020724", "createdAt": "2020-11-13T15:24:17Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/catalog/types/TypeDescriptorImpl.java", "diffHunk": "@@ -65,6 +65,8 @@\n     private int                        scale;\n     private boolean                    isNullable;\n     private int                        maximumWidth;\n+\n+    transient private boolean          forSbcsData;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NjMxNA=="}, "originalCommit": {"oid": "2fe0add2b542e22e53e35a8db3f8ac7d80e44e57"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2786, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}