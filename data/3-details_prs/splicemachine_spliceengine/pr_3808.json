{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NjkwMDc2", "number": 3808, "title": "DB-9797 Restore DB-9651 with consistency fix", "bodyText": "", "createdAt": "2020-07-11T00:16:02Z", "url": "https://github.com/splicemachine/spliceengine/pull/3808", "merged": true, "mergeCommit": {"oid": "63e380aa01f89127df16df148de06586f59d3eac"}, "closed": true, "closedAt": "2020-07-17T00:34:41Z", "author": {"login": "arnaud-splice"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczty0FgH2gAyNDQ3NjkwMDc2OjFhZmQxY2MwZGU2NzhmNWI0NmMyZWE0MTEzZDYyNTY4MDY4MjRiNGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1nsklgFqTQ1MDI3ODQzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1afd1cc0de678f5b46c2ea4113d6256806824b4b", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/1afd1cc0de678f5b46c2ea4113d6256806824b4b", "committedDate": "2020-07-11T01:17:27Z", "message": "DB-9797 Restore DB-9651 with consistency fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0cb8ac54ae59e2f15498d7e4efbb56ec7e254341", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/0cb8ac54ae59e2f15498d7e4efbb56ec7e254341", "committedDate": "2020-07-11T00:11:50Z", "message": "DB-9797 Restore DB-9640 with consistency fix"}, "afterCommit": {"oid": "1afd1cc0de678f5b46c2ea4113d6256806824b4b", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/1afd1cc0de678f5b46c2ea4113d6256806824b4b", "committedDate": "2020-07-11T01:17:27Z", "message": "DB-9797 Restore DB-9651 with consistency fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4ODQzMzIy", "url": "https://github.com/splicemachine/spliceengine/pull/3808#pullrequestreview-448843322", "createdAt": "2020-07-15T10:54:40Z", "commit": {"oid": "1afd1cc0de678f5b46c2ea4113d6256806824b4b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MTgzOTQ5", "url": "https://github.com/splicemachine/spliceengine/pull/3808#pullrequestreview-449183949", "createdAt": "2020-07-15T17:35:22Z", "commit": {"oid": "1afd1cc0de678f5b46c2ea4113d6256806824b4b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzozNToyMlrOGyIlmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDoyMTo1MVrOGytUlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIyMjY4MA==", "bodyText": "(optional) could you maybe remove this field? it looks redundant.", "url": "https://github.com/splicemachine/spliceengine/pull/3808#discussion_r455222680", "createdAt": "2020-07-15T17:35:22Z", "author": {"login": "hatyo"}, "path": "hbase_storage/src/main/java/com/splicemachine/access/client/SkeletonClientSideRegionScanner.java", "diffHunk": "@@ -68,6 +68,8 @@\n     private boolean flushed;\n     private long numberOfRows = 0;\n     private FileSystem customFilesystem;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1afd1cc0de678f5b46c2ea4113d6256806824b4b"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIyMzc5Ng==", "bodyText": "(optional) it would be nice if you could maybe document the purpose of this class. IIUC it allows Spark to interface with memstore, right?", "url": "https://github.com/splicemachine/spliceengine/pull/3808#discussion_r455223796", "createdAt": "2020-07-15T17:36:24Z", "author": {"login": "hatyo"}, "path": "hbase_storage/src/main/java/com/splicemachine/access/client/SkeletonClientSideRegionScanner.java", "diffHunk": "@@ -14,39 +14,39 @@\n \n package com.splicemachine.access.client;\n \n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.util.*;\n-import java.util.stream.Collectors;\n-\n import com.google.common.collect.Sets;\n import com.splicemachine.coprocessor.SpliceMessage;\n-import com.splicemachine.mrio.MRConstants;\n import com.splicemachine.si.constants.SIConstants;\n import com.splicemachine.si.impl.driver.SIDriver;\n import com.splicemachine.storage.Partition;\n import com.splicemachine.storage.SkeletonHBaseClientPartition;\n+import com.splicemachine.utils.SpliceLogUtils;\n+import org.apache.commons.codec.binary.Hex;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.FileSystem;\n import org.apache.hadoop.fs.Path;\n-import org.apache.hadoop.hbase.*;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellUtil;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionInfo;\n import org.apache.hadoop.hbase.client.IsolationLevel;\n-import org.apache.hadoop.hbase.client.*;\n import org.apache.hadoop.hbase.client.ResultScanner;\n import org.apache.hadoop.hbase.client.Scan;\n import org.apache.hadoop.hbase.client.TableDescriptor;\n import org.apache.hadoop.hbase.ipc.CoprocessorRpcUtils;\n import org.apache.hadoop.hbase.ipc.ServerRpcController;\n-import org.apache.hadoop.hbase.regionserver.*;\n+import org.apache.hadoop.hbase.regionserver.HRegion;\n+import org.apache.hadoop.hbase.regionserver.HRegionUtil;\n+import org.apache.hadoop.hbase.regionserver.KeyValueScanner;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n import org.apache.hadoop.hbase.util.Bytes;\n import org.apache.hadoop.hbase.util.FSUtils;\n-import org.apache.hadoop.hdfs.ProxiedFilesystem;\n-import org.apache.hadoop.hdfs.DistributedFileSystem;\n-import org.apache.hadoop.security.AccessControlException;\n import org.apache.log4j.Logger;\n-import com.splicemachine.utils.SpliceLogUtils;\n import org.spark_project.guava.base.Throwables;\n \n+import java.io.IOException;\n+import java.util.*;\n+\n /**\n  * \n  * ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1afd1cc0de678f5b46c2ea4113d6256806824b4b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxMDAwOA==", "bodyText": "So if there are no more rows, we consume the rowBuffer and return, otherwise, we consume the rowBuffer and pre-fetch the next row into rowBuffer, right?", "url": "https://github.com/splicemachine/spliceengine/pull/3808#discussion_r455810008", "createdAt": "2020-07-16T14:02:24Z", "author": {"login": "hatyo"}, "path": "hbase_storage/src/main/java/com/splicemachine/access/client/SkeletonClientSideRegionScanner.java", "diffHunk": "@@ -141,10 +143,44 @@ public boolean isFilterDone() throws IOException{\n         return scanner.isFilterDone();\n     }\n \n+    private void fetchNextAndGiveBuffer(List<Cell> result) throws IOException {\n+        assert result.isEmpty();\n+        List<Cell> nextResult = new ArrayList<>();\n+        boolean response = nextMerged(nextResult);\n+        if (matchingFamily(nextResult, ClientRegionConstants.FLUSH)) {\n+            // A flush should be returned before a potential partial result in the buffer\n+            result.addAll(nextResult);\n+        } else {\n+            result.addAll(rowBuffer);\n+            rowBuffer = nextResult;\n+            if (!response) {\n+                noMoreRecords = true;\n+            }\n+        }\n+    }\n+\n     @Override\n     public boolean nextRaw(List<Cell> result) throws IOException {\n-        boolean res = nextMerged(result);\n-        boolean returnValue = updateTopCell(res,result);\n+        boolean firstCall = rowBuffer == null;\n+        boolean response;\n+        if (firstCall) {\n+            rowBuffer = new ArrayList<>();\n+            response = nextMerged(rowBuffer);\n+            if (!response) {\n+                result.addAll(rowBuffer);\n+                rowBuffer = null;\n+            } else {\n+                fetchNextAndGiveBuffer(result);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1afd1cc0de678f5b46c2ea4113d6256806824b4b"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxMDg2OQ==", "bodyText": "Is this field necessary? could you please consider removing it, it makes understanding the code unnecessarily more complicated IMHO, i.e.:\nmake fetchNextAndGiveBuffer() return boolean indicating whether more rows are to come  (similar to RegionScanner.nextRaw) and assign it to a local variable in nextRaw call (maybe with some documentation)", "url": "https://github.com/splicemachine/spliceengine/pull/3808#discussion_r455810869", "createdAt": "2020-07-16T14:03:35Z", "author": {"login": "hatyo"}, "path": "hbase_storage/src/main/java/com/splicemachine/access/client/SkeletonClientSideRegionScanner.java", "diffHunk": "@@ -68,6 +68,8 @@\n     private boolean flushed;\n     private long numberOfRows = 0;\n     private FileSystem customFilesystem;\n+    private List<Cell> rowBuffer = null;\n+    private boolean noMoreRecords = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1afd1cc0de678f5b46c2ea4113d6256806824b4b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxNTk1OA==", "bodyText": "consider renaming this to something like: moreRowsFollow.", "url": "https://github.com/splicemachine/spliceengine/pull/3808#discussion_r455815958", "createdAt": "2020-07-16T14:10:24Z", "author": {"login": "hatyo"}, "path": "hbase_storage/src/main/java/com/splicemachine/access/client/SkeletonClientSideRegionScanner.java", "diffHunk": "@@ -141,10 +143,44 @@ public boolean isFilterDone() throws IOException{\n         return scanner.isFilterDone();\n     }\n \n+    private void fetchNextAndGiveBuffer(List<Cell> result) throws IOException {\n+        assert result.isEmpty();\n+        List<Cell> nextResult = new ArrayList<>();\n+        boolean response = nextMerged(nextResult);\n+        if (matchingFamily(nextResult, ClientRegionConstants.FLUSH)) {\n+            // A flush should be returned before a potential partial result in the buffer\n+            result.addAll(nextResult);\n+        } else {\n+            result.addAll(rowBuffer);\n+            rowBuffer = nextResult;\n+            if (!response) {\n+                noMoreRecords = true;\n+            }\n+        }\n+    }\n+\n     @Override\n     public boolean nextRaw(List<Cell> result) throws IOException {\n-        boolean res = nextMerged(result);\n-        boolean returnValue = updateTopCell(res,result);\n+        boolean firstCall = rowBuffer == null;\n+        boolean response;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1afd1cc0de678f5b46c2ea4113d6256806824b4b"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgyMDAxMg==", "bodyText": "I think this is neither thread-safe nor exception-safe.\nInstead maybe we should:\n\nMoved the flushed flag into the updateScanner method and update it there with care.\nMark updateScanner method as synchronized.", "url": "https://github.com/splicemachine/spliceengine/pull/3808#discussion_r455820012", "createdAt": "2020-07-16T14:15:26Z", "author": {"login": "hatyo"}, "path": "hbase_storage/src/main/java/com/splicemachine/access/client/SkeletonClientSideRegionScanner.java", "diffHunk": "@@ -189,8 +232,7 @@ public HRegion getRegion(){\n     /*private helper methods*/\n \n     private boolean updateTopCell(boolean response, List<Cell> results) throws IOException {\n-        if (!results.isEmpty() &&\n-                CellUtil.matchingFamily(results.get(0),ClientRegionConstants.FLUSH)){\n+        if (matchingFamily(results, ClientRegionConstants.FLUSH)) {\n             if (LOG.isDebugEnabled())\n                 SpliceLogUtils.debug(LOG,\"received flush message \" + results.get(0));\n             flushed = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1afd1cc0de678f5b46c2ea4113d6256806824b4b"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgyMTQ5NA==", "bodyText": "could you please rephrase the documentation.", "url": "https://github.com/splicemachine/spliceengine/pull/3808#discussion_r455821494", "createdAt": "2020-07-16T14:17:34Z", "author": {"login": "hatyo"}, "path": "hbase_storage/src/main/java/com/splicemachine/access/client/SkeletonClientSideRegionScanner.java", "diffHunk": "@@ -155,7 +191,7 @@ public boolean nextRaw(List<Cell> result) throws IOException {\n      * refresh underlying RegionScanner we call this when new store file gets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1afd1cc0de678f5b46c2ea4113d6256806824b4b"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgyMjQxOA==", "bodyText": "optional: add: assert htd != null && htd.getTableName() != null;", "url": "https://github.com/splicemachine/spliceengine/pull/3808#discussion_r455822418", "createdAt": "2020-07-16T14:18:52Z", "author": {"login": "hatyo"}, "path": "hbase_storage/src/main/java/com/splicemachine/access/client/SkeletonClientSideRegionScanner.java", "diffHunk": "@@ -155,7 +191,7 @@ public boolean nextRaw(List<Cell> result) throws IOException {\n      * refresh underlying RegionScanner we call this when new store file gets\n      * created by MemStore flushes or current scanner fails due to compaction\n      */\n-    public void updateScanner() throws IOException {\n+    void updateScanner() throws IOException {\n             if (LOG.isDebugEnabled()) {\n                 SpliceLogUtils.debug(LOG,\n                         \"updateScanner with hregionInfo=%s, tableName=%s, rootDir=%s, scan=%s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1afd1cc0de678f5b46c2ea4113d6256806824b4b"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgyMzExMw==", "bodyText": "nice! \ud83d\udc4d", "url": "https://github.com/splicemachine/spliceengine/pull/3808#discussion_r455823113", "createdAt": "2020-07-16T14:19:53Z", "author": {"login": "hatyo"}, "path": "hbase_storage/src/main/java/com/splicemachine/access/client/SkeletonClientSideRegionScanner.java", "diffHunk": "@@ -164,11 +200,18 @@ public void updateScanner() throws IOException {\n             if (flushed) {\n                 if (LOG.isDebugEnabled())\n                     SpliceLogUtils.debug(LOG, \"Flush occurred\");\n-                if (this.topCell != null) {\n+                byte[] restartRow = null;\n+                if (rowBuffer != null && !rowBuffer.isEmpty()) {\n+                    restartRow = CellUtil.cloneRow(rowBuffer.get(0));\n+                    rowBuffer = null;\n+                } else if (this.topCell != null) {\n+                    restartRow = Bytes.add(CellUtil.cloneRow(topCell), new byte[]{0});\n+                }\n+                if (restartRow != null) {\n                     if (LOG.isDebugEnabled())\n-                        SpliceLogUtils.debug(LOG, \"setting start row to %s\", topCell);\n+                        SpliceLogUtils.debug(LOG, \"setting start row to %s\", Hex.encodeHexString(restartRow));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1afd1cc0de678f5b46c2ea4113d6256806824b4b"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgyNDUzNA==", "bodyText": "I don't understand this comment, does it mean that we have the full nextResult or could it be partial?", "url": "https://github.com/splicemachine/spliceengine/pull/3808#discussion_r455824534", "createdAt": "2020-07-16T14:21:51Z", "author": {"login": "hatyo"}, "path": "hbase_storage/src/main/java/com/splicemachine/access/client/SkeletonClientSideRegionScanner.java", "diffHunk": "@@ -141,10 +143,44 @@ public boolean isFilterDone() throws IOException{\n         return scanner.isFilterDone();\n     }\n \n+    private void fetchNextAndGiveBuffer(List<Cell> result) throws IOException {\n+        assert result.isEmpty();\n+        List<Cell> nextResult = new ArrayList<>();\n+        boolean response = nextMerged(nextResult);\n+        if (matchingFamily(nextResult, ClientRegionConstants.FLUSH)) {\n+            // A flush should be returned before a potential partial result in the buffer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1afd1cc0de678f5b46c2ea4113d6256806824b4b"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTM0NDY1", "url": "https://github.com/splicemachine/spliceengine/pull/3808#pullrequestreview-449934465", "createdAt": "2020-07-16T14:58:59Z", "commit": {"oid": "1afd1cc0de678f5b46c2ea4113d6256806824b4b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMjc4NDM1", "url": "https://github.com/splicemachine/spliceengine/pull/3808#pullrequestreview-450278435", "createdAt": "2020-07-16T23:19:03Z", "commit": {"oid": "1afd1cc0de678f5b46c2ea4113d6256806824b4b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1236, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}