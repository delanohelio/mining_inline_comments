{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MDMxODM5", "number": 3986, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzo0MToyNFrOEZsnhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzoyNTo1OFrOEf2-YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzgwODY5OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzo0MToyNFrOHCqU-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjo1NDozNlrOHEsC_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1MjY5OQ==", "bodyText": "Same here", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r472552699", "createdAt": "2020-08-18T23:41:24Z", "author": {"login": "jyuanca"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java", "diffHunk": "@@ -393,7 +417,8 @@ public static int getPartitions(String table, List<Partition> partitions, boolea\n             throw StandardException.plainWrapException(ioe);\n         } finally {\n             try {\n-                root.close();\n+                if (root != null)\n+                    root.close();\n             } catch (IOException e) {\n                 // ignore\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1d723095b2507d471ee9850395b3de0cdc021"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAyODQ2MA==", "bodyText": "Done.", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r473028460", "createdAt": "2020-08-19T13:27:50Z", "author": {"login": "ascend1"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java", "diffHunk": "@@ -393,7 +417,8 @@ public static int getPartitions(String table, List<Partition> partitions, boolea\n             throw StandardException.plainWrapException(ioe);\n         } finally {\n             try {\n-                root.close();\n+                if (root != null)\n+                    root.close();\n             } catch (IOException e) {\n                 // ignore\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1MjY5OQ=="}, "originalCommit": {"oid": "35d1d723095b2507d471ee9850395b3de0cdc021"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY3ODAxNA==", "bodyText": "I have to rebase this branch, otherwise it doesn't compile due to dependency issues. You can review the new commits starting from this one: f236e62", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r474678014", "createdAt": "2020-08-21T12:54:36Z", "author": {"login": "ascend1"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java", "diffHunk": "@@ -393,7 +417,8 @@ public static int getPartitions(String table, List<Partition> partitions, boolea\n             throw StandardException.plainWrapException(ioe);\n         } finally {\n             try {\n-                root.close();\n+                if (root != null)\n+                    root.close();\n             } catch (IOException e) {\n                 // ignore\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1MjY5OQ=="}, "originalCommit": {"oid": "35d1d723095b2507d471ee9850395b3de0cdc021"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzgwOTc1OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzo0MTo0M1rOHCqVhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzoyNzo0NFrOHDHXLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1MjgzOQ==", "bodyText": "You can rewrite this with try-with-resources block", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r472552839", "createdAt": "2020-08-18T23:41:43Z", "author": {"login": "jyuanca"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java", "diffHunk": "@@ -372,7 +395,8 @@ public static int getPartitions(byte[] table, List<Partition> partitions, boolea\n             throw StandardException.plainWrapException(ioe);\n         } finally {\n             try {\n-                root.close();\n+                if (root != null)\n+                    root.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1d723095b2507d471ee9850395b3de0cdc021"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAyODM5Nw==", "bodyText": "Done.", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r473028397", "createdAt": "2020-08-19T13:27:44Z", "author": {"login": "ascend1"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java", "diffHunk": "@@ -372,7 +395,8 @@ public static int getPartitions(byte[] table, List<Partition> partitions, boolea\n             throw StandardException.plainWrapException(ioe);\n         } finally {\n             try {\n-                root.close();\n+                if (root != null)\n+                    root.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1MjgzOQ=="}, "originalCommit": {"oid": "35d1d723095b2507d471ee9850395b3de0cdc021"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDg3NDA2OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNTo0ODozMVrOHC1AAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjo1MzozOFrOHEsBFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyNzU1NA==", "bodyText": "Ideally, missing column stats should not be all the columns in the table that do not have stats. It should only be the columns that are used by optimizer to estimate selectivity or cost. For example,\ncreate table t1 (a1 int, b1 int, c1 int);\ncreate table t2(a2 int, b2 int, c2 int);\n\ncall syscs_util.disable_column_statistics('SPLICE', 'T1', 'C1');\nanalyze table t1;\nanalyze table t2;\nexplain\nselect * from t1, t2 where a1=a2 and b1=1;\n\nFor this query, we don't care whether there is stats on c1 and b2, c2, we only care if there is stats on b1, a1, and a2 as they are the ones used by optimizer. So we should only report missing stats on these columns, but not on c1,  b2, and c2.", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r472727554", "createdAt": "2020-08-19T05:48:31Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java", "diffHunk": "@@ -173,8 +178,26 @@ public StoreCostControllerImpl(TableDescriptor td, ConglomerateDescriptor conglo\n                     throw StandardException.plainWrapException(e);\n                 }\n             }\n+            useRealTableStatistics = false;\n         } else {\n             tableStatistics = new TableStatisticsImpl(tableId, partitionStats,fallbackNullFraction,extraQualifierMultiplier);\n+            useRealTableStatistics = true;\n+            assert !partitionStatistics.isEmpty();\n+\n+            List<ColumnStatisticsDescriptor> columnStats = partitionStatistics.get(0).getColumnStatsDescriptors();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1d723095b2507d471ee9850395b3de0cdc021"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyOTA1OQ==", "bodyText": "So ideally, the missing column or stats info is specific to a query, and the info should be stored in the FromBaseTable instances instead of StoreCostControllerImpl which is shared among all the instances of the same table with in the same session.", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r472729059", "createdAt": "2020-08-19T05:50:50Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java", "diffHunk": "@@ -173,8 +178,26 @@ public StoreCostControllerImpl(TableDescriptor td, ConglomerateDescriptor conglo\n                     throw StandardException.plainWrapException(e);\n                 }\n             }\n+            useRealTableStatistics = false;\n         } else {\n             tableStatistics = new TableStatisticsImpl(tableId, partitionStats,fallbackNullFraction,extraQualifierMultiplier);\n+            useRealTableStatistics = true;\n+            assert !partitionStatistics.isEmpty();\n+\n+            List<ColumnStatisticsDescriptor> columnStats = partitionStatistics.get(0).getColumnStatsDescriptors();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyNzU1NA=="}, "originalCommit": {"oid": "35d1d723095b2507d471ee9850395b3de0cdc021"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY3NzUyNQ==", "bodyText": "I made further commits implementing the ideas according to your comment and our discussion. I have to rebase on master since this branch is getting old. To review the new commits, you can start from this one: f236e62", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r474677525", "createdAt": "2020-08-21T12:53:38Z", "author": {"login": "ascend1"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java", "diffHunk": "@@ -173,8 +178,26 @@ public StoreCostControllerImpl(TableDescriptor td, ConglomerateDescriptor conglo\n                     throw StandardException.plainWrapException(e);\n                 }\n             }\n+            useRealTableStatistics = false;\n         } else {\n             tableStatistics = new TableStatisticsImpl(tableId, partitionStats,fallbackNullFraction,extraQualifierMultiplier);\n+            useRealTableStatistics = true;\n+            assert !partitionStatistics.isEmpty();\n+\n+            List<ColumnStatisticsDescriptor> columnStats = partitionStatistics.get(0).getColumnStatsDescriptors();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyNzU1NA=="}, "originalCommit": {"oid": "35d1d723095b2507d471ee9850395b3de0cdc021"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTIyODU0OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ScanCostFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODoyMToxMVrOHHYMNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo1MjowMVrOHKIz7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5ODQyMw==", "bodyText": "Object from the leftOperandList of an inlist may not be a ColumnReference, for example: a1+1 in (1,2,3). So it is better to be conservative to check the type before casting. The above code does not have problem now as currently, only inlist with column can come here.", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r477498423", "createdAt": "2020-08-26T18:21:11Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ScanCostFunction.java", "diffHunk": "@@ -147,6 +150,25 @@ private void addSelectivity(SelectivityHolder holder) {\n         return holders;\n     }\n \n+    private void checkInListPredColumnStats(Predicate p) throws StandardException {\n+        if (p.getSourceInList() != null) {\n+            for (Object o : p.getSourceInList().leftOperandList) {\n+                ColumnReference cr = (ColumnReference) o;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276d4124da849e2868da81fa73ef97cb892132fc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5MjE3NQ==", "bodyText": "I see. Added a check before casting.", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r480392175", "createdAt": "2020-08-31T20:52:01Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ScanCostFunction.java", "diffHunk": "@@ -147,6 +150,25 @@ private void addSelectivity(SelectivityHolder holder) {\n         return holders;\n     }\n \n+    private void checkInListPredColumnStats(Predicate p) throws StandardException {\n+        if (p.getSourceInList() != null) {\n+            for (Object o : p.getSourceInList().leftOperandList) {\n+                ColumnReference cr = (ColumnReference) o;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5ODQyMw=="}, "originalCommit": {"oid": "276d4124da849e2868da81fa73ef97cb892132fc"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTIzMTM5OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/GroupByNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODoyMjowMVrOHHYN_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo1NDoxMlrOHKI33w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5ODg3OA==", "bodyText": "We do not need the stats on columns inside the aggregate function. So there is no need to visit the aggregate function nodes.", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r477498878", "createdAt": "2020-08-26T18:22:01Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/GroupByNode.java", "diffHunk": "@@ -1445,4 +1445,24 @@ public String printExplainInformation(String attrDelim) throws StandardException\n         return sb.toString();\n     }\n \n+    public HashSet<String> getNoStatsColumns() throws StandardException {\n+        if (costEstimate == null)\n+            throw new RuntimeException(\"Should not be null\");\n+\n+        HashSet<String> noStatsColumns = new HashSet<>();\n+        CollectNodesVisitor cnv = new CollectNodesVisitor(ColumnReference.class);\n+        for (OrderedColumn oc : groupingList) {\n+            oc.accept(cnv);\n+        }\n+        for (AggregateNode an : aggregateVector) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276d4124da849e2868da81fa73ef97cb892132fc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5MzE4Mw==", "bodyText": "Got it, removed in new commit.", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r480393183", "createdAt": "2020-08-31T20:54:12Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/GroupByNode.java", "diffHunk": "@@ -1445,4 +1445,24 @@ public String printExplainInformation(String attrDelim) throws StandardException\n         return sb.toString();\n     }\n \n+    public HashSet<String> getNoStatsColumns() throws StandardException {\n+        if (costEstimate == null)\n+            throw new RuntimeException(\"Should not be null\");\n+\n+        HashSet<String> noStatsColumns = new HashSet<>();\n+        CollectNodesVisitor cnv = new CollectNodesVisitor(ColumnReference.class);\n+        for (OrderedColumn oc : groupingList) {\n+            oc.accept(cnv);\n+        }\n+        for (AggregateNode an : aggregateVector) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5ODg3OA=="}, "originalCommit": {"oid": "276d4124da849e2868da81fa73ef97cb892132fc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDY3MDY3OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowOTowOVrOHLz53A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDo0MDozNVrOHNQIHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE0Njc4MA==", "bodyText": "Nitpick: there's a single space added to the beginning of these lines", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r482146780", "createdAt": "2020-09-02T15:09:09Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java", "diffHunk": "@@ -31,24 +31,25 @@\n \n package com.splicemachine.db.impl.sql.compile;\n \n-import com.splicemachine.db.iapi.error.StandardException;\n-import com.splicemachine.db.iapi.reference.ClassName;\n-import com.splicemachine.db.iapi.services.compiler.MethodBuilder;\n-import com.splicemachine.db.iapi.services.sanity.SanityManager;\n-import com.splicemachine.db.iapi.sql.compile.C_NodeTypes;\n-import com.splicemachine.db.iapi.sql.compile.Optimizable;\n-import com.splicemachine.db.iapi.sql.dictionary.ConglomerateDescriptor;\n-import com.splicemachine.db.iapi.store.access.ScanController;\n-import com.splicemachine.db.iapi.store.access.StoreCostController;\n-import com.splicemachine.db.iapi.types.DataValueDescriptor;\n-import com.splicemachine.db.iapi.types.Orderable;\n-import com.splicemachine.db.iapi.types.TypeId;\n-import com.splicemachine.db.iapi.util.JBitSet;\n-\n-import java.sql.Types;\n-import java.util.List;\n-\n-import static com.splicemachine.db.impl.sql.compile.SelectivityUtil.*;\n+ import com.splicemachine.db.iapi.error.StandardException;\n+ import com.splicemachine.db.iapi.reference.ClassName;\n+ import com.splicemachine.db.iapi.services.compiler.MethodBuilder;\n+ import com.splicemachine.db.iapi.services.sanity.SanityManager;\n+ import com.splicemachine.db.iapi.sql.compile.C_NodeTypes;\n+ import com.splicemachine.db.iapi.sql.compile.Optimizable;\n+ import com.splicemachine.db.iapi.sql.dictionary.ConglomerateDescriptor;\n+ import com.splicemachine.db.iapi.store.access.ScanController;\n+ import com.splicemachine.db.iapi.store.access.StoreCostController;\n+ import com.splicemachine.db.iapi.types.DataValueDescriptor;\n+ import com.splicemachine.db.iapi.types.Orderable;\n+ import com.splicemachine.db.iapi.types.TypeId;\n+ import com.splicemachine.db.iapi.util.JBitSet;\n+\n+ import java.sql.Types;\n+ import java.util.HashSet;\n+ import java.util.List;\n+\n+ import static com.splicemachine.db.impl.sql.compile.SelectivityUtil.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d198939043539e6cb3e1133239b3d430da331b8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1Nzc1Ng==", "bodyText": "Done.", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r483657756", "createdAt": "2020-09-04T14:40:35Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java", "diffHunk": "@@ -31,24 +31,25 @@\n \n package com.splicemachine.db.impl.sql.compile;\n \n-import com.splicemachine.db.iapi.error.StandardException;\n-import com.splicemachine.db.iapi.reference.ClassName;\n-import com.splicemachine.db.iapi.services.compiler.MethodBuilder;\n-import com.splicemachine.db.iapi.services.sanity.SanityManager;\n-import com.splicemachine.db.iapi.sql.compile.C_NodeTypes;\n-import com.splicemachine.db.iapi.sql.compile.Optimizable;\n-import com.splicemachine.db.iapi.sql.dictionary.ConglomerateDescriptor;\n-import com.splicemachine.db.iapi.store.access.ScanController;\n-import com.splicemachine.db.iapi.store.access.StoreCostController;\n-import com.splicemachine.db.iapi.types.DataValueDescriptor;\n-import com.splicemachine.db.iapi.types.Orderable;\n-import com.splicemachine.db.iapi.types.TypeId;\n-import com.splicemachine.db.iapi.util.JBitSet;\n-\n-import java.sql.Types;\n-import java.util.List;\n-\n-import static com.splicemachine.db.impl.sql.compile.SelectivityUtil.*;\n+ import com.splicemachine.db.iapi.error.StandardException;\n+ import com.splicemachine.db.iapi.reference.ClassName;\n+ import com.splicemachine.db.iapi.services.compiler.MethodBuilder;\n+ import com.splicemachine.db.iapi.services.sanity.SanityManager;\n+ import com.splicemachine.db.iapi.sql.compile.C_NodeTypes;\n+ import com.splicemachine.db.iapi.sql.compile.Optimizable;\n+ import com.splicemachine.db.iapi.sql.dictionary.ConglomerateDescriptor;\n+ import com.splicemachine.db.iapi.store.access.ScanController;\n+ import com.splicemachine.db.iapi.store.access.StoreCostController;\n+ import com.splicemachine.db.iapi.types.DataValueDescriptor;\n+ import com.splicemachine.db.iapi.types.Orderable;\n+ import com.splicemachine.db.iapi.types.TypeId;\n+ import com.splicemachine.db.iapi.util.JBitSet;\n+\n+ import java.sql.Types;\n+ import java.util.HashSet;\n+ import java.util.List;\n+\n+ import static com.splicemachine.db.impl.sql.compile.SelectivityUtil.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE0Njc4MA=="}, "originalCommit": {"oid": "2d198939043539e6cb3e1133239b3d430da331b8"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDY5MjcxOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/GroupByNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToxMjoxNlrOHL0IVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDo0Mjo1M1rOHNQNhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE1MDQ4NQ==", "bodyText": "Should this be an assert instead of a RuntimeException?", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r482150485", "createdAt": "2020-09-02T15:12:16Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/GroupByNode.java", "diffHunk": "@@ -1445,4 +1445,22 @@ public String printExplainInformation(String attrDelim) throws StandardException\n         return sb.toString();\n     }\n \n+    public HashSet<String> getNoStatsColumns() throws StandardException {\n+        if (costEstimate == null)\n+            throw new RuntimeException(\"Should not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d198939043539e6cb3e1133239b3d430da331b8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1OTE0Mg==", "bodyText": "Ah, right, I forget to clean that up. Fixed in the latest commit.", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r483659142", "createdAt": "2020-09-04T14:42:53Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/GroupByNode.java", "diffHunk": "@@ -1445,4 +1445,22 @@ public String printExplainInformation(String attrDelim) throws StandardException\n         return sb.toString();\n     }\n \n+    public HashSet<String> getNoStatsColumns() throws StandardException {\n+        if (costEstimate == null)\n+            throw new RuntimeException(\"Should not be null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE1MDQ4NQ=="}, "originalCommit": {"oid": "2d198939043539e6cb3e1133239b3d430da331b8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODM1ODQ1OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzowNzozNlrOHMY9nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDo0ODo0MFrOHNQcKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1Mzk0OQ==", "bodyText": "since we're using it here 3 times, maybe add function\npublic String getSchemaTableName() throws StandardException\n{\n   return getSchemaName() + \".\" + getFullName();\n}\n\nto ResultColumn.java", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r482753949", "createdAt": "2020-09-03T07:07:36Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java", "diffHunk": "@@ -1513,13 +1517,19 @@ public double joinSelectivity(Optimizable optTable,\n \n         if (rightOperand instanceof ColumnReference && ((ColumnReference) rightOperand).getSource().getTableColumnDescriptor() != null) {\n             ColumnReference right = (ColumnReference) rightOperand;\n+            if (!right.useRealColumnStatistics()) {\n+                noStatsColumns.add(right.getSource().getSchemaName() + \".\" + right.getSource().getFullName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d198939043539e6cb3e1133239b3d430da331b8"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY2Mjg5MQ==", "bodyText": "Done.", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r483662891", "createdAt": "2020-09-04T14:48:40Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java", "diffHunk": "@@ -1513,13 +1517,19 @@ public double joinSelectivity(Optimizable optTable,\n \n         if (rightOperand instanceof ColumnReference && ((ColumnReference) rightOperand).getSource().getTableColumnDescriptor() != null) {\n             ColumnReference right = (ColumnReference) rightOperand;\n+            if (!right.useRealColumnStatistics()) {\n+                noStatsColumns.add(right.getSource().getSchemaName() + \".\" + right.getSource().getFullName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1Mzk0OQ=="}, "originalCommit": {"oid": "2d198939043539e6cb3e1133239b3d430da331b8"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODQwMDY5OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ExplainNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzoyMDoyNFrOHMZW1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDo1MjoxM1rOHNQuYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2MDQwNw==", "bodyText": "this \"early out\" somehow looks dangerous to me. someone might miss that and add something to the end of the function, not seeing most of this function is only executed if showNoStatsObjects.\ni'd rather do\nif( showNoStatsObjects )\n{ \n  // code\n}\n\nor better - extract to a function\nif( showNoStatsObjects )\n  noStatsColumns = getNoStatsColumns();", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r482760407", "createdAt": "2020-09-03T07:20:24Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ExplainNode.java", "diffHunk": "@@ -104,6 +115,49 @@ public void optimizeStatement() throws StandardException {\n             getCompilerContext().setDataSetProcessorType(DataSetProcessorType.FORCED_SPARK);\n         }\n         node.optimizeStatement();\n+\n+        // collect tables and columns that are missing statistics only for splice explain\n+        // showNoStatsObjects == false for all kinds of spark explain\n+        if (!showNoStatsObjects)\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d198939043539e6cb3e1133239b3d430da331b8"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY2NzU1Mg==", "bodyText": "Done.", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r483667552", "createdAt": "2020-09-04T14:52:13Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ExplainNode.java", "diffHunk": "@@ -104,6 +115,49 @@ public void optimizeStatement() throws StandardException {\n             getCompilerContext().setDataSetProcessorType(DataSetProcessorType.FORCED_SPARK);\n         }\n         node.optimizeStatement();\n+\n+        // collect tables and columns that are missing statistics only for splice explain\n+        // showNoStatsObjects == false for all kinds of spark explain\n+        if (!showNoStatsObjects)\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2MDQwNw=="}, "originalCommit": {"oid": "2d198939043539e6cb3e1133239b3d430da331b8"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODQyMDE2OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ScanCostFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzoyNTo1OFrOHMZirw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDo1NDo0M1rOHNQ6eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2MzQzOQ==", "bodyText": "a \"check\" function for me is either throwing an error or returning bool true/false = check succeeded / check failed. these two functions are filling the usedNoStatsColumnIds, so i would say a better name would be\ncheckInListPredColumnStats -> addNoStatsColsFromInListPred(usedNoStatsColumnIds)\ncheckUnaryAndBinaryPredColumnStats -> addNoStatsColsFromUnaryAndBinaryPred(p, usedNoStatsColumnIds)", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r482763439", "createdAt": "2020-09-03T07:25:58Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ScanCostFunction.java", "diffHunk": "@@ -147,6 +150,27 @@ private void addSelectivity(SelectivityHolder holder) {\n         return holders;\n     }\n \n+    private void checkInListPredColumnStats(Predicate p) throws StandardException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d198939043539e6cb3e1133239b3d430da331b8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3MDY0OA==", "bodyText": "Done.", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r483670648", "createdAt": "2020-09-04T14:54:43Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ScanCostFunction.java", "diffHunk": "@@ -147,6 +150,27 @@ private void addSelectivity(SelectivityHolder holder) {\n         return holders;\n     }\n \n+    private void checkInListPredColumnStats(Predicate p) throws StandardException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2MzQzOQ=="}, "originalCommit": {"oid": "2d198939043539e6cb3e1133239b3d430da331b8"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3077, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}