{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NzU0OTA4", "number": 4567, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwOTo1NDoxNVrOE4FU4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwOTo1Nzo1NlrOE4FbgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MjQyOTc5OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceWatcher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwOTo1NDoxNVrOHxy9og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMDoyNDo1N1rOHx0MTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3NzI1MA==", "bodyText": "please make this null friendly:\nString result = rs.getString(index);\nrs.wasNull() ? null : result;", "url": "https://github.com/splicemachine/spliceengine/pull/4567#discussion_r521977250", "createdAt": "2020-11-12T09:54:15Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceWatcher.java", "diffHunk": "@@ -377,4 +378,13 @@ public long getConglomId(String tableName, String schemaName) throws Exception {\n         }\n         return -1l;\n     }\n+\n+    public String executeGetString(String sql, int index) throws SQLException {\n+        try( Statement s = getOrCreateConnection().createStatement();\n+             ResultSet rs = s.executeQuery(sql))\n+        {\n+            Assert.assertTrue(rs.next());\n+            return rs.getString(index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebfb1ebd7d7c2fad7e6117142e0f89a50d4086b6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5NDc5OQ==", "bodyText": "this is already covered by getString, see docu https://docs.oracle.com/javase/7/docs/api/java/sql/ResultSet.html#getString(int)\nhowever you're right if we would add sth like Integer executeGetInteger we would need to check wasNull since getInt only returns the primitive type int.", "url": "https://github.com/splicemachine/spliceengine/pull/4567#discussion_r521994799", "createdAt": "2020-11-12T10:20:57Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceWatcher.java", "diffHunk": "@@ -377,4 +378,13 @@ public long getConglomId(String tableName, String schemaName) throws Exception {\n         }\n         return -1l;\n     }\n+\n+    public String executeGetString(String sql, int index) throws SQLException {\n+        try( Statement s = getOrCreateConnection().createStatement();\n+             ResultSet rs = s.executeQuery(sql))\n+        {\n+            Assert.assertTrue(rs.next());\n+            return rs.getString(index);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3NzI1MA=="}, "originalCommit": {"oid": "ebfb1ebd7d7c2fad7e6117142e0f89a50d4086b6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5NzM5MQ==", "bodyText": "Thanks! I didn't know that it is specified in JDBC interface that reference types must return null if they are null.", "url": "https://github.com/splicemachine/spliceengine/pull/4567#discussion_r521997391", "createdAt": "2020-11-12T10:24:57Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceWatcher.java", "diffHunk": "@@ -377,4 +378,13 @@ public long getConglomId(String tableName, String schemaName) throws Exception {\n         }\n         return -1l;\n     }\n+\n+    public String executeGetString(String sql, int index) throws SQLException {\n+        try( Statement s = getOrCreateConnection().createStatement();\n+             ResultSet rs = s.executeQuery(sql))\n+        {\n+            Assert.assertTrue(rs.next());\n+            return rs.getString(index);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3NzI1MA=="}, "originalCommit": {"oid": "ebfb1ebd7d7c2fad7e6117142e0f89a50d4086b6"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MjQzMTQyOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/utils/SpliceStringFunctionsIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwOTo1NDozNVrOHxy-ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwOTo1NDozNVrOHxy-ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3NzUwMg==", "bodyText": "see above, in order to test null properly.", "url": "https://github.com/splicemachine/spliceengine/pull/4567#discussion_r521977502", "createdAt": "2020-11-12T09:54:35Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/utils/SpliceStringFunctionsIT.java", "diffHunk": "@@ -702,40 +702,37 @@ public void testCastToFixedLengthCharType() throws Exception {\n \n     @Test\n     public void testHEX() throws Exception {\n-        String sqlText = \"values hex('B')\";\n-        ResultSet rs = methodWatcher.executeQuery(sqlText);\n-        rs.next();\n-        Assert.assertEquals(\"Wrong result value\", \"42\", rs.getString(1) );\n-\n-        sqlText = \"values hex('000020')\";\n-        rs = methodWatcher.executeQuery(sqlText);\n-        rs.next();\n-        Assert.assertEquals(\"Wrong result value\", \"303030303230\", rs.getString(1) );\n-\n-        sqlText = \"values hex(concat('a','b'))\";\n-        rs = methodWatcher.executeQuery(sqlText);\n-        rs.next();\n-        Assert.assertEquals(\"Wrong result value\", \"6162\", rs.getString(1) );\n \n-        sqlText = \"values hex(null)\";\n-        rs = methodWatcher.executeQuery(sqlText);\n-        rs.next();\n-        Assert.assertEquals(\"Wrong result value\", null, rs.getString(1) );\n-\n-        sqlText = \"values hex('')\";\n-        rs = methodWatcher.executeQuery(sqlText);\n-        rs.next();\n-        Assert.assertEquals(\"Wrong result value\",\"\", rs.getString(1) );\n+        // note that HEX is using getBytes(\"UTF-8\") to get a fixed representation\n+\n+        String tests[] = {\n+                \"'B'\",              \"42\",\n+                \"'000020'\",         \"303030303230\",\n+                \"'000020'\" ,        \"303030303230\",\n+                \"'\u00df'\",              \"C39F\",\n+                \"'\\u00E4'\",         \"C3A4\",     // \u00e4  https://www.compart.com/de/unicode/U+00E4\n+                \"'\\uD83D\\uDE02'\",   \"F09F9882\", // \ud83d\ude02 https://www.compart.com/de/unicode/U+1F602\n+                \"'Hello, World!'\",    \"48656C6C6F2C20576F726C6421\",\n+\n+                \"''\",               \"\",\n+                \"null\",             null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebfb1ebd7d7c2fad7e6117142e0f89a50d4086b6"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MjQ0NjcyOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/utils/SpliceStringFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwOTo1Nzo1NlrOHxzH2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMDoyMTo1NFrOHx0EiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3OTg2NQ==", "bodyText": "I would rather use a constant such as com.splicemachine.primitives.Bytes.UTF8_CHARSET", "url": "https://github.com/splicemachine/spliceengine/pull/4567#discussion_r521979865", "createdAt": "2020-11-12T09:57:56Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/utils/SpliceStringFunctions.java", "diffHunk": "@@ -134,17 +135,15 @@ else if (i >= 256)\n      * @param s An expression that returns a value with a maximum length of 16 336 bytes.\n      * @return Returns a hexadecimal representation of a value as a character string\n      */\n-    @SuppressFBWarnings(value = \"DM_DEFAULT_ENCODING\", justification = \"DB-9844\")\n-    public static String HEX(String s)\n-    {\n+    public static String HEX(String s) throws UnsupportedEncodingException {\n         if (s == null)\n             return null;\n-        else\n-            return StringUtil.toHexString(s.getBytes(),0,s.length()).toUpperCase();\n-\n+        else {\n+            byte[] b = s.getBytes(\"UTF-8\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebfb1ebd7d7c2fad7e6117142e0f89a50d4086b6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5NTQwMQ==", "bodyText": "thanks, good suggestion!", "url": "https://github.com/splicemachine/spliceengine/pull/4567#discussion_r521995401", "createdAt": "2020-11-12T10:21:54Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/utils/SpliceStringFunctions.java", "diffHunk": "@@ -134,17 +135,15 @@ else if (i >= 256)\n      * @param s An expression that returns a value with a maximum length of 16 336 bytes.\n      * @return Returns a hexadecimal representation of a value as a character string\n      */\n-    @SuppressFBWarnings(value = \"DM_DEFAULT_ENCODING\", justification = \"DB-9844\")\n-    public static String HEX(String s)\n-    {\n+    public static String HEX(String s) throws UnsupportedEncodingException {\n         if (s == null)\n             return null;\n-        else\n-            return StringUtil.toHexString(s.getBytes(),0,s.length()).toUpperCase();\n-\n+        else {\n+            byte[] b = s.getBytes(\"UTF-8\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3OTg2NQ=="}, "originalCommit": {"oid": "ebfb1ebd7d7c2fad7e6117142e0f89a50d4086b6"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2778, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}