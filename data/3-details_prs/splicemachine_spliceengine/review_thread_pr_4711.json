{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MTMzODMw", "number": 4711, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjowMzoyNlrOE9-NEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDoyNDo0MlrOE-A6DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDE3NzQ1OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/subquery/aggregate/AggregateSubqueryPredicate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjowMzoyNlrOH68ANg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjo0ODozNVrOH69Q8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2MjU1MA==", "bodyText": "Can you add here a short explanation or an example of what we want to avoid?", "url": "https://github.com/splicemachine/spliceengine/pull/4711#discussion_r531562550", "createdAt": "2020-11-27T12:03:26Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/subquery/aggregate/AggregateSubqueryPredicate.java", "diffHunk": "@@ -88,6 +118,10 @@ private boolean doWeHandle(SubqueryNode subqueryNode) throws StandardException {\n                 (subquerySelectNode.getGroupByList() == null || subquerySelectNode.getGroupByList().isEmpty()))\n             return false;\n \n+        /* the aggregate must not be value-producing */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe127f96757797b71ab823586287a6a3ed3d1ab8"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4MzIxNw==", "bodyText": "Sure", "url": "https://github.com/splicemachine/spliceengine/pull/4711#discussion_r531583217", "createdAt": "2020-11-27T12:48:35Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/subquery/aggregate/AggregateSubqueryPredicate.java", "diffHunk": "@@ -88,6 +118,10 @@ private boolean doWeHandle(SubqueryNode subqueryNode) throws StandardException {\n                 (subquerySelectNode.getGroupByList() == null || subquerySelectNode.getGroupByList().isEmpty()))\n             return false;\n \n+        /* the aggregate must not be value-producing */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2MjU1MA=="}, "originalCommit": {"oid": "fe127f96757797b71ab823586287a6a3ed3d1ab8"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDE4MTU0OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/subquery/Subquery_Flattening_Aggregate_IT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjowNDo0NlrOH68Cmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoxMDoyOFrOH693kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2MzE2Mw==", "bodyText": "can you add some tests that check the flattening is still happening for the valid cases? Or is that already covered by some other ITs?", "url": "https://github.com/splicemachine/spliceengine/pull/4711#discussion_r531563163", "createdAt": "2020-11-27T12:04:46Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/test/java/com/splicemachine/subquery/Subquery_Flattening_Aggregate_IT.java", "diffHunk": "@@ -660,6 +663,51 @@ public void unsupported_nestedCorrelatedThreeLevels() throws Exception {\n                 \" 5 |50 |500 |\");\n     }\n \n+    @Test\n+    public void unsupported_value_producing_aggregate() throws Exception {\n+        String sql = \"select col1, col2 from t1 where (select count(*) from t2 where col1 = t1.col1) = 0\";\n+        assertUnorderedResult(sql, 1, \"\" +\n+                \"COL1 |COL2 |\\n\" +\n+                \"------------\\n\" +\n+                \" 42  | 43  |\");\n+\n+        sql = \"select col1, col2 from t1 where (select count(*)+10 from t2 where col1 = t1.col1) = 10\";\n+        assertUnorderedResult(sql, 1, \"\" +\n+                \"COL1 |COL2 |\\n\" +\n+                \"------------\\n\" +\n+                \" 42  | 43  |\");\n+\n+        sql = \"select col1, col2 from t1 where (select count(t1.col1)+10 from t2 where col1 = t1.col1) = 10\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe127f96757797b71ab823586287a6a3ed3d1ab8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5MzEwNA==", "bodyText": "I added some tests for non-value-producing aggregates.", "url": "https://github.com/splicemachine/spliceengine/pull/4711#discussion_r531593104", "createdAt": "2020-11-27T13:10:28Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/test/java/com/splicemachine/subquery/Subquery_Flattening_Aggregate_IT.java", "diffHunk": "@@ -660,6 +663,51 @@ public void unsupported_nestedCorrelatedThreeLevels() throws Exception {\n                 \" 5 |50 |500 |\");\n     }\n \n+    @Test\n+    public void unsupported_value_producing_aggregate() throws Exception {\n+        String sql = \"select col1, col2 from t1 where (select count(*) from t2 where col1 = t1.col1) = 0\";\n+        assertUnorderedResult(sql, 1, \"\" +\n+                \"COL1 |COL2 |\\n\" +\n+                \"------------\\n\" +\n+                \" 42  | 43  |\");\n+\n+        sql = \"select col1, col2 from t1 where (select count(*)+10 from t2 where col1 = t1.col1) = 10\";\n+        assertUnorderedResult(sql, 1, \"\" +\n+                \"COL1 |COL2 |\\n\" +\n+                \"------------\\n\" +\n+                \" 42  | 43  |\");\n+\n+        sql = \"select col1, col2 from t1 where (select count(t1.col1)+10 from t2 where col1 = t1.col1) = 10\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2MzE2Mw=="}, "originalCommit": {"oid": "fe127f96757797b71ab823586287a6a3ed3d1ab8"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDYyMDI5OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/subquery/aggregate/AggregateSubqueryPredicate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDoyNDo0MlrOH7AKVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTo1OTozMlrOH7C-Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYzMDY3Ng==", "bodyText": "I would have a loop checking all resultColumns instead of just check the first one.\nYes, we don't support tuple comparison (e.g., (0, 1) = (select sum(a), avg(a) from ...)) yet. But given that we already moved one step further to support (a, b,) in (select x, y from ...), tuple comparison is not far anymore. It doesn't hurt to anticipate that.", "url": "https://github.com/splicemachine/spliceengine/pull/4711#discussion_r531630676", "createdAt": "2020-11-27T14:24:42Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/subquery/aggregate/AggregateSubqueryPredicate.java", "diffHunk": "@@ -88,6 +118,19 @@ private boolean doWeHandle(SubqueryNode subqueryNode) throws StandardException {\n                 (subquerySelectNode.getGroupByList() == null || subquerySelectNode.getGroupByList().isEmpty()))\n             return false;\n \n+        /*\n+        * the aggregate must not be value-producing, flattening such aggregates could lead to wrong results since the resulting inner join\n+        * could miss some rows.\n+        * For example:\n+        *    select a,b from table1 where 0 = (select count(table2.a) from table2 where table2.a = table1.a)\n+        *     if table2 is empty, then count() will return 0 (value-producing), causing the where condition to be satisfied.\n+        *     however, if we flatten, then we end up with something like this:\n+        *    select table1.a,b from table1, (select table2.a, count(table2.a) from table2 group by table2.a having count(table2.a) = 0) X where table1.a = X.a\n+        *     which will return empty result since the RHS of the join is empty, and the join type is inner.\n+        */\n+        if(isValueProducingExpr(resultColumns.elementAt(0))) {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af6b4743c0cbb354342216fc9028442f558eb1aa"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY3Njc1OA==", "bodyText": "Good point, I just followed previous invariant BTW (lines 108-111):\n        ResultColumnList resultColumns = subqueryResultSet.getResultColumns();\n        if (resultColumns.size() != 1) {\n            return false;\n        }", "url": "https://github.com/splicemachine/spliceengine/pull/4711#discussion_r531676758", "createdAt": "2020-11-27T15:59:32Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/subquery/aggregate/AggregateSubqueryPredicate.java", "diffHunk": "@@ -88,6 +118,19 @@ private boolean doWeHandle(SubqueryNode subqueryNode) throws StandardException {\n                 (subquerySelectNode.getGroupByList() == null || subquerySelectNode.getGroupByList().isEmpty()))\n             return false;\n \n+        /*\n+        * the aggregate must not be value-producing, flattening such aggregates could lead to wrong results since the resulting inner join\n+        * could miss some rows.\n+        * For example:\n+        *    select a,b from table1 where 0 = (select count(table2.a) from table2 where table2.a = table1.a)\n+        *     if table2 is empty, then count() will return 0 (value-producing), causing the where condition to be satisfied.\n+        *     however, if we flatten, then we end up with something like this:\n+        *    select table1.a,b from table1, (select table2.a, count(table2.a) from table2 group by table2.a having count(table2.a) = 0) X where table1.a = X.a\n+        *     which will return empty result since the RHS of the join is empty, and the join type is inner.\n+        */\n+        if(isValueProducingExpr(resultColumns.elementAt(0))) {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYzMDY3Ng=="}, "originalCommit": {"oid": "af6b4743c0cbb354342216fc9028442f558eb1aa"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2760, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}