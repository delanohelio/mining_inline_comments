{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0MTgwODAx", "number": 4659, "title": "DB-10719 add unit tests for foreign key dependency checker.", "bodyText": "In this PR we add few hundreds of positive and negative unit tests to the foreign key dependency graph. the sheer amount of unit tests comes from constructing each graph in the test cases using all possible edge permutations. This brute-force test uncovered one bug in graph construction mechanism causing the checker to construct an incorrect graph and ultimately causing it to accept an incorrect foreign key dependency graph. The generation of the permutations is done using Heap's algorithm.", "createdAt": "2020-11-19T19:29:30Z", "url": "https://github.com/splicemachine/spliceengine/pull/4659", "merged": true, "mergeCommit": {"oid": "85e8aa060e0e5ce689ac14c0e064ec8085358dc1"}, "closed": true, "closedAt": "2020-11-24T23:45:03Z", "author": {"login": "hatyo"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdeH3DhAH2gAyNTI0MTgwODAxOjQzNTJmYzhlY2QxNjE5OGFlMGY2MTMyZGI0ZGMwOGU0NmMwOWEyY2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfrPoqgFqTUzNzU5NTk5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4352fc8ecd16198ae0f6132db4dc08e46c09a2ce", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/4352fc8ecd16198ae0f6132db4dc08e46c09a2ce", "committedDate": "2020-11-19T19:24:26Z", "message": "DB-10719 add unit tests for foreign key dependency checker."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fff2e24638b39ab79fbfa6c7491ca5218b9eb339", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/fff2e24638b39ab79fbfa6c7491ca5218b9eb339", "committedDate": "2020-11-19T19:36:29Z", "message": "DB-10719 small refactoring."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0Nzk3NzAy", "url": "https://github.com/splicemachine/spliceengine/pull/4659#pullrequestreview-534797702", "createdAt": "2020-11-19T19:52:49Z", "commit": {"oid": "fff2e24638b39ab79fbfa6c7491ca5218b9eb339"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTo1Mjo0OVrOH2vJtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTo1Mjo0OVrOH2vJtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1NzY4NQ==", "bodyText": "Is this a legitimate issue on the current version? What kind of failures would it cause if so?", "url": "https://github.com/splicemachine/spliceengine/pull/4659#discussion_r527157685", "createdAt": "2020-11-19T19:52:49Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/foreignkey/Graph.java", "diffHunk": "@@ -208,6 +208,7 @@ public void removeEdge(int from, int to) {\n                     edgeNode.next = null; // bye, GC.\n                     return;\n                 }\n+                previous = edgeNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff2e24638b39ab79fbfa6c7491ca5218b9eb339"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NzkwOTk3", "url": "https://github.com/splicemachine/spliceengine/pull/4659#pullrequestreview-536790997", "createdAt": "2020-11-23T19:43:01Z", "commit": {"oid": "fff2e24638b39ab79fbfa6c7491ca5218b9eb339"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTo0MzowMVrOH4cttQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTo0MzowMVrOH4cttQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk1Mjc1Nw==", "bodyText": "Maybe use LANG_DELETE_RULE_VIOLATION instead of 42915.", "url": "https://github.com/splicemachine/spliceengine/pull/4659#discussion_r528952757", "createdAt": "2020-11-23T19:43:01Z", "author": {"login": "msirek"}, "path": "db-engine/src/test/java/com/splicemachine/db/iapi/sql/dictionary/foreignkey/GraphTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.foreignkey;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.runners.Enclosed;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import splice.com.google.common.collect.Lists;\n+\n+import java.util.*;\n+import java.util.stream.IntStream;\n+\n+@RunWith(Enclosed.class)\n+public class GraphTest {\n+\n+    interface PermuteClosure {\n+        void call(List<String> permutation) throws StandardException;\n+    }\n+\n+    static void permute(List<String> input, int k, PermuteClosure action) throws StandardException {\n+        if (k == 1) {\n+            action.call(input);\n+        }\n+        for (int i = 0; i < k; ++i) {\n+            permute(input, k - 1, action);\n+            if (i < k - 1) {\n+                if (k % 2 == 0) {\n+                    Collections.swap(input, i, k - 1);\n+                } else {\n+                    Collections.swap(input, 0, input.size() - 1);\n+                }\n+            }\n+        }\n+    }\n+\n+    static List<String> permute(String graphviz) throws StandardException {\n+        final List<String> edges = Lists.newArrayList(graphviz.split(\"\\n\"));\n+        final String header = edges.remove(0);\n+        final String footer = edges.remove(edges.size() - 1);\n+        final List<String> result = new ArrayList<>(IntStream.rangeClosed(1, edges.size()).reduce(1, (int x, int y) -> x * y));\n+        result.add(graphviz);\n+        permute(edges, edges.size(), permutation -> {\n+            StringBuilder permutedGraph = new StringBuilder(header);\n+            for (String edge : permutation) {\n+                permutedGraph.append(edge);\n+            }\n+            permutedGraph.append(footer);\n+            result.add(permutedGraph.toString());\n+        });\n+        return result;\n+    }\n+\n+    static class NegativeTestCase {\n+        final String graph;\n+        final String pathA;\n+        final String pathB;\n+        final String deleteActionA;\n+        final String deleteActionB;\n+        final String table;\n+\n+        NegativeTestCase(String graph, String table, String pathA, String deleteActionA, String pathB, String deleteActionB) {\n+            this.graph = graph;\n+            this.pathA = pathA;\n+            this.pathB = pathB;\n+            this.deleteActionA = deleteActionA;\n+            this.deleteActionB = deleteActionB;\n+            this.table = table;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return graph;\n+        }\n+    }\n+\n+    @RunWith(Parameterized.class)\n+    public static class NegativeTests {\n+\n+        private static Collection<Object[]> parameters = Lists.newArrayListWithCapacity(100);\n+\n+        private static void addCase(String graph, String table, String pathA, String deleteActionA, String pathB, String deleteActionB) throws StandardException {\n+            parameters.add(new Object[]{new NegativeTestCase(graph, table, pathA, deleteActionA, pathB, deleteActionB)});\n+            List<String> invalidGraph1Permutations = permute(graph);\n+            for (String permutedGraph : invalidGraph1Permutations) {\n+                parameters.add(new Object[]{new NegativeTestCase(permutedGraph, table, pathA, deleteActionA, pathB, deleteActionB)});\n+            }\n+        }\n+\n+        @Parameterized.Parameters(name = \"negative case --- {0}\")\n+        public static Collection<Object[]> data() throws StandardException {\n+            addCase(\"digraph {\\n\" +\n+                            \"A -> B[label=\\\"Cascade\\\"];\\n\" +\n+                            \"B -> C[label=\\\"Cascade\\\"];\\n\" +\n+                            \"C -> A[label=\\\"SetNull\\\"];\\n\" +\n+                            \"C -> A[label=\\\"Restrict\\\"];\\n\" +\n+                            \"}\", \"C\", \"A\", \"SetNull\", \"A\", \"Restrict\");\n+            addCase(\"digraph {\\n\" +\n+                            \"T2 -> T1[label=\\\"Cascade\\\"];\\n\" +\n+                            \"T3 -> T1[label=\\\"Cascade\\\"];\\n\" +\n+                            \"T6 -> T2[label=\\\"Cascade\\\"];\\n\" +\n+                            \"T7 -> T6[label=\\\"Cascade\\\"];\\n\" +\n+                            \"T7 -> T4[label=\\\"SetNull\\\"];\\n\" +\n+                            \"T4 -> T3[label=\\\"Cascade\\\"];\\n\" +\n+                            \"}\", \"T7\", \"T1 T2 T6\", \"Cascade\", \"T1 T3 T4\", \"SetNull\");\n+            addCase(\"digraph {\\n\" +\n+                            \"B -> A[label=\\\"Cascade\\\"];\\n\" +\n+                            \"C -> A[label=\\\"Cascade\\\"];\\n\" +\n+                            \"D -> B[label=\\\"Cascade\\\"];\\n\" +\n+                            \"D -> C[label=\\\"SetNull\\\"];\\n\" +\n+                            \"}\", \"D\", \"A C\", \"SetNull\", \"A B\", \"Cascade\");\n+            addCase(\"digraph {\\n\" +\n+                            \"A -> B[label=\\\"Cascade\\\"];\\n\" +\n+                            \"A -> B[label=\\\"SetNull\\\"];\\n\" +\n+                            \"}\", \"A\", \"B\", \"SetNull\", \"B\", \"Cascade\");\n+            addCase(\"digraph {\\n\" +\n+                            \"B -> A[label=\\\"Cascade\\\"];\\n\" +\n+                            \"C -> A[label=\\\"Cascade\\\"];\\n\" +\n+                            \"D -> B[label=\\\"Cascade\\\"];\\n\" +\n+                            \"D -> C[label=\\\"SetNull\\\"];\\n\" +\n+                            \"}\", \"D\", \"A C\", \"SetNull\", \"A B\", \"Cascade\");\n+            return parameters;\n+        }\n+\n+        public NegativeTests(NegativeTestCase negativeTestCase) {\n+            this.negativeTestCase = negativeTestCase;\n+        }\n+\n+        NegativeTestCase negativeTestCase;\n+\n+        @Test\n+        public void testcase() throws Exception {\n+            Graph graph = new GraphvizParser\n+                    (negativeTestCase.graph).generateGraph(\"something\");\n+\n+            GraphAnnotator annotater = new GraphAnnotator(\"something\", graph);\n+            annotater.annotate();\n+            try {\n+                annotater.analyzeAnnotations();\n+                Assert.fail(\"the annotator should have failed with error containing: adding this foreign key leads to the conflicting delete actions on the table ...\");\n+            } catch (Exception e) {\n+                Assert.assertTrue(e instanceof StandardException);\n+                StandardException sqlException = (StandardException) e;\n+                Assert.assertEquals(\"42915\", sqlException.getSQLState());\n+                Assert.assertTrue(sqlException.getMessage().contains(\"adding this foreign key leads to the conflicting delete actions on the table '\" + negativeTestCase.table + \"'\"));\n+                Assert.assertTrue(sqlException.getMessage().contains(negativeTestCase.pathA + \" (delete action: \" + negativeTestCase.deleteActionA + \")\"));\n+                Assert.assertTrue(sqlException.getMessage().contains(negativeTestCase.pathB + \" (delete action: \" + negativeTestCase.deleteActionB + \")\"));\n+            }\n+        }\n+    }\n+\n+    @RunWith(Parameterized.class)\n+    public static class PositiveTests {\n+\n+        private static Collection<Object[]> parameters = Lists.newArrayListWithCapacity(100);\n+\n+        private static void addCase(String graph) throws StandardException {\n+            parameters.add(new Object[]{graph});\n+            List<String> validGraphPermutations = permute(graph);\n+            for (String permutedGraph : validGraphPermutations) {\n+                parameters.add(new Object[]{permutedGraph});\n+            }\n+        }\n+\n+        @Parameterized.Parameters(name = \"positive case --- {0}\")\n+        public static Collection<Object[]> data() throws StandardException {\n+            addCase(\"digraph {\\n\" +\n+                            \"A -> B[label=\\\"Cascade\\\"];\\n\" +\n+                            \"A -> B[label=\\\"Cascade\\\"];\\n\" +\n+                            \"}\");\n+            addCase(\"digraph {\\n\" +\n+                            \"B -> A[label=\\\"Cascade\\\"];\\n\" +\n+                            \"C -> A[label=\\\"Cascade\\\"];\\n\" +\n+                            \"D -> B[label=\\\"Cascade\\\"];\\n\" +\n+                            \"D -> C[label=\\\"Cascade\\\"];\\n\" +\n+                            \"}\");\n+            addCase(\"digraph {\\n\" +\n+                            \"A -> B[label=\\\"SetNull\\\"];\\n\" +\n+                            \"C -> A[label=\\\"Cascade\\\"];\\n\" +\n+                            \"B -> C[label=\\\"NoAction\\\"];\\n\" +\n+                            \"}\");\n+            addCase(\"digraph {\\n\" +\n+                            \"D -> A[label=\\\"SetNull\\\"];\\n\" +\n+                            \"D -> C[label=\\\"Cascade\\\"];\\n\" +\n+                            \"C -> B[label=\\\"Restrict\\\"];\\n\" +\n+                            \"B -> A[label=\\\"Cascade\\\"];\\n\" +\n+                            \"}\");\n+            return parameters;\n+        }\n+\n+        public PositiveTests(String graph) {\n+            this.graph = graph;\n+        }\n+\n+        String graph;\n+\n+        @Test\n+        public void testcase() throws Exception {\n+            Graph g = new GraphvizParser(graph).generateGraph(\"something\");\n+            GraphAnnotator annotator = new GraphAnnotator(\"something\", g);\n+            annotator.annotate();\n+            annotator.analyzeAnnotations();\n+        }\n+    }\n+\n+    public static class NonParameterizedTests {\n+        @Test\n+        public void invalidGraphIsDetectedProperlyCase5() { // invalid cascade cycle\n+            try {\n+                new GraphvizParser\n+                        (\"digraph {\\n\" +\n+                                 \"A -> B[label=\\\"Cascade\\\"];\\n\" +\n+                                 \"B -> C[label=\\\"Cascade\\\"];\\n\" +\n+                                 \"C -> A[label=\\\"Cascade\\\"];\\n\" +\n+                                 \"}\").generateGraph(\"something\");\n+                Assert.fail(\"expected graph creation to fail with error message: adding the constraint between A and C would cause the following \" +\n+                                    \"illegal delete action cascade cycle A B C\");\n+            } catch (Exception e) {\n+                Assert.assertTrue(e instanceof StandardException);\n+                StandardException sqlException = (StandardException) e;\n+                Assert.assertEquals(\"42915\", sqlException.getSQLState());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff2e24638b39ab79fbfa6c7491ca5218b9eb339"}, "originalPosition": 234}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NzkxOTE0", "url": "https://github.com/splicemachine/spliceengine/pull/4659#pullrequestreview-536791914", "createdAt": "2020-11-23T19:44:26Z", "commit": {"oid": "fff2e24638b39ab79fbfa6c7491ca5218b9eb339"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MzM2NDg1", "url": "https://github.com/splicemachine/spliceengine/pull/4659#pullrequestreview-537336485", "createdAt": "2020-11-24T10:12:43Z", "commit": {"oid": "fff2e24638b39ab79fbfa6c7491ca5218b9eb339"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MzQwNTMw", "url": "https://github.com/splicemachine/spliceengine/pull/4659#pullrequestreview-537340530", "createdAt": "2020-11-24T10:17:04Z", "commit": {"oid": "fff2e24638b39ab79fbfa6c7491ca5218b9eb339"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NTk1OTk3", "url": "https://github.com/splicemachine/spliceengine/pull/4659#pullrequestreview-537595997", "createdAt": "2020-11-24T15:11:53Z", "commit": {"oid": "fff2e24638b39ab79fbfa6c7491ca5218b9eb339"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1014, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}