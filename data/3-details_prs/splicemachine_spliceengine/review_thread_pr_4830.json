{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MDM5NDcx", "number": 4830, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDo0ODozOFrOFFBRnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDo0ODozOFrOFFBRnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODA4MDkyOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/Predicate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDo0ODozOFrOIFUAzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToxMjo1OVrOIGQaQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ0MTY3OQ==", "bodyText": "pushPreds seems to be true when join planning is complete, and false in the middle of join planning.  If we use skipProbePreds as false while planning a hash join, then we might think an IN list predicate is useful, which may affect the cost of the join and lead us to pick it.  But then at the end of planning we would enter this code again, and see that we can't actually push the predicate, so the join is not as cheap as we thought.  Perhaps the code should be modified to detect during join planning whether the predicate can be pushed, something like:\n\nJoinStrategy joinStrategy = pushPreds ? optTable.getTrulyTheBestAccessPath().getJoinStrategy() :\n                                        optTable.getCurrentAccessPath().getJoinStrategy();\nboolean skipProbePreds = joinStrategy.isHashJoin();", "url": "https://github.com/splicemachine/spliceengine/pull/4830#discussion_r542441679", "createdAt": "2020-12-14T14:48:38Z", "author": {"login": "msirek"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/Predicate.java", "diffHunk": "@@ -521,34 +522,64 @@ public final boolean isStoreQualifier(){\n      * @return true if the predicate is a pushable set of OR clauses.\n      * @throws StandardException Standard exception policy.\n      */\n-    public final boolean isPushableOrClause(Optimizable optTable) throws StandardException{\n+    public final boolean isPushableOrClause(Optimizable optTable, ConglomerateDescriptor cd,\n+                                            boolean pushPreds) throws StandardException{\n \n         if(andNode.getLeftOperand() instanceof OrNode){\n-            QueryTreeNode node=andNode.getLeftOperand();\n+            QueryTreeNode node = andNode.getLeftOperand();\n+            QueryTreeNode trueNode;\n+            AndNode tempAnd = null;\n+\n+            IndexRowGenerator irg = cd == null ? null : cd.getIndexDescriptor();\n+            boolean isOnExpression = irg != null && irg.isOnExpression();\n+            if (isOnExpression) {\n+                trueNode = (QueryTreeNode) getNodeFactory().getNode(\n+                        C_NodeTypes.BOOLEAN_CONSTANT_NODE,\n+                        Boolean.TRUE,\n+                        getContextManager());\n+                tempAnd = (AndNode) getNodeFactory().getNode(\n+                        C_NodeTypes.AND_NODE,\n+                        trueNode,  // to be replaced later\n+                        trueNode,\n+                        getContextManager());\n+            }\n \n             while(node instanceof OrNode){\n                 OrNode or_node=(OrNode)node;\n \n                 if(or_node.getLeftOperand() instanceof RelationalOperator){\n                     // if any term of the OR clause is not a qualifier, then\n                     // reject the entire OR clause.\n-                    if(!((RelationalOperator)or_node.getLeftOperand()).isQualifier(optTable,true)){\n-                        // one of the terms is not a pushable Qualifier.\n-                        return (false);\n+                    if (isOnExpression) {\n+                        tempAnd.setLeftOperand(or_node.getLeftOperand());\n+                        tempAnd.postBindFixup();\n+                        Predicate tempPred = (Predicate) getNodeFactory().getNode(\n+                                C_NodeTypes.PREDICATE,\n+                                tempAnd,\n+                                or_node.getLeftOperand().getTablesReferenced(),\n+                                getContextManager());\n+                        boolean skipProbePreds = pushPreds && optTable.getTrulyTheBestAccessPath().getJoinStrategy().isHashJoin();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "195eb64db67c54bed64a62a708d0b9572d790cbc"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQzMTIzNA==", "bodyText": "That makes total sense! I didn't really check this logic before but simply copy-pasted. I improve it as you suggested with a bit modification mainly because when join planning is complete, this method can also get called with pushPreds = false. This happens in some helper functions, e.g. transferPredicates().", "url": "https://github.com/splicemachine/spliceengine/pull/4830#discussion_r543431234", "createdAt": "2020-12-15T15:12:59Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/Predicate.java", "diffHunk": "@@ -521,34 +522,64 @@ public final boolean isStoreQualifier(){\n      * @return true if the predicate is a pushable set of OR clauses.\n      * @throws StandardException Standard exception policy.\n      */\n-    public final boolean isPushableOrClause(Optimizable optTable) throws StandardException{\n+    public final boolean isPushableOrClause(Optimizable optTable, ConglomerateDescriptor cd,\n+                                            boolean pushPreds) throws StandardException{\n \n         if(andNode.getLeftOperand() instanceof OrNode){\n-            QueryTreeNode node=andNode.getLeftOperand();\n+            QueryTreeNode node = andNode.getLeftOperand();\n+            QueryTreeNode trueNode;\n+            AndNode tempAnd = null;\n+\n+            IndexRowGenerator irg = cd == null ? null : cd.getIndexDescriptor();\n+            boolean isOnExpression = irg != null && irg.isOnExpression();\n+            if (isOnExpression) {\n+                trueNode = (QueryTreeNode) getNodeFactory().getNode(\n+                        C_NodeTypes.BOOLEAN_CONSTANT_NODE,\n+                        Boolean.TRUE,\n+                        getContextManager());\n+                tempAnd = (AndNode) getNodeFactory().getNode(\n+                        C_NodeTypes.AND_NODE,\n+                        trueNode,  // to be replaced later\n+                        trueNode,\n+                        getContextManager());\n+            }\n \n             while(node instanceof OrNode){\n                 OrNode or_node=(OrNode)node;\n \n                 if(or_node.getLeftOperand() instanceof RelationalOperator){\n                     // if any term of the OR clause is not a qualifier, then\n                     // reject the entire OR clause.\n-                    if(!((RelationalOperator)or_node.getLeftOperand()).isQualifier(optTable,true)){\n-                        // one of the terms is not a pushable Qualifier.\n-                        return (false);\n+                    if (isOnExpression) {\n+                        tempAnd.setLeftOperand(or_node.getLeftOperand());\n+                        tempAnd.postBindFixup();\n+                        Predicate tempPred = (Predicate) getNodeFactory().getNode(\n+                                C_NodeTypes.PREDICATE,\n+                                tempAnd,\n+                                or_node.getLeftOperand().getTablesReferenced(),\n+                                getContextManager());\n+                        boolean skipProbePreds = pushPreds && optTable.getTrulyTheBestAccessPath().getJoinStrategy().isHashJoin();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ0MTY3OQ=="}, "originalCommit": {"oid": "195eb64db67c54bed64a62a708d0b9572d790cbc"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2726, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}