{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2OTc4MDM3", "number": 4513, "title": "DB-10638 DB-10643 DB-10671 Implement new foreign key checker.", "bodyText": "", "createdAt": "2020-11-06T21:02:26Z", "url": "https://github.com/splicemachine/spliceengine/pull/4513", "merged": true, "mergeCommit": {"oid": "fc3bad4b7b58f870d21c83a898331309e3096e19"}, "closed": true, "closedAt": "2020-11-13T01:07:11Z", "author": {"login": "hatyo"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZ8SJYAH2gAyNTE2OTc4MDM3OmQ0OGE0NTg4NmVlMjg3YjIwNzBiMGRhM2JmNzA1NTlkMDViNTVjZjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdb8hb-gFqTUyOTYyNjI0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d48a45886ee287b2070b0da3bf70559d05b55cf5", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/d48a45886ee287b2070b0da3bf70559d05b55cf5", "committedDate": "2020-11-06T19:39:28Z", "message": "DB-10638 add foreign key graph DSL for testing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30b648f3119f15efed502b8b5c6a4821afd6c6e5", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/30b648f3119f15efed502b8b5c6a4821afd6c6e5", "committedDate": "2020-11-06T19:43:14Z", "message": "DB-10638 implement new foreign key checker."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93507b1735a13c85fad763c48a224f61c6c10119", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/93507b1735a13c85fad763c48a224f61c6c10119", "committedDate": "2020-11-06T19:47:35Z", "message": "DB-10638 allow foreign key checker to handle cycles."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc959e0f01b4fb40ac55f07756d9da4a7708ec92", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/bc959e0f01b4fb40ac55f07756d9da4a7708ec92", "committedDate": "2020-11-06T20:07:39Z", "message": "DB-10638 fixes for create table."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed907f354c4d6584eb43ef9af096b57eb6699fd7", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/ed907f354c4d6584eb43ef9af096b57eb6699fd7", "committedDate": "2020-11-06T20:18:04Z", "message": "DB-10643 build foreign key graph from cached constraints."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58cd5b345f8527b32be119b8e087d9518cf1a3e7", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/58cd5b345f8527b32be119b8e087d9518cf1a3e7", "committedDate": "2020-11-06T20:21:14Z", "message": "DB-10643 fixes for cache usage."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe8b508195ad14f6a274cca6004c1f71cb784963", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/fe8b508195ad14f6a274cca6004c1f71cb784963", "committedDate": "2020-11-06T20:22:10Z", "message": "DB-10671 make foreign key checker configurable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98e44ebd126a7a0467dc0b9bb5f7789edb50ebed", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/98e44ebd126a7a0467dc0b9bb5f7789edb50ebed", "committedDate": "2020-11-06T20:27:05Z", "message": "DB-10671 pass down the configuration down to execution."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47f178b331126d18e6fe03cb01370c9b4764029c", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/47f178b331126d18e6fe03cb01370c9b4764029c", "committedDate": "2020-11-09T08:50:59Z", "message": "DB-10638 DB-10671 fixes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MDM2ODk3", "url": "https://github.com/splicemachine/spliceengine/pull/4513#pullrequestreview-526036897", "createdAt": "2020-11-09T08:52:48Z", "commit": {"oid": "47f178b331126d18e6fe03cb01370c9b4764029c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1Mjo0OVrOHvkckQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1Mjo0OVrOHvkckQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MjI1Nw==", "bodyText": "I commented out this method because it doesn't seem very easy to read the FK checker configuration in this module. Maybe a more important question is: Is com.splicemachine.db.impl.sql.execute.CreateConstraintConstantAction#executeConstantAction reachable? if so, how? if not, I suggest we remove it.\nIt looks almost identical to com.splicemachine.derby.impl.sql.execute.actions.CreateConstraintConstantOperation#executeConstantAction", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r519642257", "createdAt": "2020-11-09T08:52:49Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/execute/CreateConstraintConstantAction.java", "diffHunk": "@@ -302,7 +302,7 @@ public void\texecuteConstantAction( Activation activation )\n \t\t\tcase DataDictionary.FOREIGNKEY_CONSTRAINT:\n \t\t\t\tReferencedKeyConstraintDescriptor referencedConstraint = DDUtils.locateReferencedConstraint\n \t\t\t\t\t( dd, td, constraintName, columnNames, otherConstraintInfo );\n-\t\t\t\tDDUtils.validateReferentialActions(dd, td, constraintName, otherConstraintInfo,columnNames);\n+\t\t\t\t// DDUtils.validateReferentialActions(dd, td, constraintName, otherConstraintInfo,columnNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f178b331126d18e6fe03cb01370c9b4764029c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/048e9b61fdc9dc17cd774780dec256e12f69ec13", "committedDate": "2020-11-09T10:55:34Z", "message": "Merge remote-tracking branch 'origin/master' into DB-10638"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MDM0NDA1", "url": "https://github.com/splicemachine/spliceengine/pull/4513#pullrequestreview-527034405", "createdAt": "2020-11-10T09:56:40Z", "commit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOTo1Njo0MVrOHwUrzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoyMToxNlrOHwVsyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzMjU4OA==", "bodyText": "i would suggest to not  use abbrevations on a top level. i'm fine with variable names like int fkIndex etc.,\nbut i think classes and namespace names should be easily readable in an instant.\n\nit makes my head go hm what was that again when i see it used elsewhere\ne.g. DFS could also be a distributed filesystem.\nit's not even commented in the file what DFS or FK means\ngrep-ing for fk will also list stuff like kaFKa, grep-ing for dfs also lists hDFS\n\nfk = foreignkeys\nDfs = DepthFirstSearch", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520432588", "createdAt": "2020-11-10T09:56:41Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/Dfs.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzMjg4MA==", "bodyText": "a small comment explaining why this class exists and what it is doing would be nice", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520432880", "createdAt": "2020-11-10T09:57:04Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/Dfs.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.utils.Pair;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Stack;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzNTIyMQ==", "bodyText": "add a comment what run is doing", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520435221", "createdAt": "2020-11-10T10:00:22Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/Dfs.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.utils.Pair;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class Dfs {\n+    private final Graph graph;\n+    private final String newConstraintName;\n+    int[] dfsParent;\n+    boolean[] processed;\n+    boolean[] discovered;\n+    private boolean trackParents;\n+\n+    enum EdgeClassification {TREE, BACK, FORWARD, CROSS};\n+    EdgeClassification[] edgeTypes;\n+    Stack<Integer> stack;\n+    int[] entryTime;\n+    int[] exitTime;\n+    int time;\n+    ArrayList[] parents;\n+    boolean finished;\n+\n+\n+    public Dfs(Graph g, String newConstraintName) {\n+        this.graph = g;\n+        dfsParent = new int[g.getVertexCount()];\n+        processed = new boolean[g.getVertexCount()];\n+        discovered = new boolean[g.getVertexCount()];\n+        edgeTypes = new EdgeClassification[g.getVertexCount()];\n+        entryTime = new int[g.getVertexCount()];\n+        exitTime = new int[g.getVertexCount()];\n+        init();\n+        stack = new Stack<Integer>();\n+        parents = new ArrayList[g.getVertexCount()];\n+        this.newConstraintName = newConstraintName;\n+        finished = false;\n+    }\n+\n+    void init() {\n+        Arrays.fill(dfsParent, -1);\n+        Arrays.fill(discovered, false);\n+        Arrays.fill(processed, false);\n+        Arrays.fill(edgeTypes, EdgeClassification.TREE);\n+        Arrays.fill(entryTime, 0);\n+        Arrays.fill(exitTime, 0);\n+    }\n+\n+    EdgeClassification edgeClassification(int x, int y) {\n+        if(dfsParent[y] == x) return EdgeClassification.TREE;\n+        if(discovered[y] && !processed[y]) return EdgeClassification.BACK;\n+        if(processed[y] && (entryTime[y] > entryTime[x])) return EdgeClassification.FORWARD;\n+        if(processed[y] && (entryTime[y] < entryTime[x])) return EdgeClassification.CROSS;\n+        throw new IllegalArgumentException(\"unknown edge class between \" + x + \" and \" + y);\n+    }\n+\n+    public void run(int v) throws StandardException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzNjQ1Mw==", "bodyText": "please add unit tests for this class", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520436453", "createdAt": "2020-11-10T10:02:12Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/Dfs.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.utils.Pair;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Stack;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzMjg4MA=="}, "originalCommit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzNzAxMA==", "bodyText": "please add unit tests for Graph", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520437010", "createdAt": "2020-11-10T10:03:02Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/Graph.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+\n+import java.util.*;\n+\n+public class Graph {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzODQ2NQ==", "bodyText": "C, R, SN, NA?\nC -> CASCADE;\nNA -> NOACTION;\nR -> RESTRICT;\nSN -> SETNULL;\nare those other values even used? Maybe a\nbool cascade would be sufficient and somewhat more \"general\"", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520438465", "createdAt": "2020-11-10T10:05:07Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/EdgeNode.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+public class EdgeNode {\n+    public EdgeNode(int y, Type type) {\n+        this.y = y;\n+        this.type = type;\n+        this.next = null;\n+    }\n+\n+    enum Type {C, R, SN, NA};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0NDQ2OA==", "bodyText": "edgeNode.next = null; // bye, GC.\nthis line is superflous. the thing you want to clean up is edgeNode, not edgeNode.next. edgeNode.next will survive in previous.next. at this point, no one should be pointing to edgeNode anymore, so no need for this line.", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520444468", "createdAt": "2020-11-10T10:14:07Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/Graph.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+\n+import java.util.*;\n+\n+public class Graph {\n+    List<EdgeNode> edgeNodes;\n+    Map<String, Integer> vertexIndex;\n+    int[][] parents;\n+\n+    Map<Integer, Integer> surrogates;\n+    int surrogateCounter;\n+    String newConstraintName;\n+\n+    public Graph(Set<String> vertices, String newConstraintName) {\n+        edgeNodes = new ArrayList<>(vertices.size());\n+        vertexIndex = new HashMap<>(vertices.size());\n+        int i = 0;\n+        for (String vertex : vertices) {\n+            edgeNodes.add(null);\n+            vertexIndex.put(vertex, i++);\n+        }\n+        parents = new int[vertices.size()][];\n+        surrogateCounter = 0;\n+        this.newConstraintName = newConstraintName;\n+        this.surrogates = new HashMap<>();\n+    }\n+\n+    void addEdge(String from, String to, EdgeNode.Type type) throws StandardException {\n+        addEdgeInternal(vertexIndex.get(from), vertexIndex.get(to), type);\n+    }\n+\n+    private void addSurrogate(int fromIdx, int toIdx, EdgeNode.Type type) {\n+        int surrogateIdx = vertexIndex.size();\n+        String name = getName(toIdx) + \"__SURROGATE__\" + surrogateCounter++;\n+        surrogates.put(surrogateIdx, toIdx);\n+        vertexIndex.put(name, surrogateIdx);\n+        EdgeNode edgeNode = new EdgeNode(surrogateIdx, type);\n+        edgeNode.next = edgeNodes.get(fromIdx);\n+        edgeNodes.set(fromIdx, edgeNode);\n+        edgeNodes.add(null); // for the surrogate\n+    }\n+\n+    void addEdgeInternal(int fromIdx, int toIdx, EdgeNode.Type type) throws StandardException {\n+        Dfs dfs = new Dfs(this, newConstraintName);\n+        dfs.run(toIdx);\n+        List<Integer> p = dfs.getPath(toIdx, fromIdx);\n+        if(p.size() >= 2 && p.get(0) == toIdx && p.get(p.size() - 1) == fromIdx) {\n+            breakCycle(p, type, fromIdx, toIdx);\n+        } else {\n+            EdgeNode edgeNode = new EdgeNode(toIdx, type);\n+            edgeNode.next = edgeNodes.get(fromIdx);\n+            edgeNodes.set(fromIdx, edgeNode);\n+        }\n+    }\n+\n+    private void breakCycle(List<Integer> p, EdgeNode.Type type, int fromIdx, int toIdx) throws StandardException {\n+        if(type != EdgeNode.Type.C) {\n+            addSurrogate(fromIdx, toIdx, type);\n+            return;\n+        } else {\n+            for(int i = 1; i < p.size(); i++) { // find first none-C in the cycle and break it up\n+                EdgeNode.Type edgeType = getEdgeType(p.get(i-1), p.get(i));\n+                if(edgeType != EdgeNode.Type.C) {\n+                    addSurrogate(p.get(i-1), p.get(i), edgeType);\n+                    // remove this edge\n+                    removeEdge(p.get(i-1), p.get(i));\n+                    // add the new edge again, but check again for cycles!\n+                    addEdgeInternal(fromIdx, toIdx, type);\n+                    return;\n+                }\n+            }\n+        }\n+        // cycle is unbreakable, bail out\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"adding the constraint between \").append(\n+                getName(p.get(0))).append(\" and \").append(getName(p.get(p.size()-1))).append(\" would cause the following illegal delete action cascade cycle\");\n+        for(int v : p) {\n+            sb.append(\" \").append(getName(v));\n+        }\n+        throw StandardException.newException(SQLState.LANG_DELETE_RULE_VIOLATION,\n+                                             newConstraintName,\n+                                             sb.toString());\n+    }\n+\n+    public String getName(int index) {\n+        for (Map.Entry<String, Integer> entry : vertexIndex.entrySet()) {\n+            if (entry.getValue() == index) {\n+                return entry.getKey();\n+            }\n+        }\n+        throw new IllegalArgumentException(\"could not find name for item at the index: \" + index);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"digraph {\").append(\"\\n\");\n+        int i = 0;\n+        for (EdgeNode edge : edgeNodes) {\n+            EdgeNode next = edge;\n+            while (next != null) {\n+                sb.append(\"\\t\").append(getName(i)).append(\" -> \").append(getName(next.y)).append(\"[label=\\\"\").append(next.type.toString()).append(\"\\\"];\").append(\"\\n\");\n+                next = next.next;\n+            }\n+            i++;\n+        }\n+        sb.append(\"}\").append(\"\\n\");\n+        return sb.toString();\n+    }\n+\n+    public EdgeNode getEdge(int v) {\n+        return edgeNodes.get(v);\n+    }\n+\n+    public int getVertexCount() {\n+        return vertexIndex.size();\n+\n+    }\n+\n+    public EdgeNode.Type getEdgeType(int from, int to) {\n+        EdgeNode edgeNode = getEdge(from);\n+        while(true) {\n+            if(edgeNode == null) {\n+                throw new IllegalArgumentException(\"no edge between \" + getName(from) + \" and \" + getName(to));\n+            }\n+            if(edgeNode.y == to) {\n+                return edgeNode.type;\n+            }\n+            edgeNode = edgeNode.next;\n+        }\n+    }\n+\n+    public void removeEdge(int from, int to) {\n+        EdgeNode edgeNode = getEdge(from);\n+        if(edgeNode == null) {\n+            throw new IllegalArgumentException(\"no edge between \" + getName(from) + \" and \" + getName(to));\n+        }\n+        if(edgeNode.y == to) {\n+            edgeNodes.set(from, null);\n+        } else {\n+            EdgeNode previous = edgeNode;\n+            edgeNode = edgeNode.next;\n+            while(true) {\n+                if(edgeNode == null) {\n+                    throw new IllegalArgumentException(\"no edge between \" + getName(from) + \" and \" + getName(to));\n+                }\n+                if(edgeNode.y == to) {\n+                    previous.next = edgeNode.next;\n+                    edgeNode.next = null; // bye, GC.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0NTM3Mw==", "bodyText": "\u26a0\ufe0f \u26a0\ufe0f \u26a0\ufe0f if it's the first edge, but there are other edges, this code would delete all edges, but i guess it should only delete the first one ->\nedgeNodes.set(from, edgeNodes.next);", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520445373", "createdAt": "2020-11-10T10:15:24Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/Graph.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+\n+import java.util.*;\n+\n+public class Graph {\n+    List<EdgeNode> edgeNodes;\n+    Map<String, Integer> vertexIndex;\n+    int[][] parents;\n+\n+    Map<Integer, Integer> surrogates;\n+    int surrogateCounter;\n+    String newConstraintName;\n+\n+    public Graph(Set<String> vertices, String newConstraintName) {\n+        edgeNodes = new ArrayList<>(vertices.size());\n+        vertexIndex = new HashMap<>(vertices.size());\n+        int i = 0;\n+        for (String vertex : vertices) {\n+            edgeNodes.add(null);\n+            vertexIndex.put(vertex, i++);\n+        }\n+        parents = new int[vertices.size()][];\n+        surrogateCounter = 0;\n+        this.newConstraintName = newConstraintName;\n+        this.surrogates = new HashMap<>();\n+    }\n+\n+    void addEdge(String from, String to, EdgeNode.Type type) throws StandardException {\n+        addEdgeInternal(vertexIndex.get(from), vertexIndex.get(to), type);\n+    }\n+\n+    private void addSurrogate(int fromIdx, int toIdx, EdgeNode.Type type) {\n+        int surrogateIdx = vertexIndex.size();\n+        String name = getName(toIdx) + \"__SURROGATE__\" + surrogateCounter++;\n+        surrogates.put(surrogateIdx, toIdx);\n+        vertexIndex.put(name, surrogateIdx);\n+        EdgeNode edgeNode = new EdgeNode(surrogateIdx, type);\n+        edgeNode.next = edgeNodes.get(fromIdx);\n+        edgeNodes.set(fromIdx, edgeNode);\n+        edgeNodes.add(null); // for the surrogate\n+    }\n+\n+    void addEdgeInternal(int fromIdx, int toIdx, EdgeNode.Type type) throws StandardException {\n+        Dfs dfs = new Dfs(this, newConstraintName);\n+        dfs.run(toIdx);\n+        List<Integer> p = dfs.getPath(toIdx, fromIdx);\n+        if(p.size() >= 2 && p.get(0) == toIdx && p.get(p.size() - 1) == fromIdx) {\n+            breakCycle(p, type, fromIdx, toIdx);\n+        } else {\n+            EdgeNode edgeNode = new EdgeNode(toIdx, type);\n+            edgeNode.next = edgeNodes.get(fromIdx);\n+            edgeNodes.set(fromIdx, edgeNode);\n+        }\n+    }\n+\n+    private void breakCycle(List<Integer> p, EdgeNode.Type type, int fromIdx, int toIdx) throws StandardException {\n+        if(type != EdgeNode.Type.C) {\n+            addSurrogate(fromIdx, toIdx, type);\n+            return;\n+        } else {\n+            for(int i = 1; i < p.size(); i++) { // find first none-C in the cycle and break it up\n+                EdgeNode.Type edgeType = getEdgeType(p.get(i-1), p.get(i));\n+                if(edgeType != EdgeNode.Type.C) {\n+                    addSurrogate(p.get(i-1), p.get(i), edgeType);\n+                    // remove this edge\n+                    removeEdge(p.get(i-1), p.get(i));\n+                    // add the new edge again, but check again for cycles!\n+                    addEdgeInternal(fromIdx, toIdx, type);\n+                    return;\n+                }\n+            }\n+        }\n+        // cycle is unbreakable, bail out\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"adding the constraint between \").append(\n+                getName(p.get(0))).append(\" and \").append(getName(p.get(p.size()-1))).append(\" would cause the following illegal delete action cascade cycle\");\n+        for(int v : p) {\n+            sb.append(\" \").append(getName(v));\n+        }\n+        throw StandardException.newException(SQLState.LANG_DELETE_RULE_VIOLATION,\n+                                             newConstraintName,\n+                                             sb.toString());\n+    }\n+\n+    public String getName(int index) {\n+        for (Map.Entry<String, Integer> entry : vertexIndex.entrySet()) {\n+            if (entry.getValue() == index) {\n+                return entry.getKey();\n+            }\n+        }\n+        throw new IllegalArgumentException(\"could not find name for item at the index: \" + index);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"digraph {\").append(\"\\n\");\n+        int i = 0;\n+        for (EdgeNode edge : edgeNodes) {\n+            EdgeNode next = edge;\n+            while (next != null) {\n+                sb.append(\"\\t\").append(getName(i)).append(\" -> \").append(getName(next.y)).append(\"[label=\\\"\").append(next.type.toString()).append(\"\\\"];\").append(\"\\n\");\n+                next = next.next;\n+            }\n+            i++;\n+        }\n+        sb.append(\"}\").append(\"\\n\");\n+        return sb.toString();\n+    }\n+\n+    public EdgeNode getEdge(int v) {\n+        return edgeNodes.get(v);\n+    }\n+\n+    public int getVertexCount() {\n+        return vertexIndex.size();\n+\n+    }\n+\n+    public EdgeNode.Type getEdgeType(int from, int to) {\n+        EdgeNode edgeNode = getEdge(from);\n+        while(true) {\n+            if(edgeNode == null) {\n+                throw new IllegalArgumentException(\"no edge between \" + getName(from) + \" and \" + getName(to));\n+            }\n+            if(edgeNode.y == to) {\n+                return edgeNode.type;\n+            }\n+            edgeNode = edgeNode.next;\n+        }\n+    }\n+\n+    public void removeEdge(int from, int to) {\n+        EdgeNode edgeNode = getEdge(from);\n+        if(edgeNode == null) {\n+            throw new IllegalArgumentException(\"no edge between \" + getName(from) + \" and \" + getName(to));\n+        }\n+        if(edgeNode.y == to) {\n+            edgeNodes.set(from, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0Njc1NA==", "bodyText": "// adds am edge and checks for cycles", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520446754", "createdAt": "2020-11-10T10:17:30Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/Graph.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+\n+import java.util.*;\n+\n+public class Graph {\n+    List<EdgeNode> edgeNodes;\n+    Map<String, Integer> vertexIndex;\n+    int[][] parents;\n+\n+    Map<Integer, Integer> surrogates;\n+    int surrogateCounter;\n+    String newConstraintName;\n+\n+    public Graph(Set<String> vertices, String newConstraintName) {\n+        edgeNodes = new ArrayList<>(vertices.size());\n+        vertexIndex = new HashMap<>(vertices.size());\n+        int i = 0;\n+        for (String vertex : vertices) {\n+            edgeNodes.add(null);\n+            vertexIndex.put(vertex, i++);\n+        }\n+        parents = new int[vertices.size()][];\n+        surrogateCounter = 0;\n+        this.newConstraintName = newConstraintName;\n+        this.surrogates = new HashMap<>();\n+    }\n+\n+    void addEdge(String from, String to, EdgeNode.Type type) throws StandardException {\n+        addEdgeInternal(vertexIndex.get(from), vertexIndex.get(to), type);\n+    }\n+\n+    private void addSurrogate(int fromIdx, int toIdx, EdgeNode.Type type) {\n+        int surrogateIdx = vertexIndex.size();\n+        String name = getName(toIdx) + \"__SURROGATE__\" + surrogateCounter++;\n+        surrogates.put(surrogateIdx, toIdx);\n+        vertexIndex.put(name, surrogateIdx);\n+        EdgeNode edgeNode = new EdgeNode(surrogateIdx, type);\n+        edgeNode.next = edgeNodes.get(fromIdx);\n+        edgeNodes.set(fromIdx, edgeNode);\n+        edgeNodes.add(null); // for the surrogate\n+    }\n+\n+    void addEdgeInternal(int fromIdx, int toIdx, EdgeNode.Type type) throws StandardException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0Nzc4Nw==", "bodyText": "i think normal + should be performant enough for this part of the code\nsb.append(\"adding the constraint between \" + getName(p.get(0)) + \" and \" + getName(p.get(p.size()-1)) + \" would cause the following illegal delete action cascade cycle\");", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520447787", "createdAt": "2020-11-10T10:19:06Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/Graph.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+\n+import java.util.*;\n+\n+public class Graph {\n+    List<EdgeNode> edgeNodes;\n+    Map<String, Integer> vertexIndex;\n+    int[][] parents;\n+\n+    Map<Integer, Integer> surrogates;\n+    int surrogateCounter;\n+    String newConstraintName;\n+\n+    public Graph(Set<String> vertices, String newConstraintName) {\n+        edgeNodes = new ArrayList<>(vertices.size());\n+        vertexIndex = new HashMap<>(vertices.size());\n+        int i = 0;\n+        for (String vertex : vertices) {\n+            edgeNodes.add(null);\n+            vertexIndex.put(vertex, i++);\n+        }\n+        parents = new int[vertices.size()][];\n+        surrogateCounter = 0;\n+        this.newConstraintName = newConstraintName;\n+        this.surrogates = new HashMap<>();\n+    }\n+\n+    void addEdge(String from, String to, EdgeNode.Type type) throws StandardException {\n+        addEdgeInternal(vertexIndex.get(from), vertexIndex.get(to), type);\n+    }\n+\n+    private void addSurrogate(int fromIdx, int toIdx, EdgeNode.Type type) {\n+        int surrogateIdx = vertexIndex.size();\n+        String name = getName(toIdx) + \"__SURROGATE__\" + surrogateCounter++;\n+        surrogates.put(surrogateIdx, toIdx);\n+        vertexIndex.put(name, surrogateIdx);\n+        EdgeNode edgeNode = new EdgeNode(surrogateIdx, type);\n+        edgeNode.next = edgeNodes.get(fromIdx);\n+        edgeNodes.set(fromIdx, edgeNode);\n+        edgeNodes.add(null); // for the surrogate\n+    }\n+\n+    void addEdgeInternal(int fromIdx, int toIdx, EdgeNode.Type type) throws StandardException {\n+        Dfs dfs = new Dfs(this, newConstraintName);\n+        dfs.run(toIdx);\n+        List<Integer> p = dfs.getPath(toIdx, fromIdx);\n+        if(p.size() >= 2 && p.get(0) == toIdx && p.get(p.size() - 1) == fromIdx) {\n+            breakCycle(p, type, fromIdx, toIdx);\n+        } else {\n+            EdgeNode edgeNode = new EdgeNode(toIdx, type);\n+            edgeNode.next = edgeNodes.get(fromIdx);\n+            edgeNodes.set(fromIdx, edgeNode);\n+        }\n+    }\n+\n+    private void breakCycle(List<Integer> p, EdgeNode.Type type, int fromIdx, int toIdx) throws StandardException {\n+        if(type != EdgeNode.Type.C) {\n+            addSurrogate(fromIdx, toIdx, type);\n+            return;\n+        } else {\n+            for(int i = 1; i < p.size(); i++) { // find first none-C in the cycle and break it up\n+                EdgeNode.Type edgeType = getEdgeType(p.get(i-1), p.get(i));\n+                if(edgeType != EdgeNode.Type.C) {\n+                    addSurrogate(p.get(i-1), p.get(i), edgeType);\n+                    // remove this edge\n+                    removeEdge(p.get(i-1), p.get(i));\n+                    // add the new edge again, but check again for cycles!\n+                    addEdgeInternal(fromIdx, toIdx, type);\n+                    return;\n+                }\n+            }\n+        }\n+        // cycle is unbreakable, bail out\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"adding the constraint between \").append(\n+                getName(p.get(0))).append(\" and \").append(getName(p.get(p.size()-1))).append(\" would cause the following illegal delete action cascade cycle\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0OTIyNw==", "bodyText": "this also looks easily unit-testable", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520449227", "createdAt": "2020-11-10T10:21:16Z", "author": {"login": "martinrupp"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/GraphAnnotator.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+import com.splicemachine.utils.Pair;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class GraphAnnotator {\n+    private final Graph graph;\n+    private final String newConstraintName;\n+\n+    class Path {\n+        public Path(List<Integer> vertices, EdgeNode.Type action) {\n+            this.vertices = vertices;\n+            this.action = action;\n+        }\n+\n+        public String toString(Graph g) {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"PATH action: \").append(action).append(\" \");\n+            for(int v : vertices) {\n+                sb.append(g.getName(v)).append(\" \");\n+            }\n+            return sb.toString();\n+        }\n+\n+        List<Integer> vertices;\n+        EdgeNode.Type action;\n+\n+        private List<Integer> removeSurrogates(List<Integer> in) {\n+            return in.stream().map((vertex) -> {\n+                if (graph.isSurrogate(vertex)) {\n+                    return graph.getOriginal(vertex);\n+                } else {\n+                    return vertex;\n+                }\n+            }).collect(Collectors.toList());\n+        }\n+\n+        public boolean intersects(Path needle) {\n+            List<Integer> originalPathVertices = removeSurrogates(vertices);\n+            List<Integer> originalNeedleVertices = removeSurrogates(needle.vertices);\n+\n+\n+            return originalPathVertices.stream()\n+                    .distinct()\n+                    .filter(originalNeedleVertices::contains)\n+                    .collect(Collectors.toSet()).size() > 0;\n+        }\n+    }\n+\n+    static class Annotation {\n+        List<Path> paths;\n+        public Annotation() {\n+            paths = new ArrayList<>();\n+        }\n+    }\n+\n+    Annotation[] annotations;\n+\n+    public GraphAnnotator(String newConstraintName, Graph graph) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MDMyNzU0", "url": "https://github.com/splicemachine/spliceengine/pull/4513#pullrequestreview-527032754", "createdAt": "2020-11-10T09:54:53Z", "commit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOTo1NDo1M1rOHwUmng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoxNjoxN1rOHwVgAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzMTI2Mg==", "bodyText": "Would it be possible to only remove the dropped constraint instead of all descriptors?", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520431262", "createdAt": "2020-11-10T09:54:53Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/DropConstraintConstantOperation.java", "diffHunk": "@@ -239,6 +239,8 @@ public void executeConstantAction(Activation activation ) throws StandardExcepti\n \t\t\tdm.invalidateFor(conDesc, DependencyManager.DROP_CONSTRAINT, lcc);\n \t\t\tdm.clearDependencies(lcc, conDesc);\n \t\t}\n+\n+\t\tdd.getDataDictionaryCache().clearConstraintDescriptorListCache(); // not sure if this is the correct place to do this.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0NDk3NQ==", "bodyText": "A Deque is the preferred Java Stack type (Stack is based on Vector, which is synchronized by default and the API is not as consistent as Deque)", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520444975", "createdAt": "2020-11-10T10:14:52Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/Dfs.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.utils.Pair;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class Dfs {\n+    private final Graph graph;\n+    private final String newConstraintName;\n+    int[] dfsParent;\n+    boolean[] processed;\n+    boolean[] discovered;\n+    private boolean trackParents;\n+\n+    enum EdgeClassification {TREE, BACK, FORWARD, CROSS};\n+    EdgeClassification[] edgeTypes;\n+    Stack<Integer> stack;\n+    int[] entryTime;\n+    int[] exitTime;\n+    int time;\n+    ArrayList[] parents;\n+    boolean finished;\n+\n+\n+    public Dfs(Graph g, String newConstraintName) {\n+        this.graph = g;\n+        dfsParent = new int[g.getVertexCount()];\n+        processed = new boolean[g.getVertexCount()];\n+        discovered = new boolean[g.getVertexCount()];\n+        edgeTypes = new EdgeClassification[g.getVertexCount()];\n+        entryTime = new int[g.getVertexCount()];\n+        exitTime = new int[g.getVertexCount()];\n+        init();\n+        stack = new Stack<Integer>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0NTk1Mg==", "bodyText": "is Step a better name than Time?", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520445952", "createdAt": "2020-11-10T10:16:17Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/Dfs.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.utils.Pair;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class Dfs {\n+    private final Graph graph;\n+    private final String newConstraintName;\n+    int[] dfsParent;\n+    boolean[] processed;\n+    boolean[] discovered;\n+    private boolean trackParents;\n+\n+    enum EdgeClassification {TREE, BACK, FORWARD, CROSS};\n+    EdgeClassification[] edgeTypes;\n+    Stack<Integer> stack;\n+    int[] entryTime;\n+    int[] exitTime;\n+    int time;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MDU1NzAx", "url": "https://github.com/splicemachine/spliceengine/pull/4513#pullrequestreview-527055701", "createdAt": "2020-11-10T10:21:45Z", "commit": {"oid": "30b648f3119f15efed502b8b5c6a4821afd6c6e5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoyMTo0NVrOHwVt_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMToxMDoyMFrOHwXnxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0OTUzMg==", "bodyText": "Can you document this class?", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520449532", "createdAt": "2020-11-10T10:21:45Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/Dfs.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+import javafx.util.Pair;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class Dfs {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b648f3119f15efed502b8b5c6a4821afd6c6e5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1NDQ1MA==", "bodyText": "And add unit tests for it?", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520454450", "createdAt": "2020-11-10T10:29:03Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/Dfs.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+import javafx.util.Pair;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class Dfs {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0OTUzMg=="}, "originalCommit": {"oid": "30b648f3119f15efed502b8b5c6a4821afd6c6e5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ2MjQ1Mw==", "bodyText": "Please use explicit names", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520462453", "createdAt": "2020-11-10T10:41:45Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/EdgeNode.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+public class EdgeNode {\n+    public EdgeNode(int y, Type type) {\n+        this.y = y;\n+        this.type = type;\n+        this.next = null;\n+    }\n+\n+    enum Type {C, R, SN, NA};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b648f3119f15efed502b8b5c6a4821afd6c6e5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ2MjY2Mg==", "bodyText": "What is y?", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520462662", "createdAt": "2020-11-10T10:42:04Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/EdgeNode.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+public class EdgeNode {\n+    public EdgeNode(int y, Type type) {\n+        this.y = y;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b648f3119f15efed502b8b5c6a4821afd6c6e5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ2NTg1NQ==", "bodyText": "Did you mean to replace 10000 with the result of the commented function?", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520465855", "createdAt": "2020-11-10T10:47:06Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryCache.java", "diffHunk": "@@ -144,6 +145,8 @@ public DataDictionaryCache(Properties startParams,DataDictionary dd) throws Stan\n                 Property.LANG_PROPERTY_CACHE_SIZE_DEFAULT);\n         int catalogVersionCacheSize = getCacheSize(startParams, Property.LANG_PROPERTY_CACHE_SIZE,\n                 Property.LANG_PROPERTY_CACHE_SIZE_DEFAULT);\n+        int constraintDescriptorListCacheSize = 10000;//getCacheSize(startParams, Property.LANG_PROPERTY_CACHE_SIZE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93507b1735a13c85fad763c48a224f61c6c10119"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ2NjI4MA==", "bodyText": "Should that code be restored?", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520466280", "createdAt": "2020-11-10T10:47:48Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryCache.java", "diffHunk": "@@ -728,6 +734,32 @@ public void conglomerateDescriptorCacheRemove(Long conglomId) throws StandardExc\n         conglomerateDescriptorCache.invalidate(conglomId);\n     }\n \n+    public void constraintDescriptorListCacheAdd(UUID id, ConstraintDescriptorList item) throws StandardException {\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"constraintDescriptorListCacheAdd \" + id);\n+        constraintDescriptorListCache.put(id,item);\n+    }\n+\n+    public ConstraintDescriptorList constraintDescriptorListCacheFind(UUID id) throws StandardException {\n+        //if (!dd.canReadCache(null))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93507b1735a13c85fad763c48a224f61c6c10119"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ2OTIwNQ==", "bodyText": "Don't you need something in SpliceDatabase.java (registerDDL.startChange) to invalidate that new cache on DROP_CONSTRAINT?", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520469205", "createdAt": "2020-11-10T10:52:18Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryCache.java", "diffHunk": "@@ -507,6 +512,7 @@ public void clearAll() {\n         aliasDescriptorCache.invalidateAll();\n         catalogVersionCache.invalidateAll();\n         txnAwareConglomerateCache.invalidateAll();\n+        constraintDescriptorListCache.invalidateAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3MzQ5Mg==", "bodyText": "This is not enough, as it will only clear the constraint cache on the local. You need to use what we have in DDL.proto to communicate with the other servers. Check DDLUtils.java as well to see other uses for tables, schemas, etc.", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520473492", "createdAt": "2020-11-10T10:58:45Z", "author": {"login": "arnaud-splice"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/DropConstraintConstantOperation.java", "diffHunk": "@@ -239,6 +239,8 @@ public void executeConstantAction(Activation activation ) throws StandardExcepti\n \t\t\tdm.invalidateFor(conDesc, DependencyManager.DROP_CONSTRAINT, lcc);\n \t\t\tdm.clearDependencies(lcc, conDesc);\n \t\t}\n+\n+\t\tdd.getDataDictionaryCache().clearConstraintDescriptorListCache(); // not sure if this is the correct place to do this.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4MDcwOQ==", "bodyText": "you can define     private static final Logger LOG = Logger.getLogger(DDUtils.class); at the top of the class.", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520480709", "createdAt": "2020-11-10T11:10:20Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/DDUtils.java", "diffHunk": "@@ -261,7 +261,7 @@ public static void validateReferentialActions(DataDictionary dd,\n                                                               deleteConnectionsMap,\n                                                               newForeignKeyConstraintName);\n             }\n-        }\n+        } // would be nice to have a logger so we can log that we are not going to perform foreign key checks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f178b331126d18e6fe03cb01370c9b4764029c"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MDI5OTg1", "url": "https://github.com/splicemachine/spliceengine/pull/4513#pullrequestreview-527029985", "createdAt": "2020-11-10T09:51:45Z", "commit": {"oid": "d48a45886ee287b2070b0da3bf70559d05b55cf5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOTo1MTo0NVrOHwUeRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMToxNTowMVrOHwXy4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQyOTEyNQ==", "bodyText": "Just a minor comment, execute might be a better name here since they are DDLs and no result set is produced.", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520429125", "createdAt": "2020-11-10T09:51:45Z", "author": {"login": "ascend1"}, "path": "splice_machine/src/test/java/com/splicemachine/foreignkeys/ForeignKeyGraphIT.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.foreignkeys;\n+\n+import com.splicemachine.derby.test.framework.SpliceSchemaWatcher;\n+import com.splicemachine.derby.test.framework.SpliceWatcher;\n+import org.junit.*;\n+\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class ForeignKeyGraphIT {\n+\n+    private static final String SCHEMA = ForeignKeyGraphIT.class.getSimpleName().toUpperCase();\n+\n+    @ClassRule\n+    public static SpliceWatcher watcher = new SpliceWatcher(SCHEMA);\n+\n+    @ClassRule\n+    public static SpliceSchemaWatcher spliceSchemaWatcher = new SpliceSchemaWatcher(SCHEMA);\n+\n+    static int counter = 0;\n+    private static String generateName() {\n+        return \"T\" + counter++;\n+    }\n+\n+    enum Action { NO_ACTION, SET_NULL, CASCADE, RESTRICT };\n+\n+    static class DDLGenerator {\n+        List<String> tables = null;\n+        List<String> ddls = null;\n+        String constraintName = null;\n+\n+        public DDLGenerator(int count) {\n+            tables = new ArrayList<>(count);\n+            ddls = new ArrayList<>();\n+            for(int i=0; i<count; ++i) {\n+                String tableName = generateName();\n+                tables.add(tableName);\n+                ddls.add(String.format(\"CREATE TABLE %s(C1 int primary key, C2 int)\", tableName));\n+            }\n+        }\n+\n+        private static String toString(Action action) {\n+            switch(action) {\n+                case NO_ACTION:\n+                    return \"NO ACTION\";\n+                case SET_NULL:\n+                    return \"SET NULL\";\n+                case CASCADE:\n+                    return \"CASCADE\";\n+                case RESTRICT:\n+                    return \"RESTRICT\";\n+                default:\n+                    assert false; // should not happen.\n+            }\n+            return \"\"; // make compiler happy.\n+        }\n+\n+        private String generateConstraintDdl(int child, int parent, Action action) {\n+            assert child >= 0 && child < tables.size();\n+            assert parent >= 0 && parent < tables.size();\n+            constraintName = generateName();\n+            return String.format(\"ALTER TABLE %s ADD CONSTRAINT \\\"%s\\\" FOREIGN KEY (C2) REFERENCES %s(C1) ON DELETE %s\",\n+                                 tables.get(child), constraintName, tables.get(parent), toString(action));\n+        }\n+\n+        public DDLGenerator link(int child, int parent, Action action) {\n+            ddls.add(generateConstraintDdl(child, parent, action));\n+            return this;\n+        }\n+\n+        public DDLGenerator materialize() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d48a45886ee287b2070b0da3bf70559d05b55cf5"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzOTY0NQ==", "bodyText": "I think we have a Pair implementation in com.splicemachine.utils.Pair. Not sure if it's better to point there.", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520439645", "createdAt": "2020-11-10T10:06:53Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/Dfs.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+import javafx.util.Pair;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b648f3119f15efed502b8b5c6a4821afd6c6e5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0NzI5Ng==", "bodyText": "TableDescriptor has a getQualifiedName() method for this purpose.", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520447296", "createdAt": "2020-11-10T10:18:22Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/DictionaryGraphBuilder.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+import com.splicemachine.db.catalog.UUID;\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+import com.splicemachine.db.iapi.sql.StatementType;\n+import com.splicemachine.db.iapi.sql.dictionary.*;\n+import com.splicemachine.utils.Pair;\n+\n+import java.util.*;\n+\n+public class DictionaryGraphBuilder implements GraphBuilder {\n+\n+    private final TableDescriptor referencingTableDescriptor;\n+    private final DataDictionary dd;\n+    private final ConsInfo newConstraintInfo;\n+\n+    static class Edge {\n+        final String from;\n+        final EdgeNode.Type type;\n+        final String to;\n+\n+        Edge(String from, EdgeNode.Type type, String to) {\n+            this.from = from;\n+            this.type = type;\n+            this.to = to;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            Edge edge = (Edge) o;\n+            return Objects.equals(from, edge.from) &&\n+                    type == edge.type &&\n+                    Objects.equals(to, edge.to);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(from, type, to);\n+        }\n+    }\n+\n+    private EdgeNode.Type toEdgeNodeType(int action) {\n+        switch (action) {\n+            case StatementType.RA_CASCADE:\n+                return EdgeNode.Type.C;\n+            case StatementType.RA_NOACTION:\n+                return EdgeNode.Type.NA;\n+            case StatementType.RA_RESTRICT:\n+                return EdgeNode.Type.R;\n+            case StatementType.RA_SETNULL:\n+                return EdgeNode.Type.SN;\n+        }\n+        throw new IllegalArgumentException(\"unexpected action type: \" + action);\n+    }\n+\n+    public DictionaryGraphBuilder(DataDictionary dd,\n+                                  TableDescriptor referencingTableDescriptor,\n+                                  ConsInfo newConstraintInfo) {\n+        this.dd = dd;\n+        this.referencingTableDescriptor = referencingTableDescriptor;\n+        this.newConstraintInfo = newConstraintInfo;\n+    }\n+\n+    List<Pair<TableDescriptor, EdgeNode.Type>> getParents(TableDescriptor tableDescriptor) throws StandardException {\n+        List<Pair<TableDescriptor, EdgeNode.Type>> result = new ArrayList<>();\n+        ConstraintDescriptorList constraintDescriptorList = dd.getConstraintDescriptors(tableDescriptor);\n+        for (ConstraintDescriptor constraintDescriptor : constraintDescriptorList) {\n+            if (!(constraintDescriptor instanceof ForeignKeyConstraintDescriptor)) { //look for foreign keys only\n+                continue;\n+            }\n+            ForeignKeyConstraintDescriptor foreignKeyConstraintDescriptor = (ForeignKeyConstraintDescriptor) constraintDescriptor;\n+\n+            // take care of cases where the FK is self-referencing, for now ignore.\n+            if (foreignKeyConstraintDescriptor.isSelfReferencingFK()) {\n+                continue;\n+            }\n+\n+            ReferencedKeyConstraintDescriptor referencedConstraint = foreignKeyConstraintDescriptor.getReferencedConstraint();\n+            TableDescriptor referencedConstraintTableDescriptor = referencedConstraint.getTableDescriptor();\n+\n+            result.add(new Pair<>(referencedConstraintTableDescriptor, toEdgeNodeType(foreignKeyConstraintDescriptor.getRaDeleteRule())));\n+        }\n+        return result;\n+    }\n+\n+    List<Pair<TableDescriptor, EdgeNode.Type>> getChildren(TableDescriptor tableDescriptor) throws StandardException {\n+        List<Pair<TableDescriptor, EdgeNode.Type>> result = new ArrayList<>();\n+        ConstraintDescriptorList constraintDescriptorList = dd.getConstraintDescriptors(tableDescriptor);\n+        for (ConstraintDescriptor cd : constraintDescriptorList) {\n+            if ((cd instanceof ReferencedKeyConstraintDescriptor)) {\n+                ConstraintDescriptorList fkcdl = dd.getActiveConstraintDescriptors\n+                        (((ReferencedKeyConstraintDescriptor) cd).getForeignKeyConstraints(ConstraintDescriptor.ALL));\n+                int size = fkcdl.size();\n+                if (size == 0) {\n+                    continue;\n+                }\n+                for (int inner = 0; inner < size; inner++) {\n+                    ForeignKeyConstraintDescriptor fkcd = (ForeignKeyConstraintDescriptor) fkcdl.elementAt(inner);\n+                    TableDescriptor fktd = fkcd.getTableDescriptor();\n+                    // take care of cases where the FK is self-referencing, for now ignore.\n+                    if (fkcd.isSelfReferencingFK()) {\n+                        continue;\n+                    }\n+                    result.add(new Pair<>(fktd, toEdgeNodeType(fkcd.getRaDeleteRule())));\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public Graph generateGraph() throws StandardException {\n+        Set<Edge> edges = new HashSet<>();\n+        Set<String> tableNames = new HashSet<>();\n+\n+        Queue<TableDescriptor> descriptors = new LinkedList();\n+        descriptors.add(referencingTableDescriptor);\n+\n+        TableDescriptor referencedTableDescriptor = newConstraintInfo.getReferencedTableDescriptor(dd);\n+        descriptors.add(referencedTableDescriptor);\n+\n+        Set<UUID> visited = new HashSet<>();\n+\n+        while(!descriptors.isEmpty()) {\n+            TableDescriptor descriptor = descriptors.remove();\n+            visited.add(descriptor.getUUID());\n+            String tableName = descriptor.getSchemaName() + \".\" + descriptor.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b648f3119f15efed502b8b5c6a4821afd6c6e5"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1MDI1NQ==", "bodyText": "Maybe make the enum item names more descriptive, like capitalized full word? It's more readable and doesn't hurt. Also for variable y. By looking at this file only, it's hard to get what y is for.", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520450255", "createdAt": "2020-11-10T10:22:53Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/EdgeNode.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+public class EdgeNode {\n+    public EdgeNode(int y, Type type) {\n+        this.y = y;\n+        this.type = type;\n+        this.next = null;\n+    }\n+\n+    enum Type {C, R, SN, NA};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b648f3119f15efed502b8b5c6a4821afd6c6e5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1NTc1Mw==", "bodyText": "Also here about the Pair package.", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520455753", "createdAt": "2020-11-10T10:31:05Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/GraphAnnotator.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary.fk;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+import javafx.util.Pair;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b648f3119f15efed502b8b5c6a4821afd6c6e5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3ODc1MA==", "bodyText": "Maybe add some comments describing the graph structure. Having an example with three nodes would be very helpful in understanding how it works. Currently, interface doesn't match call site (from <-> to reversed) and it's a bit confusing.", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520478750", "createdAt": "2020-11-10T11:07:02Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/Graph.java", "diffHunk": "@@ -29,12 +36,66 @@ public Graph(Set<String> vertices) {\n             vertexIndex.put(vertex, i++);\n         }\n         parents = new int[vertices.size()][];\n+        surrogateCounter = 0;\n+        this.newConstraintName = newConstraintName;\n+        this.surrogates = new HashMap<>();\n+    }\n+\n+    void addEdge(String from, String to, EdgeNode.Type type) throws StandardException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93507b1735a13c85fad763c48a224f61c6c10119"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4MzU1NQ==", "bodyText": "Is this an error that we expected? I mean, talking about just an abstract graph, if we want to delete an edge that doesn't exist, might just be a no-op and OK to be safely ignored. Or if we don't expect this ever happen, probably assert instead of throw.", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r520483555", "createdAt": "2020-11-10T11:15:01Z", "author": {"login": "ascend1"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/fk/Graph.java", "diffHunk": "@@ -71,4 +132,50 @@ public int getVertexCount() {\n         return vertexIndex.size();\n \n     }\n+\n+    public EdgeNode.Type getEdgeType(int from, int to) {\n+        EdgeNode edgeNode = getEdge(from);\n+        while(true) {\n+            if(edgeNode == null) {\n+                throw new IllegalArgumentException(\"no edge between \" + getName(from) + \" and \" + getName(to));\n+            }\n+            if(edgeNode.y == to) {\n+                return edgeNode.type;\n+            }\n+            edgeNode = edgeNode.next;\n+        }\n+    }\n+\n+    public void removeEdge(int from, int to) {\n+        EdgeNode edgeNode = getEdge(from);\n+        if(edgeNode == null) {\n+            throw new IllegalArgumentException(\"no edge between \" + getName(from) + \" and \" + getName(to));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93507b1735a13c85fad763c48a224f61c6c10119"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MDY5OTQw", "url": "https://github.com/splicemachine/spliceengine/pull/4513#pullrequestreview-529069940", "createdAt": "2020-11-12T13:10:10Z", "commit": {"oid": "048e9b61fdc9dc17cd774780dec256e12f69ec13"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d1b66d982d9db853658772d05e0fd516bbd2070", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/7d1b66d982d9db853658772d05e0fd516bbd2070", "committedDate": "2020-11-12T13:55:55Z", "message": "DB-10638 address comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6892021fb5b41b96307141fe228bc70c23650c65", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/6892021fb5b41b96307141fe228bc70c23650c65", "committedDate": "2020-11-12T21:16:40Z", "message": "DB-10638 improve cache consistency across multiple RS.\n\n- add test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38271f9719b203c98c1ce748cc3ad09f28da4953", "author": {"user": {"login": "hatyo", "name": "Youssef Hatem"}}, "url": "https://github.com/splicemachine/spliceengine/commit/38271f9719b203c98c1ce748cc3ad09f28da4953", "committedDate": "2020-11-12T21:18:36Z", "message": "Merge remote-tracking branch 'origin/master' into DB-10638"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTMwNjMy", "url": "https://github.com/splicemachine/spliceengine/pull/4513#pullrequestreview-529530632", "createdAt": "2020-11-12T21:59:14Z", "commit": {"oid": "38271f9719b203c98c1ce748cc3ad09f28da4953"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTQ3ODgw", "url": "https://github.com/splicemachine/spliceengine/pull/4513#pullrequestreview-529547880", "createdAt": "2020-11-12T22:22:46Z", "commit": {"oid": "6892021fb5b41b96307141fe228bc70c23650c65"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjoyMjo0NlrOHyQ_KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjoyMjo0NlrOHyQ_KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ2OTE2MQ==", "bodyText": "Nitpick, name is a bit confusing since it's being used for both Add/Drop, preAlter.. might be better.", "url": "https://github.com/splicemachine/spliceengine/pull/4513#discussion_r522469161", "createdAt": "2020-11-12T22:22:46Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/ddl/DDLUtils.java", "diffHunk": "@@ -309,6 +309,14 @@ public static BitSet getIndexedCols(int[] indexColsToMainColMap) {\n         }\n     }\n \n+    public static void preDropForeignKey(DDLMessage.DDLChange change, DataDictionary dd) throws StandardException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6892021fb5b41b96307141fe228bc70c23650c65"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTQ4NTg1", "url": "https://github.com/splicemachine/spliceengine/pull/4513#pullrequestreview-529548585", "createdAt": "2020-11-12T22:24:01Z", "commit": {"oid": "38271f9719b203c98c1ce748cc3ad09f28da4953"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NjA3ODI1", "url": "https://github.com/splicemachine/spliceengine/pull/4513#pullrequestreview-529607825", "createdAt": "2020-11-13T00:19:31Z", "commit": {"oid": "38271f9719b203c98c1ce748cc3ad09f28da4953"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NjI2MjQ0", "url": "https://github.com/splicemachine/spliceengine/pull/4513#pullrequestreview-529626244", "createdAt": "2020-11-13T01:04:01Z", "commit": {"oid": "38271f9719b203c98c1ce748cc3ad09f28da4953"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1062, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}