{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxMTkxNjgy", "number": 3852, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODo0NTozOVrOESSxog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMDo1MTozNFrOEYABEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjE3NDQyOnYy", "diffSide": "RIGHT", "path": "hbase_sql/orc-spark-3.0/src/main/java/com/splicemachine/stream/output/ParquetWriterFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODo0NTozOVrOG3ZOAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODo0NTozOVrOG3ZOAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczODA1MA==", "bodyText": "for other reviewers: the difference between this file and e.g. hbase_sql/orc-spark-2.4/src/main/java/com/splicemachine/stream/output/ParquetWriterFactoryImpl.java is\n<         return encoder.createSerializer().apply(valueRow);\n---\n>         return encoder.toRow(valueRow);", "url": "https://github.com/splicemachine/spliceengine/pull/3852#discussion_r460738050", "createdAt": "2020-07-27T08:45:39Z", "author": {"login": "martinrupp"}, "path": "hbase_sql/orc-spark-3.0/src/main/java/com/splicemachine/stream/output/ParquetWriterFactoryImpl.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ *\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ */\n+\n+package com.splicemachine.stream.output;\n+\n+import com.splicemachine.EngineDriver;\n+import com.splicemachine.db.impl.sql.execute.ValueRow;\n+import com.splicemachine.derby.stream.control.output.ParquetWriterFactory;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.mapreduce.RecordWriter;\n+import org.apache.hadoop.mapreduce.TaskAttemptContext;\n+import org.apache.parquet.hadoop.ParquetOutputFormat;\n+import org.apache.parquet.hadoop.metadata.CompressionCodecName;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.catalyst.InternalRow;\n+import org.apache.spark.sql.catalyst.encoders.ExpressionEncoder;\n+import org.apache.spark.sql.execution.datasources.parquet.ParquetWriteSupport;\n+import org.apache.spark.sql.internal.SQLConf;\n+import org.apache.spark.sql.types.StructType;\n+\n+import java.io.IOException;\n+\n+public class ParquetWriterFactoryImpl implements ParquetWriterFactory{\n+    \n+    @Override\n+    public RecordWriter<Void, Object> getParquetRecordWriter(String location, String compression, StructType tableSchema) throws IOException, InterruptedException {\n+        ParquetWriteSupport pws = new ParquetWriteSupport();\n+        final Configuration conf = new Configuration((Configuration) EngineDriver.driver().getConfiguration().getConfigSource().unwrapDelegate());\n+        conf.set(SQLConf.PARQUET_WRITE_LEGACY_FORMAT().key(), \"false\");\n+        conf.set(SQLConf.PARQUET_OUTPUT_TIMESTAMP_TYPE().key(), \"INT96\");\n+        conf.set(SQLConf.PARQUET_INT96_AS_TIMESTAMP().key(), \"true\");\n+        conf.set(SQLConf.PARQUET_BINARY_AS_STRING().key(), \"false\");\n+\n+        pws.setSchema(tableSchema, conf);\n+        return new ParquetOutputFormat(new ParquetWriteSupport()) {\n+            @Override\n+            public Path getDefaultWorkFile(TaskAttemptContext context, String extension) throws IOException {\n+                return new Path(location+\"/part-r-00000\"+extension);\n+            }\n+\n+            @Override\n+            public RecordWriter<Void, Object> getRecordWriter(TaskAttemptContext taskAttemptContext)\n+                    throws IOException, InterruptedException {\n+\n+                CompressionCodecName codec;\n+                switch (compression) {\n+                    case \"none\":\n+                        codec = CompressionCodecName.UNCOMPRESSED;\n+                        break;\n+                    case \"snappy\":\n+                        codec = CompressionCodecName.SNAPPY;\n+                        break;\n+                    case \"lzo\":\n+                        codec = CompressionCodecName.LZO;\n+                        break;\n+                    case \"gzip\":\n+                    case \"zip\":\n+                        codec = CompressionCodecName.GZIP;\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unknown compression: \" + compression);\n+                }\n+                String extension = codec.getExtension() + \".parquet\";\n+                Path file = getDefaultWorkFile(taskAttemptContext, extension);\n+                return getRecordWriter(conf, file, codec);\n+            }\n+        }.getRecordWriter(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c083bcbf279f79a3a5b4a80dad95a24445f33cd"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjE4NjMxOnYy", "diffSide": "RIGHT", "path": "hbase_sql/pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODo0ODo0OVrOG3ZVZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowODo0N1rOG3zqGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczOTk0Mw==", "bodyText": "sure we need this additional dependency?", "url": "https://github.com/splicemachine/spliceengine/pull/3852#discussion_r460739943", "createdAt": "2020-07-27T08:48:49Z", "author": {"login": "martinrupp"}, "path": "hbase_sql/pom.xml", "diffHunk": "@@ -297,7 +297,12 @@\n             <version>${spark.version}</version>\n             <scope>provided</scope>\n         </dependency>\n-\n+        <dependency>\n+            <groupId>org.apache.hive</groupId>\n+            <artifactId>hive-classification</artifactId>\n+            <version>${hive.version}</version>\n+            <scope>provided</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c083bcbf279f79a3a5b4a80dad95a24445f33cd"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzODY2MA==", "bodyText": "org.apache.hadoop.hive.serde2.SerDe is replaced by org.apache.hadoop.hive.serde2.AbstractSerDe. It needs this dependency for Public annotation to compile.", "url": "https://github.com/splicemachine/spliceengine/pull/3852#discussion_r460838660", "createdAt": "2020-07-27T11:58:13Z", "author": {"login": "ipraznik-splice"}, "path": "hbase_sql/pom.xml", "diffHunk": "@@ -297,7 +297,12 @@\n             <version>${spark.version}</version>\n             <scope>provided</scope>\n         </dependency>\n-\n+        <dependency>\n+            <groupId>org.apache.hive</groupId>\n+            <artifactId>hive-classification</artifactId>\n+            <version>${hive.version}</version>\n+            <scope>provided</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczOTk0Mw=="}, "originalCommit": {"oid": "5c083bcbf279f79a3a5b4a80dad95a24445f33cd"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxMTY0Nw==", "bodyText": "ok", "url": "https://github.com/splicemachine/spliceengine/pull/3852#discussion_r460911647", "createdAt": "2020-07-27T14:01:05Z", "author": {"login": "martinrupp"}, "path": "hbase_sql/pom.xml", "diffHunk": "@@ -297,7 +297,12 @@\n             <version>${spark.version}</version>\n             <scope>provided</scope>\n         </dependency>\n-\n+        <dependency>\n+            <groupId>org.apache.hive</groupId>\n+            <artifactId>hive-classification</artifactId>\n+            <version>${hive.version}</version>\n+            <scope>provided</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczOTk0Mw=="}, "originalCommit": {"oid": "5c083bcbf279f79a3a5b4a80dad95a24445f33cd"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTIyNg==", "bodyText": "Add a comment to the dependency mentioning the required annotation to help future developers", "url": "https://github.com/splicemachine/spliceengine/pull/3852#discussion_r461171226", "createdAt": "2020-07-27T21:08:47Z", "author": {"login": "OlegMazurov"}, "path": "hbase_sql/pom.xml", "diffHunk": "@@ -297,7 +297,12 @@\n             <version>${spark.version}</version>\n             <scope>provided</scope>\n         </dependency>\n-\n+        <dependency>\n+            <groupId>org.apache.hive</groupId>\n+            <artifactId>hive-classification</artifactId>\n+            <version>${hive.version}</version>\n+            <scope>provided</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczOTk0Mw=="}, "originalCommit": {"oid": "5c083bcbf279f79a3a5b4a80dad95a24445f33cd"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjIwMTA0OnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/control/ControlDataSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODo1MjozMFrOG3ZeHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODo1MjozMFrOG3ZeHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0MjE3Mg==", "bodyText": "for other reviewers: underlying change here is that Spark2.4 uses encoder.toRow(valueRow); , while Spark3.0 uses return encoder.createSerializer().apply(valueRow); . see hbase_sql/orc-spark-3.0/src/main/java/com/splicemachine/stream/output/ParquetWriterFactoryImpl.java and 2.4", "url": "https://github.com/splicemachine/spliceengine/pull/3852#discussion_r460742172", "createdAt": "2020-07-27T08:52:30Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/control/ControlDataSet.java", "diffHunk": "@@ -591,7 +592,7 @@ public String getAttribute(String name) {\n                     ValueRow vr = (ValueRow) iterator.next();\n                     context.recordWrite();\n \n-                    rw.write(null, encoder.toRow(vr));\n+                    rw.write(null, ParquetWriterService.getFactory().encodeToRow(tableSchema, vr, encoder));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c083bcbf279f79a3a5b4a80dad95a24445f33cd"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjIxNTYxOnYy", "diffSide": "RIGHT", "path": "standalone/spark3.0.0/src/test/resources/yarn-site.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODo1NTo1MFrOG3Zmjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowMzozMVrOG3zfYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NDMzNA==", "bodyText": "@OlegMazurov  might want to have a look at these configs.", "url": "https://github.com/splicemachine/spliceengine/pull/3852#discussion_r460744334", "createdAt": "2020-07-27T08:55:50Z", "author": {"login": "martinrupp"}, "path": "standalone/spark3.0.0/src/test/resources/yarn-site.xml", "diffHunk": "@@ -0,0 +1,130 @@\n+<!--\n+  ~ Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+  ~\n+  ~ This file is part of Splice Machine.\n+  ~ Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+  ~ GNU Affero General Public License as published by the Free Software Foundation, either\n+  ~ version 3, or (at your option) any later version.\n+  ~ Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+  ~ without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+  ~ See the GNU Affero General Public License for more details.\n+  ~ You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+  ~ If not, see <http://www.gnu.org/licenses/>.\n+  -->\n+\n+<configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c083bcbf279f79a3a5b4a80dad95a24445f33cd"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2ODQ4MA==", "bodyText": "Let's keep all yarn-site.xml in sync. If we decide to change some parameters for ITs/standalone that should be done in a separate JIRA.", "url": "https://github.com/splicemachine/spliceengine/pull/3852#discussion_r461168480", "createdAt": "2020-07-27T21:03:31Z", "author": {"login": "OlegMazurov"}, "path": "standalone/spark3.0.0/src/test/resources/yarn-site.xml", "diffHunk": "@@ -0,0 +1,130 @@\n+<!--\n+  ~ Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+  ~\n+  ~ This file is part of Splice Machine.\n+  ~ Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+  ~ GNU Affero General Public License as published by the Free Software Foundation, either\n+  ~ version 3, or (at your option) any later version.\n+  ~ Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+  ~ without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+  ~ See the GNU Affero General Public License for more details.\n+  ~ You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+  ~ If not, see <http://www.gnu.org/licenses/>.\n+  -->\n+\n+<configuration>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NDMzNA=="}, "originalCommit": {"oid": "5c083bcbf279f79a3a5b4a80dad95a24445f33cd"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODkxOTEyOnYy", "diffSide": "RIGHT", "path": "hbase_sql/src/main/java/com/splicemachine/mrio/api/hive/SMSerDe.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo1NzozMlrOG3zTHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo1NzozMlrOG3zTHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2NTM0Mw==", "bodyText": "Either isTraceEnabled() or debug().", "url": "https://github.com/splicemachine/spliceengine/pull/3852#discussion_r461165343", "createdAt": "2020-07-27T20:57:32Z", "author": {"login": "OlegMazurov"}, "path": "hbase_sql/src/main/java/com/splicemachine/mrio/api/hive/SMSerDe.java", "diffHunk": "@@ -161,8 +160,8 @@ public Object deserialize(Writable blob) throws SerDeException {\n      */\n     //@Override\n     public ObjectInspector getObjectInspector() throws SerDeException {\n-    \tif (Log.isDebugEnabled())\n-    \t\tSpliceLogUtils.trace(Log, \"getObjectInspector\");\n+    \tif (LOG.isDebugEnabled())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b03f5fa0de2ef60c1d1e26b630279b293f3767dd"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODkyNTkxOnYy", "diffSide": "RIGHT", "path": "hbase_sql/src/main/java/com/splicemachine/mrio/api/hive/SMSerDe.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo1OTozMVrOG3zXXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo1OTozMVrOG3zXXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2NjQzMQ==", "bodyText": "LOG.isDebugEnabled() -- the parameter is always computed even when debug logging is disabled", "url": "https://github.com/splicemachine/spliceengine/pull/3852#discussion_r461166431", "createdAt": "2020-07-27T20:59:31Z", "author": {"login": "OlegMazurov"}, "path": "hbase_sql/src/main/java/com/splicemachine/mrio/api/hive/SMSerDe.java", "diffHunk": "@@ -181,7 +180,7 @@ public SerDeStats getSerDeStats() {\n      */\n     //@Override\n     public Class<? extends Writable> getSerializedClass() {\n-        Log.debug(\"********\" + Thread.currentThread().getStackTrace()[1].getMethodName());\n+        LOG.debug(\"********\" + Thread.currentThread().getStackTrace()[1].getMethodName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b03f5fa0de2ef60c1d1e26b630279b293f3767dd"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjAxNTU1OnYy", "diffSide": "RIGHT", "path": "hbase_sql/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMDo1MTozNFrOHAGVIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo0Mzo1MVrOHBwfgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg2NTc2MA==", "bodyText": "Copying Oleg's comment so that it doesn't get lost: Add a comment to the dependency mentioning the required annotation to help future developers", "url": "https://github.com/splicemachine/spliceengine/pull/3852#discussion_r469865760", "createdAt": "2020-08-13T10:51:34Z", "author": {"login": "dgomezferro"}, "path": "hbase_sql/pom.xml", "diffHunk": "@@ -297,7 +297,12 @@\n             <version>${spark.version}</version>\n             <scope>provided</scope>\n         </dependency>\n-\n+        <dependency>\n+            <groupId>org.apache.hive</groupId>\n+            <artifactId>hive-classification</artifactId>\n+            <version>${hive.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8d5712adaf41d1ecff02f8bfd76b62cc8488a0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwNTEyMg==", "bodyText": "I've added the comment to pom.xml", "url": "https://github.com/splicemachine/spliceengine/pull/3852#discussion_r471605122", "createdAt": "2020-08-17T16:43:51Z", "author": {"login": "ipraznik-splice"}, "path": "hbase_sql/pom.xml", "diffHunk": "@@ -297,7 +297,12 @@\n             <version>${spark.version}</version>\n             <scope>provided</scope>\n         </dependency>\n-\n+        <dependency>\n+            <groupId>org.apache.hive</groupId>\n+            <artifactId>hive-classification</artifactId>\n+            <version>${hive.version}</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg2NTc2MA=="}, "originalCommit": {"oid": "7b8d5712adaf41d1ecff02f8bfd76b62cc8488a0"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3108, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}