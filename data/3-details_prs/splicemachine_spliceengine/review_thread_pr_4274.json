{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxODg4NDU5", "number": 4274, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToxMjoyM1rOEs8XAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToxMjoyM1rOEs8XAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTYxNzMxOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/main/java/com/splicemachine/derby/utils/SpliceAdmin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToxMjoyM1rOHgdGWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToxMjoyM1rOHgdGWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5MzI0Mw==", "bodyText": "this is necessary since we are putting that generated DDL string into this\nStringBuilder sb = new StringBuilder(\"SELECT * FROM (VALUES '\");\nsb.append(DDL);\nString extStr = extTblString.toString();\nif (extStr.length() > 0)\n\tsb.append(extStr);\nsb.append(\";') FOO (DDL)\");\nresultSet[0] = executeStatement(sb);\n\nand therefore all quotes like ' have to be escaped, resulting in double quotes \u2018'. For X\u2019000' this means X''000''.\nThis scheme of creating a `\u201dSELECT * FROM (VALUES \u2018\u201c + result + \u201c;) FOO(col1, col2)\u2019 is used in all of SpliceAdmin.java, might be up for some more surprises.\nActually maybe simple would have been to solve escaping generally here by using sth like\nString escapeAsValue(String val) {\n  return val.replaceAll(\"'\", \"''\"); \n}\n\nand then use everywhere sth  like \u201dSELECT * FROM (VALUES \u2018\u201c + doEscaping(result) + \u201c;) FOO(col1, col2)\u201d;", "url": "https://github.com/splicemachine/spliceengine/pull/4274#discussion_r503793243", "createdAt": "2020-10-13T09:12:23Z", "author": {"login": "martinrupp"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/utils/SpliceAdmin.java", "diffHunk": "@@ -2387,6 +2387,10 @@ private static String createColumn(ColumnDescriptor columnDescriptor) throws SQL\n                         ) {\n                     if ((defaultText = defaultText.toUpperCase()).startsWith(\"'\"))\n                         defaultText = \"'\" + defaultText + \"'\";\n+                    if (columnDescriptor.getType().getTypeId().isBitTypeId() &&\n+                            defaultText.startsWith(\"X'\")) {\n+                        defaultText = \"X'\" + defaultText.substring(1) + \"'\";\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4325170e8d362e3edadc6ce20854679c9845a2e"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2868, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}