{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MjY4NTYy", "number": 3153, "title": "DB-9057 Separate Control and Spark costing", "bodyText": "Reviewers probably want to filter white space changes in github to have a clearer vision of what this PR is about.", "createdAt": "2020-01-21T12:01:40Z", "url": "https://github.com/splicemachine/spliceengine/pull/3153", "merged": true, "mergeCommit": {"oid": "bee27390eed25170480ae4386702e85bd194c488"}, "closed": true, "closedAt": "2020-02-09T01:04:10Z", "author": {"login": "arnaud-splice"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8jcCMgBqjI5NjY4MDQ3NjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcB-fGAgFqTM1NTEyMzMwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "619d8716bea6e530cd10613c0162844244dcfdd4", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/619d8716bea6e530cd10613c0162844244dcfdd4", "committedDate": "2020-01-21T11:48:58Z", "message": "DB-9057 Separate Control and Spark costing"}, "afterCommit": {"oid": "026549e7e23be818a49b0a71105c533fdfc00b75", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/026549e7e23be818a49b0a71105c533fdfc00b75", "committedDate": "2020-01-21T16:07:29Z", "message": "DB-9057 Separate Control and Spark costing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "026549e7e23be818a49b0a71105c533fdfc00b75", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/026549e7e23be818a49b0a71105c533fdfc00b75", "committedDate": "2020-01-21T16:07:29Z", "message": "DB-9057 Separate Control and Spark costing"}, "afterCommit": {"oid": "6c462e49864c7f1b3a825a3d24371282b9738edd", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/6c462e49864c7f1b3a825a3d24371282b9738edd", "committedDate": "2020-01-21T18:04:25Z", "message": "DB-9057 Separate Control and Spark costing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MjUyOTg5", "url": "https://github.com/splicemachine/spliceengine/pull/3153#pullrequestreview-347252989", "createdAt": "2020-01-23T12:16:55Z", "commit": {"oid": "6c462e49864c7f1b3a825a3d24371282b9738edd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MzA4Njkw", "url": "https://github.com/splicemachine/spliceengine/pull/3153#pullrequestreview-348308690", "createdAt": "2020-01-25T04:00:33Z", "commit": {"oid": "6c462e49864c7f1b3a825a3d24371282b9738edd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MTAwNTQx", "url": "https://github.com/splicemachine/spliceengine/pull/3153#pullrequestreview-349100541", "createdAt": "2020-01-28T02:31:35Z", "commit": {"oid": "6c462e49864c7f1b3a825a3d24371282b9738edd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMjozMTozNVrOFiXuKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMjo1MjoyMlrOFiX9eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NDU1Mg==", "bodyText": "We use different OptimizerImpl instance to plan each SELECT block. We set the useSpark variable for the OptimizerImpl instance for the top SELECT, but I don't see logic that passes the setting to the OptimizerImpl instance for the nested SELECT block.\nGiven the following query as an example:\nexplain select * from (select * from t1 --splice-properties useDefaultRowCount=30000000\n, t2 where a1=a2) dt1, (select * from t3, t4 where a3=a4) dt2 where a1=a2; \n\nWhen the top SELECT is planning for the spark path, the nested SELECT still has useSpark=false.", "url": "https://github.com/splicemachine/spliceengine/pull/3153#discussion_r371584552", "createdAt": "2020-01-28T02:31:35Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SelectNode.java", "diffHunk": "@@ -1601,39 +1599,37 @@ public ResultSetNode optimize(DataDictionary dataDictionary,\n                 }\n             }\n         }\n-\t\t/* Get a new optimizer */\n-        optimizer=getOptimizer(fromList, wherePredicates, dataDictionary, orderByList);\n-        optimizer.setOuterRows(outerRows);\n \n-        // Aggregation with no GROUP BY always outputs one row.\n-        if ((selectAggregates != null && !selectAggregates.isEmpty() ||\n-             havingAggregates !=null  && !havingAggregates.isEmpty()) && hasNoGroupBy())\n-            optimizer.setSingleRow(true);\n+        Optimizer optimizer = getOptimizer(fromList, wherePredicates, dataDictionary, orderByList);\n+        if (nestingLevel == 0) {\n+            // Top level select node, we should try to cost control first, and fallback to spark if necessary\n \n-\t\t/* Optimize this SelectNode */\n-        while(optimizer.nextJoinOrder()){\n-            while(optimizer.getNextDecoratedPermutation()){\n-                optimizer.costPermutation();\n+            if (!determineSpark()) {\n+                optimizer.setForSpark(false);\n+                findBestPlan(optimizer, dataDictionary, outerRows);\n+            }\n+\n+            if (determineSpark()) {\n+                for (int i = 0; i < fromList.size(); ++i) {\n+                    FromTable ft = (FromTable) fromList.elementAt(i);\n+                    ft.resetAccessPaths();\n+                }\n+                optimizer.setForSpark(true);\n+                optimizer.prepForNextRound();\n+                findBestPlan(optimizer, dataDictionary, outerRows);\n             }\n+        } else {\n+            findBestPlan(optimizer, dataDictionary, outerRows);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c462e49864c7f1b3a825a3d24371282b9738edd"}, "originalPosition": 854}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NjYwNw==", "bodyText": "This seems only resetting the access path for the tables in the top level SELECT, but not that of the nested SELECT, shouldn't we reset that too?", "url": "https://github.com/splicemachine/spliceengine/pull/3153#discussion_r371586607", "createdAt": "2020-01-28T02:41:39Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SelectNode.java", "diffHunk": "@@ -1601,39 +1599,37 @@ public ResultSetNode optimize(DataDictionary dataDictionary,\n                 }\n             }\n         }\n-\t\t/* Get a new optimizer */\n-        optimizer=getOptimizer(fromList, wherePredicates, dataDictionary, orderByList);\n-        optimizer.setOuterRows(outerRows);\n \n-        // Aggregation with no GROUP BY always outputs one row.\n-        if ((selectAggregates != null && !selectAggregates.isEmpty() ||\n-             havingAggregates !=null  && !havingAggregates.isEmpty()) && hasNoGroupBy())\n-            optimizer.setSingleRow(true);\n+        Optimizer optimizer = getOptimizer(fromList, wherePredicates, dataDictionary, orderByList);\n+        if (nestingLevel == 0) {\n+            // Top level select node, we should try to cost control first, and fallback to spark if necessary\n \n-\t\t/* Optimize this SelectNode */\n-        while(optimizer.nextJoinOrder()){\n-            while(optimizer.getNextDecoratedPermutation()){\n-                optimizer.costPermutation();\n+            if (!determineSpark()) {\n+                optimizer.setForSpark(false);\n+                findBestPlan(optimizer, dataDictionary, outerRows);\n+            }\n+\n+            if (determineSpark()) {\n+                for (int i = 0; i < fromList.size(); ++i) {\n+                    FromTable ft = (FromTable) fromList.elementAt(i);\n+                    ft.resetAccessPaths();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c462e49864c7f1b3a825a3d24371282b9738edd"}, "originalPosition": 847}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4ODQ3Mg==", "bodyText": "For the case of forced control, should we skip costing the second path?", "url": "https://github.com/splicemachine/spliceengine/pull/3153#discussion_r371588472", "createdAt": "2020-01-28T02:52:22Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SelectNode.java", "diffHunk": "@@ -1601,39 +1599,37 @@ public ResultSetNode optimize(DataDictionary dataDictionary,\n                 }\n             }\n         }\n-\t\t/* Get a new optimizer */\n-        optimizer=getOptimizer(fromList, wherePredicates, dataDictionary, orderByList);\n-        optimizer.setOuterRows(outerRows);\n \n-        // Aggregation with no GROUP BY always outputs one row.\n-        if ((selectAggregates != null && !selectAggregates.isEmpty() ||\n-             havingAggregates !=null  && !havingAggregates.isEmpty()) && hasNoGroupBy())\n-            optimizer.setSingleRow(true);\n+        Optimizer optimizer = getOptimizer(fromList, wherePredicates, dataDictionary, orderByList);\n+        if (nestingLevel == 0) {\n+            // Top level select node, we should try to cost control first, and fallback to spark if necessary\n \n-\t\t/* Optimize this SelectNode */\n-        while(optimizer.nextJoinOrder()){\n-            while(optimizer.getNextDecoratedPermutation()){\n-                optimizer.costPermutation();\n+            if (!determineSpark()) {\n+                optimizer.setForSpark(false);\n+                findBestPlan(optimizer, dataDictionary, outerRows);\n+            }\n+\n+            if (determineSpark()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c462e49864c7f1b3a825a3d24371282b9738edd"}, "originalPosition": 844}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5OTE1MTYx", "url": "https://github.com/splicemachine/spliceengine/pull/3153#pullrequestreview-349915161", "createdAt": "2020-01-29T07:55:18Z", "commit": {"oid": "6c462e49864c7f1b3a825a3d24371282b9738edd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5OTIzODIz", "url": "https://github.com/splicemachine/spliceengine/pull/3153#pullrequestreview-349923823", "createdAt": "2020-01-29T08:15:42Z", "commit": {"oid": "6c462e49864c7f1b3a825a3d24371282b9738edd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwODoxNTo0MlrOFi_ubQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwODoxNTo0MlrOFi_ubQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIzOTk4MQ==", "bodyText": "Shouldn't it be isForSpark since it's a predicate?", "url": "https://github.com/splicemachine/spliceengine/pull/3153#discussion_r372239981", "createdAt": "2020-01-29T08:15:42Z", "author": {"login": "jaceklaskowski"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/compile/Optimizer.java", "diffHunk": "@@ -402,4 +402,7 @@ void considerCost(Optimizable optimizable,\n \n     public void setSingleRow(boolean singleRowInRelation);\n \n+    public void setForSpark(boolean forSpark);\n+\n+    public boolean getForSpark();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c462e49864c7f1b3a825a3d24371282b9738edd"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5OTI0MzYz", "url": "https://github.com/splicemachine/spliceengine/pull/3153#pullrequestreview-349924363", "createdAt": "2020-01-29T08:16:48Z", "commit": {"oid": "6c462e49864c7f1b3a825a3d24371282b9738edd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwODoxNjo0OVrOFi_wVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwODoxNjo0OVrOFi_wVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI0MDQ3MA==", "bodyText": "Since we're at spacing, what about spaces after commas?", "url": "https://github.com/splicemachine/spliceengine/pull/3153#discussion_r372240470", "createdAt": "2020-01-29T08:16:49Z", "author": {"login": "jaceklaskowski"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/compile/RequiredRowOrdering.java", "diffHunk": "@@ -44,83 +44,87 @@\n  */\n public interface RequiredRowOrdering\n {\n-\tint SORT_REQUIRED = 1;\n-\tint ELIMINATE_DUPS = 2;\n-\tint NOTHING_REQUIRED = 3;\n+    int SORT_REQUIRED = 1;\n+    int ELIMINATE_DUPS = 2;\n+    int NOTHING_REQUIRED = 3;\n \n-\t/**\n-\t * Tell whether sorting is required for this RequiredRowOrdering,\n-\t * given a RowOrdering.\n-\t *\n-\t * @param rowOrdering\tThe order of rows in question\n-\t * @param optimizableList\tThe current join order being considered by \n-\t *    the optimizer. We need to look into this to determine if the outer\n-\t *    optimizables are single row resultset if the order by column is\n-\t *    on an inner optimizable and that inner optimizable is not a one\n-\t *    row resultset. DERBY-3926\n-\t *\n-\t * @return\tSORT_REQUIRED if sorting is required,\n-\t *\t\t\tELIMINATE_DUPS if no sorting is required but duplicates\n-\t *\t\t\t\t\t\t\tmust be eliminated (i.e. the rows are in\n-\t *\t\t\t\t\t\t\tthe right order but there may be duplicates),\n-\t *\t\t\tNOTHING_REQUIRED is no operation is required\n-\t *\n-\t * @exception StandardException\t\tThrown on error\n-\t */\n-\tint sortRequired(RowOrdering rowOrdering, OptimizableList optimizableList)  throws StandardException;\n+    /**\n+     * Tell whether sorting is required for this RequiredRowOrdering,\n+     * given a RowOrdering.\n+     *\n+     * @param rowOrdering    The order of rows in question\n+     * @param optimizableList    The current join order being considered by\n+     *    the optimizer. We need to look into this to determine if the outer\n+     *    optimizables are single row resultset if the order by column is\n+     *    on an inner optimizable and that inner optimizable is not a one\n+     *    row resultset. DERBY-3926\n+     *\n+     * @return    SORT_REQUIRED if sorting is required,\n+     *            ELIMINATE_DUPS if no sorting is required but duplicates\n+     *                            must be eliminated (i.e. the rows are in\n+     *                            the right order but there may be duplicates),\n+     *            NOTHING_REQUIRED is no operation is required\n+     *\n+     * @exception StandardException        Thrown on error\n+     */\n+    int sortRequired(RowOrdering rowOrdering, OptimizableList optimizableList)  throws StandardException;\n \n-\t/**\n-\t * Tell whether sorting is required for this RequiredRowOrdering,\n-\t * given a RowOrdering representing a partial join order, and\n-\t * a bit map telling what tables are represented in the join order.\n-\t * This is useful for reducing the number of cases the optimizer\n-\t * has to consider.\n-\t *\n-\t * @param rowOrdering\tThe order of rows in the partial join order\n-\t * @param tableMap\t\tA bit map of the tables in the partial join order\n-\t * @param optimizableList\tThe current join order being considered by \n-\t *    the optimizer. We need to look into this to determine if the outer\n-\t *    optimizables are single row resultset if the order by column is\n-\t *    on an inner optimizable and that inner optimizable is not a one\n-\t *    row resultset. DERBY-3926\n-\t *\n-\t * @return\tSORT_REQUIRED if sorting is required,\n-\t *\t\t\tELIMINATE_DUPS if no sorting is required by duplicates\n-\t *\t\t\t\t\t\t\tmust be eliminated (i.e. the rows are in\n-\t *\t\t\t\t\t\t\tthe right order but there may be duplicates),\n-\t *\t\t\tNOTHING_REQUIRED is no operation is required\n-\t *\n-\t * @exception StandardException\t\tThrown on error\n-\t */\n-\tint sortRequired(RowOrdering rowOrdering,JBitSet tableMap,OptimizableList optimizableList) throws StandardException;\n+    /**\n+     * Tell whether sorting is required for this RequiredRowOrdering,\n+     * given a RowOrdering representing a partial join order, and\n+     * a bit map telling what tables are represented in the join order.\n+     * This is useful for reducing the number of cases the optimizer\n+     * has to consider.\n+     *\n+     * @param rowOrdering    The order of rows in the partial join order\n+     * @param tableMap        A bit map of the tables in the partial join order\n+     * @param optimizableList    The current join order being considered by\n+     *    the optimizer. We need to look into this to determine if the outer\n+     *    optimizables are single row resultset if the order by column is\n+     *    on an inner optimizable and that inner optimizable is not a one\n+     *    row resultset. DERBY-3926\n+     *\n+     * @return    SORT_REQUIRED if sorting is required,\n+     *            ELIMINATE_DUPS if no sorting is required by duplicates\n+     *                            must be eliminated (i.e. the rows are in\n+     *                            the right order but there may be duplicates),\n+     *            NOTHING_REQUIRED is no operation is required\n+     *\n+     * @exception StandardException        Thrown on error\n+     */\n+    int sortRequired(RowOrdering rowOrdering,JBitSet tableMap,OptimizableList optimizableList) throws StandardException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c462e49864c7f1b3a825a3d24371282b9738edd"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5OTI0NjYx", "url": "https://github.com/splicemachine/spliceengine/pull/3153#pullrequestreview-349924661", "createdAt": "2020-01-29T08:17:24Z", "commit": {"oid": "6c462e49864c7f1b3a825a3d24371282b9738edd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwODoxNzoyNFrOFi_xLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwODoxNzoyNFrOFi_xLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI0MDY4Ng==", "bodyText": "Should really be isSortNeeded.", "url": "https://github.com/splicemachine/spliceengine/pull/3153#discussion_r372240686", "createdAt": "2020-01-29T08:17:24Z", "author": {"login": "jaceklaskowski"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/compile/RequiredRowOrdering.java", "diffHunk": "@@ -44,83 +44,87 @@\n  */\n public interface RequiredRowOrdering\n {\n-\tint SORT_REQUIRED = 1;\n-\tint ELIMINATE_DUPS = 2;\n-\tint NOTHING_REQUIRED = 3;\n+    int SORT_REQUIRED = 1;\n+    int ELIMINATE_DUPS = 2;\n+    int NOTHING_REQUIRED = 3;\n \n-\t/**\n-\t * Tell whether sorting is required for this RequiredRowOrdering,\n-\t * given a RowOrdering.\n-\t *\n-\t * @param rowOrdering\tThe order of rows in question\n-\t * @param optimizableList\tThe current join order being considered by \n-\t *    the optimizer. We need to look into this to determine if the outer\n-\t *    optimizables are single row resultset if the order by column is\n-\t *    on an inner optimizable and that inner optimizable is not a one\n-\t *    row resultset. DERBY-3926\n-\t *\n-\t * @return\tSORT_REQUIRED if sorting is required,\n-\t *\t\t\tELIMINATE_DUPS if no sorting is required but duplicates\n-\t *\t\t\t\t\t\t\tmust be eliminated (i.e. the rows are in\n-\t *\t\t\t\t\t\t\tthe right order but there may be duplicates),\n-\t *\t\t\tNOTHING_REQUIRED is no operation is required\n-\t *\n-\t * @exception StandardException\t\tThrown on error\n-\t */\n-\tint sortRequired(RowOrdering rowOrdering, OptimizableList optimizableList)  throws StandardException;\n+    /**\n+     * Tell whether sorting is required for this RequiredRowOrdering,\n+     * given a RowOrdering.\n+     *\n+     * @param rowOrdering    The order of rows in question\n+     * @param optimizableList    The current join order being considered by\n+     *    the optimizer. We need to look into this to determine if the outer\n+     *    optimizables are single row resultset if the order by column is\n+     *    on an inner optimizable and that inner optimizable is not a one\n+     *    row resultset. DERBY-3926\n+     *\n+     * @return    SORT_REQUIRED if sorting is required,\n+     *            ELIMINATE_DUPS if no sorting is required but duplicates\n+     *                            must be eliminated (i.e. the rows are in\n+     *                            the right order but there may be duplicates),\n+     *            NOTHING_REQUIRED is no operation is required\n+     *\n+     * @exception StandardException        Thrown on error\n+     */\n+    int sortRequired(RowOrdering rowOrdering, OptimizableList optimizableList)  throws StandardException;\n \n-\t/**\n-\t * Tell whether sorting is required for this RequiredRowOrdering,\n-\t * given a RowOrdering representing a partial join order, and\n-\t * a bit map telling what tables are represented in the join order.\n-\t * This is useful for reducing the number of cases the optimizer\n-\t * has to consider.\n-\t *\n-\t * @param rowOrdering\tThe order of rows in the partial join order\n-\t * @param tableMap\t\tA bit map of the tables in the partial join order\n-\t * @param optimizableList\tThe current join order being considered by \n-\t *    the optimizer. We need to look into this to determine if the outer\n-\t *    optimizables are single row resultset if the order by column is\n-\t *    on an inner optimizable and that inner optimizable is not a one\n-\t *    row resultset. DERBY-3926\n-\t *\n-\t * @return\tSORT_REQUIRED if sorting is required,\n-\t *\t\t\tELIMINATE_DUPS if no sorting is required by duplicates\n-\t *\t\t\t\t\t\t\tmust be eliminated (i.e. the rows are in\n-\t *\t\t\t\t\t\t\tthe right order but there may be duplicates),\n-\t *\t\t\tNOTHING_REQUIRED is no operation is required\n-\t *\n-\t * @exception StandardException\t\tThrown on error\n-\t */\n-\tint sortRequired(RowOrdering rowOrdering,JBitSet tableMap,OptimizableList optimizableList) throws StandardException;\n+    /**\n+     * Tell whether sorting is required for this RequiredRowOrdering,\n+     * given a RowOrdering representing a partial join order, and\n+     * a bit map telling what tables are represented in the join order.\n+     * This is useful for reducing the number of cases the optimizer\n+     * has to consider.\n+     *\n+     * @param rowOrdering    The order of rows in the partial join order\n+     * @param tableMap        A bit map of the tables in the partial join order\n+     * @param optimizableList    The current join order being considered by\n+     *    the optimizer. We need to look into this to determine if the outer\n+     *    optimizables are single row resultset if the order by column is\n+     *    on an inner optimizable and that inner optimizable is not a one\n+     *    row resultset. DERBY-3926\n+     *\n+     * @return    SORT_REQUIRED if sorting is required,\n+     *            ELIMINATE_DUPS if no sorting is required by duplicates\n+     *                            must be eliminated (i.e. the rows are in\n+     *                            the right order but there may be duplicates),\n+     *            NOTHING_REQUIRED is no operation is required\n+     *\n+     * @exception StandardException        Thrown on error\n+     */\n+    int sortRequired(RowOrdering rowOrdering,JBitSet tableMap,OptimizableList optimizableList) throws StandardException;\n \n-\t/**\n-\t * Estimate the cost of doing a sort for this row ordering, given\n-\t * the number of rows to be sorted.  This does not take into account\n-\t * whether the sort is really needed.  It also estimates the number of\n-\t * result rows.\n-\t *\n-\t * @param rowOrdering\t\t\tThe ordering of the input rows\n-\t *\n-\t * @exception StandardException\t\tThrown on error\n-\t */\n-\tvoid estimateCost(Optimizer optimizer, RowOrdering rowOrdering, CostEstimate baseCost, CostEstimate sortCost) throws StandardException;\n+    /**\n+     * Estimate the cost of doing a sort for this row ordering, given\n+     * the number of rows to be sorted.  This does not take into account\n+     * whether the sort is really needed.  It also estimates the number of\n+     * result rows.\n+     *\n+     * @param rowOrdering       The ordering of the input rows\n+     *\n+     * @exception StandardException        Thrown on error\n+     */\n+    void estimateCost(Optimizer optimizer,\n+                      RowOrdering rowOrdering,\n+                      CostEstimate baseCost,\n+                      CostEstimate sortCost)\n+            throws StandardException;\n \n-\t/**\n-\t * Indicate that a sort is necessary to fulfill this required ordering.\n-\t * This method may be called many times during a single optimization.\n-\t */\n-\tvoid sortNeeded();\n+    /**\n+     * Indicate that a sort is necessary to fulfill this required ordering.\n+     * This method may be called many times during a single optimization.\n+     */\n+    void sortNeeded();\n \n-\t/**\n-\t * Indicate that a sort is *NOT* necessary to fulfill this required\n-\t * ordering.  This method may be called many times during a single\n-\t * optimization.\n-\t */\n-\tvoid sortNotNeeded();\n+    /**\n+     * Indicate that a sort is *NOT* necessary to fulfill this required\n+     * ordering.  This method may be called many times during a single\n+     * optimization.\n+     */\n+    void sortNotNeeded();\n \n-\t/**\n-\t * @return Whether or not a sort is needed.\n-\t */\n-\tboolean getSortNeeded();\n+    /**\n+     * @return Whether or not a sort is needed.\n+     */\n+    boolean getSortNeeded();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c462e49864c7f1b3a825a3d24371282b9738edd"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5OTI0OTc1", "url": "https://github.com/splicemachine/spliceengine/pull/3153#pullrequestreview-349924975", "createdAt": "2020-01-29T08:18:04Z", "commit": {"oid": "6c462e49864c7f1b3a825a3d24371282b9738edd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwODoxODowNFrOFi_yLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwODoxODowNFrOFi_yLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI0MDk0MA==", "bodyText": "Still one space needed", "url": "https://github.com/splicemachine/spliceengine/pull/3153#discussion_r372240940", "createdAt": "2020-01-29T08:18:04Z", "author": {"login": "jaceklaskowski"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromTable.java", "diffHunk": "@@ -236,10 +235,10 @@ public boolean nextAccessPath(Optimizer optimizer,\n         }\n         ap.setMissingHashKeyOK(false);\n \n-\t\t/*\n-\t\t** Tell the RowOrdering about columns that are equal to constant\n-\t\t** expressions.\n-\t\t*/\n+        /*\n+        ** Tell the RowOrdering about columns that are equal to constant", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c462e49864c7f1b3a825a3d24371282b9738edd"}, "originalPosition": 109}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "179d73e899bfb7cd316c87a18611cbb381284264", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/179d73e899bfb7cd316c87a18611cbb381284264", "committedDate": "2020-01-30T14:00:35Z", "message": "DB-9057 Support FORCED_CONTROL"}, "afterCommit": {"oid": "89da2a31d1a582eb0cea8d0f478e3c6d71197c08", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/89da2a31d1a582eb0cea8d0f478e3c6d71197c08", "committedDate": "2020-01-30T15:01:13Z", "message": "DB-9057 Support FORCED_CONTROL"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89da2a31d1a582eb0cea8d0f478e3c6d71197c08", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/89da2a31d1a582eb0cea8d0f478e3c6d71197c08", "committedDate": "2020-01-30T15:01:13Z", "message": "DB-9057 Support FORCED_CONTROL"}, "afterCommit": {"oid": "7e751c133c93930c52de10b478c5568b58d2121f", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/7e751c133c93930c52de10b478c5568b58d2121f", "committedDate": "2020-01-30T15:15:31Z", "message": "DB-9057 Support FORCED_CONTROL"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d09b04b3a19e07b502ff384b5b210a5c05a305f", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/6d09b04b3a19e07b502ff384b5b210a5c05a305f", "committedDate": "2020-02-01T23:35:36Z", "message": "DB-9057 Clean rowOrdering in Optimizer.prepForNextRound"}, "afterCommit": {"oid": "1ed88ce2ee6d69639a18d7dbab91f031036590fe", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/1ed88ce2ee6d69639a18d7dbab91f031036590fe", "committedDate": "2020-02-03T16:08:32Z", "message": "DB-9057 Separate Control and Spark costing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d2f95451126c3f049a4258d0014065ef9264deda", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/d2f95451126c3f049a4258d0014065ef9264deda", "committedDate": "2020-02-04T17:23:12Z", "message": "DB-9057 Introduce finer granularity in DataSetProcessorType"}, "afterCommit": {"oid": "1a5268f75d60ebb1d51bf3c4fed8c48ab210dc8d", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/1a5268f75d60ebb1d51bf3c4fed8c48ab210dc8d", "committedDate": "2020-02-04T20:49:31Z", "message": "DB-9057 Introduce finer granularity in DataSetProcessorType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73e203a07c0c981170f8ae556ee8d7439748882d", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/73e203a07c0c981170f8ae556ee8d7439748882d", "committedDate": "2020-02-04T23:17:53Z", "message": "DB-9057 Separate Control and Spark costing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a60e7d2e0b7b747f39e07d7fbe0b9d787a304260", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/a60e7d2e0b7b747f39e07d7fbe0b9d787a304260", "committedDate": "2020-02-04T23:17:53Z", "message": "DB-9057 set control/spark in opt phase of Insert/Delete"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a5268f75d60ebb1d51bf3c4fed8c48ab210dc8d", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/1a5268f75d60ebb1d51bf3c4fed8c48ab210dc8d", "committedDate": "2020-02-04T20:49:31Z", "message": "DB-9057 Introduce finer granularity in DataSetProcessorType"}, "afterCommit": {"oid": "ef859861d31338fedcee1487566a29c5ff8a7cee", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/ef859861d31338fedcee1487566a29c5ff8a7cee", "committedDate": "2020-02-04T23:29:46Z", "message": "DB-9057 Introduce finer granularity in DataSetProcessorType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "feaa5c85ae7a720e370a09394e711e11dbb0544c", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/feaa5c85ae7a720e370a09394e711e11dbb0544c", "committedDate": "2020-02-05T12:24:48Z", "message": "DB-9057 Introduce finer granularity in DataSetProcessorType"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef859861d31338fedcee1487566a29c5ff8a7cee", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/ef859861d31338fedcee1487566a29c5ff8a7cee", "committedDate": "2020-02-04T23:29:46Z", "message": "DB-9057 Introduce finer granularity in DataSetProcessorType"}, "afterCommit": {"oid": "feaa5c85ae7a720e370a09394e711e11dbb0544c", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/feaa5c85ae7a720e370a09394e711e11dbb0544c", "committedDate": "2020-02-05T12:24:48Z", "message": "DB-9057 Introduce finer granularity in DataSetProcessorType"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTAxMDEz", "url": "https://github.com/splicemachine/spliceengine/pull/3153#pullrequestreview-354101013", "createdAt": "2020-02-05T22:59:17Z", "commit": {"oid": "feaa5c85ae7a720e370a09394e711e11dbb0544c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjo1OToxN1rOFmKIKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMToyNDo1NVrOFmMtYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU1NjEzNw==", "bodyText": "I think the call to verifyProperties() should be moved down to the for loop at line 203, as the call here only touches the tables in the top level Select, but not the tables in the nested SELECT nodes.", "url": "https://github.com/splicemachine/spliceengine/pull/3153#discussion_r375556137", "createdAt": "2020-02-05T22:59:17Z", "author": {"login": "yxia92"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/DMLStatementNode.java", "diffHunk": "@@ -166,11 +167,62 @@ public void optimizeStatement() throws StandardException {\n         // prune tree based on unsat condition\n         accept(new TreePruningVisitor());\n \n-        resultSet = resultSet.optimize(getDataDictionary(), null, 1.0d);\n+\n+\n+        // We should try to cost control first, and fallback to spark if necessary\n+        DataSetProcessorType connectionType = getLanguageConnectionContext().getDataSetProcessorType();\n+        getCompilerContext().setDataSetProcessorType(connectionType);\n+\n+        if (shouldRunControl(resultSet)) {\n+            resultSet = resultSet.optimize(getDataDictionary(), null, 1.0d, false);\n+        }\n+\n+        if (shouldRunSpark(resultSet)) {\n+            CollectNodesVisitor cnv = new CollectNodesVisitor(FromTable.class);\n+            resultSet.accept(cnv);\n+            for (Object obj : cnv.getList()) {\n+                FromTable ft = (FromTable) obj;\n+                ft.resetAccessPaths();\n+            }\n+            resultSet = resultSet.optimize(getDataDictionary(), null, 1.0d, true);\n+        }\n+\n         resultSet = resultSet.modifyAccessPaths();\n \n     }\n \n+    private boolean shouldRunControl(ResultSetNode resultSet) throws StandardException {\n+        DataSetProcessorType type = getCompilerContext().getDataSetProcessorType();\n+        if (type.isForced()) {\n+            return (!type.isSpark());\n+        }\n+        resultSet.getFromList().verifyProperties(getDataDictionary());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feaa5c85ae7a720e370a09394e711e11dbb0544c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4NjE1OQ==", "bodyText": "I think we don't need to read dataSetProcessorType from the FromBaseTable, instead, we can directly use  ((FromBaseTable) innerTable).getCompilerContext().getDataSetProcessorType(), as using Spark or not is pre-set now.", "url": "https://github.com/splicemachine/spliceengine/pull/3153#discussion_r375586159", "createdAt": "2020-02-06T00:38:16Z", "author": {"login": "yxia92"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/compile/CrossJoinStrategy.java", "diffHunk": "@@ -203,9 +203,10 @@ public boolean feasible(Optimizable innerTable,\n         boolean isOneRow = false;\n         boolean isHinted = currentAccessPath.isHintedJoinStrategy();\n         if (innerTable instanceof FromBaseTable) {\n-            CompilerContext.DataSetProcessorType dspt = ((FromBaseTable) innerTable).getdataSetProcessorTypeForAccessPath(currentAccessPath);\n-            isSpark = ((FromBaseTable)innerTable).isSpark(dspt);\n-            isForcedControl = dspt.name().equals(\"FORCED_CONTROL\");\n+            DataSetProcessorType dspt = ((FromBaseTable) innerTable).getDataSetProcessorTypeForAccessPath(currentAccessPath);\n+            dspt.combine(((FromBaseTable) innerTable).getCompilerContext().getDataSetProcessorType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feaa5c85ae7a720e370a09394e711e11dbb0544c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5ODQzMw==", "bodyText": "If we skip the check of dataSetProcessorType() in LanguageConnectionContext, we may not be able to honor the session level useSpark hint for some special cases. For example:\nsplice> connect 'jdbc:splice://localhost:1527/splicedb;user=splice;password=admin;useSpark=true' as spark_con;\nexplain select name from new com.splicemachine.derby.vti.SchemaFilterVTI() as b (NAME VARCHAR(128));\n\nThe explain will show Spark, but the query is actually sent to control. This is because we didn't call ActivationClassBuilder.setDataSetProcessorType() for this case. As a general solution, maybe we should calll this function in ScrollInsensitiveResultSetNode.generate().", "url": "https://github.com/splicemachine/spliceengine/pull/3153#discussion_r375598433", "createdAt": "2020-02-06T01:24:55Z", "author": {"login": "yxia92"}, "path": "hbase_sql/src/main/java/com/splicemachine/derby/lifecycle/CostChoosingDataSetProcessorFactory.java", "diffHunk": "@@ -75,23 +77,10 @@ public DataSetProcessor chooseProcessor(@Nullable Activation activation,@Nullabl\n         if (op.isOlapServer())\n             return new SparkDataSetProcessor();\n \n-        switch(activation.getLanguageConnectionContext().getDataSetProcessorType()){\n-            case FORCED_CONTROL:\n-                return new ControlDataSetProcessor(driver.getTxnSupplier(), driver.getTransactor(), driver.getOperationFactory());\n-            case FORCED_SPARK:\n-                return new SparkDataSetProcessor();\n-            default:\n-                break;\n-        }\n-        switch (((BaseActivation)activation).datasetProcessorType()) {\n-            case FORCED_SPARK:\n-            case SPARK:\n-                return new SparkDataSetProcessor();\n-            case FORCED_CONTROL:\n-                return new ControlDataSetProcessor(driver.getTxnSupplier(), driver.getTransactor(), driver.getOperationFactory());\n-            case DEFAULT_CONTROL:\n-            default:\n-                return new ControlDataSetProcessor(driver.getTxnSupplier(), driver.getTransactor(), driver.getOperationFactory());\n+        if (((BaseActivation)activation).datasetProcessorType().isSpark()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feaa5c85ae7a720e370a09394e711e11dbb0544c"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "278058918637ea85d89e4c1e51f01deb588d4d06", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/278058918637ea85d89e4c1e51f01deb588d4d06", "committedDate": "2020-02-06T11:05:05Z", "message": "DB-9057 Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a588914332ca787a0ddd336d8ea8bf44e39a8534", "author": {"user": {"login": "arnaud-splice", "name": "Arnaud Lacurie"}}, "url": "https://github.com/splicemachine/spliceengine/commit/a588914332ca787a0ddd336d8ea8bf44e39a8534", "committedDate": "2020-02-06T11:09:56Z", "message": "Merge branch 'master' into DB-9057"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NTU2MzE0", "url": "https://github.com/splicemachine/spliceengine/pull/3153#pullrequestreview-354556314", "createdAt": "2020-02-06T15:46:55Z", "commit": {"oid": "a588914332ca787a0ddd336d8ea8bf44e39a8534"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MTIzMzAx", "url": "https://github.com/splicemachine/spliceengine/pull/3153#pullrequestreview-355123301", "createdAt": "2020-02-07T12:28:05Z", "commit": {"oid": "a588914332ca787a0ddd336d8ea8bf44e39a8534"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 945, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}