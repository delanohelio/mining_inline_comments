{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MjU4MDg0", "number": 3777, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToxNjozMlrOENPOtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToxNjozMlrOENPOtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzE2NDcxOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/CreateTableIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMToxNjozMlrOGvzmpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzoyNzoxMVrOGv_fUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4MTczNQ==", "bodyText": "Please use lower case method names", "url": "https://github.com/splicemachine/spliceengine/pull/3777#discussion_r452781735", "createdAt": "2020-07-10T11:16:32Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/CreateTableIT.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.splicemachine.derby.impl.sql.execute.operations;\n+\n+import com.splicemachine.derby.test.framework.SpliceSchemaWatcher;\n+import com.splicemachine.derby.test.framework.SpliceWatcher;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.junit.Assert;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.Assert.fail;\n+\n+public class CreateTableIT {\n+    private static final String SCHEMA = CreateTableIT.class.getSimpleName().toUpperCase();\n+\n+    @ClassRule\n+    public final static SpliceWatcher watcher = new SpliceWatcher(SCHEMA);\n+\n+    @ClassRule\n+    public static SpliceSchemaWatcher spliceSchemaWatcher = new SpliceSchemaWatcher(SCHEMA);\n+\n+    static int counter = 0;\n+    private static String GenerateTableName() {\n+        return \"T\" + counter++;\n+    }\n+\n+    private void ShouldContains(String tableName, List<List<Integer>> rows) throws SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2b92ce17b8781ccbde601d1ae634f1fb0b5424a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk3NjQ2Nw==", "bodyText": "Thanks, I fixed them.", "url": "https://github.com/splicemachine/spliceengine/pull/3777#discussion_r452976467", "createdAt": "2020-07-10T17:27:11Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/CreateTableIT.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.splicemachine.derby.impl.sql.execute.operations;\n+\n+import com.splicemachine.derby.test.framework.SpliceSchemaWatcher;\n+import com.splicemachine.derby.test.framework.SpliceWatcher;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.junit.Assert;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.Assert.fail;\n+\n+public class CreateTableIT {\n+    private static final String SCHEMA = CreateTableIT.class.getSimpleName().toUpperCase();\n+\n+    @ClassRule\n+    public final static SpliceWatcher watcher = new SpliceWatcher(SCHEMA);\n+\n+    @ClassRule\n+    public static SpliceSchemaWatcher spliceSchemaWatcher = new SpliceSchemaWatcher(SCHEMA);\n+\n+    static int counter = 0;\n+    private static String GenerateTableName() {\n+        return \"T\" + counter++;\n+    }\n+\n+    private void ShouldContains(String tableName, List<List<Integer>> rows) throws SQLException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4MTczNQ=="}, "originalCommit": {"oid": "e2b92ce17b8781ccbde601d1ae634f1fb0b5424a"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3164, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}