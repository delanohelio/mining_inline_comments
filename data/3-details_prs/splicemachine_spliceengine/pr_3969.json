{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MzI0NDQ5", "number": 3969, "title": "DB-10025 Fix issues that cause a full IT run to fail.", "bodyText": "The following issues are fixed:\n\n\nThe hbase balancer, which moves regions between region servers to balance out the load incurs a lot of memory pressure and heavy network traffic because it is configured to run every 5 seconds.  Sometimes it is too much for the colo network and servers to handle, resulting in OOM or network timeouts to be hit, which can bring down splice if it's in a critical region like getting a timestamp.  The solution is to bump up hbase.balancer.period and hbase.balancer.statusPeriod to a high value for standalone only, to eliminate this overhead.  To a lesser degree status messages between master and region server add overhead, so hbase.regionserver.msginterval is increased from 1 second to 15 seconds.\n\n\nCreating a new object via Optional.of(this) in Splice coprocessors and endpoints every time getRegionObserver is called is expensive, so this is changed to only create one of these objects.\n\n\nSpliceSpark.getSessionUnsafe would sometimes try to re-use an already closed spark session or open more than one spark context, leading to errors.  The solution is to use thread-local sessions like the 'getSession' method, and detect when session re-initialization is required (if a previous user closed it).  If spark.driver.allowMultipleContexts is true, then a new spark context is created.\n\n\nSICompactionStateMutate, which purges tombstones during compaction, can produce more than one FIRST_WRITE_TOKEN when --splice-properties skipConflictDetection=true is used, or more than one DELETE_RIGHT_AFTER_FIRST_WRITE_TOKEN when the first write is actually a DELETE.  This can cause a DroppedSnapshotException during compaction of the bad region, forcing WAL replay and region server shutdown.  The solution is to avoid creating a FIRST_WRITE_TOKEN in either of these cases, and it will now only be created for insert or upsert.  As a safety precaution, for all of the failed assertion cases, code is added to bypass the tombstone purge for that key, since assertions tend to be disabled on clusters (we don't want to silently ignore the problem since purging the wrong thing could corrupt data).  Also, in SITransactor, possibleConflicts isn't always null when there are no key matches.  Sometimes it is returned as an empty DataResult.  This also indicates a FIRST_WRITE scenario, so the logic is update to check if (possibleConflicts == null || possibleConflicts.isEmpty()).\n\n\nsplicemachineContext.tableExists is very expensive and seems to sometimes hang.  DefaultSourceIT and NativeTransformationsIT are updated to avoid calling it so many times.  Perhaps a Jira should be opened to look into it.\n\n\nTestContext.scala is coded to open a different spark context on every instantiation, which sporadically hits an error message that only one spark context is allowed (use of sc = new SparkContext(conf) is deprecated.  Instead we're supposed to use SparkSession.newSession, passing the pre-existing SparkContext, if we want a new session.  This is handled in SpliceSpark.getSessionUnsafe.\n\n\nNativeSparkJoinWithInequalityPredsIT has too many tests defined, and can take up to an hour and a half to run.  Many of the tests aren't testing the new join functionality, but predicate evaluation, and are redundant.  The test is greatly pared down so that it runs in about a minute.\n\n\nDDLWatchRefresher.assignDDLDemarcationPoint runs at the completion of a DDL statement, including a restore statement, and saves the transaction id of the DDL statement as a cutoff point to tell which transaction can use the DDL cache, and which need to be looked up in the data dictionary.  This method has the assertion: 'assert txn.allowsWrites()', which looks up the transaction in splice:SPLICE_TXN if it does not exist in cache.  A full database restore may wipe out and restore all transactions in splice:SPLICE_TXN, so if the DDL txnId can't be found in cache, we try to look it up in plice:SPLICE_TXN.  Since it has been erased by the restore, we crash.  The solution is to avoid this assertion for restore statements.", "createdAt": "2020-08-11T19:58:34Z", "url": "https://github.com/splicemachine/spliceengine/pull/3969", "merged": true, "mergeCommit": {"oid": "93669b4aada10d44972ac178805128c949260ac9"}, "closed": true, "closedAt": "2020-08-21T02:18:36Z", "author": {"login": "msirek"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-VF6VgBqjM2NDk5NDAzOTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdA6pggAH2gAyNDY2MzI0NDQ5OjM5Mzg1ZjY2YjE1MGI1M2QxNjE3NmYzNWYxNzRjMzViYjlmMmM3YzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "addeda42fd7473b47f41ff8a2fddb2ad2b8a13e2", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/addeda42fd7473b47f41ff8a2fddb2ad2b8a13e2", "committedDate": "2020-08-13T00:40:33Z", "message": "Fix SparkExplainIT and spotbugs."}, "afterCommit": {"oid": "3f8103094d5e34e941a6f05afef7bd78160df2d6", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/3f8103094d5e34e941a6f05afef7bd78160df2d6", "committedDate": "2020-08-13T00:43:06Z", "message": "Fix SparkExplainIT and spotbugs."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f8103094d5e34e941a6f05afef7bd78160df2d6", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/3f8103094d5e34e941a6f05afef7bd78160df2d6", "committedDate": "2020-08-13T00:43:06Z", "message": "Fix SparkExplainIT and spotbugs."}, "afterCommit": {"oid": "d5f170f6a9fcfae6ee494d4fc7aa104382b069d9", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/d5f170f6a9fcfae6ee494d4fc7aa104382b069d9", "committedDate": "2020-08-13T01:23:39Z", "message": "DB-10025 Fix SparkExplainIT and spotbugs."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "31f82476a471dda909d26116553b1a7a8704749d", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/31f82476a471dda909d26116553b1a7a8704749d", "committedDate": "2020-08-13T07:56:13Z", "message": "DB-10025 Ignore PinTableIT."}, "afterCommit": {"oid": "fa47b88ff181212c6e4ec3d9f9d9ffc3edb01d45", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/fa47b88ff181212c6e4ec3d9f9d9ffc3edb01d45", "committedDate": "2020-08-14T09:00:01Z", "message": "DB-10025 Ignore PinTableIT."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NDk4NzAz", "url": "https://github.com/splicemachine/spliceengine/pull/3969#pullrequestreview-467498703", "createdAt": "2020-08-14T11:18:42Z", "commit": {"oid": "fa47b88ff181212c6e4ec3d9f9d9ffc3edb01d45"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMToxODo0M1rOHAw-zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMTo0MDowMlrOHAxg3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2NDU1OQ==", "bodyText": "Can we get rid of spark.driver.allowMultipleContexts in tests and remove this special case?", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r470564559", "createdAt": "2020-08-14T11:18:43Z", "author": {"login": "dgomezferro"}, "path": "hbase_sql/src/main/java/com/splicemachine/derby/impl/SpliceSpark.java", "diffHunk": "@@ -108,11 +111,30 @@ public static synchronized SparkSession getSessionUnsafe() {\n             } catch (IOException e) {\n                 throw new RuntimeException(e);\n             }\n-            System.exit(0);\n-            session = initializeSparkSession();\n+            if (isOlapWorker)\n+                System.exit(0);\n+            sessionToUse = session = initializeSparkSession();\n             ctx =  new JavaSparkContext(session.sparkContext());\n         }\n-        return session;\n+        else {\n+            if (sessionToUse == null || needsReinitialization) {\n+                String allowMultipleContextsString = null;\n+                try {\n+                    allowMultipleContextsString = session.conf().get(\"spark.driver.allowMultipleContexts\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa47b88ff181212c6e4ec3d9f9d9ffc3edb01d45"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2NDk4Nw==", "bodyText": "Please add a LOG here so it's clear why we are shutting down", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r470564987", "createdAt": "2020-08-14T11:19:50Z", "author": {"login": "dgomezferro"}, "path": "hbase_sql/src/main/java/com/splicemachine/derby/impl/SpliceSpark.java", "diffHunk": "@@ -108,11 +111,30 @@ public static synchronized SparkSession getSessionUnsafe() {\n             } catch (IOException e) {\n                 throw new RuntimeException(e);\n             }\n-            System.exit(0);\n-            session = initializeSparkSession();\n+            if (isOlapWorker)\n+                System.exit(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa47b88ff181212c6e4ec3d9f9d9ffc3edb01d45"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2NjQyMw==", "bodyText": "Can you remove the stack trace from the comment? I think it makes sense to have it on the JIRA but not here (feel free to keep the explanation and a pointer to the JIRA for instance)", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r470566423", "createdAt": "2020-08-14T11:23:31Z", "author": {"login": "dgomezferro"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/ddl/DDLWatchRefresher.java", "diffHunk": "@@ -214,7 +216,30 @@ private void clearFinishedChanges(Collection<String> children,Collection<DDLWatc\n     private void assignDDLDemarcationPoint(DDLChange ddlChange) {\n         try {\n             TxnView txn = new LazyTxnView(ddlChange.getTxnId(),txnSupplier,exceptionFactory);\n-            assert txn.allowsWrites(): \"DDLChange \"+ddlChange+\" does not have a writable transaction\";\n+            // A full Restore operation overwrite SPLICE_TXN, so the transaction used by the restore\n+            // may not be found.  Avoid the assertion to avoid crashing, e.g.,\n+            // 2020-08-11 18:28:11,785 (ZooKeeperDDLWatcherRefresher) ERROR [c.s.d.d.AsynchronousDDLWatcher] - Failed to refresh ddl\n+            //java.lang.RuntimeException: com.splicemachine.si.api.txn.TransactionMissing: Couldn't resolve transaction with id 81981952", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa47b88ff181212c6e4ec3d9f9d9ffc3edb01d45"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2ODE2NQ==", "bodyText": "Does this make sense? We'd have to set those before instantiating the session, and this is already after that point, right?", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r470568165", "createdAt": "2020-08-14T11:27:51Z", "author": {"login": "dgomezferro"}, "path": "splice_spark/src/test/scala/com/splicemachine/spark/splicemachine/TestContext.scala", "diffHunk": "@@ -169,9 +170,14 @@ trait TestContext extends BeforeAndAfterAll { self: Suite =>\n   )\n \n   override def beforeAll() {\n-    sc = new SparkContext(conf)\n-    SpliceSpark.setContext(sc)\n-    spark = SparkSession.builder.config(conf).getOrCreate\n+    spark = SpliceSpark.getSessionUnsafe\n+    sqlContext = spark.sqlContext\n+    spark.conf.set(\"spark.master\", \"local[*]\")\n+    spark.conf.set(\"spark.app.name\", \"test\")\n+    spark.conf.set(\"spark.ui.enabled\", \"false\")\n+    spark.conf.set(\"spark.app.id\", appID)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa47b88ff181212c6e4ec3d9f9d9ffc3edb01d45"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU3MzA1Nw==", "bodyText": "Can you move all these checks to a separate method to bring into focus the logic of the method?", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r470573057", "createdAt": "2020-08-14T11:39:35Z", "author": {"login": "dgomezferro"}, "path": "hbase_storage/src/main/java/com/splicemachine/si/impl/server/SICompactionStateMutate.java", "diffHunk": "@@ -71,11 +72,36 @@ private boolean isSorted(List<Cell> list) {\n     }\n \n     public void mutate(List<Cell> rawList, List<TxnView> txns, List<Cell> results) throws IOException {\n-        assert dataToReturn.isEmpty();\n-        assert results.isEmpty();\n-        assert maxTombstone == null;\n-        assert !LOG.isDebugEnabled() || isSorted(rawList) : \"CompactionStateMutate: rawList not sorted\";\n-        assert rawList.size() == txns.size();\n+        final boolean dataToReturnIsEmpty = dataToReturn.isEmpty();\n+        final boolean resultsIsEmpty = results.isEmpty();\n+        final boolean maxTombstoneIsNull = maxTombstone == null;\n+        final boolean rawListAndTxnListSameSize = rawList.size() == txns.size();\n+        final boolean debugSortCheck = !LOG.isDebugEnabled() || isSorted(rawList);\n+        if (!debugSortCheck) {\n+            bypassPurge = true;\n+            LOG.warn(\"Skipping tombstone purge.  rawList is not sorted.\");\n+        }\n+        if (!dataToReturnIsEmpty) {\n+            bypassPurge = true;\n+            LOG.warn(\"Skipping tombstone purge.  dataToReturn is not properly initialized.\");\n+        }\n+        if (!resultsIsEmpty) {\n+            bypassPurge = true;\n+            LOG.warn(\"Skipping tombstone purge.  results list not properly initialized.\");\n+        }\n+        if (!maxTombstoneIsNull) {\n+            bypassPurge = true;\n+            LOG.warn(\"Skipping tombstone purge.  maxTombstone not properly initialized to null.\");\n+        }\n+        if (!rawListAndTxnListSameSize) {\n+            bypassPurge = true;\n+            LOG.warn(\"Skipping tombstone purge.  rawList and txn list not the same length.\");\n+        }\n+        assert dataToReturnIsEmpty;\n+        assert resultsIsEmpty;\n+        assert maxTombstoneIsNull;\n+        assert debugSortCheck : \"CompactionStateMutate: rawList not sorted\";\n+        assert rawListAndTxnListSameSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa47b88ff181212c6e4ec3d9f9d9ffc3edb01d45"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU3MzI3Nw==", "bodyText": "Is this something that happens sometimes or just defensive programming?", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r470573277", "createdAt": "2020-08-14T11:40:02Z", "author": {"login": "dgomezferro"}, "path": "hbase_storage/src/main/java/com/splicemachine/si/impl/server/SICompactionStateMutate.java", "diffHunk": "@@ -71,11 +72,36 @@ private boolean isSorted(List<Cell> list) {\n     }\n \n     public void mutate(List<Cell> rawList, List<TxnView> txns, List<Cell> results) throws IOException {\n-        assert dataToReturn.isEmpty();\n-        assert results.isEmpty();\n-        assert maxTombstone == null;\n-        assert !LOG.isDebugEnabled() || isSorted(rawList) : \"CompactionStateMutate: rawList not sorted\";\n-        assert rawList.size() == txns.size();\n+        final boolean dataToReturnIsEmpty = dataToReturn.isEmpty();\n+        final boolean resultsIsEmpty = results.isEmpty();\n+        final boolean maxTombstoneIsNull = maxTombstone == null;\n+        final boolean rawListAndTxnListSameSize = rawList.size() == txns.size();\n+        final boolean debugSortCheck = !LOG.isDebugEnabled() || isSorted(rawList);\n+        if (!debugSortCheck) {\n+            bypassPurge = true;\n+            LOG.warn(\"Skipping tombstone purge.  rawList is not sorted.\");\n+        }\n+        if (!dataToReturnIsEmpty) {\n+            bypassPurge = true;\n+            LOG.warn(\"Skipping tombstone purge.  dataToReturn is not properly initialized.\");\n+        }\n+        if (!resultsIsEmpty) {\n+            bypassPurge = true;\n+            LOG.warn(\"Skipping tombstone purge.  results list not properly initialized.\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa47b88ff181212c6e4ec3d9f9d9ffc3edb01d45"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39205abe0fae937044b4c2af77cc9e14afa315cc", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/39205abe0fae937044b4c2af77cc9e14afa315cc", "committedDate": "2020-08-16T08:40:24Z", "message": "DB-10025 Improve stability of the ITs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1a8e9d26e424d3fcf14cf1461362cd62d3398e5", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/c1a8e9d26e424d3fcf14cf1461362cd62d3398e5", "committedDate": "2020-08-16T08:40:24Z", "message": "DB-10025 Avoid expensive operations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79df44c555b44a6d312023c43aa841e686608aaa", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/79df44c555b44a6d312023c43aa841e686608aaa", "committedDate": "2020-08-16T08:40:24Z", "message": "DB-10025 Identify empty keys in more cases in tombstone purging logic."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b76704cfbdc09d2c2c44957c6013848bc29e54a8", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/b76704cfbdc09d2c2c44957c6013848bc29e54a8", "committedDate": "2020-08-16T08:40:24Z", "message": "DB-10025 Don't add first write marker when skipping transaction conflict detection."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bccc93e96a14dcd2786e94363d0befbe49b077bd", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/bccc93e96a14dcd2786e94363d0befbe49b077bd", "committedDate": "2020-08-16T08:40:24Z", "message": "DB-10025 A first write marker should only flag an insert or upsert, not a delete."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d4e7c0b2a10675c258ad0d4f27eff3e6b67307a", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/5d4e7c0b2a10675c258ad0d4f27eff3e6b67307a", "committedDate": "2020-08-16T08:40:24Z", "message": "DB-10025 Avoid purging tombstones in problematic cases on a cluster."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e12b25f41b744fbf845416d35830d6681db51ca5", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/e12b25f41b744fbf845416d35830d6681db51ca5", "committedDate": "2020-08-16T08:40:24Z", "message": "DB-10025 Avoid crash on restore when the restore's txnId is not in cache."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f9bb6a2d29b220369f3c4f88226497b90479b7b", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/2f9bb6a2d29b220369f3c4f88226497b90479b7b", "committedDate": "2020-08-16T08:40:24Z", "message": "DB-10025 Fix NativeSparkJoinWithInequalityPredsIT."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d184962d58ed6126a45dffddd771dd7ce57a8ec", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/1d184962d58ed6126a45dffddd771dd7ce57a8ec", "committedDate": "2020-08-16T08:40:25Z", "message": "DB-10025 Fix SparkExplainIT and spotbugs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1520a4d2d276b569386b350f7e420fa511ef1718", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/1520a4d2d276b569386b350f7e420fa511ef1718", "committedDate": "2020-08-16T08:40:25Z", "message": "DB-10025 Ignore PinTableIT."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee6dde149f9b3355067637db18e13bcba9330e36", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/ee6dde149f9b3355067637db18e13bcba9330e36", "committedDate": "2020-08-16T08:40:25Z", "message": "DB-10025 Address review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d60151e397bd8b22339ecf6364d69a43c026f16", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/4d60151e397bd8b22339ecf6364d69a43c026f16", "committedDate": "2020-08-16T08:40:25Z", "message": "DB-10025 Fix SessionPropertyIT."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "373310bac46d91677f37ae31211861f5dbed2487", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/373310bac46d91677f37ae31211861f5dbed2487", "committedDate": "2020-08-16T08:40:25Z", "message": "DB-10025 Fix SessionPropertyIT, take 2."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5ebc5e95cccf10256f377eed123ec3f1ed3d12b", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/f5ebc5e95cccf10256f377eed123ec3f1ed3d12b", "committedDate": "2020-08-16T06:39:17Z", "message": "DB-10025 Fix SessionPropertyIT, take 2."}, "afterCommit": {"oid": "373310bac46d91677f37ae31211861f5dbed2487", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/373310bac46d91677f37ae31211861f5dbed2487", "committedDate": "2020-08-16T08:40:25Z", "message": "DB-10025 Fix SessionPropertyIT, take 2."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b39c1c40b153247b302ad5897b30a8e85a41d098", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/b39c1c40b153247b302ad5897b30a8e85a41d098", "committedDate": "2020-08-16T17:53:16Z", "message": "DB-10025 Speed up the parallel ITs with forking."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "237aeaeaed9b9470ed6dfe280f1d045a12f661fc", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/237aeaeaed9b9470ed6dfe280f1d045a12f661fc", "committedDate": "2020-08-16T18:45:45Z", "message": "DB-10025 Fix SessionPropertyIT, take 3."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5389c7a3a2872eab22ecfa596ad0982d370da7d", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/d5389c7a3a2872eab22ecfa596ad0982d370da7d", "committedDate": "2020-08-16T21:56:54Z", "message": "Revert \"DB-10025 Speed up the parallel ITs with forking.\"\n\nThis reverts commit b39c1c40b153247b302ad5897b30a8e85a41d098."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NjI1MzQ0", "url": "https://github.com/splicemachine/spliceengine/pull/3969#pullrequestreview-468625344", "createdAt": "2020-08-17T16:41:24Z", "commit": {"oid": "d5389c7a3a2872eab22ecfa596ad0982d370da7d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo0MToyNVrOHBwaDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo0MToyNVrOHBwaDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMzcyNA==", "bodyText": "More accurately, assertions are thrown during our IT runs as well.", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r471603724", "createdAt": "2020-08-17T16:41:25Z", "author": {"login": "arnaud-splice"}, "path": "hbase_storage/src/main/java/com/splicemachine/si/impl/server/SICompactionStateMutate.java", "diffHunk": "@@ -161,10 +206,24 @@ private void mutate(Cell element, TxnView txn) throws IOException {\n                 lastSeenAntiTombstone = element;\n                 break;\n             case FIRST_WRITE_TOKEN:\n+                // Assertions are only thrown on standalone.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5389c7a3a2872eab22ecfa596ad0982d370da7d"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNjQ1MTYx", "url": "https://github.com/splicemachine/spliceengine/pull/3969#pullrequestreview-471645161", "createdAt": "2020-08-20T14:01:28Z", "commit": {"oid": "d5389c7a3a2872eab22ecfa596ad0982d370da7d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77e5ad1bc16f7fdffc5ef613366f7116cb279833", "author": {"user": {"login": "jpanko1", "name": null}}, "url": "https://github.com/splicemachine/spliceengine/commit/77e5ad1bc16f7fdffc5ef613366f7116cb279833", "committedDate": "2020-08-20T20:53:34Z", "message": "Merge branch 'master' into IT_Stability"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxOTk1MTU0", "url": "https://github.com/splicemachine/spliceengine/pull/3969#pullrequestreview-471995154", "createdAt": "2020-08-20T21:21:58Z", "commit": {"oid": "77e5ad1bc16f7fdffc5ef613366f7116cb279833"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMDQ0MjI3", "url": "https://github.com/splicemachine/spliceengine/pull/3969#pullrequestreview-472044227", "createdAt": "2020-08-20T23:11:23Z", "commit": {"oid": "77e5ad1bc16f7fdffc5ef613366f7116cb279833"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMzoxMToyNFrOHEWPDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMzoxMToyNFrOHEWPDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMyMDY1Mg==", "bodyText": "We may want to keep assertions because they are fired during ITs and can catch bugs. In case they are disables on a cluster, handleSanity Checks can safely bypass purge.", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r474320652", "createdAt": "2020-08-20T23:11:24Z", "author": {"login": "jyuanca"}, "path": "hbase_storage/src/main/java/com/splicemachine/si/impl/server/SICompactionStateMutate.java", "diffHunk": "@@ -71,15 +72,43 @@ private boolean isSorted(List<Cell> list) {\n         return true;\n     }\n \n+    private void handleSanityChecks(List<Cell> results,\n+                                    List<Cell> rawList,\n+                                    List<TxnView> txns) {\n+        final boolean dataToReturnIsEmpty = dataToReturn.isEmpty();\n+        final boolean resultsIsEmpty = results.isEmpty();\n+        final boolean maxTombstoneIsNull = maxTombstone == null;\n+        final boolean rawListAndTxnListSameSize = rawList.size() == txns.size();\n+        final boolean debugSortCheck = !LOG.isDebugEnabled() || isSorted(rawList);\n+\n+        if (!debugSortCheck)\n+            setBypassPurgeWithWarning(\"CompactionStateMutate: rawList is not sorted.\");\n+        if (!dataToReturnIsEmpty)\n+            setBypassPurgeWithWarning(\"dataToReturn is not properly initialized.\");\n+        if (!resultsIsEmpty)\n+            setBypassPurgeWithWarning(\"results list not properly initialized.\");\n+        if (!maxTombstoneIsNull)\n+            setBypassPurgeWithWarning(\"maxTombstone not properly initialized to null.\");\n+        if (!rawListAndTxnListSameSize)\n+            setBypassPurgeWithWarning(\"rawList and txn list not the same length.\");\n+\n+        assert dataToReturnIsEmpty;\n+        assert resultsIsEmpty;\n+        assert maxTombstoneIsNull;\n+        assert debugSortCheck : \"CompactionStateMutate: rawList not sorted\";\n+        assert rawListAndTxnListSameSize;\n+    }\n+\n+    private void setBypassPurgeWithWarning(String warningMessage) {\n+        bypassPurge = true;\n+        LOG.warn(\"Skipping tombstone purge.  \" + warningMessage);\n+    }\n+\n     /***\n      * @return the size of all cells in the `rawList` parameter.\n      */\n     public long mutate(List<Cell> rawList, List<TxnView> txns, List<Cell> results) throws IOException {\n-        assert dataToReturn.isEmpty();\n-        assert results.isEmpty();\n-        assert maxTombstone == null;\n-        assert !LOG.isDebugEnabled() || isSorted(rawList) : \"CompactionStateMutate: rawList not sorted\";\n-        assert rawList.size() == txns.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e5ad1bc16f7fdffc5ef613366f7116cb279833"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39385f66b150b53d16176f35f174c35bb9f2c7c4", "author": {"user": {"login": "jpanko1", "name": null}}, "url": "https://github.com/splicemachine/spliceengine/commit/39385f66b150b53d16176f35f174c35bb9f2c7c4", "committedDate": "2020-08-21T01:37:04Z", "message": "Merge branch 'master' into IT_Stability"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1226, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}