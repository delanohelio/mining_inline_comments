{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NTM5NTQy", "number": 4555, "title": "DB-10525 FINAL TABLE Clause", "bodyText": "This implements the OLD TABLE / NEW TABLE / FINAL TABLE clause, similar to the following:\nhttps://www.ibm.com/support/knowledgecenter/SSEPGG_9.7.0/com.ibm.db2.luw.apdv.routines.doc/doc/c0011133.html\nExample:\ncreate table t1 (a int, b varchar(10));\ninsert into t1 values(1, 'a'),\n                      (2, 'a '),\n                      (3, 'ab');\nSELECT * FROM FINAL TABLE (update t1 set a = a+1);\nA          |B         \n---------------------- \n3          |a         \n4          |ab        \n2          |a      \n\nFix-Note\nThis implements a FROM FINAL TABLE clause as well as related FROM OLD TABLE and FROM NEW TABLE.\nFor example:\n\nSELECT * FROM FINAL TABLE (INSERT INTO t1 values (1,1));\n\nInside the parentheses we may have any INSERT, UPDATE or DELETE statement.\nThe rows which are inserted, updated or deleted are returned back to the user as part of the SELECT.  There may be a WHERE clause appended at the end, so that only a subset of the changed rows are returned, for example:\n\nSELECT * FROM FINAL TABLE (INSERT INTO t1 select * from t2) where c1 > 9;\n\nOLD TABLE shows the changed rows before the change is applied.\nNEW TABLE and FINAL TABLE show the changed rows after the change is applied.\nFINAL TABLE makes the guarantee that the returned rows hold the actual final column values that will be added or modified, that no other trigger will fire during the statement to cause the values to change or to alter the set of changed rows.  If such a trigger were to fire as part of that SQL statement, the statement is aborted with an error message indicating the name of the trigger that's updating the changed rows.\nThis feature is implemented using triggers logic under the covers.  A temporary trigger is constructed in memory of the form:\n\nCREATE TRIGGER TRIG_123 AFTER INSERT ON T1 REFERENCING NEW TABLE AS NT_123 FOR EACH STATEMENT VALUES 1;\n\nThen the outer SELECT clause is translated to the form SELECT * FROM NT_123, where NT_123 is internally re-written into a VTI function: SELECT * FROM new com.splicemachine.derby.catalog.TriggerNewTransitionRows();\nNormally, Splice does not parse, bind and optimize two separate statements in the same SQL request.  Usually each statement creates its own CompilerContext to track the number of tables referenced, the result set numbers in use and any other items that code generation on the query may need.  The approach I took was to manufacture a CreateTriggerNode representing the temporary trigger and a DMLModStatementNode for the DML in the syntaxer, and build a new FromVTI node as the source for the SELECT.  The CreateTriggerNode and DMLModStatementNode are attached to the FromVTI node.  When the FromVTI node is in the bind phase phase, it also binds these 2 statement nodes and creates an SPSDescriptor and TriggerDescriptor out of the CreateTriggerNode.  The DMLModStatementNode is also optimized in preprocess() so that it is ready for code generation.\nThe temporary trigger should not be made visible to other SQL statements, so the manufactured SPSDescriptor and TriggerDescriptor are placed in a ThreadLocal variable in the DataDictionaryCache.  TableDescriptor.getAllRelevantTriggers() is updated to read the temporary TriggerDescriptor so it will be run along with the DML, and the generate() methods of InsertNode, DeleteNode and UpdateNode are updated to access and serialize the temporary SPSDescriptor so it is available during execution (there were issues in trying to combine everything into the same block for both the DML and the SELECT, so I kept it separate). TriggerDescriptor describes the trigger to fire and SPSDescriptor holds the actual generated code for the trigger that will be executed.  For spark execution this fromTableDmlSpsDescriptor is added into the spsCache ManagedCache, so that it is always accessible (since we can't look in up for the data dictionary).  For FINAL TABLE, the target table's conglomerate id is saved in the broadcastedActivation, so it is handy for spark to access it for error checking.  If an AFTER trigger writes to the same conglomerate, we will error out and abort the statement.\nThe DML statement is executed from VTIOperation.getDataSet() in method executeFromTableDML(), so that the temporary trigger's result rows will be available to the VTI that the SELECT statement is reading from.  The code for this DML is generated in FromVTI.generateFromTableDMLSPSAndPushAsEncodedString() in the code generation phase.  GenericStatement.prepMinion is updated to accept this already parsed and bound statement as a parameter and only perform the code generation on it.  Also, pushing a new CompilerContext is skipped because we want to share the same CompilerContext as we are executing both the SELECT and the DML in a single Activation.", "createdAt": "2020-11-12T00:39:30Z", "url": "https://github.com/splicemachine/spliceengine/pull/4555", "merged": true, "mergeCommit": {"oid": "b477eb4e77b237e2431635197f414bd96c943246"}, "closed": true, "closedAt": "2020-11-13T23:05:06Z", "author": {"login": "msirek"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbngQLgH2gAyNTE5NTM5NTQyOmUyZDY2NDgyZTZmMzU0OTE0ZDM3OTc1ZDUxM2RkM2NlMThiN2ZkZGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdcO1MKgFqTUzMDQ1NTY1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e2d66482e6f354914d37975d513dd3ce18b7fddd", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/e2d66482e6f354914d37975d513dd3ce18b7fddd", "committedDate": "2020-11-12T00:34:43Z", "message": "DB-10525 FINAL TABLE Clause"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/7df489b532d736ad44c90edca40f31c852cdad88", "committedDate": "2020-11-12T04:30:24Z", "message": "DB-10525 Fix spotbugs."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MDAyOTU0", "url": "https://github.com/splicemachine/spliceengine/pull/4555#pullrequestreview-529002954", "createdAt": "2020-11-12T11:39:37Z", "commit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTozOTozN1rOHx27kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDowNTozOVrOHx8Raw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA0MjI1OQ==", "bodyText": "Should we document that TRIG_<kind of a UUID> are reserved names for triggers?\nSame question for NT_<>", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522042259", "createdAt": "2020-11-12T11:39:37Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "diffHunk": "@@ -11599,6 +11665,115 @@ FromTable tableFactor() throws StandardException :\n                                 getContextManager());\n         return fromTable;\n     }\n+|\n+    fromTableType = fromTableType() <TABLE> <LEFT_PAREN> statement = preparableDMLDataStatement() <RIGHT_PAREN>\n+    [ optionalTableClauses = optionalTableProperties() ]  {\n+        boolean isOld = fromTableType.kind == OLD;\n+        boolean isFinalTable = fromTableType.kind == FINAL;\n+        dmlStatement = (DMLModStatementNode)statement;\n+        LanguageConnectionContext lcc = dmlStatement.getLanguageConnectionContext();\n+        tableName = dmlStatement.getTargetTableName();\n+        String uniqueId = java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"_\").toUpperCase();\n+        String tempTriggerName = \"TRIG_\" + uniqueId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA2MDg1NQ==", "bodyText": "Cool helper! Minor suggestion:\nif you use try(ResultSet rs = method....) {, you can remove the finally section.", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522060855", "createdAt": "2020-11-12T12:13:13Z", "author": {"login": "arnaud-splice"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTest.java", "diffHunk": "@@ -567,6 +567,31 @@ protected void testFail(String expectedErrorCode,\n         }\n     }\n \n+    protected void testFail(String expectedErrorCode, String sqlText, SpliceWatcher methodWatcher) throws Exception {\n+        ResultSet rs = null;\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExNzI5Mw==", "bodyText": "I'm not sure I understand the logic with the 2 phase cleanup. Can you add a comment there?", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522117293", "createdAt": "2020-11-12T13:48:14Z", "author": {"login": "arnaud-splice"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/TriggerHandler.java", "diffHunk": "@@ -278,11 +294,15 @@ private void initConnectionContext(LanguageConnectionContext lcc) throws Standar\n     }\n \n     public void cleanup() throws StandardException {\n-        if (triggerActivator != null) {\n-            triggerActivator.cleanup(false);\n+        if (triggerActivator != null && !cleanup2Done) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNTUwMw==", "bodyText": "Should we log the potential error?", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522125503", "createdAt": "2020-11-12T13:59:47Z", "author": {"login": "arnaud-splice"}, "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/TriggerRowHolderImpl.java", "diffHunk": "@@ -471,8 +471,17 @@ private void dropTable(long conglomID) throws StandardException {\n     private void dropConglomerate() throws StandardException {\n         TransactionController tc = activation.getTransactionController();\n         LOG.trace(format(\"Dropping temporary conglomerate splice:%d\", CID));\n-        tc.dropConglomerate(CID);\n-        dropTable(CID);\n+        try {\n+            tc.dropConglomerate(CID);\n+        }\n+        catch (StandardException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNjc0Nw==", "bodyText": "Should we log errors?", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522126747", "createdAt": "2020-11-12T14:01:25Z", "author": {"login": "arnaud-splice"}, "path": "hbase_sql/src/main/java/com/splicemachine/stream/QueryJob.java", "diffHunk": "@@ -114,11 +120,29 @@ public Void call() throws Exception {\n                 SpliceSpark.getContext().sc().cancelJobGroup(jobName);\n             throw e;\n         } finally {\n+            long tempTriggerConglomerate = dsp.getTempTriggerConglomerate();\n+            if (tempTriggerConglomerate != 0 && activation != null)\n+                dropConglomerate(tempTriggerConglomerate, activation);\n             if(resetSession)\n                 SpliceSpark.resetSession();\n             ah.close();\n         }\n \n         return null;\n     }\n+\n+    private void dropConglomerate(long CID, Activation activation) {\n+        TransactionController tc = activation.getTransactionController();\n+        LOG.trace(format(\"Dropping temporary conglomerate splice:%d\", CID));\n+        try {\n+            tc.dropConglomerate(CID);\n+        }\n+        catch (StandardException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyOTc3MQ==", "bodyText": "Update above comment", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522129771", "createdAt": "2020-11-12T14:05:39Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/execute/TriggerExecutionContext.java", "diffHunk": "@@ -158,10 +160,13 @@ public TriggerExecutionContext(ConnectionContext cc,\n         this.cc = cc;\n \n         this.fromSparkExecution = fromSparkExecution;\n+        this.fromTableDmlSpsDescriptor = fromTableDmlSpsDescriptor;\n         // only use the local cache for spark execution\n-        if (fromSparkExecution)\n+        if (fromSparkExecution || fromTableDmlSpsDescriptor != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df489b532d736ad44c90edca40f31c852cdad88"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4acb853977ec2142480af37c01b669052386985e", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/4acb853977ec2142480af37c01b669052386985e", "committedDate": "2020-11-12T22:24:25Z", "message": "DB-10525 Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f01debf54c47d3f512cf8ce5a78c4e3e4e751e15", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/f01debf54c47d3f512cf8ce5a78c4e3e4e751e15", "committedDate": "2020-11-12T23:47:28Z", "message": "Merge branch 'master' into DB-10525"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2507258fae07329538305f29e6ccc93c121e3dcc", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/2507258fae07329538305f29e6ccc93c121e3dcc", "committedDate": "2020-11-13T02:17:34Z", "message": "Merge branch 'master' into DB-10525"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6410faccc61ba5b69d6dfd0b720d354770ec93ec", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/6410faccc61ba5b69d6dfd0b720d354770ec93ec", "committedDate": "2020-11-13T16:03:10Z", "message": "Merge branch 'master' into DB-10525"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b676eb7be47e5701a12d806af59ebf59b61e2217", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/b676eb7be47e5701a12d806af59ebf59b61e2217", "committedDate": "2020-11-13T18:40:28Z", "message": "DB-10525 Move FINAL TABLE error checking to the parser."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "558dc4dfefbc349b247b6cc026297b4850d6543d", "author": {"user": {"login": "msirek", "name": "Mark Sirek"}}, "url": "https://github.com/splicemachine/spliceengine/commit/558dc4dfefbc349b247b6cc026297b4850d6543d", "committedDate": "2020-11-13T20:11:21Z", "message": "DB-10525 Fix spotbugs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNDE3MDMw", "url": "https://github.com/splicemachine/spliceengine/pull/4555#pullrequestreview-530417030", "createdAt": "2020-11-13T21:09:29Z", "commit": {"oid": "558dc4dfefbc349b247b6cc026297b4850d6543d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTowOToyOVrOHy_pWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxNDoyMlrOHy_xBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzMzYyNg==", "bodyText": "boundAndOptimizedStatement with lowercase B", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r523233626", "createdAt": "2020-11-13T21:09:29Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "diffHunk": "@@ -117,6 +118,16 @@ public PreparedStatement prepare(LanguageConnectionContext lcc) throws StandardE\n     }\n \n     public PreparedStatement prepare(LanguageConnectionContext lcc,boolean forMetaData) throws StandardException{\n+        return prepare(lcc, forMetaData, null);\n+    }\n+\n+    // If BoundAndOptimizedStatement is passed in, we don't try to\n+    // parse, bind and optimize the statement from its SQL text\n+    // before passing to code generation.\n+    // Instead we just directly compile BoundAndOptimizedStatement.\n+    public PreparedStatement prepare(LanguageConnectionContext lcc,\n+                                     boolean forMetaData,\n+                                     StatementNode BoundAndOptimizedStatement) throws StandardException{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "558dc4dfefbc349b247b6cc026297b4850d6543d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNDUxNg==", "bodyText": "lowercase B", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r523234516", "createdAt": "2020-11-13T21:11:41Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "diffHunk": "@@ -257,13 +268,21 @@ private boolean isExplainStatement(){\n         return s.startsWith(\"EXPLAIN\");\n     }\n \n+    private PreparedStatement prepMinion(LanguageConnectionContext lcc,\n+                                         boolean cacheMe,\n+                                         Object[] paramDefaults,\n+                                         SchemaDescriptor spsSchema,\n+                                         boolean internalSQL) throws StandardException{\n+        return prepMinion(lcc, cacheMe, paramDefaults, spsSchema, internalSQL, null);\n+    }\n     @SuppressFBWarnings(value = \"ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD\",\n             justification = \"the new object created at line 370 will not be put into cache and it cannot be referenced by other threads\")\n     private PreparedStatement prepMinion(LanguageConnectionContext lcc,\n                                          boolean cacheMe,\n                                          Object[] paramDefaults,\n                                          SchemaDescriptor spsSchema,\n-                                         boolean internalSQL) throws StandardException{\n+                                         boolean internalSQL,\n+                                         StatementNode BoundAndOptimizedStatement) throws StandardException{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "558dc4dfefbc349b247b6cc026297b4850d6543d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNTU4OA==", "bodyText": "I don't like too much using a ThreadLocal like this, at least I think it should go somewhere else other than the DataDictionaryCache (maybe on one of the Context objects?). Can you open a JIRA to revisit this sometime later?", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r523235588", "createdAt": "2020-11-13T21:14:22Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryCache.java", "diffHunk": "@@ -89,6 +89,9 @@\n     private ManagedCache<Long, Optional<String>> catalogVersionCache;\n     private ManagedCache<UUID, ConstraintDescriptorList> constraintDescriptorListCache;\n     private DataDictionary dd;\n+\n+    public static final ThreadLocal<TriggerDescriptor> fromTableTriggerDescriptor = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "558dc4dfefbc349b247b6cc026297b4850d6543d"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNDU0MjAw", "url": "https://github.com/splicemachine/spliceengine/pull/4555#pullrequestreview-530454200", "createdAt": "2020-11-13T22:20:33Z", "commit": {"oid": "558dc4dfefbc349b247b6cc026297b4850d6543d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNDU1NjU1", "url": "https://github.com/splicemachine/spliceengine/pull/4555#pullrequestreview-530455655", "createdAt": "2020-11-13T22:23:53Z", "commit": {"oid": "558dc4dfefbc349b247b6cc026297b4850d6543d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1043, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}