{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MTUxNzU1", "number": 4544, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzowNDoyM1rOE3sidA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDoyMjowNlrOE3uaUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODM2ODUyOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/util/DecimalUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzowNDoyM1rOHxMS6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzowMzoxOFrOHxWHNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0MzcyMA==", "bodyText": "I think you can remove that reference. We will have our own documentation.", "url": "https://github.com/splicemachine/spliceengine/pull/4544#discussion_r521343720", "createdAt": "2020-11-11T13:04:23Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/util/DecimalUtil.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.util;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+import com.splicemachine.db.iapi.types.DataValueDescriptor;\n+import com.splicemachine.db.iapi.types.DataValueFactoryImpl;\n+import com.splicemachine.db.iapi.types.SQLDecfloat;\n+import com.splicemachine.db.iapi.types.SQLDecimal;\n+import com.splicemachine.primitives.Bytes;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\n+public interface DecimalUtil {\n+\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4471c8a70535963339aa217255fdb94d29687bfe"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUwNDU2Nw==", "bodyText": "I would rather keep it for reference (even our documentation will be mirroring that some way of the other I think).", "url": "https://github.com/splicemachine/spliceengine/pull/4544#discussion_r521504567", "createdAt": "2020-11-11T17:03:18Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/util/DecimalUtil.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.util;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+import com.splicemachine.db.iapi.types.DataValueDescriptor;\n+import com.splicemachine.db.iapi.types.DataValueFactoryImpl;\n+import com.splicemachine.db.iapi.types.SQLDecfloat;\n+import com.splicemachine.db.iapi.types.SQLDecimal;\n+import com.splicemachine.primitives.Bytes;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\n+public interface DecimalUtil {\n+\n+    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0MzcyMA=="}, "originalCommit": {"oid": "4471c8a70535963339aa217255fdb94d29687bfe"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODM4MDg0OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/util/DecimalUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzowNzo1NFrOHxMadQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzowNDozMFrOHxWKJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0NTY1Mw==", "bodyText": "Why not construct a SQLDecimal directly from the string?", "url": "https://github.com/splicemachine/spliceengine/pull/4544#discussion_r521345653", "createdAt": "2020-11-11T13:07:54Z", "author": {"login": "arnaud-splice"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/util/DecimalUtil.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.util;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+import com.splicemachine.db.iapi.types.DataValueDescriptor;\n+import com.splicemachine.db.iapi.types.DataValueFactoryImpl;\n+import com.splicemachine.db.iapi.types.SQLDecfloat;\n+import com.splicemachine.db.iapi.types.SQLDecimal;\n+import com.splicemachine.primitives.Bytes;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\n+public interface DecimalUtil {\n+\n+    /**\n+     * Implements DB2 decimal function, for more information go to:\n+     * https://www.ibm.com/support/producthub/db2/docs/content/SSEPGG_11.5.0/com.ibm.db2.luw.sql.ref.doc/doc/r0000791.html\n+     */\n+    static DataValueDescriptor getDecimalDb2(DataValueDescriptor dvd,\n+                                             int precision,\n+                                             int scale,\n+                                             String decimalCharacter) throws StandardException {\n+        if (dvd == null || dvd.isNull()) {\n+            return null;\n+        }\n+        BigDecimal bigDecimal = null;\n+        Calendar cal = null;\n+        switch (DataValueFactoryImpl.Format.formatFor(dvd)) {\n+            case TINYINT: // fallthrough\n+            case SMALLINT: // fallthrough\n+            case INTEGER: // fallthrough\n+            case LONGINT: {\n+                if (String.valueOf(Math.abs(dvd.getLong())).length() > (precision - scale)) {\n+                    throw StandardException.newException(SQLState.LANG_INVALID_DECIMAL_CONVERSION, dvd.toString(), precision, scale); // DB2 SQLSTATE 22003\n+                }\n+                bigDecimal = new BigDecimal(new BigInteger(Bytes.toBytes(dvd.getLong())), 0);\n+            }\n+            break;\n+            case DECIMAL: {\n+                bigDecimal = SQLDecimal.getBigDecimal(dvd);\n+                if (bigDecimal == null) return null;\n+            }\n+            break;\n+            case DECFLOAT: {\n+                bigDecimal = SQLDecfloat.getBigDecimal(dvd);\n+                if (bigDecimal == null) return null;\n+            }\n+            break;\n+            case CHAR: // fallthrough", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4471c8a70535963339aa217255fdb94d29687bfe"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUwNTMxNw==", "bodyText": "The string could contain invalid characters, it could also contain a comma for example and decimal separator(s), I want to catch as many of these errors as possible giving corresponding error messages before actually parsing it into decimal.", "url": "https://github.com/splicemachine/spliceengine/pull/4544#discussion_r521505317", "createdAt": "2020-11-11T17:04:30Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/util/DecimalUtil.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.util;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+import com.splicemachine.db.iapi.types.DataValueDescriptor;\n+import com.splicemachine.db.iapi.types.DataValueFactoryImpl;\n+import com.splicemachine.db.iapi.types.SQLDecfloat;\n+import com.splicemachine.db.iapi.types.SQLDecimal;\n+import com.splicemachine.primitives.Bytes;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\n+public interface DecimalUtil {\n+\n+    /**\n+     * Implements DB2 decimal function, for more information go to:\n+     * https://www.ibm.com/support/producthub/db2/docs/content/SSEPGG_11.5.0/com.ibm.db2.luw.sql.ref.doc/doc/r0000791.html\n+     */\n+    static DataValueDescriptor getDecimalDb2(DataValueDescriptor dvd,\n+                                             int precision,\n+                                             int scale,\n+                                             String decimalCharacter) throws StandardException {\n+        if (dvd == null || dvd.isNull()) {\n+            return null;\n+        }\n+        BigDecimal bigDecimal = null;\n+        Calendar cal = null;\n+        switch (DataValueFactoryImpl.Format.formatFor(dvd)) {\n+            case TINYINT: // fallthrough\n+            case SMALLINT: // fallthrough\n+            case INTEGER: // fallthrough\n+            case LONGINT: {\n+                if (String.valueOf(Math.abs(dvd.getLong())).length() > (precision - scale)) {\n+                    throw StandardException.newException(SQLState.LANG_INVALID_DECIMAL_CONVERSION, dvd.toString(), precision, scale); // DB2 SQLSTATE 22003\n+                }\n+                bigDecimal = new BigDecimal(new BigInteger(Bytes.toBytes(dvd.getLong())), 0);\n+            }\n+            break;\n+            case DECIMAL: {\n+                bigDecimal = SQLDecimal.getBigDecimal(dvd);\n+                if (bigDecimal == null) return null;\n+            }\n+            break;\n+            case DECFLOAT: {\n+                bigDecimal = SQLDecfloat.getBigDecimal(dvd);\n+                if (bigDecimal == null) return null;\n+            }\n+            break;\n+            case CHAR: // fallthrough", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0NTY1Mw=="}, "originalCommit": {"oid": "4471c8a70535963339aa217255fdb94d29687bfe"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODYyODk1OnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/util/DecimalUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDoxMToyMlrOHxOwsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzowNTozNlrOHxWM3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM4NDExNQ==", "bodyText": "Use BigInteger.valueOf(long val) instead", "url": "https://github.com/splicemachine/spliceengine/pull/4544#discussion_r521384115", "createdAt": "2020-11-11T14:11:22Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/util/DecimalUtil.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.util;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+import com.splicemachine.db.iapi.types.DataValueDescriptor;\n+import com.splicemachine.db.iapi.types.DataValueFactoryImpl;\n+import com.splicemachine.db.iapi.types.SQLDecfloat;\n+import com.splicemachine.db.iapi.types.SQLDecimal;\n+import com.splicemachine.primitives.Bytes;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\n+public interface DecimalUtil {\n+\n+    /**\n+     * Implements DB2 decimal function, for more information go to:\n+     * https://www.ibm.com/support/producthub/db2/docs/content/SSEPGG_11.5.0/com.ibm.db2.luw.sql.ref.doc/doc/r0000791.html\n+     */\n+    static DataValueDescriptor getDecimalDb2(DataValueDescriptor dvd,\n+                                             int precision,\n+                                             int scale,\n+                                             String decimalCharacter) throws StandardException {\n+        if (dvd == null || dvd.isNull()) {\n+            return null;\n+        }\n+        BigDecimal bigDecimal = null;\n+        Calendar cal = null;\n+        switch (DataValueFactoryImpl.Format.formatFor(dvd)) {\n+            case TINYINT: // fallthrough\n+            case SMALLINT: // fallthrough\n+            case INTEGER: // fallthrough\n+            case LONGINT: {\n+                if (String.valueOf(Math.abs(dvd.getLong())).length() > (precision - scale)) {\n+                    throw StandardException.newException(SQLState.LANG_INVALID_DECIMAL_CONVERSION, dvd.toString(), precision, scale); // DB2 SQLSTATE 22003\n+                }\n+                bigDecimal = new BigDecimal(new BigInteger(Bytes.toBytes(dvd.getLong())), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4471c8a70535963339aa217255fdb94d29687bfe"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUwNjAxMg==", "bodyText": "done.", "url": "https://github.com/splicemachine/spliceengine/pull/4544#discussion_r521506012", "createdAt": "2020-11-11T17:05:36Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/util/DecimalUtil.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.util;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+import com.splicemachine.db.iapi.types.DataValueDescriptor;\n+import com.splicemachine.db.iapi.types.DataValueFactoryImpl;\n+import com.splicemachine.db.iapi.types.SQLDecfloat;\n+import com.splicemachine.db.iapi.types.SQLDecimal;\n+import com.splicemachine.primitives.Bytes;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\n+public interface DecimalUtil {\n+\n+    /**\n+     * Implements DB2 decimal function, for more information go to:\n+     * https://www.ibm.com/support/producthub/db2/docs/content/SSEPGG_11.5.0/com.ibm.db2.luw.sql.ref.doc/doc/r0000791.html\n+     */\n+    static DataValueDescriptor getDecimalDb2(DataValueDescriptor dvd,\n+                                             int precision,\n+                                             int scale,\n+                                             String decimalCharacter) throws StandardException {\n+        if (dvd == null || dvd.isNull()) {\n+            return null;\n+        }\n+        BigDecimal bigDecimal = null;\n+        Calendar cal = null;\n+        switch (DataValueFactoryImpl.Format.formatFor(dvd)) {\n+            case TINYINT: // fallthrough\n+            case SMALLINT: // fallthrough\n+            case INTEGER: // fallthrough\n+            case LONGINT: {\n+                if (String.valueOf(Math.abs(dvd.getLong())).length() > (precision - scale)) {\n+                    throw StandardException.newException(SQLState.LANG_INVALID_DECIMAL_CONVERSION, dvd.toString(), precision, scale); // DB2 SQLSTATE 22003\n+                }\n+                bigDecimal = new BigDecimal(new BigInteger(Bytes.toBytes(dvd.getLong())), 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM4NDExNQ=="}, "originalCommit": {"oid": "4471c8a70535963339aa217255fdb94d29687bfe"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODY1NzIzOnYy", "diffSide": "RIGHT", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/util/DecimalUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDoxODoxNFrOHxPCLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzowOTo1N1rOHxWXRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM4ODU4OQ==", "bodyText": "Isn't this removing the decimalCharacter? How do we use it later?", "url": "https://github.com/splicemachine/spliceengine/pull/4544#discussion_r521388589", "createdAt": "2020-11-11T14:18:14Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/util/DecimalUtil.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.util;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+import com.splicemachine.db.iapi.types.DataValueDescriptor;\n+import com.splicemachine.db.iapi.types.DataValueFactoryImpl;\n+import com.splicemachine.db.iapi.types.SQLDecfloat;\n+import com.splicemachine.db.iapi.types.SQLDecimal;\n+import com.splicemachine.primitives.Bytes;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\n+public interface DecimalUtil {\n+\n+    /**\n+     * Implements DB2 decimal function, for more information go to:\n+     * https://www.ibm.com/support/producthub/db2/docs/content/SSEPGG_11.5.0/com.ibm.db2.luw.sql.ref.doc/doc/r0000791.html\n+     */\n+    static DataValueDescriptor getDecimalDb2(DataValueDescriptor dvd,\n+                                             int precision,\n+                                             int scale,\n+                                             String decimalCharacter) throws StandardException {\n+        if (dvd == null || dvd.isNull()) {\n+            return null;\n+        }\n+        BigDecimal bigDecimal = null;\n+        Calendar cal = null;\n+        switch (DataValueFactoryImpl.Format.formatFor(dvd)) {\n+            case TINYINT: // fallthrough\n+            case SMALLINT: // fallthrough\n+            case INTEGER: // fallthrough\n+            case LONGINT: {\n+                if (String.valueOf(Math.abs(dvd.getLong())).length() > (precision - scale)) {\n+                    throw StandardException.newException(SQLState.LANG_INVALID_DECIMAL_CONVERSION, dvd.toString(), precision, scale); // DB2 SQLSTATE 22003\n+                }\n+                bigDecimal = new BigDecimal(new BigInteger(Bytes.toBytes(dvd.getLong())), 0);\n+            }\n+            break;\n+            case DECIMAL: {\n+                bigDecimal = SQLDecimal.getBigDecimal(dvd);\n+                if (bigDecimal == null) return null;\n+            }\n+            break;\n+            case DECFLOAT: {\n+                bigDecimal = SQLDecfloat.getBigDecimal(dvd);\n+                if (bigDecimal == null) return null;\n+            }\n+            break;\n+            case CHAR: // fallthrough\n+            case VARCHAR: {\n+                String input = dvd.getString();\n+                if (input == null) return null;\n+                input = input.trim().replace(decimalCharacter, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4471c8a70535963339aa217255fdb94d29687bfe"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM5Njg1Mw==", "bodyText": "After seeing the ITs I think you are using as \"digit group separator\" but I'm pretty sure it's supposed to be the \"fractional separator\". From the docs:\n\nit can appear at most once in string-expression\n\nand\n\nDigits are truncated from the end of the decimal number if the number of digits to the right of the decimal separator character is greater than the scale scale. An error is returned if the number of significant digits to the left of the decimal character (the whole part of the number) in string-expression is greater than precision - scale", "url": "https://github.com/splicemachine/spliceengine/pull/4544#discussion_r521396853", "createdAt": "2020-11-11T14:30:06Z", "author": {"login": "dgomezferro"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/util/DecimalUtil.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.util;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+import com.splicemachine.db.iapi.types.DataValueDescriptor;\n+import com.splicemachine.db.iapi.types.DataValueFactoryImpl;\n+import com.splicemachine.db.iapi.types.SQLDecfloat;\n+import com.splicemachine.db.iapi.types.SQLDecimal;\n+import com.splicemachine.primitives.Bytes;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\n+public interface DecimalUtil {\n+\n+    /**\n+     * Implements DB2 decimal function, for more information go to:\n+     * https://www.ibm.com/support/producthub/db2/docs/content/SSEPGG_11.5.0/com.ibm.db2.luw.sql.ref.doc/doc/r0000791.html\n+     */\n+    static DataValueDescriptor getDecimalDb2(DataValueDescriptor dvd,\n+                                             int precision,\n+                                             int scale,\n+                                             String decimalCharacter) throws StandardException {\n+        if (dvd == null || dvd.isNull()) {\n+            return null;\n+        }\n+        BigDecimal bigDecimal = null;\n+        Calendar cal = null;\n+        switch (DataValueFactoryImpl.Format.formatFor(dvd)) {\n+            case TINYINT: // fallthrough\n+            case SMALLINT: // fallthrough\n+            case INTEGER: // fallthrough\n+            case LONGINT: {\n+                if (String.valueOf(Math.abs(dvd.getLong())).length() > (precision - scale)) {\n+                    throw StandardException.newException(SQLState.LANG_INVALID_DECIMAL_CONVERSION, dvd.toString(), precision, scale); // DB2 SQLSTATE 22003\n+                }\n+                bigDecimal = new BigDecimal(new BigInteger(Bytes.toBytes(dvd.getLong())), 0);\n+            }\n+            break;\n+            case DECIMAL: {\n+                bigDecimal = SQLDecimal.getBigDecimal(dvd);\n+                if (bigDecimal == null) return null;\n+            }\n+            break;\n+            case DECFLOAT: {\n+                bigDecimal = SQLDecfloat.getBigDecimal(dvd);\n+                if (bigDecimal == null) return null;\n+            }\n+            break;\n+            case CHAR: // fallthrough\n+            case VARCHAR: {\n+                String input = dvd.getString();\n+                if (input == null) return null;\n+                input = input.trim().replace(decimalCharacter, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM4ODU4OQ=="}, "originalCommit": {"oid": "4471c8a70535963339aa217255fdb94d29687bfe"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUwODY3Ng==", "bodyText": "You're right, I glimpsed over that, thanks for pointing it out.", "url": "https://github.com/splicemachine/spliceengine/pull/4544#discussion_r521508676", "createdAt": "2020-11-11T17:09:57Z", "author": {"login": "hatyo"}, "path": "db-engine/src/main/java/com/splicemachine/db/iapi/util/DecimalUtil.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.db.iapi.util;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+import com.splicemachine.db.iapi.types.DataValueDescriptor;\n+import com.splicemachine.db.iapi.types.DataValueFactoryImpl;\n+import com.splicemachine.db.iapi.types.SQLDecfloat;\n+import com.splicemachine.db.iapi.types.SQLDecimal;\n+import com.splicemachine.primitives.Bytes;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\n+public interface DecimalUtil {\n+\n+    /**\n+     * Implements DB2 decimal function, for more information go to:\n+     * https://www.ibm.com/support/producthub/db2/docs/content/SSEPGG_11.5.0/com.ibm.db2.luw.sql.ref.doc/doc/r0000791.html\n+     */\n+    static DataValueDescriptor getDecimalDb2(DataValueDescriptor dvd,\n+                                             int precision,\n+                                             int scale,\n+                                             String decimalCharacter) throws StandardException {\n+        if (dvd == null || dvd.isNull()) {\n+            return null;\n+        }\n+        BigDecimal bigDecimal = null;\n+        Calendar cal = null;\n+        switch (DataValueFactoryImpl.Format.formatFor(dvd)) {\n+            case TINYINT: // fallthrough\n+            case SMALLINT: // fallthrough\n+            case INTEGER: // fallthrough\n+            case LONGINT: {\n+                if (String.valueOf(Math.abs(dvd.getLong())).length() > (precision - scale)) {\n+                    throw StandardException.newException(SQLState.LANG_INVALID_DECIMAL_CONVERSION, dvd.toString(), precision, scale); // DB2 SQLSTATE 22003\n+                }\n+                bigDecimal = new BigDecimal(new BigInteger(Bytes.toBytes(dvd.getLong())), 0);\n+            }\n+            break;\n+            case DECIMAL: {\n+                bigDecimal = SQLDecimal.getBigDecimal(dvd);\n+                if (bigDecimal == null) return null;\n+            }\n+            break;\n+            case DECFLOAT: {\n+                bigDecimal = SQLDecfloat.getBigDecimal(dvd);\n+                if (bigDecimal == null) return null;\n+            }\n+            break;\n+            case CHAR: // fallthrough\n+            case VARCHAR: {\n+                String input = dvd.getString();\n+                if (input == null) return null;\n+                input = input.trim().replace(decimalCharacter, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM4ODU4OQ=="}, "originalCommit": {"oid": "4471c8a70535963339aa217255fdb94d29687bfe"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODY3NTM2OnYy", "diffSide": "LEFT", "path": "mem_sql/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDoyMjowNlrOHxPM-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMTo0OTo1NlrOHxfkUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM5MTM1Mw==", "bodyText": "Please restore this, otherwise we are going to generate lots of files on mem builds", "url": "https://github.com/splicemachine/spliceengine/pull/4544#discussion_r521391353", "createdAt": "2020-11-11T14:22:06Z", "author": {"login": "dgomezferro"}, "path": "mem_sql/pom.xml", "diffHunk": "@@ -259,12 +259,10 @@\n                             <key>com.splicemachine.enableLegacyAsserts</key>\n                             <value>true</value>\n                         </systemProperty>\n-                        <!-- Uncomment the following to dump activation class files for mem platform to the mem_sql directory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4471c8a70535963339aa217255fdb94d29687bfe"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1OTQ3Mg==", "bodyText": "Sorry, checked in by mistake, reverted.", "url": "https://github.com/splicemachine/spliceengine/pull/4544#discussion_r521659472", "createdAt": "2020-11-11T21:49:56Z", "author": {"login": "hatyo"}, "path": "mem_sql/pom.xml", "diffHunk": "@@ -259,12 +259,10 @@\n                             <key>com.splicemachine.enableLegacyAsserts</key>\n                             <value>true</value>\n                         </systemProperty>\n-                        <!-- Uncomment the following to dump activation class files for mem platform to the mem_sql directory.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM5MTM1Mw=="}, "originalCommit": {"oid": "4471c8a70535963339aa217255fdb94d29687bfe"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2818, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}