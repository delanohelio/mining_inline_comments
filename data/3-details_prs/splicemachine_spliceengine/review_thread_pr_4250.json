{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5OTUzODE2", "number": 4250, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTo0NTozOFrOEs9Pxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTo0NTozOFrOEs9Pxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTc2MjYzOnYy", "diffSide": "RIGHT", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/actions/index/IndexIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTo0NTozOFrOHgediA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMTowMDo0MlrOHhk4kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxNTU2MA==", "bodyText": "could you also verify the results of these operations?", "url": "https://github.com/splicemachine/spliceengine/pull/4250#discussion_r503815560", "createdAt": "2020-10-13T09:45:38Z", "author": {"login": "hatyo"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/actions/index/IndexIT.java", "diffHunk": "@@ -964,6 +964,21 @@ public void testCreateIndexAndInsertWithExpressionsNullInput() throws Exception\n          */\n     }\n \n+    // DB-10431\n+    @Test\n+    public void testCreateIndexAndInsertWithExpressionsBatchWithFullNullRow() throws Exception {\n+        String tableName = \"TEST_IDX_BATCH_INSERT\";\n+        methodWatcher.executeUpdate(format(\"create table %s (c char(4), i int, d double)\", tableName));\n+        methodWatcher.executeUpdate(format(\"insert into %s values ('abc', 10, 1.1), ('def', 20, 2.2)\", tableName));\n+\n+        methodWatcher.executeUpdate(format(\"CREATE INDEX %s_IDX ON %s (upper(c), i + 2)\", tableName, tableName));\n+\n+        // Without the fix, the following insert fails sporadically. It depends on the order of inserting rows. If\n+        // (NULL, NULL, NULL) is inserted first, it fails. With the fix, it should never fail.\n+        methodWatcher.executeUpdate(format(\"insert into %s values ('jkl', 30, 2.2), (NULL, NULL, NULL)\", tableName));\n+        methodWatcher.executeUpdate(format(\"update %s set c = 'def' where i = 10\", tableName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcc4c6bd9522f1f34dcf0b626072650029e4f8c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk2OTM2MQ==", "bodyText": "Yes. Since we have only the index expr DDL/DML changes in master, we cannot query using the index yet. Nevertheless, I verify the result by issuing a select without the expr index to make sure insert and update ops modify data as expected.", "url": "https://github.com/splicemachine/spliceengine/pull/4250#discussion_r504969361", "createdAt": "2020-10-14T21:00:42Z", "author": {"login": "ascend1"}, "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/actions/index/IndexIT.java", "diffHunk": "@@ -964,6 +964,21 @@ public void testCreateIndexAndInsertWithExpressionsNullInput() throws Exception\n          */\n     }\n \n+    // DB-10431\n+    @Test\n+    public void testCreateIndexAndInsertWithExpressionsBatchWithFullNullRow() throws Exception {\n+        String tableName = \"TEST_IDX_BATCH_INSERT\";\n+        methodWatcher.executeUpdate(format(\"create table %s (c char(4), i int, d double)\", tableName));\n+        methodWatcher.executeUpdate(format(\"insert into %s values ('abc', 10, 1.1), ('def', 20, 2.2)\", tableName));\n+\n+        methodWatcher.executeUpdate(format(\"CREATE INDEX %s_IDX ON %s (upper(c), i + 2)\", tableName, tableName));\n+\n+        // Without the fix, the following insert fails sporadically. It depends on the order of inserting rows. If\n+        // (NULL, NULL, NULL) is inserted first, it fails. With the fix, it should never fail.\n+        methodWatcher.executeUpdate(format(\"insert into %s values ('jkl', 30, 2.2), (NULL, NULL, NULL)\", tableName));\n+        methodWatcher.executeUpdate(format(\"update %s set c = 'def' where i = 10\", tableName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxNTU2MA=="}, "originalCommit": {"oid": "bdcc4c6bd9522f1f34dcf0b626072650029e4f8c"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2968, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}